{"duplication" : {"["if(!isKeyword(token))","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.FROM});","previousToken();","returnselCmd;","finalprivateCommandSelectselect()throwsSQLException{","CommandSelectselCmd=singleSelect();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidafterLast()throwsException{","if(rowIdx+1\<rowList.size()){","rowIdx=rowList.size()-1;","rowSource.setRowPosition(rowList.get(rowIdx));","while(next()){/*scrollaftertheend*/}","booleanabsolute(introw)throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(long)(readDouble()*10000L);","caseSQLTokenizer.MONEY:","returnreadLong();","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnrowIdx==0&&rowList.size()\>0;","booleanfirst()throwsException{","rowIdx=-1;","returnnext();","booleanprevious()throwsException{","if(rowIdx\>-1){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["privatestaticfinalint[]MISSING_OJ={SQLTokenizer.OJ};","privatestaticfinalint[]MISSING_ON={SQLTokenizer.ON};","privatestaticfinalint[]MISSING_KEYTYPE={SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.FOREIGN};","privatestaticfinalint[]MISSING_KEY={SQLTokenizer.KEY};","privatestaticfinalint[]MISSING_REFERENCES={SQLTokenizer.REFERENCES};","privatestaticfinalint[]MISSING_AS={SQLTokenizer.AS};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncurrentDS.getString(colIdx);","finalbyte[]getBytes(intcolIdx)throwsException{","returncurrentDS.getBytes(colIdx);","finalintgetDataType(intcolIdx){","returncurrentDS.getDataType(colIdx);","TableViewgetTableView(){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnrow==1;","voidbeforeFirst()throwsException{","scrollStatus.reset();","row=0;","useSetRowPosition=false;","booleanfirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRight();","break;","caseSQLTokenizer.RTRIM:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRTrim();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["continue;","default:","previousToken();","returnleftExpr;","if(isNot){","isNot=false;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnode;","returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,longkey,booleanisLastValue,intdigitCount)throwsSQLException{","for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));","if(i==0){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["throwSmallSQLException.create(Language.COL_INVALID_NAME,newObject[]{expr.getName()});","if(t==tables.size())","throwSmallSQLException.create(Language.COL_WRONG_PREFIX,tableAlias);","}else{","booleanisSetFrom=false;","for(intt=0;t\<tables.size();t++){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["intvalueLength=value.length;","longcarryover=0;","for(inti=0;i\<valueLength;i++){","longv=(value[i]&0xFFFFFFFFL)+carryover;","value[i]=(int)(v/quotient);","carryover=((v%quotient)\<\<32);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["buffer.append((char)((v%10000)/1000+\'0\'));","buffer.append((char)((v%1000)/100+\'0\'));","buffer.append((char)((v%100)/10+\'0\'));","buffer.append((char)((v%10)+\'0\'));","returnbuffer.toString();","publicbooleanequals(Objectobj){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["BigDecimalbig=toBigDecimal().multiply(num.toBigDecimal());","setValue(big.unscaledValue().toByteArray());","scale=big.scale();","signum=big.signum();","finalvoidmul(intfactor){","if(factor\<0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();","row=0;","finalbooleanfirst()throwsException{","isCurrentRow=rowSource.first();","while(isCurrentRow&&!isValidRow()){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["daten[4]=hex2byte(chars,11);","daten[7]=hex2byte(chars,14);","daten[6]=hex2byte(chars,16);","daten[8]=hex2byte(chars,19);","daten[9]=hex2byte(chars,21);","daten[10]=hex2byte(chars,24);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{COL_MISSING,\"Colonna\'\'{0}\'\'nontrovata.\"},","{COL_VAL_UNMATCH,\"IlconteggiodicolonneevalorinonÃ¨identico.\"},","{COL_INVALID_SIZE,\"Lunghezzanonvalida({0})perlacolonna\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Ilprefissodicolonna\'\'{0}\'\'noncoincideconunaliasonomeditabellausatonellaquery.\"},","{COL_READONLY,\"Lacolonna\'\'{0}\'\'Ã¨disolalettura.\"},","{COL_INVALID_NAME,\"Nomedicolonnanonvalido\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["page=newbyte[PAGE_CONTROL_SIZE];","writeFinsh(con);","privateintoffset;//aktuelleread/writePositioninderPage","intgetCurrentOffsetInPage(){","returnoffset;","voidsetCurrentOffsetInPage(intnewOffset){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}catch(Throwableth){","throwSmallSQLException.createFromException(th);","StringdbKey=file.getName()+\";readonly=\"+con.isReadOnly();","synchronized(databases){","Databasedb=(Database)databases.get(dbKey);","if(db==null){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(lengthColumn\<length){","Objectparams=newObject[]{newInteger(length),newInteger(lengthColumn)};","throwSmallSQLException.create(Language.VALUE_BIN_TOOLARGE,params);","if(varBinary)lengthColumn=length;","intnewSize=offset+2+lengthColumn;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\>0)","value=newValue;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)col;","if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;","isUpdateNeeded=true;","continue;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returntrue;","publicStringgetCatalogSeparator(){","return\".\";","publicbooleansupportsSchemasInDataManipulation(){","returnfalse;","publicbooleansupportsSchemasInProcedureCalls(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalfloatgetFloat()throwsException{","return(float)getDouble();","longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["finalvoidbeforeFirst()throwsException{","dataSourceIdx=0;","currentDS=dataSources.get(0);","currentDS.beforeFirst();","row=0;","finalbooleanfirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseSQLTokenizer.BLOB:","returnreadLongBinary();","caseSQLTokenizer.UNIQUEIDENTIFIER:","bytes=newbyte[16];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(listType==SQLTokenizer.ORDER&&token!=null){","switch(token.value){","caseSQLTokenizer.DESC:","expr.setAlias(SQLTokenizer.DESC_STR);","caseSQLTokenizer.ASC:","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["parthesisCount++;","cmd.noColumns=true;","}else{","previousToken();","Expressionslist=expressionParenthesisList(cmd);","for(inti=0;i\<list.size();i++){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(dataSources.size()\>dataSourceIdx+1){","currentDS=dataSources.get(++dataSourceIdx);","currentDS.beforeFirst();","n=currentDS.next();","if(n)returntrue;","row=0;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["static{","addKeyWord(\"OR\",OR);","addKeyWord(\"AND\",AND);","addKeyWord(\"IS\",IS);","addKeyWord(\"NOT\",NOT);","addKeyWord(\"NULL\",NULL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.VARBINARY:{","byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();","if(length\<bytes.length){","byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayOutputStreambaos=newByteArrayOutputStream();","ObjectOutputStreamoos=newObjectOutputStream(baos);","oos.writeObject(expr.getObject());","writeLongBinary(baos.toByteArray());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetResult().getDouble();","finallonggetMoney()throwsException{","returngetResult().getMoney();","finalMutableNumericgetNumeric()throwsException{","returngetResult().getNumeric();","finalObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["intgetUpdateCount(){","returnupdateCount;","booleangetMoreResults(){","rs=null;","updateCount=-1;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["System.arraycopy(bytes,bytes.length-length,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intlength=param2.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["addKeyWord(\"INTEGER\",INT);","addKeyWord(\"INT\",INT);","addKeyWord(\"SERIAL\",COUNTER);//aliasforMySQLandPostgreSQL","addKeyWord(\"COUNTER\",COUNTER);","addKeyWord(\"BIGINT\",BIGINT);","addKeyWord(\"SMALLMONEY\",SMALLMONEY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnSQLTokenizer.SQL_TSI_MINUTE;","caseSQLTokenizer.HOUR:","returnSQLTokenizer.SQL_TSI_HOUR;","caseSQLTokenizer.D:","caseSQLTokenizer.DAY:","returnSQLTokenizer.SQL_TSI_DAY;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["returnmoney;","publicintintValue(){","return(int)(value/10000.0);","publicfloatfloatValue(){","returnvalue/10000.0F;","publicdoubledoubleValue(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["returnUtils.bytes2unique(param1.getBytes(),0);","Object[]param={SQLTokenizer.getKeyWord(dataType)};","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV,param);","finalprivateStringconvertToString()throwsException{","if(param2!=null){","inttype=param1.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.NCLOB:","returnTypes.CLOB;","caseSQLTokenizer.JAVA_OBJECT:","returnTypes.JAVA_OBJECT;","caseSQLTokenizer.UNIQUEIDENTIFIER:","return-11;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionATan();","break;","caseSQLTokenizer.ATAN2:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionATan2();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();","default:","returntoString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;","tabLockConnection=con;","tabLockCount++;"]": ["|project://smallsql/src/smallsql/database/Table.java|","|project://smallsql/src/smallsql/database/Table.java|"],
"["switch(token.value){","caseSQLTokenizer.CONVERT:{","Columncol;","Expressionstyle=null;","if(isEscape){","expr=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicintgetPrecision(intcolumn)throwsSQLException{","returngetColumnExpression(column).getPrecision();","publicintgetScale(intcolumn)throwsSQLException{","returngetColumnExpression(column).getScale();","publicStringgetTableName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getTableName();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["setNull(findParameter(parameterName),sqlType);","publicvoidsetBoolean(StringparameterName,booleanx)throwsSQLException{","setBoolean(findParameter(parameterName),x);","publicvoidsetByte(StringparameterName,bytex)throwsSQLException{","setByte(findParameter(parameterName),x);","publicvoidsetShort(StringparameterName,shortx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(token==null){","previousToken();","returnlist;","switch(token.value){","caseSQLTokenizer.COMMA:","continue;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintCLOB=362;","staticfinalintNCLOB=363;","staticfinalintUNIQUEIDENTIFIER=370;","staticfinalintJAVA_OBJECT=371;","static{","addKeyWord(\"BIT\",BIT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["abstractTableViewgetTableView();","booleanisExpressionsFromThisRowSource(Expressionscolumns){","for(inti=0;i\<columns.size();i++){","ExpressionNameexpr=(ExpressionName)columns.get(i);","if(this!=expr.getDataSource()){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","returnInteger.MAX_VALUE;","if(defaultValue==-1)","thrownewError(\"Precision:\"+SQLTokenizer.getKeyWord(dataType));","returndefaultValue;","publicintgetColumnDisplaySize(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["importjava.util.ArrayList;","finalclassSSDatabaseMetaDataimplementsDatabaseMetaData{","finalprivateSSConnectioncon;","finalprivateSSStatementst;","SSDatabaseMetaData(SSConnectioncon)throwsSQLException{","this.con=con;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["commandSelect.updateRow(con,updateValues);","voidinsertRow(Expression[]updateValues)throwsException{","commandSelect.insertRow(con,updateValues);","booleanisNull(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["privatestaticfinalintDELETED=1;","privatestaticfinalintUPDATE_POINTER=2;","privatestaticfinalintUPDATED_PAGE=3;","finalprivateTabletable;","privatebooleansharedPageData;","privateStorePagestorePage;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["try{","if(raFile!=null&&page!=null){","ByteBufferbuffer=ByteBuffer.wrap(page,0,pageSize);","synchronized(raFile){","if(fileOffset\<0){","fileOffset=raFile.size();"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["voidmul(MutableNumericnum){","BigDecimalbig=toBigDecimal().multiply(num.toBigDecimal());","setValue(big.unscaledValue().toByteArray());","scale=big.scale();","signum=big.signum();","finalvoidmul(intfactor){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["break;","caseSQLTokenizer.RADIANS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRadians();","break;","caseSQLTokenizer.RAND:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleansupportsSchemasInDataManipulation(){","returnfalse;","publicbooleansupportsSchemasInProcedureCalls(){","returnfalse;","publicbooleansupportsSchemasInTableDefinitions(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","classStorePageextendsTransactionStep{"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_R){","returnlist;","previousToken();","while(true){","list.add(expression(cmd,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intcount=md.getColumnCount();","for(inti=1;i\<=count;i++){","System.out.print(md.getColumnLabel(i));","System.out.print(\'\\t\');","System.out.println();","while(rs.next()){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["returnautoCommit;","voidadd(TransactionStepstorePage)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){","commitPages.add(storePage);","publicvoidcommit()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["newIndexes.create(con,database,this);","if(existIndexes==null){","this.indexes=newIndexes;","}else{","this.indexes=existIndexes;","existIndexes.add(newIndexes);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["updateValue(columnIndex,x,-1);","publicvoidupdateNull(StringcolumnName)throwsSQLException{","updateNull(findColumn(columnName));","publicvoidupdateBoolean(StringcolumnName,booleanx)throwsSQLException{","updateBoolean(findColumn(columnName),x);","publicvoidupdateByte(StringcolumnName,bytex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["t+=86400000;","d--;","intmillis=t%1000;","t/=1000;","synchronized(cal){","cal.setTimeZone(timezone);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["unique?SQLTokenizer.UNIQUE:SQLTokenizer.INDEX,","expressions,","columns);","Object[]param={\"CreateIndex\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandCreateDatabasecreateProcedure()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ExpressionFunctionCaseexprCase=newExpressionFunctionCase();","for(inti=0;i\<paramCount-1;i+=2)","exprCase.addCase(params[i],params[i+1]);","exprCase.setEnd();","expr=exprCase;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TIMESTAMP:","return9;//nanoseconds","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return38;","default:return0;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["caseSUB:returnleft.getLong()-right.getLong();","caseMUL:returnleft.getLong()*right.getLong();","caseDIV:returnleft.getLong()/right.getLong();","caseNEGATIVE:return-left.getLong();","caseMOD:returnleft.getLong()%right.getLong();","caseBIT_NOT:return~right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=newObject[0][0];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnUtils.getInteger(param1.getInt()&0xFF);","caseSQLTokenizer.SMALLINT:","returnUtils.getInteger((short)param1.getInt());","caseSQLTokenizer.INT:","returnUtils.getInteger(param1.getInt());","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(rowList.size()==0)returntrue;","returnfalse;","voidafterLast()throwsException{","if(rowIdx+1\<rowList.size()){","rowIdx=rowList.size()-1;","rowSource.setRowPosition(rowList.get(rowIdx));"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["IndexNodepage=rootPage;","intcount=expressions.size();","for(inti=0;i\<count;i++){","page=findRows(page,expressions.get(i),searchNullValues,nodeList);","if(page==null)","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["where(cmd);","returncmd;","privateCommandtruncate()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_TABLE);","from(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(tokenIdx\>tokens.size()){","returnnull;","return(SQLToken)tokens.get(tokenIdx-1);","privatevoidpreviousToken(){","tokenIdx--;","privateSQLTokennextToken(){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=con.getDatabase(false).getBestRowIdentifier(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}else{","locks.put(pageKey,lock.nextLock);","}else{","prev.nextLock=lock.nextLock;","return;","prev=lock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(dataType,precision);","intgetColumnSize(){","if(SSResultSetMetaData.isNumberDataType(dataType))","returngetPrecision();","elsereturngetDisplaySize();"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returnnull;","returnnode.addRoot();","thrownewError();","finalprivateIndexNodefind(IndexNodenode,char[]key,ArrayListnodeList){","intlength=key.length;","inti=-1;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicBigDecimaltoBigDecimal(intnewScale){","if(newScale==this.scale)returntoBigDecimal();","returntoBigDecimal().setScale(newScale,BigDecimal.ROUND_HALF_EVEN);","publicObjectgetImmutableObject(){","returntoBigDecimal();","privatestaticfinalbyte[]EMPTY_BYTES=newbyte[0];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["createColumns(con);","View(Databasedatabase,SSConnectioncon,Stringname,Stringsql)throwsException{","super(name,newColumns());","this.sql=sql;","this.commandSelect=null;","write(database,con);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["break;","caseSQLTokenizer.SIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSin();","break;","caseSQLTokenizer.SIGN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnUtils.long2int(getLong());","finallonggetLong()throwsException{","returnUtils.double2long(getDouble());","finalfloatgetFloat()throwsException{","return(float)getDouble();","MutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["privateinttype;","privateStoreImplupdatePointer;","privateStoreImpl(Tabletable,StorePagestorePage,inttype,longfilePos){","this.table=table;","this.storePage=storePage;","this.filePos=filePos;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintUSE=228;","staticfinalintTOP=229;","staticfinalintADD=230;","staticfinalintLIMIT=231;","staticfinalintDATABASE=235;","staticfinalintTABLE=236;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalpublicintexecuteUpdate(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);","returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);","returnexecuteUpdate(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["CommandSelectcmd=newCommandSelect(con.log);","for(inti=0;i\<colNames.length;i++){","ExpressionNameexpr=newExpressionName(colNames[i]);","cmd.addColumnExpression(expr);","expr.setFrom(source,i,source.getColumn(i));","cmd.setSource(source);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnexpr.getBoolean();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbytegetByte(intcolumnIndex)throwsSQLException{","return(byte)getInt(columnIndex);","publicshortgetShort(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintNULL=504;","staticfinalintTRUE=505;","staticfinalintFALSE=506;","staticfinalintBETWEEN=507;","staticfinalintLIKE=508;","staticfinalintIN=509;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["thrownewError(\"pageOperation:\"+pageOperation);","TableStorePagerequestWriteLock(SSConnectioncon,TableStorePagereadlock)throwsSQLException{","if(readlock.lockType==LOCK_INSERT){","TableStorePagelock=newTableStorePage(con,this,LOCK_INSERT,-1);","readlock.nextLock=lock;","con.add(lock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.min(((MutableInteger)value).value,expr.getInt());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"YES\",TRUE);//aliasforTRUE","addKeyWord(\"TRUE\",TRUE);","addKeyWord(\"NO\",FALSE);//aliasforFALSE","addKeyWord(\"FALSE\",FALSE);","addKeyWord(\"BETWEEN\",BETWEEN);","addKeyWord(\"LIKE\",LIKE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateObjectvalue;","protectedIndexNode(booleanunique,chardigit){","this.unique=unique;","this.digit=digit;","protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewIndexNode(unique,digit);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["return(SQLToken)tokens.get(tokenIdx++);","privateSQLTokennextToken(int[]validValues)throwsSQLException{","SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,validValues);","if(validValues==MISSING_EXPRESSION){","returntoken;//anexpressioncanbecontainedineverytoken."]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionFunction))returnfalse;","return((ExpressionFunction)expr).getFunction()==getFunction();","SQLExceptioncreateUnspportedDataType(intdataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["{PARAM_IDX_OUT_RANGE,\"01000\"},","{COL_DUPLICATE,\"01000\"},","{COL_MISSING,\"01000\"},","{COL_VAL_UNMATCH,\"01000\"},","{COL_INVALID_SIZE,\"01000\"},","{COL_WRONG_PREFIX,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["staticfinalintREPLACE=1115;","staticfinalintRIGHT=1116;","staticfinalintRTRIM=1117;","staticfinalintSOUNDEX=1118;","staticfinalintSPACE=1119;","staticfinalintSUBSTRING=1120;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicvoidsetDouble(StringparameterName,doublex)throwsSQLException{","setDouble(findParameter(parameterName),x);","publicvoidsetBigDecimal(StringparameterName,BigDecimalx)throwsSQLException{","setBigDecimal(findParameter(parameterName),x);","publicvoidsetString(StringparameterName,Stringx)throwsSQLException{","setString(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.SWITCH:","invalidParamCount=(paramCount%2!=0);","ExpressionFunctionCaseexprCase=newExpressionFunctionCase();","for(inti=0;i\<paramCount-1;i+=2)","exprCase.addCase(params[i],params[i+1]);","exprCase.setEnd();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longgetMoney()throwsException{","returnfromEntry.getMoney(colIdx);","MutableNumericgetNumeric()throwsException{","returnfromEntry.getNumeric(colIdx);","ObjectgetObject()throwsException{","returnfromEntry.getObject(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["publicfloatgetFloat(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getFloat();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.IS:","token=nextToken(MISSING_NOT_NULL);","if(token.value==SQLTokenizer.NOT){","nextToken(MISSING_NULL);","operation++;","leftExpr=newExpressionArithmetic(leftExpr,operation);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicDriverPropertyInfo[]getPropertyInfo(Stringurl,Propertiesinfo)","throwsSQLException{","Propertiesprops=parse(url,info);","DriverPropertyInfo[]driverInfos=newDriverPropertyInfo[1];","driverInfos[0]=newDriverPropertyInfo(\"dbpath\",props.getProperty(\"dbpath\"));","returndriverInfos;"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["{RSET_NOT_PRODUCED,\"NessunResultSetÃ¨statoprodotto.\"},","{RSET_READONLY,\"IlResultSetÃ¨disolalettura.\"},","{RSET_FWDONLY,\"IlResultSetÃ¨forwardonly.\"},//norealtranslation","{RSET_CLOSED,\"IlResultSetÃ¨chiuso.\"},","{RSET_NOT_INSERT_ROW,\"IlcursorenonÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{RSET_ON_INSERT_ROW,\"IlcursoreÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["default:thrownewError(String.valueOf(column.getDataType()));","@Override","booleanisNull(intvalueOffset){","returnpage[valueOffset]!=0;","@Override","booleangetBoolean(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidwriteNumeric(MutableNumericnum){","writeByte(num.getInternalValue().length);","writeByte(num.getScale());","writeByte(num.getSignum());","for(inti=0;i\<num.getInternalValue().length;i++){","writeInt(num.getInternalValue()[i]);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateMoney(){/*shouldbeempty*/}","publicMoney(doublevalue){","this.value=(long)(value*10000);","publicMoney(floatvalue){","this.value=(long)(value*10000);","publicstaticMoneycreateFromUnscaledValue(longvalue){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["privatestaticfinalint[]MISSING_ON={SQLTokenizer.ON};","privatestaticfinalint[]MISSING_KEYTYPE={SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.FOREIGN};","privatestaticfinalint[]MISSING_KEY={SQLTokenizer.KEY};","privatestaticfinalint[]MISSING_REFERENCES={SQLTokenizer.REFERENCES};","privatestaticfinalint[]MISSING_AS={SQLTokenizer.AS};","privatestaticfinalint[]MISSING_SELECT={SQLTokenizer.SELECT};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["TableStorePagerequestWriteLock(SSConnectioncon,TableStorePagereadlock)throwsSQLException{","if(readlock.lockType==LOCK_INSERT){","TableStorePagelock=newTableStorePage(con,this,LOCK_INSERT,-1);","readlock.nextLock=lock;","con.add(lock);","returnlock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["this.filePos=filePos;","this.type=type;","staticStoreImplcreateStore(Tabletable,StorePagestorePage,inttype,longfilePos)throwsSQLException{","try{","StoreImplstore=newStoreImpl(table,storePage,type,filePos);","switch(type){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti,intscale)throwsSQLException{","try{","MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.LOG10:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog10();","break;","caseSQLTokenizer.MOD:","invalidParamCount=(paramCount!=2);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnget(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{","returnget(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{","returnget(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["importjava.sql.*;","importjava.math.*;","importjava.io.*;","importjava.util.ArrayList;","importjava.util.Calendar;","importjava.net.URL;"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["publicclassFileIndexNodeextendsIndexNode{","privatefinalFileChannelfile;","privatelongfileOffset;","FileIndexNode(booleanunique,chardigit,FileChannelfile){","super(unique,digit);","this.file=file;"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["staticfinalintREAL=336;","staticfinalintFLOAT=337;","staticfinalintDOUBLE=338;","staticfinalintDATE=340;","staticfinalintTIME=341;","staticfinalintTIMESTAMP=342;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["token=nextToken(ESCAPE_MISSING_CLOSE);","returnexpr;","caseSQLTokenizer.QUESTION:","ExpressionValueparam=newExpressionValue();","cmd.addParameter(param);","returnparam;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BLOB:","returnTypes.BLOB;","caseSQLTokenizer.TINYINT:","returnTypes.TINYINT;","caseSQLTokenizer.SMALLINT:","returnTypes.SMALLINT;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["updateShort(findColumn(columnName),x);","publicvoidupdateInt(StringcolumnName,intx)throwsSQLException{","updateInt(findColumn(columnName),x);","publicvoidupdateLong(StringcolumnName,longx)throwsSQLException{","updateLong(findColumn(columnName),x);","publicvoidupdateFloat(StringcolumnName,floatx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["{FK_NOT_TABLE,\"\'\'{0}\'\'nonÃ¨unatabella.\"},","{PK_ONLYONE,\"UnatabellapuÃ²averesolounaprimarykey.\"},","{KEY_DUPLICATE,\"Chiaveduplicata.\"},","{MONTH_TOOLARGE,\"ValoredelmesetroppoaltodelinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"ValoredelgiornotroppoaltroinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"ValoredelleoretroppoaltoininTIMEoTIMESTAMP\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["default:thrownewError();","@Override","byte[]getBytes(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.RAW:","dataType=SQLTokenizer.VARBINARY;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnMath.abs(param1.getLong());","floatgetFloat()throwsException{","returnMath.abs(param1.getFloat());","doublegetDouble()throwsException{","returnMath.abs(param1.getDouble());","longgetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["ObjectrowOffset=value;","char[]puffer=remainderKey;","value=null;","remainderKey=null;","IndexNodenewNode=addNode(puffer[0]);","if(puffer.length==1){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","default:thrownewError();","@Override","ObjectgetObject(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["StringBufferbuffer=newStringBuffer();","buffer.append(longValue()).append(\'.\');","finallongv=Math.abs(value);","buffer.append((char)((v%10000)/1000+\'0\'));","buffer.append((char)((v%1000)/100+\'0\'));","buffer.append((char)((v%100)/10+\'0\'));"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["op=createJoinScrollIndex((ExpressionArithmetic)param0,leftEx,rightEx,operation);","if(op==0){","return0;","returncreateJoinScrollIndex((ExpressionArithmetic)param1,leftEx,rightEx,operation);","return0;","if(operation==0){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(long)(readNumeric().doubleValue()*10000L);","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["offset+=absDiff;","firstNode=false;","continue;","intvalue=getUnsignedShort();","if(value!=0||firstNode){","intpointer=getPointer();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(objinstanceofbyte[]){","return\"0x\"+Utils.bytes2hex((byte[])obj);","returngetValue(columnIndex).getString();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return-1;","staticintcompareBytes(byte[]leftBytes,byte[]rightBytes){","intlength=Math.min(leftBytes.length,rightBytes.length);","intcomp=0;","for(inti=0;i\<length;i++){","if(leftBytes[i]!=rightBytes[i]){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalintsize(){","returnsize;","finalForeignKeyget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["updateNull(findColumn(columnName));","publicvoidupdateBoolean(StringcolumnName,booleanx)throwsSQLException{","updateBoolean(findColumn(columnName),x);","publicvoidupdateByte(StringcolumnName,bytex)throwsSQLException{","updateByte(findColumn(columnName),x);","publicvoidupdateShort(StringcolumnName,shortx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalpublicvoidclearWarnings(){","finalpublicvoidsetCursorName(Stringname)throwsSQLException{","finalvoidsetGeneratedKeys(ResultSetrs){","generatedKeys=rs;","finalpublicResultSetgetGeneratedKeys()throwsSQLException{","if(generatedKeys==null)"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionSinextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.SIN;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.sin(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSin.java|"],
"["nextToken(MISSING_REFERENCES);","Stringpk=nextIdentifier();","Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();","expressionDefList(cmdCreate,expressions,columns);","IndexDescriptionpkIndex=newIndexDescription(null,pk,SQLTokenizer.UNIQUE,expressions,columns);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["add(-num.signum,num.value);","privatevoidsub(int[]val2){","longtemp=0;","intv1=value.length;","for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)-(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>=32);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["this.cmdSel=cmdSel;","this.con=con;","privatevoidloadInList()throwsException{","if(cmdSel.compile(con)){","cmdSel.from.execute();","if(cmdSel.columnExpressions.size()!=1)"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["caseTypes.BINARY:","caseTypes.VARBINARY:","caseTypes.LONGVARBINARY:","return\"[B\";","caseTypes.BLOB:","return\"java.sql.Blob\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["staticfinalStringIDX_EXTENTION=\".idx\";","privatestaticfinalInteger[]integerCache=newInteger[260];","privatestaticfinalShort[]shortCache=newShort[260];","static{","for(inti=-4;i\<256;i++){","integerCache[i+4]=newInteger(i);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{VIEW_CANTDROP,\"01000\"},","{RSET_NOT_PRODUCED,\"01000\"},","{RSET_READONLY,\"01000\"},","{RSET_FWDONLY,\"01000\"},","{RSET_CLOSED,\"01000\"},","{RSET_NOT_INSERT_ROW,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["case2:","value=newLongTreeList(input);","break;","case3:","value=loadRef(input.readLong());","break;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["listEnum.resultStack[listEnum.stack]=result;","firstNode=true;","}else{","shift+=16;","listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["{RSET_NOT_PRODUCED,\"NoResultSetwasproduced.\"},","{RSET_READONLY,\"ResultSetisreadonly.\"},","{RSET_FWDONLY,\"ResultSetisforwardonly.\"},","{RSET_CLOSED,\"ResultSetisclosed.\"},","{RSET_NOT_INSERT_ROW,\"Cursoriscurrentlynotontheinsertrow.\"},","{RSET_ON_INSERT_ROW,\"Cursoriscurrentlyontheinsertrow.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\>0)//castneededforCompiler1.5","value=str;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnreadLongBinary();","caseSQLTokenizer.UNIQUEIDENTIFIER:","bytes=newbyte[16];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importsmallsql.database.language.Language;","publicclassExpressionFunctionConvertextendsExpressionFunction{","finalprivateColumndatatype;","publicExpressionFunctionConvert(Columndatatype,Expressionvalue,Expressionstyle){","super();","this.datatype=datatype;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnleft.getDataType();","caseEQUALS:","caseEQUALS_NULL:","caseGREATER:","caseGRE_EQU:","caseLESSER:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","break;","returnexpr;","finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){","case0:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(minSize\<puffer.length){","intnewSize=puffer.length\<\<1;","if(newSize\<minSize)newSize=minSize;","byte[]temp=newbyte[newSize];","System.arraycopy(puffer,0,temp,0,offset);","puffer=temp;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["indexName,","tableName,","unique?SQLTokenizer.UNIQUE:SQLTokenizer.INDEX,","expressions,","columns);","Object[]param={\"CreateIndex\"};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expressions=internalExpressions;","for(intc=0;c\<expressions.size();c++){","addColumn(newColumnExpression(expressions.get(c)));","patchExpressions(cmd.columnExpressions);","if(having!=null)having=patchExpression(having);","patchExpressions(orderBy);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["finalvoidbeforeFirst(){","filePos=0;","store=Store.NOROW;","row=0;","@Override","finalbooleanfirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["return(lValue\<0)?newLong(-lValue):para1;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","intiValue=((Number)para1).intValue();","return(iValue\<0)?newInteger(-iValue):para1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["case\'\\\'\':","if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){","quote=c;","}elseif(quote==c){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnparam3.getInt();","longgetLong()throwsException{","if(param1.getBoolean())","returnparam2.getLong();","returnparam3.getLong();","floatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["verifyFreePufferSize(1);","puffer[offset++]=(byte)(value);","voidwriteShort(intvalue){","verifyFreePufferSize(2);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["voidexecuteImpl(SSConnectioncon,SSStatementst)throwsjava.sql.SQLException{","switch(type){","caseSQLTokenizer.LEVEL:","con.isolationLevel=isolationLevel;","break;","caseSQLTokenizer.USE:"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["classWhereextendsRowSource{","finalprivateRowSourcerowSource;","finalprivateExpressionwhere;","privateintrow=0;","privatebooleanisCurrentRow;","Where(RowSourcerowSource,Expressionwhere){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["return\"0x\"+Utils.bytes2hex((byte[])obj);","returngetValue(columnIndex).getString();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalColumnget(Stringname){","for(inti=0;i\<size;i++){","Columncolumn=data[i];","if(name.equalsIgnoreCase(column.getName())){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["result[1]=(byte)(value\>\>48);","result[2]=(byte)(value\>\>40);","result[3]=(byte)(value\>\>32);","result[4]=(byte)(value\>\>24);","result[5]=(byte)(value\>\>16);","result[6]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["intcount=store.readInt();","for(inti=0;i\<count;i++){","columns.add(store.readColumn(tableFormatVersion));","indexes=newIndexDescriptions();","references=newForeignKeys();","inttype;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(value.length==0||signum==0){","return0;","}else{","if(value.length==1&&(value[0]\>0)){","returnUtils.double2long(value[0]/scaleDoubleFactor[scale]*signum);","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","intreadInt(){","return((page[offset++])\<\<24)|","((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{VALUE_CANT_CONVERT,\"Cannotconverta{0}valuetoa{1}value.\"},","{BYTEARR_INVALID_SIZE,\"Invalidbytearraysize{0}forUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjectwasdeleted.\"},","{PARAM_CLASS_UNKNOWN,\"Unknownparameterclass:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}isempty.\"},","{PARAM_IDX_OUT_RANGE,\"Parameterindex{0}outofrange.Thevaluemustbebetween1and{1}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["formatMillis(details.millis,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case131://Kuwaitidd/mm/yyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(rowIdx+1!=rowList.size()){","returnfalse;","booleanisNext=next();","previous();","return!isNext&&(rowIdx+1==rowList.size()&&rowList.size()\>0);","booleanisAfterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returnoffset;","voidsetCurrentOffsetInPage(intnewOffset){","this.offset=newOffset;","voidwriteByte(intvalue){","intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"RAW\",RAW);//aliasforOracleRAWandLONGRAW","addKeyWord(\"IMAGE\",LONGVARBINARY);//aliasforMSSQLServerdatatypeIMAGE","addKeyWord(\"LONGVARBINARY\",LONGVARBINARY);","addKeyWord(\"BLOB\",BLOB);","addKeyWord(\"BYTE\",TINYINT);","addKeyWord(\"TINYINT\",TINYINT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnSSDriver.URL_PREFIX+\':\'+database.getName();","publicStringgetUserName(){","return\"\";","publicbooleanisReadOnly(){","returnfalse;","publicbooleannullsAreSortedHigh(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["System.arraycopy(bytes,0,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intlength=param2.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["importjava.sql.SQLException;","importsmallsql.database.language.Language;","classIndexDescriptions{","privateintsize;","privateIndexDescription[]data;","voidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["fullRowCount=Math.max(fullRowCount,fullRightRowCounter);","fullRightRowCounter=0;","isOuterValid=true;","result=left.next();","if(result){","result=right.first();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["staticTableViewResultgetTableViewResult(RowSourcefrom)throwsSQLException{","if(frominstanceofWhere){","from=((Where)from).getFrom();","if(frominstanceofTableViewResult){","return(TableViewResult)from;","throwSmallSQLException.create(Language.ROWSOURCE_READONLY);"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["counter.createNextValue(con);","returndefaultValue;","StringgetDefaultDefinition(){","returndefaultDefinition;","StringgetName(){","returnname;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()==0){","scrollStatus.afterLast();","row--;","if(currentInsertedRow()\>=0){","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["finalprivatevoidresize(intnewCapacity){","Entry[]newTable=newEntry[newCapacity];","transfer(newTable);","table=newTable;","threshold=(int)(newCapacity*0.75f);","finalprivatevoidtransfer(Entry[]newTable){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));","voidwriteLong(longvalue){","intnewSize=offset+8;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>56);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:","page=add(page,rowOffset,bytesToBinarySortOrder(expr.getBytes()),isLastValues);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returngetTime(findParameter(parameterName));","publicTimestampgetTimestamp(StringparameterName)throwsSQLException{","returngetTimestamp(findParameter(parameterName));","publicObjectgetObject(StringparameterName)throwsSQLException{","returngetObject(findParameter(parameterName));","publicBigDecimalgetBigDecimal(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["staticfinalintSQL_INTEGER=1358;","staticfinalintSQL_LONGVARBINARY=1359;","staticfinalintSQL_LONGVARCHAR=1360;","staticfinalintSQL_REAL=1361;","staticfinalintSQL_SMALLINT=1362;","staticfinalintSQL_TIME=1363;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intidx=--status.idx;","if(idx==-1){","if(status.nodeValue!=null){","if(status.nodeValueinstanceofIndexNode){","level++;","nodeStack.push("]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["intidx=++status.idx;","if(idx==-1){","if(status.nodeValue!=null){","if(status.nodeValueinstanceofIndexNode){","level++;","nodeStack.push("]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLDATETIME)),Utils.getInteger(16),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.JAVA_OBJECT)),Utils.getInteger(65535),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BLOB)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["month=0;","day=1;","idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);","if(idx2\>0){","hour=Integer.parseInt(datetime.substring(idx1,idx2).trim());"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["buffer.append(middle);","privateStringgetIdentifier(SQLTokentoken)throwsSQLException{","Stringname=token.getName(sql);","checkValidIdentifier(name,token);","returnname;","privateStringnextIdentifier()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["uebertrag=(value[--v1]=value[v1]-1)==-1;","if(uebertrag){","signum=-signum;","intlast=value.length-1;","for(inti=0;i\<=last;i++){","value[i]=(i==last)?-value[i]:~value[i];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnreadDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/10000.0;","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["concurrency\>=ResultSet.CONCUR_READ_ONLY&&concurrency\<=ResultSet.CONCUR_UPDATABLE)","returntrue;","returnfalse;","publicbooleanownUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanownDeletesAreVisible(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.INT:","returngetIntImpl()*10000;","caseSQLTokenizer.BIGINT:","returngetLongImpl()*10000;","caseSQLTokenizer.REAL:","returnUtils.doubleToMoney(getFloatImpl());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(nodeDigit\<digit){","returnfindNodeInsertPos(digit,mid+1,end);","}else{","if(start==mid)returnstart;","returnfindNodeInsertPos(digit,start,mid);","privatefinalintfindNodePos(chardigit){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["if(i\<params.length)","params[i]=elseResult;","super.setParams(params);","finalvoidsetParams(Expression[]params){","super.setParams(params);","inti=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["booleanhasAlias(){","returntrue;","voidsetAlias(Stringname)throwsSQLException{","throwSmallSQLException.create(Language.ALIAS_UNSUPPORTED);","abstractvoidexecute()throwsException;","abstractbooleanisExpressionsFromThisRowSource(Expressionscolumns);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["if(token.value==SQLTokenizer.CONSTRAINT){","constraintName=nextIdentifier();","token=nextToken(MISSING_KEYTYPE);","}else{","constraintName=null;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Moneymoney=newMoney();","money.value=value;","returnmoney;","publicintintValue(){","return(int)(value/10000.0);","publicfloatfloatValue(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["if(dataType==SQLTokenizer.LONG){","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.RAW){","dataType=SQLTokenizer.LONGVARBINARY;","}else{","dataType=SQLTokenizer.LONGVARCHAR;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticFileIndexload(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);","raFile.read(buffer);","buffer.position(0);","booleanunique=buffer.get()!=0;","FileIndexNoderoot=FileIndexNode.loadRootNode(unique,raFile,raFile.position());"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["returnfalse;","publicbooleanstoresLowerCaseQuotedIdentifiers(){","returnfalse;","publicbooleanstoresMixedCaseQuotedIdentifiers(){","returntrue;","publicStringgetIdentifierQuoteString(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intlength=str.length();","while(length\>0&&str.charAt(length-1)==\'\'){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["saveRemainderValue(remainderValue,digitCount);","returnaddRoot();","privatefinalvoidmoveRemainderValue()throwsSQLException{","ObjectrowOffset=value;","char[]puffer=remainderKey;","value=null;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","this(database,con,name,columns,null,indexes,foreignKeys);","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsexistIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","super(name,columns);","this.database=database;","this.references=foreignKeys;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["throwsIllegalArgumentException{","Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<entries.length;i++){","Stringkey=entries[i][0];","if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["day=29;","}else{","for(intm=11;m\>=0;m--){","if(MONTH_DAYS[m]\<=day){","month=m;","day=day-MONTH_DAYS[m]+1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{DB_NOTCONNECTED,\"YouarenotconnectedwithaDatabase.\"},","{CONNECTION_CLOSED,\"Connectionisalreadyclosed.\"},","{VIEW_INSERT,\"INSERTisnotsupportedforaview.\"},","{VIEWDROP_NOT_VIEW,\"CannotuseDROPVIEWwith\'\'{0}\'\'becauseitdoesnotisaview.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'can\'\'tbedropped.\"},","{RSET_NOT_PRODUCED,\"NoResultSetwasproduced.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returntoBigDecimal().setScale(newScale,BigDecimal.ROUND_HALF_EVEN);","publicObjectgetImmutableObject(){","returntoBigDecimal();","privatestaticfinalbyte[]EMPTY_BYTES=newbyte[0];","privatestaticfinalint[]EMPTY_INTS=newint[0];","privatestaticfinaldouble[]scaleDoubleFactor={1,10,100,1000,10000,100000,1000000,10000000};"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intyear;","intmonth;","intdayofyear;","intday;","inthour;","intminute;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privateintqueryTimeout;","privateintmaxRows;","privateintmaxFieldSize;","privateArrayListbatches;","privatebooleanneedGeneratedKeys;","privateResultSetgeneratedKeys;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["returnb;","}else{","byte[]b=newbyte[byteLen-start];","System.arraycopy(bytes,start,b,0,b.length);","returnb;","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["caseSQLTokenizer.BIT:","return1;//1and0","caseSQLTokenizer.BOOLEAN:","return5;//trueandfalse","caseSQLTokenizer.TINYINT:","return3;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{COL_MISSING,\"Spalte\'\'{0}\'\'wurdenichtgefunden.\"},","{COL_VAL_UNMATCH,\"DieSpaltenanzahlundWerteanzahlistnichtidentisch.\"},","{COL_INVALID_SIZE,\"UngÃ¼ltigeSpaltengrÃ¶ÃŸe{0}fÃ¼rSpalte\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"DerSpaltenprefix\'\'{0}\'\'passtzukeinemTabellennamenoderAliasnamenindieserAbfrage.\"},","{COL_READONLY,\"DieSpalte{0}istschreibgeschÃ¼tzt.\"},","{COL_INVALID_NAME,\"UngÃ¼ltigerSpaltenname\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnnextEquals();","default:","thrownewError(\"Compareoperationnotsupported:\"+compare);","privatebooleannextEquals()throwsException{","if(rowList!=null){","longrowPosition=rowList.getNext(longListEnum);"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["privateExpressionsgroupBy;","privateExpressionhaving;","privateExpressionsorderBy;","privatebooleanisAggregateFunction;","privateintmaxRows=-1;","finalbooleanisGroupResult(){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["commandSelect.insertRow(con,updateValues);","booleanisNull(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["packagesmallsql.database;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","abstractclassTransactionStep{","FileChannelraFile;","TransactionStep(FileChannelraFile){"]": ["|project://smallsql/src/smallsql/database/TransactionStep.java|"],
"["type=SQLTokenizer.TIMESTAMP;","returnnewDateTime(parse(date),type);","staticDateTimevalueOf(java.sql.Datedate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.DATE);","staticDateTimevalueOf(java.sql.Timedate){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnSQLTokenizer.SQL_TSI_QUARTER;","caseSQLTokenizer.YEAR:","returnSQLTokenizer.SQL_TSI_YEAR;","default:","returnintervalType;","ExpressionFunctionTimestampDiff(intintervalType,Expressionp1,Expressionp2){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["@Override","finalvoidsetRowPosition(longrowPosition)throwsException{","filePos=rowPosition;","if(filePos\<0||!moveToRow()){","store=newStoreNull(store.getNextPagePos());","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["expr=newExpressionFunctionReplace();","break;","caseSQLTokenizer.RIGHT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRight();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","finalclassDatabase{","staticprivateHashMapdatabases=newHashMap();","privatefinalTableViewMaptableViews=newTableViewMap();","privatefinalStringname;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["DateTimevalue=(DateTime)obj;","returnvalue.time==time&&value.dataType==dataType;","StringtoString(intstyle){","if(style\<0)","returntoString();","Detailsdetails=newDetails(time);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["Object[]params={","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())","};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC,params);","SQLExceptioncreateUnspportedConversion(intdataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["caseTypes.TIME:","return\"java.sql.Time\";","caseTypes.TIMESTAMP:","return\"java.sql.Timestamp\";","caseTypes.CHAR:","caseTypes.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["intlength=param2.getInt();","if(bytes.length\<=length)returnbytes;","byte[]b=newbyte[length];","System.arraycopy(bytes,bytes.length-length,b,0,length);","returnb;","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["returnpage.getValue();","else","page=(IndexNode)page.getValue();","thrownewError();","finalprivateIndexNodefindRows(IndexNodepage,Expressionexpr,booleansearchNullValues,ArrayListnodeList)throwsException{","if(expr.isNull()){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["((long)(page[offset++]&0xFF)\<\<32)|","((long)(page[offset++]&0xFF)\<\<24)|","((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));","voidwriteDouble(doublevalue){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["PrintWriterlog=DriverManager.getLogWriter();","if(log!=null){","synchronized(log){","log.print(\"[SmallSQL]\");","log.println(msg);","log.flush();"]": ["|project://smallsql/src/smallsql/database/Logger.java|"],
"["caseGRE_EQU:returnleft.getLong()\>=right.getLong();","caseLESSER:returnleft.getLong()\<right.getLong();","caseLES_EQU:returnleft.getLong()\<=right.getLong();","caseUNEQUALS:returnleft.getLong()!=right.getLong();","caseBETWEEN:","long_left=left.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["floatgetFloat(intcolIdx)throwsException{","returnget(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{","returnget(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{","returnget(colIdx).getMoney();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionLengthextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.LENGTH;","finalintgetInt()throwsException{","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLength.java|"],
"["iterator.remove();","database.close();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","privatefinalvoidclose()throwsException{","synchronized(tableViews){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["privateListcommitPages=newArrayList();","SSConnection(SSConnectioncon){","readonly=con.readonly;","database=con.database;","metadata=con.metadata;","log=con.log;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["pageControlBuffer.position(0);","raFile.read(pageControlBuffer);","store.page=page_control;","store.readPageHeader();","store.page=newbyte[store.sizeUsed];","raFile.position(filePos);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(con.getAutoCommit())con.commit();","finalvoiddeleteRow(SSConnectioncon)throwsSQLException{","intsavepoint=con.getSavepoint();","try{","if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_DELETE);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnnewMutableNumeric(getLong());","caseSQLTokenizer.MONEY:","returnnewMutableNumeric(getMoney(),4);","caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();","num.floor();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["intlength=Math.min(leftBytes.length,rightBytes.length);","intcomp=0;","for(inti=0;i\<length;i++){","if(leftBytes[i]!=rightBytes[i]){","comp=leftBytes[i]\<rightBytes[i]?-1:1;","break;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{TABLE_CANT_DROP_LOCKED,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'perchÃ©Ã¨inLOCK.\"},","{TABLE_CORRUPT_PAGE,\"Paginadellatabellacorrottaallaposizione:{0}.\"},","{TABLE_MODIFIED,\"Latabella\'\'{0}\'\'Ã¨statamodificata.\"},","{TABLE_DEADLOCK,\"Deadlock:nonsipuÃ²mettereunlocksullatabella\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"Latabella/view\'\'{0}\'\'nonesiste.\"},","{TABLE_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonincludeunatabellaSmallSQLvalida.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnoffset;","return-1;","staticintcompareBytes(byte[]leftBytes,byte[]rightBytes){","intlength=Math.min(leftBytes.length,rightBytes.length);","intcomp=0;","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(name1==null)returnfalse;","if(name1.equalsIgnoreCase(name2))returntrue;","returnfalse;","abstractbooleanisNull()throwsException;","abstractbooleangetBoolean()throwsException;","abstractintgetInt()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnbuf.toString();","case1://USAmm/dd/yy","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["TransactionSteppage=(TransactionStep)commitPages.remove(i);","page.rollback();","page.freeLock();","publicvoidrollback()throwsSQLException{","log.println(\"Rollback\");","testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){","returnvalue;","publicintintValue(){","return(int)value;"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|","|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["firstNode3=firstNode2;","firstNode2=firstNode1;","firstNode1=firstNode;","firstNode=true;","break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["privatevoidhaving(CommandSelectcmd)throwsSQLException{","cmd.setHaving(expression(cmd,0));","privatestaticfinalint[]COMMANDS={SQLTokenizer.SELECT,SQLTokenizer.DELETE,SQLTokenizer.INSERT,SQLTokenizer.UPDATE,SQLTokenizer.CREATE,SQLTokenizer.DROP,SQLTokenizer.ALTER,SQLTokenizer.SET,SQLTokenizer.USE,SQLTokenizer.EXECUTE,SQLTokenizer.TRUNCATE};","privatestaticfinalint[]COMMANDS_ESCAPE={SQLTokenizer.D,SQLTokenizer.T,SQLTokenizer.TS,SQLTokenizer.FN,SQLTokenizer.CALL};","privatestaticfinalint[]COMMANDS_ALTER={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.PROCEDURE,};","privatestaticfinalint[]COMMANDS_CREATE={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE,SQLTokenizer.UNIQUE,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finallongv=Math.abs(value);","buffer.append((char)((v%10000)/1000+\'0\'));","buffer.append((char)((v%1000)/100+\'0\'));","buffer.append((char)((v%100)/10+\'0\'));","buffer.append((char)((v%10)+\'0\'));","returnbuffer.toString();"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["intnewSize=offset+2+lengthColumn;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(lengthColumn\>\>8);","page[offset++]=(byte)(lengthColumn);","writeBytes(daten);","if(!varBinary){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(intcolumnIndex)throwsSQLException{","try{","byte[]obj=getValue(columnIndex).getBytes();","wasNull=obj==null;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["longnewRowOffset=rowSource.getRowPosition();","if(oldRowOffset==null){","index.addValues(newRowOffset,distinctColumns);","row++;","returntrue;","}else"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["returnsize;","finallongget1(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx\<\<1];","finallongget2(intidx){"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["if(result){","rowList.add(rowSource.getRowPosition());","returntrue;","rowIdx=rowList.size();//rowIdxshouldbeneverlargerasrowcount","returnfalse;","booleanlast()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["try{","String[]colNames={\"PKTABLE_CAT\",\"PKTABLE_SCHEM\",\"PKTABLE_NAME\",\"PKCOLUMN_NAME\",\"FKTABLE_CAT\",\"FKTABLE_SCHEM\",\"FKTABLE_NAME\",\"FKCOLUMN_NAME\",\"KEY_SEQ\",\"UPDATE_RULE\",\"DELETE_RULE\",\"FK_NAME\",\"PK_NAME\",\"DEFERRABILITY\"};","Object[][]data=con.getDatabase(false).getReferenceKeys(con,primaryTable,foreignTable);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Tabletable=newTable(this,con,name,columns,indexes,foreignKeys);","synchronized(tableViews){","tableViews.put(name,table);","TablecreateTable(SSConnectioncon,StringtableName,Columnscolumns,IndexDescriptionsoldIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,tableName,columns,oldIndexes,newIndexes,foreignKeys);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicvoidsetAsciiStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setAsciiStream(findParameter(parameterName),x,length);","publicvoidsetBinaryStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setBinaryStream(findParameter(parameterName),x,length);","publicvoidsetObject(StringparameterName,Objectx,intsqlType,intscale)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType,scale);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returntrue;","publicbooleansupportsTableCorrelationNames(){","returntrue;","publicbooleansupportsDifferentTableCorrelationNames(){","returntrue;","publicbooleansupportsExpressionsInOrderBy(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["super(name,newColumns());","StorePagestorePage=newStorePage(null,-1,raFile,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);","sql=store.readString();","inttype;","while((type=store.readInt())!=0){"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["staticfinalintSMALLDATETIME=343;","staticfinalintCHAR=350;","staticfinalintNCHAR=352;","staticfinalintVARCHAR=353;","staticfinalintNVARCHAR=355;","staticfinalintSYSNAME=357;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returntrue;","publicbooleansupportsOpenStatementsAcrossCommit(){","returntrue;","publicbooleansupportsOpenStatementsAcrossRollback(){","returntrue;","publicintgetMaxBinaryLiteralLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicclassLanguage_deextendsLanguage{","protectedLanguage_de(){","addMessages(ENTRIES);","publicString[][]getEntries(){","returnENTRIES;","privatefinalString[][]ENTRIES={"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["{COL_WRONG_PREFIX,\"01000\"},","{COL_READONLY,\"01000\"},","{COL_INVALID_NAME,\"01000\"},","{COL_IDX_OUT_RANGE,\"01000\"},","{COL_AMBIGUOUS,\"01000\"},","{GROUP_AGGR_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnfalse;","@Override","finalvoidbeforeFirst(){","filePos=0;","store=Store.NOROW;","row=0;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["continue;","intvalue=getUnsignedShort();","if(value!=0||firstNode){","intpointer=getPointer();","if(pointer\>oldOffset){","offset-=pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returntable.getName();","returnnull;","intgetPrecision(){","returncolumn.getPrecision();","intgetScale(){","returncolumn.getScale();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["if(savepointinstanceofSSSavepoint){","((SSSavepoint)savepoint).transactionTime=0;","return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,newObject[]{savepoint});","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["return0;","publicbooleandoesMaxRowSizeIncludeBlobs(){","returnfalse;","publicintgetMaxStatementLength(){","return0;","publicintgetMaxStatements(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["for(intc=0;c\<colCount;c++){","ExpressionValueexpr=rowValues[c]=newExpressionValue();","expr.set(row[c],-1);","Columncolumn=columns.get(c);","if(expr.getDataType()!=SQLTokenizer.NULL){","column.setDataType(expr.getDataType());"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["finalvoidset(ObjectnewValue,intnewDataType)throwsSQLException{","this.value=newValue;","this.dataType=newDataType;","if(dataType\<0){","if(newValue==null)","this.dataType=SQLTokenizer.NULL;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["fullRowCount=fullRightRowCounter;","}else{","result=right.next();","if(!result){","switch(type){","caseJoin.LEFT_JOIN:"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["insertedRows.add(lastRowOffset);","returntrue;","rowSource.noRow();","row=(getRowCount()\>0)?getRowCount()+1:0;","returnfalse;","booleanlast()throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["privatestaticfinalintMULTI_COMMENT=2;","publicstaticListparseSQL(char[]sql)throwsSQLException{","SearchNodenode=searchTree;","ArrayListtokens=newArrayList();","intvalue=0;","inttokenStart=0;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticfinalintPOWER=1015;","staticfinalintRADIANS=1016;","staticfinalintRAND=1017;","staticfinalintROUND=1018;","staticfinalintSIGN=1019;","staticfinalintSIN=1020;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatefinalbooleanequals(char[]src1,longsrc2,intcharCount){","if(src1==null)returnfalse;","intlength=src1.length;","if(length!=charCount)returnfalse;","for(inti=0,d=charCount-1;i\<length;i++){","if(src1[i]!=(char)((src2\>\>(d--\<\<4))))returnfalse;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["bytes[offset++]=(byte)(value\>\>24);","bytes[offset++]=(byte)(value\>\>16);","bytes[offset++]=(byte)(value\>\>8);","bytes[offset++]=(byte)(value);","returnbytes;","publicBigDecimaltoBigDecimal(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["expr=newExpressionFunctionYear();","break;","caseSQLTokenizer.IIF:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionIIF();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.COT:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCot();","break;","caseSQLTokenizer.DEGREES:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","nextToken(MISSING_PARENTHESIS_R);","col.setPrecision(displaySize);","break;","caseSQLTokenizer.SYSNAME:","col.setPrecision(255);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importsmallsql.database.language.Language;","publicclassSQLTokenizer{","privatestaticfinalintNOT_COMMENT=0;","privatestaticfinalintLINE_COMMENT=1;","privatestaticfinalintMULTI_COMMENT=2;","publicstaticListparseSQL(char[]sql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["tableViews.put(tableName,table);","returntable;","voidcreateView(SSConnectioncon,StringviewName,Stringsql)throwsException{","newView(this,con,viewName,sql);","staticObject[][]getCatalogs(Databasedatabase){","Listcatalogs=newArrayList();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["longgetMoney()throwsException{","returnMath.abs(param1.getMoney());","MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;","MutableNumericnum=param1.getNumeric();","if(num.getSignum()\<0)num.setSignum(1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["charchr=(char)param1.getInt();","returnString.valueOf(chr);","finalintgetDataType(){","returnSQLTokenizer.CHAR;","finalintgetPrecision(){","return1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:returnFloat.parseFloat(obj.toString());","doublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(token==null)returnfalse;","switch(token.value){","caseSQLTokenizer.SELECT:","caseSQLTokenizer.INSERT:","caseSQLTokenizer.UPDATE:","caseSQLTokenizer.UNION:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getInt();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["addKeyWord(\"CONCAT\",CONCAT);","addKeyWord(\"DIFFERENCE\",DIFFERENCE);","addKeyWord(\"STUFF\",INSERT);//aliasforMSSQLServer","addKeyWord(\"INSERT\",INSERT);","addKeyWord(\"LCASE\",LCASE);","addKeyWord(\"LEFT\",LEFT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog10();","break;","caseSQLTokenizer.MOD:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionMod();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return\"[B\";","caseTypes.BLOB:","return\"java.sql.Blob\";","caseTypes.BIGINT:","return\"java.lang.Long\";","caseTypes.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicstaticlongparseMoney(Stringstr){","returnUtils.doubleToMoney(Double.parseDouble(str));","privatebyte[]toByteArray(){","byte[]bytes=newbyte[8];","intoffset=0;","bytes[offset++]=(byte)(value\>\>56);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["this.offset+=length;","voidwriteExpression(Expressionexpr,Columncolumn)throwsException{","booleanisNull=expr.isNull();","if(isNull&&!column.isNullable()){","throwSmallSQLException.create(Language.VALUE_NULL_INVALID,column.getName());","intdataType=column.getDataType();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSUM:","returngetParams()[0].getDataType();","caseCOUNT:","returnSQLTokenizer.INT;","default:thrownewError();","voidsetFrom(DataSourcefromEntry,intcolIdx,TableViewtable){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["Object[]param={SQLTokenizer.getKeyWord(dataType)};","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV,param);","finalprivateStringconvertToString()throwsException{","if(param2!=null){","inttype=param1.getDataType();","switch(type){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicStringtoString(){","Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();","if(dataType!=SQLTokenizer.TIME){","formatNumber(details.year,4,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalpublicintexecuteUpdate(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);","returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,String[]columnNames)throwsSQLException{","setNeedGeneratedKeys(columnNames);","returnexecuteUpdate(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["this.commandSelect=view.commandSelect;","ViewResult(SSConnectioncon,CommandSelectcommandSelect)throwsSQLException{","try{","this.view=newView(con,commandSelect);","this.columnExpressions=commandSelect.columnExpressions;","this.commandSelect=commandSelect;"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["voidwriteFloat(floatvalue){","writeInt(Float.floatToIntBits(value));","floatreadFloat(){","returnFloat.intBitsToFloat(readInt());","voidwriteNumeric(MutableNumericnum){","writeByte(num.getInternalValue().length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","default:","invalidParamCount=true;","expr=null;//onlyforCompiler","break;","caseSQLTokenizer.COUNT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["data[size++]=expr;","finalvoidadd(intidx,Expressionexpr){","if(size\>=data.length){","resize(size\<\<1);","System.arraycopy(data,idx,data,idx+1,(size++)-idx);","data[idx]=expr;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["{STXADD_OPER_MINUS,\"InvalidoperatorminusfordatatypeVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"Unknownfunction.\"},","{STXADD_PARAM_INVALID_COUNT,\"Invalidparametercount.\"},","{STXADD_JOIN_INVALID,\"InvalidJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnexpectedclosingparenthesisinFROMclause.\"},","{STXADD_KEYS_REQUIRED,\"Requiredkeywordsare:\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["beforeFirst();","returnfalse;","}else{","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","if(row\<=rowList.size()){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseBETWEEN:","returncomp\>=0&&0\>=Utils.compareBytes(leftBytes,right2.getBytes());","break;}","throwcreateUnspportedDataType();","StringgetString()throwsjava.lang.Exception{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returntrue;","publicbooleansupportsCatalogsInProcedureCalls(){","returntrue;","publicbooleansupportsCatalogsInTableDefinitions(){","returntrue;","publicbooleansupportsCatalogsInIndexDefinitions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.PLUS:returnADD;","caseSQLTokenizer.MINUS:returnSUB;","caseSQLTokenizer.ASTERISK:returnMUL;","caseSQLTokenizer.SLACH:returnDIV;","caseSQLTokenizer.PERCENT:returnMOD;","caseSQLTokenizer.EQUALS:returnEQUALS;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalvoidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","init(database,tableView);","raFile=createFile(con,database);","staticFilegetFile(Databasedatabase,Stringname)throwsException{","returnnewFile(Utils.createIdxFileName(database,name));","privateFileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(DataSourcetable){","if(size\>=data.length){","DataSource[]dataNew=newDataSource[size\<\<1];"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["returnname;","longgetTimestamp(){","returntimestamp;","finalintfindColumnIdx(StringcolumnName){","for(inti=0;i\<columns.size();i++){","if(columns.get(i).getName().equalsIgnoreCase(columnName))returni;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["if(complement\<0){","value[0]=-complement;","signum=-1;","}else{","value[0]=complement;","signum=1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getDouble();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["commitPages.clear();","transactionTime=System.currentTimeMillis();","publicvoidclose()throwsSQLException{","rollback();","database=null;","commitPages=null;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.LEFT:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.LEFT_JOIN);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicclassLanguage_itextendsLanguage{","protectedLanguage_it(){","addMessages(ENTRIES);","publicString[][]getEntries(){","returnENTRIES;","privatefinalString[][]ENTRIES={"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["setShort(findParameter(parameterName),x);","publicvoidsetInt(StringparameterName,intx)throwsSQLException{","setInt(findParameter(parameterName),x);","publicvoidsetLong(StringparameterName,longx)throwsSQLException{","setLong(findParameter(parameterName),x);","publicvoidsetFloat(StringparameterName,floatx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnfalse;","if(fullReturnCounter\<0){","fullReturnCounter=0;","right.first();","left.nullRow();","while(isFullNotValid[fullReturnCounter++]){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnreadInt()*1000L;","voidwriteDate(longdate){","writeInt((int)(date/86400000));","longreadDate(){","returnreadInt()*86400000L;","voidwriteSmallDateTime(longdatetime){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["booleanresult=scroll.next();","if(!result){","noRow();","returnresult;","voidafterLast(){","isAfterLast=true;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["privatestaticfinalint[]MISSING_NUMBERVALUE={SQLTokenizer.NUMBERVALUE};","privatestaticfinalint[]MISSING_AND={SQLTokenizer.AND};","privatestaticfinalint[]MISSING_JOIN={SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OUTER_JOIN={SQLTokenizer.OUTER,SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OJ={SQLTokenizer.OJ};","privatestaticfinalint[]MISSING_ON={SQLTokenizer.ON};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["previousToken();","returnleftExpr;","privateExpressionexpressionSingle(Commandcmd,SQLTokentoken)throwsSQLException{","booleanisMinus=false;","if(token!=null){","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["connections.remove(con);","if(connections.size()==0){","try{","iterator.remove();","database.close();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["sizeUsed=readInt();","sizePhysical=readInt();","nextPageOffset=readInt();","filePosUpdated=readLong();","finalprivateStoreImplloadUpdatedStore()throwsException{","if(status!=UPDATE_POINTER)returnthis;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalIntegergetInteger(intvalue){","if(value\>=-4&&value\<256){","returnintegerCache[value+4];","}else","returnnewInteger(value);","staticfinalShortgetShort(intvalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.LESSER:","caseSQLTokenizer.LESSER_EQU:","caseSQLTokenizer.GREATER:","caseSQLTokenizer.GREATER_EQU:","caseSQLTokenizer.UNEQUALS:","caseSQLTokenizer.LIKE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalclassJoinextendsRowSource{","Expressioncondition;//thejoincondition,thepartaftertheON","privateinttype;","RowSourceleft;//thelefttable,vieworrowsourceofthejoin","RowSourceright;","privatebooleanisAfterLast;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnTypes.BLOB;","caseSQLTokenizer.TINYINT:","returnTypes.TINYINT;","caseSQLTokenizer.SMALLINT:","returnTypes.SMALLINT;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Database.closeConnection(this);","finalvoidtestClosedConnection()throwsSQLException{","if(isClosed())throwSmallSQLException.create(Language.CONNECTION_CLOSED);","publicbooleanisClosed(){","return(commitPages==null);","publicDatabaseMetaDatagetMetaData(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["SQLTokenizer.REAL,","SQLTokenizer.DECIMAL,","SQLTokenizer.NUMERIC,","SQLTokenizer.MONEY,","SQLTokenizer.SMALLMONEY,","SQLTokenizer.BIGINT,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["for(inti=0;i\<size;i++){","data[i].create(con,database,tableView);","voiddrop(Databasedatabase)throwsException{","for(inti=0;i\<size;i++){","data[i].drop(database);","voidclose()throwsException{"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["finalclassExpressionFunctionDifferenceextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.DIFFERENCE;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["{SEQUENCE_HEX_INVALID_STR,\"01000\"},","{SYNTAX_BASE_OFS,\"01000\"},","{SYNTAX_BASE_END,\"01000\"},","{STXADD_ADDITIONAL_TOK,\"01000\"},","{STXADD_IDENT_EXPECT,\"01000\"},","{STXADD_IDENT_EMPTY,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["((long)(page[4]&0xFF)\<\<24)|","((page[5]&0xFF)\<\<16)|","((page[6]&0xFF)\<\<8)|","((page[7]&0xFF));","this.raFile=raFile;","this.filePos=filePos;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setScale(value);","nextToken(MISSING_PARENTHESIS_R);","}else{","col.setPrecision(18);//defaultPrecisionfordecimalandnumeric"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{SYNTAX_BASE_END,\"Syntaxerror,unexpectedendofSQLstring.\"},","{STXADD_ADDITIONAL_TOK,\"AdditionaltokenafterendofSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Identifierexpected.\"},","{STXADD_IDENT_EMPTY,\"EmptyIdentifier.\"},","{STXADD_IDENT_WRONG,\"WrongIdentifier\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"InvalidoperatorminusfordatatypeVARBINARY.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2double(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidsetNullable(booleannullable){","this.nullable=nullable;","booleanisNullable(){","returnnullable;","voidsetDataType(intdataType){","this.dataType=dataType;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["TableStorePagestorePageWrite=table.requestWriteLock(((TableStorePage)storePage).con,(TableStorePage)storePage);","if(storePageWrite==null)","throwSmallSQLException.create(Language.ROW_LOCKED);","storePage=storePageWrite;","voidupdateFinsh(SSConnectioncon,StoreImplnewData)throwsSQLException{","type=SQLTokenizer.UPDATE;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["default:","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","privateSQLTokenaddColumn(SQLTokentoken,CommandTablecmdCreate)throwsSQLException{","StringcolName=getIdentifier(token);","Columncol=datatype(false);","col.setName(colName);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"MONEY\"});","default:thrownewError();","@Override","MutableNumericgetNumeric(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateintrow;","voidaddDataSource(DataSourceds){","dataSources.add(ds);","currentDS=dataSources.get(0);","booleaninit(SSConnectioncon)throwsException{","booleanresult=false;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseLAST:","clear();","break;","caseMIN:","caseMAX:","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["voidprintln(Stringmsg){","PrintWriterlog=DriverManager.getLogWriter();","if(log!=null){","synchronized(log){","log.print(\"[SmallSQL]\");","log.println(msg);"]": ["|project://smallsql/src/smallsql/database/Logger.java|"],
"["returnleftExpr;","switch(token.value){","caseSQLTokenizer.PLUS:","caseSQLTokenizer.MINUS:","caseSQLTokenizer.ASTERISK:","caseSQLTokenizer.SLACH:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["previousToken();","returnfromSource;","throwcreateSyntaxError(token,Language.STXADD_FROM_PAR_CLOSE);","default:","if(isKeyword(token)){","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicclassExpressionFunctionCharextendsExpressionFunctionReturnString{","finalintgetFunction(){","returnSQLTokenizer.CHAR;","finalStringgetString()throwsException{","if(isNull())returnnull;","charchr=(char)param1.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|"],
"["returndefaultValue;","publicintgetColumnDisplaySize(intcolumn)throwsSQLException{","returngetColumnExpression(column).getDisplaySize();","publicStringgetColumnLabel(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();","publicStringgetColumnName(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["break;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","writeBinary(expr.getBytes(),column.getPrecision(),dataType!=SQLTokenizer.BINARY);","break;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(op==ExpressionArithmetic.AND){","Expressionparam0=params[0];","Expressionparam1=params[1];","if(param0instanceofExpressionArithmetic&&param1instanceofExpressionArithmetic){","op=createJoinScrollIndex((ExpressionArithmetic)param0,leftEx,rightEx,operation);","if(op==0){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["listEnum.resultStack[listEnum.stack]=result;","loopToEndOfNode(listEnum);","}else{","shift+=16;","listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returntrue;","if(storeinstanceofStoreImpl&&","((StoreImpl)store).isRollback()){","returntrue;","returnfalse;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["privatestaticfinalint[]MISSING_OUTER_JOIN={SQLTokenizer.OUTER,SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OJ={SQLTokenizer.OJ};","privatestaticfinalint[]MISSING_ON={SQLTokenizer.ON};","privatestaticfinalint[]MISSING_KEYTYPE={SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.FOREIGN};","privatestaticfinalint[]MISSING_KEY={SQLTokenizer.KEY};","privatestaticfinalint[]MISSING_REFERENCES={SQLTokenizer.REFERENCES};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowIdx=rowList.size()+row;","if(rowIdx\<0){","beforeFirst();","returnfalse;","}else{","rowSource.setRowPosition(rowList.get(rowIdx));"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importjava.util.Properties;","importjava.util.StringTokenizer;","importsmallsql.database.language.Language;","publicclassSSDriverimplementsDriver{"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["intpointer=getPointer();","if(pointer\<=previousOffset){","offset=previousOffset;","return;","offset=-1;","finalprivatevoidloopToEndOfNode(LongTreeListEnumlistEnum){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalprivateintinsertNode(intoctet)throwsSQLException{","intoldOffset=offset;","if(data.length\<size+4+pointerSize)resize();","System.arraycopy(data,oldOffset,data,oldOffset+2+pointerSize,size-oldOffset);","size+=2+pointerSize;","writeShort(octet);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().floatValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["while(true){","chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);","node=node.getChildNode(digit);","if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicStringgetURL()throwsSQLException{","Databasedatabase=con.getDatabase(true);","if(database==null)","returnSSDriver.URL_PREFIX;","returnSSDriver.URL_PREFIX+\':\'+database.getName();","publicStringgetUserName(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privatefinalSSConnectioncon;","privatefinalDatabasedatabase;","CreateFile(Filefile,FileChannelraFile,SSConnectioncon,Databasedatabase){","super(raFile);","this.file=file;","this.con=con;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["privateExpressionexpression(Commandcmd,intpreviousOperationLevel)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","ExpressionleftExpr;","switch(token.value){","caseSQLTokenizer.NOT:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NOT/10),ExpressionArithmetic.NOT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["wasNull=expr.isNull();","returnexpr.getBoolean();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbytegetByte(intcolumnIndex)throwsSQLException{","return(byte)getInt(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["row[7]=Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getPrimaryKeys(SSConnectioncon,Stringtable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["i++;","}else{","tokens.add(newSQLToken(quoteBuffer.toString(),(quote==\'\\\'\')?STRING:IDENTIFIER,tokenStart,i+1));","quoteBuffer.setLength(0);","quote=0;","tokenStart=i+1;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"TS\",TS);","addKeyWord(\"FN\",FN);","addKeyWord(\"CALL\",CALL);","addKeyWord(\"OJ\",OJ);","staticfinalintOR=500;","staticfinalintAND=501;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatestaticfinalint[]MISSING_AND={SQLTokenizer.AND};","privatestaticfinalint[]MISSING_JOIN={SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OUTER_JOIN={SQLTokenizer.OUTER,SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OJ={SQLTokenizer.OJ};","privatestaticfinalint[]MISSING_ON={SQLTokenizer.ON};","privatestaticfinalint[]MISSING_KEYTYPE={SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.FOREIGN};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<length;i++){","daten[i]=(char)((page[offset++]&0xFF)|(page[offset++]\<\<8));","returndaten;","voidwriteLongString(Stringdaten)throwsException{","char[]chars=daten.toCharArray();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,chars.length*2L+4,SQLTokenizer.LONGVARBINARY);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.createFromException(e);","needGeneratedKeys=false;","generatedKeyIndexes=null;","generatedKeyNames=null;","finalpublicvoidclose(){","con.log.println(\"Statement.close\");"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(lengthColumn\>\>8);","page[offset++]=(byte)(lengthColumn);","writeBytes(daten);","if(!varBinary){","for(inti=length;i\<lengthColumn;i++){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncolumnExpressions.get(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returnSQLTokenizer.CASE;","finalbooleanisNull()throwsException{","returngetResult().isNull();","finalbooleangetBoolean()throwsException{","returngetResult().getBoolean();","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["return(long)readFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(long)readDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/10000;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["elsecompileLinkExpressionParams(param);","expr.optimize();","privatefinalintcompileAdd_All_Table_Columns(DataSourcefromEntry,TableViewtable,intposition){","for(intk=0;k\<table.columns.size();k++){","ExpressionNameexpr=newExpressionName(table.columns.get(k).getName());","expr.setFrom(fromEntry,k,table);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["writeByte(column.getFlag());","writeString(column.getName());","writeShort(column.getDataType());","writeInt(column.getPrecision());","writeByte(column.getScale());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnvalue^0x8000000000000000L;","finalstaticprivatechar[]stringToBinarySortOrder(Stringvalue,booleanneedTrim){","intlength=value.length();","if(needTrim){","while(length\>0&&value.charAt(length-1)==\'\')length--;","char[]puffer=newchar[length];"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl();","caseSQLTokenizer.BIGINT:","returngetLongImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(isMinus){","throwcreateSyntaxError(token,Language.STXADD_OPER_MINUS);","returnnewExpressionValue(Utils.hex2bytes(sql,token.offset+2,token.length-2),SQLTokenizer.VARBINARY);","if(isMinus)tok=\"-\"+tok;","if(Utils.indexOf(\'.\',sql,token.offset,token.length)\>=0||","Utils.indexOf(\'e\',sql,token.offset,token.length)\>=0){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr.setParams(params);","returnexpr;","privateRowSourcetableSource(Commandcmd,DataSourcestables)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_L://("]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return15;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["ObjectgetMonitor(){","returnthis;","publicStatementcreateStatement()throwsSQLException{","returnnewSSStatement(this);","publicPreparedStatementprepareStatement(Stringsql)throwsSQLException{","returnnewSSPreparedStatement(this,sql);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["@Override","voidclose()throwsException{","if(indexes!=null)","indexes.close();","raFile.close();","raFile=null;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Table(Databasedatabase,SSConnectioncon,Stringname,FileChannelraFile,longoffset,inttableFormatVersion)throwsException{","super(name,newColumns());","this.database=database;","this.raFile=raFile;","this.firstPage=offset;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.SELECT);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["privateListinsertStorePages;","privatelongfirstOwnInsert;","privatelongmaxFileOffset;","TableResult(Tabletable){","this.table=table;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["return(long)(readDouble()*10000L);","caseSQLTokenizer.MONEY:","returnreadLong();","caseSQLTokenizer.SMALLMONEY:","returnreadInt();","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(Character.toUpperCase(value.charAt(sIdx))!=m)returnfalse;","sIdx++;","break;","while(pattern.length()\>mIdx){","if(Character.toUpperCase(pattern.charAt(mIdx++))!=\'%\')returnfalse;","while(value.length()\>sIdx&&!range)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.FALSE:","returnnewExpressionValue(Boolean.FALSE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.ESCAPE_L:{","token=nextToken(COMMANDS_ESCAPE);","SQLTokenpara=nextToken(MISSING_EXPRESSION);","Expressionexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticStringgetKeywordFromOperation(intoperation){","inttoken=0;","for(inti=1;i\<1000;i++){","if(getOperationFromToken(i)==operation){","token=i;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicbyte[]getBytes(StringparameterName)throwsSQLException{","returngetBytes(findParameter(parameterName));","publicDategetDate(StringparameterName)throwsSQLException{","returngetDate(findParameter(parameterName));","publicTimegetTime(StringparameterName)throwsSQLException{","returngetTime(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["this.nodes=node.getChildNodes();","nodeValue=node.getValue();","this.asc=asc;","this.idx=(asc^scroll)?nodes.length:-2;","this.level=level;","voidafterLast(){"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["caseMAGIC_VIEW:","break;","default:","throwSmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID,fileName);","if(version\>TABLE_VIEW_VERSION)","throwSmallSQLException.create(Language.FILE_TOONEW,newObject[]{newInteger(version),fileName});"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().longValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.USE:","token=nextToken(MISSING_EXPRESSION);","Stringname=token.getName(sql);","checkValidIdentifier(name,token);","CommandSetset=newCommandSet(con.log,SQLTokenizer.USE);","set.name=name;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.second,2,buf);","buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();","case26:","case126://ISO8601;yyyy-mm-ddThh:mi:ss.mmm(24h)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintLIMIT=231;","staticfinalintDATABASE=235;","staticfinalintTABLE=236;","staticfinalintVIEW=237;","staticfinalintINDEX=238;","staticfinalintPROCEDURE=239;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{SAVEPT_INVALID_DRIVER,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdiesenTreiber{0}.\"},","{ALIAS_UNSUPPORTED,\"EinAliasistnichterlaubtfÃ¼rdiesenTypvonRowsource.\"},","{ISOLATION_UNKNOWN,\"UnbekantesTransaktionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"UngÃ¼ltigerWertdesFlagsinMethodegetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"UngÃ¼ltigesArgumentinMethodesetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeyswurdennichtangefordert.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returngetByte(findParameter(parameterName));","publicshortgetShort(StringparameterName)throwsSQLException{","returngetShort(findParameter(parameterName));","publicintgetInt(StringparameterName)throwsSQLException{","returngetInt(findParameter(parameterName));","publiclonggetLong(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["Stringsuchstr=param1.getString();","Stringvalue=param2.getString();","if(suchstr==null||value==null||suchstr.length()==0||value.length()==0)return0;","intstart=0;","if(param3!=null){","start=param3.getInt()-1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|"],
"["returnTypes.NUMERIC;","caseSQLTokenizer.REAL:","returnTypes.REAL;","caseSQLTokenizer.FLOAT:","returnTypes.FLOAT;","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicbooleansupportsMixedCaseQuotedIdentifiers(){","returntrue;","publicbooleanstoresUpperCaseQuotedIdentifiers(){","returnfalse;","publicbooleanstoresLowerCaseQuotedIdentifiers(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["addKeyWord(\"SELECT\",SELECT);","addKeyWord(\"DELETE\",DELETE);","addKeyWord(\"INTO\",INTO);","addKeyWord(\"UPDATE\",UPDATE);","addKeyWord(\"CREATE\",CREATE);","addKeyWord(\"DROP\",DROP);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["scrollStatus.getRowOffset(false);//previousposition","}else{","rowSource.beforeFirst();","row=sortedRowCount;","while(next()){","booleanabsolute(intnewRow)throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["addKeyWord(\"SQL_TINYINT\",SQL_TINYINT);","addKeyWord(\"SQL_VARBINARY\",SQL_VARBINARY);","addKeyWord(\"SQL_VARCHAR\",SQL_VARCHAR);","staticfinalintCOUNT=1400;","staticfinalintMIN=1401;","staticfinalintMAX=1402;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(line.length()==0&&command.length()\>0){","booleanisRS=st.execute(command.toString());","if(isRS){","printRS(st.getResultSet());","command.setLength(0);","command.append(line).append(\'\\n\');"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["finalObjectfindRows(Expression[]expressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;","intcount=expressions.length;","for(inti=0;i\<count;i++){","page=findRows(page,expressions[i],searchNullValues,nodeList);","if(page==null)"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.TRUE:","returnnewExpressionValue(Boolean.TRUE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.FALSE:","returnnewExpressionValue(Boolean.FALSE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.ESCAPE_L:{","token=nextToken(COMMANDS_ESCAPE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["SQLTokenizer.LONGVARCHAR,","SQLTokenizer.CLOB,","SQLTokenizer.VARBINARY,","SQLTokenizer.BINARY,","SQLTokenizer.LONGVARBINARY,","SQLTokenizer.BLOB,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidskip(intcount){","offset+=count;","intreadByte(){","returnpuffer[offset++];","intreadShort(){","return((puffer[offset++]&0xFF)\<\<8)|(puffer[offset++]&0xFF);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returncolumnExpressions.get(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getInt();","longgetLong(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["rowSource.setRowPosition(rowList.get(rowIdx));","booleanresult;","while((result=next())&&row-1\>rowIdx){/*scrollforward*/}","returnresult;","booleanrelative(introws)throwsException{","intnewRow=rows+rowIdx+1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["cal.setTimeZone(timezone);","cal.set(1970,0,d+1,0,0,t);","cal.set(Calendar.MILLISECOND,millis);","returncal.getTimeInMillis();","privatestaticlongremoveDateTimeOffset(longdatetime){","synchronized(cal){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["case104://germandd.mm.yyyy","formatNumber(details.day,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnode;","if(equals(node.getRemainderValue(),key,i)){","returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,char[]key,booleanisLast)throwsSQLException{","intlength=key.length;","inti=-1;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.BIT_NOT/10),ExpressionArithmetic.BIT_NOT);","break;","caseSQLTokenizer.PARENTHESIS_L:","leftExpr=expression(cmd,0);","token=nextToken(MISSING_PARENTHESIS_R);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{ARGUMENT_INVALID,\"01000\"},","{GENER_KEYS_UNREQUIRED,\"01000\"},","{SEQUENCE_HEX_INVALID,\"01000\"},","{SEQUENCE_HEX_INVALID_STR,\"01000\"},","{SYNTAX_BASE_OFS,\"01000\"},","{SYNTAX_BASE_END,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["database.createTable(con,name,columns,indexes,foreignKeys);","break;","caseSQLTokenizer.ADD:","con=newSSConnection(con);","TableoldTable=(Table)database.getTableView(con,name);","TableStorePagetableLock=oldTable.requestLock(con,SQLTokenizer.ALTER,-1);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["matrix=newint[size];","for(inti=0;i\<matrix.length;i++){","matrix[i]=-1;","for(inti=0;i\<columns.size();i++){","matrix[tableView.findColumnIdx(columns.get(i))]=i;","finalvoidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["writeChars(daten);","for(inti=length;i\<lengthColumn;i++){","page[offset++]=\'\';","page[offset++]=0;","StringreadString(){","intlength=readShort()&0xFFFF;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["token=nextToken(COMMANDS_TRANS_LEVEL);","CommandSetcmd=newCommandSet(con.log,SQLTokenizer.LEVEL);","switch(token.value){","caseSQLTokenizer.READ:","token=nextToken(MISSING_COMM_UNCOMM);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivateIndexNodefind(IndexNodenode,longkey,intdigitCount,ArrayListnodeList){","for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));","node=node.getChildNode(digit);","if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["intprecision;","if(tableFormatVersion==TableView.TABLE_VIEW_OLD_VERSION)","precision=readByte();","else","precision=readInt();","column.setPrecision(precision);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["result=right.next();","if(!result){","switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","if(isOuterValid){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","returngetString().getBytes();","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|"],
"["firstNode=false;","continue;","intvalue=getUnsignedShort();","if(value!=0||firstNode){","intpointer=getPointer();","if(pointer\>oldOffset){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.PARENTHESIS_L:","leftExpr=expression(cmd,0);","token=nextToken(MISSING_PARENTHESIS_R);","break;","default:","leftExpr=expressionSingle(cmd,token);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintSQL_TSI_MONTH=1256;","staticfinalintSQL_TSI_QUARTER=1257;","staticfinalintSQL_TSI_YEAR=1258;","static{","addKeyWord(\"MS\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"SQL_TSI_FRAC_SECOND\",SQL_TSI_FRAC_SECOND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["currentDS=dataSources.get(0);","booleanb=currentDS.first();","row=b?1:0;","returnb;","finalbooleannext()throwsException{","booleann=currentDS.next();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnSQLTokenizer.TIMESTAMPDIFF;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{","returngetInt()!=0;","intgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["longreadTimestamp(){","returnreadLong();","voidwriteTime(longtime){","writeInt((int)((time/1000)%86400));","longreadTime(){","returnreadInt()*1000L;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.min(((MutableFloat)value).value,expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.min(((MutableDouble)value).value,expr.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"EXEC\",EXECUTE);//aliasforEXECUTE;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"EXECUTE\",EXECUTE);","addKeyWord(\"FROM\",FROM);","addKeyWord(\"WHERE\",WHERE);","addKeyWord(\"GROUP\",GROUP);","addKeyWord(\"BY\",BY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["thrownewError();","privateCommandSetsetTransaction()throwsSQLException{","SQLTokentoken=nextToken(MISSING_ISOLATION);","token=nextToken(MISSING_LEVEL);","token=nextToken(COMMANDS_TRANS_LEVEL);","CommandSetcmd=newCommandSet(con.log,SQLTokenizer.LEVEL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(e!=null){","Entrynext=e.next;","if(e.key==key){","size--;","if(prev==e)","table[i]=next;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["{ROW_0_ABSOLUTE,\"Datensatz0istungÃ¼ltigfÃ¼rdieMethodeabsolute().\"},","{ROW_NOCURRENT,\"KeinaktuellerDatensatz.\"},","{ROWS_WRONG_MAX,\"FehlerhafterWertfÃ¼rMaximaleDatensatzanzahl:{0}.\"},","{ROW_LOCKED,\"DerDatensatzistgelockedvoneineranderenVerbindung.\"},","{ROW_DELETED,\"DerDatensatzistbereitsgelÃ¶scht.\"},","{SAVEPT_INVALID_TRANS,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdieaktuelleTransaction.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["quoteBuffer.append(quote);","i++;","}else{","tokens.add(newSQLToken(quoteBuffer.toString(),(quote==\'\\\'\')?STRING:IDENTIFIER,tokenStart,i+1));","quoteBuffer.setLength(0);","quote=0;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["try{","return(Language)Class.forName(langClassName).newInstance();","catch(IllegalAccessExceptione){","assert(false):\"Internalerror:mustneverhappen.\";","catch(ClassNotFoundExceptione){","catch(InstantiationExceptione){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["row[3]=col.getName();//COLUMN_NAME","row[4]=Utils.getShort(SQLTokenizer.getSQLDataType(col.getDataType()));//DATA_TYPE","row[5]=SQLTokenizer.getKeyWord(col.getDataType());//TYPE_NAME","row[6]=Utils.getInteger(col.getColumnSize());//COLUMN_SIZE","row[8]=Utils.getInteger(col.getScale());//DECIMAL_DIGITS","row[9]=Utils.getInteger(10);//NUM_PREC_RADIX"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["puffer[offset++]=(byte)(c\>\>8);","puffer[offset++]=(byte)(c);","voidwriteBytes(byte[]value,intoff,intlength){","verifyFreePufferSize(length);","System.arraycopy(value,off,puffer,offset,length);","offset+=length;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["addKeyWord(\"CAST\",CAST);","addKeyWord(\"IIF\",IIF);","staticfinalintSQL_BIGINT=1350;","staticfinalintSQL_BINARY=1351;","staticfinalintSQL_BIT=1352;","staticfinalintSQL_CHAR=1353;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["static{","keywords.put(newInteger(VALUE),\"\<expression\>\");","keywords.put(newInteger(IDENTIFIER),\"\<identifier\>\");","keywords.put(newInteger(NUMBERVALUE),\"\<number\>\");","staticfinalintPERCENT=\'%\';//37","staticfinalintBIT_AND=\'&\';//38"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{RSET_ON_INSERT_ROW,\"01000\"},","{ROWSOURCE_READONLY,\"01000\"},","{STMT_IS_CLOSED,\"HY010\"},","{SUBQUERY_COL_COUNT,\"01000\"},","{JOIN_DELETE,\"01000\"},","{JOIN_INSERT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric();","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["chars[10]=digits[(daten[offset+5])&0x0F];","chars[11]=digits[(daten[offset+4]\>\>4)&0x0F];","chars[12]=digits[(daten[offset+4])&0x0F];","chars[14]=digits[(daten[offset+7]\>\>4)&0x0F];","chars[15]=digits[(daten[offset+7])&0x0F];","chars[16]=digits[(daten[offset+6]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["right.nullRow();","returntrue;","}elsefullRightRowCounter++;","}elsefullRightRowCounter++;","isBeforeFirst=false;","}while(result&&!getBoolean());"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","publicclassStoreImplextendsStore{","privatestaticfinalintDEFAULT_PAGE_SIZE=8192;//8Kb","privatestaticfinalintPAGE_MAGIC=0x12DD13DE;//areusedforrepairingatable"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["nextColumn:","for(intc=0;c\<columns.size();c++){","StringcolName=columns.get(c);","for(ints=0;s\<strings.size();s++){","if(colName.equalsIgnoreCase(strings.get(s)))","continuenextColumn;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["data[offset++]=(byte)(value\>\>8);","data[offset++]=(byte)(value);","privatefinalvoidresize()throwsSQLException{","intnewsize=data.length\<\<1;","if(newsize\>0xFFFFFF){//seepointerSize","newsize=0xFFFFFF;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;","returnbytes;","caseSQLTokenizer.BINARY:{","byte[]bytes=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(tableView==null){","tableView=TableView.load(con,this,tableName);","tableViews.put(tableName,tableView);","returntableView;","staticvoiddropTable(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropTable(con,tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["num.setScale(getScale());","returnnum;","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(param1.getMoney());","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionIIFextendsExpressionFunction{","intgetFunction(){","returnSQLTokenizer.IIF;","booleanisNull()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["}else{","exprName.setFrom(this,idx,column);","}else{","patchExpressions(expr);","returnexpr;","finalvoidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["return_left\>=right.getFloat()&&right2.getFloat()\>=_left;","default:","returngetFloat()!=0;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME);","caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE);","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["else","if(newValueinstanceofNumber)","this.dataType=SQLTokenizer.DECIMAL;","else","if(newValueinstanceofjava.util.Date){","DateTimedateTime;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateintscale;","privateintsignum;","MutableNumeric(byte[]complement){","setValue(complement);","privatevoidsetValue(byte[]complement){","intlength=complement.length;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["try{","for(inti=0;i\<inList.length;i++){","right=inList[i];","if(getBoolean())returntrue;","}finally{","right=null;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnexpr.getFloat();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicdoublegetDouble(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["day=Integer.parseInt(datetime.substring(idx1,idx2).trim());","}else{","year=1970;","month=0;","day=1;","idx1=idx2+1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;","store.writeExpression(valueExpress,column);","for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeExpression(c,valueExpress);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["packagesmallsql.database;","classLongList{","privateintsize;","privatelong[]data;","LongList(){","this(16);"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/Index.java|","|project://smallsql/src/smallsql/database/Index.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","intgetInt()throwsException{","Stringsuchstr=param1.getString();","Stringvalue=param2.getString();","if(suchstr==null||value==null||suchstr.length()==0||value.length()==0)return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|"],
"["Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getFloat();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicdoublegetDouble(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(dataTypeIdx\>=BIGINT_IDX)","returnSQLTokenizer.BIGINT;","if(dataTypeIdx\>=MONEY_IDX)","returnSQLTokenizer.MONEY;","if(dataTypeIdx\>=DECIMAL_IDX)","returnSQLTokenizer.DECIMAL;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intnewSize=Math.max(minNewSize,page.length*2);","byte[]newPage=newbyte[newSize];","System.arraycopy(page,0,newPage,0,page.length);","page=newPage;","@Override","booleanisValidPage(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(type==Expression.NAME){","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","throwSmallSQLException.create(Language.GROUP_AGGR_NOTPART,expr);","}else","if(type\>=Expression.GROUP_BEGIN){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["intlength=value.length;","loop1:","for(intend=list.length-length;offset\<=end;offset++){","for(inti=0;i\<length;i++){","if(list[offset+i]!=value[i]){","continueloop1;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseLAST:","caseMAX:","caseMIN:","caseSUM:","returngetParams()[0].getDataType();","caseCOUNT:"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["return(int)readSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"INT\"});","@Override","longgetLong(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["updateObject(findColumn(columnName),x);","publicvoidinsertRow()throwsSQLException{","st.con.log.println(\"insertRow()\");","if(!isInsertRow){","throwSmallSQLException.create(Language.RSET_NOT_INSERT_ROW);","getCmd().insertRow(st.con,values);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["for(inti=0;i\<indexes.size();i++){","IndexDescriptionindexDesc=indexes.get(i);","store.writeInt(INDEX);","intoffsetStart=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart+4);//placeholderforlength","indexDesc.save(store);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["importjava.io.File;","importjava.io.FileNotFoundException;","importjava.io.RandomAccessFile;","importjava.nio.channels.FileChannel;","importjava.nio.channels.FileLock;","importjava.sql.SQLException;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["importsmallsql.database.language.Language;","classMemoryResultextendsDataSource{","ExpressionValue[]currentRow;","privatefinalColumnscolumns=newColumns();","privateintrowIdx=-1;","privateListrowList=newArrayList();//ListofExpressionGroup[]"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(param1.getBoolean())","returnparam2.getDouble();","returnparam3.getDouble();","longgetMoney()throwsException{","if(param1.getBoolean())","returnparam2.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["if(uebertrag){","resizeValue(1);","privatevoidresizeValue(inthighBits){","intval[]=newint[value.length+1];","val[0]=highBits;","System.arraycopy(value,0,val,1,value.length);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.INT:","returnnewMutableNumeric(((Number)obj).intValue());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(((Number)obj).longValue());","caseSQLTokenizer.REAL:","floatfValue=((Number)obj).floatValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["booleanfirstNode=true;","while(offset\<size){","if(offset==oldOffset){","intabsDiff=Math.abs(diff);","if(absDiff==2)return;","offset+=absDiff;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnstr1;","Stringstr3=param3.getString();","StringBufferbuffer=newStringBuffer();","intidx1=0;","intidx2=str1.indexOf(str2,idx1);","while(idx2\>=0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["{TABLE_EXISTENT,\"Latabella/vista\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'nonÃ¨unatabella.\"},","{PK_ONLYONE,\"UnatabellapuÃ²averesolounaprimarykey.\"},","{KEY_DUPLICATE,\"Chiaveduplicata.\"},","{MONTH_TOOLARGE,\"ValoredelmesetroppoaltodelinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"ValoredelgiornotroppoaltroinDATEoTIMESTAMP\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["this.fromEntry=fromEntry;","this.colIdx=colIdx;","this.column=column;","DataSourcegetDataSource(){","returnfromEntry;","StringgetTableAlias(){returntableAlias;}"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnMoney.parseMoney(getString().trim());","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getString().trim());","finalObjectgetObject()throwsException{","if(SSResultSetMetaData.isBinaryDataType(param1.getDataType()))"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["Object[][]getPrimaryKeys(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["importjava.util.TimeZone;","importsmallsql.database.language.Language;","publicfinalclassDateTimeimplementsMutable{","longtime;","privateintdataType=SQLTokenizer.TIMESTAMP;","staticfinalint[]MONTH_DAYS={0,31,59,90,120,151,181,212,243,273,304,334};"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["long[]resultStack=newlong[4];","int[]offsetStack=newint[4];","intstack;","finalvoidreset(){","stack=0;","offsetStack[0]=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeListEnum.java|"],
"["command.setLength(0);","e.printStackTrace();","privatestaticvoidprintRS(ResultSetrs)throwsSQLException{","ResultSetMetaDatamd=rs.getMetaData();","intcount=md.getColumnCount();","for(inti=1;i\<=count;i++){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["store.writeInt(columns.size());","for(intc=0;c\<columns.size();c++){","store.writeString(columns.get(c));","store.writeString(name);","finalstaticIndexDescriptionload(Databasedatabase,TableViewtableView,StoreImplstore)throwsSQLException{","intconstraintType=store.readInt();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["invalidParamCount=(paramCount!=0);","expr=newExpressionFunctionPI();","break;","caseSQLTokenizer.POWER:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionPower();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intvalueType=input.readByte();","switch(valueType){","case0:","value=null;","break;","case1:"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","default:thrownewError();","@Override","ObjectgetObject(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["writeInt(sizePhysical);","writeInt(0);//nextPageOffset","writeLong(filePosUpdated);//Pointerofanupdatedpage","storePage.setPageData(page,sizeUsed);//TODOpagesollteeigentlichbeimeinlesengesetztsein","if(con==null){","returnstorePage.commit();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(paramCount!=1){","invalidParamCount=true;","expr=null;//Onlyforthecompiler","break;","expr=newExpressionName(Expression.SUM);","expr.setParams(params);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalStoreNULL=newStoreNull();","staticfinalStoreNOROW=newStoreNoCurrentRow();","abstractbooleanisNull(intoffset)throwsException;","abstractbooleangetBoolean(intoffset,intdataType)throwsException;","abstractbyte[]getBytes(intoffset,intdataType)throwsException;","abstractdoublegetDouble(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["{VIEW_CANTDROP,\"View\'\'{0}\'\'can\'\'tbedropped.\"},","{RSET_NOT_PRODUCED,\"NoResultSetwasproduced.\"},","{RSET_READONLY,\"ResultSetisreadonly.\"},","{RSET_FWDONLY,\"ResultSetisforwardonly.\"},","{RSET_CLOSED,\"ResultSetisclosed.\"},","{RSET_NOT_INSERT_ROW,\"Cursoriscurrentlynotontheinsertrow.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.TINYINT);","publicvoidsetShort(intparameterIndex,shortx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.SMALLINT);","publicvoidsetInt(intparameterIndex,intx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["cmd.execute(con,this);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","needGeneratedKeys=false;","generatedKeyIndexes=null;","generatedKeyNames=null;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["existIndexes.add(newIndexes);","write(con);","for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);","TablepkTable=(Table)database.getTableView(con,foreignKey.pkTable);","pkTable.references.add(foreignKey);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["byte[]bytes=param1.getBytes();","intlength=param2.getInt();","if(bytes.length\<=length)returnbytes;","byte[]b=newbyte[length];","System.arraycopy(bytes,0,b,0,length);","returnb;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["finalExpressionget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(Expressionexpr){","if(size\>=data.length){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["returnreadLongString();","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject().toString();","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","ForeignKeysreferences=((Table)tab).references;","for(inti=0;i\<references.size();i++){","ForeignKeyforeignKey=references.get(i);","IndexDescriptionpk=foreignKey.pk;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["expressions,","columns);","Object[]param={\"CreateIndex\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandCreateDatabasecreateProcedure()throwsSQLException{","Object[]param={\"CreateProcedure\"};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintMAGIC_VIEW=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'V\';","staticfinalintTABLE_VIEW_VERSION=2;","staticfinalintTABLE_VIEW_OLD_VERSION=1;","finalStringname;","finalColumnscolumns;","privatelongtimestamp=System.currentTimeMillis();"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["this.con=con;","this.table=table;","this.lockType=lockType;","byte[]getData(){","returnpage;","longcommit()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["this.con=con;","this.rsType=rsType;","this.rsConcurrency=rsConcurrency;","con.testClosedConnection();","finalpublicResultSetexecuteQuery(Stringsql)throwsSQLException{","executeImpl(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["intidx=0;","input=input.toUpperCase();","if(input.length()\>0){","output[idx++]=input.charAt(0);","charlast=\'0\';","for(inti=1;idx\<4&&i\<input.length();i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["Object[]row=newObject[18];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=col.getName();//COLUMN_NAME","row[4]=Utils.getShort(SQLTokenizer.getSQLDataType(col.getDataType()));//DATA_TYPE","row[5]=SQLTokenizer.getKeyWord(col.getDataType());//TYPE_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalclassDataSources{","privateintsize;","privateDataSource[]data=newDataSource[4];","finalintsize(){","returnsize;","finalDataSourceget(intidx){"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["for(intc=0;c\<expressions.size();c++){","addColumn(newColumnExpression(expressions.get(c)));","patchExpressions(cmd.columnExpressions);","if(having!=null)having=patchExpression(having);","patchExpressions(orderBy);","finalprivateintaddInternalExpressionFromGroupBy(Expressionexpr)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnUtils.double2long(getDouble());","finalfloatgetFloat()throwsException{","return(float)getDouble();","MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;","switch(getDataType()){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["Expressioninput=null;","if(token.value!=SQLTokenizer.WHEN){","previousToken();","input=expression(cmd,0);","token=nextToken(MISSING_WHEN_ELSE_END);","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StringnewName=\"#\"+System.currentTimeMillis()+this.hashCode();","try{","ColumnsoldColumns=oldTable.columns;","ColumnsnewColumns=oldColumns.copy();","for(inti=0;i\<columns.size();i++){","addColumn(newColumns,columns.get(i));"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["addKeyWord(\"SUBSTRING\",SUBSTRING);","addKeyWord(\"TRIM\",TRIM);","addKeyWord(\"UCASE\",UCASE);","staticfinalintCURDATE=1200;//firsttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","staticfinalintCURRENTDATE=1201;","staticfinalintCURTIME=1202;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StringBufferquoteBuffer=newStringBuffer();","for(inti=0;i\<sql.length;i++){","charc=sql[i];","switch(c){","case\'\\\"\':","case\'\\\'\':"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(long)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.LONG);","privatelonggetLongImpl()throwsjava.lang.Exception{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(isLeapYear(year)){","if(day\<59){","day++;","isLeap=true;","dayofyear++;","if(day\<0){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(Float.isInfinite(fValue)||Float.isNaN(fValue))","returnnull;","returnnewMutableNumeric(fValue);","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","doubledValue=((Number)obj).doubleValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.year+=param1.getLong();","returnDateTime.calcMillis(details2);","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["writeString(column.getDefaultDefinition());","ColumnreadColumn(inttableFormatVersion)throwsException{","Columncolumn=newColumn();","column.setFlag(readByte());","column.setName(readString());","column.setDataType(readShort());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["default:throwcreateUnspportedDataType();","booleangetBoolean()throwsjava.lang.Exception{","switch(operation){","caseOR:returnleft.getBoolean()||right.getBoolean();","caseAND:returnleft.getBoolean()&&right.getBoolean();","caseNOT:return!left.getBoolean();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","Stringscolumns=index.getColumns();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["intparthesisCount=0;","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","if(token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){","parthesisCount++;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(nodeList!=null)nodeList.add(node);","if(equals(node.getRemainderValue(),key,i)){","returnnode;","returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,longkey,booleanisLastValue,intdigitCount)throwsSQLException{","for(inti=digitCount-1;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["add(val2);","privatevoidadd(int[]val2){","longtemp=0;","intv1=value.length;","for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)+(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>32);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["staticfinalintLES_EQU=56;//\<=","staticfinalintUNEQUALS=57;//\<\>","staticfinalintIN=61;//IN","staticfinalintBETWEEN=62;//BETWEEN","staticfinalintLIKE=63;//LIKE","staticfinalintISNULL=64;//ISNULL"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.sql.DriverManager;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","finalclassIndexDescription{","staticfinalintMAGIC_INDEX=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'I\';","staticfinalintINDEX_VERSION=1;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(params.length\>0)param1=params[0];","if(params.length\>1)param2=params[1];","if(params.length\>2)param3=params[2];","if(params.length\>3)param4=params[3];","finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"MONEY\"});","default:thrownewError();","@Override","MutableNumericgetNumeric(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIGINT)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARBINARY)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARBINARY)),Utils.getInteger(65535),\"0x\",null,\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BINARY)),Utils.getInteger(65535),\"0x\",null,\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGNVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["throwSmallSQLException.create(Language.COL_INVALID_NAME,expr.getName());","compileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionParams(Expressionexpr)throwsException{","Expression[]expParams=expr.getParams();","isAggregateFunction=isAggregateFunction||expr.getType()\>=Expression.GROUP_BEGIN;","if(expParams!=null){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnnum;","caseMUL:","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=left.getNumeric();","num.mul(right.getInt());","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["store.page=storePage.page;","store.sharedPageData=true;","store.readPageHeader();","store=store.loadUpdatedStore();","break;","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().longValue();","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidwriteBytes(byte[]daten){","intnewSize=offset+daten.length;","if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,0,page,offset,daten.length);","offset+=daten.length;","voidwriteBytes(byte[]daten,intoff,intlength){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","classFileIndexextendsIndex{","staticvoidprint(Indexindex,Expressionsexpressions){","IndexScrollStatusscroll=index.createScrollStatus(expressions);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnparam1.isNull();","finalbyte[]getBytes()throwsException{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringinput=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["intpointer=getPointer();","if(pointer\>oldOffset){","offset-=pointerSize;","writePointer(pointer+diff);","if(diff\>0)pointer+=diff;","if(level\<2){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["{TABLE_FILE_INVALID,\"File\'\'{0}\'\'doesnotincludeavalidSmallSQLTable.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidTableorViewstore.\"},","{TABLE_EXISTENT,\"TableorView\'\'{0}\'\'alreadyexists.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'isnotatable.\"},","{PK_ONLYONE,\"Atablecanhaveonlyoneprimarykey.\"},","{KEY_DUPLICATE,\"DuplicateKey.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidupdateRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidinsertRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","privateExpressionget(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(pos!=-1){","intlength=nodes.length-1;","IndexNode[]temp=newIndexNode[length];","System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos+1,temp,pos,length-pos);","nodes=temp;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DOUBLE)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NVARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BOOLEAN)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DATE)),Utils.getInteger(10),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIME)),Utils.getInteger(8),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Expressionsexpressions=newExpressions();","if(columnName!=null){","columns.add(columnName);","expressions.add(newExpressionName(columnName));","}else{","expressionDefList(cmd,expressions,columns);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["nextEntry=getUnsignedShort();","if(listEnum.stack\<3)","offset+=pointerSize;","}while(nextEntry!=0);","offset=nextOffset2;","finalprivateintinsertNode(intoctet)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnnewMutableNumeric(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnnewMutableNumeric(Utils.bytes2double(readLongBinary()));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["SQLTokenizer.DOUBLE,","SQLTokenizer.FLOAT,","SQLTokenizer.REAL,","SQLTokenizer.DECIMAL,","SQLTokenizer.NUMERIC,","SQLTokenizer.MONEY,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["char[]chars=unique.toCharArray();","byte[]daten=newbyte[16];","daten[3]=hex2byte(chars,0);","daten[2]=hex2byte(chars,2);","daten[1]=hex2byte(chars,4);","daten[0]=hex2byte(chars,6);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","StringuuidStr=expr.getString();","if(uuidStr.compareTo((String)value)\>0)value=uuidStr;","break;","default:","Stringkeyword=SQLTokenizer.getKeyWord(dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnbuf.toString();","case9:","case109://monddyyyyhh:mi:ss:mmmAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","publicclassStoreNoCurrentRowextendsStore{","privateSQLExceptionnoCurrentRow(){","returnSmallSQLException.create(Language.ROW_NOCURRENT);"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["publicvoidsetTransactionIsolation(intlevel)throwsSQLException{","if(!metadata.supportsTransactionIsolationLevel(level)){","throwSmallSQLException.create(Language.ISOLATION_UNKNOWN,String.valueOf(level));","isolationLevel=level;","publicintgetTransactionIsolation(){","returnisolationLevel;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.GROUP:","caseSQLTokenizer.HAVING:","caseSQLTokenizer.ORDER:","caseSQLTokenizer.COMMA:","caseSQLTokenizer.SET:","caseSQLTokenizer.JOIN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_PARENTHESIS_L);","cmd.addValues(expressionParenthesisList(cmd));","returncmd;","caseSQLTokenizer.SELECT:","cmd.addValues(select());","while(parthesisCount--\>0){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["time%=86400000;","break;","caseSQLTokenizer.DATE:","intmillis=(int)(time%86400000);","if(millis\<0)","millis+=86400000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnUtils.bytes2unique(page,this.offset);","default:thrownewError();","@Override","StringgetString(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row[7]=columnsFk.get(c);//FKCOLUMN_NAME","row[8]=Utils.getShort(c+1);//KEY_SEQ","row[9]=Utils.getShort(foreignKey.updateRule);//UPDATE_RULE","row[10]=Utils.getShort(foreignKey.deleteRule);//DELETE_RULE","row[11]=fk.getName();//FK_NAME","row[12]=pk.getName();//PK_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnreadLongString();","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject().toString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatefinalvoidclose()throwsException{","synchronized(tableViews){","Iteratoriterator=tableViews.values().iterator();","while(iterator.hasNext()){","TableViewtableView=(TableView)iterator.next();","tableView.close();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["this.sql=sql;","this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;","SQLTokentoken=nextToken(COMMANDS);","switch(token.value){","caseSQLTokenizer.SELECT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.AND:returnAND;","caseSQLTokenizer.NOT:returnNOT;","caseSQLTokenizer.BIT_OR:returnBIT_OR;","caseSQLTokenizer.BIT_AND:returnBIT_AND;","caseSQLTokenizer.BIT_XOR:returnBIT_XOR;","caseSQLTokenizer.TILDE:returnBIT_NOT;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(operation==NEGATIVE)","returngetDoubleImpl(0,left.getDouble());","returngetDoubleImpl(left.getDouble(),right.getDouble());","privatedoublegetDoubleImpl(doublelVal,doublerVal)throwsjava.lang.Exception{","switch(operation){","caseADD:returnlVal+rVal;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalprivateSSStatementst;","SSDatabaseMetaData(SSConnectioncon)throwsSQLException{","this.con=con;","st=newSSStatement(con);","publicbooleanallProceduresAreCallable(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["ExpressionsparamList=expressionParenthesisList(cmd);","intparamCount=paramList.size();","Expression[]params=paramList.toArray();","booleaninvalidParamCount;","switch(token.value){","caseSQLTokenizer.ABS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","inserts.add(lock.getLink());","}else{","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["writeShort(octet);","correctPointers(0,oldOffset,2,0);","finalprivatevoidremoveNode()throwsSQLException{","intoldOffset=offset;","correctPointers(0,oldOffset,-(2+pointerSize),0);","size-=2+pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["Object[][]getBestRowIdentifier(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publiclonglongValue(){","return(long)value;","publicStringtoString(){","returnString.valueOf(value);","publicObjectgetImmutableObject(){","returnnewFloat(value);"]": ["|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["static{","addKeyWord(\"ASCII\",ASCII);","addKeyWord(\"BIT_LENGTH\",BITLEN);","addKeyWord(\"CHAR_LENGTH\",CHARLEN);","addKeyWord(\"CHARACTER_LENGTH\",CHARACTLEN);","keywords.put(newInteger(_CHAR),\"CHAR\");//neededformetadatafunctions"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,off,page,offset,length);","offset+=length;","byte[]readBytes(intlength){","byte[]daten=newbyte[length];","System.arraycopy(page,offset,daten,0,length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{INDEX_EXISTS,\"Index\'\'{0}\'\'existiertbereits.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'existiertnicht.\"},","{INDEX_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeingÃ¼ltigerIndexspeicher.\"},","{INDEX_CORRUPT,\"ErrorbeimLadendesIndex.DieIndexDateiistbeschÃ¤digt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ZuvieleidentischeEintrÃ¤geimIndex.\"},","{FILE_TOONEW,\"Dateiversion({0})derDatei\'\'{1}\'\'istzuneufÃ¼rdieseLaufzeitbibliothek.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getBoolean();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbytegetByte(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["break;","default:","value=expr.getObject();","privatestaticfinalObjectEMPTY=newObject();","finalbooleanisEmpty(){","returnvalue==EMPTY;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(autoGeneratedKeys);","returnpr;","publicPreparedStatementprepareStatement(Stringsql,int[]columnIndexes)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(columnIndexes);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["finalpublicStringtoString(){","if(tableAlias==null)returnString.valueOf(getAlias());","returntableAlias+\".\"+getAlias();","StringgetTableName(){","if(table!=null){","returntable.getName();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["token=nextToken(MISSING_SQL_DATATYPE);","switch(token.value){","caseSQLTokenizer.SQL_BIGINT:dataType=SQLTokenizer.BIGINT;break;","caseSQLTokenizer.SQL_BINARY:dataType=SQLTokenizer.BINARY;break;","caseSQLTokenizer.SQL_BIT:dataType=SQLTokenizer.BIT;break;","caseSQLTokenizer.SQL_CHAR:dataType=SQLTokenizer.CHAR;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["operation=op;","if(operation!=op){","return0;","if(operation==ExpressionArithmetic.EQUALS){","Expressionparam0=params[0];","Expressionparam1=params[1];"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["try{","for(intt=0;t\<tables.size();t++){","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(t));","TableViewtable=result.getTableView();","ColumnstableColumns=table.columns;","intcount=tableColumns.size();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["privateExpressionleft;","privateExpressionright;","privateExpressionright2;","privateExpression[]inList;","finalprivateintoperation;","ExpressionArithmetic(Expressionleft,intoperation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["page=add(page,rowOffset,doubleToBinarySortOrder(expr.getDouble()),isLastValues,4);","break;","caseSQLTokenizer.TINYINT:","page=add(page,rowOffset,expr.getInt(),isLastValues,1);","break;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["value=val;","voidsub(MutableNumericnum){","if(num.scale\<scale){","num.setScale(scale);","}else","if(num.scale\>scale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["privatestaticlongremoveDateTimeOffset(longdatetime){","synchronized(cal){","cal.setTimeZone(TimeZone.getDefault());","cal.setTimeInMillis(datetime);","returndatetime+cal.get(Calendar.ZONE_OFFSET)+cal.get(Calendar.DST_OFFSET);","staticTimestampgetTimestamp(longtime){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["throwSmallSQLException.createFromException(e);","publicbytegetByte(inti)throwsSQLException{","return(byte)getInt(i);","publicshortgetShort(inti)throwsSQLException{","return(byte)getInt(i);","publicintgetInt(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.VARBINARY:","returnTypes.VARBINARY;","caseSQLTokenizer.LONGVARBINARY:","returnTypes.LONGVARBINARY;","caseSQLTokenizer.BLOB:","returnTypes.BLOB;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","if(index.isUnique()){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["testClosedConnection();","synchronized(getMonitor()){","intcount=commitPages.size();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.rollback();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["finalbooleannext()throwsException{","booleann=currentDS.next();","row++;","if(n)returntrue;","while(dataSources.size()\>dataSourceIdx+1){","currentDS=dataSources.get(++dataSourceIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull();","finalbooleangetBoolean()throwsException{","returngetDouble()!=0;","finalintgetInt()throwsException{","return(int)getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'T\');","formatNumber(details.hour,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintHAVING=214;","staticfinalintORDER=215;","staticfinalintASC=216;","staticfinalintDESC=217;","staticfinalintVALUES=218;","staticfinalintAS=219;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateDatabase(Stringname,FilecanonicalFile,booleanreadonly)throwsSQLException{","try{","this.name=name;","this.readonly=readonly;","directory=canonicalFile;","if(!directory.isDirectory()){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["privateListtokens;","privateinttokenIdx;","Commandparse(SSConnectioncon,StringsqlString)throwsSQLException{","this.con=con;","Commandcmd=parse(sqlString.toCharArray());","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["chars[16]=digits[(daten[offset+6]\>\>4)&0x0F];","chars[17]=digits[(daten[offset+6])&0x0F];","chars[19]=digits[(daten[offset+8]\>\>4)&0x0F];","chars[20]=digits[(daten[offset+8])&0x0F];","chars[21]=digits[(daten[offset+9]\>\>4)&0x0F];","chars[22]=digits[(daten[offset+9])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{ISOLATION_UNKNOWN,\"UnbekantesTransaktionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"UngÃ¼ltigerWertdesFlagsinMethodegetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"UngÃ¼ltigesArgumentinMethodesetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeyswurdennichtangefordert.\"},","{SEQUENCE_HEX_INVALID,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}in\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["}else{","shift+=16;","listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];","setPreviousOffset(listEnum);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(rowPosition\>=0){","row++;","rowSource.setRowPosition(rowPosition);","returntrue;","if(currentInsertedRow()\<insertedRows.size()-1){","row++;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["importsmallsql.database.language.Language;","abstractclassTableViewResultextendsDataSource{","SSConnectioncon;","privateStringalias;","privatelongtableTimestamp;","intlock=SQLTokenizer.SELECT;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["page=findRows(page,expressions.get(i),searchNullValues,nodeList);","if(page==null)","returnnull;","if(i+1==count)","returnpage.getValue();","else"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnb;","finalbooleannext()throwsException{","booleann=currentDS.next();","row++;","if(n)returntrue;","while(dataSources.size()\>dataSourceIdx+1){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intstart=0;","while(start\<str.length()&&str.charAt(start)==\'\'){","start++;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["ExpressionFunctionTimestampAdd(intintervalType,Expressionp1,Expressionp2){","interval=ExpressionFunctionTimestampDiff.mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});","intgetFunction(){","returnSQLTokenizer.TIMESTAMPADD;","booleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["for(intc=0;c\<count;c++){","Stringcolumn=store.readString();","columns.add(column);","expressions.add(sqlParser.parseExpression(column));","IndexDescriptionindexDesc=newIndexDescription(store.readString(),tableView.name,constraintType,expressions,columns);","indexDesc.init(database,tableView);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.INT);","publicvoidsetLong(intparameterIndex,longx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newLong(x),SQLTokenizer.BIGINT);","publicvoidsetFloat(intparameterIndex,floatx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["returncommandSelect.isFirst();","booleanfirst()throwsException{","returncommandSelect.first();","booleanprevious()throwsException{","returncommandSelect.previous();","booleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.LENGTH;","finalintgetInt()throwsException{","Stringstr=param1.getString();","if(str==null)return0;","intlength=str.length();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLength.java|"],
"["staticfinalintATAN=1003;","staticfinalintATAN2=1004;","staticfinalintCEILING=1005;","staticfinalintCOS=1006;","staticfinalintCOT=1007;","staticfinalintDEGREES=1008;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["ExpressionNameexpr=(ExpressionName)columnExpressions.get(i);","DataSourceds=expr.getDataSource();","TableResulttableResult=(TableResult)ds;","tableResult.lock=SQLTokenizer.UPDATE;","while(true){","synchronized(con.getMonitor()){"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["catch(ClassNotFoundExceptione){","catch(InstantiationExceptione){","assert(false):\"ErrorduringLanguageinstantiation:\"+e.getMessage();","intlastUndsc=part.lastIndexOf(\"_\");","if(lastUndsc\>-1)part=part.substring(0,lastUndsc);","elsebreak;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["break;","caseSQLTokenizer.SIGN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSign();","break;","caseSQLTokenizer.SQRT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();","publicbooleanequals(Objectobj){","if(!(objinstanceofDateTime))returnfalse;","DateTimevalue=(DateTime)obj;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["importjava.util.Map;","importjava.util.Calendar;","importjava.net.URL;","importjava.io.*;","importsmallsql.database.language.Language;","publicclassSSCallableStatementextendsSSPreparedStatementimplementsCallableStatement{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","publicclassFileIndexNodeextendsIndexNode{","privatefinalFileChannelfile;"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["returnexpr.getInt();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publiclonggetLong(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["booleanisBeforeFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleanfirst()throwsException;","booleanprevious()throwsException{"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["default:","thrownewError(String.valueOf(expr.getDataType()));","returnpage;","finalvoidaddValues(longrowOffset,Expressionsexpressions)throwsException{","IndexNodepage=this.rootPage;","intcount=expressions.size();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(columnIndexes);","returnpr;","publicPreparedStatementprepareStatement(Stringsql,String[]columnNames)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(columnNames);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(int)getDoubleImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{COL_AMBIGUOUS,\"Column\'\'{0}\'\'isambiguous.\"},","{GROUP_AGGR_INVALID,\"AggregatefunctionarenotvalidintheGROUPBYclause({0}).\"},","{GROUP_AGGR_NOTPART,\"Expression\'\'{0}\'\'isnotpartofaaggregatefunctionorGROUPBYclause.\"},","{ORDERBY_INTERNAL,\"InternalErrorwithORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DifferentSELECToftheUNIONhavedifferentcolumncount:{0}and{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'alreadyexists.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{","Stringvalue=SQL_STATES[i][1];","sqlStates.put(key,value);","publicStringgetMessage(Stringkey){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["executeImp();","returncmd.getUpdateCount();","finalprivatevoidexecuteImp()throwsSQLException{","checkStatement();","cmd.verifyParams();","if(getMaxRows()!=0&&(top==-1||top\>getMaxRows()))"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["staticStringcreateTableViewFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+TABLE_VIEW_EXTENTION;","staticStringcreateLobFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+LOB_EXTENTION;","staticStringcreateIdxFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+IDX_EXTENTION;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["node=newSearchNode();","node.letter=c;","if(wasNextEntry)","prev.nextEntry=node;","elseprev.nextLetter=node;","wasNextEntry=false;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["quote=c;","}elseif(quote==c){","if(i+1\<sql.length&&sql[i+1]==quote){","quoteBuffer.append(quote);","i++;","}else{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.REAL:","returnreadFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnreadDouble();","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetString(left.getString(),right.getString());","caseSQLTokenizer.JAVA_OBJECT:","ObjectlObj=left.getObject();","ObjectrObj=right.getObject();","if(lObjinstanceofNumber&&rObjinstanceofNumber)","returnnewDouble(getDoubleImpl(((Number)lObj).doubleValue(),((Number)rObj).doubleValue()));"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintDIV=82;///","staticfinalintMOD=83;//%","staticfinalintBIT_NOT=91;//~","staticfinalintNEGATIVE=101;//-","privatestaticfinalint[]DatatypeRange={","SQLTokenizer.TIMESTAMP,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return1;","return0;","caseSQLTokenizer.MONEY:","longValue=param1.getMoney();","if(longValue\<0)","return-1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["TableStorePageprev;","switch(lockType){","caseLOCK_INSERT:","for(inti=0;i\<locksInsert.size();i++){","prev=lock=(TableStorePage)locksInsert.get(i);","while(lock!=null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:{","if(operation==NEGATIVE)","returnleft.getNumeric().getSignum()!=0;","intcomp=left.getNumeric().compareTo(right.getNumeric());","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["StringscolumnsPk=pk.getColumns();","StringscolumnsFk=fk.getColumns();","for(intc=0;c\<columnsPk.size();c++){","Object[]row=newObject[14];","row[0]=getName();//PKTABLE_CAT","row[2]=foreignKey.pkTable;//PKTABLE_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["intoffsetEnd=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart);","store.writeInt(offsetEnd-offsetStart);","store.setCurrentOffsetInPage(offsetEnd);","store.writeInt(0);//nomoreadditionalinformations","store.writeFinsh(null);//Theconnectionparameterisnullbecausethetableheaderiswrittenimmediately."]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returncmd.getUpdateCount();","finalpublicbooleanexecute(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getResultSet()!=null;","finalprivatevoidexecuteImpl(Stringsql)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["break;","mIdx=lastmIdx;","continueweiter;","sIdx++;","range=false;","}else{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["pkTable.references.add(foreignKey);","Table(Databasedatabase,Stringname){","super(name,null);","this.database=database;","indexes=null;","references=null;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returngetBytes(findColumn(columnName));","publicDategetDate(StringcolumnName)throwsSQLException{","returngetDate(findColumn(columnName));","publicTimegetTime(StringcolumnName)throwsSQLException{","returngetTime(findColumn(columnName));","publicTimestampgetTimestamp(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnexpr;","default:","throwcreateSyntaxError(token,Language.STXADD_FUNC_UNKNOWN);","if(invalidParamCount){","throwcreateSyntaxError(token,Language.STXADD_PARAM_INVALID_COUNT);","expr.setParams(params);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSin();","break;","caseSQLTokenizer.SIGN:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(newValueinstanceofNumber)","this.dataType=SQLTokenizer.DECIMAL;","else","if(newValueinstanceofjava.util.Date){","DateTimedateTime;","this.value=dateTime=DateTime.valueOf((java.util.Date)newValue);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["queryTimeout=seconds;","finalpublicvoidcancel()throwsSQLException{","checkStatement();","finalpublicSQLWarninggetWarnings(){","returnnull;","finalpublicvoidclearWarnings(){"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["Objectobj=getValue(columnIndex).getApiObject();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value+=expr.getInt();","break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value+=expr.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(!wasWhiteSpace){","tokens.add(newSQLToken(value,tokenStart,sql.length));","returntokens;","staticprivatevoidaddKeyWord(Stringkeyword,intvalue){","keywords.put(Utils.getInteger(value),keyword);","char[]letters=keyword.toCharArray();"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),false),isLastValues);","break;","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["fileOffset=store.writeFinsh(null);","@Override","voidsaveRef(StoreImploutput)throwsSQLException{","if(fileOffset\<0){","save();","output.writeLong(fileOffset);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["getDatabase(con,catalog).dropTable(con,tableName);","voiddropTable(SSConnectioncon,StringtableName)throwsException{","synchronized(tableViews){","Tabletable=(Table)tableViews.get(tableName);","if(table!=null){","tableViews.remove(tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnprevious();","finalvoidafterLast()throwsException{","while(next()){/*scrollaftertheend*/}","finalintgetRow()throwsException{","returnisCurrentRow?row:0;","finallonggetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returnreadInt()*10000L;","caseSQLTokenizer.BIGINT:","returnreadLong()*10000L;","caseSQLTokenizer.REAL:","return(long)(readFloat()*10000L);","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","if(store==null)throwSmallSQLException.create(Language.LOB_DELETED);","returnnewString(store.readChars(store.readInt()));","voidwriteColumn(Columncolumn)throwsException{","intnewSize=offset+25;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}while(token.value==SQLTokenizer.INDEX);","returncreateIndex(true);","caseSQLTokenizer.NONCLUSTERED:","caseSQLTokenizer.CLUSTERED:","continue;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SQL_TSI_DAY:","returnparam2.getLong()+param1.getLong()*86400000;","caseSQLTokenizer.SQL_TSI_WEEK:{","returnparam2.getLong()+param1.getLong()*604800000;","}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["return0;","}else{","if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleDoubleFactor[scale]*signum;","}else","if(value.length==1){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{COL_IDX_OUT_RANGE,\"Indicedicolonnafuoridall\'\'intervallovalido:{0}.\"},","{COL_AMBIGUOUS,\"Ilnomedicolonna\'\'{0}\'\'Ã¨ambiguo.\"},","{GROUP_AGGR_INVALID,\"FunzionediaggregrazionenonvalidaperlaclausolaGROUPBY:({0}).\"},","{GROUP_AGGR_NOTPART,\"L\'\'espressione\'\'{0}\'\'nonÃ¨partediunafunzionediaggregazioneodellaclausolaGROUPBY.\"},","{ORDERBY_INTERNAL,\"ErroreinternoperORDERBY.\"},","{UNION_DIFFERENT_COLS,\"SELECTappartenentiadunaUNIONconnumerodicolonnedifferenti:{0}e{1}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnFloat.intBitsToFloat(readInt());","voidwriteNumeric(MutableNumericnum){","writeByte(num.getInternalValue().length);","writeByte(num.getScale());","writeByte(num.getSignum());","for(inti=0;i\<num.getInternalValue().length;i++){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=0;i\<count;i++){","Expressionexpr=expressions.get(i);","booleanisLastValues=(i==count-1);","if(expr.isNull()){","page=addNull(page,rowOffset,isLastValues);","}else{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(lengthColumn\<length){","throwSmallSQLException.create(Language.VALUE_STR_TOOLARGE);","if(varchar)lengthColumn=length;","intnewSize=offset+2+2*lengthColumn;","if(newSize\>page.length)resizePage(newSize);","writeShort(lengthColumn);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","Expressioncol=columnExpressions.get(i);","if(!col.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(needGeneratedKeys&&generatedKeysType==0&&valueExpress!=Expression.NULL){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","if(needGeneratedKeys&&generatedKeysType==1){","String[]keyNames=st.getGeneratedKeyNames();","for(inti=0;i\<keyNames.length;i++){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["rowPos=1;","returntrue;","finalbooleanprevious(){","rowPos--;","returnrowPos==1;","finalbooleannext(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,String[]columnNames)throwsSQLException{","setNeedGeneratedKeys(columnNames);","returnexecuteUpdate(sql);","finalpublicbooleanexecute(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionTimestampAddextendsExpressionFunction{","finalprivateintinterval;","ExpressionFunctionTimestampAdd(intintervalType,Expressionp1,Expressionp2){","interval=ExpressionFunctionTimestampDiff.mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["finalvoidadd(ForeignKeyforeignKey){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=foreignKey;","privatefinalvoidresize(intnewSize){","ForeignKey[]dataNew=newForeignKey[newSize];"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["ByteBufferbuffer=ByteBuffer.wrap(store.page);","raFile.read(buffer);","}else{","store.page=storePage.page;","store.sharedPageData=true;","store.readPageHeader();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["columnExpressions.addAll(sources);","compile(con);","columnExpressions.setSize(count);","newRowSources=sources.toArray();","updateCount=0;","from.execute();"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["for(inti=0;i\<locksInsert.size();i++){","prev=lock=(TableStorePage)locksInsert.get(i);","while(lock!=null){","if(lock==storePage){","if(lock==prev){","if(lock.nextLock==null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnnewDateTime(parse(date),SQLTokenizer.DATE);","staticDateTimevalueOf(java.sql.Timedate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIME);","staticDateTimevalueOf(java.sql.Timestampdate){","if(date==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnENTRIES;","privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"NichtunterstÃ¼tzteFunktion:{0}\"},","{CANT_LOCK_FILE,\"DieDatei\'\'{0}\'\'kannnichtgelocktwerden.EineeinzelneSmallSQLDatenbankkannnurfÃ¼reineneinzigenProzessgeÃ¶ffnetwerden.\"},","{DB_EXISTENT,\"DieDatenbank\'\'{0}\'\'existiertbereits.\"},","{DB_NONEXISTENT,\"DieDatenbank\'\'{0}\'\'existiertnicht.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["}while(nextEntry!=0);","offset=nextOffset2;","finalprivateintinsertNode(intoctet)throwsSQLException{","intoldOffset=offset;","if(data.length\<size+4+pointerSize)resize();","System.arraycopy(data,oldOffset,data,oldOffset+2+pointerSize,size-oldOffset);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLMONEY)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.INT)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLINT)),Utils.getInteger(5),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.FLOAT)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.REAL)),Utils.getInteger(7),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DOUBLE)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicConnectiongetConnection(){","returncon;","publicbooleansupportsSavepoints(){","returnfalse;","publicbooleansupportsNamedParameters(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["store=(filePos\<maxFileOffset)?table.getStore(con,filePos,lock):null;","if(store==null){","if(insertStorePages.size()\>0){","filePos=0x4000000000000000L;","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","if(store!=null){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.CLUSTERED:","caseSQLTokenizer.NONCLUSTERED:","break;","default:","previousToken();","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["prevLock=lock;","lock=lock.nextLock;","if(usableLock!=null){","returnusableLock;","lock=newTableStorePage(con,this,LOCK_NONE,page);","if(con.isolationLevel\>=Connection.TRANSACTION_REPEATABLE_READ||pageOperation==SQLTokenizer.UPDATE){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["previousToken();","returnleftExpr;","switch(token.value){","caseSQLTokenizer.PLUS:","caseSQLTokenizer.MINUS:","caseSQLTokenizer.ASTERISK:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseMOD:","return0;","returngetScale(dataType);","booleanisNull()throwsException{","switch(operation){","caseOR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalbyte[]getBytes(intcolIdx)throwsException{","returnstore.getBytes(offsets[colIdx],dataTypes[colIdx]);","@Override","finalintgetDataType(intcolIdx){","returndataTypes[colIdx];","finalprivatevoidcopyValueInto(intcolIdx,StoreImpldst){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["metaData.columns=cmd.columnExpressions;","returnmetaData;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","returnnull;","publicvoidsetDate(intparameterIndex,Datex,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["for(inti=0;i\<paramCount-1;i+=2)","exprCase.addCase(params[i],params[i+1]);","exprCase.setEnd();","expr=exprCase;","break;","caseSQLTokenizer.IFNULL:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["previousToken();","expressions.add(expression(cmd,0));","SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;","columns.add(newString(sql,offset,length));","token=nextToken(MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!result){","noRow();","returnresult;","voidafterLast(){","isAfterLast=true;","noRow();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["patchExpressions(orderBy);","finalprivateintaddInternalExpressionFromGroupBy(Expressionexpr)throwsSQLException{","inttype=expr.getType();","if(type\>=Expression.GROUP_BEGIN){","throwSmallSQLException.create(Language.GROUP_AGGR_INVALID,expr);","}else{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["expr.setAlias(SQLTokenizer.DESC_STR);","caseSQLTokenizer.ASC:","token=nextToken();","if(token==null){","previousToken();","returnlist;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARBINARY:","ExpressionFunctionRTrimtrim=newExpressionFunctionRTrim();","trim.setParams(newExpression[]{expr});","returntrim;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["default:throwcreateUnsupportedConversion(dataType,obj,SQLTokenizer.VARBINARY);","finalintgetDataType(){","returndataType;","StringgetTableName(){","returnnull;","finalintgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateExpressionelseResult=Expression.NULL;","privateintdataType=-1;","finalvoidaddCase(Expressioncondition,Expressionresult){","cases.add(condition);","results.add(result);","finalvoidsetElseResult(Expressionexpr){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.TIME:","((DateTime)value).time=Math.max(((DateTime)value).time,expr.getLong());","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","StringuuidStr=expr.getString();","if(uuidStr.compareTo((String)value)\>0)value=uuidStr;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticbyte[]int2bytes(intvalue){","byte[]result=newbyte[4];","result[0]=(byte)(value\>\>24);","result[1]=(byte)(value\>\>16);","result[2]=(byte)(value\>\>8);","result[3]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["size-=2+pointerSize;","System.arraycopy(data,oldOffset+2+pointerSize,data,oldOffset,size-oldOffset);","offset=oldOffset;","finalprivatevoidremoveNodeLastLevel()throwsSQLException{","intoldOffset=offset;","correctPointers(0,oldOffset,-2,0);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["staticfinalintMAX=1402;","staticfinalintSUM=1403;","staticfinalintFIRST=1404;","staticfinalintLAST=1405;","staticfinalintAVG=1406;","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnfalse;","finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();","row=0;","finalbooleanfirst()throwsException{","beforeFirst();"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["finalprivateintaddInternalExpressionFromSelect(Expressionexpr)throwsSQLException{","inttype=expr.getType();","if(type==Expression.NAME){","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","throwSmallSQLException.create(Language.GROUP_AGGR_NOTPART,expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["Column[]cols=copy.data=(Column[])data.clone();","for(inti=0;i\<size;i++){","cols[i]=cols[i].copy();","copy.size=size;","returncopy;","privatefinalvoidresize(intnewSize){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["caseSQLTokenizer.COT:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCot();","break;","caseSQLTokenizer.DEGREES:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintON=224;","staticfinalintOUTER=225;","staticfinalintFULL=226;","staticfinalintCROSS=227;","staticfinalintUSE=228;","staticfinalintTOP=229;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","classGroupResultextendsMemoryResult{","privateExpressioncurrentGroup;//Validateifthecurrentrowofcmdispartofthecurrentgroup","privateRowSourcefrom;","privateExpressionsgroupBy;//thelistofExpressionsintheGROUPBYclause"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull();","finalbooleangetBoolean()throwsException{","returngetInt()!=0;","finallonggetLong()throwsException{","returngetInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["addKeyWord(\"USER\",USER);","addKeyWord(\"CONVERT\",CONVERT);","addKeyWord(\"CAST\",CAST);","addKeyWord(\"IIF\",IIF);","staticfinalintSQL_BIGINT=1350;","staticfinalintSQL_BINARY=1351;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getLong(),dataType);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returngetBytes();","default:throwcreateUnspportedDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatevoidadd(intsig2,int[]val2){","if(val2.length\>value.length){","int[]temp=val2;","val2=value;","value=temp;","inttempi=signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME);","caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnrowSource;","finalprivatebooleanisValidRow()throwsException{","returnwhere==null||rowSource.rowInserted()||where.getBoolean();","finalbooleanisScrollable(){","returnrowSource.isScrollable();","finalbooleanisBeforeFirst(){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["finalbooleangetBoolean()throwsException{","if(isNull())returnfalse;","returnUtils.string2boolean(getString().trim());","finalintgetInt()throwsException{","if(isNull())return0;","returnInteger.parseInt(getString().trim());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*4+details2.month/3)-(details1.year*4+details1.month/3);","caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalbooleanisFirst(){","returnrow==1;","voidbeforeFirst()throwsException{","scrollStatus.reset();","row=0;","useSetRowPosition=false;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["Stringname=SQLTokenizer.getKeyWord(validValues[i]);","if(name==null)name=String.valueOf((char)validValues[i]);","msgBuf.append(name);","if(i\<validValues.length-2)","msgBuf.append(\",\");","else"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<4&&0\<length;i++){","temp|=(complement[--length]&0xFF)\<\<(i*8);","value[v]=temp;","MutableNumeric(intcomplement){","if(complement==0){","signum=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["throwSmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID,fileName);","if(version\>TABLE_VIEW_VERSION)","throwSmallSQLException.create(Language.FILE_TOONEW,newObject[]{newInteger(version),fileName});","if(version\<TABLE_VIEW_OLD_VERSION)","throwSmallSQLException.create(Language.FILE_TOOOLD,newObject[]{newInteger(version),fileName});","if(magic==MAGIC_TABLE)"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["default:","invalidParamCount=true;","expr=null;//onlyforCompiler","break;","caseSQLTokenizer.COUNT:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(long)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.LONG);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{SYNTAX_BASE_OFS,\"Syntaxerroratoffset{0}on\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Syntaxerror,unexpectedendofSQLstring.\"},","{STXADD_ADDITIONAL_TOK,\"AdditionaltokenafterendofSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Identifierexpected.\"},","{STXADD_IDENT_EMPTY,\"EmptyIdentifier.\"},","{STXADD_IDENT_WRONG,\"WrongIdentifier\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["abstractlonggetMoney(intcolIdx)throwsException;","abstractMutableNumericgetNumeric(intcolIdx)throwsException;","abstractObjectgetObject(intcolIdx)throwsException;","abstractStringgetString(intcolIdx)throwsException;","abstractbyte[]getBytes(intcolIdx)throwsException;","abstractintgetDataType(intcolIdx);"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.MONTH;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());","returndetails.month+1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionMonth.java|"],
"["publicbooleanisDefinitelyWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();","publicStringgetColumnClassName(intcolumn)throwsSQLException{","switch(getColumnType(column)){","caseTypes.TINYINT:","caseTypes.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["booleanrelative(introws)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractintgetRow()throwsException;","abstractlonggetRowPosition();","abstractvoidsetRowPosition(longrowPosition)throwsException;","abstractvoidnullRow();"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["MutableNumericnum=left.getNumeric();","num.setSignum(-num.getSignum());","returnnum;","caseMOD:","if(getDataType(getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","returnnewMutableNumeric(getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finallongkey;","finalTableStorePagevalue;","Entrynext;","Entry(longk,TableStorePagev,Entryn){","value=v;","next=n;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["staticfinalintCOUNT=12;","staticfinalintSUM=13;","staticfinalintFIRST=14;","staticfinalintLAST=15;","staticfinalintMIN=16;","staticfinalintMAX=17;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["this.columnExpressions=columnExpressions;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{","columnExpressions.add(column);","voidaddParameter(ExpressionValueparam){","params.add(param);","voidverifyParams()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["right.setAlias(token.getName(sql));","token=nextToken();","continue;","throwcreateSyntaxError(token,MISSING_ON);","privateRowSourcerowSource(Commandcmd,DataSourcestables,intparenthesis)throwsSQLException{","RowSourcefromSource=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncalcMillis(year,month,day,hour,minute,second,millis);","}catch(SQLExceptionex){","throwex;","}catch(Throwableex){","throwSmallSQLException.createFromException(Language.DATETIME_INVALID,datetime,ex);","longgetTimeMillis(){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returngetRef(findColumn(columnName));","publicBlobgetBlob(StringcolumnName)throwsSQLException{","returngetBlob(findColumn(columnName));","publicClobgetClob(StringcolumnName)throwsSQLException{","returngetClob(findColumn(columnName));","publicArraygetArray(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalprivateTabletable;","privatebooleansharedPageData;","privateStorePagestorePage;","privatelongfilePos;//Positioninthefile","privateintsizeUsed;","privateintsizePhysical;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(offset\<size){","if(offset==oldOffset){","intabsDiff=Math.abs(diff);","if(absDiff==2)return;","offset+=absDiff;","firstNode=false;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["updateValues[i]=null;","result.insertRow(updateValues);","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalclassExpressionFunctionOctetLenextendsExpressionFunctionReturnInt{","privatestaticfinalintBYTES_PER_CHAR=2;","finalintgetFunction(){","returnSQLTokenizer.OCTETLEN;","booleanisNull()throwsException{","returnparam1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|"],
"["{ORDERBY_INTERNAL,\"InternalErrorwithORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DifferentSELECToftheUNIONhavedifferentcolumncount:{0}and{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'alreadyexists.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'doesnotexist.\"},","{INDEX_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidIndexstore.\"},","{INDEX_CORRUPT,\"ErrorinloadingIndex.Indexfileiscorrupt.({0}).\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.DATE:","return(int)readDate();","caseSQLTokenizer.SMALLDATETIME:","return(int)readSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"INT\"});"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{DB_NONEXISTENT,\"Database\'\'{0}\'\'doesnotexist.\"},","{DB_NOT_DIRECTORY,\"Directory\'\'{0}\'\'isnotaSmallSQLdatabase.\"},","{DB_NOTCONNECTED,\"YouarenotconnectedwithaDatabase.\"},","{CONNECTION_CLOSED,\"Connectionisalreadyclosed.\"},","{VIEW_INSERT,\"INSERTisnotsupportedforaview.\"},","{VIEWDROP_NOT_VIEW,\"CannotuseDROPVIEWwith\'\'{0}\'\'becauseitdoesnotisaview.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["longgetLong()throwsException{","if(isNull())return0;","switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","returnparam2.getLong()+param1.getLong();","caseSQLTokenizer.SQL_TSI_SECOND:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["prev.nextLock=lock.nextLock;","return;","prev=lock;","lock=lock.nextLock;","break;","caseLOCK_TAB:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(wasNull)returnnull;","returnnewTimestamp(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(StringcolumnName,Calendarcal)throwsSQLException{","returngetTimestamp(findColumn(columnName),cal);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["right.nullRow();","returntrue;","}elsefullRightRowCounter++;","}else{","if(type==Join.FULL_JOIN){","while(right.next()){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["clearRowBuffer();","}else{","throwSmallSQLException.create(Language.RSET_READONLY);","publicvoidmoveToCurrentRow()throwsSQLException{","isInsertRow=false;","clearRowBuffer();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnalter();","caseSQLTokenizer.SET:","returnset();","caseSQLTokenizer.USE:","token=nextToken(MISSING_EXPRESSION);","Stringname=token.getName(sql);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidwriteLong(longvalue){","intnewSize=offset+8;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>56);","page[offset++]=(byte)(value\>\>48);","page[offset++]=(byte)(value\>\>40);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return0;","finalvoidcreateWriteLock()throwsSQLException{","TableStorePagestorePageWrite=table.requestWriteLock(((TableStorePage)storePage).con,(TableStorePage)storePage);","if(storePageWrite==null)","throwSmallSQLException.create(Language.ROW_LOCKED);","storePage=storePageWrite;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if((i+1\<sql.length)&&(sql[i+1]==\'*\')){","i++;","tokenStart=i+1;","comment=MULTI_COMMENT;","break;","default:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["currentRow=null;","finalbooleanabsolute(introw)throwsSQLException{","if(row==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","rowIdx=(row\>0)?","Math.min(row-1,rowList.size()):","Math.max(row+rowList.size(),-1);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","if(needGeneratedKeys&&generatedKeysType==1){","String[]keyNames=st.getGeneratedKeyNames();","for(inti=0;i\<keyNames.length;i++){","if(column.getName().equalsIgnoreCase(keyNames[i])){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returngetDouble(findColumn(columnName));","publicBigDecimalgetBigDecimal(StringcolumnName,intscale)throwsSQLException{","returngetBigDecimal(findColumn(columnName),scale);","publicbyte[]getBytes(StringcolumnName)throwsSQLException{","returngetBytes(findColumn(columnName));","publicDategetDate(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["break;","caseSQLTokenizer.LOG10:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog10();","break;","caseSQLTokenizer.MOD:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{DB_EXISTENT,\"Ildatabase\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{DB_NONEXISTENT,\"Ildatabase\'\'{0}\'\'Nonesiste.\"},","{DB_NOT_DIRECTORY,\"Ladirectory\'\'{0}\'\'nonÃ¨undatabaseSmallSQL.\"},","{DB_NOTCONNECTED,\"L\'\'utentenonÃ¨connessoaundatabase.\"},","{CONNECTION_CLOSED,\"LaconnessioneÃ¨giÃ\u00a0chiusa.\"},","{VIEW_INSERT,\"INSERTnonÃ¨supportatoperunaview.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["daten[0]=hex2byte(chars,6);","daten[5]=hex2byte(chars,9);","daten[4]=hex2byte(chars,11);","daten[7]=hex2byte(chars,14);","daten[6]=hex2byte(chars,16);","daten[8]=hex2byte(chars,19);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{DB_NONEXISTENT,\"01000\"},","{DB_NOT_DIRECTORY,\"01000\"},","{DB_NOTCONNECTED,\"01000\"},","{CONNECTION_CLOSED,\"01000\"},","{VIEW_INSERT,\"01000\"},","{VIEWDROP_NOT_VIEW,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privatefinalExpressionscases=newExpressions();","privatefinalExpressionsresults=newExpressions();","privateExpressionelseResult=Expression.NULL;","privateintdataType=-1;","finalvoidaddCase(Expressioncondition,Expressionresult){","cases.add(condition);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseLIKE:","caseISNULL:","caseISNOTNULL:","caseIN:","returnfalse;//Booleanoperationsreturneveraresult???,butatleastISNULLandISNOTNULL","caseNEGATIVE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.sql=sql;","this.commandSelect=null;","write(database,con);","View(SSConnectioncon,CommandSelectcommandSelect)throwsException{","super(\"UNION\",newColumns());","this.sql=null;"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["if(value!=null)throwSmallSQLException.create(Language.KEY_DUPLICATE);","value=newLong(rowOffset);","}else{","LongTreeListlist=(LongTreeList)value;","if(list==null){","value=list=newLongTreeList();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["intoffset=0;","bytes[offset++]=(byte)(value\>\>56);","bytes[offset++]=(byte)(value\>\>48);","bytes[offset++]=(byte)(value\>\>40);","bytes[offset++]=(byte)(value\>\>32);","bytes[offset++]=(byte)(value\>\>24);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["{DAYS_TOOLARGE,\"ValoredelgiornotroppoaltroinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"ValoredelleoretroppoaltoininTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"ValoredeiminutitroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"ValoredeiseconditroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"VAloredeimilliseconditroppoaltoinTIMESTAMP\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'Ã¨unDATE,TIMEorTIMESTAMPnonvalido.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["importjava.sql.Types;","importsmallsql.database.language.Language;","publicclassSQLTokenizer{","privatestaticfinalintNOT_COMMENT=0;","privatestaticfinalintLINE_COMMENT=1;","privatestaticfinalintMULTI_COMMENT=2;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnbuf.toString();","case21:","case121://ODBCkannonish+millis;yyyy-mm-ddhh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalIndexNodeaddRootValue(char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);","returnaddRoot();","finalIndexNodeaddRootValue(longremainderValue,intdigitCount)throwsSQLException{","saveRemainderValue(remainderValue,digitCount);","returnaddRoot();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Object[][]getReferenceKeys(SSConnectioncon,StringpkTable,StringfkTable)throwsSQLException{","Listrows=newArrayList();","Stringstables=(pkTable!=null)?getTables(pkTable):getTables(fkTable);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["break;","caseSQLTokenizer.CHAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionChar();","break;","caseSQLTokenizer.CONCAT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["byte[]toByteArray(){","if(signum==0)returnEMPTY_BYTES;","byte[]complement;","intoffset;","intv=0;","while(v\<value.length&&value[v]==0)v++;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["column.setName(expr.getAlias());","columns.add(column);","}else{","columns.add(newColumnExpression(expr));","staticvoiddrop(Databasedatabase,Stringname)throwsException{","Filefile=newFile(Utils.createTableViewFileName(database,name));"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["privateJoinjoin(Commandcmd,DataSourcestables,RowSourceleft,inttype)throwsSQLException{","RowSourceright=rowSource(cmd,tables,0);","SQLTokentoken=nextToken();","while(true){","if(token==null){","throwcreateSyntaxError(token,Language.STXADD_JOIN_INVALID);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intlength=remainderValue.length-offset;","this.remainderKey=newchar[length];","System.arraycopy(remainderValue,offset,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(longremainderValue,intcharCount){","this.remainderKey=newchar[charCount];","for(inti=charCount-1,d=0;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIMESTAMP);","staticDateTimevalueOf(Stringdate,intdataType)throwsSQLException{","if(date==null)returnnull;","returnnewDateTime(parse(date),dataType);","staticlongparse(finalStringdatetime)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(float)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatefloatgetFloatImpl()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["System.arraycopy(cols.data,0,data,size,count);","size+=count;","finalvoidclear(){","size=0;","finalvoidremove(intidx){","System.arraycopy(data,idx+1,data,idx,(--size)-idx);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["returnrowPos==1;","finalbooleannext(){","rowPos++;","returnrowPos==1;","finalbooleanlast(){","rowPos=1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["}finally{","right=null;","returnfalse;","SQLExceptioncreateUnspportedDataType(){","Object[]params={","SQLTokenizer.getKeyWord(getDataType(left,right)),"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnfromEntry.getBytes(colIdx);","intgetDataType(){","switch(getType()){","caseNAME:","caseGROUP_BY:","returnfromEntry.getDataType(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnexpr;","finalvoidexecute()throwsException{","super.execute();","from.execute();","NextRow:","while(from.next()){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getBoolean();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["String[]colNames={\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"CLASS_NAME\",\"DATA_TYPE\",\"REMARKS\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicConnectiongetConnection(){","returncon;","publicbooleansupportsSavepoints(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["page=findRows(page,expressions[i],searchNullValues,nodeList);","if(page==null)","returnnull;","if(i+1==count)","returnpage.getValue();","else"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.END:","expr.setEnd();","returnexpr;","default:","thrownewError();","token=nextToken(MISSING_WHEN_ELSE_END);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnDateTime.getDate(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull();","booleangetBoolean()throwsException{","returnExpressionValue.getBoolean(getObject(),getDataType());","intgetInt()throwsException{","returnExpressionValue.getInt(getObject(),getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returngetIdentifier(nextToken(MISSING_IDENTIFIER));","privateStringnextIdentiferPart(Stringname)throwsSQLException{","SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){","returnnextIdentifier();","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassCommand{","inttype;","Stringcatalog;","Stringname;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseSQLTokenizer.SQL_BINARY:dataType=SQLTokenizer.BINARY;break;","caseSQLTokenizer.SQL_BIT:dataType=SQLTokenizer.BIT;break;","caseSQLTokenizer.SQL_CHAR:dataType=SQLTokenizer.CHAR;break;","caseSQLTokenizer.SQL_DATE:dataType=SQLTokenizer.DATE;break;","caseSQLTokenizer.SQL_DECIMAL:dataType=SQLTokenizer.DECIMAL;break;","caseSQLTokenizer.SQL_DOUBLE:dataType=SQLTokenizer.DOUBLE;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return(obj.equals(Boolean.TRUE))?1:0;","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionACos();","break;","caseSQLTokenizer.ASIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionASin();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"STUFF\",INSERT);//aliasforMSSQLServer","addKeyWord(\"INSERT\",INSERT);","addKeyWord(\"LCASE\",LCASE);","addKeyWord(\"LEFT\",LEFT);","addKeyWord(\"DATALENGTH\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LEN\",LENGTH);//aliasforMSSQLServer"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateinttokenIdx;","Commandparse(SSConnectioncon,StringsqlString)throwsSQLException{","this.con=con;","Commandcmd=parse(sqlString.toCharArray());","SQLTokentoken=nextToken();","if(token!=null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\<0)","value=newValue;","break;","caseSQLTokenizer.MONEY:","((Money)value).value=Math.max(((Money)value).value,expr.getMoney());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(isTypeView){","row[3]=\"VIEW\";","rows.add(row);","}else{","if(isTypeTable){","row[3]=\"TABLE\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["System.out.println();","System.out.println(\"\\tUsetheUSEcommandtochangethedatabasecontext.\");","System.out.println(\"\\tType2timesENTERtoexecuteanySQLcommand.\");","StringBuffercommand=newStringBuffer();","BufferedReaderinput=newBufferedReader(newInputStreamReader(System.in));","while(true){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(table==null||tableTimestamp!=table.getTimestamp())compile(con);","finalIndexDescriptionsindexes=table.indexes;","updateCount=0;","cmdSel.from.execute();","cmdSel.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["buf.append(\':\');","formatNumber(details.second,2,buf);","switch(dataType){","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME).toString();","caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE).toString();","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["expr.setParams(params);","Expressionexpr2=newExpressionName(Expression.COUNT);","expr2.setParams(params);","expr=newExpressionArithmetic(expr,expr2,ExpressionArithmetic.DIV);","returnexpr;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intreadShort(){","return(page[offset++]\<\<8)|(page[offset++]&0xFF);","voidwriteInt(intvalue){","intnewSize=offset+4;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>24);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["con.log.println(sql);","SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);","if(maxRows!=0&&(cmd.getMaxRows()==-1||cmd.getMaxRows()\>maxRows))","cmd.setMaxRows(maxRows);","cmd.execute(con,this);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["intdataType;","if(isEscape){","token=nextToken(MISSING_SQL_DATATYPE);","switch(token.value){","caseSQLTokenizer.SQL_BIGINT:dataType=SQLTokenizer.BIGINT;break;","caseSQLTokenizer.SQL_BINARY:dataType=SQLTokenizer.BINARY;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidaddValues(longrowOffset,Expressionsexpressions)throwsException{","IndexNodepage=this.rootPage;","intcount=expressions.size();","for(inti=0;i\<count;i++){","Expressionexpr=expressions.get(i);","booleanisLastValues=(i==count-1);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticlongdouble2long(doublevalue){","if(value\>Long.MAX_VALUE)","returnLong.MAX_VALUE;","if(value\<Long.MIN_VALUE)","returnLong.MIN_VALUE;","return(long)value;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["counter=newIdentity(raFile,filePos);","defaultValue=newExpressionValue(counter,SQLTokenizer.BIGINT);","return8;","voidsetNewAutoIncrementValue(Expressionobj)throwsException{","if(identity){","counter.setNextValue(obj);"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["IndexDescriptionpk=foreignKey.pk;","IndexDescriptionfk=foreignKey.fk;","if((pkTable==null||pkTable.equals(foreignKey.pkTable))&&","(fkTable==null||fkTable.equals(foreignKey.fkTable))){","StringscolumnsPk=pk.getColumns();","StringscolumnsFk=fk.getColumns();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["continue;","default:","throwcreateSyntaxError(token,COMMANDS_CREATE);","privateCommandCreateDatabasecreateDatabase()throwsSQLException{","SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["tableResult.lock=SQLTokenizer.UPDATE;","while(true){","synchronized(con.getMonitor()){","if(!next()){","return;","updateRow(con,newRowSources);"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["booleanisAutoIncrement(){","returncolumn.isAutoIncrement();","booleanisCaseSensitive(){","returncolumn.isCaseSensitive();","booleanisNullable(){","returncolumn.isNullable();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["break;","caseSQLTokenizer.GROUP:","group(cmd);","break;","caseSQLTokenizer.HAVING:","having(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(isUpdateNeeded){","result.updateRow(updateValues);","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["raFile.read(buffer);","buffer.position(0);","booleanunique=buffer.get()!=0;","FileIndexNoderoot=FileIndexNode.loadRootNode(unique,raFile,raFile.position());","returnnewFileIndex(root,raFile);","voidsave()throwsException{"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["booleanb=currentDS.first();","row=b?1:0;","returnb;","finalbooleannext()throwsException{","booleann=currentDS.next();","row++;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["staticintgetDataType(inttypeLeft,inttypeRight){","if(typeLeft==typeRight)returntypeLeft;","intdataTypeIdx=Math.min(Utils.indexOf(typeLeft,DatatypeRange),Utils.indexOf(typeRight,DatatypeRange));","if(dataTypeIdx\<0)thrownewError(\"getDataType():\"+typeLeft+\",\"+typeRight);","returnDatatypeRange[dataTypeIdx];","staticfinalintOR=11;//OR"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finallonggetLong()throwsException{","returngetInt();","finalfloatgetFloat()throwsException{","returngetInt();","finaldoublegetDouble()throwsException{","returngetInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["intgetFunction(){","returnSQLTokenizer.TIMESTAMPDIFF;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{","returngetInt()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalprivateintgetUnsignedShort(){","return((data[offset++]&0xFF)\<\<8)|(data[offset++]&0xFF);","finalprivatevoidwriteShort(intvalue){","data[offset++]=(byte)(value\>\>8);","data[offset++]=(byte)(value);","privatefinalvoidresize()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["thrownoCurrentRow();","doublegetDouble(intoffset,intdataType)throwsException{","thrownoCurrentRow();","floatgetFloat(intoffset,intdataType)throwsException{","thrownoCurrentRow();","intgetInt(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["staticfinalintLEVEL=242;","staticfinalintREAD=243;","staticfinalintCOMMITTED=244;","staticfinalintUNCOMMITTED=245;","staticfinalintREPEATABLE=246;","staticfinalintSERIALIZABLE=247;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["scrollStatus.afterLast();","scrollStatus.getRowOffset(false);//previousposition","}else{","rowSource.beforeFirst();","row=sortedRowCount;","while(next()){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["break;","caseSQLTokenizer.POWER:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionPower();","break;","caseSQLTokenizer.RADIANS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["protectedLanguage_it(){","addMessages(ENTRIES);","publicString[][]getEntries(){","returnENTRIES;","privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"Operazionenonsupportata:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["shift=48;","offset=0;","listEnum.stack=0;","listEnum.offsetStack[0]=2+pointerSize;","loopToEndOfNode(listEnum);","}else{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["token=nextToken(MISSING_EXPRESSION);","StringconstraintName;","if(token.value==SQLTokenizer.CONSTRAINT){","constraintName=nextIdentifier();","token=nextToken(MISSING_KEYTYPE);","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intgetDataType(){","returndataType;","publicStringtoString(){","Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();","if(dataType!=SQLTokenizer.TIME){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintGREATER_EQU=100+GREATER;//\>=","static{","keywords.put(newInteger(LESSER_EQU),\"\<=\");","keywords.put(newInteger(UNEQUALS),\"\<\>\");","keywords.put(newInteger(GREATER_EQU),\"\>=\");","staticfinalintSELECT=200;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnDateTime.getTime(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.REAL:","returnnewFloat(param1.getFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(param1.getDouble());","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatedoublegetDoubleImpl()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnull;//writelockofanotherConnection","prevLock=lock;","lock=lock.nextLock;","if(usableLock!=null){","returnusableLock;","lock=newTableStorePage(con,this,LOCK_NONE,page);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR,newObject[]{newInteger(offset),newString(hex)});","staticStringbytes2unique(byte[]daten,intoffset){","if(daten.length-offset\<16){","byte[]temp=newbyte[16];","System.arraycopy(daten,offset,temp,0,daten.length-offset);","daten=temp;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["isBeforeFirst=false;","}while(result&&!getBoolean());","isOuterValid=false;","if(type==Join.FULL_JOIN){","if(fullRightRowCounter\>=isFullNotValid.length){","boolean[]temp=newboolean[fullRightRowCounter\<\<1];"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["break;","case3:","param4=param;","break;","super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["staticfinalintIIF=1305;//lastsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","static{","addKeyWord(\"ISNULL\",IFNULL);//aliasforIFNULL,usedfromMSSQLServerwith2parameter,fromMSAccesswith1parameter","addKeyWord(\"IFNULL\",IFNULL);","addKeyWord(\"USER\",USER);","addKeyWord(\"CONVERT\",CONVERT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["byte[]getBytes(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBytes();","intgetDataType(intcolIdx){","returncolumnExpressions.get(colIdx).getDataType();","voidbeforeFirst()throwsException{","commandSelect.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returnisSignedDataType(getColumnExpression(column).getDataType());","staticbooleanisSignedDataType(intdataType){","switch(dataType){","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["database=con.getDatabase(true);","if(database!=null)","catalog=database.getName();","}else{","database=Database.getDatabase(catalog,con,false);","ArrayListrows=newArrayList();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["char[]output=newchar[4];","intidx=0;","input=input.toUpperCase();","if(input.length()\>0){","output[idx++]=input.charAt(0);","charlast=\'0\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["year=1970-(int)(t/365.2425);","booleanisLeap;","do{","isLeap=false;","dayofyear=day=d-((year-1970)*365+(year/4)-(year/100)+(year/400)-477);","if(isLeapYear(year)){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewDate(DateTime.addDateTimeOffset(time));","publicObjectgetImmutableObject(){","switch(dataType){","caseSQLTokenizer.DATE:","returngetDate(time);","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.INT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.INT)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLINT)),Utils.getInteger(5),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.FLOAT)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.REAL)),Utils.getInteger(7),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DOUBLE)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["switch(type){","caseResultSet.TYPE_FORWARD_ONLY:","caseResultSet.TYPE_SCROLL_INSENSITIVE:","caseResultSet.TYPE_SCROLL_SENSITIVE:","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(!file.exists())","throwSmallSQLException.create(Language.DB_NOT_DIRECTORY,name);","master=Utils.openRaFile(file,readonly);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","StringgetName(){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(((MutableNumeric)value).compareTo(newValue)\>0)","value=newValue;","break;","caseSQLTokenizer.MONEY:","((Money)value).value=Math.min(((Money)value).value,expr.getMoney());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticbooleanstring2boolean(Stringval){","try{","returnDouble.parseDouble(val)!=0;","}catch(NumberFormatExceptione){/*ignoreitifitnotanumber*/}","return\"true\".equalsIgnoreCase(val)||\"yes\".equalsIgnoreCase(val)||\"t\".equalsIgnoreCase(val);","staticlongdoubleToMoney(doublevalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalvoidadd(intidx,Expressionexpr){","if(size\>=data.length){","resize(size\<\<1);","System.arraycopy(data,idx,data,idx+1,(size++)-idx);","data[idx]=expr;","finalvoidaddAll(Expressionscols){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["token=nextToken(MISSING_EXPRESSION);","switch(token.value){","caseSQLTokenizer.TOP:","token=nextToken(MISSING_EXPRESSION);","try{","intmaxRows=Integer.parseInt(token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetColumnExpression(column).getTableName();","publicStringgetCatalogName(intcolumn)throwsSQLException{","returnnull;","publicintgetColumnType(intcolumn)throwsSQLException{","returnSQLTokenizer.getSQLDataType(getColumnExpression(column).getDataType());","publicStringgetColumnTypeName(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();","switch(type){","caseINDEX:","indexes.add(IndexDescription.load(database,this,store));"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticvoidprint(Indexindex,Expressionsexpressions){","IndexScrollStatusscroll=index.createScrollStatus(expressions);","longl;","while((l=scroll.getRowOffset(true))\>=0){","System.out.println(l);","System.out.println(\"============================\");"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","page=add(page,rowOffset,longToBinarySortOrder(expr.getLong()),isLastValues,4);","break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["throwcreateSyntaxError(token,COMMANDS_CREATE);","privateCommandCreateDatabasecreateDatabase()throwsSQLException{","SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","returnnewCommandCreateDatabase(con.log,token.getName(sql));","privateCommandTablecreateTable()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["LongTreeListlist=(LongTreeList)value;","if(list==null){","value=list=newLongTreeList();","list.add(rowOffset);","finalvoidaddRemainderKey(longrowOffset,longremainderValue,intcharCount)throwsSQLException{","saveRemainderValue(remainderValue,charCount);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["throwSmallSQLException.create(Language.VALUE_NULL_INVALID,column.getName());","intdataType=column.getDataType();","if(isNull){","writeBoolean(true);//true-isnull","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticintbytes2int(byte[]bytes){","intresult=0;","intlength=Math.min(4,bytes.length);","for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnDouble.parseDouble(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.io.ByteArrayOutputStream;","publicclassExpressionFunctionReplaceextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.REPLACE;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["FileIndex(booleanunique,FileChannelraFile){","this(newFileIndexNode(unique,(char)-1,raFile),raFile);","FileIndex(FileIndexNoderoot,FileChannelraFile){","super(root);","this.raFile=raFile;","staticFileIndexload(FileChannelraFile)throwsException{"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["return(float)value;","publicintintValue(){","return(int)value;","publiclonglongValue(){","return(long)value;","publicStringtoString(){"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["caseSQLTokenizer.DOUBLE:","value=newMutableDouble(expr.getDouble());","break;","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","value=Money.createFromUnscaledValue(expr.getMoney());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["@Override","finaldoublegetDouble(intcolIdx)throwsException{","returnstore.getDouble(offsets[colIdx],dataTypes[colIdx]);","@Override","finallonggetMoney(intcolIdx)throwsException{","returnstore.getMoney(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["finalclassMutableFloatextendsNumberimplementsMutable{","floatvalue;","MutableFloat(floatvalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["caseSQLTokenizer.DOUBLE:","returnnewDouble(readDouble());","caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong());","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidwriteBytes(byte[]daten,intoff,intlength){","intnewSize=offset+length;","if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,off,page,offset,length);","offset+=length;","byte[]readBytes(intlength){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["token=nextToken(MISSING_EXPRESSION);","try{","displaySize=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","nextToken(MISSING_PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["byte[]bytes=newbyte[length/2];","for(inti=0;i\<bytes.length;i++){","bytes[i]=(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));","returnbytes;","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["continue;","default:throwcreateSyntaxError(token,MISSING_WHERE_COMMA);","returncmd;","privateCommandcreate()throwsSQLException{","while(true){","SQLTokentoken=nextToken(COMMANDS_CREATE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowList=null;","Objectrows;","do{","if(!left.next()){","returnfalse;","rows=index.findRows(leftEx,false,null);"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["privateStringnextIdentifier()throwsSQLException{","returngetIdentifier(nextToken(MISSING_IDENTIFIER));","privateStringnextIdentiferPart(Stringname)throwsSQLException{","SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){","returnnextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(idx1\<length){","StringstrMillis=datetime.substring(idx1).trim();","switch(strMillis.length()){","case1:","millis=Integer.parseInt(strMillis)*100;","break;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(isNull())return0;","returnFloat.parseFloat(getString().trim());","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnDouble.parseDouble(getString().trim());","finallonggetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["caseSQLTokenizer.SMALLINT:","returnreadShort()!=0;","caseSQLTokenizer.INT:","returnreadInt()!=0;","caseSQLTokenizer.BIGINT:","returnreadLong()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.io.ByteArrayOutputStream;","publicclassExpressionFunctionRepeatextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.REPEAT;","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["else","if(newValueinstanceofShort)","this.dataType=SQLTokenizer.SMALLINT;","else","if(newValueinstanceofInteger)","this.dataType=SQLTokenizer.INT;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["expr=newExpressionFunctionATan2();","break;","caseSQLTokenizer.CEILING:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCeiling();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidexecute()throwsException{","left.execute();","right.execute();","if(!createJoinScrollIndex()){","scroll=newJoinScroll(type,left,right,condition);","booleanisExpressionsFromThisRowSource(Expressionscolumns){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returncommandSelect.relative(rows);","intgetRow()throwsException{","returncommandSelect.getRow();","longgetRowPosition(){","returncommandSelect.from.getRowPosition();","voidsetRowPosition(longrowPosition)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["iterator.remove();","master.close();","staticTableViewgetTableView(SSConnectioncon,Stringcatalog,StringtableName)throwsSQLException{","returngetDatabase(con,catalog).getTableView(con,tableName);","TableViewgetTableView(SSConnectioncon,StringtableName)throwsSQLException{","synchronized(tableViews){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","voidnullRow(){","rowSource.nullRow();","row=0;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["mIdx--;","break;","mIdx=lastmIdx;","continueweiter;","sIdx++;","range=false;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{SECS_TOOLARGE,\"01000\"},","{MILLIS_TOOLARGE,\"01000\"},","{DATETIME_INVALID,\"01000\"},","{UNSUPPORTED_CONVERSION_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_FUNC,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["{UNSUPPORTED_DATATYPE_OPER,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rOperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"NichtunterstÃ¼tzterTypfÃ¼rCONVERTFunktion:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rSUMFunktion.\"},","{UNSUPPORTED_TYPE_MAX,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rMAXFunktion.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["publicObjectgetObject(StringparameterName)throwsSQLException{","returngetObject(findParameter(parameterName));","publicBigDecimalgetBigDecimal(StringparameterName)throwsSQLException{","returngetBigDecimal(findParameter(parameterName));","publicObjectgetObject(StringparameterName,Mapmap)throwsSQLException{","returngetObject(findParameter(parameterName),map);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["abstractlonggetLong()throwsException;","abstractfloatgetFloat()throwsException;","abstractdoublegetDouble()throwsException;","abstractlonggetMoney()throwsException;","abstractMutableNumericgetNumeric()throwsException;","abstractObjectgetObject()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["if(status.nodeValueinstanceofIndexNode){","level++;","nodeStack.push(","newIndexNodeScrollStatus((IndexNode)status.nodeValue,","(expressions.get(level).getAlias()!=SQLTokenizer.DESC_STR),","scroll,level));"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|","|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["}elseif(quote==0){","quote=c;","}elseif(quote==c){","if(i+1\<sql.length&&sql[i+1]==quote){","quoteBuffer.append(quote);","i++;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(equals(node.getRemainderValue(),key,i)){","if(isLastValue){","node.saveValue(rowOffset);","returnnull;","returnnode.addRoot();","thrownewError();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getLong(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["negate(complement);","signum=-1;","}else{","signum=0;","for(inti=0;i\<complement.length;i++)","if(complement[i]!=0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["storePage.setPageData(page,sizeUsed);//TODOpagesollteeigentlichbeimeinlesengesetztsein","if(con==null){","returnstorePage.commit();","}else{","return0;","finalvoidcreateWriteLock()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();","default:","returntoString();","privatefinalstaticvoidformatNumber(intvalue,intdigitCount,StringBufferbuf){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["for(inti=0;i\<groupBy.size();i++){","Expressionleft=groupBy.get(i);","intidx=addInternalExpressionFromGroupBy(left);","ExpressionNameright=newExpressionName(null);","right.setFrom(this,idx,newColumnExpression(left));","Expressionexpr=newExpressionArithmetic(left,right,ExpressionArithmetic.EQUALS_NULL);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnsize;","finalbooleanisEmpty(){","returnsize==0;","finalTableStorePageget(longkey){","inti=(int)(key%table.length);","Entrye=table[i];"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseBIT_NOT:","returnleft.getDataType();","caseEQUALS:","caseEQUALS_NULL:","caseGREATER:","caseGRE_EQU:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.name=createName(name,tableName);","privatestaticStringcreateName(StringdefaultName,StringtableName){","if(defaultName==null){","defaultName=tableName+\"_\"+Long.toHexString(System.currentTimeMillis())+Integer.toHexString(newObject().hashCode());","returndefaultName;","finalStringgetName(){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull();","finalbooleangetBoolean()throwsException{","if(isNull())returnfalse;","returnUtils.string2boolean(getString().trim());","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|"],
"["buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case5://italianodd-mm-yy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["row[16]=Utils.getInteger(i);//ORDINAL_POSITION","row[17]=col.isNullable()?\"YES\":\"NO\";//IS_NULLABLE","rows.add(row);","}catch(Exceptione){","Object[][]result=newObject[rows.size()][];","rows.toArray(result);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.NVARCHAR:","offset+=2;","break;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseADD:returnUtils.string2boolean(leftStr+rightStr);","break;}","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","page=find(page,longToBinarySortOrder(expr.getLong()),4,nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["order.add(newExpressionName(\"TABLE_TYPE\"));","order.add(newExpressionName(\"TABLE_NAME\"));","cmdSelect.setOrder(order);","returnnewSSResultSet(st,cmdSelect);","publicResultSetgetSchemas()throwsSQLException{","String[]colNames={\"TABLE_SCHEM\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["intcount=tableColumns.size();","StoreImplnewStore=table.getStoreTemp(con);","synchronized(con.getMonitor()){","((StoreImpl)this.store).createWriteLock();","for(inti=0;i\<count;i++){","Expressionsrc=updateValues[i];"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnLong.parseLong(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetObject(findParameter(parameterName));","publicBigDecimalgetBigDecimal(StringparameterName)throwsSQLException{","returngetBigDecimal(findParameter(parameterName));","publicObjectgetObject(StringparameterName,Mapmap)throwsSQLException{","returngetObject(findParameter(parameterName),map);","publicRefgetRef(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["privateintoffset;","staticfinalprivateintpointerSize=3;//ifchangethenalsoinresize()","LongTreeList(){","data=newbyte[25];","LongTreeList(longvalue)throwsSQLException{","this();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","page=find(page,expr.getBoolean()?2:1,1,nodeList);","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["voidupdateRow(Expression[]updateValues)throwsException{","commandSelect.updateRow(con,updateValues);","voidinsertRow(Expression[]updateValues)throwsException{","commandSelect.insertRow(con,updateValues);","booleanisNull(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).isNull();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returndataType;","StringgetTableName(){","returnnull;","finalintgetPrecision(){","switch(dataType){","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["row[10]=Utils.getShort(foreignKey.deleteRule);//DELETE_RULE","row[11]=fk.getName();//FK_NAME","row[12]=pk.getName();//PK_NAME","row[13]=Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable);//DEFERRABILITY","rows.add(row);","Object[][]result=newObject[rows.size()][];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnfrom.absolute(maxRows);","returnfrom.last();","finalvoidafterLast()throwsException{","from.afterLast();","booleanisLast()throwsException{","returnfrom.isLast();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseGRE_EQU:returncomp\>=0;","caseLESSER:returncomp\<0;","caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=left.getNumeric().compareTo(right2.getNumeric());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnalterTable(catalog,tableName);","default:","Object[]param={\"ALTER\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","CommandalterTable(Stringcatalog,Stringname)throwsSQLException{","SQLTokentokenType=nextToken(MISSING_ADD_ALTER_DROP);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DECIMAL:","return(float)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatefloatgetFloatImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getFloat()+right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["synchronized(getMonitor()){","try{","intcount=commitPages.size();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.commit();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["classExpressionFunctionFloorextendsExpressionFunctionReturnP1Number{","intgetFunction(){returnSQLTokenizer.FLOOR;}","doublegetDouble()throwsException{","returnMath.floor(param1.getDouble());","StringgetString()throwsException{","Objectobj=getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionFloor.java|"],
"["if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["rowIdx=Math.min(Math.max(rowIdx+rows,-1),rowList.size());","returnmove();","finalintgetRow(){","returncurrentRow==null?0:rowIdx+1;","finallonggetRowPosition(){","returnrowIdx;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(maxRows\>=0&&row\>maxRows)return0;","returnrow;","finalvoidupdateRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","intsavepoint=con.getSavepoint();","try{","for(intt=0;t\<tables.size();t++){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(table!=null){","tableViews.remove(tableName);","table.drop(con);","}else{","Table.drop(this,tableName);","voidremoveTableView(StringtableViewName){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnnodes;","finalIndexNodegetChildNode(chardigit){","intpos=findNodePos(digit);","if(pos\>=0)returnnodes[pos];","returnnull;","finalchar[]getRemainderValue(){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["writeLongString(expr.getString());","break;","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayOutputStreambaos=newByteArrayOutputStream();","ObjectOutputStreamoos=newObjectOutputStream(baos);","oos.writeObject(expr.getObject());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intlevel=status.level;","if(!status.asc^scroll){","intidx=++status.idx;","if(idx==-1){","if(status.nodeValue!=null){","if(status.nodeValueinstanceofIndexNode){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["int[]temp=val2;","val2=value;","value=temp;","inttempi=signum;","signum=sig2;","sig2=tempi;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalintgetUsedSize(){","return0;","finallonggetNextPagePos(){","returnnextPagePos;","finalvoiddeleteRow(SSConnectioncon)throwsSQLException{","if(nextPagePos\>=0){"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionName))returnfalse;","if(((ExpressionName)expr).fromEntry!=fromEntry)returnfalse;","returntrue;","booleanisNull()throwsException{","returnfromEntry.isNull(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnFloat.parseFloat(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2float(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["continue;","}else","returngetReturnValue(status.nodeValue);","idx=++status.idx;","if(idx\>=status.nodes.length){","if(nodeStack.size()\>1){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["@Override","voidscanObjectOffsets(int[]offsets,intdataTypes[]){","offset=PAGE_CONTROL_SIZE;","for(inti=0;i\<offsets.length;i++){","offsets[i]=offset;","booleanisNull=readBoolean();//forisNull"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringARGUMENT_INVALID=\"SS-0583\";","publicstaticfinalStringGENER_KEYS_UNREQUIRED=\"SS-0584\";","publicstaticfinalStringSEQUENCE_HEX_INVALID=\"SS-0585\";","publicstaticfinalStringSEQUENCE_HEX_INVALID_STR=\"SS-0586\";","publicstaticfinalStringSYNTAX_BASE_OFS=\"SS-0610\";","publicstaticfinalStringSYNTAX_BASE_END=\"SS-0611\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["ExpressionorigExpression=expr;","ExpressionNameexprName;","if(exprinstanceofExpressionName){","exprName=(ExpressionName)expr;","}else{","expr=exprName=newExpressionName(expr.getAlias());"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["if(rowPosition!=-1){","right.setRowPosition(rowPosition);","returntrue;","rowList=null;","Objectrows;","do{"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["caseADD:","MutableNumericnum=left.getNumeric();","num.add(right.getNumeric());","returnnum;","caseSUB:","MutableNumericnum=left.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return(obj==Boolean.TRUE)?1:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"BY\",BY);","addKeyWord(\"HAVING\",HAVING);","addKeyWord(\"ORDER\",ORDER);","addKeyWord(\"ASC\",ASC);","addKeyWord(DESC_STR,DESC);","addKeyWord(\"VALUES\",VALUES);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["longday1=param1.getLong()/86400000;","return(int)((day2+3)/7-(day1+3)/7);","}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*12+details2.month)-(details1.year*12+details1.month);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["super(NAME);","setName(name);","ExpressionName(inttype){","super(type);","voidsetNameAfterTableAlias(Stringname){","tableAlias=getName();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["updateCharacterStream(findColumn(columnName),x,length);","publicvoidupdateObject(StringcolumnName,Objectx,intscale)throwsSQLException{","updateObject(findColumn(columnName),x,scale);","publicvoidupdateObject(StringcolumnName,Objectx)throwsSQLException{","updateObject(findColumn(columnName),x);","publicvoidinsertRow()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisLast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisAfterLast()throwsSQLException,Exception{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractvoidafterLast()throwsException;"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["intcount=commitPages.size();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.rollback();","page.freeLock();","commitPages.clear();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnparam1.isNull()||param2.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intlength=param2.getInt();","if(bytes.length\<=length)returnbytes;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["caseConnection.TRANSACTION_READ_UNCOMMITTED:","caseConnection.TRANSACTION_READ_COMMITTED:","caseConnection.TRANSACTION_REPEATABLE_READ:","caseConnection.TRANSACTION_SERIALIZABLE:","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","offset+=2;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["hour%=12;","if(hour==0)hour=12;","formatNumber(hour,2,buf);","privatefinalstaticlongaddDateTimeOffset(longdatetime){","returnaddDateTimeOffset(datetime,TimeZone.getDefault());","finalstaticlongaddDateTimeOffset(longdatetime,TimeZonetimezone){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","abstractclassExpressionFunctionReturnP1StringAndBinaryextendsExpressionFunctionReturnP1{","finalbooleangetBoolean()throwsException{","if(isNull())returnfalse;","returnUtils.string2boolean(getString().trim());","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["case3:","case5:","case8:","case10:","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(month==1){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{UNSUPPORTED_DATATYPE_FUNC,\"Tipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Conversioneversoiltipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"TipononsupportatoperlafunzioneCONVERT:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"TipononsupportatoperlafunzioneSUM:\'\'{0}\'\'.\"},","{UNSUPPORTED_TYPE_MAX,\"TipononsupportatoperlafunzioneMAX:\'\'{0}\'\'.\"},","{UNSUPPORTED_CONVERSION,\"NonÃ¨possibleconvertire\'\'{0}\'\'[{1}]in\'\'{2}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["expr=newExpressionFunctionMonth();","break;","caseSQLTokenizer.NOW:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(lock==null){","throwSmallSQLException.create(Language.CANT_LOCK_FILE,file);","}catch(SQLExceptionsqlex){","throwsqlex;","}catch(Throwableth){","throwSmallSQLException.createFromException(Language.CANT_LOCK_FILE,file,th);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl();","caseSQLTokenizer.BIGINT:","return(int)getLongImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateIndexNode[]nodes=EMPTY_NODES;","privatechar[]remainderKey;","privateObjectvalue;","protectedIndexNode(booleanunique,chardigit){","this.unique=unique;","this.digit=digit;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["publicvoidupdateInt(StringcolumnName,intx)throwsSQLException{","updateInt(findColumn(columnName),x);","publicvoidupdateLong(StringcolumnName,longx)throwsSQLException{","updateLong(findColumn(columnName),x);","publicvoidupdateFloat(StringcolumnName,floatx)throwsSQLException{","updateFloat(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["default:","previousToken();","returnleftExpr;","if(isNot){","isNot=false;","leftExpr=newExpressionArithmetic(leftExpr,ExpressionArithmetic.NOT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicclassSSConnectionimplementsConnection{","privatefinalbooleanreadonly;","privateDatabasedatabase;","privatebooleanautoCommit=true;","intisolationLevel=TRANSACTION_READ_COMMITTED;//seealsogetDefaultTransactionIsolation","privateListcommitPages=newArrayList();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.TRANSACTION:","returnsetTransaction();","default:","thrownewError();","privateCommandSetsetTransaction()throwsSQLException{","SQLTokentoken=nextToken(MISSING_ISOLATION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["newView(this,con,viewName,sql);","staticObject[][]getCatalogs(Databasedatabase){","Listcatalogs=newArrayList();","FilebaseDir=(database!=null)?","database.directory.getParentFile():","newFile(\".\");"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["intpageSize;","longfileOffset;//positioninfile","StorePage(byte[]page,intpageSize,FileChannelraFile,longfileOffset){","super(raFile);","this.page=page;","this.pageSize=pageSize;"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["staticfinalintUNEQUALS=57;//\<\>","staticfinalintIN=61;//IN","staticfinalintBETWEEN=62;//BETWEEN","staticfinalintLIKE=63;//LIKE","staticfinalintISNULL=64;//ISNULL","staticfinalintISNOTNULL=ISNULL+1;//ISNOTNULL"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["previousToken();","breakSwitch;","while(true){","Expressioncolumn=expression(selCmd,0);","selCmd.addColumnExpression(column);","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnreadLong();","caseSQLTokenizer.REAL:","return(long)readFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(long)readDouble();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,name,columns,indexes,foreignKeys);","synchronized(tableViews){","tableViews.put(name,table);","TablecreateTable(SSConnectioncon,StringtableName,Columnscolumns,IndexDescriptionsoldIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.DOUBLE:","returntrue;","returnfalse;","staticbooleanisNumberDataType(intdataType){","returnisSignedDataType(dataType)||dataType==SQLTokenizer.TINYINT;","staticbooleanisBinaryDataType(intdataType){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["column=null;","from(selCmd);","returnselCmd;","default:","if(!isKeyword(token))","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.FROM});"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<entries.length;i++){","Stringkey=entries[i][0];","if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(expr.getPrecision()\>column.getPrecision()){","column.setPrecision(expr.getPrecision());","finalvoidaddRow(ExpressionValue[]row){","rowList.add(row);","finalColumngetColumn(intcolIdx){","returncolumns.get(colIdx);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returntrue;","returnfalse;","staticbooleanisNumberDataType(intdataType){","returnisSignedDataType(dataType)||dataType==SQLTokenizer.TINYINT;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.TIMESTAMP:","offset+=8;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicArraygetArray(StringcolumnName)throwsSQLException{","returngetArray(findColumn(columnName));","publicDategetDate(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){","returngetDate(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType);","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType,intlength)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType,length);","if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType+\";length=\"+length);","finalprivateCommandSelectgetCmd()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returngetBytes();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalObjectfindRows(Expressionsexpressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;","intcount=expressions.size();","for(inti=0;i\<count;i++){","page=findRows(page,expressions.get(i),searchNullValues,nodeList);","if(page==null)"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnget(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{","returnget(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{","returnget(colIdx).getObject();","StringgetString(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["while(true){","intnextEntry=getUnsignedShort();","if(nextEntry!=0||firstNode){","result|=(((long)nextEntry)\<\<shift);","if(listEnum.stack\>=3){","listEnum.offsetStack[listEnum.stack]=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalfloatgetFloat()throwsException{","returngetInt();","finaldoublegetDouble()throwsException{","returngetInt();","finallonggetMoney()throwsException{","returngetInt()*10000;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["publicclassCommandDropextendsCommand{","CommandDrop(Loggerlog,Stringcatalog,Stringname,inttype){","super(log);","this.type=type;","this.catalog=catalog;","this.name=name;"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["if(expParams!=null){","for(intk=0;k\<expParams.length;k++){","Expressionparam=expParams[k];","intparamType=param.getType();","isAggregateFunction=isAggregateFunction||paramType\>=Expression.GROUP_BEGIN;","if(paramType==Expression.NAME)"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionLeft();","break;","caseSQLTokenizer.LENGTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLength();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticdoublegetDouble(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","return(obj.equals(Boolean.TRUE))?1:0;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["case\'%\':","range=true;","break;","case\'_\':","sIdx++;","break;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(value\<Integer.MIN_VALUE)returnInteger.MIN_VALUE;","elseif(value\>Integer.MAX_VALUE)returnInteger.MAX_VALUE;","elsereturn(int)value;","staticbyte[]int2bytes(intvalue){","byte[]result=newbyte[4];","result[0]=(byte)(value\>\>24);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["this.operation=operation;","super.setParams(newExpression[]{left,right,right2});","ExpressionArithmetic(Expressionleft,ExpressionsinList,intoperation){","super(FUNCTION);","this.left=left;","this.operation=operation;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return(obj.equals(Boolean.TRUE));","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["keywords.put(newInteger(GREATER_EQU),\"\>=\");","staticfinalintSELECT=200;","staticfinalintDELETE=201;","staticfinalintINTO=203;","staticfinalintUPDATE=204;","staticfinalintCREATE=205;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicMapgetTypeMap(){","returnnull;","publicvoidsetTypeMap(Mapmap){","publicvoidsetHoldability(intholdability){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["lobs.drop(con);","if(indexes!=null)","indexes.drop(database);","booleanok=getFile(database).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","@Override"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(isMinus)tok=\"-\"+tok;","returnnewExpressionValue(newMoney(Double.parseDouble(tok)),SQLTokenizer.MONEY);","Stringtok=newString(sql,token.offset,token.length);","if((chr1\>=\'0\'&&\'9\'\>=chr1)||chr1==\'.\'){","previousToken();","if(token.length\>1&&(sql[token.offset+1]|0x20)==\'x\'){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case11://Japanyy/mm/dd"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:","page=find(page,bytesToBinarySortOrder(expr.getBytes()),nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["row[6]=type;//TYPE","row[7]=Utils.getShort(c+1);//ORDINAL_POSITION","row[8]=columns.get(c);//COLUMN_NAME","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","intiValue=((Number)para1).intValue();","return(iValue\<0)?newInteger(-iValue):para1;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["switch(expr.getDataType()){","caseSQLTokenizer.UNIQUEIDENTIFIER:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalprivateExpressionsdistinctColumns;","finalprivateRowSourcerowSource;","privateIndexindex;","privateintrow;","Distinct(RowSourcerowSource,Expressionscolumns){","this.rowSource=rowSource;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["privateintfullRowCount;","privateintfullReturnCounter=-1;","JoinScroll(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;","this.condition=condition;","this.left=left;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["publicvoidupdateBoolean(StringcolumnName,booleanx)throwsSQLException{","updateBoolean(findColumn(columnName),x);","publicvoidupdateByte(StringcolumnName,bytex)throwsSQLException{","updateByte(findColumn(columnName),x);","publicvoidupdateShort(StringcolumnName,shortx)throwsSQLException{","updateShort(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintJAVA_OBJECT=371;","static{","addKeyWord(\"BIT\",BIT);","addKeyWord(\"BOOLEAN\",BOOLEAN);","addKeyWord(\"BINARY\",BINARY);","addKeyWord(\"VARBINARY\",VARBINARY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["expr=newExpressionFunctionDegrees();","break;","caseSQLTokenizer.EXP:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionExp();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["table.setAlias(token.getName(sql));","}else{","previousToken();","returntable;","privateJoinjoin(Commandcmd,DataSourcestables,RowSourceleft,inttype)throwsSQLException{","RowSourceright=rowSource(cmd,tables,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.VARBINARY:","returngetBytes();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returnnewInteger(getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return13;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return17;","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalbooleanisEmpty(){","returnvalue==EMPTY;","finalvoidclear(){","value=EMPTY;","finalvoidset(Objectvalue,int_dataType,intlength)throwsSQLException{","set(value,_dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["FileChannelrandomFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,randomFile,con,database));","writeMagic(randomFile);","returnrandomFile;","privatevoidload(Databasedatabase)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","CommandTablecmd=newCommandTable(con.log,catalog,tableName,SQLTokenizer.INDEX);","Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["tableLock.freeLock();","break;","default:","thrownewError();","privatevoidaddColumn(Columnscols,Columncolumn)throwsSQLException{","if(cols.get(column.getName())!=null){"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","writeString(expr.getString(),column.getDisplaySize(),false);","break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfalse;","booleannext()throwsException{","if(++rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","finalbooleanresult=rowSource.next();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["privatefinalLongTreeListEnumlongListEnum=newLongTreeListEnum();","JoinScrollIndex(intjoinType,RowSourceleft,RowSourceright,ExpressionsleftEx,ExpressionsrightEx,intcompare)","throwsException{","super(joinType,left,right,null);","this.leftEx=leftEx;","this.rightEx=rightEx;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["caseSQLTokenizer.DECIMAL:","offset+=3;","break;","default:thrownewError();","return;","writeBoolean(false);//false-isnotnull"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.TINYINT:","returnTypes.TINYINT;","caseSQLTokenizer.SMALLINT:","returnTypes.SMALLINT;","caseSQLTokenizer.INT:","returnTypes.INTEGER;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionLeftextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.LEFT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["Stringstr=param1.getString();","if(str==null||str.length()==0)return0;","returnstr.charAt(0);","finalObjectgetObject()throwsException{","Stringstr=param1.getString();","if(str==null||str.length()==0)returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|"],
"["this(con,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSStatement(SSConnectioncon,intrsType,intrsConcurrency)throwsSQLException{","this.con=con;","this.rsType=rsType;","this.rsConcurrency=rsConcurrency;","con.testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.LESSER_EQU:","caseSQLTokenizer.GREATER:","caseSQLTokenizer.GREATER_EQU:","caseSQLTokenizer.UNEQUALS:","caseSQLTokenizer.LIKE:","caseSQLTokenizer.OR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["con.getDatabase(false):","getDatabase(name,con,false);","privateDatabase(Stringname,FilecanonicalFile,booleanreadonly)throwsSQLException{","try{","this.name=name;","this.readonly=readonly;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalprivateintgetPointer(){","intvalue=0;","for(inti=0;i\<pointerSize;i++){","value\<\<=8;","value+=(data[offset++]&0xFF);","returnvalue;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnTypes.VARBINARY;","caseSQLTokenizer.LONGVARBINARY:","returnTypes.LONGVARBINARY;","caseSQLTokenizer.BLOB:","returnTypes.BLOB;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatestaticfinalintPAGE_CONTROL_SIZE=28;","privatestaticfinalbyte[]page_control=newbyte[PAGE_CONTROL_SIZE];","privatestaticfinalByteBufferpageControlBuffer=ByteBuffer.wrap(page_control);","privateintstatus;//validvaluearefollow:","privatestaticfinalintNORMAL=0;","privatestaticfinalintDELETED=1;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return-1;","if(doubleValue\>0)","return1;","return0;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["intcount=1;","inti;","for(i=0;i\<value.length;i++){","if(value[i]!=0){","count=2*(value.length-i)+1;","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["{KEY_DUPLICATE,\"DuplicateKey.\"},","{MONTH_TOOLARGE,\"MonthsaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DaysaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"HoursaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"MinutesaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"SecondsaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:","returnInteger.MAX_VALUE;","if(defaultValue==-1)","thrownewError(\"Precision:\"+SQLTokenizer.getKeyWord(dataType));"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalvoidafterLast(){","rowPos=2;","finalbooleanabsolute(introw){","rowPos=(row\>0)?","Math.min(row,1):","Math.min(row+1,-1);"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["page.freeLock();","commitPages.clear();","transactionTime=System.currentTimeMillis();","publicvoidclose()throwsSQLException{","rollback();","database=null;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["addColumn(newColumns,columns.get(i));","TablenewTable=database.createTable(con,newName,newColumns,oldTable.indexes,indexes,foreignKeys);","StringBufferbuffer=newStringBuffer(256);","buffer.append(\"INSERTINTO\").append(newName).append(\'(\');","for(intc=0;c\<oldColumns.size();c++){","if(c!=0){"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["return((ExpressionValue)params.get(idx-1));","voidsetParamValue(intidx,Objectvalue,intdataType)throwsSQLException{","getParam(idx).set(value,dataType);","if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType);","voidsetParamValue(intidx,Objectvalue,intdataType,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["nextToken(MISSING_PARENTHESIS_R);","returnexpr;","ExpressionsparamList=expressionParenthesisList(cmd);","intparamCount=paramList.size();","Expression[]params=paramList.toArray();","booleaninvalidParamCount;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["abstractObjectgetObject(intcolIdx)throwsException;","abstractStringgetString(intcolIdx)throwsException;","abstractbyte[]getBytes(intcolIdx)throwsException;","abstractintgetDataType(intcolIdx);","booleaninit(SSConnectioncon)throwsException{returnfalse;}","StringgetAlias(){returnnull;}"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["token=nextToken();","continue;","throwcreateSyntaxError(token,MISSING_ON);","privateRowSourcerowSource(Commandcmd,DataSourcestables,intparenthesis)throwsSQLException{","RowSourcefromSource=null;","fromSource=tableSource(cmd,tables);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidscanObjectOffsets(int[]offsets,intdataTypes[]){","offset=PAGE_CONTROL_SIZE;","for(inti=0;i\<offsets.length;i++){","offsets[i]=offset;","booleanisNull=readBoolean();//forisNull","switch(dataTypes[i]){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["hour=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);","minute=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\'.\',idx1);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["storeTemp.updatePointer=this;","returnstoreTemp;","privatevoidresizePage(intminNewSize){","intnewSize=Math.max(minNewSize,page.length*2);","byte[]newPage=newbyte[newSize];","System.arraycopy(page,0,newPage,0,page.length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateExpressiondefaultValue=Expression.NULL;//DefaultvalueforINSERT","privateStringdefaultDefinition;//StringrepresentationforDefaultValue","privateStringname;","privatebooleanidentity;","privatebooleancaseSensitive;","privatebooleannullable=true;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["break;","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","thrownewjava.lang.UnsupportedOperationException();","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["finalColumnscolumns;","privatelongtimestamp=System.currentTimeMillis();","staticfinalintLOCK_NONE=0;//readonREAD_COMMITEDandREAD_UNCOMMITED","staticfinalintLOCK_INSERT=1;//preventonlyLOCK_TAB","staticfinalintLOCK_READ=2;//occuronreadandpreventawriteofdata,itcanoccurmoreasoneLOCK_READperpage","staticfinalintLOCK_WRITE=3;//occuronwriteandpreventeveryotheraccesstothedata,itisonlyoneLOCK_WRITEperpagepossible"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["writeString(expr.getString(),column.getDisplaySize(),false);","break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","writeString(expr.getString(),column.getDisplaySize(),true);","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatestaticinthexDigit2int(chardigit){","if(digit\>=\'0\'&&digit\<=\'9\')returndigit-\'0\';","digit|=0x20;","if(digit\>=\'a\'&&digit\<=\'f\')returndigit-\'W\';//-\'W\'==-\'a\'+10","thrownewRuntimeException();","staticbyte[]unique2bytes(Stringunique)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["saveNode(node);","returnnode;","}else{","returnnodes[pos];","finalvoidremoveNode(chardigit){","intpos=findNodePos(digit);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["voidclearParams(){","for(intp=0;p\<params.size();p++){","((ExpressionValue)params.get(p)).clear();","privateExpressionValuegetParam(intidx)throwsSQLException{","if(idx\<1||idx\>params.size())","throwSmallSQLException.create(Language.PARAM_IDX_OUT_RANGE,newObject[]{newInteger(idx),newInteger(params.size())});"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["previousToken();","while(true){","list.add(expression(cmd,0));","SQLTokentoken=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importjava.math.*;","importjava.io.*;","importjava.util.ArrayList;","importjava.util.Calendar;"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["listEnum.stack++;","listEnum.resultStack[listEnum.stack]=result;","firstNode=true;","}else{","shift+=16;","listEnum.stack--;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLongImpl());","caseSQLTokenizer.REAL:","returnnewMutableNumeric(getFloatImpl());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{VALUE_CANT_CONVERT,\"Kannnichtkonvertierenein{0}Wertzueinem{1}Wert.\"},","{BYTEARR_INVALID_SIZE,\"UngÃ¼ltigeBytearrayGroÃŸe{0}fÃ¼rUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjektwurdegelÃ¶scht.\"},","{PARAM_CLASS_UNKNOWN,\"UnbekanteParameterKlasse:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}istleer.\"},","{PARAM_IDX_OUT_RANGE,\"ParameterIndex{0}liegtauÃŸerhalbdesGÃ¼ltigkeitsbereiches.DerWertmusszwischen1und{1}liegen.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["{SAVEPT_INVALID_TRANS,\"SAVEPOINTnonvalidoperquestatransazione.\"},","{SAVEPT_INVALID_DRIVER,\"SAVEPOINTnonvalidoperquestodriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnonsupportatoperquestotipodisorgenterighe.\"},","{ISOLATION_UNKNOWN,\"LivellodiIsolamentotransazionesconosciuto:{0}.\"},","{FLAGVALUE_INVALID,\"Flagnonvalidanelmetodo\'\'getMoreResults\'\':{0}.\"},","{ARGUMENT_INVALID,\"Argomentononvalidonelmetodo\'\'setNeedGenratedKeys\'\':{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["privatebooleanuseSetRowPosition;","privateintsortedRowCount;","privatelonglastRowOffset;","SortedResult(RowSourcerowSource,ExpressionsorderBy){","this.rowSource=rowSource;","this.orderBy=orderBy;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(isNull())returnnull;","returnnewMutableNumeric(getLong());","ObjectgetObject()throwsException{","if(isNull())returnnull;","returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP);","StringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["longnewValue=expr.getLong();","if(newValue\>value){","value=newValue;","createStorePage().commit();","@Override","publicfloatfloatValue(){"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["caseSQLTokenizer.SMALLINT:","offset+=2;","break;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["@Override","finalbooleanfirst()throwsException{","filePos=table.getFirstPage();","row=1;","returnmoveToValidRow();","finalprivatevoidsetNextFilePos(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["intlast=value.length-1;","for(;v\<=last;v++){","intval=(signum\>0)?value[v]:(v==last)?-value[v]:~value[v];","complement[offset++]=(byte)(val\>\>24);","complement[offset++]=(byte)(val\>\>16);","complement[offset++]=(byte)(val\>\>8);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intlength=datatype.getDisplaySize();","if(length\>str.length()){","char[]buffer=newchar[length-str.length()];","Arrays.fill(buffer,\'\');","returnstr+newString(buffer);","returnstr.substring(0,length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(longValue\>0)","return1;","return0;","caseSQLTokenizer.DECIMAL:","returnparam1.getNumeric().getSignum();","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["caseSQLTokenizer.UNIQUE:","IndexDescriptionindex=index(cmdCreate,token.value,cmdCreate.name,null,colName);","cmdCreate.addIndex(index);","break;","default:","throwcreateSyntaxError(token,MISSING_OPTIONS_DATATYPE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"TIME\",TIME);","addKeyWord(\"DATETIME\",TIMESTAMP);//aliasforMSSQLServerdatatypeDATETIME","addKeyWord(\"TIMESTAMP\",TIMESTAMP);","addKeyWord(\"SMALLDATETIME\",SMALLDATETIME);","addKeyWord(\"CHARACTER\",CHAR);//aliasforCHAR","addKeyWord(\"CHAR\",CHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","intreadInt(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}catch(Throwablee){","if(raFile!=null)","try{","raFile.close();","}catch(Exceptione2){","DriverManager.println(e2.toString());"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|","|project://smallsql/src/smallsql/database/TableView.java|"],
"["addKeyWord(\"TIMESTAMPADD\",TIMESTAMPADD);","addKeyWord(\"DATEDIFF\",TIMESTAMPDIFF);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPDIFF\",TIMESTAMPDIFF);","addKeyWord(\"WEEK\",WEEK);","addKeyWord(\"YEAR\",YEAR);","staticfinalintSQL_TSI_FRAC_SECOND=1250;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["wasNull=expr.isNull();","returnexpr.getFloat();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicdoublegetDouble(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["finalprivateExpressionsorderBy;","finalprivateRowSourcerowSource;","privateIndexScrollStatusscrollStatus;","privateintrow;","privatefinalLongListinsertedRows=newLongList();","privatebooleanuseSetRowPosition;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["MutableNumericnValue=(MutableNumeric)para1;","if(nValue.getSignum()\<0)nValue.setSignum(1);","returnnValue;","caseSQLTokenizer.MONEY:","MoneymValue=(Money)para1;","if(mValue.value\<0)mValue.value=-mValue.value;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["returnnewSSStatement(this);","publicPreparedStatementprepareStatement(Stringsql)throwsSQLException{","returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql)throwsSQLException{","returnnewSSCallableStatement(this,sql);","publicStringnativeSQL(Stringsql){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["intgetInt()throwsException{","returnExpressionValue.getInt(getObject(),getDataType());","longgetLong()throwsException{","returnExpressionValue.getLong(getObject(),getDataType());","floatgetFloat()throwsException{","returnExpressionValue.getFloat(getObject(),getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["privateExpressionValuegetParam(intidx)throwsSQLException{","if(idx\<1||idx\>params.size())","throwSmallSQLException.create(Language.PARAM_IDX_OUT_RANGE,newObject[]{newInteger(idx),newInteger(params.size())});","return((ExpressionValue)params.get(idx-1));","voidsetParamValue(intidx,Objectvalue,intdataType)throwsSQLException{","getParam(idx).set(value,dataType);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["publicstaticfinalStringSAVEPT_INVALID_TRANS=\"SS-0550\";","publicstaticfinalStringSAVEPT_INVALID_DRIVER=\"SS-0551\";","publicstaticfinalStringALIAS_UNSUPPORTED=\"SS-0580\";","publicstaticfinalStringISOLATION_UNKNOWN=\"SS-0581\";","publicstaticfinalStringFLAGVALUE_INVALID=\"SS-0582\";","publicstaticfinalStringARGUMENT_INVALID=\"SS-0583\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["doubledValue=((Double)para1).doubleValue();","return(dValue\<0)?newDouble(-dValue):para1;","caseSQLTokenizer.REAL:","doublefValue=((Float)para1).floatValue();","return(fValue\<0)?newFloat(-fValue):para1;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value+=expr.getDouble();","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.NCHAR:","return((String)obj).getBytes();","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.unique2bytes((String)obj);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"SQL_TSI_HOUR\",SQL_TSI_HOUR);","addKeyWord(\"DD\",SQL_TSI_DAY);","addKeyWord(\"SQL_TSI_DAY\",SQL_TSI_DAY);","addKeyWord(\"WK\",SQL_TSI_WEEK);","addKeyWord(\"WW\",SQL_TSI_WEEK);","addKeyWord(\"SQL_TSI_WEEK\",SQL_TSI_WEEK);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Objectrows;","do{","if(!left.next()){","returnfalse;","rows=index.findRows(leftEx,false,null);","}while(rows==null);"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["classJoinScrollIndexextendsJoinScroll{","privatefinalintcompare;","ExpressionsleftEx;","ExpressionsrightEx;","privateIndexindex;","privateLongTreeListrowList;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["CommandTable(Loggerlog,Stringcatalog,Stringname,inttableCommandType){","super(log);","this.type=SQLTokenizer.TABLE;","this.catalog=catalog;","this.name=name;","this.tableCommandType=tableCommandType;"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["caseSQLTokenizer.DECIMAL:","returndatatype.getPrecision();","default:","returnsuper.getPrecision();","finalintgetScale(){","returndatatype.getScale();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["privateExpression[]newRowSources;","CommandUpdate(Loggerlog){","super(log);","voidaddSetting(Expressiondest,Expressionsource){","columnExpressions.add(dest);","sources.add(source);"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["intcount=expressions.size();","for(inti=0;i\<count;i++){","Expressionexpr=expressions.get(i);","booleanisLastValues=(i==count-1);","if(expr.isNull()){","page=addNull(page,rowOffset,isLastValues);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnvalue^0x8000;","finalstaticprivateintintToBinarySortOrder(intvalue){","returnvalue^0x80000000;","finalstaticprivatelonglongToBinarySortOrder(longvalue){","returnvalue^0x8000000000000000L;","finalstaticprivatechar[]stringToBinarySortOrder(Stringvalue,booleanneedTrim){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.max(((MutableLong)value).value,expr.getLong());","break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.max(((MutableFloat)value).value,expr.getFloat());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(!(exprinstanceofExpression))returnfalse;","if(((Expression)expr).type==type){","Expression[]p1=((Expression)expr).params;","Expression[]p2=params;","if(p1!=null&&p2!=null){","if(p1==null)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["System.arraycopy(page,0,newPage,0,page.length);","page=newPage;","@Override","booleanisValidPage(){","returnstatus==NORMAL||(status==UPDATED_PAGE&&updatePointer!=null);","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalprivateIndexNodeadd(IndexNodenode,longrowOffset,char[]key,booleanisLast)throwsSQLException{","intlength=key.length;","inti=-1;","while(true){","chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(tables.size()==0)","throwSmallSQLException.create(Language.DELETE_WO_FROM);","TableViewResult.getTableViewResult(tables.get(0)).deleteRow();","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(name.equalsIgnoreCase(column.getName())){","returncolumn;","returnnull;","finalvoidadd(Columncolumn){","if(column==null){","thrownewNullPointerException(\"Columnisnull.\");"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["returnvalue;","publicfloatfloatValue(){","return(float)value;","publicintintValue(){","return(int)value;","publiclonglongValue(){"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["chars[24]=digits[(daten[offset+10]\>\>4)&0x0F];","chars[25]=digits[(daten[offset+10])&0x0F];","chars[26]=digits[(daten[offset+11]\>\>4)&0x0F];","chars[27]=digits[(daten[offset+11])&0x0F];","chars[28]=digits[(daten[offset+12]\>\>4)&0x0F];","chars[29]=digits[(daten[offset+12])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["this.dataType=SQLTokenizer.REAL;","else","if(newValueinstanceofDouble)","this.dataType=SQLTokenizer.DOUBLE;","else","if(newValueinstanceofNumber)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicbytegetByte(inti)throwsSQLException{","return(byte)getInt(i);","publicshortgetShort(inti)throwsSQLException{","return(byte)getInt(i);","publicintgetInt(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnleft.getScale()+right.getScale();","caseDIV:","returnMath.max(left.getScale()+5,right.getScale()+4);","caseNEGATIVE:","returnleft.getScale();","caseMOD:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnnewMutableNumeric(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["right=null;","returnfalse;","SQLExceptioncreateUnspportedDataType(){","Object[]params={","SQLTokenizer.getKeyWord(getDataType(left,right)),","getKeywordFromOperation(operation)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.VARBINARY:","returnUtils.bytes2long(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnewDateTime(parse(date),SQLTokenizer.TIMESTAMP);","staticDateTimevalueOf(Stringdate,intdataType)throwsSQLException{","if(date==null)returnnull;","returnnewDateTime(parse(date),dataType);","staticlongparse(finalStringdatetime)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["node.clearValue();","for(inti=nodeList.size()-2;i\>=0;i--){","if(!node.isEmpty())","break;","IndexNodeparent=(IndexNode)nodeList.get(i);","parent.removeNode(node.getDigit());"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticfinalintCURDATE=1200;//firsttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","staticfinalintCURRENTDATE=1201;","staticfinalintCURTIME=1202;","staticfinalintDAYNAME=1203;","staticfinalintDAYOFMONTH=1204;","staticfinalintDAYOFWEEK=1205;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["store.writeString(sql);","store.writeInt(0);//nomoreadditinalinformations","store.writeFinsh(null);","raFile.close();","@Override","voidwriteMagic(FileChannelraFile)throwsException{"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["daten[10]=hex2byte(chars,24);","daten[11]=hex2byte(chars,26);","daten[12]=hex2byte(chars,28);","daten[13]=hex2byte(chars,30);","daten[14]=hex2byte(chars,32);","daten[15]=hex2byte(chars,34);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);","returnb;","}else{","byte[]b=newbyte[byteLen-start];","System.arraycopy(bytes,start,b,0,b.length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","returnscale;","default:","returnExpression.getScale(dataType);"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["intparamType=param.getType();","isAggregateFunction=isAggregateFunction||paramType\>=Expression.GROUP_BEGIN;","if(paramType==Expression.NAME)","compileLinkExpressionName((ExpressionName)param);","elsecompileLinkExpressionParams(param);","expr.optimize();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicResultSetgetPrimaryKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"KEY_SEQ\",\"PK_NAME\"};","Object[][]data=con.getDatabase(false).getPrimaryKeys(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);","default:thrownewError();","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=length;i\<lengthColumn;i++){","page[offset++]=0;","byte[]readBinary(){","intlength=readShort()&0xFFFF;","returnreadBytes(length);","voidwriteLongBinary(byte[]daten)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetBytes();","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getLong(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["buf.insert(buf.length()-scale,\'.\');","if(signum\<0)buf.insert(0,\'-\');","returnbuf.toString();","publicintcompareTo(MutableNumericnumeric){","returntoBigDecimal().compareTo(numeric.toBigDecimal());","publicbooleanequals(Objectobj){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["return((DateTime)obj).getTimeMillis();","default:","Stringstr=obj.toString();","if(str.indexOf(\'-\')\>0||str.indexOf(\':\')\>0)","returnDateTime.parse(str);","try{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreateFromException(Throwablee){","if(einstanceofSQLException){","return(SQLException)e;","else{"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["staticvoiddropView(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropView(tableName);","voiddropView(StringviewName)throwsException{","synchronized(tableViews){","Objectview=tableViews.remove(viewName);","if(view!=null&&!(viewinstanceofView))"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnExpressionValue.getInt(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","return(int)readTimestamp();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["IndexDescriptionfk=foreignKey.fk;","if((pkTable==null||pkTable.equals(foreignKey.pkTable))&&","(fkTable==null||fkTable.equals(foreignKey.fkTable))){","StringscolumnsPk=pk.getColumns();","StringscolumnsFk=fk.getColumns();","for(intc=0;c\<columnsPk.size();c++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["addKeyWord(\"DECIMAL\",DECIMAL);","addKeyWord(\"NUMERIC\",NUMERIC);","addKeyWord(\"REAL\",REAL);","addKeyWord(\"FLOAT\",FLOAT);","addKeyWord(\"DOUBLE\",DOUBLE);","addKeyWord(\"DATE\",DATE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","store.writeExpression(valueExpress,column);","for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeExpression(c,valueExpress);","store.writeFinsh(con);","for(inti=0;i\<indexes.size();i++){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["privateDatabasedatabase;","privatebooleanautoCommit=true;","intisolationLevel=TRANSACTION_READ_COMMITTED;//seealsogetDefaultTransactionIsolation","privateListcommitPages=newArrayList();","SSConnection(SSConnectioncon){","readonly=con.readonly;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicObjectgetObject(intcolumnIndex)throwsSQLException{","try{","Objectobj=getValue(columnIndex).getApiObject();","wasNull=obj==null;","returnobj;","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(c\>\'0\'&&last!=c){","output[idx++]=c;","last=c;","for(;idx\<4;){","output[idx++]=\'0\';","returnnewString(output);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseSQLTokenizer.UCASE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionUCase();","break;","caseSQLTokenizer.CURDATE:","caseSQLTokenizer.CURRENTDATE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["abstractclassExpressionFunctionReturnFloatextendsExpressionFunction{","booleanisNull()throwsException{","returnparam1.isNull();","finalbooleangetBoolean()throwsException{","returngetDouble()!=0;","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["column.setScale(origExpression.getScale());","column.setDataType(exprName.getDataType());","}else{","exprName.setFrom(this,idx,column);","}else{","patchExpressions(expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["bytes=newbyte[2];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["expr=newExpressionName(Expression.FIRST);","break;","caseSQLTokenizer.LAST:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.LAST);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{DATETIME_INVALID,\"\'\'{0}\'\'Ã¨unDATE,TIMEorTIMESTAMPnonvalido.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Conversionenonsupportataversoiltipodidato\'\'{0}\'\'daltipo\'\'{1}\'\'perl\'\'operazione\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Tipodidato\'\'{0}\'\'nonsupportatoperl\'\'operazione\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Tipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Conversioneversoiltipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"TipononsupportatoperlafunzioneCONVERT:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["publicbooleanisCatalogAtStart(){","returntrue;","publicStringgetCatalogSeparator(){","return\".\";","publicbooleansupportsSchemasInDataManipulation(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["nodes=EMPTY_NODES;","value=null;","remainderKey=null;","finalvoidclearValue(){","value=null;","finalObjectgetValue(){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["staticfinalintSQL_BINARY=1351;","staticfinalintSQL_BIT=1352;","staticfinalintSQL_CHAR=1353;","staticfinalintSQL_DATE=1354;","staticfinalintSQL_DECIMAL=1355;","staticfinalintSQL_DOUBLE=1356;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatefinalFiledirectory;","privatefinalFileChannelmaster;","privatefinalWeakHashMapconnections=newWeakHashMap();","staticDatabasegetDatabase(Stringname,SSConnectioncon,booleancreate)throwsSQLException{","if(name==null){","returnnull;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["raFile=null;","try{","currentRaFile.close();","}catch(Throwableex){","con.rollbackFile(currentRaFile);","if(!file.delete()){"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["classLobsextendsTable{","Lobs(Tabletable)throwsException{","super(table.database,table.name);","raFile=Utils.openRaFile(getFile(database),database.isReadOnly());","@Override","FilegetFile(Databasedatabase){"]": ["|project://smallsql/src/smallsql/database/Lobs.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionLocateextendsExpressionFunctionReturnInt{","intgetFunction(){","returnSQLTokenizer.LOCATE;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|"],
"["}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleFloatFactor[scale]*signum;","}else","if(value.length==2&&(value[0]\>0)){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnvalue;","publicintintValue(){","return(int)value;","publiclonglongValue(){","return(long)value;","publicStringtoString(){"]": ["|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["staticfinalintESCAPE_L=\'{\';//123","staticfinalintBIT_OR=\'|\';//124","staticfinalintESCAPE_R=\'}\';//125","staticfinalintTILDE=\'~\';//126","staticfinalintLESSER_EQU=100+LESSER;//\<=","staticfinalintUNEQUALS=100+EQUALS;//\<\>"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(float)readDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/(float)10000.0;","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=0;i\<length;i++){","if(leftBytes[i]!=rightBytes[i]){","comp=leftBytes[i]\<rightBytes[i]?-1:1;","break;","if(comp==0&&leftBytes.length!=rightBytes.length){","comp=leftBytes.length\<rightBytes.length?-1:1;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["switch(type){","caseSQLTokenizer.LEVEL:","con.isolationLevel=isolationLevel;","break;","caseSQLTokenizer.USE:","con.setCatalog(name);"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["chars[1]=digits[(daten[offset+3])&0x0F];","chars[2]=digits[(daten[offset+2]\>\>4)&0x0F];","chars[3]=digits[(daten[offset+2])&0x0F];","chars[4]=digits[(daten[offset+1]\>\>4)&0x0F];","chars[5]=digits[(daten[offset+1])&0x0F];","chars[6]=digits[(daten[offset+0]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"[":(key[i]);","if(++i==length){","if(isLast){","node.addNode(digit,rowOffset);","returnnull;","returnnode.addRoot(digit);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.VARBINARY:","returnUtils.bytes2float(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.VALUE_BIN_TOOLARGE,params);","if(varBinary)lengthColumn=length;","intnewSize=offset+2+lengthColumn;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(lengthColumn\>\>8);","page[offset++]=(byte)(lengthColumn);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["serializeConnections.put(con,con);","break;","switch(pageOperation){","caseSQLTokenizer.CREATE:{","if(locks.size()\>0){","Iteratorvalues=locks.values().iterator();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["num.sub(right.getNumeric());","returnnum;","caseMUL:","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=left.getNumeric();","num.mul(right.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["setInt(findParameter(parameterName),x);","publicvoidsetLong(StringparameterName,longx)throwsSQLException{","setLong(findParameter(parameterName),x);","publicvoidsetFloat(StringparameterName,floatx)throwsSQLException{","setFloat(findParameter(parameterName),x);","publicvoidsetDouble(StringparameterName,doublex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["publicvoidsetObject(StringparameterName,Objectx,intsqlType,intscale)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType,scale);","publicvoidsetObject(StringparameterName,Objectx,intsqlType)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType);","publicvoidsetObject(StringparameterName,Objectx)throwsSQLException{","setObject(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["else","if(newValueinstanceofDouble)","this.dataType=SQLTokenizer.DOUBLE;","else","if(newValueinstanceofNumber)","this.dataType=SQLTokenizer.DECIMAL;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.MINUS:","caseSQLTokenizer.PLUS:","do{","if(token.value==SQLTokenizer.MINUS)","isMinus=!isMinus;","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["abstractbooleanisNull()throwsException;","abstractbooleangetBoolean()throwsException;","abstractintgetInt()throwsException;","abstractlonggetLong()throwsException;","abstractfloatgetFloat()throwsException;","abstractdoublegetDouble()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["from.beforeFirst();","booleanisBeforeFirst()throwsSQLException{","returnfrom.isBeforeFirst();","booleanisFirst()throwsSQLException{","returnfrom.isFirst();","booleanfirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.MONEY:","value=Money.createFromUnscaledValue(expr.getMoney());","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","value=newMutableNumeric(expr.getNumeric());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","break;","caseSQLTokenizer.ALL:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["updateByte(findColumn(columnName),x);","publicvoidupdateShort(StringcolumnName,shortx)throwsSQLException{","updateShort(findColumn(columnName),x);","publicvoidupdateInt(StringcolumnName,intx)throwsSQLException{","updateInt(findColumn(columnName),x);","publicvoidupdateLong(StringcolumnName,longx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","intreadShort(){","return(page[offset++]\<\<8)|(page[offset++]&0xFF);","voidwriteInt(intvalue){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["default:","Stringstr=obj.toString().trim();","try{","returnInteger.parseInt(str);","}catch(Throwableth){/*ANumberFormatExceptioncanoccurifitafloatingpointnumber*/}","return(int)Double.parseDouble(str);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["byte[]bytes=param1.getBytes();","intcount=param2.getInt();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","for(inti=0;i\<count;i++){","buffer.write(bytes);","returnbuffer.toByteArray();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["while(right.next()){","index.addValues(right.getRowPosition(),rightEx);","booleannext()throwsException{","switch(compare){","caseExpressionArithmetic.EQUALS:","returnnextEquals();"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["Math.min(row+1,-1);","returnrowPos==1;","finalbooleanrelative(introws){","if(rows==0)returnrowPos==1;","rowPos=Math.min(Math.max(rowPos+rows,-1),1);","returnrowPos==1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["if(newSize\>page.length)resizePage(newSize);","writeShort(lengthColumn);","writeChars(daten);","for(inti=length;i\<lengthColumn;i++){","page[offset++]=\'\';","page[offset++]=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["SQLTokentokenType=nextToken(MISSING_ADD_ALTER_DROP);","CommandTablecmd=newCommandTable(con.log,catalog,name,tokenType.value);","switch(tokenType.value){","caseSQLTokenizer.ADD:","SQLTokentoken;","do{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivatevoidloopToEndOfNode(LongTreeListEnumlistEnum){","intnextEntry;","intnextOffset1,nextOffset2;","nextOffset1=offset;","offset+=2;","if(listEnum.stack\<3)"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(pointer\>oldOffset){","offset-=pointerSize;","writePointer(pointer+diff);","if(diff\>0)pointer+=diff;","if(level\<2){","startOffset=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["intshift=48;","booleanfirstNode=true;//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","booleanfirstNode1=true;","booleanfirstNode2=true;","booleanfirstNode3=true;","while(shift\>=0){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returninserts;","finalTableStorePagerequestLock(SSConnectioncon,intpageOperation,longpage)throwsException{","synchronized(locks){","if(raFile==null){","throwSmallSQLException.create(Language.TABLE_MODIFIED,name);","longendTime=0;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Utils.indexOf(\'e\',sql,token.offset,token.length)\>=0){","returnnewExpressionValue(newDouble(tok),SQLTokenizer.DOUBLE);","}else{","try{","returnnewExpressionValue(newInteger(tok),SQLTokenizer.INT);","}catch(NumberFormatExceptione){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr=newExpressionFunctionSoundex();","break;","caseSQLTokenizer.SUBSTRING:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionSubstring();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["writeFinsh(con);","privateintoffset;//aktuelleread/writePositioninderPage","intgetCurrentOffsetInPage(){","returnoffset;","voidsetCurrentOffsetInPage(intnewOffset){","this.offset=newOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleanisCaseSensitive(){","returnfalse;","booleanisNullable(){","returntrue;","staticfinalintVALUE=1;","staticfinalintNAME=2;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["if(scale!=0){","MutableNumericnumeric=newMutableNumeric(this);","numeric.setScale(0);","returnnumeric.longValue();","return(signum\>0)?Long.MAX_VALUE:Long.MIN_VALUE;","publicfloatfloatValue(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["while(true){","Expressionexpr=expression(cmd,0);","list.add(expr);","SQLTokentoken=nextToken();","if(listType==SQLTokenizer.ORDER&&token!=null){","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnvalue;","@Override","publicdoubledoubleValue(){","returnvalue;","@Override","publicintintValue(){"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["staticfinalintBIT_XOR=\'^\';//94","staticfinalintESCAPE_L=\'{\';//123","staticfinalintBIT_OR=\'|\';//124","staticfinalintESCAPE_R=\'}\';//125","staticfinalintTILDE=\'~\';//126","staticfinalintLESSER_EQU=100+LESSER;//\<="]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.YEAR;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());","returndetails.year;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionYear.java|"],
"["Expressioncolumn=expression(selCmd,0);","selCmd.addColumnExpression(column);","token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM","booleanas=false;","if(token.value==SQLTokenizer.AS){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"MOD\",MOD);","addKeyWord(\"PI\",PI);","addKeyWord(\"POWER\",POWER);","addKeyWord(\"RADIANS\",RADIANS);","addKeyWord(\"RAND\",RAND);","addKeyWord(\"ROUND\",ROUND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returntrue;","publicbooleansupportsGroupByUnrelated(){","returntrue;","publicbooleansupportsGroupByBeyondSelect(){","returntrue;","publicbooleansupportsLikeEscapeClause(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returngetDouble()!=0;","intgetInt()throwsException{","returnMath.abs(param1.getInt());","longgetLong()throwsException{","returnMath.abs(param1.getLong());","floatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["addKeyWord(\"NCHAR\",NCHAR);","addKeyWord(\"VARCHAR2\",VARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"VARCHAR\",VARCHAR);","addKeyWord(\"NVARCHAR2\",NVARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"NVARCHAR\",NVARCHAR);","addKeyWord(\"SYSNAME\",SYSNAME);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.dataType=newDataType;","if(dataType\<0){","if(newValue==null)","this.dataType=SQLTokenizer.NULL;","else","if(newValueinstanceofString)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicArraygetArray(StringparameterName)throwsSQLException{","returngetArray(findParameter(parameterName));","publicDategetDate(StringparameterName,Calendarcal)throwsSQLException{","returngetDate(findParameter(parameterName),cal);","publicTimegetTime(StringparameterName,Calendarcal)throwsSQLException{","returngetTime(findParameter(parameterName),cal);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["ExpressionNameexpr=newExpressionName(tok);","if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());","}else{","previousToken();","if(isMinus)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateLongLongListrowPositions;//neededforgetRowPosition()andsetRowPosition()","privateintrow;//currentrownumber","JoinScrollscroll;","Join(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;","this.condition=condition;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnrowPos==1;","finalintgetRow(){","returnrowPos==1?1:0;","finallonggetRowPosition(){","returnrowPos;","finalvoidsetRowPosition(longrowPosition){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["returninternalExpressions.size()-1;","finalprivateintaddInternalExpressionFromSelect(Expressionexpr)throwsSQLException{","inttype=expr.getType();","if(type==Expression.NAME){","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];","setPreviousOffset(listEnum);","finalprivatevoidsetPreviousOffset(LongTreeListEnumlistEnum){","intpreviousOffset=listEnum.offsetStack[listEnum.stack]-2*(2+(listEnum.stack\>=3?0:pointerSize));","if(listEnum.stack==0){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["tableViews.remove(tableName);","table.drop(con);","}else{","Table.drop(this,tableName);","voidremoveTableView(StringtableViewName){","synchronized(tableViews){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnsize;","finalDataSourceget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(DataSourcetable){"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["offset1=offset2;","offset2=offset3;","firstNode=firstNode1;","firstNode1=firstNode2;","firstNode2=firstNode3;","removeNode();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["}else{","quoteBuffer.append(c);","break;","default:","if(comment!=NOT_COMMENT){","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intabsDiff=Math.abs(diff);","if(absDiff==2)return;","offset+=absDiff;","firstNode=false;","continue;","intvalue=getUnsignedShort();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(value.equals(e.value))","returntrue;","returnfalse;","staticclassEntry{","finallongkey;","finalTableStorePagevalue;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["intbitCount=getBitCount();","intmask=0xFFFFFFFF\>\>\>(32-bitCount);","dataSourceIdx=(int)rowPosition&mask;","currentDS=dataSources.get(dataSourceIdx);","currentDS.setRowPosition(rowPosition\>\>bitCount);","finalbooleanrowInserted(){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["row[4]=Utils.getInteger(column.getPrecision());//COLUMN_SIZE","row[6]=Utils.getShort(column.getScale());//DECIMAL_DIGITS","row[7]=Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\>0)//castneededforCompiler1.5","value=str;","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"SECOND\",SECOND);","addKeyWord(\"DATEADD\",TIMESTAMPADD);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPADD\",TIMESTAMPADD);","addKeyWord(\"DATEDIFF\",TIMESTAMPDIFF);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPDIFF\",TIMESTAMPDIFF);","addKeyWord(\"WEEK\",WEEK);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.UCASE;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|"],
"["if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else{","if(scale!=0){","MutableNumericnumeric=newMutableNumeric(this);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["importjava.text.MessageFormat;","importsmallsql.database.language.Language;","classSmallSQLExceptionextendsSQLException{","privatestaticfinallongserialVersionUID=-1683756623665114L;","privatebooleanisInit;","privatestaticLanguagelanguage;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["staticfinalintDAYOFMONTH=1204;","staticfinalintDAYOFWEEK=1205;","staticfinalintDAYOFYEAR=1206;","staticfinalintDAY=1207;","staticfinalintHOUR=1208;","staticfinalintMILLISECOND=1209;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["super(\"[SmallSQL]\"+message,vendorCode,0);","this.initCause(throwable);","init();","privatevoidinit(){","this.isInit=true;","PrintWriterpw=DriverManager.getLogWriter();"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["this.length=tokenEnd-tokenStart;","SQLToken(Stringname,intvalue,inttokenStart,inttokenEnd){","this.value=value;","this.offset=tokenStart;","this.length=tokenEnd-tokenStart;","this.name=name;"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["caseDIV:returnleft.getMoney()*10000/right.getMoney();","caseNEGATIVE:return-left.getMoney();","throwcreateUnspportedConversion(SQLTokenizer.MONEY);","MutableNumericgetNumeric()throwsjava.lang.Exception{","if(isNull())returnnull;","intdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["cmdSelect.setOrder(order);","returnnewSSResultSet(st,cmdSelect);","publicResultSetgetSchemas()throwsSQLException{","String[]colNames={\"TABLE_SCHEM\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicstaticfinalStringFILE_TOONEW=\"SS-0490\";","publicstaticfinalStringFILE_TOOOLD=\"SS-0491\";","publicstaticfinalStringFILE_CANT_DELETE=\"SS-0492\";","publicstaticfinalStringROW_0_ABSOLUTE=\"SS-0520\";","publicstaticfinalStringROW_NOCURRENT=\"SS-0521\";","publicstaticfinalStringROWS_WRONG_MAX=\"SS-0522\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(usableLock!=null){","returnusableLock;","lock=newTableStorePage(con,this,LOCK_NONE,page);","if(con.isolationLevel\>=Connection.TRANSACTION_REPEATABLE_READ||pageOperation==SQLTokenizer.UPDATE){","lock.lockType=pageOperation==SQLTokenizer.UPDATE?LOCK_WRITE:LOCK_READ;","if(prevLock!=null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["details2.month+=param1.getLong()*3;","returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.year+=param1.getLong();","returnDateTime.calcMillis(details2);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["intlength=Math.min(param3.getInt(),bytes.length);","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","buffer.write(bytes,0,start);","buffer.write(param4.getBytes());","if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["finalintupdateRule=DatabaseMetaData.importedKeyNoAction;","finalintdeleteRule=DatabaseMetaData.importedKeyNoAction;","ForeignKey(StringpkTable,IndexDescriptionpk,StringfkTable,IndexDescriptionfk){","this.pkTable=pkTable;","this.fkTable=fkTable;","this.pk=pk;"]": ["|project://smallsql/src/smallsql/database/ForeignKey.java|"],
"["finalfloatgetFloat()throwsException{","return(float)getDouble();","MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;","switch(getDataType()){","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["newNode.value=rowOffset;","}else{","newNode.moveRemainderValueSub(rowOffset,puffer);","privatefinalvoidmoveRemainderValueSub(ObjectrowOffset,char[]remainderValue){","intlength=remainderValue.length-1;","this.remainderKey=newchar[length];"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{VALUE_BIN_TOOLARGE,\"01000\"},","{VALUE_NULL_INVALID,\"01000\"},","{VALUE_CANT_CONVERT,\"01000\"},","{BYTEARR_INVALID_SIZE,\"01000\"},","{LOB_DELETED,\"01000\"},","{PARAM_CLASS_UNKNOWN,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["thrownewjava.lang.UnsupportedOperationException(\"MethodsetArray()notyetimplemented.\");","publicResultSetMetaDatagetMetaData()throwsSQLException{","checkStatement();","if(cmdinstanceofCommandSelect){","try{","((CommandSelect)cmd).compile(con);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["returnparam;","caseSQLTokenizer.CASE:","returncaseExpr(cmd);","caseSQLTokenizer.MINUS:","caseSQLTokenizer.PLUS:","do{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleannext()throwsException{","booleanoldIsCurrentRow=isCurrentRow;","do{","isCurrentRow=rowSource.next();","}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row++;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returnInteger.MAX_VALUE;","caseSQLTokenizer.NUMERIC:","returnprecision+(scale\>0?2:1);","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","return2+precision*2;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.REAL:","value=newMutableFloat(expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","value=newMutableDouble(expr.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["invalidParamCount=false;","expr=newExpressionFunctionIIF();","Expression[]newParams=newExpression[3];","newParams[0]=newExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","newParams[1]=params[1];","newParams[2]=params[0];"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["getCmd().insertRow(st.con,values);","clearRowBuffer();","privatevoidtestNotInsertRow()throwsSQLException{","if(isInsertRow){","throwSmallSQLException.create(Language.RSET_ON_INSERT_ROW);","publicvoidupdateRow()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["voidnullRow(){","left.nullRow();","right.nullRow();","row=0;","voidnoRow(){","isAfterLast=true;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["result=right.first();","if(!result){","switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","isOuterValid=false;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|","|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["privateintnextPageOffset;","privatelongfilePosUpdated;","privateinttype;","privateStoreImplupdatePointer;","privateStoreImpl(Tabletable,StorePagestorePage,inttype,longfilePos){","this.table=table;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","default:","previousToken();","}else{","previousToken();","Stringscolumns=newStrings();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"QUARTER\",QUARTER);","addKeyWord(\"SECOND\",SECOND);","addKeyWord(\"DATEADD\",TIMESTAMPADD);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPADD\",TIMESTAMPADD);","addKeyWord(\"DATEDIFF\",TIMESTAMPDIFF);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPDIFF\",TIMESTAMPDIFF);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Stringinput=param1.getString();","returngetString(input);","staticStringgetString(Stringinput){","char[]output=newchar[4];","intidx=0;","input=input.toUpperCase();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["lastRowOffset=-1;","while(rowSource.next()){","lastRowOffset=rowSource.getRowPosition();","index.addValues(lastRowOffset,orderBy);","sortedRowCount++;","scrollStatus=index.createScrollStatus(orderBy);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["thrownewError(String.valueOf(expr.getDataType()));","finalvoidremoveValue(longrowOffset,Expressionsexpressions)throwsException{","ArrayListnodeList=newArrayList();","Objectobj=findRows(expressions,true,nodeList);","if(!rootPage.getUnique()){","LongTreeListlist=(LongTreeList)obj;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(pw!=null)this.printStackTrace(pw);","staticvoidsetLanguage(ObjectlocaleObj)throwsSQLException{","if(language!=null&&localeObj==null)return;","if(localeObj==null){","language=Language.getDefaultLanguage();","else{"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["ExpressionArithmeticcond=(ExpressionArithmetic)condition;","ExpressionsleftEx=newExpressions();","ExpressionsrightEx=newExpressions();","intoperation=createJoinScrollIndex(cond,leftEx,rightEx,0);","if(operation!=0){","scroll=newJoinScrollIndex(type,left,right,leftEx,rightEx,operation);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnfalse;","booleanisNullable(){","returntrue;","staticfinalintVALUE=1;","staticfinalintNAME=2;","staticfinalintFUNCTION=3;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["case21:","case121://ODBCkannonish+millis;yyyy-mm-ddhh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{LOB_DELETED,\"01000\"},","{PARAM_CLASS_UNKNOWN,\"01000\"},","{PARAM_EMPTY,\"01000\"},","{PARAM_IDX_OUT_RANGE,\"01000\"},","{COL_DUPLICATE,\"01000\"},","{COL_MISSING,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.createFromException(e);","publicdoublegetDouble(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getDouble();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnExpressionValue.getMoney(getObject(),getDataType());","MutableNumericgetNumeric()throwsException{","returnExpressionValue.getNumeric(getObject(),getDataType());","StringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["{UNSUPPORTED_CONVERSION,\"Kannnichtkonvertieren\'\'{0}\'\'[{1}]zu\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionINSERT.\"},","{SUBSTR_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"DerStringWertistzugroÃŸfÃ¼rdieSpalte.\"},","{VALUE_BIN_TOOLARGE,\"EinBinÃ¤reWertmitLÃ¤nge{0}istzugroÃŸfÃ¼reineSpaltemitderGrÃ¶ÃŸe{1}.\"},","{VALUE_NULL_INVALID,\"NullWertesindungÃ¼ltigfÃ¼rdieSpalte\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseSQLTokenizer.SMALLINT:","returnString.valueOf(readShort());","caseSQLTokenizer.INT:","returnString.valueOf(readInt());","caseSQLTokenizer.BIGINT:","returnString.valueOf(readLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["StringBufferbuf=newStringBuffer();","if(dataType!=SQLTokenizer.TIME){","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["nextToken(MISSING_EQUALS);","Expressionsrc=expression(cmd,0);","cmd.addSetting(dest,src);","token=nextToken();","if(token==null)break;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return(MutableNumeric)obj;","returnnewMutableNumeric((BigDecimal)obj);","default:returnnewMutableNumeric(obj.toString());","ObjectgetObject(){","if(isEmpty()){","returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(needGeneratedKeys&&generatedKeysType==1){","String[]keyNames=st.getGeneratedKeyNames();","for(inti=0;i\<keyNames.length;i++){","if(column.getName().equalsIgnoreCase(keyNames[i])){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["Command(Loggerlog){","this.log=log;","this.columnExpressions=newExpressions();","Command(Loggerlog,ExpressionscolumnExpressions){","this.log=log;","this.columnExpressions=columnExpressions;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["throwSmallSQLException.create(Language.SECS_TOOLARGE,datetime);","if(millis\>=1000){","throwSmallSQLException.create(Language.MILLIS_TOOLARGE,datetime);","returncalcMillis(year,month,day,hour,minute,second,millis);","}catch(SQLExceptionex){","throwex;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalvoidupdateRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","intsavepoint=con.getSavepoint();","try{","for(intt=0;t\<tables.size();t++){","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(t));","TableViewtable=result.getTableView();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnreadNumeric().getSignum()!=0;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnUtils.string2boolean(readString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicTimegetTime(inti,Calendarcal)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetTimestamp()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType,StringtypeName)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetURL()notyetimplemented.\");","publicvoidsetURL(StringparameterName,URLx)throwsSQLException{","setURL(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["store.filePos=-1;","break;","caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:","store.page=newbyte[DEFAULT_PAGE_SIZE];","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["{UNSUPPORTED_CONVERSION_FUNC,\"Conversioneversoiltipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"TipononsupportatoperlafunzioneCONVERT:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"TipononsupportatoperlafunzioneSUM:\'\'{0}\'\'.\"},","{UNSUPPORTED_TYPE_MAX,\"TipononsupportatoperlafunzioneMAX:\'\'{0}\'\'.\"},","{UNSUPPORTED_CONVERSION,\"NonÃ¨possibleconvertire\'\'{0}\'\'[{1}]in\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneINSERT.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","Expression[]params=expr.getParams();","if(params!=null){","for(intp=0;p\<params.length;p++){","addInternalExpressionFromSelect(params[p]);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["Filedir=newFile(name);","if(!dir.isDirectory()||","!newFile(dir,Utils.MASTER_FILENAME).exists())","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefiles[]=dir.listFiles();","if(files!=null)"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["caseSQLTokenizer.DOUBLE:","writeDouble(expr.getDouble());","break;","caseSQLTokenizer.MONEY:","writeLong(expr.getMoney());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintTIMESTAMPDIFF=1217;","staticfinalintWEEK=1218;","staticfinalintYEAR=1219;//lasttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","static{","addKeyWord(\"CURDATE\",CURDATE);","addKeyWord(\"CURTIME\",CURTIME);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticfinalintMINUTE=1210;","staticfinalintMONTH=1211;","staticfinalintMONTHNAME=1212;","staticfinalintNOW=1213;","staticfinalintQUARTER=1214;","staticfinalintSECOND=1215;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(isLastValue){","node.saveValue(rowOffset);","returnnull;","returnnode.addRoot();","thrownewError();","finalprivateIndexNodefind(IndexNodenode,char[]key,ArrayListnodeList){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["page=find(page,shortToBinarySortOrder(expr.getInt()),1,nodeList);","break;","caseSQLTokenizer.INT:","page=find(page,intToBinarySortOrder(expr.getInt()),2,nodeList);","break;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["from.afterLast();","returnfalse;","returnfrom.next();","finalbooleanlast()throwsException{","if(maxRows\>=0){","if(maxRows==0){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnparam2.isNull();","returnparam3.isNull();","booleangetBoolean()throwsException{","if(param1.getBoolean())","returnparam2.getBoolean();","returnparam3.getBoolean();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["publicstaticfinalStringHOURS_TOOLARGE=\"SS-0253\";","publicstaticfinalStringMINUTES_TOOLARGE=\"SS-0254\";","publicstaticfinalStringSECS_TOOLARGE=\"SS-0255\";","publicstaticfinalStringMILLIS_TOOLARGE=\"SS-0256\";","publicstaticfinalStringDATETIME_INVALID=\"SS-0257\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_OPER=\"SS-0280\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseMOD:returnlVal%rVal;","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","floatgetFloat()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["SQLTokenizer.DECIMAL,","SQLTokenizer.NUMERIC,","SQLTokenizer.MONEY,","SQLTokenizer.SMALLMONEY,","SQLTokenizer.BIGINT,","SQLTokenizer.INT,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicstaticfinalStringCOL_AMBIGUOUS=\"SS-0408\";","publicstaticfinalStringGROUP_AGGR_INVALID=\"SS-0430\";","publicstaticfinalStringGROUP_AGGR_NOTPART=\"SS-0431\";","publicstaticfinalStringORDERBY_INTERNAL=\"SS-0432\";","publicstaticfinalStringUNION_DIFFERENT_COLS=\"SS-0433\";","publicstaticfinalStringINDEX_EXISTS=\"SS-0460\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["{UNSUPPORTED_TYPE_SUM,\"01000\"},","{UNSUPPORTED_TYPE_MAX,\"01000\"},","{UNSUPPORTED_CONVERSION,\"01000\"},","{INSERT_INVALID_LEN,\"01000\"},","{SUBSTR_INVALID_LEN,\"01000\"},","{VALUE_STR_TOOLARGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["previousToken();","Expressionslist=expressionParenthesisList(cmd);","leftExpr=newExpressionArithmetic(leftExpr,list,operation);","break;","caseSQLTokenizer.IS:","token=nextToken(MISSING_NOT_NULL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalintgetScale(){","intprecision=0;","for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getScale());","returnprecision;","finalprivateExpressiongetResult()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["testClosedConnection();","synchronized(getMonitor()){","commitPages.add(storePage);","publicvoidcommit()throwsSQLException{","log.println(\"Commit\");","testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.TIME:","return(int)readTime();","caseSQLTokenizer.DATE:","return(int)readDate();","caseSQLTokenizer.SMALLDATETIME:","return(int)readSmallDateTime();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleanisAfterLast()throwsException{","returncommandSelect.isAfterLast();","voidafterLast()throwsException{","commandSelect.afterLast();","booleanabsolute(introw)throwsException{","returncommandSelect.absolute(row);"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["if(length==0){","returnstr1;","byte[]str3=param3.getBytes();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","intidx1=0;","intidx2=Utils.indexOf(str2,str1,idx1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["finalbooleanrowDeleted(){","returnfalse;","finalvoidnullRow(){","thrownewError();","finalvoidnoRow(){","thrownewError();"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["tokenIdx=0;","SQLTokentoken=nextToken(COMMANDS);","switch(token.value){","caseSQLTokenizer.SELECT:","returnselect();","caseSQLTokenizer.DELETE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BIGINT:","return(int)getLongImpl();","caseSQLTokenizer.REAL:","return(int)getFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["inttype=getColumnExpression(column).getType();","returntype==Expression.NAME||type==Expression.FUNCTION;","publicbooleanisCurrency(intcolumn)throwsSQLException{","switch(getColumnExpression(column).getDataType()){","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicstaticfinalStringCUSTOM_MESSAGE=\"SS-0000\";","publicstaticfinalStringUNSUPPORTED_OPERATION=\"SS-0001\";","publicstaticfinalStringCANT_LOCK_FILE=\"SS-0003\";","publicstaticfinalStringDB_EXISTENT=\"SS-0030\";","publicstaticfinalStringDB_NONEXISTENT=\"SS-0031\";","publicstaticfinalStringDB_NOT_DIRECTORY=\"SS-0032\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicstaticfinalStringSEQUENCE_HEX_INVALID=\"SS-0585\";","publicstaticfinalStringSEQUENCE_HEX_INVALID_STR=\"SS-0586\";","publicstaticfinalStringSYNTAX_BASE_OFS=\"SS-0610\";","publicstaticfinalStringSYNTAX_BASE_END=\"SS-0611\";","publicstaticfinalStringSTXADD_ADDITIONAL_TOK=\"SS-0612\";","publicstaticfinalStringSTXADD_IDENT_EXPECT=\"SS-0613\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["row[5]=SQLTokenizer.getKeyWord(col.getDataType());//TYPE_NAME","row[6]=Utils.getInteger(col.getColumnSize());//COLUMN_SIZE","row[8]=Utils.getInteger(col.getScale());//DECIMAL_DIGITS","row[9]=Utils.getInteger(10);//NUM_PREC_RADIX","row[10]=Utils.getInteger(col.isNullable()?DatabaseMetaData.columnNullable:DatabaseMetaData.columnNoNulls);//NULLABLE","row[12]=col.getDefaultDefinition();//COLUMN_DEF"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["privateColumn[]data;//commenthere2","Columns(){","data=newColumn[16];","finalintsize(){","returnsize;","finalColumnget(intidx){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["Object[][]data={{\"SYSTEMTABLE\"},{\"TABLE\"},{\"VIEW\"}};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetColumns(Stringcatalog,StringschemaPattern,StringtableNamePattern,StringcolumnNamePattern)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"NUM_PREC_RADIX\",\"NULLABLE\",\"REMARKS\",\"COLUMN_DEF\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"CHAR_OCTET_LENGTH\",\"ORDINAL_POSITION\",\"IS_NULLABLE\"};","Object[][]data=con.getDatabase(false).getColumns(con,tableNamePattern,columnNamePattern);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returntrue;","publicbooleansupportsMultipleResultSets(){","returntrue;","publicbooleansupportsMultipleTransactions(){","returntrue;","publicbooleansupportsNonNullableColumns(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["charc=input.charAt(i);","switch(c){","case\'B\':","case\'F\':","case\'P\':","case\'V\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["throwSmallSQLException.create(Language.VIEWDROP_NOT_VIEW,viewName);","View.drop(this,viewName);","privatevoidcheckForeignKeys(SSConnectioncon,ForeignKeysforeignKeys)throwsSQLException{","for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);","TableViewpkTable=getTableView(con,foreignKey.pkTable);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalintlength=datetime.length();","finalintyear;","finalintmonth;","finalintday;","finalinthour;","finalintminute;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["this.left=left;","this.right=right;","if(type==Join.FULL_JOIN){","isFullNotValid=newboolean[10];","voidbeforeFirst()throwsException{","left.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseBIT_NOT:return~left.getInt();","throwcreateUnspportedConversion(SQLTokenizer.INT);","longgetLong()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["precision=readByte();","else","precision=readInt();","column.setPrecision(precision);","column.setScale(readByte());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["doubledValue=((Number)obj).doubleValue();","if(Double.isInfinite(dValue)||Double.isNaN(dValue))","returnnull;","returnnewMutableNumeric(dValue);","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["ArrayListkeys=null;","booleanneedGeneratedKeys=st.needGeneratedKeys();","intgeneratedKeysType=0;","while(cmdSel.next()){","if(needGeneratedKeys){","keyColumnNames=newStrings();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["staticfloatgetFloat(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","return(obj.equals(Boolean.TRUE))?1:0;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnTypes.BOOLEAN;","caseSQLTokenizer.BINARY:","returnTypes.BINARY;","caseSQLTokenizer.VARBINARY:","returnTypes.VARBINARY;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["line=input.readLine();","}catch(IOExceptionex){","ex.printStackTrace();","JOptionPane.showMessageDialog(null,\"Youneedtostartthecommandlineofthe\\nSmallSQLDatabasewithaconsolewindow:\\n\\njava-jarsmallsql.jar\\n\\n\"+ex,\"FatalError\",JOptionPane.OK_OPTION);","return;","if(line==null){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","publicclassExpressionArithmeticextendsExpression{","privateExpressionleft;","privateExpressionright;","privateExpressionright2;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalclassMutableLongextendsNumberimplementsMutable{","longvalue;","MutableLong(longvalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|"],
"["finalintgetRow()throwsException{","returnrow;","privatefinalintgetBitCount(){","intsize=dataSources.size();","intbitCount=0;","while(size\>0){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnmetadata;","publicvoidsetReadOnly(booleanreadOnly){","publicbooleanisReadOnly(){","returnreadonly;","publicvoidsetCatalog(Stringcatalog)throwsSQLException{","testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseGREATER:returnleft.getFloat()\>right.getFloat();","caseGRE_EQU:returnleft.getFloat()\>=right.getFloat();","caseLESSER:returnleft.getFloat()\<right.getFloat();","caseLES_EQU:returnleft.getFloat()\<=right.getFloat();","caseUNEQUALS:returnleft.getFloat()!=right.getFloat();","caseBETWEEN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(((ExpressionArithmetic)expr).operation!=operation)returnfalse;","returntrue;","intgetInt()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case102://ANSIyyyy.mm.dd","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.MONTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMonth();","break;","caseSQLTokenizer.NOW:","invalidParamCount=(paramCount!=0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.INT:","intintValue=param1.getInt();","if(intValue\<0)","return-1;","if(intValue\>0)","return1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["System.out.println(\"\\tUsetheUSEcommandtochangethedatabasecontext.\");","System.out.println(\"\\tType2timesENTERtoexecuteanySQLcommand.\");","StringBuffercommand=newStringBuffer();","BufferedReaderinput=newBufferedReader(newInputStreamReader(System.in));","while(true){","try{"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["cmd.addValues(expressionParenthesisList(cmd));","returncmd;","caseSQLTokenizer.SELECT:","cmd.addValues(select());","while(parthesisCount--\>0){","nextToken(MISSING_PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivateIndexNodefind(IndexNodenode,char[]key,ArrayListnodeList){","intlength=key.length;","inti=-1;","while(true){","chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","return((Number)obj).intValue()!=0;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["writeShort(0);","writeShort((int)(value));","writeShort(0);","size=offset;","return;","intshift=48;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["voiddrop(Databasedatabase)throwsException{","close();","booleanok=getFile(database,name).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voidclose()throwsException{","if(raFile!=null){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["super.setParams(params);","inti=0;","for(intp=0;p\<cases.size();p++){","cases.set(p,params[i++]);","results.set(p,params[i++]);","if(i\<params.length)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.SIGN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSign();","break;","caseSQLTokenizer.SQRT:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intbyteLen=bytes.length;","intstart=Math.min(Math.max(0,param2.getInt()-1),byteLen);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["caseSQLTokenizer.POWER:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionPower();","break;","caseSQLTokenizer.RADIANS:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","default:","throwSmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID,fileName);","if(version\>TABLE_VIEW_VERSION)","throwSmallSQLException.create(Language.FILE_TOONEW,newObject[]{newInteger(version),fileName});","if(version\<TABLE_VIEW_OLD_VERSION)"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["setScale(oldScale);","privatevoidnegate(byte[]complement){","intlast=complement.length-1;","for(inti=0;i\<=last;i++){","complement[i]=(byte)((i==last)?-complement[i]:~complement[i]);","while(complement[last]==0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicvoidupdateFloat(StringcolumnName,floatx)throwsSQLException{","updateFloat(findColumn(columnName),x);","publicvoidupdateDouble(StringcolumnName,doublex)throwsSQLException{","updateDouble(findColumn(columnName),x);","publicvoidupdateBigDecimal(StringcolumnName,BigDecimalx)throwsSQLException{","updateBigDecimal(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(!file.exists())","throwSmallSQLException.create(Language.INDEX_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());","ByteBufferbuffer=ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["intgetDisplaySize(){","returnexpr.getDisplaySize();","intgetScale(){","returnexpr.getScale();","intgetPrecision(){","returnexpr.getPrecision();"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["from.execute();","NextRow:","while(from.next()){","beforeFirst();","while(next()){","if(currentGroup==null||currentGroup.getBoolean()){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["publicstaticfinalStringSTXADD_FUNC_UNKNOWN=\"SS-0617\";","publicstaticfinalStringSTXADD_PARAM_INVALID_COUNT=\"SS-0618\";","publicstaticfinalStringSTXADD_JOIN_INVALID=\"SS-0619\";","publicstaticfinalStringSTXADD_FROM_PAR_CLOSE=\"SS-0620\";","publicstaticfinalStringSTXADD_KEYS_REQUIRED=\"SS-0621\";","publicstaticfinalStringSTXADD_NOT_NUMBER=\"SS-0622\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(isClosed())throwSmallSQLException.create(Language.CONNECTION_CLOSED);","publicbooleanisClosed(){","return(commitPages==null);","publicDatabaseMetaDatagetMetaData(){","returnmetadata;","publicvoidsetReadOnly(booleanreadOnly){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnvalue^0x80000000;","finalstaticprivatelonglongToBinarySortOrder(longvalue){","returnvalue^0x8000000000000000L;","finalstaticprivatechar[]stringToBinarySortOrder(Stringvalue,booleanneedTrim){","intlength=value.length();","if(needTrim){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.RTRIM:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRTrim();","break;","caseSQLTokenizer.SPACE:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["updateTimestamp(findColumn(columnName),x);","publicvoidupdateAsciiStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateAsciiStream(findColumn(columnName),x,length);","publicvoidupdateBinaryStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateBinaryStream(findColumn(columnName),x,length);","publicvoidupdateCharacterStream(StringcolumnName,Readerx,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["union.addDataSource(newViewResult(con,singleSelect()));","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.ORDER){","order(selCmd);","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.LIMIT){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintSIGN=1019;","staticfinalintSIN=1020;","staticfinalintSQRT=1021;","staticfinalintTAN=1022;","staticfinalintTRUNCATE=1023;//lastnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getIndexInfo(SSConnectioncon,Stringtable,booleanunique)throwsSQLException{","Listrows=newArrayList();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["props.setProperty(\"dbpath\",dbPath);","if(idx2\>0){","StringpropsString=url.substring(idx2+1).replace(\'&\',\';\');","StringTokenizertok=newStringTokenizer(propsString,\";\");","while(tok.hasMoreTokens()){","StringkeyValue=tok.nextToken().trim();"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["returngetColumnExpression(column).isDefinitelyWritable();","publicStringgetColumnClassName(intcolumn)throwsSQLException{","switch(getColumnType(column)){","caseTypes.TINYINT:","caseTypes.SMALLINT:","caseTypes.INTEGER:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnst;","publicObjectgetObject(inti,Mapmap)throwsSQLException{","returngetObject(i);","publicRefgetRef(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blobobject\");","publicClobgetClob(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["formatMillis(details.millis,buf);","returnbuf.toString();","case130://Kuwaitiddmonyyyyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["MutableDouble(doublevalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){","return(float)value;"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["{UNSUPPORTED_TYPE_SUM,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rSUMFunktion.\"},","{UNSUPPORTED_TYPE_MAX,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rMAXFunktion.\"},","{UNSUPPORTED_CONVERSION,\"Kannnichtkonvertieren\'\'{0}\'\'[{1}]zu\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionINSERT.\"},","{SUBSTR_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"DerStringWertistzugroÃŸfÃ¼rdieSpalte.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returntemp/scaleDoubleFactor[scale]*signum;","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).doubleValue();","publicStringtoString(){","StringBufferbuf=newStringBuffer();","if(value.length==0||signum==0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(src1==null)returnfalse;","intlength=src1.length;","if(length!=src2.length-offset2)returnfalse;","for(inti=0;i\<length;i++){","if(src1[i]!=src2[i+offset2])returnfalse;","returntrue;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(value\<0)value=-value;","for(inti=1;i\<=digitCount;i++){","buf.setCharAt(buf.length()-i,Utils.digits[value%10]);","value/=10;","privatefinalstaticvoidformatMillis(intmillis,StringBufferbuf){","buf.append(Utils.digits[(millis/100)%10]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["((LongTreeList)value).save(output);","}else","if(valueinstanceofIndexNode){","output.writeByte(3);","((IndexNode)value).saveRef(output);","output.writeShort(nodes.length);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["booleanisUpdateNeeded=false;","for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","Expressioncol=columnExpressions.get(i);","if(!col.isDefinitelyWritable())"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["thrownoCurrentRow();","MutableNumericgetNumeric(intoffset,intdataType)throwsException{","thrownoCurrentRow();","ObjectgetObject(intoffset,intdataType)throwsException{","thrownoCurrentRow();","StringgetString(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["for(intp=0;p\<params.size();p++){","if(((ExpressionValue)params.get(p)).isEmpty())","throwSmallSQLException.create(Language.PARAM_EMPTY,newInteger(p+1));","voidclearParams(){","for(intp=0;p\<params.size();p++){","((ExpressionValue)params.get(p)).clear();"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["char[]daten=strDaten.toCharArray();","intlength=daten.length;","if(lengthColumn\<length){","throwSmallSQLException.create(Language.VALUE_STR_TOOLARGE);","if(varchar)lengthColumn=length;","intnewSize=offset+2+2*lengthColumn;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;","caseSQLTokenizer.TS://timestampescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;","caseSQLTokenizer.FN://functionescapesequence"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.rightEx=rightEx;","this.compare=compare;","createIndex(rightEx);","privatevoidcreateIndex(ExpressionsrightEx)throwsException{","index=newIndex(false);","right.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["caseSQLTokenizer.ASTERISK:","caseSQLTokenizer.SLACH:","caseSQLTokenizer.PERCENT:","caseSQLTokenizer.EQUALS:","caseSQLTokenizer.LESSER:","caseSQLTokenizer.LESSER_EQU:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["columnExpressions.setSize(count);","newRowSources=sources.toArray();","updateCount=0;","from.execute();","for(inti=0;i\<columnExpressions.size();i++){","ExpressionNameexpr=(ExpressionName)columnExpressions.get(i);"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["from(cmd);","SQLTokentoken=nextToken();","if(token!=null){","if(token.value!=SQLTokenizer.WHERE)","throwthis.createSyntaxError(token,MISSING_WHERE);","where(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SQL_TIME:dataType=SQLTokenizer.TIME;break;","caseSQLTokenizer.SQL_TIMESTAMP:dataType=SQLTokenizer.TIMESTAMP;break;","caseSQLTokenizer.SQL_TINYINT:dataType=SQLTokenizer.TINYINT;break;","caseSQLTokenizer.SQL_VARBINARY:dataType=SQLTokenizer.VARBINARY;break;","caseSQLTokenizer.SQL_VARCHAR:dataType=SQLTokenizer.VARCHAR;break;","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["updateValues[exp.getColumnIndex()]=src;","continue;","updateValues[i]=null;","result.insertRow(updateValues);","}catch(Throwablee){","con.rollback(savepoint);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["((MutableDouble)value).value=Math.min(((MutableDouble)value).value,expr.getDouble());","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["token=nextToken();","Expressiondest=expressionSingle(cmd,token);","if(dest.getType()!=Expression.NAME)throwcreateSyntaxError(token,MISSING_IDENTIFIER);","nextToken(MISSING_EQUALS);","Expressionsrc=expression(cmd,0);","cmd.addSetting(dest,src);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.sql.SQLException;","importsmallsql.database.language.Language;","publicclassStoreImplextendsStore{","privatestaticfinalintDEFAULT_PAGE_SIZE=8192;//8Kb","privatestaticfinalintPAGE_MAGIC=0x12DD13DE;//areusedforrepairingatable","privatestaticfinalintPAGE_CONTROL_SIZE=28;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ObjectgetObject(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["testClosedConnection();","synchronized(getMonitor()){","try{","intcount=commitPages.size();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["raFile.read(buffer);","buffer.position(0);","intmagic=buffer.getInt();","intversion=buffer.getInt();","if(magic!=MAGIC_INDEX){","throwSmallSQLException.create(Language.INDEX_FILE_INVALID,file.getName());"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());","}else{","previousToken();","returnexpr;","caseSQLTokenizer.TRUE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["node=node.getChildNode(digit);","if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);","if(equals(node.getRemainderValue(),key,i)){","returnnode;","returnnode;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["break;","while(pattern.length()\>mIdx){","if(Character.toUpperCase(pattern.charAt(mIdx++))!=\'%\')returnfalse;","while(value.length()\>sIdx&&!range)returnfalse;","returntrue;","staticintlong2int(longvalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["elsereturngetDisplaySize();","intgetFlag(){","return(identity?1:0)|","(caseSensitive?2:0)|","(nullable?4:0);","voidsetFlag(intflag){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["publicbooleannullPlusNonNullIsNull(){","returntrue;","publicbooleansupportsConvert(){","returntrue;","publicbooleansupportsConvert(intfromType,inttoType){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(idx2\>0){","year=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\'-\',idx1);","month=Integer.parseInt(datetime.substring(idx1,idx2).trim())-1;","idx1=idx2+1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["switch(expr.getDataType()){","caseSQLTokenizer.REAL:","page=find(page,floatToBinarySortOrder(expr.getFloat()),2,nodeList);","break;","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["wasNextEntry=false;","prev=node;","node=null;","}else{","prev=node;","node=node.nextLetter;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwcreateUnspportedDataType();","StringgetString()throwsjava.lang.Exception{","if(isNull())returnnull;","returngetObject().toString();","finalprivateStringgetString(StringlVal,StringrVal)throwsjava.lang.Exception{","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatestaticfinalint[]MISSING_EQUALS={SQLTokenizer.EQUALS};","privatestaticfinalint[]MISSING_WHERE={SQLTokenizer.WHERE};","privatestaticfinalint[]MISSING_WHERE_COMMA={SQLTokenizer.WHERE,SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_ISOLATION={SQLTokenizer.ISOLATION};","privatestaticfinalint[]MISSING_LEVEL={SQLTokenizer.LEVEL};","privatestaticfinalint[]COMMANDS_TRANS_LEVEL={SQLTokenizer.READ,SQLTokenizer.REPEATABLE,SQLTokenizer.SERIALIZABLE};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseConnection.TRANSACTION_READ_COMMITTED:","caseConnection.TRANSACTION_REPEATABLE_READ:","caseConnection.TRANSACTION_SERIALIZABLE:","returntrue;","returnfalse;","publicbooleansupportsDataDefinitionAndDataManipulationTransactions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privateFileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database,name);","booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.INDEX_EXISTS,name);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["return(int)value;","publiclonglongValue(){","return(long)value;","publicStringtoString(){","returnString.valueOf(value);","publicObjectgetImmutableObject(){"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|","|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.MONEY:","return((Number)obj).floatValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","lock.rollback();","returnlock;","caseSQLTokenizer.INSERT:{","if(serializeConnections.size()\>1)returnnull;","if(serializeConnections.size()==1&&serializeConnections.get(con)==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(c==\'\\r\'||c==\'\\n\'){","comment=NOT_COMMENT;","wasWhiteSpace=true;","tokenStart=i+1;","break;","case\'/\':"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.io.PrintWriter;","importjava.sql.*;","classLogger{","booleanisLogging(){","returnDriverManager.getLogWriter()!=null;","voidprintln(Stringmsg){"]": ["|project://smallsql/src/smallsql/database/Logger.java|"],
"["StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);","FileIndexNodenode=newFileIndexNode(unique,(char)store.readShort(),file);","node.fileOffset=offset;","node.load(store);","returnnode;"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["formatNumber(details.year,4,buf);","returnbuf.toString();","case4://germandd.mm.yy","formatNumber(details.day,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseINDEX:","indexes.add(IndexDescription.load(database,this,store));","break;","store.setCurrentOffsetInPage(offsetInPage+size);","firstPage=store.getNextPagePos();","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["classMutableNumericextendsNumberimplementsMutable{","privatestaticfinallongserialVersionUID=-750525164208565056L;","privateint[]value;","privateintscale;","privateintsignum;","MutableNumeric(byte[]complement){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicstaticfinalStringVALUE_NULL_INVALID=\"SS-0312\";","publicstaticfinalStringVALUE_CANT_CONVERT=\"SS-0313\";","publicstaticfinalStringBYTEARR_INVALID_SIZE=\"SS-0340\";","publicstaticfinalStringLOB_DELETED=\"SS-0341\";","publicstaticfinalStringPARAM_CLASS_UNKNOWN=\"SS-0370\";","publicstaticfinalStringPARAM_EMPTY=\"SS-0371\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["packagesmallsql.database;","importjava.util.*;","importjava.sql.SQLException;","importjava.sql.Types;","importsmallsql.database.language.Language;","publicclassSQLTokenizer{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["((page[7]&0xFF));","this.raFile=raFile;","this.filePos=filePos;","privateStorePagecreateStorePage(){","page[0]=(byte)(value\>\>56);","page[1]=(byte)(value\>\>48);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["caseSQLTokenizer.INT:","intiValue=((Number)para1).intValue();","return(iValue\<0)?newInteger(-iValue):para1;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnValue=(MutableNumeric)para1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["addKeyWord(\"CLOB\",CLOB);","addKeyWord(\"NCLOB\",NCLOB);","addKeyWord(\"UNIQUEIDENTIFIER\",UNIQUEIDENTIFIER);","addKeyWord(\"SQL_VARIANT\",JAVA_OBJECT);//aliasforMSSQLServerdatatypeSQL_VARIANT","addKeyWord(\"JAVA_OBJECT\",JAVA_OBJECT);","staticfinalintD=400;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.FROM});","previousToken();","returnselCmd;","finalprivateCommandSelectselect()throwsSQLException{","CommandSelectselCmd=singleSelect();","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.dataType=SQLTokenizer.BOOLEAN;","else","if(newValueinstanceofMoney)","this.dataType=SQLTokenizer.MONEY;","else","throwSmallSQLException.create(Language.PARAM_CLASS_UNKNOWN,newValue.getClass().getName());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseLESSER:returncomp\<0;","caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=String.CASE_INSENSITIVE_ORDER.compare(leftStr,right2.getString());","caseADD:returnUtils.string2boolean(leftStr+rightStr);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.nio.channels.FileLock;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","classUtils{","staticfinalStringMASTER_FILENAME=\"smallsql.master\";","staticfinalStringTABLE_VIEW_EXTENTION=\".sdb\";"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["break;}","throwcreateUnspportedDataType();","StringgetString()throwsjava.lang.Exception{","if(isNull())returnnull;","returngetObject().toString();","finalprivateStringgetString(StringlVal,StringrVal)throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(!file.exists())","throwSmallSQLException.create(Language.TABLE_OR_VIEW_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());","ByteBufferbuffer=ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["privateintrow=0;","privatebooleanisCurrentRow;","Where(RowSourcerowSource,Expressionwhere){","this.rowSource=rowSource;","this.where=where;","RowSourcegetFrom(){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case5://italianodd-mm-yy","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalstaticprivateRandomrandom=newRandom();","finalintgetFunction(){returnSQLTokenizer.RAND;}","booleanisNull()throwsException{","returngetParams().length==1&&param1.isNull();","finaldoublegetDouble()throwsException{","if(getParams().length==0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getDouble();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(intcolumnIndex,intscale)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalprivateStringgetString(StringlVal,StringrVal)throwsjava.lang.Exception{","switch(operation){","caseADD:returnlVal+rVal;","throwcreateUnspportedConversion(SQLTokenizer.VARCHAR);","intgetDataType(){","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicstaticfinalStringRSET_NOT_PRODUCED=\"SS-0130\";","publicstaticfinalStringRSET_READONLY=\"SS-0131\";","publicstaticfinalStringRSET_FWDONLY=\"SS-0132\";","publicstaticfinalStringRSET_CLOSED=\"SS-0133\";","publicstaticfinalStringRSET_NOT_INSERT_ROW=\"SS-0134\";","publicstaticfinalStringRSET_ON_INSERT_ROW=\"SS-0135\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["longreadLong(){","return(((long)(puffer[offset++]&0xFF))\<\<56)","|(((long)(puffer[offset++]&0xFF))\<\<48)","|(((long)(puffer[offset++]&0xFF))\<\<40)","|(((long)(puffer[offset++]&0xFF))\<\<32)","|((puffer[offset++]&0xFF)\<\<24)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["chars[32]=digits[(daten[offset+14]\>\>4)&0x0F];","chars[33]=digits[(daten[offset+14])&0x0F];","chars[34]=digits[(daten[offset+15]\>\>4)&0x0F];","chars[35]=digits[(daten[offset+15])&0x0F];","returnnewString(chars);","staticbooleanstring2boolean(Stringval){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnstore.getString(offsets[colIdx],dataTypes[colIdx]);","@Override","finalbyte[]getBytes(intcolIdx)throwsException{","returnstore.getBytes(offsets[colIdx],dataTypes[colIdx]);","@Override","finalintgetDataType(intcolIdx){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["node.addNode(digit,rowOffset);","returnnull;","returnnode.addRoot(digit);","node=node.addNode(digit);","if(node.isEmpty()){","if(isLast){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["privateMutableNumericgetNumericImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:","MutableNumericnum=left.getNumeric();","num.add(right.getNumeric());","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatevoidnegate(byte[]complement){","intlast=complement.length-1;","for(inti=0;i\<=last;i++){","complement[i]=(byte)((i==last)?-complement[i]:~complement[i]);","while(complement[last]==0){","last--;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["value=newMutableLong(expr.getLong());","break;","caseSQLTokenizer.REAL:","value=newMutableFloat(expr.getFloat());","break;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["rowSource.noRow();","row=(getRowCount()\>0)?getRowCount()+1:0;","returnfalse;","booleanlast()throwsException{","afterLast();","returnprevious();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["Stringline;","try{","line=input.readLine();","}catch(IOExceptionex){","ex.printStackTrace();","JOptionPane.showMessageDialog(null,\"Youneedtostartthecommandlineofthe\\nSmallSQLDatabasewithaconsolewindow:\\n\\njava-jarsmallsql.jar\\n\\n\"+ex,\"FatalError\",JOptionPane.OK_OPTION);"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["intgetDataType(){","returnexpr.getDataType();","intgetDisplaySize(){","returnexpr.getDisplaySize();","intgetScale(){","returnexpr.getScale();"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["publicvoidupdateBytes(StringcolumnName,byte[]x)throwsSQLException{","updateBytes(findColumn(columnName),x);","publicvoidupdateDate(StringcolumnName,Datex)throwsSQLException{","updateDate(findColumn(columnName),x);","publicvoidupdateTime(StringcolumnName,Timex)throwsSQLException{","updateTime(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(!(tabinstanceofTable))continue;","ForeignKeysreferences=((Table)tab).references;","for(inti=0;i\<references.size();i++){","ForeignKeyforeignKey=references.get(i);","IndexDescriptionpk=foreignKey.pk;","IndexDescriptionfk=foreignKey.fk;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.SQL_TIMESTAMP:dataType=SQLTokenizer.TIMESTAMP;break;","caseSQLTokenizer.SQL_TINYINT:dataType=SQLTokenizer.TINYINT;break;","caseSQLTokenizer.SQL_VARBINARY:dataType=SQLTokenizer.VARBINARY;break;","caseSQLTokenizer.SQL_VARCHAR:dataType=SQLTokenizer.VARCHAR;break;","default:thrownewError();","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_EXPRESSION);","try{","value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setScale(value);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["compileLinkExpressionName((ExpressionName)param);","elsecompileLinkExpressionParams(param);","expr.optimize();","privatefinalintcompileAdd_All_Table_Columns(DataSourcefromEntry,TableViewtable,intposition){","for(intk=0;k\<table.columns.size();k++){","ExpressionNameexpr=newExpressionName(table.columns.get(k).getName());"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalintgetInt(intcolIdx)throwsException{","returncurrentDS.getInt(colIdx);","finallonggetLong(intcolIdx)throwsException{","returncurrentDS.getLong(colIdx);","finalfloatgetFloat(intcolIdx)throwsException{","returncurrentDS.getFloat(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["ByteArrayOutputStreambaos=newByteArrayOutputStream();","ObjectOutputStreamoos=newObjectOutputStream(baos);","oos.writeObject(expr.getObject());","writeLongBinary(baos.toByteArray());","break;","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{FLAGVALUE_INVALID,\"01000\"},","{ARGUMENT_INVALID,\"01000\"},","{GENER_KEYS_UNREQUIRED,\"01000\"},","{SEQUENCE_HEX_INVALID,\"01000\"},","{SEQUENCE_HEX_INVALID_STR,\"01000\"},","{SYNTAX_BASE_OFS,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnparam1.isNull();","finalbooleangetBoolean()throwsException{","if(isNull())returnfalse;","returnUtils.string2boolean(getString().trim());","finalintgetInt()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|"],
"["continueweiter;","sIdx++;","range=false;","}else{","if(Character.toUpperCase(value.charAt(sIdx))!=m)returnfalse;","sIdx++;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getBestRowIdentifier(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["ObjectgetObject()throwsException{","if(param1.getBoolean())","returnparam2.getObject();","returnparam3.getObject();","StringgetString()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["dataType=SQLTokenizer.INT;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_L){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionTanextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.TAN;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.tan(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTan.java|"],
"["if(raFile==null){","return;","raFile=null;","try{","currentRaFile.close();","}catch(Throwableex){"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["finalprivateintinterval;","staticfinalintmapIntervalType(intintervalType){","switch(intervalType){","caseSQLTokenizer.MILLISECOND:","returnSQLTokenizer.SQL_TSI_FRAC_SECOND;","caseSQLTokenizer.SECOND:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","returngetString().getBytes();","finalStringgetString()throwsException{","if(isNull())returnnull;","returnparam1.getString().toUpperCase();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|"],
"["if(expr.getDataType()!=SQLTokenizer.NULL){","column.setDataType(expr.getDataType());","if(expr.getPrecision()\>column.getPrecision()){","column.setPrecision(expr.getPrecision());","finalvoidaddRow(ExpressionValue[]row){","rowList.add(row);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["switch(value){","caseSQLTokenizer.PLUS:returnADD;","caseSQLTokenizer.MINUS:returnSUB;","caseSQLTokenizer.ASTERISK:returnMUL;","caseSQLTokenizer.SLACH:returnDIV;","caseSQLTokenizer.PERCENT:returnMOD;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["switch(valueType){","case0:","value=null;","break;","case1:","value=newLong(input.readLong());"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["staticfinalintCURTIME=1202;","staticfinalintDAYNAME=1203;","staticfinalintDAYOFMONTH=1204;","staticfinalintDAYOFWEEK=1205;","staticfinalintDAYOFYEAR=1206;","staticfinalintDAY=1207;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.PLUS:","do{","if(token.value==SQLTokenizer.MINUS)","isMinus=!isMinus;","token=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.util.StringTokenizer;","importsmallsql.database.language.Language;","publicclassSSDriverimplementsDriver{","staticfinalStringURL_PREFIX=\"jdbc:smallsql\";","staticSSDriverdrv;","static{"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["getUpdateValue(1);","publicStatementgetStatement(){","returnst;","publicObjectgetObject(inti,Mapmap)throwsSQLException{","returngetObject(i);","publicRefgetRef(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["factor*=10;","value/=factor;","value-=value%1;//moduloalsoworkwithvalueslargerlong","if(places\>0){","value/=factor;","}else{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["thrownoCurrentRow();","longgetMoney(intoffset,intdataType)throwsException{","thrownoCurrentRow();","MutableNumericgetNumeric(intoffset,intdataType)throwsException{","thrownoCurrentRow();","ObjectgetObject(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["rowSource.beforeFirst();","row=sortedRowCount;","while(next()){","booleanabsolute(intnewRow)throwsException{","if(newRow==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(newRow\>0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["expressions.set(idx,valueExpression);","finalvoidwriteFinish(SSConnectioncon){","finalvoidsave(StoreImplstore)throwsSQLException{","store.writeInt(constraintType);","store.writeInt(columns.size());","for(intc=0;c\<columns.size();c++){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["Entrytab[]=table;","for(inti=0;i\<tab.length;i++)","tab[i]=null;","size=0;","finalbooleancontainsValue(TableStorePagevalue){","Entrytab[]=table;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["return0;","finalfloatgetFloat(intoffset,intdataType)throwsException{","return0;","finalintgetInt(intoffset,intdataType)throwsException{","return0;","finallonggetLong(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["returntrue;","finalbooleanprevious(){","rowPos--;","returnrowPos==1;","finalbooleannext(){","rowPos++;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["this.type=type;","staticStoreImplcreateStore(Tabletable,StorePagestorePage,inttype,longfilePos)throwsSQLException{","try{","StoreImplstore=newStoreImpl(table,storePage,type,filePos);","switch(type){","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintBETWEEN=62;//BETWEEN","staticfinalintLIKE=63;//LIKE","staticfinalintISNULL=64;//ISNULL","staticfinalintISNOTNULL=ISNULL+1;//ISNOTNULL","staticfinalintADD=71;//+","staticfinalintSUB=72;//-"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicbooleansupportsOuterJoins(){","returntrue;","publicbooleansupportsFullOuterJoins(){","returntrue;","publicbooleansupportsLimitedOuterJoins(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseMIN:","caseSUM:","returngetParams()[0].getDataType();","caseCOUNT:","returnSQLTokenizer.INT;","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["publicbooleanisWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();","publicbooleanisDefinitelyWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();","publicStringgetColumnClassName(intcolumn)throwsSQLException{","switch(getColumnType(column)){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["for(inti=0;i\<p1.length;i++){","if(!p2[i].equals(p1[i]))returnfalse;","Stringname1=((Expression)expr).name;","Stringname2=name;","if(name1==name2)returntrue;","if(name1==null)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["prev.nextEntry=node;","elseprev.nextLetter=node;","wasNextEntry=false;","prev=node;","node=null;","}else{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticfinalintBIT_NOT=91;//~","staticfinalintNEGATIVE=101;//-","privatestaticfinalint[]DatatypeRange={","SQLTokenizer.TIMESTAMP,","SQLTokenizer.SMALLDATETIME,","SQLTokenizer.DATE,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["isolationLevel=level;","publicintgetTransactionIsolation(){","returnisolationLevel;","publicSQLWarninggetWarnings(){","returnnull;","publicvoidclearWarnings(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["((long)(page[offset++]&0xFF)\<\<40)|","((long)(page[offset++]&0xFF)\<\<32)|","((long)(page[offset++]&0xFF)\<\<24)|","((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DECIMAL:","return38;","default:return0;","intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(getDataType(),getPrecision(),getScale());","booleanisDefinitelyWritable(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["intoffset=token.offset+token.length;","token=nextToken();","if(token!=null)offset=token.offset;","previousToken();","Expressionexpr=expression(cmdCreate,0);","SQLTokenlast=lastToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnbuf.toString();","case130://Kuwaitiddmonyyyyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","intcount=columnExpressions.size();","columnExpressions.addAll(sources);","compile(con);","columnExpressions.setSize(count);","newRowSources=sources.toArray();"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["rowList.add(row);","finalColumngetColumn(intcolIdx){","returncolumns.get(colIdx);","finalvoidaddColumn(Columncolumn){","columns.add(column);","finalbooleanisScrollable(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.DECIMAL:","count=readByte();","offset+=2;","if(!isNull)offset+=count*4;","break;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","publicintfindColumn(StringcolumnName)throwsSQLException{","Expressionscolumns=columnExpressions;","for(inti=0;i\<columns.size();i++){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["}else","if(valueinstanceofIndexNode){","output.writeByte(3);","((IndexNode)value).saveRef(output);","output.writeShort(nodes.length);","for(inti=0;i\<nodes.length;i++){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["importjava.io.ByteArrayOutputStream;","importsmallsql.database.language.Language;","publicclassExpressionFunctionInsertextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.INSERT;","finalbooleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["close();","booleanok=getFile(database,name).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voidclose()throwsException{","if(raFile!=null){","raFile.close();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","switch(operation){","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intgetScale(){","switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","returnscale;","default:"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["MutableNumericgetNumeric(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["@Override","finalStringgetString(intcolIdx)throwsException{","returnstore.getString(offsets[colIdx],dataTypes[colIdx]);","@Override","finalbyte[]getBytes(intcolIdx)throwsException{","returnstore.getBytes(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["fullReturnCounter=-1;","booleannext()throwsException{","booleanresult;","if(fullReturnCounter\>=0){","do{","if(fullReturnCounter\>=fullRowCount){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["rowIdx=rowList.size()-1;","rowSource.setRowPosition(rowList.get(rowIdx));","while(next()){/*scrollaftertheend*/}","booleanabsolute(introw)throwsException{","if(row==0)","throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returnnewSmallSQLException(e,message,sqlState);","staticStringtranslateMsg(StringmessageCode,Object[]params){","assert(messageCode!=null&&params!=null):\"Fillparameters.msgCode=\"+messageCode+\"params=\"+params;","Stringlocalized=language.getMessage(messageCode);","returnMessageFormat.format(localized,params);","privatestaticStringstripMsg(Throwablethrowable){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["returnlock;","caseSQLTokenizer.INSERT:{","if(serializeConnections.size()\>1)returnnull;","if(serializeConnections.size()==1&&serializeConnections.get(con)==null)returnnull;","TableStorePageInsertlock=newTableStorePageInsert(con,this,LOCK_INSERT);","locksInsert.add(lock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["tokens.add(newSQLToken(quoteBuffer.toString(),(quote==\'\\\'\')?STRING:IDENTIFIER,tokenStart,i+1));","quoteBuffer.setLength(0);","quote=0;","tokenStart=i+1;","wasWhiteSpace=true;","}elsequoteBuffer.append(c);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["breakLoop;","caseSQLTokenizer.COMMA:","continue;","default:","thrownewError();","privateExpressionexpression(Commandcmd,intpreviousOperationLevel)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["MutableNumeric(intsignum,int[]value,intscale){","this.signum=signum;","this.value=value;","this.scale=scale;","MutableNumeric(MutableNumericnumeric){","this.signum=numeric.signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["last--;","complement[last]++;","byte[]toByteArray(){","if(signum==0)returnEMPTY_BYTES;","byte[]complement;","intoffset;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["ObjectInputStreamois=newObjectInputStream(bais);","returnDouble.parseDouble(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2double(readLongBinary());","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(long)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.LONG);","privatelonggetLongImpl()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.SUM);","break;","caseSQLTokenizer.MAX:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MAX);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanisScrollable(){","returntrue;","voidbeforeFirst()throwsException{","rowIdx=-1;","rowSource.beforeFirst();","booleanisBeforeFirst(){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["addKeyWord(\"IIF\",IIF);","staticfinalintSQL_BIGINT=1350;","staticfinalintSQL_BINARY=1351;","staticfinalintSQL_BIT=1352;","staticfinalintSQL_CHAR=1353;","staticfinalintSQL_DATE=1354;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticfinalintCOUNT=1400;","staticfinalintMIN=1401;","staticfinalintMAX=1402;","staticfinalintSUM=1403;","staticfinalintFIRST=1404;","staticfinalintLAST=1405;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returngetLongImpl();","caseSQLTokenizer.REAL:","return(long)getFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnparam2.getMoney();","returnparam3.getMoney();","MutableNumericgetNumeric()throwsException{","if(param1.getBoolean())","returnparam2.getNumeric();","returnparam3.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["else{","Stringvalue=entries[i][1];","messages.put(key,value);","privatefinalvoidsetSqlStates(){","Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<SQL_STATES.length;i++){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnFloat.parseFloat(getString().trim());","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnDouble.parseDouble(getString().trim());","finallonggetMoney()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){","returnfindNodeInsertPos(digit,mid+1,end);","}else{","if(start==mid)returnstart;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnreadInt()!=0;","caseSQLTokenizer.BIGINT:","returnreadLong()!=0;","caseSQLTokenizer.REAL:","returnreadFloat()!=0;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetNumeric(getObject(),dataType);","staticMutableNumericgetNumeric(Objectobj,intdataType){","if(obj==null)returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","returnnewMutableNumeric((obj==Boolean.TRUE)?1:0);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateSQLTokenaddColumn(SQLTokentoken,CommandTablecmdCreate)throwsSQLException{","StringcolName=getIdentifier(token);","Columncol=datatype(false);","col.setName(colName);","token=nextToken();","booleannullableWasSet=false;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{PARAM_IDX_OUT_RANGE,\"Parameterindex{0}outofrange.Thevaluemustbebetween1and{1}.\"},","{COL_DUPLICATE,\"Thereisaduplicatedcolumnname:\'\'{0}\'\'.\"},","{COL_MISSING,\"Column\'\'{0}\'\'notfound.\"},","{COL_VAL_UNMATCH,\"ColumnsandValuescountisnotidentical.\"},","{COL_INVALID_SIZE,\"Invalidcolumnsize{0}forcolumn\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Thecolumnprefix\'\'{0}\'\'doesnotmatchwithatablenameoraliasnameusedinthisquery.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseMAX:","caseMIN:","caseSUM:","returngetParams()[0].getDataType();","caseCOUNT:","returnSQLTokenizer.INT;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["break;","caseSQLTokenizer.SMALLINT:","page=find(page,shortToBinarySortOrder(expr.getInt()),1,nodeList);","break;","caseSQLTokenizer.INT:","page=find(page,intToBinarySortOrder(expr.getInt()),2,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);","default:thrownewError();","@Override","byte[]getBytes(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","MutableNumericobj=getNumeric();","return(obj==null)?0:obj.getScale();","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["importsmallsql.database.language.Language;","classIndexDescriptions{","privateintsize;","privateIndexDescription[]data;","voidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","for(inti=0;i\<size;i++){"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["if(idx\>=0)returnidx;","Expression[]params=expr.getParams();","if(params!=null){","for(intp=0;p\<params.length;p++){","addInternalExpressionFromSelect(params[p]);","return-1;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["publicbooleansupportsANSI92FullSQL(){","returntrue;","publicbooleansupportsIntegrityEnhancementFacility(){","returntrue;","publicbooleansupportsOuterJoins(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["break;","caseSQLTokenizer.SYSNAME:","col.setPrecision(255);","dataType=SQLTokenizer.VARCHAR;","break;","caseSQLTokenizer.COUNTER:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalStringgetString()throwsException{","returngetResult().getString();","finalbyte[]getBytes()throwsException{","returngetResult().getBytes();","finalintgetDataType(){","if(dataType\<0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["returngetScale(getDataType());","finalstaticintgetScale(intdataType){","switch(dataType){","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","return4;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Objectparam0){","Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Object[]params){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["throwSmallSQLException.create(Language.TABLE_MODIFIED,name);","longendTime=0;","while(true){","TableStorePagestorePage=requestLockImpl(con,pageOperation,page);","if(storePage!=null)","returnstorePage;//thenormalcaseshouldbethefasted"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["classSmallSQLExceptionextendsSQLException{","privatestaticfinallongserialVersionUID=-1683756623665114L;","privatebooleanisInit;","privatestaticLanguagelanguage;","privateSmallSQLException(Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["throwSmallSQLException.createFromException(e);","publicdoublegetDouble(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getLong();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["intsize=store.readInt();","switch(type){","store.setCurrentOffsetInPage(offsetInPage+size);","raFile.close();","commandSelect=(CommandSelect)newSQLParser().parse(con,sql);","createColumns(con);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["isCurrentRow=rowSource.next();","}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row++;","returnisCurrentRow;","finalbooleanlast()throwsException{","while(next()){/*scrollaftertheend*/}"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["caseSQLTokenizer.SMALLINT:","returnTypes.SMALLINT;","caseSQLTokenizer.INT:","returnTypes.INTEGER;","caseSQLTokenizer.BIGINT:","returnTypes.BIGINT;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);","sql=store.readString();","inttype;","while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["booleanisAfterLast()throwsException{","if(rowIdx\>=rowList.size())returntrue;","if(isBeforeFirst()&&rowList.size()==0){","next();","previous();","if(rowList.size()==0)returntrue;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.MONTH:","returnSQLTokenizer.SQL_TSI_MONTH;","caseSQLTokenizer.QUARTER:","returnSQLTokenizer.SQL_TSI_QUARTER;","caseSQLTokenizer.YEAR:","returnSQLTokenizer.SQL_TSI_YEAR;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["if((nextEntry==0&&!firstNode)||nextEntry\>octet){","return;","firstNode=false;","if(shift!=0)offset+=pointerSize;","shift-=16;","finallonggetNext(LongTreeListEnumlistEnum){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnSQLTokenizer.SQL_TSI_DAY;","caseSQLTokenizer.WEEK:","returnSQLTokenizer.SQL_TSI_WEEK;","caseSQLTokenizer.MONTH:","returnSQLTokenizer.SQL_TSI_MONTH;","caseSQLTokenizer.QUARTER:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["caseBETWEEN:","float_left=left.getFloat();","return_left\>=right.getFloat()&&right2.getFloat()\>=_left;","default:","returngetFloat()!=0;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnexpr.getBoolean();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbytegetByte(inti)throwsSQLException{","return(byte)getInt(i);","publicshortgetShort(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.SQL_DATE:dataType=SQLTokenizer.DATE;break;","caseSQLTokenizer.SQL_DECIMAL:dataType=SQLTokenizer.DECIMAL;break;","caseSQLTokenizer.SQL_DOUBLE:dataType=SQLTokenizer.DOUBLE;break;","caseSQLTokenizer.SQL_FLOAT:dataType=SQLTokenizer.FLOAT;break;","caseSQLTokenizer.SQL_INTEGER:dataType=SQLTokenizer.INT;break;","caseSQLTokenizer.SQL_LONGVARBINARY:dataType=SQLTokenizer.LONGVARBINARY;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["byte[]readLongBinary()throwsException{","longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","returnstore.readBytes(store.readInt());","voidwriteChars(char[]daten){","intlength=daten.length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.value=(long)(value*10000);","publicstaticMoneycreateFromUnscaledValue(longvalue){","Moneymoney=newMoney();","money.value=value;","returnmoney;","publicstaticMoneycreateFromUnscaledValue(intvalue){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["returnString.valueOf(readShort());","caseSQLTokenizer.INT:","returnString.valueOf(readInt());","caseSQLTokenizer.BIGINT:","returnString.valueOf(readLong());","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["buf.append(\':\');","formatNumber(details.second,2,buf);","returnbuf.toString();","case9:","case109://monddyyyyhh:mi:ss:mmmAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database.language;","publicclassLanguage_itextendsLanguage{","protectedLanguage_it(){","addMessages(ENTRIES);","publicString[][]getEntries(){","returnENTRIES;"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(dataType!=SQLTokenizer.TIME){","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["importjava.util.Calendar;","importjava.net.URL;","classSSPreparedStatementextendsSSStatementimplementsPreparedStatement{","privateArrayListbatches;","privatefinalinttop;//valueofanoptionaltopexpression","SSPreparedStatement(SSConnectioncon,Stringsql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["index.clear();","while(cmdSel.next()){","try{","index.addValues(0,cmdSel.columnExpressions);","}catch(Exceptione){","booleanisInList()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["return8;","caseSQLTokenizer.DATE:","return10;","caseSQLTokenizer.SMALLDATETIME:","return16;","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicstaticfinalStringTABLE_EXISTENT=\"SS-0199\";","publicstaticfinalStringFK_NOT_TABLE=\"SS-0220\";","publicstaticfinalStringPK_ONLYONE=\"SS-0221\";","publicstaticfinalStringKEY_DUPLICATE=\"SS-0222\";","publicstaticfinalStringMONTH_TOOLARGE=\"SS-0251\";","publicstaticfinalStringDAYS_TOOLARGE=\"SS-0252\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnreadLong();","caseSQLTokenizer.SMALLMONEY:","returnreadInt();","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(long)(readNumeric().doubleValue()*10000L);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rootPage=newIndexNode(unique,(char)-1);","Index(IndexNoderootPage){","this.rootPage=rootPage;","IndexScrollStatuscreateScrollStatus(Expressionsexpressions){","returnnewIndexScrollStatus(rootPage,expressions);","finalObjectfindRows(Expressionsexpressions,booleansearchNullValues,ArrayListnodeList)throwsException{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["return(details2.year*4+details2.month/3)-(details1.year*4+details1.month/3);","caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","returndetails2.year-details1.year;","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr1=param1.getString();","Stringstr2=param2.getString();","intlength=str2.length();","if(length==0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returnLong.parseLong(str);","}catch(NumberFormatExceptione){","return(long)Double.parseDouble(str);","floatgetFloat()throwsException{","returngetFloat(getObject(),dataType);","staticfloatgetFloat(Objectobj,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary())!=0;","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()!=0;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["case107://Mondd,yyyy","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\',\');","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["shift-=16;","finalvoidremove(longvalue)throwsSQLException{","if(size==0)return;","intoffset1=0;","intoffset2=0;","intoffset3=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[(idx\<\<1)+1];","finalvoidadd(longvalue1,longvalue2){","intsize2=size\<\<1;","if(size2\>=data.length){"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["staticDateTimevalueOf(java.sql.Timestampdate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIMESTAMP);","staticDateTimevalueOf(Stringdate,intdataType)throwsSQLException{","if(date==null)returnnull;","returnnewDateTime(parse(date),dataType);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["case7://Mondd,yy","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\',\');","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intgetInt()throwsException{","if(param1.getBoolean())","returnparam2.getInt();","returnparam3.getInt();","longgetLong()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["voidwriteString(StringstrDaten)throwsSQLException{","writeString(strDaten,Short.MAX_VALUE,true);","voidwriteString(StringstrDaten,intlengthColumn,booleanvarchar)throwsSQLException{","char[]daten=strDaten.toCharArray();","intlength=daten.length;","if(lengthColumn\<length){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.TINYINT:","returnnewMutableNumeric(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnnewMutableNumeric(readShort());","caseSQLTokenizer.INT:","returnnewMutableNumeric(readInt());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intbyteLen=bytes.length;","intstart=Math.min(Math.max(0,param2.getInt()-1),byteLen);","intlength=param3.getInt();","if(length\<0)","throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));","if(start==0&&byteLen==length)returnbytes;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["((MutableDouble)value).value=Math.max(((MutableDouble)value).value,expr.getDouble());","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(!isNext)returnfalse;","LongoldRowOffset=(Long)index.findRows(distinctColumns,true,null);","longnewRowOffset=rowSource.getRowPosition();","if(oldRowOffset==null){","index.addValues(newRowOffset,distinctColumns);","row++;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["isAggregateFunction=isAggregateFunction||expr.getType()\>=Expression.GROUP_BEGIN;","if(expParams!=null){","for(intk=0;k\<expParams.length;k++){","Expressionparam=expParams[k];","intparamType=param.getType();","isAggregateFunction=isAggregateFunction||paramType\>=Expression.GROUP_BEGIN;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returngetObject().toString();","finalprivateStringgetString(StringlVal,StringrVal)throwsjava.lang.Exception{","switch(operation){","caseADD:returnlVal+rVal;","throwcreateUnspportedConversion(SQLTokenizer.VARCHAR);","intgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintD=400;","staticfinalintT=401;","staticfinalintTS=402;","staticfinalintFN=403;","staticfinalintCALL=404;","staticfinalintOJ=405;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["case120://ODBCkannonish;yyyy-mm-ddhh:mi:ss(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["super();","this.datatype=datatype;","Expression[]params=(style==null)?newExpression[]{value}:newExpression[]{value,style};","setParams(params);","intgetFunction(){","returnSQLTokenizer.CONVERT;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnreadNumeric().toByteArray();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnreadString().getBytes();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","finalvoidinsertRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseLES_EQU:returnleft.getFloat()\<=right.getFloat();","caseUNEQUALS:returnleft.getFloat()!=right.getFloat();","caseBETWEEN:","float_left=left.getFloat();","return_left\>=right.getFloat()&&right2.getFloat()\>=_left;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalprivateExpressionValuegetUpdateValue(intcolumnIndex)throwsSQLException{","if(values==null){","intcount=metaData.getColumnCount();","values=newExpressionValue[count];","while(count--\>0){","values[count]=newExpressionValue();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["intdataType=column.getDataType();","if(isNull){","writeBoolean(true);//true-isnull","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(listEnum.stack\<3)","offset+=pointerSize;","do{","nextOffset2=nextOffset1;","nextOffset1=offset;","nextEntry=getUnsignedShort();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti,Mapmap)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetRef()notyetimplemented.\");","publicBlobgetBlob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetClob()notyetimplemented.\");","publicArraygetArray(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["case121://ODBCkannonish+millis;yyyy-mm-ddhh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);","TableViewpkTable=getTableView(con,foreignKey.pkTable);","if(!(pkTableinstanceofTable)){","throwSmallSQLException.create(Language.FK_NOT_TABLE,foreignKey.pkTable);","voidcreateTable(SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["intlength=remainderValue.length-1;","this.remainderKey=newchar[length];","value=rowOffset;","System.arraycopy(remainderValue,1,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(char[]remainderValue,intoffset){","intlength=remainderValue.length-offset;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["catalog=database.getName();","}else{","database=Database.getDatabase(catalog,con,false);","ArrayListrows=newArrayList();","booleanisTypeTable=types==null;","booleanisTypeView=types==null;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}elseif(quote==c){","if(i+1\<sql.length&&sql[i+1]==quote){","quoteBuffer.append(quote);","i++;","}else{","tokens.add(newSQLToken(quoteBuffer.toString(),(quote==\'\\\'\')?STRING:IDENTIFIER,tokenStart,i+1));"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["rowSource.noRow();","row=0;","booleanisExpressionsFromThisRowSource(Expressionscolumns){","returnrowSource.isExpressionsFromThisRowSource(columns);","privatefinalintgetRowCount(){","returnsortedRowCount+insertedRows.size();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["@Override","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(con.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filedir=newFile(name);","dir.mkdirs();"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["((Money)value).value+=expr.getMoney();","break;","default:throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM,SQLTokenizer.getKeyWord(dataType));","break;","caseMAX:","if(value==null){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl();","caseSQLTokenizer.BIGINT:","return(int)getLongImpl();","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalbooleaninit(SSConnectioncon)throwsException{","if(super.init(con)){","Columnscolumns=table.columns;","offsets=newint[columns.size()];","dataTypes=newint[columns.size()];","for(inti=0;i\<columns.size();i++){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["{ALIAS_UNSUPPORTED,\"Aliasnotsupportedforthistypeofrowsource.\"},","{ISOLATION_UNKNOWN,\"UnknownTransactionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"InvalidflagvalueinmethodgetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"InvalidargumentinmethodsetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnotrequested.\"},","{SEQUENCE_HEX_INVALID,\"Invalidhexsequenceat{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["break;","caseSQLTokenizer.LENGTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLength();","break;","caseSQLTokenizer.LOCATE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:","tokens.add(newSQLToken(c,i,i+1));","wasWhiteSpace=true;","tokenStart=i+1;","}else{","quoteBuffer.append(c);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(left.isExpressionsFromThisRowSource(columns0)&&right.isExpressionsFromThisRowSource(columns1)){","leftEx.add(param0);","rightEx.add(param1);","}else{","if(left.isExpressionsFromThisRowSource(columns1)&&right.isExpressionsFromThisRowSource(columns0)){","leftEx.add(param1);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["return((DateTime)obj).getTimeMillis();","default:returnFloat.parseFloat(obj.toString());","doublegetDouble()throwsException{","returngetDouble(getObject(),dataType);","staticdoublegetDouble(Objectobj,intdataType)throwsException{","if(obj==null)return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Stringstr2=param2.getString();","intlength=str2.length();","if(length==0){","returnstr1;","Stringstr3=param3.getString();","StringBufferbuffer=newStringBuffer();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["if(nValue.getSignum()\<0)nValue.setSignum(1);","returnnValue;","caseSQLTokenizer.MONEY:","MoneymValue=(Money)para1;","if(mValue.value\<0)mValue.value=-mValue.value;","returnmValue;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["returndataType;","intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(dataType,precision,scale);","voidsetScale(intscale){","this.scale=scale;","intgetScale(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["default:","returngetInt()!=0;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["tableViews.remove(newTable.name);","oldTable.close();","newTable.close();","FileoldFile=oldTable.getFile(this);","FilenewFile=newTable.getFile(this);","FiletmpFile=newFile(Utils.createTableViewFileName(this,\"#\"+System.currentTimeMillis()+this.hashCode()));"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returncon;","publicbooleansupportsSavepoints(){","returnfalse;","publicbooleansupportsNamedParameters(){","returntrue;","publicbooleansupportsMultipleOpenResults(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["throwcreateSyntaxError(token,Language.STXADD_FUNC_UNKNOWN);","if(invalidParamCount){","throwcreateSyntaxError(token,Language.STXADD_PARAM_INVALID_COUNT);","expr.setParams(params);","returnexpr;","privateRowSourcetableSource(Commandcmd,DataSourcestables)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["cmd.isolationLevel=Connection.TRANSACTION_REPEATABLE_READ;","returncmd;","caseSQLTokenizer.SERIALIZABLE:","cmd.isolationLevel=Connection.TRANSACTION_SERIALIZABLE;","returncmd;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","if(dataType!=SQLTokenizer.DATE){","if(buf.length()\>0)buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintBIGINT=325;","staticfinalintSMALLMONEY=330;","staticfinalintMONEY=331;","staticfinalintDECIMAL=332;","staticfinalintNUMERIC=333;","staticfinalintREAL=336;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.create(Language.RSET_READONLY);","privateExpressionget(intcolIdx)throwsException{","if(currentRow==null)throwSmallSQLException.create(Language.ROW_NOCURRENT);","returncurrentRow[colIdx];","intgetRowCount(){","returnrowList.size();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["staticfinalStringTABLE_VIEW_EXTENTION=\".sdb\";","privatestaticfinalStringLOB_EXTENTION=\".lob\";","staticfinalStringIDX_EXTENTION=\".idx\";","privatestaticfinalInteger[]integerCache=newInteger[260];","privatestaticfinalShort[]shortCache=newShort[260];","static{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseLES_EQU:returnleft.getInt()\<=right.getInt();","caseUNEQUALS:returnleft.getInt()!=right.getInt();","caseBETWEEN:","int_left=left.getInt();","return_left\>=right.getInt()&&right2.getInt()\>=_left;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2double(readBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalForeignKeyget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(ForeignKeyforeignKey){","if(size\>=data.length){"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["finalclassIndexDescription{","staticfinalintMAGIC_INDEX=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'I\';","staticfinalintINDEX_VERSION=1;","privatefinalStringname;","finalprivateintconstraintType;//PRIMARY,UNIQUE,FOREIGIN,INDEX","finalprivateStringscolumns;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["Objectobj=getObject();","if(obj==null)returnnull;","if(dataType==SQLTokenizer.BIT){","return(obj==Boolean.TRUE)?\"1\":\"0\";","returnobj.toString();","byte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","return(int)((DateTime)obj).getTimeMillis();","default:","Stringstr=obj.toString().trim();","try{","returnInteger.parseInt(str);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","writeDouble(expr.getDouble());","break;","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returntrue;","returnfalse;","staticintgetDisplaySize(intdataType,intprecision,intscale){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicbooleansupportsANSI92IntermediateSQL(){","returntrue;","publicbooleansupportsANSI92FullSQL(){","returntrue;","publicbooleansupportsIntegrityEnhancementFacility(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(param0instanceofExpressionArithmetic&&param1instanceofExpressionArithmetic){","op=createJoinScrollIndex((ExpressionArithmetic)param0,leftEx,rightEx,operation);","if(op==0){","return0;","returncreateJoinScrollIndex((ExpressionArithmetic)param1,leftEx,rightEx,operation);","return0;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*4+details2.month/3)-(details1.year*4+details1.month/3);","caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","returndetails2.year-details1.year;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["buffer.position(0);","raFile.write(buffer);","finalvoidwriteExpression(intcolumnIdx,ExpressionvalueExpression){","intidx=matrix[columnIdx];","if(idx\>=0)//setonlyifthecolumnpartofthisindex","expressions.set(idx,valueExpression);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["this.scale=scale;","MutableNumeric(longcomplement){","if(complement==0){","signum=0;","value=EMPTY_INTS;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{","Stringvalue=entries[i][1];","messages.put(key,value);","privatefinalvoidsetSqlStates(){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["signum=big.signum();","finalvoidmul(intfactor){","if(factor\<0){","factor=-factor;","signum=-signum;","longcarryover=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["formatNumber(details.year%100,2,buf);","returnbuf.toString();","case106://ddmonyyyy","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["abstractclassExpressionFunctionReturnP1StringAndBinaryextendsExpressionFunctionReturnP1{","finalbooleangetBoolean()throwsException{","if(isNull())returnfalse;","returnUtils.string2boolean(getString().trim());","finalintgetInt()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["if(objinstanceofMutableNumeric)","return(MutableNumeric)obj;","returnnewMutableNumeric((BigDecimal)obj);","default:returnnewMutableNumeric(obj.toString());","ObjectgetObject(){","if(isEmpty()){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{INSERT_WO_FROM,\"InsertRownecessitaun\'\'espressioneFROM.\"},","{TABLE_CANT_RENAME,\"Latabella\'\'{0}\'\'nonpuÃ²essererinominata.\"},","{TABLE_CANT_DROP,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'.\"},","{TABLE_CANT_DROP_LOCKED,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'perchÃ©Ã¨inLOCK.\"},","{TABLE_CORRUPT_PAGE,\"Paginadellatabellacorrottaallaposizione:{0}.\"},","{TABLE_MODIFIED,\"Latabella\'\'{0}\'\'Ã¨statamodificata.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.year,4,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintVIEW=237;","staticfinalintINDEX=238;","staticfinalintPROCEDURE=239;","staticfinalintTRANSACTION=240;","staticfinalintISOLATION=241;","staticfinalintLEVEL=242;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{COL_IDX_OUT_RANGE,\"Columnindexoutofrange:{0}.\"},","{COL_AMBIGUOUS,\"Column\'\'{0}\'\'isambiguous.\"},","{GROUP_AGGR_INVALID,\"AggregatefunctionarenotvalidintheGROUPBYclause({0}).\"},","{GROUP_AGGR_NOTPART,\"Expression\'\'{0}\'\'isnotpartofaaggregatefunctionorGROUPBYclause.\"},","{ORDERBY_INTERNAL,\"InternalErrorwithORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DifferentSELECToftheUNIONhavedifferentcolumncount:{0}and{1}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.SMALLINT:","return6;","caseSQLTokenizer.INT:","return10;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["case126://ISO8601;yyyy-mm-ddThh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnUtils.bytes2hex(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME).toString();","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["synchronized(locks){","try{","TableStorePagelock;","TableStorePageprev;","switch(lockType){","caseLOCK_INSERT:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(str.indexOf(\'-\')\>0||str.indexOf(\':\')\>0)","returnDateTime.parse(str);","try{","returnLong.parseLong(str);","}catch(NumberFormatExceptione){","return(long)Double.parseDouble(str);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returngeneratedKeys;","finalpublicintexecuteUpdate(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);","returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["intparamCount=paramList.size();","Expression[]params=paramList.toArray();","booleaninvalidParamCount;","switch(token.value){","caseSQLTokenizer.ABS:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{STXADD_IDENT_EXPECT,\"Identifierexpected.\"},","{STXADD_IDENT_EMPTY,\"EmptyIdentifier.\"},","{STXADD_IDENT_WRONG,\"WrongIdentifier\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"InvalidoperatorminusfordatatypeVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"Unknownfunction.\"},","{STXADD_PARAM_INVALID_COUNT,\"Invalidparametercount.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.create(Language.UNION_DIFFERENT_COLS,newObject[]{newInteger(colCount),newInteger(nextColCount)});","returnresult;","finalbooleanisNull(intcolIdx)throwsException{","returncurrentDS.isNull(colIdx);","finalbooleangetBoolean(intcolIdx)throwsException{","returncurrentDS.getBoolean(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnrowIdx;","voidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["log=con.log;","DatabasegetDatabase(booleanreturnNull)throwsSQLException{","testClosedConnection();","if(!returnNull&&database==null)throwSmallSQLException.create(Language.DB_NOTCONNECTED);","returndatabase;","ObjectgetMonitor(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["cal.setTimeInMillis(datetime);","returndatetime+cal.get(Calendar.ZONE_OFFSET)+cal.get(Calendar.DST_OFFSET);","staticTimestampgetTimestamp(longtime){","returnnewTimestamp(DateTime.addDateTimeOffset(time));","staticTimegetTime(longtime){","returnnewTime(DateTime.addDateTimeOffset(time));"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicbooleansupportsTransactionIsolationLevel(intlevel){","switch(level){","caseConnection.TRANSACTION_NONE:","caseConnection.TRANSACTION_READ_UNCOMMITTED:","caseConnection.TRANSACTION_READ_COMMITTED:","caseConnection.TRANSACTION_REPEATABLE_READ:"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.ON:","if(type==Join.RIGHT_JOIN)","returnnewJoin(Join.LEFT_JOIN,right,left,expression(cmd,0));","returnnewJoin(type,left,right,expression(cmd,0));","default:","if(!right.hasAlias()){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidsetFrom(DataSourcefromEntry,intcolIdx,Columncolumn){","this.fromEntry=fromEntry;","this.colIdx=colIdx;","this.column=column;","DataSourcegetDataSource(){","returnfromEntry;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["Commandparse(SSConnectioncon,StringsqlString)throwsSQLException{","this.con=con;","Commandcmd=parse(sqlString.toCharArray());","SQLTokentoken=nextToken();","if(token!=null){","throwcreateSyntaxError(token,Language.STXADD_ADDITIONAL_TOK);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(start==nodes.length)return-1;","intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){","returnfindNodePos(digit,mid+1,end);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["publicstaticfinalStringCOL_MISSING=\"SS-0401\";","publicstaticfinalStringCOL_VAL_UNMATCH=\"SS-0402\";","publicstaticfinalStringCOL_INVALID_SIZE=\"SS-0403\";","publicstaticfinalStringCOL_WRONG_PREFIX=\"SS-0404\";","publicstaticfinalStringCOL_READONLY=\"SS-0405\";","publicstaticfinalStringCOL_INVALID_NAME=\"SS-0406\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnbuf.toString();","case106://ddmonyyyy","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["booleannext()throwsException{","switch(compare){","caseExpressionArithmetic.EQUALS:","returnnextEquals();","default:","thrownewError(\"Compareoperationnotsupported:\"+compare);"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","publicclassFileIndexNodeextendsIndexNode{","privatefinalFileChannelfile;","privatelongfileOffset;","FileIndexNode(booleanunique,chardigit,FileChannelfile){"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["left.noRow();","right.noRow();","row=0;","voidexecute()throwsException{","left.execute();","right.execute();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["caseTypes.CLOB:","return\"java.sql.Clob\";","default:return\"java.lang.Object\";","finalintgetColumnIdx(intcolumn)throwsSQLException{","if(column\<1||column\>columns.size())","throwSmallSQLException.create(Language.COL_IDX_OUT_RANGE,String.valueOf(column));"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["indexes.close();","raFile.close();","raFile=null;","if(lobs!=null){","lobs.close();","lobs=null;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returncmd;","default:","thrownewError();","privateCommandexecute()throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Execute\");","privateExpressionsexpressionParenthesisList(Commandcmd)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privateMutableNumericgetNumericImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:","MutableNumericnum=left.getNumeric();","num.add(right.getNumeric());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnreadLongString().getBytes();","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnreadLongBinary();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoidnoRow(){","row=0;","store=Store.NOROW;","@Override","finalbooleanisNull(intcolIdx)throwsException{","returnstore.isNull(offsets[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["staticfinalintDESC=217;","staticfinalintVALUES=218;","staticfinalintAS=219;","staticfinalintDEFAULT=220;","staticfinalintIDENTITY=221;","staticfinalintINNER=222;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["parthesisCount++;","continueSwitch;","default:","thrownewError();","privateCommandupdate()throwsSQLException{","CommandUpdatecmd=newCommandUpdate(con.log);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnfromEntry.getObject(colIdx);","StringgetString()throwsException{","returnfromEntry.getString(colIdx);","byte[]getBytes()throwsException{","returnfromEntry.getBytes(colIdx);","intgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["result=listEnum.resultStack[listEnum.stack];","setPreviousOffset(listEnum);","finalprivatevoidsetPreviousOffset(LongTreeListEnumlistEnum){","intpreviousOffset=listEnum.offsetStack[listEnum.stack]-2*(2+(listEnum.stack\>=3?0:pointerSize));","if(listEnum.stack==0){","offset=previousOffset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["this.identity=identity;","intinitAutoIncrement(FileChannelraFile,longfilePos)throwsIOException{","if(identity){","counter=newIdentity(raFile,filePos);","defaultValue=newExpressionValue(counter,SQLTokenizer.BIGINT);","return8;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["{DB_NOT_DIRECTORY,\"Directory\'\'{0}\'\'isnotaSmallSQLdatabase.\"},","{DB_NOTCONNECTED,\"YouarenotconnectedwithaDatabase.\"},","{CONNECTION_CLOSED,\"Connectionisalreadyclosed.\"},","{VIEW_INSERT,\"INSERTisnotsupportedforaview.\"},","{VIEWDROP_NOT_VIEW,\"CannotuseDROPVIEWwith\'\'{0}\'\'becauseitdoesnotisaview.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'can\'\'tbedropped.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicbooleansupportsCorrelatedSubqueries(){","returntrue;","publicbooleansupportsUnion(){","returntrue;","publicbooleansupportsUnionAll(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["log.println(\"Commit\");","testClosedConnection();","synchronized(getMonitor()){","try{","intcount=commitPages.size();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","nextToken(MISSING_PARENTHESIS_R);","col.setPrecision(displaySize);","break;","caseSQLTokenizer.SYSNAME:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this(-1);","StoreNull(longnextPos){","nextPagePos=nextPos;","finalbooleanisNull(intoffset){","returntrue;","finalbooleangetBoolean(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["carryover=((v%quotient)\<\<32);","carryover/=quotient;","if(carryover\>2147483648L||//2147483648L==Integer.MAX_VALUE+1","(carryover==2147483648L&&(value[valueLength-1]%2==1))){","inti=valueLength-1;","booleanisCarryOver=true;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["privateintdataSourceIdx;","privateDataSourcecurrentDS;","privateintrow;","voidaddDataSource(DataSourceds){","dataSources.add(ds);","currentDS=dataSources.get(0);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode,","Objectparam0){","Stringmessage=getErrorString(token,addMessageCode,param0);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,int[]validValues){","StringmsgStr=SmallSQLException.translateMsg("]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidnoRow(){","rowSource.noRow();","row=0;","booleanisExpressionsFromThisRowSource(Expressionscolumns){","returnrowSource.isExpressionsFromThisRowSource(columns);","privatefinalintgetRowCount(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","Expressioncol=columnExpressions.get(i);","if(!col.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)col;","if(table==exp.getTable()){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSensitive=(flag&2)\>0;","nullable=(flag&4)\>0;","Columncopy(){","try{","return(Column)clone();","}catch(Exceptione){returnnull;}"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["finalprivateColumnscolumns=newColumns();","finalprivateIndexDescriptionsindexes=newIndexDescriptions();","finalprivateForeignKeysforeignKeys=newForeignKeys();","finalprivateinttableCommandType;","CommandTable(Loggerlog,Stringcatalog,Stringname,inttableCommandType){","super(log);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["finalprivatevoidexecuteImp()throwsSQLException{","checkStatement();","cmd.verifyParams();","if(getMaxRows()!=0&&(top==-1||top\>getMaxRows()))","cmd.setMaxRows(getMaxRows());","cmd.execute(con,this);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["classColumnExpressionextendsColumn{","finalprivateExpressionexpr;","ColumnExpression(Expressionexpr){","this.expr=expr;","StringgetName(){","returnexpr.getAlias();"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["returnbuf.toString();","case7://Mondd,yy","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\',\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["abstractvoidafterLast()throwsException;","booleanabsolute(introw)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanrelative(introws)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractintgetRow()throwsException;"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["TableViewtableView=con.getDatabase(false).getTableView(con,name);","if(!(tableViewinstanceofTable))","throwSmallSQLException.create(Language.VIEW_INSERT);","table=(Table)tableView;","tableTimestamp=table.getTimestamp();","cmdSel.compile(con);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["finalvoidsetGroup(Expressionsgroup){","this.groupBy=group;","finalvoidsetHaving(Expressionhaving){","this.having=having;","finalvoidsetOrder(Expressionsorder){","this.orderBy=order;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returntrue;","rowIdx=rowList.size();//rowIdxshouldbeneverlargerasrowcount","returnfalse;","booleanlast()throwsException{","afterLast();","returnprevious();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["offset+=16;","break;","default:thrownewError(String.valueOf(dataTypes[i]));","@Override","voiddeleteRow(SSConnectioncon)throwsSQLException{","status=DELETED;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["resize(size\<\<1);","data[size++]=column;","Columnscopy(){","Columnscopy=newColumns();","Column[]cols=copy.data=(Column[])data.clone();","for(inti=0;i\<size;i++){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["floatgetFloat(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getMoney();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["return(obj==Boolean.TRUE)?1:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicintgetMaxBinaryLiteralLength(){","return0;","publicintgetMaxCharLiteralLength(){","return0;","publicintgetMaxColumnNameLength(){","return255;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{FK_NOT_TABLE,\"\'\'{0}\'\'istkeineTabelle.\"},","{PK_ONLYONE,\"EineTabellekannnureinenPrimÃ¤rschlÃ¼sselhaben.\"},","{KEY_DUPLICATE,\"DoppelterSchlÃ¼ssel.\"},","{MONTH_TOOLARGE,\"DerMonatistzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DieTagesindzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"DieStundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["updatePointer.type=SQLTokenizer.UPDATE;","updatePointer.createWriteLock();","if(updatePointer.sharedPageData){","updatePointer.page=newbyte[PAGE_CONTROL_SIZE];","updatePointer.writeFinsh(con);","status=DELETED;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicbooleansupportsConvert(){","returntrue;","publicbooleansupportsConvert(intfromType,inttoType){","returntrue;","publicbooleansupportsTableCorrelationNames(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["formatNumber(details.second,2,buf);","returnbuf.toString();","case9:","case109://monddyyyyhh:mi:ss:mmmAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["size+=2;","writeShort(octet);","correctPointers(0,oldOffset,2,0);","finalprivatevoidremoveNode()throwsSQLException{","intoldOffset=offset;","correctPointers(0,oldOffset,-(2+pointerSize),0);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(newData.offset\<=sizePhysical||filePos==-1){","page=newData.page;//newDataisonlyatempStoreImpl","offset=newData.offset;","if(sizePhysical\<offset)sizePhysical=offset;//occuronlyonupdatesofnotcommittedinserts(filePos==-1","writeFinsh(con);","}else{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(leftIsNull||rightIsNull)returnfalse;","dataType=getDataType(left,right);","switch(dataType){","caseSQLTokenizer.BOOLEAN:","switch(operation){","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["indexes=newIndexDescriptions();","references=newForeignKeys();","inttype;","while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["booleanisAutoIncrement(){","returnfalse;","booleanisCaseSensitive(){","returnfalse;","booleanisNullable(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnSQLTokenizer.INSERT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull()||param4.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["if(objinstanceofMutable){","return((Mutable)obj).getImmutableObject();","returnobj;","abstractStringgetString()throwsException;","abstractbyte[]getBytes()throwsException;","abstractintgetDataType();"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["updateBlob(findColumn(columnName),x);","publicvoidupdateClob(intcolumnIndex,Clobx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicvoidupdateArray(StringcolumnName,Arrayx)throwsSQLException{","updateArray(findColumn(columnName),x);","finalprivateExpressiongetValue(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["exprs.set(i,patchExpression(exprs.get(i)));","finalprivatevoidpatchExpressions(Expressionexpression)throwsSQLException{","Expression[]params=expression.getParams();","if(params==null)return;","for(inti=0;i\<params.length;i++){","expression.setParamAt(patchExpression(params[i]),i);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["data[i].create(con,database,tableView);","voiddrop(Databasedatabase)throwsException{","for(inti=0;i\<size;i++){","data[i].drop(database);","voidclose()throwsException{","for(inti=0;i\<size;i++){"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["this.condition=condition;","this.left=left;","this.right=right;","finalbooleanisScrollable(){","returnfalse;//TODOperformance,ifleftandrightarescrollablethenthisshouldalsoscrollable","voidbeforeFirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["firstPage=store.getNextPagePos();","@Override","voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_TABLE);","buffer.putInt(TABLE_VIEW_VERSION);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(param2!=null){","inttype=param1.getDataType();","switch(type){","caseSQLTokenizer.SMALLDATETIME:","type=SQLTokenizer.TIMESTAMP;","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["return\"true\".equalsIgnoreCase(val)||\"yes\".equalsIgnoreCase(val)||\"t\".equalsIgnoreCase(val);","staticlongdoubleToMoney(doublevalue){","if(value\<0)","return(long)(value*10000-0.5);","return(long)(value*10000+0.5);","staticintindexOf(charvalue,char[]str,intoffset,intlength){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["switch(token.value){","caseSQLTokenizer.VALUES:{","token=nextToken(MISSING_PARENTHESIS_L);","cmd.addValues(expressionParenthesisList(cmd));","returncmd;","caseSQLTokenizer.SELECT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalStoreNOROW=newStoreNoCurrentRow();","abstractbooleanisNull(intoffset)throwsException;","abstractbooleangetBoolean(intoffset,intdataType)throwsException;","abstractbyte[]getBytes(intoffset,intdataType)throwsException;","abstractdoublegetDouble(intoffset,intdataType)throwsException;","abstractfloatgetFloat(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["signum=num.signum;","intgetScale(){","returnscale;","voidsetScale(intnewScale){","if(newScale==scale)return;","intfactor=1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicStringgetSqlState(Stringkey){","StringsqlState=(String)sqlStates.get(key);","assert(sqlState!=null):\"SQLStatecodenotfound:\"+key;","returnsqlState;","publicString[][]getEntries(){","returnMESSAGES;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["afterLast();","returnprevious();","finalbooleanisLast()throwsException{","if(row==0){","returnfalse;","if(row\>getRowCount()){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","return((Number)obj).intValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnode.addRoot();","finalIndexNodeaddRootValue(char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);","returnaddRoot();","finalIndexNodeaddRootValue(longremainderValue,intdigitCount)throwsSQLException{","saveRemainderValue(remainderValue,digitCount);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","MemoryStreaminput=newMemoryStream();","FileIndexNodenode=newFileIndexNode(getUnique(),(char)input.readShort(),file);","node.fileOffset=offset;","node.load(store);","returnnode;"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["publicbooleanisCaseSensitive(intcolumn)throwsSQLException{","returngetColumnExpression(column).isCaseSensitive();","publicbooleanisSearchable(intcolumn)throwsSQLException{","inttype=getColumnExpression(column).getType();","returntype==Expression.NAME||type==Expression.FUNCTION;","publicbooleanisCurrency(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["MemoryStream(){","puffer=newbyte[256];","voidwriteTo(FileChannelfile)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(puffer,0,offset);","file.write(buffer);","voidwriteByte(intvalue){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["right.setFrom(this,idx,newColumnExpression(left));","Expressionexpr=newExpressionArithmetic(left,right,ExpressionArithmetic.EQUALS_NULL);","currentGroup=(currentGroup==null)?","expr:","newExpressionArithmetic(currentGroup,expr,ExpressionArithmetic.AND);","expressions=internalExpressions;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["if(size\>=data.length){","resize(size\<\<1);","data[size++]=value;","finalvoidclear(){","size=0;","privatefinalvoidresize(intnewSize){"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["returnremoveDateTimeOffset(t);","staticDateTimevalueOf(java.util.Datedate){","if(date==null)returnnull;","inttype;","if(dateinstanceofjava.sql.Date)","type=SQLTokenizer.DATE;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","caseSQLTokenizer.DAYOFWEEK:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfWeek();","break;","caseSQLTokenizer.DAYOFYEAR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(wasNextEntry)","prev.nextEntry=node;","elseprev.nextLetter=node;","wasNextEntry=false;","prev=node;","node=null;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["do{","token=nextToken(MISSING_IDENTIFIER);","token=addColumn(token,cmd);","}while(token!=null&&token.value==SQLTokenizer.COMMA);","returncmd;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnreadShort()!=0;","caseSQLTokenizer.INT:","returnreadInt()!=0;","caseSQLTokenizer.BIGINT:","returnreadLong()!=0;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringRSET_NOT_INSERT_ROW=\"SS-0134\";","publicstaticfinalStringRSET_ON_INSERT_ROW=\"SS-0135\";","publicstaticfinalStringROWSOURCE_READONLY=\"SS-0136\";","publicstaticfinalStringSTMT_IS_CLOSED=\"SS-0140\";","publicstaticfinalStringSUBQUERY_COL_COUNT=\"SS-0160\";","publicstaticfinalStringJOIN_DELETE=\"SS-0161\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","Databasedatabase=catalog==null?","con.getDatabase(false):","Database.getDatabase(catalog,con,false);","switch(tableCommandType){","caseSQLTokenizer.CREATE:"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){","returnfindNodePos(digit,mid+1,end);","}else{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getReferenceKeys(SSConnectioncon,StringpkTable,StringfkTable)throwsSQLException{","Listrows=newArrayList();","Stringstables=(pkTable!=null)?getTables(pkTable):getTables(fkTable);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","returnbuf.toString();","case9:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["throwSmallSQLException.createFromException(e);","publiclonggetLong(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getLong();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["{CANT_LOCK_FILE,\"DieDatei\'\'{0}\'\'kannnichtgelocktwerden.EineeinzelneSmallSQLDatenbankkannnurfÃ¼reineneinzigenProzessgeÃ¶ffnetwerden.\"},","{DB_EXISTENT,\"DieDatenbank\'\'{0}\'\'existiertbereits.\"},","{DB_NONEXISTENT,\"DieDatenbank\'\'{0}\'\'existiertnicht.\"},","{DB_NOT_DIRECTORY,\"DasVerzeichnis\'\'{0}\'\'istkeineSmallSQLDatenbank.\"},","{DB_NOTCONNECTED,\"SiesindnichtmiteinerDatenbankverbunden.\"},","{CONNECTION_CLOSED,\"DieVerbindungistbereitsgeschlossen.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["continue;","default:","thrownewError();","privateExpressionexpression(Commandcmd,intpreviousOperationLevel)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","ExpressionleftExpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintPLUS=\'+\';//43","staticfinalintCOMMA=\',\';//44","staticfinalintMINUS=\'-\';//45","staticfinalintPOINT=\'.\';//46","staticfinalintSLACH=\'/\';//47","staticfinalintLESSER=\'\<\';//60"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["node=null;","}else{","prev=node;","node=node.nextLetter;","wasNextEntry=false;","prev.value=value;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case4://germandd.mm.yy","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["exprName=(ExpressionName)expr;","}else{","expr=exprName=newExpressionName(expr.getAlias());","Columncolumn=exprName.getColumn();","if(column==null){","column=newColumn();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:returnDouble.parseDouble(obj.toString());","longgetMoney()throwsException{","returngetMoney(getObject(),dataType);","staticlonggetMoney(Objectobj,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalbooleancontainsValue(TableStorePagevalue){","Entrytab[]=table;","for(inti=0;i\<tab.length;i++)","for(Entrye=tab[i];e!=null;e=e.next)","if(value.equals(e.value))","returntrue;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["intlevel=operation/10;","if(previousOperationLevel\>=level){","previousToken();","returnleftExpr;","switch(token.value){","caseSQLTokenizer.PLUS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}else{","if(value.length==1&&(value[0]\>0)){","buf.append(Integer.toString(value[0]));","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intlength=str2.length();","if(length==0){","returnstr1;","Stringstr3=param3.getString();","StringBufferbuffer=newStringBuffer();","intidx1=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["staticfinalintMAGIC_TABLE=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'T\';","staticfinalintMAGIC_VIEW=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'V\';","staticfinalintTABLE_VIEW_VERSION=2;","staticfinalintTABLE_VIEW_OLD_VERSION=1;","finalStringname;","finalColumnscolumns;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["addMessages(ENTRIES);","publicString[][]getEntries(){","returnENTRIES;","privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"Operazionenonsupportata:{0}.\"},","{CANT_LOCK_FILE,\"Impossibilebloccareilfile\'\'{0}\'\'.UndatabaseSmallSQLDatabasepuÃ²essereapertodaununicoprocesso.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["addKeyWord(\"FALSE\",FALSE);","addKeyWord(\"BETWEEN\",BETWEEN);","addKeyWord(\"LIKE\",LIKE);","addKeyWord(\"IN\",IN);","staticfinalintABS=1000;//firstnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","staticfinalintACOS=1001;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return0;","returncreateJoinScrollIndex((ExpressionArithmetic)param1,leftEx,rightEx,operation);","return0;","if(operation==0){","operation=op;","if(operation!=op){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["finalprivateExpressionscolumnExpressions;","finalprivateCommandSelectcommandSelect;","ViewResult(Viewview){","this.view=view;","this.columnExpressions=view.commandSelect.columnExpressions;","this.commandSelect=view.commandSelect;"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["size++;","finalvoidclear(){","size=0;","privatefinalvoidresize(intnewSize){","long[]dataNew=newlong[newSize\<\<1];","System.arraycopy(data,0,dataNew,0,size\<\<1);"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER,params);","SQLExceptioncreateUnspportedConversion(intdataType){","inttype=left==null?right.getDataType():getDataType(left,right);","Object[]params=newObject[]{","SQLTokenizer.getKeyWord(dataType),"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["expr=newExpressionFunctionAscii();","break;","caseSQLTokenizer.BITLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionBitLen();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{UNSUPPORTED_TYPE_SUM,\"TipononsupportatoperlafunzioneSUM:\'\'{0}\'\'.\"},","{UNSUPPORTED_TYPE_MAX,\"TipononsupportatoperlafunzioneMAX:\'\'{0}\'\'.\"},","{UNSUPPORTED_CONVERSION,\"NonÃ¨possibleconvertire\'\'{0}\'\'[{1}]in\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneINSERT.\"},","{SUBSTR_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringatroppolungaperlacolonna.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["rowSource.setRowPosition(rowPosition);","returntrue;","}else{","rowSource.noRow();","row=0;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetIndexInfo(Stringcatalog,Stringschema,Stringtable,booleanunique,booleanapproximate)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintsize(){","returnsize;","finalDataSourceget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();","caseSQLTokenizer.INT:","returnreadInt();","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["chars[5]=digits[(daten[offset+1])&0x0F];","chars[6]=digits[(daten[offset+0]\>\>4)&0x0F];","chars[7]=digits[(daten[offset+0])&0x0F];","chars[9]=digits[(daten[offset+5]\>\>4)&0x0F];","chars[10]=digits[(daten[offset+5])&0x0F];","chars[11]=digits[(daten[offset+4]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["privateCommandSelectsingleSelect()throwsSQLException{","CommandSelectselCmd=newCommandSelect(con.log);","SQLTokentoken;","Switch:while(true){","token=nextToken(MISSING_EXPRESSION);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanisScrollable(){","returnfalse;","finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();","row=0;","finalbooleanfirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["finalStringpkTable;","finalStringfkTable;","finalIndexDescriptionpk;","finalIndexDescriptionfk;","finalintupdateRule=DatabaseMetaData.importedKeyNoAction;","finalintdeleteRule=DatabaseMetaData.importedKeyNoAction;"]": ["|project://smallsql/src/smallsql/database/ForeignKey.java|"],
"["longgetLong(intoffset,intdataType)throwsException{","thrownoCurrentRow();","longgetMoney(intoffset,intdataType)throwsException{","thrownoCurrentRow();","MutableNumericgetNumeric(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["break;","returnexpr;","finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){","case0:","left=param;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["dataType=SQLTokenizer.VARBINARY;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintCURRENTDATE=1201;","staticfinalintCURTIME=1202;","staticfinalintDAYNAME=1203;","staticfinalintDAYOFMONTH=1204;","staticfinalintDAYOFWEEK=1205;","staticfinalintDAYOFYEAR=1206;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["booleannext()throwsException{","if(maxRows\>=0&&from.getRow()\>=maxRows){","from.afterLast();","returnfalse;","returnfrom.next();","finalbooleanlast()throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["Expressionresult=expression(cmd,0);","expr.addCase(condition,result);","break;","caseSQLTokenizer.ELSE:","expr.setElseResult(expression(cmd,0));","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewExpressionFunctionConvert(col,expr,null);","caseSQLTokenizer.TIMESTAMPDIFF:","token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);","nextToken(MISSING_COMMA);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["generatedKeysType=2;","StoreImplstore=table.getStoreInsert(con);","for(intc=0;c\<matrix.length;c++){","Columncolumn=table.columns.get(c);","intidx=matrix[c];","ExpressionvalueExpress;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["newStore.writeExpression(src,tableColumns.get(i));","}else{","copyValueInto(i,newStore);","((StoreImpl)this.store).updateFinsh(con,newStore);","@Override","finalvoidinsertRow(Expression[]updateValues)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["privatestaticfinalint[]ESCAPE_MISSING_CLOSE={SQLTokenizer.ESCAPE_R};","privatestaticfinalint[]MISSING_EXPRESSION={SQLTokenizer.VALUE};","privatestaticfinalint[]MISSING_IDENTIFIER={SQLTokenizer.IDENTIFIER};","privatestaticfinalint[]MISSING_BY={SQLTokenizer.BY};","privatestaticfinalint[]MISSING_PARENTHESIS_L={SQLTokenizer.PARENTHESIS_L};","privatestaticfinalint[]MISSING_PARENTHESIS_R={SQLTokenizer.PARENTHESIS_R};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["elsereturn(int)value;","staticbyte[]int2bytes(intvalue){","byte[]result=newbyte[4];","result[0]=(byte)(value\>\>24);","result[1]=(byte)(value\>\>16);","result[2]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["columns.add(column);","expressions.add(sqlParser.parseExpression(column));","IndexDescriptionindexDesc=newIndexDescription(store.readString(),tableView.name,constraintType,expressions,columns);","indexDesc.init(database,tableView);","indexDesc.load(database);","returnindexDesc;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["page=add(page,rowOffset,floatToBinarySortOrder(expr.getFloat()),isLastValues,2);","break;","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","page=add(page,rowOffset,doubleToBinarySortOrder(expr.getDouble()),isLastValues,4);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["default:returnDouble.parseDouble(obj.toString());","longgetMoney()throwsException{","returngetMoney(getObject(),dataType);","staticlonggetMoney(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.INDEX:","returncreateIndex(false);","caseSQLTokenizer.PROCEDURE:","returncreateProcedure();","caseSQLTokenizer.UNIQUE:","do{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam1.isNull();","finalbooleangetBoolean()throwsException{","returngetInt()!=0;","finallonggetLong()throwsException{","returngetInt();","finalfloatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["this.right=right;","this.operation=operation;","super.setParams(newExpression[]{left,right});","ExpressionArithmetic(Expressionleft,Expressionright,Expressionright2,intoperation){","super(FUNCTION);","this.left=left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicStatementcreateStatement(intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","}else{","for(inti=0;i\<count;i++)matrix[i]=-1;","for(intc=0;c\<columnExpressions.size();c++){","ExpressionsqlCol=columnExpressions.get(c);","StringsqlColName=sqlCol.getName();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["super(type);","switch(type){","caseGROUP_BY:","caseSUM:","caseFIRST:","caseLAST:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.MONEY:","longValue=param1.getMoney();","if(longValue\<0)","return-1;","if(longValue\>0)","return1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["abstractvoidnoRow();","abstractbooleanrowInserted();","abstractbooleanrowDeleted();","booleanhasAlias(){","returntrue;","voidsetAlias(Stringname)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["returngetObject(findParameter(parameterName),map);","publicRefgetRef(StringparameterName)throwsSQLException{","returngetRef(findParameter(parameterName));","publicBlobgetBlob(StringparameterName)throwsSQLException{","returngetBlob(findParameter(parameterName));","publicClobgetClob(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["CommandInsert(Loggerlog,Stringname){","super(log);","this.name=name;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{","if(columnExpressions.indexOf(column)\>=0){","throwSmallSQLException.create(Language.COL_DUPLICATE,column);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["store.writeInt(0);//nomoreadditionalinformations","store.writeFinsh(null);//Theconnectionparameterisnullbecausethetableheaderiswrittenimmediately.","firstPage=store.getNextPagePos();","@Override","voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(token==null)throwcreateSyntaxError(token,validValues);","if(validValues==MISSING_EXPRESSION){","returntoken;//anexpressioncanbecontainedineverytoken.","if(validValues==MISSING_IDENTIFIER){","switch(token.value){","caseSQLTokenizer.PARENTHESIS_L:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case0:","param1=param;","break;","case1:","param2=param;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["SQLTokentoken=nextToken();","if(token.value!=SQLTokenizer.PARENTHESIS_L)throwcreateSyntaxError(token,MISSING_PARENTHESIS_L);","Loop:","while(true){","intoffset=token.offset+token.length;","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["createIndex(rightEx);","privatevoidcreateIndex(ExpressionsrightEx)throwsException{","index=newIndex(false);","right.beforeFirst();","while(right.next()){","index.addValues(right.getRowPosition(),rightEx);"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["page[3]=(byte)(value\>\>32);","page[4]=(byte)(value\>\>24);","page[5]=(byte)(value\>\>16);","page[6]=(byte)(value\>\>8);","page[7]=(byte)(value);","returnnewStorePage(page,8,raFile,filePos);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["caseJoin.FULL_JOIN:","if(isOuterValid){","isOuterValid=false;","right.nullRow();","returntrue;","fullRowCount=Math.max(fullRowCount,fullRightRowCounter);"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.year+=param1.getLong();","returnDateTime.calcMillis(details2);","default:thrownewError();","floatgetFloat()throwsException{","returngetLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetClob()notyetimplemented.\");","publicArraygetArray(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetDate()notyetimplemented.\");","publicTimegetTime(inti,Calendarcal)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetTimestamp()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType,StringtypeName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["return0;","publicintgetMaxColumnsInOrderBy(){","return0;","publicintgetMaxColumnsInSelect(){","return0;","publicintgetMaxColumnsInTable(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["@Override","finalvoiddeleteRow()throwsSQLException{","store.deleteRow(con);","store=newStoreNull(store.getNextPagePos());","@Override","finalvoidupdateRow(Expression[]updateValues)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["privatebyte[]puffer;","privateintoffset;","MemoryStream(){","puffer=newbyte[256];","voidwriteTo(FileChannelfile)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(puffer,0,offset);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["break;","caseSQLTokenizer.SMALLINT:","page=add(page,rowOffset,shortToBinarySortOrder(expr.getInt()),isLastValues,1);","break;","caseSQLTokenizer.INT:","page=add(page,rowOffset,intToBinarySortOrder(expr.getInt()),isLastValues,2);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["while(true){","intnextEntry=getUnsignedShort();","if(nextEntry==octet){","if(shift==0)return;//valueexistalready,thiscaseshouldnotoccur","offset=getPointer();","firstNode=true;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalintminute;","finalintsecond;","finalintmillis;","intidx1=0;","intidx2=datetime.indexOf(\'-\');","if(idx2\>0){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["continueSwitch;","default:","thrownewError();","privateCommandupdate()throwsSQLException{","CommandUpdatecmd=newCommandUpdate(con.log);","DataSourcestables=newDataSources();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionTan();","break;","caseSQLTokenizer.TRUNCATE:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionTruncate();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleanwasNull(){","returnwasNull;","publicStringgetString(inti)throwsSQLException{","try{","Stringobj=getValue(i).getString();","wasNull=obj==null;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnfromSource;","caseSQLTokenizer.CROSS:","nextToken(MISSING_JOIN);","caseSQLTokenizer.COMMA:","fromSource=newJoin(Join.CROSS_JOIN,fromSource,rowSource(cmd,tables,0),null);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["time-=millis;","break;","this.time=time;","this.dataType=dataType;","staticlongcalcMillis(Detailsdetails){","returncalcMillis(details.year,details.month,details.day,details.hour,details.minute,details.second,details.millis);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["case5:","case8:","case10:","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(month==1){","if(day==30){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["m=Character.toUpperCase(pattern.charAt(mIdx++));","if(Character.toUpperCase(value.charAt(sIdx))!=m){","if(m==\'%\'||m==\'_\'){","mIdx--;","break;","mIdx=lastmIdx;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["return\"procedure\";","publicStringgetCatalogTerm(){","return\"database\";","publicbooleanisCatalogAtStart(){","returntrue;","publicStringgetCatalogSeparator(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","bytes=newbyte[4];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicvoidsetLong(StringparameterName,longx)throwsSQLException{","setLong(findParameter(parameterName),x);","publicvoidsetFloat(StringparameterName,floatx)throwsSQLException{","setFloat(findParameter(parameterName),x);","publicvoidsetDouble(StringparameterName,doublex)throwsSQLException{","setDouble(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returntrue;","publicbooleansupportsLikeEscapeClause(){","returntrue;","publicbooleansupportsMultipleResultSets(){","returntrue;","publicbooleansupportsMultipleTransactions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["importjava.util.List;","importjava.util.Map;","importjava.util.Properties;","importsmallsql.database.language.Language;","publicclassSSConnectionimplementsConnection{","privatefinalbooleanreadonly;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]+1)==0;","if(uebertrag){","resizeValue(1);","privatevoidresizeValue(inthighBits){","intval[]=newint[value.length+1];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.READ:","token=nextToken(MISSING_COMM_UNCOMM);","switch(token.value){","caseSQLTokenizer.COMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_COMMITTED;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(null!=(token=nextToken())){","switch(token.value){","caseSQLTokenizer.WHERE:","where(cmd);","break;","caseSQLTokenizer.GROUP:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticStringcreateName(StringdefaultName,StringtableName){","if(defaultName==null){","defaultName=tableName+\"_\"+Long.toHexString(System.currentTimeMillis())+Integer.toHexString(newObject().hashCode());","returndefaultName;","finalStringgetName(){","returnname;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["publicclassSQLTokenizer{","privatestaticfinalintNOT_COMMENT=0;","privatestaticfinalintLINE_COMMENT=1;","privatestaticfinalintMULTI_COMMENT=2;","publicstaticListparseSQL(char[]sql)throwsSQLException{","SearchNodenode=searchTree;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatelongfirstOwnInsert;","privatelongmaxFileOffset;","TableResult(Tabletable){","this.table=table;","@Override","finalbooleaninit(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["publicInputStreamgetAsciiStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"getUnicodeStream\");","publicInputStreamgetBinaryStream(intcolumnIndex)throwsSQLException{","returnnewByteArrayInputStream(getBytes(columnIndex));","publicStringgetString(StringcolumnName)throwsSQLException{","returngetString(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["executeImp();","returncmd.getQueryResult();","publicintexecuteUpdate()throwsSQLException{","executeImp();","returncmd.getUpdateCount();","finalprivatevoidexecuteImp()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["importjava.io.File;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.DriverManager;","importjava.sql.SQLException;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["expr=newExpressionFunctionMinute();","break;","caseSQLTokenizer.MONTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMonth();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case131://Kuwaitidd/mm/yyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["expr=newExpressionFunctionDayOfWeek();","break;","caseSQLTokenizer.DAYOFYEAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfYear();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseUNEQUALS:returnleft.getMoney()!=right.getMoney();","caseBETWEEN:","long_left=left.getMoney();","return_left\>=right.getMoney()&&right2.getMoney()\>=_left;","default:","returngetMoney()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatefinalFileChannelraFile;","FileIndex(booleanunique,FileChannelraFile){","this(newFileIndexNode(unique,(char)-1,raFile),raFile);","FileIndex(FileIndexNoderoot,FileChannelraFile){","super(root);","this.raFile=raFile;"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["}else{","switch(expr.getDataType()){","caseSQLTokenizer.REAL:","page=add(page,rowOffset,floatToBinarySortOrder(expr.getFloat()),isLastValues,2);","break;","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["store.readPageHeader();","store=store.loadUpdatedStore();","break;","default:thrownewError();","store.offset=PAGE_CONTROL_SIZE;","returnstore;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["@Override","byte[]getBytes(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalpublicvoidsetEscapeProcessing(booleanenable)throwsSQLException{","checkStatement();","finalpublicintgetQueryTimeout()throwsSQLException{","checkStatement();","returnqueryTimeout;","finalpublicvoidsetQueryTimeout(intseconds)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(month\>=12){","throwSmallSQLException.create(Language.MONTH_TOOLARGE,datetime);","if(day\>=32){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==31){","switch(month){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intcomp=left.getNumeric().compareTo(right.getNumeric());","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returncomp==0;","caseGREATER:returncomp\>0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicbooleanallProceduresAreCallable(){","returntrue;","publicbooleanallTablesAreSelectable(){","returntrue;","publicStringgetURL()throwsSQLException{","Databasedatabase=con.getDatabase(true);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}catch(Throwableex){","con.rollbackFile(currentRaFile);","if(!file.delete()){","file.deleteOnExit();","throwSmallSQLException.create(Language.FILE_CANT_DELETE,file.getPath());","Stringname=file.getName();"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["complement=newbyte[(value.length-v)*4];","offset=0;","intlast=value.length-1;","for(;v\<=last;v++){","intval=(signum\>0)?value[v]:(v==last)?-value[v]:~value[v];","complement[offset++]=(byte)(val\>\>24);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["addKeyWord(\"SS\",SQL_TSI_SECOND);","addKeyWord(\"SQL_TSI_SECOND\",SQL_TSI_SECOND);","addKeyWord(\"MI\",SQL_TSI_MINUTE);","addKeyWord(\"N\",SQL_TSI_MINUTE);","addKeyWord(\"SQL_TSI_MINUTE\",SQL_TSI_MINUTE);","addKeyWord(\"HH\",SQL_TSI_HOUR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.VARBINARY:","token=nextToken();","intdisplaySize;","if(token==null||token.value!=SQLTokenizer.PARENTHESIS_L){","displaySize=30;","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam1.getBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.TINYINT:","returnUtils.getInteger(param1.getInt()&0xFF);","caseSQLTokenizer.SMALLINT:","returnUtils.getInteger((short)param1.getInt());","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["return\".\";","publicbooleansupportsSchemasInDataManipulation(){","returnfalse;","publicbooleansupportsSchemasInProcedureCalls(){","returnfalse;","publicbooleansupportsSchemasInTableDefinitions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{UNSUPPORTED_TYPE_MAX,\"Unsupporteddatatype\'\'{0}\'\'forMAXfunction.\"},","{UNSUPPORTED_CONVERSION,\"Can\'\'tconvert\'\'{0}\'\'[{1}]to\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionINSERT.\"},","{SUBSTR_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringvaluetoolargeforcolumn.\"},","{VALUE_BIN_TOOLARGE,\"Binaryvaluewithlength{0}tolargeforcolumnwithsize{1}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampAdd(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);","returnexpr;","ExpressionsparamList=expressionParenthesisList(cmd);","intparamCount=paramList.size();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","doubledValue=((Number)obj).doubleValue();","if(Double.isInfinite(dValue)||Double.isNaN(dValue))","returnnull;","returnnewMutableNumeric(dValue);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatechar[]remainderKey;","privateObjectvalue;","protectedIndexNode(booleanunique,chardigit){","this.unique=unique;","this.digit=digit;","protectedIndexNodecreateIndexNode(booleanunique,chardigit){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","classMemoryStream{","privatebyte[]puffer;","privateintoffset;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.TIME:","return8;","caseSQLTokenizer.DATE:","return10;","caseSQLTokenizer.SMALLDATETIME:","return16;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["this.having=having;","finalvoidsetOrder(Expressionsorder){","this.orderBy=order;","finalvoidsetMaxRows(intmax){","maxRows=max;","finalintgetMaxRows(){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["FileChannelraFile;//filehandleofthetable","privateLobslobs;//filehandleoflobdataforthistable","longfirstPage;//offsetofthefirstpage","finalprivateHashMaplocks=newHashMap();","privateSSConnectiontabLockConnection;//ifsetthenitistheConnectionwithaLOCK_TAB","privateinttabLockCount;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["packagesmallsql.database;","importsmallsql.database.language.Language;","classExpressionInSelectextendsExpressionArithmetic{","finalprivateCommandSelectcmdSel;","finalprivateIndexindex=newIndex(true);","finalprivateSSConnectioncon;"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["super.optimize();","Expression[]params=getParams();","if(params.length==1){","return;","setParamAt(convertExpressionIfNeeded(params[0],params[1]),0);","for(intp=1;p\<params.length;p++){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["rowSource.setRowPosition(lastRowOffset);","}else{","rowSource.beforeFirst();","if(rowSource.next()){","row++;","lastRowOffset=rowSource.getRowPosition();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["chars[11]=digits[(daten[offset+4]\>\>4)&0x0F];","chars[12]=digits[(daten[offset+4])&0x0F];","chars[14]=digits[(daten[offset+7]\>\>4)&0x0F];","chars[15]=digits[(daten[offset+7])&0x0F];","chars[16]=digits[(daten[offset+6]\>\>4)&0x0F];","chars[17]=digits[(daten[offset+6])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["importsmallsql.database.language.Language;","finalclassDatabase{","staticprivateHashMapdatabases=newHashMap();","privatefinalTableViewMaptableViews=newTableViewMap();","privatefinalStringname;","privatefinalbooleanreadonly;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["filePosUpdated=readLong();","finalprivateStoreImplloadUpdatedStore()throwsException{","if(status!=UPDATE_POINTER)returnthis;","StoreImplstoreTemp=table.getStore(((TableStorePage)storePage).con,filePosUpdated,type);","storeTemp.updatePointer=this;","returnstoreTemp;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["abstractintgetRow()throwsException;","abstractlonggetRowPosition();","abstractvoidsetRowPosition(longrowPosition)throwsException;","abstractvoidnullRow();","abstractvoidnoRow();","abstractbooleanrowInserted();"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["switch(idx){","case0:","left=param;","break;","case1:","if(right!=null){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{COL_MISSING,\"Column\'\'{0}\'\'notfound.\"},","{COL_VAL_UNMATCH,\"ColumnsandValuescountisnotidentical.\"},","{COL_INVALID_SIZE,\"Invalidcolumnsize{0}forcolumn\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Thecolumnprefix\'\'{0}\'\'doesnotmatchwithatablenameoraliasnameusedinthisquery.\"},","{COL_READONLY,\"Column{0}isreadonly.\"},","{COL_INVALID_NAME,\"Invalidcolumnname\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["order.add(newExpressionName(\"TABLE_NAME\"));","cmdSelect.setOrder(order);","returnnewSSResultSet(st,cmdSelect);","publicResultSetgetSchemas()throwsSQLException{","String[]colNames={\"TABLE_SCHEM\"};","Object[][]data=newObject[0][];"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privatevoidfrom(CommandSelectcmd)throwsSQLException{","DataSourcestables=newDataSources();","cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken;","while(null!=(token=nextToken())){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{TABLE_CANT_DROP_LOCKED,\"01000\"},","{TABLE_CORRUPT_PAGE,\"01000\"},","{TABLE_MODIFIED,\"01000\"},","{TABLE_DEADLOCK,\"01000\"},","{TABLE_OR_VIEW_MISSING,\"01000\"},","{TABLE_FILE_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["column=newColumn();","exprName.setFrom(this,idx,column);","switch(exprName.getType()){","caseExpression.MAX:","caseExpression.MIN:","caseExpression.FIRST:"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["break;","caseSQLTokenizer.TINYINT:","page=add(page,rowOffset,expr.getInt(),isLastValues,1);","break;","caseSQLTokenizer.SMALLINT:","page=add(page,rowOffset,shortToBinarySortOrder(expr.getInt()),isLastValues,1);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["addKeyWord(\"ASCII\",ASCII);","addKeyWord(\"BIT_LENGTH\",BITLEN);","addKeyWord(\"CHAR_LENGTH\",CHARLEN);","addKeyWord(\"CHARACTER_LENGTH\",CHARACTLEN);","keywords.put(newInteger(_CHAR),\"CHAR\");//neededformetadatafunctions","addKeyWord(\"CONCAT\",CONCAT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","default:thrownewError(\"\"+type);","offset=0;","writeInt(PAGE_MAGIC);//forrepair","writeInt(status);","writeInt(sizeUsed);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["setObject(findParameter(parameterName),x,sqlType);","publicvoidsetObject(StringparameterName,Objectx)throwsSQLException{","setObject(findParameter(parameterName),x);","publicvoidsetCharacterStream(StringparameterName,Readerx,intlength)throwsSQLException{","setCharacterStream(findParameter(parameterName),x,length);","publicvoidsetDate(StringparameterName,Datex,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){","TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){","expr.setFrom(fromEntry,colIdx,table);","break;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["{TABLE_MODIFIED,\"01000\"},","{TABLE_DEADLOCK,\"01000\"},","{TABLE_OR_VIEW_MISSING,\"01000\"},","{TABLE_FILE_INVALID,\"01000\"},","{TABLE_OR_VIEW_FILE_INVALID,\"01000\"},","{TABLE_EXISTENT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["super(log);","this.type=type;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsjava.sql.SQLException{","switch(type){","caseSQLTokenizer.LEVEL:","con.isolationLevel=isolationLevel;"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|","|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["intcount=columnExpressions.size();","columnExpressions.addAll(sources);","compile(con);","columnExpressions.setSize(count);","newRowSources=sources.toArray();","updateCount=0;"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["add(value);","LongTreeList(StoreImplinput){","intreadSize=input.readInt();","data=input.readBytes(readSize);","finalvoidsave(StoreImploutput){","output.writeInt(size);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicvoidupdateNull(StringcolumnName)throwsSQLException{","updateNull(findColumn(columnName));","publicvoidupdateBoolean(StringcolumnName,booleanx)throwsSQLException{","updateBoolean(findColumn(columnName),x);","publicvoidupdateByte(StringcolumnName,bytex)throwsSQLException{","updateByte(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returntrim;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:","if(other.getPrecision()\>expr.getPrecision()){","returnnewExpressionFunctionConvert(newColumnExpression(other),expr,null);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatMillis(details.millis,buf);","returnbuf.toString();","case26:","case126://ISO8601;yyyy-mm-ddThh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(name.startsWith(\"file:\"))","name=name.substring(5);","this.name=name;","@Override","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(con.isReadOnly()){"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["CommandCreateDatabase(Loggerlog,Stringname){","super(log);","this.type=SQLTokenizer.DATABASE;","if(name.startsWith(\"file:\"))","name=name.substring(5);","this.name=name;"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["privateExpressionright2;","privateExpression[]inList;","finalprivateintoperation;","ExpressionArithmetic(Expressionleft,intoperation){","super(FUNCTION);","this.left=left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnExpressionValue.getNumeric(getObject(),getDataType());","StringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;","switch(datatype.getDataType()){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicvoidclearWarnings(){","publicStringgetCursorName(){","returnnull;","publicResultSetMetaDatagetMetaData(){","returnmetaData;","publicObjectgetObject(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["for(inti=0;i\<dirs.length;i++){","if(dirs[i].isDirectory()){","if(newFile(dirs[i],Utils.MASTER_FILENAME).exists()){","Object[]catalog=newObject[1];","catalog[0]=dirs[i].getPath();","catalogs.add(catalog);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(idx\>=0)returnidx;","internalExpressions.add(expr);","returninternalExpressions.size()-1;","finalprivateintaddInternalExpressionFromSelect(Expressionexpr)throwsSQLException{","inttype=expr.getType();","if(type==Expression.NAME){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["comment=MULTI_COMMENT;","break;","default:","tokens.add(newSQLToken(c,i,i+1));","wasWhiteSpace=true;","tokenStart=i+1;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"NO\",FALSE);//aliasforFALSE","addKeyWord(\"FALSE\",FALSE);","addKeyWord(\"BETWEEN\",BETWEEN);","addKeyWord(\"LIKE\",LIKE);","addKeyWord(\"IN\",IN);","staticfinalintABS=1000;//firstnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.NCHAR:","return((String)obj).getBytes();","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.unique2bytes((String)obj);","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["table[i]=next;","else","prev.next=next;","returne.value;","prev=e;","e=next;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["for(inti=0;i\<dirs.length;i++){","Stringname=dirs[i].getName();","if(Utils.like(name,tablePattern)){","list.add(name.substring(0,name.length()-Utils.TABLE_VIEW_EXTENTION.length()));","returnlist;","Object[][]getColumns(SSConnectioncon,StringtablePattern,StringcolPattern)throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["thrownewError();","finalObjectfindRows(Expression[]expressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;","intcount=expressions.length;","for(inti=0;i\<count;i++){","page=findRows(page,expressions[i],searchNullValues,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicObjectgetObject(StringparameterName,Mapmap)throwsSQLException{","returngetObject(findParameter(parameterName),map);","publicRefgetRef(StringparameterName)throwsSQLException{","returngetRef(findParameter(parameterName));","publicBlobgetBlob(StringparameterName)throwsSQLException{","returngetBlob(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2hex(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["offset+=2;","if(listEnum.stack\<3)","offset+=pointerSize;","do{","nextOffset2=nextOffset1;","nextOffset1=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(token.value==SQLTokenizer.NOT){","nextToken(MISSING_NULL);","operation++;","leftExpr=newExpressionArithmetic(leftExpr,operation);","break;","caseSQLTokenizer.NOT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidaddIndex(IndexDescriptionindexDescription)throwsSQLException{","indexes.add(indexDescription);","voidaddForeingnKey(ForeignKeykey){","foreignKeys.add(key);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","Databasedatabase=catalog==null?"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["factor=1;","divImpl(factor);","intgetSignum(){","returnsignum;","voidsetSignum(intsignum){","this.signum=signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalstaticIndexDescriptionload(Databasedatabase,TableViewtableView,StoreImplstore)throwsSQLException{","intconstraintType=store.readInt();","intcount=store.readInt();","Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();","SQLParsersqlParser=newSQLParser();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["this.commandSelect=commandSelect;","createColumns(con);","privatevoidcreateColumns(SSConnectioncon)throwsException{","commandSelect.compile(con);","Expressionsexprs=commandSelect.columnExpressions;","for(intc=0;c\<exprs.size();c++){"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["leftExpr=newExpressionInSelect(con,leftExpr,cmdSel,operation);","nextToken(MISSING_PARENTHESIS_R);","}else{","previousToken();","Expressionslist=expressionParenthesisList(cmd);","leftExpr=newExpressionArithmetic(leftExpr,list,operation);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]str1=param1.getBytes();","byte[]str2=param2.getBytes();","intlength=str2.length;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["NextRow:","while(from.next()){","beforeFirst();","while(next()){","if(currentGroup==null||currentGroup.getBoolean()){","accumulateRow();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnnewDateTime(param1.getLong(),type).toString(param2.getInt());","default:","returnparam1.getString();","}else","returnparam1.getString();","finalprivatelonggetDateTimeLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["try{","currentRaFile.close();","}catch(Throwableex){","con.rollbackFile(currentRaFile);","if(!file.delete()){","file.deleteOnExit();"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["voidsetNameAfterTableAlias(Stringname){","tableAlias=getName();","setName(name);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionName))returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["System.arraycopy(value,1,temp,0,valueLength-1);","value=temp;","voidmod(MutableNumericnum){","num=newMutableNumeric(doubleValue()%num.doubleValue());","value=num.value;","scale=num.scale;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnInteger.parseInt(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","switch(tokenType.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_PARENTHESIS_R);","break;","default:","leftExpr=expressionSingle(cmd,token);","booleanisNot=false;","while((token=nextToken())!=null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DECIMAL:","if(defaultValue==-1)","return38;","returndefaultValue;","caseSQLTokenizer.TIMESTAMP:","return23;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{COL_IDX_OUT_RANGE,\"01000\"},","{COL_AMBIGUOUS,\"01000\"},","{GROUP_AGGR_INVALID,\"01000\"},","{GROUP_AGGR_NOTPART,\"01000\"},","{ORDERBY_INTERNAL,\"01000\"},","{UNION_DIFFERENT_COLS,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BINARY)),Utils.getInteger(65535),\"0x\",null,\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGNVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NUMERIC)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["previousToken();","returnlist;","throwcreateSyntaxError(token,MISSING_TOKEN_LIST);","privatevoidexpressionDefList(Commandcmd,Expressionsexpressions,Stringscolumns)throwsSQLException{","SQLTokentoken=nextToken();","if(token.value!=SQLTokenizer.PARENTHESIS_L)throwcreateSyntaxError(token,MISSING_PARENTHESIS_L);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(columns.get(i).getName().equalsIgnoreCase(columnName))returni;","return-1;","finalColumnfindColumn(StringcolumnName){","for(inti=0;i\<columns.size();i++){","Columncolumn=columns.get(i);","if(column.getName().equalsIgnoreCase(columnName))returncolumn;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseGROUP_BY:","returnfromEntry.getDataType(colIdx);","caseFIRST:","caseLAST:","caseMAX:","caseMIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["signum=0;","value=EMPTY_INTS;","}else{","value=newint[1];","if(complement\<0){","value[0]=-complement;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.BIGINT:","longlongValue=param1.getLong();","if(longValue\<0)","return-1;","if(longValue\>0)","return1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["case\'B\':","case\'F\':","case\'P\':","case\'V\':","c=\'1\';","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["cmdCreate.addIndex(index);","break;","default:","throwcreateSyntaxError(token,MISSING_OPTIONS_DATATYPE);","token=nextToken();","privateIndexDescriptionindex(Commandcmd,intconstraintType,StringtableName,StringcontrainName,StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["super(log);","this.type=SQLTokenizer.DATABASE;","if(name.startsWith(\"file:\"))","name=name.substring(5);","this.name=name;","@Override"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["privateMapmessages;","privateMapsqlStates;","publicstaticLanguagegetLanguage(StringlocaleStr){","try{","returngetFromLocaleTree(localeStr);","catch(IllegalArgumentExceptione){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["identity=(flag&1)\>0;","caseSensitive=(flag&2)\>0;","nullable=(flag&4)\>0;","Columncopy(){","try{","return(Column)clone();"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["if(objinstanceofString||obj==null){","return(String)obj;","if(objinstanceofbyte[]){","return\"0x\"+Utils.bytes2hex((byte[])obj);","returngetValue(columnIndex).getString();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["MutableNumericnum=left.getNumeric();","num.mul(right.getNumeric());","returnnum;","caseDIV:","MutableNumericnum=left.getNumeric();","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","page=add(page,rowOffset,longToBinarySortOrder(expr.getLong()),isLastValues,4);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnexpr;","caseSQLTokenizer.TIMESTAMPADD:","token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);","nextToken(MISSING_COMMA);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintEND=267;","staticfinalintSWITCH=268;","staticfinalStringDESC_STR=\"DESC\";","static{","addKeyWord(\"SELECT\",SELECT);","addKeyWord(\"DELETE\",DELETE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["token=nextToken(MISSING_COMM_UNCOMM);","switch(token.value){","caseSQLTokenizer.COMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_COMMITTED;","break;","caseSQLTokenizer.UNCOMMITTED:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleanoldIsCurrentRow=isCurrentRow;","do{","isCurrentRow=rowSource.next();","}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row++;","returnisCurrentRow;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["privatestaticfinalint[]MISSING_KEY={SQLTokenizer.KEY};","privatestaticfinalint[]MISSING_REFERENCES={SQLTokenizer.REFERENCES};","privatestaticfinalint[]MISSING_AS={SQLTokenizer.AS};","privatestaticfinalint[]MISSING_SELECT={SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_INTERVALS={SQLTokenizer.SQL_TSI_FRAC_SECOND,SQLTokenizer.SQL_TSI_SECOND,SQLTokenizer.SQL_TSI_MINUTE,SQLTokenizer.SQL_TSI_HOUR,SQLTokenizer.SQL_TSI_DAY,SQLTokenizer.SQL_TSI_WEEK,SQLTokenizer.SQL_TSI_MONTH,SQLTokenizer.SQL_TSI_QUARTER,SQLTokenizer.SQL_TSI_YEAR,SQLTokenizer.MILLISECOND,SQLTokenizer.SECOND,SQLTokenizer.MINUTE,SQLTokenizer.HOUR,SQLTokenizer.DAY,SQLTokenizer.WEEK,SQLTokenizer.MONTH,SQLTokenizer.QUARTER,SQLTokenizer.YEAR,SQLTokenizer.D};","privatestaticfinalint[]MISSING_ALL={SQLTokenizer.ALL};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["newNode.moveRemainderValueSub(rowOffset,puffer);","privatefinalvoidmoveRemainderValueSub(ObjectrowOffset,char[]remainderValue){","intlength=remainderValue.length-1;","this.remainderKey=newchar[length];","value=rowOffset;","System.arraycopy(remainderValue,1,this.remainderKey,0,length);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["booleanisDefinitelyWritable(){","returnfalse;","booleanisAutoIncrement(){","returnfalse;","booleanisCaseSensitive(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["{BYTEARR_INVALID_SIZE,\"UngÃ¼ltigeBytearrayGroÃŸe{0}fÃ¼rUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjektwurdegelÃ¶scht.\"},","{PARAM_CLASS_UNKNOWN,\"UnbekanteParameterKlasse:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}istleer.\"},","{PARAM_IDX_OUT_RANGE,\"ParameterIndex{0}liegtauÃŸerhalbdesGÃ¼ltigkeitsbereiches.DerWertmusszwischen1und{1}liegen.\"},","{COL_DUPLICATE,\"EsgibteinendoppeltenSpaltennamen:\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["this.left=left;","this.operation=operation;","super.setParams(newExpression[]{left});","ExpressionArithmetic(Expressionleft,Expressionright,intoperation){","super(FUNCTION);","this.left=left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseMUL:returnleft.getMoney()*right.getMoney()/10000;","caseDIV:returnleft.getMoney()*10000/right.getMoney();","caseNEGATIVE:return-left.getMoney();","throwcreateUnspportedConversion(SQLTokenizer.MONEY);","MutableNumericgetNumeric()throwsjava.lang.Exception{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","classColumnimplementsCloneable{","privateExpressiondefaultValue=Expression.NULL;//DefaultvalueforINSERT","privateStringdefaultDefinition;//StringrepresentationforDefaultValue","privateStringname;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["privatestaticfinalint[]MISSING_SQL_DATATYPE={SQLTokenizer.SQL_BIGINT,SQLTokenizer.SQL_BINARY,SQLTokenizer.SQL_BIT,SQLTokenizer.SQL_CHAR,SQLTokenizer.SQL_DATE,SQLTokenizer.SQL_DECIMAL,SQLTokenizer.SQL_DOUBLE,SQLTokenizer.SQL_FLOAT,SQLTokenizer.SQL_INTEGER,SQLTokenizer.SQL_LONGVARBINARY,SQLTokenizer.SQL_LONGVARCHAR,SQLTokenizer.SQL_REAL,SQLTokenizer.SQL_SMALLINT,SQLTokenizer.SQL_TIME,SQLTokenizer.SQL_TIMESTAMP,SQLTokenizer.SQL_TINYINT,SQLTokenizer.SQL_VARBINARY,SQLTokenizer.SQL_VARCHAR};","privatestaticfinalint[]MISSING_INTO={SQLTokenizer.INTO};","privatestaticfinalint[]MISSING_BETWEEN_IN={SQLTokenizer.BETWEEN,SQLTokenizer.IN};","privatestaticfinalint[]MISSING_NOT_NULL={SQLTokenizer.NOT,SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_NULL={SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_COMMA={SQLTokenizer.COMMA};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"YYYY\",SQL_TSI_YEAR);","addKeyWord(\"SQL_TSI_YEAR\",SQL_TSI_YEAR);","staticfinalintIFNULL=1301;//firstsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","staticfinalintUSER=1302;","staticfinalintCONVERT=1303;","staticfinalintCAST=1304;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","finalvoidexecute()throwsException{","rowSource.execute();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["IndexNodepage=rootPage;","intcount=expressions.length;","for(inti=0;i\<count;i++){","page=findRows(page,expressions[i],searchNullValues,nodeList);","if(page==null)","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["intoperation=ExpressionArithmetic.getOperationFromToken(token.value);","intlevel=operation/10;","if(previousOperationLevel\>=level){","previousToken();","returnleftExpr;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(currentGroup==null||currentGroup.getBoolean()){","accumulateRow();","continueNextRow;","addGroupRow();","accumulateRow();","if(getRowCount()==0&&groupBy==null){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returntrue;","privatebooleancreateJoinScrollIndex()throwsException{","if(type==CROSS_JOIN){","returnfalse;","if(type!=INNER_JOIN){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["saveRemainderValue(remainderValue,charCount);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalvoidaddRemainderKey(longrowOffset,char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalIndexNodeaddRoot(chardigit)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["return(String)obj;","if(objinstanceofbyte[]){","return\"0x\"+Utils.bytes2hex((byte[])obj);","returngetValue(columnIndex).getString();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if((filePos&0x3FFFFFFFFFFFFFFFL)\>=insertStorePages.size()){","filePos=-1;","noRow();","}else","filePos=store.getNextPagePos();","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["publicbooleansupportsLimitedOuterJoins(){","returntrue;","publicStringgetSchemaTerm(){","return\"owner\";","publicStringgetProcedureTerm(){","return\"procedure\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["while(iterator.hasNext()){","Databasedatabase=(Database)iterator.next();","WeakHashMapconnections=database.connections;","connections.remove(con);","if(connections.size()==0){","try{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["staticfinalintSET=208;","staticfinalintEXECUTE=209;","staticfinalintFROM=210;","staticfinalintWHERE=211;","staticfinalintGROUP=212;","staticfinalintBY=213;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanisNull(intoffset){","returntrue;","finalbooleangetBoolean(intoffset,intdataType)throwsException{","returnfalse;","finalbyte[]getBytes(intoffset,intdataType)throwsException{","returnnull;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["staticfinalStringURL_PREFIX=\"jdbc:smallsql\";","staticSSDriverdrv;","static{","try{","drv=newSSDriver();","java.sql.DriverManager.registerDriver(drv);"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["offset=startOffset;","booleanfirstNode=true;","while(offset\<size){","if(offset==oldOffset){","intabsDiff=Math.abs(diff);","if(absDiff==2)return;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnUtils.bytes2int(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{VALUE_BIN_TOOLARGE,\"Binaryvaluewithlength{0}tolargeforcolumnwithsize{1}.\"},","{VALUE_NULL_INVALID,\"Nullvaluesarenotvalidforcolumn\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Cannotconverta{0}valuetoa{1}value.\"},","{BYTEARR_INVALID_SIZE,\"Invalidbytearraysize{0}forUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjectwasdeleted.\"},","{PARAM_CLASS_UNKNOWN,\"Unknownparameterclass:\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importjava.math.*;","importjava.util.Map;","importjava.util.Calendar;","importjava.net.URL;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["return0;","publicintgetMaxTableNameLength(){","return255;","publicintgetMaxTablesInSelect(){","return0;","publicintgetMaxUserNameLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticbyte[]hex2bytes(char[]hex,intoffset,intlength)throwsSQLException{","try{","byte[]bytes=newbyte[length/2];","for(inti=0;i\<bytes.length;i++){","bytes[i]=(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{ALIAS_UNSUPPORTED,\"01000\"},","{ISOLATION_UNKNOWN,\"01000\"},","{FLAGVALUE_INVALID,\"01000\"},","{ARGUMENT_INVALID,\"01000\"},","{GENER_KEYS_UNREQUIRED,\"01000\"},","{SEQUENCE_HEX_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.createFromException(e);","publicbooleansupportsResultSetType(inttype){","switch(type){","caseResultSet.TYPE_FORWARD_ONLY:","caseResultSet.TYPE_SCROLL_INSENSITIVE:","caseResultSet.TYPE_SCROLL_SENSITIVE:"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["for(inti=0;i\<columns.size();i++){","if(columnName.equalsIgnoreCase(columns.get(i).getAlias()))","returni;","throwSmallSQLException.create(Language.COL_MISSING,columnName);","finalvoidsetDistinct(booleandistinct){","this.isDistinct=distinct;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicBlobgetBlob(StringparameterName)throwsSQLException{","returngetBlob(findParameter(parameterName));","publicClobgetClob(StringparameterName)throwsSQLException{","returngetClob(findParameter(parameterName));","publicArraygetArray(StringparameterName)throwsSQLException{","returngetArray(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value?1:0);","booleanreadBoolean(){","returnpage[offset++]!=0;","voidwriteShort(intvalue){","intnewSize=offset+2;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["((IndexNodeScrollStatus)nodeStack.peek()).afterLast();","privatefinallonggetReturnValue(Objectvalue){","if(rootPage.getUnique()){","return((Long)value).longValue();","}else{","longList=(LongTreeList)value;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["returnmetaData.getColumnExpression(columnIndex);","finalprivateExpressionValuegetUpdateValue(intcolumnIndex)throwsSQLException{","if(values==null){","intcount=metaData.getColumnCount();","values=newExpressionValue[count];","while(count--\>0){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(SSResultSetMetaData.isNumberDataType(dataType))","returngetPrecision();","elsereturngetDisplaySize();","intgetFlag(){","return(identity?1:0)|","(caseSensitive?2:0)|"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseMIN:","if(value==null){","if(expr.isNull())","dataType=expr.getDataType();","else","initValue(expr);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returntrue;","finalvoidexecute()throwsException{","rowSource.execute();","Indexindex=newIndex(false);","lastRowOffset=-1;","while(rowSource.next()){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR,newObject[]{newInteger(offset),newString(hex)});","staticStringbytes2unique(byte[]daten,intoffset){","if(daten.length-offset\<16){","byte[]temp=newbyte[16];","System.arraycopy(daten,offset,temp,0,daten.length-offset);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["writePointer(pointer+diff);","if(diff\>0)pointer+=diff;","if(level\<2){","startOffset=offset;","correctPointers(pointer,oldOffset,diff,level+1);","offset=startOffset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.NVARCHAR:","writeString(expr.getString(),column.getDisplaySize(),true);","break;","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["super(VALUE);","this.value=value;","this.dataType=dataType;","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionValue))returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intlength=param2.getInt();","if(bytes.length\<=length)returnbytes;","byte[]b=newbyte[length];","System.arraycopy(bytes,0,b,0,length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["for(intv=value.length-1;v\>=0;v--){","inttemp=0;","for(inti=0;i\<4&&0\<length;i++){","temp|=(complement[--length]&0xFF)\<\<(i*8);","value[v]=temp;","MutableNumeric(intcomplement){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["testNotInsertRow();","clearRowBuffer();","privatevoidclearRowBuffer(){","if(values!=null){","for(inti=values.length-1;i\>=0;i--){","values[i].clear();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["case3://britshdd/mm/yy","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["right.next();","}while(isFullNotValid[fullReturnCounter++]);","returntrue;","do{","if(isBeforeFirst){","result=left.next();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["finalbooleanisScrollable(){","returnfalse;//TODOperformance,ifleftandrightarescrollablethenthisshouldalsoscrollable","voidbeforeFirst()throwsException{","scroll.beforeFirst();","isAfterLast=false;","row=0;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["puffer[c++]=(char)(value[i]\>\>16);","puffer[c++]=(char)value[i++];","returnpuffer;","privatefinalbooleanequals(char[]src1,char[]src2,intoffset2){","if(src1==null)returnfalse;","intlength=src1.length;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["{ROWSOURCE_READONLY,\"IlRowsourceÃ¨disolalettura.\"},","{STMT_IS_CLOSED,\"LoStatementÃ¨instatochiuso.\"},","{SUBQUERY_COL_COUNT,\"Ilconteggiodellecolonnenellasubquerydeveessere1enon{0}.\"},","{JOIN_DELETE,\"DeleteRownonsupportatonellejoin.\"},","{JOIN_INSERT,\"InsertRownonsupportatonellejoin.\"},","{DELETE_WO_FROM,\"DeleteRownecessitaun\'\'espressioneFROM.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["for(inti=0;i\<exprs.size();i++){","exprs.set(i,patchExpression(exprs.get(i)));","finalprivatevoidpatchExpressions(Expressionexpression)throwsSQLException{","Expression[]params=expression.getParams();","if(params==null)return;","for(inti=0;i\<params.length;i++){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["voidsetPrecision(intprecision)throwsSQLException{","if(precision\<0)throwSmallSQLException.create(Language.COL_INVALID_SIZE,newObject[]{newInteger(precision),name});","this.precision=precision;","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(dataType,precision);","intgetColumnSize(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:","sizeUsed=sizePhysical=offset;","break;","caseSQLTokenizer.UPDATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(uuidStr.compareTo((String)value)\>0)value=uuidStr;","break;","default:","Stringkeyword=SQLTokenizer.getKeyWord(dataType);","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX,keyword);","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(isNull())return0;","switch(operation){","caseADD:returnleft.getLong()+right.getLong();","caseSUB:returnleft.getLong()-right.getLong();","caseMUL:returnleft.getLong()*right.getLong();","caseDIV:returnleft.getLong()/right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return(long)Double.parseDouble(str);","floatgetFloat()throwsException{","returngetFloat(getObject(),dataType);","staticfloatgetFloat(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["checkStatement();","queryTimeout=seconds;","finalpublicvoidcancel()throwsSQLException{","checkStatement();","finalpublicSQLWarninggetWarnings(){","returnnull;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["publicvoidupdateClob(intcolumnIndex,Clobx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicvoidupdateArray(StringcolumnName,Arrayx)throwsSQLException{","updateArray(findColumn(columnName),x);","finalprivateExpressiongetValue(intcolumnIndex)throwsSQLException{","if(values!=null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(exprinstanceofExpressionName){","exprName=(ExpressionName)expr;","}else{","expr=exprName=newExpressionName(expr.getAlias());","Columncolumn=exprName.getColumn();","if(column==null){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["int[]temp=newint[valueLength-1];","System.arraycopy(value,1,temp,0,valueLength-1);","value=temp;","voidmod(MutableNumericnum){","num=newMutableNumeric(doubleValue()%num.doubleValue());","value=num.value;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseMAX:","if(value==null){","if(expr.isNull())","dataType=expr.getDataType();","else","initValue(expr);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["intidx1=0;","intidx2=str1.indexOf(str2,idx1);","while(idx2\>=0){","buffer.append(str1.substring(idx1,idx2));","buffer.append(str3);","idx1=idx2+length;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["resizeValue(1);","privatevoidresizeValue(inthighBits){","intval[]=newint[value.length+1];","val[0]=highBits;","System.arraycopy(value,0,val,1,value.length);","value=val;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returntrue;","publicbooleansupportsMixedCaseQuotedIdentifiers(){","returntrue;","publicbooleanstoresUpperCaseQuotedIdentifiers(){","returnfalse;","publicbooleanstoresLowerCaseQuotedIdentifiers(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["booleanoldIsCurrentRow=isCurrentRow;","do{","isCurrentRow=rowSource.previous();","}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row--;","returnisCurrentRow;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["if(!(exprinstanceofExpressionArithmetic))returnfalse;","if(((ExpressionArithmetic)expr).operation!=operation)returnfalse;","returntrue;","intgetInt()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalbooleanisBeforeFirst(){","returnrow==0;","finalbooleanisFirst(){","returnrow==1;","voidbeforeFirst()throwsException{","scrollStatus.reset();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(isBeforeFirst()&&rowList.size()==0){","next();","previous();","if(rowList.size()==0)returntrue;","returnfalse;","voidafterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["expr=newExpressionFunctionLength();","break;","caseSQLTokenizer.LOCATE:","invalidParamCount=(paramCount!=2)&&(paramCount!=3);","expr=newExpressionFunctionLocate();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivateForeignKeysforeignKeys=newForeignKeys();","finalprivateinttableCommandType;","CommandTable(Loggerlog,Stringcatalog,Stringname,inttableCommandType){","super(log);","this.type=SQLTokenizer.TABLE;","this.catalog=catalog;"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["writeBoolean(true);//true-isnull","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.TINYINT:","offset++;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGNVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NUMERIC)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DECIMAL)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["SQLTokentoken=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returnlist;","caseSQLTokenizer.COMMA:","continue;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintADD=71;//+","staticfinalintSUB=72;//-","staticfinalintMUL=81;//*","staticfinalintDIV=82;///","staticfinalintMOD=83;//%","staticfinalintBIT_NOT=91;//~"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["defaultValue=newExpressionValue(counter,SQLTokenizer.BIGINT);","return8;","voidsetNewAutoIncrementValue(Expressionobj)throwsException{","if(identity){","counter.setNextValue(obj);","booleanisCaseSensitive(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=col.getName();//COLUMN_NAME","row[4]=Utils.getShort(SQLTokenizer.getSQLDataType(col.getDataType()));//DATA_TYPE","row[5]=SQLTokenizer.getKeyWord(col.getDataType());//TYPE_NAME","row[6]=Utils.getInteger(col.getColumnSize());//COLUMN_SIZE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["wasNextEntry=true;","if(node==null){","node=newSearchNode();","node.letter=c;","if(wasNextEntry)","prev.nextEntry=node;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicstaticfinalStringPARAM_EMPTY=\"SS-0371\";","publicstaticfinalStringPARAM_IDX_OUT_RANGE=\"SS-0372\";","publicstaticfinalStringCOL_DUPLICATE=\"SS-0400\";","publicstaticfinalStringCOL_MISSING=\"SS-0401\";","publicstaticfinalStringCOL_VAL_UNMATCH=\"SS-0402\";","publicstaticfinalStringCOL_INVALID_SIZE=\"SS-0403\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["thrownewError();","privateExpressionexpression(Commandcmd,intpreviousOperationLevel)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","ExpressionleftExpr;","switch(token.value){","caseSQLTokenizer.NOT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetTimestamp(findColumn(columnName));","publicInputStreamgetAsciiStream(StringcolumnName)throwsSQLException{","returngetAsciiStream(findColumn(columnName));","publicInputStreamgetUnicodeStream(StringcolumnName)throwsSQLException{","returngetUnicodeStream(findColumn(columnName));","publicInputStreamgetBinaryStream(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.SQL_TSI_SECOND:","returnparam2.getLong()+param1.getLong()*1000;","caseSQLTokenizer.SQL_TSI_MINUTE:","returnparam2.getLong()+param1.getLong()*60000;","caseSQLTokenizer.SQL_TSI_HOUR:","returnparam2.getLong()+param1.getLong()*3600000;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["}while(token.value==SQLTokenizer.MINUS||token.value==SQLTokenizer.PLUS);","default:","SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.PARENTHESIS_L){","if(isMinus)","returnnewExpressionArithmetic(function(cmd,token,false),ExpressionArithmetic.NEGATIVE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","page=add(page,rowOffset,numericToBinarySortOrder(expr.getNumeric()),isLastValues);","break;","default:","thrownewError(String.valueOf(expr.getDataType()));"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseGRE_EQU:returnleft.getFloat()\>=right.getFloat();","caseLESSER:returnleft.getFloat()\<right.getFloat();","caseLES_EQU:returnleft.getFloat()\<=right.getFloat();","caseUNEQUALS:returnleft.getFloat()!=right.getFloat();","caseBETWEEN:","float_left=left.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.SQL_TSI_MINUTE:","return(int)(param2.getLong()/60000-param1.getLong()/60000);","caseSQLTokenizer.SQL_TSI_HOUR:","return(int)(param2.getLong()/3600000-param1.getLong()/3600000);","caseSQLTokenizer.SQL_TSI_DAY:","return(int)(param2.getLong()/86400000-param1.getLong()/86400000);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalprivateTableStorePagerequestLockImpl(SSConnectioncon,intpageOperation,longpage)throwsSQLException{","synchronized(locks){","if(tabLockConnection!=null&&tabLockConnection!=con)returnnull;","switch(con.isolationLevel){","caseConnection.TRANSACTION_SERIALIZABLE:","serializeConnections.put(con,con);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["for(inti=0;i\<files.length;i++){","files[i].delete();","dir.delete();","break;","caseSQLTokenizer.TABLE:","Database.dropTable(con,catalog,name);"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["SQLTokentoken=nextToken(MISSING_EXPRESSION);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_L://(","returnrowSource(cmd,tables,SQLTokenizer.PARENTHESIS_R);","caseSQLTokenizer.ESCAPE_L://{","token=nextToken(MISSING_OJ);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["result[5]=(byte)(value\>\>16);","result[6]=(byte)(value\>\>8);","result[7]=(byte)(value);","returnresult;","staticintmoney2int(longvalue){","if(value\<Integer.MIN_VALUE)returnInteger.MIN_VALUE;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnviewResult;","Stringcatalog=null;","Stringname=getIdentifier(token);","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){","catalog=name;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longgetTimeMillis(){","returntime;","intgetDataType(){","returndataType;","publicStringtoString(){","Detailsdetails=newDetails(time);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{ROW_LOCKED,\"01000\"},","{ROW_DELETED,\"01000\"},","{SAVEPT_INVALID_TRANS,\"01000\"},","{SAVEPT_INVALID_DRIVER,\"01000\"},","{ALIAS_UNSUPPORTED,\"01000\"},","{ISOLATION_UNKNOWN,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["{GROUP_AGGR_NOTPART,\"L\'\'espressione\'\'{0}\'\'nonÃ¨partediunafunzionediaggregazioneodellaclausolaGROUPBY.\"},","{ORDERBY_INTERNAL,\"ErroreinternoperORDERBY.\"},","{UNION_DIFFERENT_COLS,\"SELECTappartenentiadunaUNIONconnumerodicolonnedifferenti:{0}e{1}.\"},","{INDEX_EXISTS,\"L\'\'indice\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{INDEX_MISSING,\"L\'\'indice\'\'{0}\'\'nonesiste.\"},","{INDEX_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoperunindice.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returncommandSelect.getRow();","longgetRowPosition(){","returncommandSelect.from.getRowPosition();","voidsetRowPosition(longrowPosition)throwsException{","commandSelect.from.setRowPosition(rowPosition);","finalbooleanrowInserted(){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["c=\'4\';","break;","case\'M\':","case\'N\':","c=\'5\';","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["}else{","throwSmallSQLException.create(Language.RSET_READONLY);","publicvoidmoveToCurrentRow()throwsSQLException{","isInsertRow=false;","clearRowBuffer();","if(values==null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["afterLast();","while(newRow++\<0){","if(!previous()){","returnfalse;","returntrue;","booleanrelative(introws)throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["try{","indexes.drop(database);","}catch(Exceptionex1){/*ignoreit*/}","throwex;","}finally{","tableLock.freeLock();"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","returngetString().getBytes();","finalStringgetString()throwsException{","if(isNull())returnnull;","returnparam1.getString().toLowerCase();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|"],
"["returnlist;","switch(token.value){","caseSQLTokenizer.COMMA:","continue;","default:","if(isKeyword(token)){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Filedirs[]=baseDir.listFiles();","if(dirs!=null)","for(inti=0;i\<dirs.length;i++){","if(dirs[i].isDirectory()){","if(newFile(dirs[i],Utils.MASTER_FILENAME).exists()){","Object[]catalog=newObject[1];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalvoidsetAlias(Stringalias){","this.alias=alias;","voidsetParams(Expression[]params){","this.params=params;","voidsetParamAt(Expressionparam,intidx){","params[idx]=param;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["do{","token=nextToken(COMMANDS_CREATE_UNIQUE);","}while(token.value==SQLTokenizer.INDEX);","returncreateIndex(true);","caseSQLTokenizer.NONCLUSTERED:","caseSQLTokenizer.CLUSTERED:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintSQL_TIMESTAMP=1364;","staticfinalintSQL_TINYINT=1365;","staticfinalintSQL_VARBINARY=1366;","staticfinalintSQL_VARCHAR=1367;","static{","addKeyWord(\"SQL_BIGINT\",SQL_BIGINT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalvoidclear(){","size=0;","finalvoidremove(intidx){","System.arraycopy(data,idx+1,data,idx,(--size)-idx);","finalvoidset(intidx,Expressionexpr){","data[idx]=expr;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["returnUtils.bytes2float(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetCatalogs()throwsSQLException{","String[]colNames={\"TABLE_CAT\"};","Object[][]data=Database.getCatalogs(con.getDatabase(true));","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["(expressions.get(level).getAlias()!=SQLTokenizer.DESC_STR),","scroll,level));","continue;","}else","returngetReturnValue(status.nodeValue);","if(idx\<0){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["byte[]result=newbyte[8];","result[0]=(byte)(value\>\>56);","result[1]=(byte)(value\>\>48);","result[2]=(byte)(value\>\>40);","result[3]=(byte)(value\>\>32);","result[4]=(byte)(value\>\>24);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnUtils.bytes2double(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","if(defaultValue==-1)"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicbytegetByte(intcolumnIndex)throwsSQLException{","return(byte)getInt(columnIndex);","publicshortgetShort(intcolumnIndex)throwsSQLException{","return(short)getInt(columnIndex);","publicintgetInt(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(op==0){","return0;","returncreateJoinScrollIndex((ExpressionArithmetic)param1,leftEx,rightEx,operation);","return0;","if(operation==0){","operation=op;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["elseResult=param;","return;","if(idx%2\>0){","results.set(p,param);","}else{","cases.set(p,param);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["default:thrownewError();","ExpressionValue(Objectvalue,intdataType){","super(VALUE);","this.value=value;","this.dataType=dataType;","publicbooleanequals(Objectexpr){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnbuf.toString();","case111://Japanyy/mm/dd","formatNumber(details.year,4,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbytegetByte(intcolumnIndex)throwsSQLException{","return(byte)getInt(columnIndex);","publicshortgetShort(intcolumnIndex)throwsSQLException{","return(short)getInt(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["StringBuffercommand=newStringBuffer();","BufferedReaderinput=newBufferedReader(newInputStreamReader(System.in));","while(true){","try{","Stringline;","try{"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["returnbytes;","publicBigDecimaltoBigDecimal(){","if(value==0)returnZERO;","returnnewBigDecimal(newBigInteger(toByteArray()),4);","publicObjectgetImmutableObject(){","returntoBigDecimal();"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["bytes[offset++]=(byte)(value\>\>16);","bytes[offset++]=(byte)(value\>\>8);","bytes[offset++]=(byte)(value);","returnbytes;","publicBigDecimaltoBigDecimal(){","if(value==0)returnZERO;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["rightExpr=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,operation);","break;","caseSQLTokenizer.BETWEEN:","rightExpr=expression(cmd,ExpressionArithmetic.AND);","nextToken(MISSING_AND);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{DATETIME_INVALID,\"01000\"},","{UNSUPPORTED_CONVERSION_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_FUNC,\"01000\"},","{UNSUPPORTED_CONVERSION_FUNC,\"01000\"},","{UNSUPPORTED_TYPE_CONV,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionUCase();","break;","caseSQLTokenizer.CURDATE:","caseSQLTokenizer.CURRENTDATE:","invalidParamCount=(paramCount!=0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\',\');","buf.append(\'\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case8://hh:mm:ss"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{STXADD_COMMENT_OPEN,\"Missingendcommentmark(\'\'*/\'\').\"},","};","privatefinalString[][]SQL_STATES={","{CUSTOM_MESSAGE,\"01000\"},","{UNSUPPORTED_OPERATION,\"01000\"},","{CANT_LOCK_FILE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Objectobj=getObject();","if(obj==null)returnnull;","switch(datatype.getDataType()){","caseSQLTokenizer.BIT:","return((Boolean)obj).booleanValue()?\"1\":\"0\";","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["importsmallsql.database.*;","publicclassCommandLine{","publicstaticvoidmain(String[]args)throwsException{","System.out.println(\"SmallSQLDatabasecommandlinetool\\n\");","Connectioncon=newSSDriver().connect(\"jdbc:smallsql\",newProperties());","Statementst=con.createStatement();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["Stringstr=convertToString();","intlength=datatype.getDisplaySize();","if(length\>str.length())","returnstr;","returnstr.substring(0,length);","caseSQLTokenizer.CHAR:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["{TABLE_DEADLOCK,\"Deadlock,cannotcreatealockontable\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TableorView\'\'{0}\'\'doesnotexist.\"},","{TABLE_FILE_INVALID,\"File\'\'{0}\'\'doesnotincludeavalidSmallSQLTable.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidTableorViewstore.\"},","{TABLE_EXISTENT,\"TableorView\'\'{0}\'\'alreadyexists.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'isnotatable.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["clearRowBuffer();","privatevoidtestNotInsertRow()throwsSQLException{","if(isInsertRow){","throwSmallSQLException.create(Language.RSET_ON_INSERT_ROW);","publicvoidupdateRow()throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(comment==LINE_COMMENT){","if(c==\'\\r\'||c==\'\\n\'){","comment=NOT_COMMENT;","wasWhiteSpace=true;","tokenStart=i+1;","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["switch(dataType){","caseSQLTokenizer.NULL:","return0;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return1;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["publicvoidsetNull(intparameterIndex,intsqlType)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,null,SQLTokenizer.NULL);","publicvoidsetBoolean(intparameterIndex,booleanx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x?Boolean.TRUE:Boolean.FALSE,SQLTokenizer.BOOLEAN);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["}else","millis=0;","}else{","hour=0;","minute=0;","second=0;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.DECIMAL:","page=find(page,numericToBinarySortOrder(expr.getNumeric()),nodeList);","break;","default:","thrownewError(String.valueOf(expr.getDataType()));","returnpage;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["abstractclassTransactionStep{","FileChannelraFile;","TransactionStep(FileChannelraFile){","this.raFile=raFile;","abstractlongcommit()throwsSQLException;","abstractvoidrollback()throwsSQLException;"]": ["|project://smallsql/src/smallsql/database/TransactionStep.java|"],
"["Object[][]data=Database.getCatalogs(con.getDatabase(true));","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTableTypes()throwsSQLException{","String[]colNames={\"TABLE_TYPE\"};","Object[][]data={{\"SYSTEMTABLE\"},{\"TABLE\"},{\"VIEW\"}};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["booleanisNullable(){","returnexpr.isNullable();","intgetDataType(){","returnexpr.getDataType();","intgetDisplaySize(){","returnexpr.getDisplaySize();"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["if(as||(!isKeyword(token))){","Stringalias=getIdentifier(token);","column.setAlias(alias);","token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnUtils.string2boolean(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnUtils.string2boolean(ois.readObject().toString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intidx2=str1.indexOf(str2,idx1);","while(idx2\>=0){","buffer.append(str1.substring(idx1,idx2));","buffer.append(str3);","idx1=idx2+length;","idx2=str1.indexOf(str2,idx1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["voidsetDefaultValue(ExpressiondefaultValue,StringdefaultDefinition){","this.defaultValue=defaultValue;","this.defaultDefinition=defaultDefinition;","ExpressiongetDefaultValue(SSConnectioncon)throwsSQLException{","if(identity)","counter.createNextValue(con);"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returnnewMutableNumeric(getMoneyImpl(),4);","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privateMutableNumericgetNumericImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:","MutableNumericnum=left.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finallonggetNextPagePos(){","returnnextPagePos;","finalvoiddeleteRow(SSConnectioncon)throwsSQLException{","if(nextPagePos\>=0){","throwSmallSQLException.create(Language.ROW_DELETED);","thrownewError();"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["if(keyword==null)keyword=\"\"+(char)token;","returnkeyword;","staticintgetOperationFromToken(intvalue){","switch(value){","caseSQLTokenizer.PLUS:returnADD;","caseSQLTokenizer.MINUS:returnSUB;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["token,Language.CUSTOM_MESSAGE,msgBuf);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateStringgetErrorString(SQLTokentoken,StringmiddleMsgCode,","ObjectmiddleMsgParam){","StringBufferbuffer=newStringBuffer(1024);","Stringmiddle=SmallSQLException.translateMsg("]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StoreImplstore=table.getStoreInsert(con);","for(inti=0;i\<count;i++){","ColumntableColumn=tableColumns.get(i);","Expressionsrc=updateValues[i];","if(src==null)src=tableColumn.getDefaultValue(con);","store.writeExpression(src,tableColumn);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["longt=date.getTime();","returnremoveDateTimeOffset(t);","staticDateTimevalueOf(java.util.Datedate){","if(date==null)returnnull;","inttype;","if(dateinstanceofjava.sql.Date)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{TABLE_CORRUPT_PAGE,\"Paginadellatabellacorrottaallaposizione:{0}.\"},","{TABLE_MODIFIED,\"Latabella\'\'{0}\'\'Ã¨statamodificata.\"},","{TABLE_DEADLOCK,\"Deadlock:nonsipuÃ²mettereunlocksullatabella\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"Latabella/view\'\'{0}\'\'nonesiste.\"},","{TABLE_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonincludeunatabellaSmallSQLvalida.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoditabella/view.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["System.arraycopy(this.inList,0,params,1,this.inList.length);","}else{","params=newExpression[]{left};","super.setParams(params);","intgetOperation(){","returnoperation;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnUtils.getInteger(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnUtils.getInteger(readShort());","caseSQLTokenizer.INT:","returnUtils.getInteger(readInt());","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["trim.setParams(newExpression[]{expr});","returntrim;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:","if(other.getPrecision()\>expr.getPrecision()){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["introw=from.getRow();","if(maxRows\>=0&&row\>maxRows)return0;","returnrow;","finalvoidupdateRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","intsavepoint=con.getSavepoint();","try{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["CommandSelectcmdSelect=Utils.createMemoryCommandSelect(con,colNames,data);","Expressionsorder=newExpressions();","order.add(newExpressionName(\"TABLE_TYPE\"));","order.add(newExpressionName(\"TABLE_NAME\"));","cmdSelect.setOrder(order);","returnnewSSResultSet(st,cmdSelect);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Object[]params={","SQLTokenizer.getKeyWord(getDataType(left,right)),","getKeywordFromOperation(operation)","};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER,params);","SQLExceptioncreateUnspportedConversion(intdataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{MILLIS_TOOLARGE,\"01000\"},","{DATETIME_INVALID,\"01000\"},","{UNSUPPORTED_CONVERSION_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_FUNC,\"01000\"},","{UNSUPPORTED_CONVERSION_FUNC,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseExpression.LAST:","caseExpression.SUM:","ExpressionbaseExpression=exprName.getParams()[0];","column.setPrecision(baseExpression.getPrecision());","column.setScale(baseExpression.getScale());","break;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["switch(getType()){","caseNAME:","caseGROUP_BY:","returnfromEntry.getDataType(colIdx);","caseFIRST:","caseLAST:"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["buf.append(\'.\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case3://britshdd/mm/yy","formatNumber(details.day,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["setByte(findParameter(parameterName),x);","publicvoidsetShort(StringparameterName,shortx)throwsSQLException{","setShort(findParameter(parameterName),x);","publicvoidsetInt(StringparameterName,intx)throwsSQLException{","setInt(findParameter(parameterName),x);","publicvoidsetLong(StringparameterName,longx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSUB:","returnMath.max(left.getScale(),right.getScale());","caseMUL:","returnleft.getScale()+right.getScale();","caseDIV:","returnMath.max(left.getScale()+5,right.getScale()+4);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnbuf.toString();","case11://Japanyy/mm/dd","formatNumber(details.year%100,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["idx2=Utils.indexOf(str2,str1,idx1);","if(idx1\>0){","buffer.write(str1,idx1,str1.length-idx1);","returnbuffer.toByteArray();","returnstr1;","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["link.page=this;","link.filePos=fileOffset;","finallongcommit()throwsSQLException{","longresult=super.commit();","link.filePos=fileOffset;","link.page=null;"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["caseSQLTokenizer.DIFFERENCE:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionDifference();","break;","caseSQLTokenizer.INSERT:","invalidParamCount=(paramCount!=4);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){","returnfindNodePos(digit,mid+1,end);","}else{","if(start==mid)return-1;","returnfindNodePos(digit,start,mid-1);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["System.arraycopy(data,offset,data,offset+2,size-offset);","size+=2;","writeShort(octet);","correctPointers(0,oldOffset,2,0);","finalprivatevoidremoveNode()throwsSQLException{","intoldOffset=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["}else{","value[0]=complement;","signum=1;","MutableNumeric(intcomplement,intscale){","this(complement);","this.scale=scale;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnnewMutableNumeric(getBoolean()?1:0);","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returnnewMutableNumeric(getIntImpl());","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2float(readBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returntrue;","publicbooleansupportsMultipleTransactions(){","returntrue;","publicbooleansupportsNonNullableColumns(){","returntrue;","publicbooleansupportsMinimumSQLGrammar(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["row=0;","finalintgetRow()throwsException{","returnrow;","finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["booleanisNot=false;","while((token=nextToken())!=null){","ExpressionrightExpr;","intoperation=ExpressionArithmetic.getOperationFromToken(token.value);","intlevel=operation/10;","if(previousOperationLevel\>=level){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["firstNode=true;","break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){","return;","firstNode=false;","if(shift!=0)offset+=pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publiclonggetLong(StringcolumnName)throwsSQLException{","returngetLong(findColumn(columnName));","publicfloatgetFloat(StringcolumnName)throwsSQLException{","returngetFloat(findColumn(columnName));","publicdoublegetDouble(StringcolumnName)throwsSQLException{","returngetDouble(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["rows.toArray(result);","returnresult;","Object[][]getPrimaryKeys(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);","for(intt=0;t\<tables.size();t++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["staticfinalintCREATE=205;","staticfinalintDROP=206;","staticfinalintALTER=207;","staticfinalintSET=208;","staticfinalintEXECUTE=209;","staticfinalintFROM=210;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseISNOTNULL:","caseIN:","returnfalse;//Booleanoperationsreturneveraresult???,butatleastISNULLandISNOTNULL","caseNEGATIVE:","caseBIT_NOT:","returnleft.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisExpressionsFromThisRowSource(Expressionscolumns){","returnrowSource.isExpressionsFromThisRowSource(columns);","privatefinalintgetRowCount(){","returnsortedRowCount+insertedRows.size();","privatefinalintcurrentInsertedRow(){","returnrow-sortedRowCount-1;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["addKeyWord(\"BLOB\",BLOB);","addKeyWord(\"BYTE\",TINYINT);","addKeyWord(\"TINYINT\",TINYINT);","addKeyWord(\"SMALLINT\",SMALLINT);","addKeyWord(\"INTEGER\",INT);","addKeyWord(\"INT\",INT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["nextToken(MISSING_FROM);","from(cmd);","SQLTokentoken=nextToken();","if(token!=null){","if(token.value!=SQLTokenizer.WHERE)","throwthis.createSyntaxError(token,MISSING_WHERE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateExpressionexpressionSingle(Commandcmd,SQLTokentoken)throwsSQLException{","booleanisMinus=false;","if(token!=null){","switch(token.value){","caseSQLTokenizer.NULL:","returnnewExpressionValue(null,SQLTokenizer.NULL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","char[]puffer=newchar[count];","puffer[0]=(char)count;","for(intc=1;c\<count;){","puffer[c++]=(char)(value[i]\>\>16);","puffer[c++]=(char)value[i++];"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(signum\<0)buf.insert(0,\'-\');","returnbuf.toString();","publicintcompareTo(MutableNumericnumeric){","returntoBigDecimal().compareTo(numeric.toBigDecimal());","publicbooleanequals(Objectobj){","if(!(objinstanceofMutableNumeric))returnfalse;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["commitPages=null;","Database.closeConnection(this);","finalvoidtestClosedConnection()throwsSQLException{","if(isClosed())throwSmallSQLException.create(Language.CONNECTION_CLOSED);","publicbooleanisClosed(){","return(commitPages==null);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["JoinScrollscroll;","Join(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;","this.condition=condition;","this.left=left;","this.right=right;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["publicInputStreamgetUnicodeStream(StringcolumnName)throwsSQLException{","returngetUnicodeStream(findColumn(columnName));","publicInputStreamgetBinaryStream(StringcolumnName)throwsSQLException{","returngetBinaryStream(findColumn(columnName));","publicSQLWarninggetWarnings(){","returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return0;","publicintgetDefaultTransactionIsolation(){","returnConnection.TRANSACTION_READ_COMMITTED;","publicbooleansupportsTransactions(){","returntrue;","publicbooleansupportsTransactionIsolationLevel(intlevel){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["booleanisNull=readBoolean();//forisNull","switch(dataTypes[i]){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.TINYINT:","offset++;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(signum!=sig2)","sub(val2);","else","add(val2);","privatevoidadd(int[]val2){","longtemp=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["num.setScale(scale);","}else","if(num.scale\>scale){","setScale(num.scale);","add(num.signum,num.value);","privatevoidadd(intsig2,int[]val2){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,null);","caseSQLTokenizer.TIMESTAMPDIFF:","token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["dataType=SQLTokenizer.VARCHAR;","break;","caseSQLTokenizer.COUNTER:","col.setAutoIncrement(true);","dataType=SQLTokenizer.INT;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["SSResultSetMetaDatametaData=newSSResultSetMetaData();","metaData.columns=cmd.columnExpressions;","returnmetaData;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","returnnull;"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnUtils.string2boolean(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["cmdCreate.addColumn(col);","returntoken;","caseSQLTokenizer.DEFAULT:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","intoffset=token.offset+token.length;","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["invalidParamCount=(paramCount!=1);","if(params[0].getType()==Expression.NAME){","ExpressionNameparam=(ExpressionName)params[0];","if(\"*\".equals(param.getName())&&param.getTableAlias()==null){","params[0]=newExpressionValue(\"*\",SQLTokenizer.VARCHAR);","expr=newExpressionName(Expression.COUNT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivatevoidaddGroupRow(){","ExpressionValue[]newRow=currentRow=newExpressionValue[expressions.size()];","for(inti=0;i\<newRow.length;i++){","Expressionexpr=expressions.get(i);","inttype=expr.getType();","if(type\<Expression.GROUP_BEGIN)type=Expression.GROUP_BY;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["packagesmallsql.database;","finalclassMutableDoubleextendsNumberimplementsMutable{","doublevalue;","MutableDouble(doublevalue){","this.value=value;","publicdoubledoubleValue(){"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","writeBinary(expr.getBytes(),column.getPrecision(),dataType!=SQLTokenizer.BINARY);","break;","caseSQLTokenizer.TINYINT:","writeByte(expr.getInt());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["StringsqlColName=sqlCol.getName();","intidx=table.findColumnIdx(sqlColName);","if(idx\>=0){","matrix[idx]=c;","}else{","throwSmallSQLException.create(Language.COL_MISSING,sqlColName);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returnMath.max(left.getScale()+5,right.getScale()+4);","caseNEGATIVE:","returnleft.getScale();","caseMOD:","return0;","returngetScale(dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["default:","thrownewError();","privateCommandupdate()throwsSQLException{","CommandUpdatecmd=newCommandUpdate(con.log);","DataSourcestables=newDataSources();","cmd.setTables(tables);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","classIndexNode{","finalprivatebooleanunique;","finalprivatechardigit;//unsignedshort"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["privateint[]matrix;","finalprivateExpressionsexpressions;","privateIndexindex;","privateFileChannelraFile;","IndexDescription(Stringname,StringtableName,intconstraintType,Expressionsexpressions,Stringscolumns){","this.constraintType=constraintType;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["elsecompileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionName(ExpressionNameexpr)throwsException{","StringtableAlias=expr.getTableAlias();","if(tableAlias!=null){","intt=0;","for(;t\<tables.size();t++){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["floatgetFloat(intoffset,intdataType)throwsException{","thrownoCurrentRow();","intgetInt(intoffset,intdataType)throwsException{","thrownoCurrentRow();","longgetLong(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["store.writeString(columns.get(c));","store.writeString(name);","finalstaticIndexDescriptionload(Databasedatabase,TableViewtableView,StoreImplstore)throwsSQLException{","intconstraintType=store.readInt();","intcount=store.readInt();","Stringscolumns=newStrings();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["{VIEWDROP_NOT_VIEW,\"CannotuseDROPVIEWwith\'\'{0}\'\'becauseitdoesnotisaview.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'can\'\'tbedropped.\"},","{RSET_NOT_PRODUCED,\"NoResultSetwasproduced.\"},","{RSET_READONLY,\"ResultSetisreadonly.\"},","{RSET_FWDONLY,\"ResultSetisforwardonly.\"},","{RSET_CLOSED,\"ResultSetisclosed.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnvalue/10000.0F;","publicdoubledoubleValue(){","returnvalue/10000.0;","publiclonglongValue(){","return(long)(value/10000.0);","publicStringtoString(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["returnnull;","finalvoidadd(Columncolumn){","if(column==null){","thrownewNullPointerException(\"Columnisnull.\");","if(size\>=data.length){","resize(size\<\<1);"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["staticfinalintTABLE=236;","staticfinalintVIEW=237;","staticfinalintINDEX=238;","staticfinalintPROCEDURE=239;","staticfinalintTRANSACTION=240;","staticfinalintISOLATION=241;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"ISOLATION\",ISOLATION);","addKeyWord(\"LEVEL\",LEVEL);","addKeyWord(\"READ\",READ);","addKeyWord(\"COMMITTED\",COMMITTED);","addKeyWord(\"UNCOMMITTED\",UNCOMMITTED);","addKeyWord(\"REPEATABLE\",REPEATABLE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(shift==0){","offset-=2;","removeNodeLastLevel();","while(firstNode&&getUnsignedShort()==0){","offset-=2;","removeNodeLastLevel();//theend0ofanode"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;","switch(getDataType()){","caseSQLTokenizer.INT:","returnnewMutableNumeric(getInt());","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["}else{","prev.nextLock=lock.nextLock;","return;","prev=lock;","lock=lock.nextLock;","break;"]": ["|project://smallsql/src/smallsql/database/Table.java|","|project://smallsql/src/smallsql/database/Table.java|"],
"["returntrue;","returnfalse;","staticintgetDisplaySize(intdataType,intprecision,intscale){","switch(dataType){","caseSQLTokenizer.BIT:","return1;//1and0"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnvalue.time==time&&value.dataType==dataType;","StringtoString(intstyle){","if(style\<0)","returntoString();","Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnull;","returnnewMutableNumeric(dValue);","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(((Money)obj).value,4);","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnUtils.bytes2long(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ByteArrayOutputStreambuffer=newByteArrayOutputStream();","for(inti=0;i\<count;i++){","buffer.write(bytes);","returnbuffer.toByteArray();","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["publicSQLWarninggetWarnings(){","returnnull;","publicvoidclearWarnings(){","publicStringgetCursorName(){","returnnull;","publicResultSetMetaDatagetMetaData(){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.MONEY:","writeLong(expr.getMoney());","break;","caseSQLTokenizer.SMALLMONEY:","writeInt((int)expr.getMoney());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["StringgetAlias(){returnnull;}","abstractTableViewgetTableView();","booleanisExpressionsFromThisRowSource(Expressionscolumns){","for(inti=0;i\<columns.size();i++){","ExpressionNameexpr=(ExpressionName)columns.get(i);","if(this!=expr.getDataSource()){"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["this.value=value;","this.offset=tokenStart;","this.length=tokenEnd-tokenStart;","SQLToken(Stringname,intvalue,inttokenStart,inttokenEnd){","this.value=value;","this.offset=tokenStart;"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["return(iValue\<0)?newInteger(-iValue):para1;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnValue=(MutableNumeric)para1;","if(nValue.getSignum()\<0)nValue.setSignum(1);","returnnValue;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["voidbeforeFirst()throwsException{","rowIdx=-1;","rowSource.beforeFirst();","booleanisBeforeFirst(){","returnrowIdx==-1||rowList.size()==0;","booleanisFirst(){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returnfalse;","}else{","afterLast();","while(newRow++\<0){","if(!previous()){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["voidafterLast()throwsException{","commandSelect.afterLast();","booleanabsolute(introw)throwsException{","returncommandSelect.absolute(row);","booleanrelative(introws)throwsException{","returncommandSelect.relative(rows);"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["intcomp=Utils.compareBytes(leftBytes,rightBytes);","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returncomp==0;","caseGREATER:returncomp\>0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicbooleansupportsDataManipulationTransactionsOnly(){","returnfalse;","publicbooleandataDefinitionCausesTransactionCommit(){","returnfalse;","publicbooleandataDefinitionIgnoredInTransactions(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["node=node.nextLetter;","wasNextEntry=false;","prev.value=value;","staticfinalStringgetKeyWord(intkey){","return(String)keywords.get(Utils.getInteger(key));","staticfinalintgetSQLDataType(inttype){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returncolumn;","voidcopyValueFrom(StoreImplstore,intvalueOffset,intlength){","System.arraycopy(store.page,valueOffset,this.page,this.offset,length);","this.offset+=length;","voidwriteExpression(Expressionexpr,Columncolumn)throwsException{","booleanisNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.NULL:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","nullableWasSet=true;","break;","caseSQLTokenizer.NOT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowIdx=rowList.size();//rowIdxshouldbeneverlargerasrowcount","returnfalse;","booleanlast()throwsException{","afterLast();","returnprevious();","booleanisLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["switch(other.getDataType()){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateTabletable;","privatelongtableTimestamp;","privateint[]matrix;//mappingofthecolumnsfromINSERTtothecolumnsintheTable;-1defaultValue","CommandInsert(Loggerlog,Stringname){","super(log);","this.name=name;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARBINARY)),Utils.getInteger(65535),\"0x\",null,\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BINARY)),Utils.getInteger(65535),\"0x\",null,\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGNVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetBlob()notyetimplemented.\");","publicvoidsetClob(inti,Clobx)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetArray()notyetimplemented.\");","publicResultSetMetaDatagetMetaData()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["finalvoidset(intidx,Expressionexpr){","data[idx]=expr;","finalintindexOf(Expressionexpr){","if(expr==null){","for(inti=0;i\<size;i++)","if(data[i]==null)"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx\<\<1];","finallongget2(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[(idx\<\<1)+1];"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["rowSource.setRowPosition(rowPosition);","finalvoidnullRow(){","rowSource.nullRow();","row=0;","finalvoidnoRow(){","rowSource.noRow();"]": ["|project://smallsql/src/smallsql/database/Where.java|","|project://smallsql/src/smallsql/database/Distinct.java|"],
"["}else{","for(;newScale\<scale;scale--){","factor*=10;","if(factor==1000000000){","divImpl(factor);","factor=1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["raFile.read(buffer);","buffer.position(0);","intmagic=buffer.getInt();","intversion=buffer.getInt();","switch(magic){","caseMAGIC_TABLE:"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["temp=(value[--v1]&0xFFFFFFFFL)-(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>=32);","value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]-1)==-1;","if(uebertrag){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalprivatelongfilePos;","finalprivateFileChannelraFile;","finalprivatebyte[]page=newbyte[8];","privatelongvalue;","publicIdentity(FileChannelraFile,longfilePos)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(page);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["Stringcatalog=null;","Stringname=getIdentifier(token);","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){","catalog=name;","name=nextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowSource.nullRow();","row=0;","voidnoRow(){","rowSource.noRow();","row=0;","booleanisExpressionsFromThisRowSource(Expressionscolumns){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returnstore.readBytes(store.readInt());","voidwriteChars(char[]daten){","intlength=daten.length;","intnewSize=offset+2*length;","if(newSize\>page.length)resizePage(newSize);","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["charc=daten[i];","page[offset++]=(byte)(c);","page[offset++]=(byte)(c\>\>8);","char[]readChars(intlength){","char[]daten=newchar[length];","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SQL_CHAR:dataType=SQLTokenizer.CHAR;break;","caseSQLTokenizer.SQL_DATE:dataType=SQLTokenizer.DATE;break;","caseSQLTokenizer.SQL_DECIMAL:dataType=SQLTokenizer.DECIMAL;break;","caseSQLTokenizer.SQL_DOUBLE:dataType=SQLTokenizer.DOUBLE;break;","caseSQLTokenizer.SQL_FLOAT:dataType=SQLTokenizer.FLOAT;break;","caseSQLTokenizer.SQL_INTEGER:dataType=SQLTokenizer.INT;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.TABLE_CORRUPT_PAGE,newObject[]{newLong(filePos)});","status=readInt();","sizeUsed=readInt();","sizePhysical=readInt();","nextPageOffset=readInt();","filePosUpdated=readLong();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","this.indexes=existIndexes;","existIndexes.add(newIndexes);","write(con);","for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(result){","result=right.first();","if(!result){","switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|","|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["break;","caseSQLTokenizer.MONEY:","((Money)value).value+=expr.getMoney();","break;","default:throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM,SQLTokenizer.getKeyWord(dataType));","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{","if(isNull())returnnull;","returnUtils.getInteger(getInt());","StringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["invalidParamCount=(paramCount!=0)&&(paramCount!=1);","expr=newExpressionFunctionRand();","break;","caseSQLTokenizer.ROUND:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRound();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;","finalintplaces=param2.getInt();","doublevalue=param1.getDouble();","longfactor=1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["publicvoidsetBigDecimal(StringparameterName,BigDecimalx)throwsSQLException{","setBigDecimal(findParameter(parameterName),x);","publicvoidsetString(StringparameterName,Stringx)throwsSQLException{","setString(findParameter(parameterName),x);","publicvoidsetBytes(StringparameterName,byte[]x)throwsSQLException{","setBytes(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["{PARAM_EMPTY,\"Ilparametro{0}Ã¨vuoto.\"},","{PARAM_IDX_OUT_RANGE,\"L\'\'indice{0}perilparametroÃ¨fuoridall\'\'intervalloconsentito(1\<=n\<={1}).\"},","{COL_DUPLICATE,\"Nomedicolonnaduplicato:\'\'{0}\'\'.\"},","{COL_MISSING,\"Colonna\'\'{0}\'\'nontrovata.\"},","{COL_VAL_UNMATCH,\"IlconteggiodicolonneevalorinonÃ¨identico.\"},","{COL_INVALID_SIZE,\"Lunghezzanonvalida({0})perlacolonna\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(src!=null){","newStore.writeExpression(src,tableColumns.get(i));","}else{","copyValueInto(i,newStore);","((StoreImpl)this.store).updateFinsh(con,newStore);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["booleanok=getFile(database,name).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voidclose()throwsException{","if(raFile!=null){","raFile.close();","raFile=null;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["intgetOperation(){","returnoperation;","privateExpressionconvertExpressionIfNeeded(Expressionexpr,Expressionother){","if(expr==null||other==null){","returnexpr;","switch(expr.getDataType()){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intscale=readByte();","intsignum=readByte();","for(inti=0;i\<value.length;i++){","value[i]=readInt();","returnnewMutableNumeric(signum,value,scale);","voidwriteTimestamp(longts){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intoffset;//thestartoffsetthetokenintheSQLstring","intlength;//thelengthofthetoken","Stringname;","SQLToken(intvalue,inttokenStart,inttokenEnd){","this.value=value;","this.offset=tokenStart;"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["row=0;","voidnoRow(){","rowSource.noRow();","row=0;","booleanisExpressionsFromThisRowSource(Expressionscolumns){","returnrowSource.isExpressionsFromThisRowSource(columns);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["offset-=2;","removeNodeLastLevel();","while(firstNode&&getUnsignedShort()==0){","offset-=2;","removeNodeLastLevel();//theend0ofanode","if(shift\>=3)"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnLong.MIN_VALUE;","return(long)value;","staticfloatbytes2float(byte[]bytes){","returnFloat.intBitsToFloat(bytes2int(bytes));","staticdoublebytes2double(byte[]bytes){","returnDouble.longBitsToDouble(bytes2long(bytes));"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnnode.addRoot(digit);","node=node.addNode(digit);","if(node.isEmpty()){","if(isLast){","node.addRemainderKey(rowOffset,key,i);","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["classFileIndexextendsIndex{","staticvoidprint(Indexindex,Expressionsexpressions){","IndexScrollStatusscroll=index.createScrollStatus(expressions);","longl;","while((l=scroll.getRowOffset(true))\>=0){","System.out.println(l);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BIGINT\"});","@Override","floatgetFloat(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{STXADD_IDENT_EXPECT,\"Identificatoreatteso.\"},","{STXADD_IDENT_EMPTY,\"Identificatorevuoto.\"},","{STXADD_IDENT_WRONG,\"Identificatoreerrato\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"Operatore\'\'meno\'\'nonvalidoperiltipodidatovarbinary.\"},","{STXADD_FUNC_UNKNOWN,\"Funzionesconosciuta.\"},","{STXADD_PARAM_INVALID_COUNT,\"Totaleparametrinonvalido.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionCharextendsExpressionFunctionReturnString{","finalintgetFunction(){","returnSQLTokenizer.CHAR;","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|"],
"["staticDateTimevalueOf(java.sql.Timedate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIME);","staticDateTimevalueOf(java.sql.Timestampdate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIMESTAMP);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.INT:","returngetIntImpl();","caseSQLTokenizer.BIGINT:","return(int)getLongImpl();","caseSQLTokenizer.REAL:","return(int)getFloatImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticbyte[]long2bytes(longvalue){","byte[]result=newbyte[8];","result[0]=(byte)(value\>\>56);","result[1]=(byte)(value\>\>48);","result[2]=(byte)(value\>\>40);","result[3]=(byte)(value\>\>32);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["ByteBufferbuffer=ByteBuffer.wrap(page,0,pageSize);","synchronized(raFile){","if(fileOffset\<0){","fileOffset=raFile.size();","raFile.position(fileOffset);","raFile.write(buffer);"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["{UNSUPPORTED_TYPE_MAX,\"01000\"},","{UNSUPPORTED_CONVERSION,\"01000\"},","{INSERT_INVALID_LEN,\"01000\"},","{SUBSTR_INVALID_LEN,\"01000\"},","{VALUE_STR_TOOLARGE,\"01000\"},","{VALUE_BIN_TOOLARGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["return;","offset=-1;","finalprivatevoidloopToEndOfNode(LongTreeListEnumlistEnum){","intnextEntry;","intnextOffset1,nextOffset2;","nextOffset1=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["updateFloat(findColumn(columnName),x);","publicvoidupdateDouble(StringcolumnName,doublex)throwsSQLException{","updateDouble(findColumn(columnName),x);","publicvoidupdateBigDecimal(StringcolumnName,BigDecimalx)throwsSQLException{","updateBigDecimal(findColumn(columnName),x);","publicvoidupdateString(StringcolumnName,Stringx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["offset+=daten.length;","voidwriteBytes(byte[]daten,intoff,intlength){","intnewSize=offset+length;","if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,off,page,offset,length);","offset+=length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.TINYINT:","offset++;","break;","caseSQLTokenizer.SMALLINT:","offset+=2;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["store.offset=PAGE_CONTROL_SIZE;","returnstore;","}catch(Throwableth){","throwSmallSQLException.createFromException(th);","staticStoreImplrecreateStore(Tabletable,StorePagestorePage,inttype)throwsException{","StoreImplstore=newStoreImpl(table,storePage,type,-1);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["nextToken(MISSING_PARENTHESIS_R);","returnexpr;","caseSQLTokenizer.TIMESTAMPADD:","token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetResult().getMoney();","finalMutableNumericgetNumeric()throwsException{","returngetResult().getNumeric();","finalObjectgetObject()throwsException{","returngetResult().getObject();","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["intcomp=String.CASE_INSENSITIVE_ORDER.compare(leftStr,rightStr);","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returncomp==0;","caseGREATER:returncomp\>0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatMillis(details.millis,buf);","returnbuf.toString();","case20:","case120://ODBCkannonish;yyyy-mm-ddhh:mi:ss(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["throwSmallSQLException.create(Language.DB_NOT_DIRECTORY,name);","master=Utils.openRaFile(file,readonly);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","StringgetName(){","returnname;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["CommandDrop(Loggerlog,Stringcatalog,Stringname,inttype){","super(log);","this.type=type;","this.catalog=catalog;","this.name=name;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["value=newint[(length+3)/4];","if(complement[0]\<0){","negate(complement);","signum=-1;","}else{","signum=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalbooleanisAfterLast(){","returnrowPos\>1;","finalvoidafterLast(){","rowPos=2;","finalbooleanabsolute(introw){","rowPos=(row\>0)?"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionCharLenextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.CHARLEN;","booleanisNull()throwsException{","returnparam1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCharLen.java|"],
"["returnstore.getObject(offsets[colIdx],dataTypes[colIdx]);","@Override","finalStringgetString(intcolIdx)throwsException{","returnstore.getString(offsets[colIdx],dataTypes[colIdx]);","@Override","finalbyte[]getBytes(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnrowIdx==-1||rowList.size()==0;","booleanisFirst(){","returnrowIdx==0&&rowList.size()\>0;","booleanfirst()throwsException{","rowIdx=-1;","returnnext();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseTypes.VARCHAR:","caseTypes.LONGVARCHAR:","case-11://uniqueidentifier","return\"java.lang.String\";","caseTypes.CLOB:","return\"java.sql.Clob\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["this.rsType=rsType;","this.rsConcurrency=rsConcurrency;","con.testClosedConnection();","finalpublicResultSetexecuteQuery(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getQueryResult();"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["intlock=SQLTokenizer.SELECT;","staticTableViewResultcreateResult(TableViewtableView){","if(tableViewinstanceofTable)","returnnewTableResult((Table)tableView);","returnnewViewResult((View)tableView);","staticTableViewResultgetTableViewResult(RowSourcefrom)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["firstOwnInsert=0x4000000000000000L|insertStorePages.size();","maxFileOffset=table.raFile.size();","beforeFirst();","@Override","finalTableViewgetTableView(){","returntable;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returngroupBy!=null||having!=null||isAggregateFunction;","privatevoidcompileJoin(JoinsingleJoin)throwsException{","if(singleJoin.condition!=null)compileLinkExpressionParams(singleJoin.condition);","if(singleJoin.leftinstanceofJoin){","compileJoin((Join)singleJoin.left);","if(singleJoin.rightinstanceofJoin){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["Stringname=catalog=nextIdentifier();","name=nextIdentiferPart(name);","if(name==catalog)catalog=null;","switch(tokenType.value){","caseSQLTokenizer.DATABASE:","caseSQLTokenizer.TABLE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["signum=1;","break;","for(intv=value.length-1;v\>=0;v--){","inttemp=0;","for(inti=0;i\<4&&0\<length;i++){","temp|=(complement[--length]&0xFF)\<\<(i*8);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["Expression[]params=(style==null)?newExpression[]{value}:newExpression[]{value,style};","setParams(params);","intgetFunction(){","returnSQLTokenizer.CONVERT;","booleanisNull()throwsException{","returnparam1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(inList!=null){","this.inList=inList.toArray();","params=newExpression[this.inList.length+1];","params[0]=left;","System.arraycopy(this.inList,0,params,1,this.inList.length);","}else{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intv=0;","while(v\<value.length&&value[v]==0)v++;","if(v==value.length)returnEMPTY_BYTES;","if(value[v]\<0){","complement=newbyte[(value.length-v)*4+4];","if(signum\<0)"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(num!=null&&(dataType==SQLTokenizer.NUMERIC||dataType==SQLTokenizer.DECIMAL))","num.setScale(getScale());","returnnum;","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(param1.getMoney());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["row[4]=Utils.getShort(SQLTokenizer.getSQLDataType(col.getDataType()));//DATA_TYPE","row[5]=SQLTokenizer.getKeyWord(col.getDataType());//TYPE_NAME","row[6]=Utils.getInteger(col.getColumnSize());//COLUMN_SIZE","row[8]=Utils.getInteger(col.getScale());//DECIMAL_DIGITS","row[9]=Utils.getInteger(10);//NUM_PREC_RADIX","row[10]=Utils.getInteger(col.isNullable()?DatabaseMetaData.columnNullable:DatabaseMetaData.columnNoNulls);//NULLABLE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Table(Databasedatabase,Stringname){","super(name,null);","this.database=database;","indexes=null;","references=null;","staticvoiddrop(Databasedatabase,Stringname)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionLTrimextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.LTRIM;","finalbooleanisNull()throwsException{","returnparam1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["}else{","setPreviousOffset(listEnum);","longresult=listEnum.resultStack[listEnum.stack];","while(true){","intnextEntry=(offset\<0)?-1:getUnsignedShort();","if(nextEntry\>=0){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;","break;","caseSQLTokenizer.FROM:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicstaticfinalStringDB_NOT_DIRECTORY=\"SS-0032\";","publicstaticfinalStringDB_NOTCONNECTED=\"SS-0033\";","publicstaticfinalStringDB_READONLY=\"SS-0034\";","publicstaticfinalStringCONNECTION_CLOSED=\"SS-0070\";","publicstaticfinalStringVIEW_INSERT=\"SS-0100\";","publicstaticfinalStringVIEWDROP_NOT_VIEW=\"SS-0101\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","publicintfindColumn(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["msgBuf.append(name);","if(i\<validValues.length-2)","msgBuf.append(\",\");","else","if(i==validValues.length-2)","msgBuf.append(\"or\");"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","importjava.math.*;","classMutableNumericextendsNumberimplementsMutable{","privatestaticfinallongserialVersionUID=-750525164208565056L;","privateint[]value;","privateintscale;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseTypes.BIT:","caseTypes.BOOLEAN:","return\"java.lang.Boolean\";","caseTypes.BINARY:","caseTypes.VARBINARY:","caseTypes.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["abstractintgetDataType(intcolIdx);","booleaninit(SSConnectioncon)throwsException{returnfalse;}","StringgetAlias(){returnnull;}","abstractTableViewgetTableView();","booleanisExpressionsFromThisRowSource(Expressionscolumns){","for(inti=0;i\<columns.size();i++){"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["char[]buffer=newchar[length-str.length()];","Arrays.fill(buffer,\'\');","returnstr+newString(buffer);","returnstr.substring(0,length);","caseSQLTokenizer.LONGVARBINARY:","returnparam1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnTypes.TIME;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnTypes.TIMESTAMP;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicbooleansupportsIntegrityEnhancementFacility(){","returntrue;","publicbooleansupportsOuterJoins(){","returntrue;","publicbooleansupportsFullOuterJoins(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnreadTimestamp();","caseSQLTokenizer.TIME:","returnreadTime();","caseSQLTokenizer.DATE:","returnreadDate();","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean();","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary())!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ExpressionInSelect(SSConnectioncon,Expressionleft,CommandSelectcmdSel,intoperation){","super(left,(Expressions)null,operation);","this.cmdSel=cmdSel;","this.con=con;","privatevoidloadInList()throwsException{","if(cmdSel.compile(con)){"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["return(alias!=null)?alias:getTableView().name;","booleanhasAlias(){","returnalias!=null;","booleaninit(SSConnectioncon)throwsException{","TableViewtableView=getTableView();","if(tableTimestamp!=tableView.getTimestamp()){"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["throwSmallSQLException.create(Language.ROWS_WRONG_MAX,String.valueOf(max));","maxRows=max;","finalpublicvoidsetEscapeProcessing(booleanenable)throwsSQLException{","checkStatement();","finalpublicintgetQueryTimeout()throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["thrownewjava.lang.UnsupportedOperationException(\"MethodsetCharacterStream()notyetimplemented.\");","publicvoidsetRef(inti,Refx)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetBlob()notyetimplemented.\");","publicvoidsetClob(inti,Clobx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["{RSET_NOT_INSERT_ROW,\"01000\"},","{RSET_ON_INSERT_ROW,\"01000\"},","{ROWSOURCE_READONLY,\"01000\"},","{STMT_IS_CLOSED,\"HY010\"},","{SUBQUERY_COL_COUNT,\"01000\"},","{JOIN_DELETE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["ExpressionNameexpr=newExpressionName(table.columns.get(k).getName());","expr.setFrom(fromEntry,k,table);","columnExpressions.add(position++,expr);","returnposition;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["offset=getPointer();","shift-=16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack]=result;","loopToEndOfNode(listEnum);","}else{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnvalue/10000.0;","publiclonglongValue(){","return(long)(value/10000.0);","publicStringtoString(){","StringBufferbuffer=newStringBuffer();","buffer.append(longValue()).append(\'.\');"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["this.left=left;","this.right=right;","this.operation=operation;","super.setParams(newExpression[]{left,right});","ExpressionArithmetic(Expressionleft,Expressionright,Expressionright2,intoperation){","super(FUNCTION);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Columncolumn=newColumn();","column.setFlag(readByte());","column.setName(readString());","column.setDataType(readShort());","intprecision;","if(tableFormatVersion==TableView.TABLE_VIEW_OLD_VERSION)"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?10000:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(complement==0){","signum=0;","value=EMPTY_INTS;","}else{","value=newint[1];","if(complement\<0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["hour=0;","minute=0;","second=0;","millis=0;","if(idx1==0&&length\>0){","throwSmallSQLException.create(Language.DATETIME_INVALID);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicvoidcancelRowUpdates()throwsSQLException{","testNotInsertRow();","clearRowBuffer();","privatevoidclearRowBuffer(){","if(values!=null){","for(inti=values.length-1;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["c=\'5\';","break;","case\'R\':","c=\'6\';","break;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["publicstaticfinalStringISOLATION_UNKNOWN=\"SS-0581\";","publicstaticfinalStringFLAGVALUE_INVALID=\"SS-0582\";","publicstaticfinalStringARGUMENT_INVALID=\"SS-0583\";","publicstaticfinalStringGENER_KEYS_UNREQUIRED=\"SS-0584\";","publicstaticfinalStringSEQUENCE_HEX_INVALID=\"SS-0585\";","publicstaticfinalStringSEQUENCE_HEX_INVALID_STR=\"SS-0586\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["foreignKeys.add(key);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","Databasedatabase=catalog==null?","con.getDatabase(false):","Database.getDatabase(catalog,con,false);","switch(tableCommandType){"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["break;","case1:","param2=param;","break;","case2:","param3=param;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["JoinScroll(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;","this.condition=condition;","this.left=left;","this.right=right;","if(type==Join.FULL_JOIN){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.BIT_XOR:","rightExpr=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,operation);","break;","caseSQLTokenizer.BETWEEN:","rightExpr=expression(cmd,ExpressionArithmetic.AND);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidsetTables(DataSourcesfrom){","this.tables=from;","finalvoidsetWhere(Expressionwhere){","this.where=where;","finalvoidsetGroup(Expressionsgroup){","this.groupBy=group;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicPreparedStatementprepareStatement(Stringsql,intautoGeneratedKeys)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(autoGeneratedKeys);","returnpr;","publicPreparedStatementprepareStatement(Stringsql,int[]columnIndexes)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["rowPos=(int)rowPosition;","finalbooleanrowInserted(){","returnfalse;","finalbooleanrowDeleted(){","returnfalse;","finalvoidnullRow(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["if(fullReturnCounter\>=0){","do{","if(fullReturnCounter\>=fullRowCount){","returnfalse;","right.next();","}while(isFullNotValid[fullReturnCounter++]);"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["privateintoffset;","MemoryStream(){","puffer=newbyte[256];","voidwriteTo(FileChannelfile)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(puffer,0,offset);","file.write(buffer);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.BOOLEAN:","page=find(page,expr.getBoolean()?2:1,1,nodeList);","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","page=find(page,numericToBinarySortOrder(expr.getNumeric()),nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["{ROW_NOCURRENT,\"Nessunarigacorrente.\"},","{ROWS_WRONG_MAX,\"Numeromassimodirighenonvalido({0}).\"},","{ROW_LOCKED,\"LarigaÃ¨bloccatadaun\'\'altraconnessione.\"},","{ROW_DELETED,\"RigagiÃ\u00a0cancellata.\"},","{SAVEPT_INVALID_TRANS,\"SAVEPOINTnonvalidoperquestatransazione.\"},","{SAVEPT_INVALID_DRIVER,\"SAVEPOINTnonvalidoperquestodriver{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(singleJoin.leftinstanceofJoin){","compileJoin((Join)singleJoin.left);","if(singleJoin.rightinstanceofJoin){","compileJoin((Join)singleJoin.right);","privatevoidcompileLinkExpression(Expressionexpr)throwsException{","if(expr.getType()==Expression.NAME)"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["keywords.put(newInteger(NUMBERVALUE),\"\<number\>\");","staticfinalintPERCENT=\'%\';//37","staticfinalintBIT_AND=\'&\';//38","staticfinalintPARENTHESIS_L=\'(\';//40","staticfinalintPARENTHESIS_R=\')\';//41","staticfinalintASTERISK=\'*\';//42"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_TABLE);","buffer.putInt(TABLE_VIEW_VERSION);","buffer.position(0);","raFile.write(buffer);","StoreImplgetStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewTime(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(StringcolumnName,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["break;","caseSQLTokenizer.UCASE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionUCase();","break;","caseSQLTokenizer.CURDATE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NULL:","returnnewExpressionValue(null,SQLTokenizer.NULL);","caseSQLTokenizer.STRING:","returnnewExpressionValue(token.getName(null),SQLTokenizer.VARCHAR);","caseSQLTokenizer.IDENTIFIER:","Stringname=getIdentifier(token);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnull;","finalvoidscanObjectOffsets(int[]offsets,int[]dataTypes){/*thereisnothingtoscan*/}","finalintgetUsedSize(){","return0;","finallonggetNextPagePos(){","returnnextPagePos;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["page=find(page,intToBinarySortOrder(expr.getInt()),2,nodeList);","break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["StoreImplgetStoreTemp(SSConnectioncon)throwsException{","TableStorePagestorePage=newTableStorePage(con,this,LOCK_NONE,-2);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-2);","StoreImplgetLobStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","if(lobs==null){","lobs=newLobs(this);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())","};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC,params);","SQLExceptioncreateUnspportedConversion(intdataType){","Object[]params={"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","return2+precision*2;","caseSQLTokenizer.SMALLDATETIME:","return21;","default:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["intmillis;","Details(longtime){","intt=(int)(time%86400000);","intd=(int)(time/86400000);","if(t\<0){","t+=86400000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["Language.STXADD_KEYS_REQUIRED,newObject[]{});","StringBuffermsgBuf=newStringBuffer(msgStr);","for(inti=0;i\<validValues.length;i++){","Stringname=SQLTokenizer.getKeyWord(validValues[i]);","if(name==null)name=String.valueOf((char)validValues[i]);","msgBuf.append(name);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["abstractObjectgetObject(intoffset,intdataType)throwsException;","abstractStringgetString(intoffset,intdataType)throwsException;","booleanisValidPage(){","returnfalse;","abstractvoidscanObjectOffsets(int[]offsets,intdataTypes[]);","abstractintgetUsedSize();"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnDouble.parseDouble(readLongString());","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["shift+=16;","listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];","setPreviousOffset(listEnum);","finalprivatevoidsetPreviousOffset(LongTreeListEnumlistEnum){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicfloatgetFloat(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["}else{","if(left.isExpressionsFromThisRowSource(columns1)&&right.isExpressionsFromThisRowSource(columns0)){","leftEx.add(param1);","rightEx.add(param0);","}else{","return0;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(token.value==SQLTokenizer.MINUS)","isMinus=!isMinus;","token=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","}while(token.value==SQLTokenizer.MINUS||token.value==SQLTokenizer.PLUS);","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnexpr.getDataType();","intgetDisplaySize(){","returnexpr.getDisplaySize();","intgetScale(){","returnexpr.getScale();","intgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["returncmd;","caseSQLTokenizer.PARENTHESIS_L:","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","parthesisCount++;","continueSwitch;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.dataType=SQLTokenizer.TINYINT;","else","if(newValueinstanceofShort)","this.dataType=SQLTokenizer.SMALLINT;","else","if(newValueinstanceofInteger)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnset();","caseSQLTokenizer.USE:","token=nextToken(MISSING_EXPRESSION);","Stringname=token.getName(sql);","checkValidIdentifier(name,token);","CommandSetset=newCommandSet(con.log,SQLTokenizer.USE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.day,2,buf);","if(dataType!=SQLTokenizer.DATE){","if(buf.length()\>0)buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return((Boolean)obj).booleanValue()?\"1\":\"0\";","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","returnnewString((byte[])obj);","returnobj.toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["store.writeInt(chars.length);","store.writeChars(chars);","writeLong(store.writeFinsh(null));","StringreadLongString()throwsException{","longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["value=newValue;","break;","caseSQLTokenizer.MONEY:","((Money)value).value=Math.max(((Money)value).value,expr.getMoney());","break;","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["}else{","complement=newbyte[(value.length-v)*4];","offset=0;","intlast=value.length-1;","for(;v\<=last;v++){","intval=(signum\>0)?value[v]:(v==last)?-value[v]:~value[v];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["return0;","}else{","if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleFloatFactor[scale]*signum;","}else","if(value.length==1){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnnull;","finalpublicvoidclearWarnings(){","finalpublicvoidsetCursorName(Stringname)throwsSQLException{","finalvoidsetGeneratedKeys(ResultSetrs){","generatedKeys=rs;","finalpublicResultSetgetGeneratedKeys()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["buf.setLength(buf.length()+digitCount);","if(value\<0)value=-value;","for(inti=1;i\<=digitCount;i++){","buf.setCharAt(buf.length()-i,Utils.digits[value%10]);","value/=10;","privatefinalstaticvoidformatMillis(intmillis,StringBufferbuf){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returngetBoolean(findColumn(columnName));","publicbytegetByte(StringcolumnName)throwsSQLException{","returngetByte(findColumn(columnName));","publicshortgetShort(StringcolumnName)throwsSQLException{","returngetShort(findColumn(columnName));","publicintgetInt(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case104://germandd.mm.yyyy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["commandSelect.compile(con);","returntrue;","returnfalse;","TableViewgetTableView(){","returnview;","voiddeleteRow()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["if(input.length()\>0){","output[idx++]=input.charAt(0);","charlast=\'0\';","for(inti=1;idx\<4&&i\<input.length();i++){","charc=input.charAt(i);","switch(c){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseSQLTokenizer.REAL:","returnTypes.REAL;","caseSQLTokenizer.FLOAT:","returnTypes.FLOAT;","caseSQLTokenizer.DOUBLE:","returnTypes.DOUBLE;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicbooleanequals(Objectobj){","if(!(objinstanceofDateTime))returnfalse;","DateTimevalue=(DateTime)obj;","returnvalue.time==time&&value.dataType==dataType;","StringtoString(intstyle){","if(style\<0)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","publicclassLongTreeListEnum{","long[]resultStack=newlong[4];","int[]offsetStack=newint[4];","intstack;","finalvoidreset(){"]": ["|project://smallsql/src/smallsql/database/LongTreeListEnum.java|"],
"["{DELETE_WO_FROM,\"DeleteRownecessitaun\'\'espressioneFROM.\"},","{INSERT_WO_FROM,\"InsertRownecessitaun\'\'espressioneFROM.\"},","{TABLE_CANT_RENAME,\"Latabella\'\'{0}\'\'nonpuÃ²essererinominata.\"},","{TABLE_CANT_DROP,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'.\"},","{TABLE_CANT_DROP_LOCKED,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'perchÃ©Ã¨inLOCK.\"},","{TABLE_CORRUPT_PAGE,\"Paginadellatabellacorrottaallaposizione:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["publicstaticfinalStringCOL_DUPLICATE=\"SS-0400\";","publicstaticfinalStringCOL_MISSING=\"SS-0401\";","publicstaticfinalStringCOL_VAL_UNMATCH=\"SS-0402\";","publicstaticfinalStringCOL_INVALID_SIZE=\"SS-0403\";","publicstaticfinalStringCOL_WRONG_PREFIX=\"SS-0404\";","publicstaticfinalStringCOL_READONLY=\"SS-0405\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["return;","st.con.log.println(\"updateRow()\");","testNotInsertRow();","finalCommandSelectcommand=getCmd();","command.updateRow(st.con,values);","command.relative(0);//refreshtherow"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["Switch:while(true)","switch(token.value){","caseSQLTokenizer.VALUES:{","token=nextToken(MISSING_PARENTHESIS_L);","cmd.addValues(expressionParenthesisList(cmd));","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidafterLast()throwsException{","rowSource.afterLast();","row=0;","finalintgetRow()throwsException{","returnrow;","finallonggetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["scrollStatus.reset();","row=0;","useSetRowPosition=false;","booleanfirst()throwsException{","beforeFirst();","returnnext();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["Math.max(row+rowList.size(),-1);","returnmove();","finalbooleanrelative(introws){","if(rows==0)return(currentRow!=null);","rowIdx=Math.min(Math.max(rowIdx+rows,-1),rowList.size());","returnmove();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["case2://ANSIyy.mm.dd","formatNumber(details.year%100,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnbuf.toString();","publicbooleanequals(Objectobj){","if(!(objinstanceofDateTime))returnfalse;","DateTimevalue=(DateTime)obj;","returnvalue.time==time&&value.dataType==dataType;","StringtoString(intstyle){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["inti=(int)(key%table.length);","Entrye=table[i];","while(true){","if(e==null)","returnnull;","if(e.key==key)"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["group(cmd);","break;","caseSQLTokenizer.HAVING:","having(cmd);","break;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintMINUS=\'-\';//45","staticfinalintPOINT=\'.\';//46","staticfinalintSLACH=\'/\';//47","staticfinalintLESSER=\'\<\';//60","staticfinalintEQUALS=\'=\';//61","staticfinalintGREATER=\'\>\';//62"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return6;","caseSQLTokenizer.INT:","return10;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:","return19;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalStringgetString(intcolIdx)throwsException{","returncurrentDS.getString(colIdx);","finalbyte[]getBytes(intcolIdx)throwsException{","returncurrentDS.getBytes(colIdx);","finalintgetDataType(intcolIdx){","returncurrentDS.getDataType(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(lastRowOffset\>=0){","rowSource.setRowPosition(lastRowOffset);","}else{","rowSource.beforeFirst();","if(rowSource.next()){","row++;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["publicstaticfinalStringUNSUPPORTED_TYPE_CONV=\"SS-0284\";","publicstaticfinalStringUNSUPPORTED_TYPE_SUM=\"SS-0285\";","publicstaticfinalStringUNSUPPORTED_TYPE_MAX=\"SS-0286\";","publicstaticfinalStringUNSUPPORTED_CONVERSION=\"SS-0287\";","publicstaticfinalStringINSERT_INVALID_LEN=\"SS-0288\";","publicstaticfinalStringSUBSTR_INVALID_LEN=\"SS-0289\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(newValueinstanceofString)","this.dataType=SQLTokenizer.VARCHAR;","else","if(newValueinstanceofByte)","this.dataType=SQLTokenizer.TINYINT;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["StringpropsString=url.substring(idx2+1).replace(\'&\',\';\');","StringTokenizertok=newStringTokenizer(propsString,\";\");","while(tok.hasMoreTokens()){","StringkeyValue=tok.nextToken().trim();","if(keyValue.length()\>0){","idx1=keyValue.indexOf(\'=\');"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["output.writeByte(1);","output.writeLong(((Long)value).longValue());","}else","if(valueinstanceofLongTreeList){","output.writeByte(2);","((LongTreeList)value).save(output);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["return((Number)obj).intValue()!=0;","caseSQLTokenizer.REAL:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue()!=0;","default:returnUtils.string2boolean(obj.toString());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case105://italianodd-mm-yyyy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["formatNumber(details.year%100,2,buf);","returnbuf.toString();","case105://italianodd-mm-yyyy","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnreadBoolean()?\"1\":\"0\";","caseSQLTokenizer.BOOLEAN:","returnString.valueOf(readBoolean());","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2hex(readBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.SMALLMONEY:","return10;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:","return19;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","token=nextToken();","intdisplaySize;","if(token==null||token.value!=SQLTokenizer.PARENTHESIS_L){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnreadInt()/10000.0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().doubleValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicbooleanownUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanownDeletesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanownInsertsAreVisible(inttype){","returnsupportsResultSetType(type);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"getUnicodeStream\");","publicInputStreamgetBinaryStream(intcolumnIndex)throwsSQLException{","returnnewByteArrayInputStream(getBytes(columnIndex));","publicStringgetString(StringcolumnName)throwsSQLException{","returngetString(findColumn(columnName));","publicbooleangetBoolean(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["value[0]=-complement;","signum=-1;","}else{","value[0]=complement;","signum=1;","MutableNumeric(intcomplement,intscale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["dataType=getDataType(left,right);","switch(dataType){","caseSQLTokenizer.BOOLEAN:","switch(operation){","caseIN:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(StringcolumnName)throwsSQLException{","returngetObject(findColumn(columnName));","publicintfindColumn(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return(int)readLong();","caseSQLTokenizer.REAL:","return(int)readFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(int)readDouble();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buf.append(\'.\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case104://germandd.mm.yyyy","formatNumber(details.day,2,buf);","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["MemoryStreaminput=newMemoryStream();","FileIndexNodenode=newFileIndexNode(getUnique(),(char)input.readShort(),file);","node.fileOffset=offset;","node.load(store);","returnnode;","staticFileIndexNodeloadRootNode(booleanunique,FileChannelfile,longoffset)throwsException{"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["finalpublicResultSetgetGeneratedKeys()throwsSQLException{","if(generatedKeys==null)","throwSmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);","returngeneratedKeys;","finalpublicintexecuteUpdate(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["page=add(page,rowOffset,intToBinarySortOrder(expr.getInt()),isLastValues,2);","break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnobj.toBigDecimal(scale);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(intcolumnIndex)throwsSQLException{","try{","byte[]obj=getValue(columnIndex).getBytes();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["thrownoCurrentRow();","StringgetString(intoffset,intdataType)throwsException{","thrownoCurrentRow();","voidscanObjectOffsets(int[]offsets,int[]dataTypes){","intgetUsedSize(){","return0;"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["packagesmallsql.database;","classCommandUpdateextendsCommandSelect{","privateExpressionssources=newExpressions();","privateExpression[]newRowSources;","CommandUpdate(Loggerlog){","super(log);"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["privateCommandCreateDatabasecreateProcedure()throwsSQLException{","Object[]param={\"CreateProcedure\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommanddrop()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_DROP);","Stringcatalog;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnull;","publicvoidsetDate(intparameterIndex,Datex,Calendarcal)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetTime()notyetimplemented.\");","publicvoidsetTimestamp(intparameterIndex,Timestampx,Calendarcal)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["packagesmallsql.database;","importsmallsql.database.language.Language;","finalclassUnionAllextendsDataSource{","privatefinalDataSourcesdataSources=newDataSources();","privateintdataSourceIdx;","privateDataSourcecurrentDS;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseSQLTokenizer.SELECT:","returnselect();","caseSQLTokenizer.DELETE:","returndelete();","caseSQLTokenizer.INSERT:","returninsert();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["cmd.verifyParams();","if(getMaxRows()!=0&&(top==-1||top\>getMaxRows()))","cmd.setMaxRows(getMaxRows());","cmd.execute(con,this);","publicvoidsetNull(intparameterIndex,intsqlType)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["carryover/=quotient;","if(carryover\>2147483648L||//2147483648L==Integer.MAX_VALUE+1","(carryover==2147483648L&&(value[valueLength-1]%2==1))){","inti=valueLength-1;","booleanisCarryOver=true;","while(i\>=0&&isCarryOver)"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{ROW_NOCURRENT,\"01000\"},","{ROWS_WRONG_MAX,\"01000\"},","{ROW_LOCKED,\"01000\"},","{ROW_DELETED,\"01000\"},","{SAVEPT_INVALID_TRANS,\"01000\"},","{SAVEPT_INVALID_DRIVER,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(rowList!=null){","longrowPosition=rowList.getNext(longListEnum);","if(rowPosition!=-1){","right.setRowPosition(rowPosition);","returntrue;","rowList=null;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["numeric.setScale(0);","returnnumeric.longValue();","return(signum\>0)?Long.MAX_VALUE:Long.MIN_VALUE;","publicfloatfloatValue(){","if(value.length==0||signum==0){","return0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;","caseSQLTokenizer.COMMA:","continuenextCol;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicclassExpressionFunctionSoundexextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.SOUNDEX;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["publicclassExpressionFunctionLTrimextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.LTRIM;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["divImpl(factor);","factor=1;","divImpl(factor);","intgetSignum(){","returnsignum;","voidsetSignum(intsignum){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicbooleansupportsSubqueriesInQuantifieds(){","returntrue;","publicbooleansupportsCorrelatedSubqueries(){","returntrue;","publicbooleansupportsUnion(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["default:thrownewError();","privatevoidinitValue(Expressionexpr)throwsException{","dataType=expr.getDataType();","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["isSetFrom=true;","expr.setFrom(fromEntry,colIdx,table);","if(!isSetFrom){","throwSmallSQLException.create(Language.COL_INVALID_NAME,expr.getName());","compileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionParams(Expressionexpr)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalprivatevoiddivImpl(intquotient){","if(quotient==1)return;","if(quotient\<0){","quotient=-quotient;","signum=-signum;","intvalueLength=value.length;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["buffer.putInt(MAGIC_TABLE);","buffer.putInt(TABLE_VIEW_VERSION);","buffer.position(0);","raFile.write(buffer);","StoreImplgetStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","TableStorePagestorePage=requestLock(con,pageOperation,filePos);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicvoiddeleteRow()throwsSQLException{","st.con.log.println(\"deleteRow()\");","testNotInsertRow();","getCmd().deleteRow(st.con);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["bytes[offset++]=(byte)(value\>\>40);","bytes[offset++]=(byte)(value\>\>32);","bytes[offset++]=(byte)(value\>\>24);","bytes[offset++]=(byte)(value\>\>16);","bytes[offset++]=(byte)(value\>\>8);","bytes[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","if(row\<=rowList.size()){","rowIdx=row-1;","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["super(FUNCTION);","this.left=left;","this.operation=operation;","super.setParams(newExpression[]{left});","ExpressionArithmetic(Expressionleft,Expressionright,intoperation){","super(FUNCTION);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicclassMoneyextendsNumberimplementsMutable{","privatestaticfinallongserialVersionUID=-620300937494609089L;","longvalue;","privateMoney(){/*shouldbeempty*/}","publicMoney(doublevalue){","this.value=(long)(value*10000);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["voidsetParamAt(Expressionparam,intidx){","super.setParamAt(param,idx);","intp=idx/2;","if(p\>=cases.size()){","elseResult=param;","return;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["continueNextRow;","addGroupRow();","accumulateRow();","if(getRowCount()==0&&groupBy==null){","addGroupRow();","beforeFirst();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["return\"database\";","publicbooleanisCatalogAtStart(){","returntrue;","publicStringgetCatalogSeparator(){","return\".\";","publicbooleansupportsSchemasInDataManipulation(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["switch(intervalType){","caseSQLTokenizer.MILLISECOND:","returnSQLTokenizer.SQL_TSI_FRAC_SECOND;","caseSQLTokenizer.SECOND:","returnSQLTokenizer.SQL_TSI_SECOND;","caseSQLTokenizer.MINUTE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["SSPreparedStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,rsType,rsConcurrency);","con.log.println(sql);","SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);","top=cmd.getMaxRows();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseSQLTokenizer.DATE:","returngetDate(time);","caseSQLTokenizer.TIME:","returngetTime(time);","default:","returngetTimestamp(time);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewSmallSQLException(e,message,sqlState);","staticSQLExceptioncreateFromException(StringmessageCode,Objectparam0,","Throwablee)","Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(e,message,sqlState);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["writeShort(column.getDataType());","writeInt(column.getPrecision());","writeByte(column.getScale());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","Stringdef=column.getDefaultDefinition();","writeBoolean(def==null);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row--;","if(currentInsertedRow()\>=0){","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;","longrowPosition=scrollStatus.getRowOffset(false);","if(rowPosition\>=0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["ExpressionNameexp=(ExpressionName)col;","if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;","isUpdateNeeded=true;","continue;","if(isUpdateNeeded){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["privateCommandalter()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_ALTER);","Stringcatalog;","StringtableName=catalog=nextIdentifier();","switch(tokenType.value){","caseSQLTokenizer.TABLE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.util.List;","finalclassTableResultextendsTableViewResult{","finalprivateTabletable;","privateListinsertStorePages;","privatelongfirstOwnInsert;","privatelongmaxFileOffset;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'T\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","writeLongBinary(expr.getBytes());","break;","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"NichtunterstÃ¼tzteFunktion:{0}\"},","{CANT_LOCK_FILE,\"DieDatei\'\'{0}\'\'kannnichtgelocktwerden.EineeinzelneSmallSQLDatenbankkannnurfÃ¼reineneinzigenProzessgeÃ¶ffnetwerden.\"},","{DB_EXISTENT,\"DieDatenbank\'\'{0}\'\'existiertbereits.\"},","{DB_NONEXISTENT,\"DieDatenbank\'\'{0}\'\'existiertnicht.\"},","{DB_NOT_DIRECTORY,\"DasVerzeichnis\'\'{0}\'\'istkeineSmallSQLDatenbank.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returntrue;","if(currentInsertedRow()\<insertedRows.size()-1){","row++;","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;","if(lastRowOffset\>=0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["intidx=addInternalExpressionFromGroupBy(left);","ExpressionNameright=newExpressionName(null);","right.setFrom(this,idx,newColumnExpression(left));","Expressionexpr=newExpressionArithmetic(left,right,ExpressionArithmetic.EQUALS_NULL);","currentGroup=(currentGroup==null)?","expr:"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnreadLongBinary();","caseSQLTokenizer.UNIQUEIDENTIFIER:","bytes=newbyte[16];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Stringobj=getValue(i).getString();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returngetResult().getNumeric();","finalObjectgetObject()throwsException{","returngetResult().getObject();","finalStringgetString()throwsException{","returngetResult().getString();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["con.setCatalog(args[0]);","System.out.println(\"\\tVersion:\"+con.getMetaData().getDatabaseProductVersion());","System.out.println(\"\\tCurrentdatabase:\"+con.getCatalog());","System.out.println();","System.out.println(\"\\tUsetheUSEcommandtochangethedatabasecontext.\");","System.out.println(\"\\tType2timesENTERtoexecuteanySQLcommand.\");"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["caseSQLTokenizer.REAL:","return(int)readFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(int)readDouble();","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfalse;","publicbooleandeletesAreDetected(inttype){","returnsupportsResultSetType(type);","publicbooleaninsertsAreDetected(inttype){","returnsupportsResultSetType(type);","publicbooleansupportsBatchUpdates(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["importjava.util.Locale;","importjava.util.Map;","importjava.util.Set;","publicclassLanguage{","publicstaticfinalStringCUSTOM_MESSAGE=\"SS-0000\";","publicstaticfinalStringUNSUPPORTED_OPERATION=\"SS-0001\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["chardigit=(char)(key\>\>(i\<\<4));","node=node.getChildNode(digit);","if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);","if(equals(node.getRemainderValue(),key,i)){","returnnode;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["tablePattern+=Utils.TABLE_VIEW_EXTENTION;","for(inti=0;i\<dirs.length;i++){","Stringname=dirs[i].getName();","if(Utils.like(name,tablePattern)){","list.add(name.substring(0,name.length()-Utils.TABLE_VIEW_EXTENTION.length()));","returnlist;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["MutableNumeric(intcomplement,intscale){","this(complement);","this.scale=scale;","MutableNumeric(longcomplement){","if(complement==0){","signum=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(size+count\>=data.length){","resize(size+count);","System.arraycopy(cols.data,0,data,size,count);","size+=count;","finalvoidclear(){","size=0;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["caseSQLTokenizer.NOT:","token=nextToken(MISSING_BETWEEN_IN);","previousToken();","isNot=true;","continue;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return(int)((DateTime)obj).getTimeMillis();","default:","Stringstr=obj.toString().trim();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returngetCmd().findColumn(columnName)+1;","publicReadergetCharacterStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Readerobject\");","publicvoidupdateObject(intcolumnIndex,Objectx,intscale)throwsSQLException{","updateValue(columnIndex,x,-1);","publicvoidupdateObject(intcolumnIndex,Objectx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","classGroupResultextendsMemoryResult{","privateExpressioncurrentGroup;//Validateifthecurrentrowofcmdispartofthecurrentgroup","privateRowSourcefrom;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["caseConnection.TRANSACTION_NONE:","caseConnection.TRANSACTION_READ_UNCOMMITTED:","caseConnection.TRANSACTION_READ_COMMITTED:","caseConnection.TRANSACTION_REPEATABLE_READ:","caseConnection.TRANSACTION_SERIALIZABLE:","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["page[offset++]=(byte)(c\>\>8);","char[]readChars(intlength){","char[]daten=newchar[length];","for(inti=0;i\<length;i++){","daten[i]=(char)((page[offset++]&0xFF)|(page[offset++]\<\<8));","returndaten;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateExpressionValue[]values;","privateintfetchDirection;","privateintfetchSize;","SSResultSet(SSStatementst,CommandSelectcmd){","this.st=st;","metaData.columns=cmd.columnExpressions;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(sql.length\>k+1){","charcc=sql[k+1];","if((cc\>=\'0\')&&cc\<=\'9\')break;//isanumber--\>break","}else{","for(;k\<i;k++){","charcc=sql[k];"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnreadLongString();","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfrom.relative(rows);","finalintgetRow()throwsException{","introw=from.getRow();","if(maxRows\>=0&&row\>maxRows)return0;","returnrow;","finalvoidupdateRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["fileOffset=-1;","@Override","protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewFileIndexNode(unique,digit,file);","voidsave()throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,fileOffset);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["break;","caseMIN:","if(value==null){","if(expr.isNull())","dataType=expr.getDataType();","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["catch(IllegalArgumentExceptione){","returnnewLanguage();//defaulttoEnglish","privatestaticLanguagegetFromLocaleTree(StringlocaleStr)","throwsIllegalArgumentException{","Stringpart=localeStr;","while(true){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionFunction))returnfalse;","return((ExpressionFunction)expr).getFunction()==getFunction();","SQLExceptioncreateUnspportedDataType(intdataType){","Object[]params={"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["returnSQLTokenizer.DOUBLE;","staticintgetDataType(inttypeLeft,inttypeRight){","if(typeLeft==typeRight)returntypeLeft;","intdataTypeIdx=Math.min(Utils.indexOf(typeLeft,DatatypeRange),Utils.indexOf(typeRight,DatatypeRange));","if(dataTypeIdx\<0)thrownewError(\"getDataType():\"+typeLeft+\",\"+typeRight);","returnDatatypeRange[dataTypeIdx];"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["abstractMutableNumericgetNumeric(intcolIdx)throwsException;","abstractObjectgetObject(intcolIdx)throwsException;","abstractStringgetString(intcolIdx)throwsException;","abstractbyte[]getBytes(intcolIdx)throwsException;","abstractintgetDataType(intcolIdx);","booleaninit(SSConnectioncon)throwsException{returnfalse;}"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["returngetLong()!=0;","caseSQLTokenizer.REAL:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getFloat()==right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintLONG=361;","staticfinalintCLOB=362;","staticfinalintNCLOB=363;","staticfinalintUNIQUEIDENTIFIER=370;","staticfinalintJAVA_OBJECT=371;","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["nextToken(MISSING_NULL);","operation++;","leftExpr=newExpressionArithmetic(leftExpr,operation);","break;","caseSQLTokenizer.NOT:","token=nextToken(MISSING_BETWEEN_IN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionLog10extendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.LOG10;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.log(param1.getDouble())/divisor;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLog10.java|"],
"["returnstore;","}catch(Throwableth){","throwSmallSQLException.createFromException(th);","staticStoreImplrecreateStore(Tabletable,StorePagestorePage,inttype)throwsException{","StoreImplstore=newStoreImpl(table,storePage,type,-1);","store.page=storePage.page;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateinttype;","RowSourceleft;//thelefttable,vieworrowsourceofthejoin","RowSourceright;","privatebooleanisAfterLast;","privateLongLongListrowPositions;//neededforgetRowPosition()andsetRowPosition()","privateintrow;//currentrownumber"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["publicbooleansupportsColumnAliasing(){","returntrue;","publicbooleannullPlusNonNullIsNull(){","returntrue;","publicbooleansupportsConvert(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["voidwriteBytes(byte[]value,intoff,intlength){","verifyFreePufferSize(length);","System.arraycopy(value,off,puffer,offset,length);","offset+=length;","privatevoidverifyFreePufferSize(intfreeSize){","intminSize=offset+freeSize;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["Listcatalogs=newArrayList();","FilebaseDir=(database!=null)?","database.directory.getParentFile():","newFile(\".\");","Filedirs[]=baseDir.listFiles();","if(dirs!=null)"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","StringuuidStr=expr.getString();","if(uuidStr.compareTo((String)value)\>0)value=uuidStr;","break;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?1:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(t==tables.size())","throwSmallSQLException.create(Language.COL_WRONG_PREFIX,tableAlias);","}else{","booleanisSetFrom=false;","for(intt=0;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicshortgetShort(StringparameterName)throwsSQLException{","returngetShort(findParameter(parameterName));","publicintgetInt(StringparameterName)throwsSQLException{","returngetInt(findParameter(parameterName));","publiclonggetLong(StringparameterName)throwsSQLException{","returngetLong(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["staticfinalintCOMMITTED=244;","staticfinalintUNCOMMITTED=245;","staticfinalintREPEATABLE=246;","staticfinalintSERIALIZABLE=247;","staticfinalintCONSTRAINT=250;","staticfinalintPRIMARY=251;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["default:","returnintervalType;","ExpressionFunctionTimestampDiff(intintervalType,Expressionp1,Expressionp2){","interval=mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});","intgetFunction(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["{TABLE_CANT_RENAME,\"01000\"},","{TABLE_CANT_DROP,\"01000\"},","{TABLE_CANT_DROP_LOCKED,\"01000\"},","{TABLE_CORRUPT_PAGE,\"01000\"},","{TABLE_MODIFIED,\"01000\"},","{TABLE_DEADLOCK,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.create(Language.RSET_READONLY);","publicvoidmoveToCurrentRow()throwsSQLException{","isInsertRow=false;","clearRowBuffer();","if(values==null){","getUpdateValue(1);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseMAGIC_TABLE:","caseMAGIC_VIEW:","break;","default:","throwSmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID,fileName);","if(version\>TABLE_VIEW_VERSION)"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","MemoryStreaminput=newMemoryStream();","FileIndexNodenode=newFileIndexNode(getUnique(),(char)input.readShort(),file);","node.fileOffset=offset;","node.load(store);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["{BYTEARR_INVALID_SIZE,\"Invalidbytearraysize{0}forUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjectwasdeleted.\"},","{PARAM_CLASS_UNKNOWN,\"Unknownparameterclass:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}isempty.\"},","{PARAM_IDX_OUT_RANGE,\"Parameterindex{0}outofrange.Thevaluemustbebetween1and{1}.\"},","{COL_DUPLICATE,\"Thereisaduplicatedcolumnname:\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Expressionsexprs=commandSelect.columnExpressions;","for(intc=0;c\<exprs.size();c++){","Expressionexpr=exprs.get(c);","if(exprinstanceofExpressionName){","Columncolumn=((ExpressionName)expr).getColumn().copy();","column.setName(expr.getAlias());"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["publicbooleansupportsNamedParameters(){","returntrue;","publicbooleansupportsMultipleOpenResults(){","returntrue;","publicbooleansupportsGetGeneratedKeys(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["chars[6]=digits[(daten[offset+0]\>\>4)&0x0F];","chars[7]=digits[(daten[offset+0])&0x0F];","chars[9]=digits[(daten[offset+5]\>\>4)&0x0F];","chars[10]=digits[(daten[offset+5])&0x0F];","chars[11]=digits[(daten[offset+4]\>\>4)&0x0F];","chars[12]=digits[(daten[offset+4])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["return(identity?1:0)|","(caseSensitive?2:0)|","(nullable?4:0);","voidsetFlag(intflag){","identity=(flag&1)\>0;","caseSensitive=(flag&2)\>0;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseEQUALS_NULL:","caseEQUALS:returnleft.getFloat()==right.getFloat();","caseGREATER:returnleft.getFloat()\>right.getFloat();","caseGRE_EQU:returnleft.getFloat()\>=right.getFloat();","caseLESSER:returnleft.getFloat()\<right.getFloat();","caseLES_EQU:returnleft.getFloat()\<=right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{UNION_DIFFERENT_COLS,\"DifferentSELECToftheUNIONhavedifferentcolumncount:{0}and{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'alreadyexists.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'doesnotexist.\"},","{INDEX_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidIndexstore.\"},","{INDEX_CORRUPT,\"ErrorinloadingIndex.Indexfileiscorrupt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ToomanyequalsentryinIndex.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","returnDateTime.parse(param1.getString());","returnparam1.getLong();","finalintgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["signum=0;","for(inti=0;i\<complement.length;i++)","if(complement[i]!=0){","signum=1;","break;","for(intv=value.length-1;v\>=0;v--){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseTypes.SMALLINT:","caseTypes.INTEGER:","return\"java.lang.Integer\";","caseTypes.BIT:","caseTypes.BOOLEAN:","return\"java.lang.Boolean\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["checkValidIdentifier(name,token);","CommandSetset=newCommandSet(con.log,SQLTokenizer.USE);","set.name=name;","returnset;","caseSQLTokenizer.EXECUTE:","returnexecute();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.DATE);","publicvoidsetTime(intparameterIndex,Timex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIME);","publicvoidsetTimestamp(intparameterIndex,Timestampx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","return((Number)obj).longValue()*10000;","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticprivatevoidaddKeyWord(Stringkeyword,intvalue){","keywords.put(Utils.getInteger(value),keyword);","char[]letters=keyword.toCharArray();","if(searchTree==null){","searchTree=newSearchNode();","searchTree.letter=(char)(letters[0]|0x20);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["fullRightRowCounter=0;","isOuterValid=true;","result=left.next();","if(result){","result=right.first();","if(!result){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.BOOLEAN:","returngetBoolean()?1:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["indexes.drop(database);","booleanok=getFile(database).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","@Override","voidclose()throwsException{","if(indexes!=null)"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["throwcreateSyntaxError(token,MISSING_ON);","privateRowSourcerowSource(Commandcmd,DataSourcestables,intparenthesis)throwsSQLException{","RowSourcefromSource=null;","fromSource=tableSource(cmd,tables);","while(true){","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIMESTAMP);","publicvoidsetAsciiStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.LONGVARCHAR,length);","publicvoidsetUnicodeStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["buffer.write(bytes);","returnbuffer.toByteArray();","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intcount=param2.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["longgetLong()throwsException{","returngetInt();","floatgetFloat()throwsException{","returngetInt();","doublegetDouble()throwsException{","returngetInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["{STXADD_ADDITIONAL_TOK,\"ZusÃ¤tzlicheZeichennachdemEndedesSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Bezeichnererwartet.\"},","{STXADD_IDENT_EMPTY,\"LeererBezeichner.\"},","{STXADD_IDENT_WRONG,\"UngÃ¼ltigerBezeichner\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"UngÃ¼ltigerOperatorMinusfÃ¼rDatentypVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"UnbekannteFunktion.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["staticfinalintREAD=243;","staticfinalintCOMMITTED=244;","staticfinalintUNCOMMITTED=245;","staticfinalintREPEATABLE=246;","staticfinalintSERIALIZABLE=247;","staticfinalintCONSTRAINT=250;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","switch(operation){","caseIN:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["abstractvoidwriteMagic(FileChannelraFile)throwsException;","StringgetName(){","returnname;","longgetTimestamp(){","returntimestamp;","finalintfindColumnIdx(StringcolumnName){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["privateStringalias;","privatelongtableTimestamp;","intlock=SQLTokenizer.SELECT;","staticTableViewResultcreateResult(TableViewtableView){","if(tableViewinstanceofTable)","returnnewTableResult((Table)tableView);"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["{COL_VAL_UNMATCH,\"IlconteggiodicolonneevalorinonÃ¨identico.\"},","{COL_INVALID_SIZE,\"Lunghezzanonvalida({0})perlacolonna\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Ilprefissodicolonna\'\'{0}\'\'noncoincideconunaliasonomeditabellausatonellaquery.\"},","{COL_READONLY,\"Lacolonna\'\'{0}\'\'Ã¨disolalettura.\"},","{COL_INVALID_NAME,\"Nomedicolonnanonvalido\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Indicedicolonnafuoridall\'\'intervallovalido:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["booleanisLeap;","do{","isLeap=false;","dayofyear=day=d-((year-1970)*365+(year/4)-(year/100)+(year/400)-477);","if(isLeapYear(year)){","if(day\<59){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["results.set(p,param);","}else{","cases.set(p,param);","finalintgetFunction(){","returnSQLTokenizer.CASE;","finalbooleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl()*10000;","caseSQLTokenizer.BIGINT:","returngetLongImpl()*10000;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["raFile=null;","if(lobs!=null){","lobs.close();","lobs=null;","privatevoidwrite(SSConnectioncon)throwsException{","raFile=createFile(con,database);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseLESSER:","caseLES_EQU:","caseUNEQUALS:","caseBETWEEN:","caseOR:","caseAND:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalvoiddiv(intquotient){","mul(100000);","scale+=5;","divImpl(quotient);","finalprivatevoiddivImpl(intquotient){","if(quotient==1)return;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(expr.getDataType()){","caseSQLTokenizer.UNIQUEIDENTIFIER:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnMoney.createFromUnscaledValue(readInt()).toString();","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().toString();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["noRow();","returnresult;","voidafterLast(){","isAfterLast=true;","noRow();","intgetRow(){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["staticlongdoubleToMoney(doublevalue){","if(value\<0)","return(long)(value*10000-0.5);","return(long)(value*10000+0.5);","staticintindexOf(charvalue,char[]str,intoffset,intlength){","value|=0x20;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["Object[]param={\"CreateIndex\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandCreateDatabasecreateProcedure()throwsSQLException{","Object[]param={\"CreateProcedure\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommanddrop()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicintgetMaxColumnsInSelect(){","return0;","publicintgetMaxColumnsInTable(){","return0;","publicintgetMaxConnections(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["offset-=2;","removeNodeLastLevel();//theend0ofanode","if(shift\>=3)","break;","offset=offset1;","offset1=offset2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["{COL_VAL_UNMATCH,\"DieSpaltenanzahlundWerteanzahlistnichtidentisch.\"},","{COL_INVALID_SIZE,\"UngÃ¼ltigeSpaltengrÃ¶ÃŸe{0}fÃ¼rSpalte\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"DerSpaltenprefix\'\'{0}\'\'passtzukeinemTabellennamenoderAliasnamenindieserAbfrage.\"},","{COL_READONLY,\"DieSpalte{0}istschreibgeschÃ¼tzt.\"},","{COL_INVALID_NAME,\"UngÃ¼ltigerSpaltenname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"SpaltenindexauÃŸerhalbdesGÃ¼ltigkeitsbereiches:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["if(type==Join.FULL_JOIN){","if(fullRightRowCounter\>=isFullNotValid.length){","boolean[]temp=newboolean[fullRightRowCounter\<\<1];","System.arraycopy(isFullNotValid,0,temp,0,fullRightRowCounter);","isFullNotValid=temp;","if(!result){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["num.mul(left.getInt());","returnnum;","}else{","MutableNumericnum=left.getNumeric();","num.mul(right.getNumeric());","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalintgetFunction(){returnSQLTokenizer.ATAN2;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.atan2(param1.getDouble(),param2.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionATan2.java|"],
"["caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","returnInteger.MAX_VALUE;","caseSQLTokenizer.NUMERIC:","returnprecision+(scale\>0?2:1);"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["privatebyte[]toByteArray(){","byte[]bytes=newbyte[8];","intoffset=0;","bytes[offset++]=(byte)(value\>\>56);","bytes[offset++]=(byte)(value\>\>48);","bytes[offset++]=(byte)(value\>\>40);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["break;","c|=0x20;//caseinsensitive","while(node!=null&&node.letter!=c)node=node.nextEntry;","if(node!=null){","value=node.value;","node=node.nextLetter;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["commandSelect.afterLast();","booleanabsolute(introw)throwsException{","returncommandSelect.absolute(row);","booleanrelative(introws)throwsException{","returncommandSelect.relative(rows);","intgetRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["classMemoryStream{","privatebyte[]puffer;","privateintoffset;","MemoryStream(){","puffer=newbyte[256];","voidwriteTo(FileChannelfile)throwsIOException{"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returnchannel;","staticfinalExpressionsgetExpressionNameFromTree(Expressiontree){","Expressionslist=newExpressions();","getExpressionNameFromTree(list,tree);","returnlist;","privatestaticfinalvoidgetExpressionNameFromTree(Expressionslist,Expressiontree){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(newValue==null)","this.dataType=SQLTokenizer.NULL;","else","if(newValueinstanceofString)","this.dataType=SQLTokenizer.VARCHAR;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(rows==0)return(currentRow!=null);","rowIdx=Math.min(Math.max(rowIdx+rows,-1),rowList.size());","returnmove();","finalintgetRow(){","returncurrentRow==null?0:rowIdx+1;","finallonggetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseEQUALS_NULL:","caseEQUALS:returncomp==0;","caseGREATER:returncomp\>0;","caseGRE_EQU:returncomp\>=0;","caseLESSER:returncomp\<0;","caseLES_EQU:returncomp\<=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returngetByte(findColumn(columnName));","publicshortgetShort(StringcolumnName)throwsSQLException{","returngetShort(findColumn(columnName));","publicintgetInt(StringcolumnName)throwsSQLException{","returngetInt(findColumn(columnName));","publiclonggetLong(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privateExpressionconvertExpressionIfNeeded(Expressionexpr,Expressionother){","if(expr==null||other==null){","returnexpr;","switch(expr.getDataType()){","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.database=database;","this.references=foreignKeys;","newIndexes.create(con,database,this);","if(existIndexes==null){","this.indexes=newIndexes;","}else{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalbooleanisFirst(){","returnrow==1&&isCurrentRow;","finalbooleanisLast()throwsException{","if(!isCurrentRow)returnfalse;","longrowPos=rowSource.getRowPosition();","booleanisNext=next();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["this.rootPage=rootPage;","IndexScrollStatuscreateScrollStatus(Expressionsexpressions){","returnnewIndexScrollStatus(rootPage,expressions);","finalObjectfindRows(Expressionsexpressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;","intcount=expressions.size();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{","returngetInt()!=0;","intgetInt()throwsException{","if(isNull())return0;","switch(interval){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["set(value,_dataType);","this.length=length;","finalvoidset(ObjectnewValue,intnewDataType)throwsSQLException{","this.value=newValue;","this.dataType=newDataType;","if(dataType\<0){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["isUpdatable=st!=null&&st.rsConcurrency==CONCUR_UPDATABLE&&!cmd.isGroupResult();","publicvoidclose(){","st.con.log.println(\"ResultSet.close\");","cmd=null;","publicbooleanwasNull(){","returnwasNull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["publicvoidupdateBinaryStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateBinaryStream(findColumn(columnName),x,length);","publicvoidupdateCharacterStream(StringcolumnName,Readerx,intlength)throwsSQLException{","updateCharacterStream(findColumn(columnName),x,length);","publicvoidupdateObject(StringcolumnName,Objectx,intscale)throwsSQLException{","updateObject(findColumn(columnName),x,scale);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalvoidsetRowPosition(longrowPosition)throwsException{","left.setRowPosition(rowPositions.get1((int)rowPosition));","right.setRowPosition(rowPositions.get2((int)rowPosition));","finalbooleanrowInserted(){","returnleft.rowInserted()||right.rowInserted();","finalbooleanrowDeleted(){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(isNull())returnnull;","Stringstr=param1.getString();","intcount=param2.getInt();","StringBufferbuffer=newStringBuffer();","for(inti=0;i\<count;i++){","buffer.append(str);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["privatefinalColumnscolumns=newColumns();","privateintrowIdx=-1;","privateListrowList=newArrayList();//ListofExpressionGroup[]","MemoryResult(){/*shouldbeempty*/}","MemoryResult(Object[][]data,intcolCount)throwsSQLException{","for(intc=0;c\<colCount;c++){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());","StringgetString()throwsException{","if(isNull())returnnull;","returngetObject().toString();","finalintgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["voidsetFrom(DataSourcefromEntry,intcolIdx,TableViewtable){","this.fromEntry=fromEntry;","this.colIdx=colIdx;","this.table=table;","this.column=table.columns.get(colIdx);","voidsetFrom(DataSourcefromEntry,intcolIdx,Columncolumn){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["finallonggetFirstPage(){","returnfirstPage;","ListgetInserts(SSConnectioncon){","synchronized(locks){","ArrayListinserts=newArrayList();","if(con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["switch(type){","caseGROUP_BY:","caseSUM:","caseFIRST:","caseLAST:","clear();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;","caseSQLTokenizer.COMMA:","continuenextCol;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(row==0){","returnfalse;","if(row\>getRowCount()){","returnfalse;","booleanisNext=next();","previous();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["{TABLE_CANT_RENAME,\"Table\'\'{0}\'\'can\'\'tberenamed.\"},","{TABLE_CANT_DROP,\"Table\'\'{0}\'\'can\'\'tbedropped.\"},","{TABLE_CANT_DROP_LOCKED,\"Table\'\'{0}\'\'can\'\'tdropbecauseislocked.\"},","{TABLE_CORRUPT_PAGE,\"Corrupttablepageatposition:{0}.\"},","{TABLE_MODIFIED,\"Table\'\'{0}\'\'wasmodified.\"},","{TABLE_DEADLOCK,\"Deadlock,cannotcreatealockontable\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseADD:returnleft.getLong()+right.getLong();","caseSUB:returnleft.getLong()-right.getLong();","caseMUL:returnleft.getLong()*right.getLong();","caseDIV:returnleft.getLong()/right.getLong();","caseNEGATIVE:return-left.getLong();","caseMOD:returnleft.getLong()%right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["params=newExpression[this.inList.length+1];","params[0]=left;","System.arraycopy(this.inList,0,params,1,this.inList.length);","}else{","params=newExpression[]{left};","super.setParams(params);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.NCHAR:","return((String)obj).getBytes();","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intbyteLen=bytes.length;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["publicbooleansupportsCatalogsInDataManipulation(){","returntrue;","publicbooleansupportsCatalogsInProcedureCalls(){","returntrue;","publicbooleansupportsCatalogsInTableDefinitions(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["TableViewResultresult=TableViewResult.getTableViewResult(tables.get(t));","TableViewtable=result.getTableView();","ColumnstableColumns=table.columns;","intcount=tableColumns.size();","Expression[]updateValues=newExpression[count];","booleanisUpdateNeeded=false;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["StringreadLongString()throwsException{","longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","if(store==null)throwSmallSQLException.create(Language.LOB_DELETED);","returnnewString(store.readChars(store.readInt()));","voidwriteColumn(Columncolumn)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnset;","caseSQLTokenizer.EXECUTE:","returnexecute();","caseSQLTokenizer.TRUNCATE:","returntruncate();","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["t/=1000;","second=t%60;","t/=60;","minute=t%60;","t/=60;","hour=t%24;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["node.load(store);","returnnode;","staticFileIndexNodeloadRootNode(booleanunique,FileChannelfile,longoffset)throwsException{","StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);","FileIndexNodenode=newFileIndexNode(unique,(char)store.readShort(),file);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["finalvoidwriteExpression(intcolumnIdx,ExpressionvalueExpression){","intidx=matrix[columnIdx];","if(idx\>=0)//setonlyifthecolumnpartofthisindex","expressions.set(idx,valueExpression);","finalvoidwriteFinish(SSConnectioncon){","finalvoidsave(StoreImplstore)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returngetInt();","finallonggetMoney()throwsException{","returngetInt()*10000;","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["returnnull;","finaldoublegetDouble(intoffset,intdataType)throwsException{","return0;","finalfloatgetFloat(intoffset,intdataType)throwsException{","return0;","finalintgetInt(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["default:","returngetLong()!=0;","caseSQLTokenizer.REAL:","switch(operation){","caseIN:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["byte[]str2=param2.getBytes();","intlength=str2.length;","if(length==0){","returnstr1;","byte[]str3=param3.getBytes();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["finalclassTableResultextendsTableViewResult{","finalprivateTabletable;","privateListinsertStorePages;","privatelongfirstOwnInsert;","privatelongmaxFileOffset;","TableResult(Tabletable){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["}else{","locks.put(pageKey,lock);","con.add(lock);","returnlock;","caseSQLTokenizer.LONGVARBINARY:","returnnewTableStorePage(con,this,LOCK_INSERT,-1);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicClobgetClob(StringparameterName)throwsSQLException{","returngetClob(findParameter(parameterName));","publicArraygetArray(StringparameterName)throwsSQLException{","returngetArray(findParameter(parameterName));","publicDategetDate(StringparameterName,Calendarcal)throwsSQLException{","returngetDate(findParameter(parameterName),cal);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["offset=insertNode(octet);","}else{","insertNodeLastLevel(octet);","return;","shift-=16;","octet=(int)(value\>\>shift)&0xFFFF;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"[":(key[i]);","node=node.getChildNode(digit);","if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);","if(++i==length){","returnnode;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["privateCommandSelectcmdSel;","privateTabletable;","privatelongtableTimestamp;","privateint[]matrix;//mappingofthecolumnsfromINSERTtothecolumnsintheTable;-1defaultValue","CommandInsert(Loggerlog,Stringname){","super(log);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["if(rows==0)return(row!=0);","if(rows\>0){","while(rows--\>0){","if(!next()){","returnfalse;","}else{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["voidcreateTable(SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,name,columns,indexes,foreignKeys);","synchronized(tableViews){","tableViews.put(name,table);","TablecreateTable(SSConnectioncon,StringtableName,Columnscolumns,IndexDescriptionsoldIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["}catch(Exceptionex1){/*ignoreit*/}","try{","indexes.drop(database);","}catch(Exceptionex1){/*ignoreit*/}","throwex;","}finally{"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["if(isEmpty()){","initValue(expr);","}else","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnUtils.bytes2unique(page,this.offset);","default:thrownewError();","@Override","byte[]getBytes(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case7://Mondd,yy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.DELETE:","sizeUsed=PAGE_CONTROL_SIZE;","break;","default:thrownewError(\"\"+type);","offset=0;","writeInt(PAGE_MAGIC);//forrepair"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.digit=digit;","protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewIndexNode(unique,digit);","finalchargetDigit(){","returndigit;","finalbooleangetUnique(){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["formatNumber(details.day,2,buf);","returnbuf.toString();","case12://ISOyymmdd","formatNumber(details.year%100,2,buf);","formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.FN://functionescapesequence","nextToken(MISSING_PARENTHESIS_L);","expr=function(cmd,para,true);","break;","caseSQLTokenizer.CALL://callescapesequence","thrownewjava.lang.UnsupportedOperationException(\"callescapesequence\");"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case1:","returnnewExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","case2:","invalidParamCount=false;","expr=newExpressionFunctionIIF();","Expression[]newParams=newExpression[3];"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Entrye=src[j];","if(e!=null){","src[j]=null;","do{","Entrynext=e.next;","e.next=null;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["}catch(Exceptione2){","DriverManager.println(e2.toString());","throwSmallSQLException.createFromException(e);","voiddrop(Databasedatabase)throwsException{","close();","booleanok=getFile(database,name).delete();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["CommandUpdate(Loggerlog){","super(log);","voidaddSetting(Expressiondest,Expressionsource){","columnExpressions.add(dest);","sources.add(source);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["token=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);","intvalue;","try{","value=Integer.parseInt(token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleanprevious()throwsException{","if(rowIdx\>-1){","rowIdx--;","if(rowIdx\>-1&&rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["if(readInt()!=PAGE_MAGIC){","throwSmallSQLException.create(Language.TABLE_CORRUPT_PAGE,newObject[]{newLong(filePos)});","status=readInt();","sizeUsed=readInt();","sizePhysical=readInt();","nextPageOffset=readInt();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnMath.abs(param1.getMoney());","MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;","MutableNumericnum=param1.getNumeric();","if(num.getSignum()\<0)num.setSignum(1);","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["returnremainderKey;","finalIndexNodeaddNode(chardigit)throwsSQLException{","if(remainderKey!=null)moveRemainderValue();","intpos=findNodePos(digit);","if(pos==-1){","IndexNodenode=createIndexNode(unique,digit);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["staticfinalintREPEAT=1114;","staticfinalintREPLACE=1115;","staticfinalintRIGHT=1116;","staticfinalintRTRIM=1117;","staticfinalintSOUNDEX=1118;","staticfinalintSPACE=1119;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["switch(tokenType.value){","caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","tableName=nextIdentiferPart(tableName);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(\'\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case8://hh:mm:ss","case108:","formatNumber(details.hour,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["Expressionscolumns0=Utils.getExpressionNameFromTree(param0);","Expressionscolumns1=Utils.getExpressionNameFromTree(param1);","if(left.isExpressionsFromThisRowSource(columns0)&&right.isExpressionsFromThisRowSource(columns1)){","leftEx.add(param0);","rightEx.add(param1);","}else{"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(version\<TABLE_VIEW_OLD_VERSION)","throwSmallSQLException.create(Language.FILE_TOOOLD,newObject[]{newInteger(version),fileName});","if(magic==MAGIC_TABLE)","returnnewTable(database,con,name,raFile,raFile.position(),version);","returnnewView(con,name,raFile,raFile.position());","}catch(Throwablee){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["this.raFile=raFile;","this.firstPage=offset;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.SELECT);","if(store==null){","throwSmallSQLException.create(Language.TABLE_FILE_INVALID,getFile(database));","intcount=store.readInt();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else{","if(scale!=0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["staticFileIndexNodeloadRootNode(booleanunique,FileChannelfile,longoffset)throwsException{","StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);","FileIndexNodenode=newFileIndexNode(unique,(char)store.readShort(),file);","node.fileOffset=offset;","node.load(store);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["ColumnstableColumns=table.columns;","intcount=tableColumns.size();","StoreImplnewStore=table.getStoreTemp(con);","synchronized(con.getMonitor()){","((StoreImpl)this.store).createWriteLock();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["case102://ANSIyyyy.mm.dd","formatNumber(details.year,4,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalbooleanisBeforeFirst(){","returnrowIdx\<0||rowList.size()==0;","finalbooleanisFirst(){","returnrowIdx==0&&currentRow!=null;","finalbooleanfirst(){","rowIdx=0;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.SQL_FLOAT:dataType=SQLTokenizer.FLOAT;break;","caseSQLTokenizer.SQL_INTEGER:dataType=SQLTokenizer.INT;break;","caseSQLTokenizer.SQL_LONGVARBINARY:dataType=SQLTokenizer.LONGVARBINARY;break;","caseSQLTokenizer.SQL_LONGVARCHAR:dataType=SQLTokenizer.LONGVARCHAR;break;","caseSQLTokenizer.SQL_REAL:dataType=SQLTokenizer.REAL;break;","caseSQLTokenizer.SQL_SMALLINT:dataType=SQLTokenizer.SMALLINT;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if((pkTable==null||pkTable.equals(foreignKey.pkTable))&&","(fkTable==null||fkTable.equals(foreignKey.fkTable))){","StringscolumnsPk=pk.getColumns();","StringscolumnsFk=fk.getColumns();","for(intc=0;c\<columnsPk.size();c++){","Object[]row=newObject[14];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["temp[pos]=node;","nodes=temp;","privatefinalintfindNodeInsertPos(chardigit,intstart,intend){","if(start==end)returnstart;","intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["break;","caseMAX:","if(value==null){","if(expr.isNull())","dataType=expr.getDataType();","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["DriverManager.println(e2.toString());","throwSmallSQLException.createFromException(e);","voiddrop(Databasedatabase)throwsException{","close();","booleanok=getFile(database,name).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["finalintgetInt(intoffset,intdataType)throwsException{","return0;","finallonggetLong(intoffset,intdataType)throwsException{","return0;","finallonggetMoney(intoffset,intdataType)throwsException{","return0;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["caseSQLTokenizer.SMALLINT:","returnreadShort()*10000L;","caseSQLTokenizer.INT:","returnreadInt()*10000L;","caseSQLTokenizer.BIGINT:","returnreadLong()*10000L;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(!readBoolean()){","Stringdef=readString();","column.setDefaultValue(newSQLParser().parseExpression(def),def);","returncolumn;","voidcopyValueFrom(StoreImplstore,intvalueOffset,intlength){","System.arraycopy(store.page,valueOffset,this.page,this.offset,length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnnewMutableNumeric(readLongString());","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ByteBufferbuffer=ByteBuffer.allocate(1);","raFile.read(buffer);","buffer.position(0);","booleanunique=buffer.get()!=0;","FileIndexNoderoot=FileIndexNode.loadRootNode(unique,raFile,raFile.position());","returnnewFileIndex(root,raFile);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["if(complement[0]\<0){","negate(complement);","signum=-1;","}else{","signum=0;","for(inti=0;i\<complement.length;i++)"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["chars[25]=digits[(daten[offset+10])&0x0F];","chars[26]=digits[(daten[offset+11]\>\>4)&0x0F];","chars[27]=digits[(daten[offset+11])&0x0F];","chars[28]=digits[(daten[offset+12]\>\>4)&0x0F];","chars[29]=digits[(daten[offset+12])&0x0F];","chars[30]=digits[(daten[offset+13]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticintmoney2int(longvalue){","if(value\<Integer.MIN_VALUE)returnInteger.MIN_VALUE;","elseif(value\>Integer.MAX_VALUE)returnInteger.MAX_VALUE;","elsereturn(int)value;","staticbyte[]int2bytes(intvalue){","byte[]result=newbyte[4];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.MONEY:","returnnewMutableNumeric(getMoney(),4);","caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();","num.floor();","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["TableViewpkTable=getTableView(con,foreignKey.pkTable);","if(!(pkTableinstanceofTable)){","throwSmallSQLException.create(Language.FK_NOT_TABLE,foreignKey.pkTable);","voidcreateTable(SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,name,columns,indexes,foreignKeys);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicclassStoreImplextendsStore{","privatestaticfinalintDEFAULT_PAGE_SIZE=8192;//8Kb","privatestaticfinalintPAGE_MAGIC=0x12DD13DE;//areusedforrepairingatable","privatestaticfinalintPAGE_CONTROL_SIZE=28;","privatestaticfinalbyte[]page_control=newbyte[PAGE_CONTROL_SIZE];","privatestaticfinalByteBufferpageControlBuffer=ByteBuffer.wrap(page_control);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleanok=file.delete();","if(!ok)throwSmallSQLException.create(Language.VIEW_CANTDROP,name);","privatevoidwrite(Databasedatabase,SSConnectioncon)throwsException{","FileChannelraFile=createFile(con,database);","StorePagestorePage=newStorePage(null,-1,raFile,8);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.CREATE,8);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["publicbooleanusesLocalFiles(){","returnfalse;","publicbooleanusesLocalFilePerTable(){","returnfalse;","publicbooleansupportsMixedCaseIdentifiers(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(rowIdx\>-1&&rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","rowSource.beforeFirst();","returnfalse;","booleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returncomp\>=0&&0\>=String.CASE_INSENSITIVE_ORDER.compare(leftStr,right2.getString());","caseADD:returnUtils.string2boolean(leftStr+rightStr);","break;}","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["currentDS.beforeFirst();","row=0;","finalbooleanfirst()throwsException{","dataSourceIdx=0;","currentDS=dataSources.get(0);","booleanb=currentDS.first();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["staticfinalintFROM=210;","staticfinalintWHERE=211;","staticfinalintGROUP=212;","staticfinalintBY=213;","staticfinalintHAVING=214;","staticfinalintORDER=215;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["longgetMoney(intcolIdx)throwsException{","returnget(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{","returnget(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{","returnget(colIdx).getObject();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["break;","case3:","millis=Integer.parseInt(strMillis);","break;","default:","millis=Integer.parseInt(strMillis.substring(0,3));"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalStringleftStr=left.getString();","finalStringrightStr=right.getString();","intcomp=String.CASE_INSENSITIVE_ORDER.compare(leftStr,rightStr);","switch(operation){","caseIN:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returncolumns.get(colIdx);","finalvoidaddColumn(Columncolumn){","columns.add(column);","finalbooleanisScrollable(){","returntrue;","finalvoidbeforeFirst(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicInputStreamgetAsciiStream(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["synchronized(cal){","cal.setTimeZone(TimeZone.getDefault());","cal.setTimeInMillis(datetime);","returndatetime+cal.get(Calendar.ZONE_OFFSET)+cal.get(Calendar.DST_OFFSET);","staticTimestampgetTimestamp(longtime){","returnnewTimestamp(DateTime.addDateTimeOffset(time));"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(newValue!=null)","((MutableNumeric)value).add(newValue);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["size+=2+pointerSize;","writeShort(octet);","writePointer(size);","correctPointers(0,oldOffset,2+pointerSize,0);","data[size++]=(byte)0;","data[size++]=(byte)0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case6://ddmonyy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["synchronized(cal){","cal.setTimeZone(timezone);","cal.set(1970,0,d+1,0,0,t);","cal.set(Calendar.MILLISECOND,millis);","returncal.getTimeInMillis();","privatestaticlongremoveDateTimeOffset(longdatetime){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(node.isEmpty()){","if(isLast){","node.addRemainderKey(rowOffset,key,i);","returnnull;","returnnode.addRootValue(key,i);","}else"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["value=Math.rint(value);","if(places\>0){","value/=factor;","}else{","value*=factor;","returnvalue;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|"],
"["finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","voidnullRow(){","rowSource.nullRow();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|","|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["intstart=0;","intlength=bytes.length;","while(start\<length&&bytes[start]==0){","start++;","length-=start;","byte[]b=newbyte[length];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["caseSQLTokenizer.SECOND:","returnSQLTokenizer.SQL_TSI_SECOND;","caseSQLTokenizer.MINUTE:","returnSQLTokenizer.SQL_TSI_MINUTE;","caseSQLTokenizer.HOUR:","returnSQLTokenizer.SQL_TSI_HOUR;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["{ROW_DELETED,\"Rowalreadydeleted.\"},","{SAVEPT_INVALID_TRANS,\"Savepointisnotvalidforthistransaction.\"},","{SAVEPT_INVALID_DRIVER,\"Savepointisnotvalidforthisdriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnotsupportedforthistypeofrowsource.\"},","{ISOLATION_UNKNOWN,\"UnknownTransactionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"InvalidflagvalueinmethodgetMoreResults:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["sql=store.readString();","inttype;","while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();","switch(type){"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["break;","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.ESCAPE_R:","if(parenthesis==token.value)returnfromSource;","if(parenthesis==0){","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SMALLINT:","writeShort(expr.getInt());","break;","caseSQLTokenizer.INT:","writeInt(expr.getInt());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["static{","addKeyWord(\"D\",D);","addKeyWord(\"T\",T);","addKeyWord(\"TS\",TS);","addKeyWord(\"FN\",FN);","addKeyWord(\"CALL\",CALL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["buffer.putInt(TABLE_VIEW_VERSION);","buffer.position(0);","raFile.write(buffer);","StoreImplgetStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","TableStorePagestorePage=requestLock(con,pageOperation,filePos);","returnStoreImpl.createStore(this,storePage,pageOperation,filePos);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintPRIMARY=251;","staticfinalintFOREIGN=252;","staticfinalintKEY=253;","staticfinalintUNIQUE=254;","staticfinalintCLUSTERED=255;","staticfinalintNONCLUSTERED=256;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseTypes.NUMERIC:","return\"java.math.BigDecimal\";","caseTypes.REAL:","return\"java.lang.Float\";","caseTypes.FLOAT:","caseTypes.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalvoidnullRow(){","rowSource.nullRow();","row=0;","finalvoidnoRow(){","rowSource.noRow();","row=0;"]": ["|project://smallsql/src/smallsql/database/Where.java|","|project://smallsql/src/smallsql/database/Distinct.java|"],
"["caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:","store.page=newbyte[DEFAULT_PAGE_SIZE];","break;","caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DECIMAL:","returnreadNumeric().toByteArray();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.SQRT:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSqrt();","break;","caseSQLTokenizer.TAN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionPowerextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.POWER;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionPower.java|"],
"["if(serializeConnections.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;","tabLockConnection=con;"]": ["|project://smallsql/src/smallsql/database/Table.java|","|project://smallsql/src/smallsql/database/Table.java|"],
"["publicBigDecimaltoBigDecimal(){","if(value==0)returnZERO;","returnnewBigDecimal(newBigInteger(toByteArray()),4);","publicObjectgetImmutableObject(){","returntoBigDecimal();","staticprivatefinalBigDecimalZERO=newBigDecimal(\"0.0000\");"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["finalprivateinttableCommandType;","CommandTable(Loggerlog,Stringcatalog,Stringname,inttableCommandType){","super(log);","this.type=SQLTokenizer.TABLE;","this.catalog=catalog;","this.name=name;"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["Entrye=prev;","while(e!=null){","Entrynext=e.next;","if(e.key==key){","size--;","if(prev==e)"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;","break;","default:thrownewError(String.valueOf(dataTypes[i]));","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnbytes;","default:thrownewError();","@Override","voidscanObjectOffsets(int[]offsets,intdataTypes[]){","offset=PAGE_CONTROL_SIZE;","for(inti=0;i\<offsets.length;i++){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"ATN2\",ATAN2);//aliasforMSSQLServer","addKeyWord(\"ATAN2\",ATAN2);","addKeyWord(\"CEILING\",CEILING);","addKeyWord(\"COS\",COS);","addKeyWord(\"COT\",COT);","addKeyWord(\"DEGREES\",DEGREES);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["ObjectgetObject()throwsException{","returnfromEntry.getObject(colIdx);","StringgetString()throwsException{","returnfromEntry.getString(colIdx);","byte[]getBytes()throwsException{","returnfromEntry.getBytes(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["addKeyWord(\"DEGREES\",DEGREES);","addKeyWord(\"EXP\",EXP);","addKeyWord(\"FLOOR\",FLOOR);","addKeyWord(\"LOG\",LOG);","addKeyWord(\"LOG10\",LOG10);","addKeyWord(\"MOD\",MOD);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteLong(longvalue){","verifyFreePufferSize(8);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["offset=PAGE_CONTROL_SIZE;","for(inti=0;i\<offsets.length;i++){","offsets[i]=offset;","booleanisNull=readBoolean();//forisNull","switch(dataTypes[i]){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["updateTime(findColumn(columnName),x);","publicvoidupdateTimestamp(StringcolumnName,Timestampx)throwsSQLException{","updateTimestamp(findColumn(columnName),x);","publicvoidupdateAsciiStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateAsciiStream(findColumn(columnName),x,length);","publicvoidupdateBinaryStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnnewDouble(readDouble());","caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong());","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt());","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["doublegetDouble()throwsException{","returnfromEntry.getDouble(colIdx);","longgetMoney()throwsException{","returnfromEntry.getMoney(colIdx);","MutableNumericgetNumeric()throwsException{","returnfromEntry.getNumeric(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returntrue;","publicbooleansupportsDataManipulationTransactionsOnly(){","returnfalse;","publicbooleandataDefinitionCausesTransactionCommit(){","returnfalse;","publicbooleandataDefinitionIgnoredInTransactions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["buf.append(\'/\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case111://Japanyy/mm/dd","formatNumber(details.year,4,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intd=(int)(time/86400000);","if(t\<0){","t+=86400000;","d--;","millis=t%1000;","t/=1000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{UNSUPPORTED_CONVERSION_FUNC,\"Unsupportedconversiontodatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"UnsupportedtypeforCONVERTfunction:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"Unsupporteddatatype\'\'{0}\'\'forSUMfunction.\"},","{UNSUPPORTED_TYPE_MAX,\"Unsupporteddatatype\'\'{0}\'\'forMAXfunction.\"},","{UNSUPPORTED_CONVERSION,\"Can\'\'tconvert\'\'{0}\'\'[{1}]to\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionINSERT.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privateCommandupdate()throwsSQLException{","CommandUpdatecmd=newCommandUpdate(con.log);","DataSourcestables=newDataSources();","cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken=nextToken(MISSING_SET);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DECIMAL:","returnreadNumeric().toString();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicclassExpressionFunctionLocateextendsExpressionFunctionReturnInt{","intgetFunction(){","returnSQLTokenizer.LOCATE;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","intgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|"],
"["if(!next()){","returnfalse;","}else{","afterLast();","while(newRow++\<0){","if(!previous()){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["addKeyWord(\"SQL_BIT\",SQL_BIT);","addKeyWord(\"SQL_CHAR\",SQL_CHAR);","addKeyWord(\"SQL_DATE\",SQL_DATE);","addKeyWord(\"SQL_DECIMAL\",SQL_DECIMAL);","addKeyWord(\"SQL_DOUBLE\",SQL_DOUBLE);","addKeyWord(\"SQL_FLOAT\",SQL_FLOAT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case12://ISOyymmdd"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["importjava.io.InputStream;","importjava.io.Reader;","importjava.util.Map;","importjava.util.Calendar;","importjava.net.URL;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintLOCK_READ=2;//occuronreadandpreventawriteofdata,itcanoccurmoreasoneLOCK_READperpage","staticfinalintLOCK_WRITE=3;//occuronwriteandpreventeveryotheraccesstothedata,itisonlyoneLOCK_WRITEperpagepossible","staticfinalintLOCK_TAB=4;//lockthetotaltable","TableView(Stringname,Columnscolumns){","this.name=name;","this.columns=columns;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["return\"java.sql.Timestamp\";","caseTypes.CHAR:","caseTypes.VARCHAR:","caseTypes.LONGVARCHAR:","case-11://uniqueidentifier","return\"java.lang.String\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalObjectgetValue(){","returnvalue;","finalIndexNode[]getChildNodes(){","returnnodes;","finalIndexNodegetChildNode(chardigit){","intpos=findNodePos(digit);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["try{","value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setScale(value);","nextToken(MISSING_PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","case\'M\':","case\'N\':","c=\'5\';","break;","case\'R\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["intrsType;","intrsConcurrency;","privateintfetchDirection;","privateintfetchSize;","privateintqueryTimeout;","privateintmaxRows;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(isNull){","writeBoolean(true);//true-isnull","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicTimegetTime(StringparameterName,Calendarcal)throwsSQLException{","returngetTime(findParameter(parameterName),cal);","publicTimestampgetTimestamp(StringparameterName,Calendarcal)throwsSQLException{","returngetTimestamp(findParameter(parameterName),cal);","publicURLgetURL(StringparameterName)throwsSQLException{","returngetURL(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["setBoolean(findParameter(parameterName),x);","publicvoidsetByte(StringparameterName,bytex)throwsSQLException{","setByte(findParameter(parameterName),x);","publicvoidsetShort(StringparameterName,shortx)throwsSQLException{","setShort(findParameter(parameterName),x);","publicvoidsetInt(StringparameterName,intx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["FilebaseDir=(database!=null)?","database.directory.getParentFile():","newFile(\".\");","Filedirs[]=baseDir.listFiles();","if(dirs!=null)","for(inti=0;i\<dirs.length;i++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returngetLongImpl()*10000;","caseSQLTokenizer.REAL:","returnUtils.doubleToMoney(getFloatImpl());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["writeShort((int)(value\>\>16));","writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value));","writeShort(0);","size=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["Object[][]getColumns(SSConnectioncon,StringtablePattern,StringcolPattern)throwsException{","Listrows=newArrayList();","Stringstables=getTables(tablePattern);","for(inti=0;i\<tables.size();i++){","StringtableName=tables.get(i);","try{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["page[5]=(byte)(value\>\>16);","page[6]=(byte)(value\>\>8);","page[7]=(byte)(value);","returnnewStorePage(page,8,raFile,filePos);","voidcreateNextValue(SSConnectioncon)throwsSQLException{","value++;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getDateTimeLong(),dataType);","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["finalprivateExpressionwhere;","privateintrow=0;","privatebooleanisCurrentRow;","Where(RowSourcerowSource,Expressionwhere){","this.rowSource=rowSource;","this.where=where;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["default:","previousToken();","}else{","previousToken();","Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BOOLEAN:","writeBoolean(expr.getBoolean());","break;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","writeBinary(expr.getBytes(),column.getPrecision(),dataType!=SQLTokenizer.BINARY);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));","voidwriteDouble(doublevalue){","writeLong(Double.doubleToLongBits(value));","doublereadDouble(){","returnDouble.longBitsToDouble(readLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(token.value){","caseSQLTokenizer.NOT:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NOT/10),ExpressionArithmetic.NOT);","break;","caseSQLTokenizer.MINUS:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NEGATIVE/10),ExpressionArithmetic.NEGATIVE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Columncolumn=columns.get(c);","if(expr.getDataType()!=SQLTokenizer.NULL){","column.setDataType(expr.getDataType());","if(expr.getPrecision()\>column.getPrecision()){","column.setPrecision(expr.getPrecision());","finalvoidaddRow(ExpressionValue[]row){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(i+1==count)","returnpage.getValue();","else","page=(IndexNode)page.getValue();","thrownewError();","finalObjectfindRows(Expression[]expressions,booleansearchNullValues,ArrayListnodeList)throwsException{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["addKeyWord(\"HAVING\",HAVING);","addKeyWord(\"ORDER\",ORDER);","addKeyWord(\"ASC\",ASC);","addKeyWord(DESC_STR,DESC);","addKeyWord(\"VALUES\",VALUES);","addKeyWord(\"AS\",AS);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","caseSQLTokenizer.MINUS:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NEGATIVE/10),ExpressionArithmetic.NEGATIVE);","break;","caseSQLTokenizer.TILDE:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.BIT_NOT/10),ExpressionArithmetic.BIT_NOT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["right2=param;","break;","if(inList!=null&&idx\>0&&idx\<=inList.length){","inList[idx-1]=param;","super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicintgetTransactionIsolation(){","returnisolationLevel;","publicSQLWarninggetWarnings(){","returnnull;","publicvoidclearWarnings(){","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["finalintgetFunction(){returnSQLTokenizer.TRUNCATE;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;","finalintplaces=param2.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["needGeneratedKeys=false;","generatedKeyIndexes=null;","generatedKeyNames=null;","finalpublicvoidclose(){","con.log.println(\"Statement.close\");","isClosed=true;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["buf.append(\'.\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case5://italianodd-mm-yy","formatNumber(details.day,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{TABLE_EXISTENT,\"DieTabelleoderView\'\'{0}\'\'existiertbereits.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'istkeineTabelle.\"},","{PK_ONLYONE,\"EineTabellekannnureinenPrimÃ¤rschlÃ¼sselhaben.\"},","{KEY_DUPLICATE,\"DoppelterSchlÃ¼ssel.\"},","{MONTH_TOOLARGE,\"DerMonatistzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DieTagesindzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["packagesmallsql.database;","importjava.sql.*;","classTableStorePageInsertextendsTableStorePage{","finalprivateStorePageLinklink=newStorePageLink();","TableStorePageInsert(SSConnectioncon,Tabletable,intlockType){","super(con,table,lockType,-1);"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){"]": ["|project://smallsql/src/smallsql/database/Database.java|","|project://smallsql/src/smallsql/database/Database.java|","|project://smallsql/src/smallsql/database/Database.java|"],
"["publicvoidprintStackTrace(PrintStreamps){","if(!isInit)return;","super.printStackTrace(ps);","publicvoidprintStackTrace(PrintWriterpw){","if(!isInit)return;","super.printStackTrace(pw);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getInt(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["protectedLanguage_de(){","addMessages(ENTRIES);","publicString[][]getEntries(){","returnENTRIES;","privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"NichtunterstÃ¼tzteFunktion:{0}\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["finalclassExpressionFunctionCharLenextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.CHARLEN;","booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCharLen.java|"],
"["if(con.isolationLevel\>=Connection.TRANSACTION_REPEATABLE_READ||pageOperation==SQLTokenizer.UPDATE){","lock.lockType=pageOperation==SQLTokenizer.UPDATE?LOCK_WRITE:LOCK_READ;","if(prevLock!=null){","prevLock.nextLock=lock.nextLock;","}else{","locks.put(pageKey,lock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalclassExpressionFunctionCaseextendsExpression/*Function*/{","ExpressionFunctionCase(){","super(FUNCTION);","privatefinalExpressionscases=newExpressions();","privatefinalExpressionsresults=newExpressions();","privateExpressionelseResult=Expression.NULL;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["previousToken();","if(isMinus)","returnnewExpressionArithmetic(expr,ExpressionArithmetic.NEGATIVE);","returnexpr;","returnnull;","ExpressionFunctionCasecaseExpr(finalCommandcmd)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"SQL_BINARY\",SQL_BINARY);","addKeyWord(\"SQL_BIT\",SQL_BIT);","addKeyWord(\"SQL_CHAR\",SQL_CHAR);","addKeyWord(\"SQL_DATE\",SQL_DATE);","addKeyWord(\"SQL_DECIMAL\",SQL_DECIMAL);","addKeyWord(\"SQL_DOUBLE\",SQL_DOUBLE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["fullRightRowCounter++;","fullRowCount=fullRightRowCounter;","}else{","result=right.next();","if(!result){","switch(type){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);","TableStorePageusableLock=null;","while(lock!=null){","if(lock.con==con||","con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["this.offset=tokenStart;","this.length=tokenEnd-tokenStart;","SQLToken(Stringname,intvalue,inttokenStart,inttokenEnd){","this.value=value;","this.offset=tokenStart;","this.length=tokenEnd-tokenStart;"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["returnvalue[0]/scaleFloatFactor[scale]*signum;","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleFloatFactor[scale]*signum;","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicstaticfinalStringRSET_ON_INSERT_ROW=\"SS-0135\";","publicstaticfinalStringROWSOURCE_READONLY=\"SS-0136\";","publicstaticfinalStringSTMT_IS_CLOSED=\"SS-0140\";","publicstaticfinalStringSUBQUERY_COL_COUNT=\"SS-0160\";","publicstaticfinalStringJOIN_DELETE=\"SS-0161\";","publicstaticfinalStringJOIN_INSERT=\"SS-0162\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.ADD:","SQLTokentoken;","do{","token=nextToken(MISSING_IDENTIFIER);","token=addColumn(token,cmd);","}while(token!=null&&token.value==SQLTokenizer.COMMA);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["thrownewError();","privateCommandupdate()throwsSQLException{","CommandUpdatecmd=newCommandUpdate(con.log);","DataSourcestables=newDataSources();","cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetTimestamp()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType,StringtypeName)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetURL()notyetimplemented.\");","publicvoidsetURL(StringparameterName,URLx)throwsSQLException{","setURL(findParameter(parameterName),x);","publicvoidsetNull(StringparameterName,intsqlType)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleDoubleFactor[scale]*signum;","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).doubleValue();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["addKeyWord(\"COS\",COS);","addKeyWord(\"COT\",COT);","addKeyWord(\"DEGREES\",DEGREES);","addKeyWord(\"EXP\",EXP);","addKeyWord(\"FLOOR\",FLOOR);","addKeyWord(\"LOG\",LOG);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["for(intc=0;c\<oldColumns.size();c++){","if(c!=0){","buffer.append(\',\');","buffer.append(oldColumns.get(c).getName());","buffer.append(\")SELECT*FROM\").append(name);","con.createStatement().execute(buffer.toString());"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["prev=lock=(TableStorePage)locksInsert.get(i);","while(lock!=null){","if(lock==storePage){","if(lock==prev){","if(lock.nextLock==null){","locksInsert.remove(i--);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicBlobgetBlob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetClob()notyetimplemented.\");","publicArraygetArray(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetDate()notyetimplemented.\");","publicTimegetTime(inti,Calendarcal)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetTimestamp()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(e,message,sqlState);","staticStringtranslateMsg(StringmessageCode,Object[]params){","assert(messageCode!=null&&params!=null):\"Fillparameters.msgCode=\"+messageCode+\"params=\"+params;","Stringlocalized=language.getMessage(messageCode);","returnMessageFormat.format(localized,params);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["addKeyWord(\"DATALENGTH\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LEN\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LENGTH\",LENGTH);","addKeyWord(\"CHARINDEX\",LOCATE);//aliasforMSSQLServer","addKeyWord(\"LOCATE\",LOCATE);","addKeyWord(\"LTRIM\",LTRIM);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returngetDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatedoublegetDoubleImpl()throwsjava.lang.Exception{","if(operation==NEGATIVE)","returngetDoubleImpl(0,left.getDouble());","returngetDoubleImpl(left.getDouble(),right.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType);","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType,intlength)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType,length);","if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType+\";length=\"+length);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["else","if(colCount!=nextColCount)","throwSmallSQLException.create(Language.UNION_DIFFERENT_COLS,newObject[]{newInteger(colCount),newInteger(nextColCount)});","returnresult;","finalbooleanisNull(intcolIdx)throwsException{","returncurrentDS.isNull(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["try{","intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.RSET_ON_INSERT_ROW);","publicvoidupdateRow()throwsSQLException{","try{","if(values==null){","return;","st.con.log.println(\"updateRow()\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["SQLTokentoken=nextToken(COMMANDS_CREATE);","switch(token.value){","caseSQLTokenizer.DATABASE:","returncreateDatabase();","caseSQLTokenizer.TABLE:","returncreateTable();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longgetMoney()throwsException{","returnExpressionValue.getMoney(getObject(),getDataType());","MutableNumericgetNumeric()throwsException{","returnExpressionValue.getNumeric(getObject(),getDataType());","StringgetString()throwsException{","Objectobj=getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicTimestampgetTimestamp(StringcolumnName)throwsSQLException{","returngetTimestamp(findColumn(columnName));","publicInputStreamgetAsciiStream(StringcolumnName)throwsSQLException{","returngetAsciiStream(findColumn(columnName));","publicInputStreamgetUnicodeStream(StringcolumnName)throwsSQLException{","returngetUnicodeStream(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["offset+=8;","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnUtils.string2boolean(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnUtils.string2boolean(readLongString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"VIEW\",VIEW);","addKeyWord(\"INDEX\",INDEX);","addKeyWord(\"PROCEDURE\",PROCEDURE);","addKeyWord(\"TRANSACTION\",TRANSACTION);","addKeyWord(\"ISOLATION\",ISOLATION);","addKeyWord(\"LEVEL\",LEVEL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value+=expr.getInt();","break;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.FULL_JOIN);","break;","caseSQLTokenizer.PARENTHESIS_R:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BIT_AND:","caseSQLTokenizer.BIT_OR:","caseSQLTokenizer.BIT_XOR:","rightExpr=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,operation);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MINUS:returnSUB;","caseSQLTokenizer.ASTERISK:returnMUL;","caseSQLTokenizer.SLACH:returnDIV;","caseSQLTokenizer.PERCENT:returnMOD;","caseSQLTokenizer.EQUALS:returnEQUALS;","caseSQLTokenizer.GREATER:returnGREATER;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intgetFlag(){","return(identity?1:0)|","(caseSensitive?2:0)|","(nullable?4:0);","voidsetFlag(intflag){","identity=(flag&1)\>0;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getMoney()==right.getMoney();","caseGREATER:returnleft.getMoney()\>right.getMoney();","caseGRE_EQU:returnleft.getMoney()\>=right.getMoney();","caseLESSER:returnleft.getMoney()\<right.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicstaticfinalStringMONTH_TOOLARGE=\"SS-0251\";","publicstaticfinalStringDAYS_TOOLARGE=\"SS-0252\";","publicstaticfinalStringHOURS_TOOLARGE=\"SS-0253\";","publicstaticfinalStringMINUTES_TOOLARGE=\"SS-0254\";","publicstaticfinalStringSECS_TOOLARGE=\"SS-0255\";","publicstaticfinalStringMILLIS_TOOLARGE=\"SS-0256\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["addKeyWord(\"CEILING\",CEILING);","addKeyWord(\"COS\",COS);","addKeyWord(\"COT\",COT);","addKeyWord(\"DEGREES\",DEGREES);","addKeyWord(\"EXP\",EXP);","addKeyWord(\"FLOOR\",FLOOR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","caseSQLTokenizer.LCASE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLCase();","break;","caseSQLTokenizer.LEFT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returni;","throwSmallSQLException.create(Language.COL_MISSING,columnName);","finalvoidsetDistinct(booleandistinct){","this.isDistinct=distinct;","finalvoidsetSource(RowSourcejoin){","this.from=join;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["row[15]=row[6];//CHAR_OCTET_LENGTH","row[16]=Utils.getInteger(i);//ORDINAL_POSITION","row[17]=col.isNullable()?\"YES\":\"NO\";//IS_NULLABLE","rows.add(row);","}catch(Exceptione){","Object[][]result=newObject[rows.size()][];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["setNextFilePos();","row=0;","returnfalse;","@Override","finalvoidbeforeFirst(){","filePos=0;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.BIGINT:","((MutableLong)value).value+=expr.getLong();","break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value+=expr.getFloat();","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["for(inti=0;i\<list.size();i++){","cmd.addColumnExpression(list.get(i));","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","}elsecmd.noColumns=true;","Switch:while(true)","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicintintValue(){","returnvalue;","publiclonglongValue(){","returnvalue;","publicStringtoString(){","returnString.valueOf(value);"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["if(tableAlias==null)returnString.valueOf(getAlias());","returntableAlias+\".\"+getAlias();","StringgetTableName(){","if(table!=null){","returntable.getName();","returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnbuf.toString();","case10://USAmm-dd-yy","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["this.commandSelect=commandSelect;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","booleaninit(SSConnectioncon)throwsException{","if(super.init(con)){","commandSelect.compile(con);"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BOOLEAN\"});","@Override","intgetInt(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["case\'G\':","case\'J\':","case\'K\':","case\'Q\':","case\'S\':","case\'X\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","publicclassCreateFileextendsTransactionStep{","privatefinalFilefile;","privatefinalSSConnectioncon;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["publicStatementcreateStatement(intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSPreparedStatement(this,sql,resultSetType,resultSetConcurrency);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicvoidprintStackTrace(){","if(!isInit)return;","super.printStackTrace();","publicvoidprintStackTrace(PrintStreamps){","if(!isInit)return;","super.printStackTrace(ps);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["abstractdoublegetDouble()throwsException;","abstractlonggetMoney()throwsException;","abstractMutableNumericgetNumeric()throwsException;","abstractObjectgetObject()throwsException;","finalObjectgetApiObject()throwsException{","Objectobj=getObject();"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["{STXADD_JOIN_INVALID,\"UngÃ¼ltigeJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnerwartetschlieÃŸendeKlammerinFROMKlausel.\"},","{STXADD_KEYS_REQUIRED,\"BenÃ¶tigeSchlÃ¼sselwÃ¶rtersind:\"},","{STXADD_NOT_NUMBER,\"EineZahlisterforderlich:\'\'{0}\'\'.\"},","{STXADD_COMMENT_OPEN,\"FehlendesKommentarende\'\'*/\'\'.\"},","};"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnvalue;","publicfloatfloatValue(){","returnvalue;","publicintintValue(){","returnvalue;","publiclonglongValue(){"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["try{","StringfileName=Utils.createTableViewFileName(database,name);","Filefile=newFile(fileName);","if(!file.exists())","throwSmallSQLException.create(Language.TABLE_OR_VIEW_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["Iteratoriterator=tableViews.values().iterator();","while(iterator.hasNext()){","TableViewtableView=(TableView)iterator.next();","tableView.close();","iterator.remove();","master.close();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalObjectgetObject(intcolIdx)throwsException{","returnstore.getObject(offsets[colIdx],dataTypes[colIdx]);","@Override","finalStringgetString(intcolIdx)throwsException{","returnstore.getString(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnInteger.parseInt(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(i!=from)buf.append(\',\');","buf.append(SQLTokenizer.getKeyWord(i));","returnbuf.toString();","publicStringgetNumericFunctions(){","returngetFunctions(SQLTokenizer.ABS,SQLTokenizer.TRUNCATE);","publicStringgetStringFunctions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Object[]row=newObject[8];","row[0]=Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE","row[1]=columnName;//COLUMN_NAME","finalintdataType=column.getDataType();","row[2]=Utils.getInteger(dataType);//DATA_TYPE","row[3]=SQLTokenizer.getKeyWord(dataType);//TYPE_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["newRow[i]=newExpressionValue(type);","addRow(newRow);","finalprivatevoidaccumulateRow()throwsException{","for(inti=0;i\<currentRow.length;i++){","Expressionsrc=expressions.get(i);","currentRow[i].accumulate(src);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["intlength=param3.getInt();","if(length\<0)","throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));","if(start==0&&byteLen==length)returnbytes;","if(byteLen\>length+start){","byte[]b=newbyte[length];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["{SAVEPT_INVALID_DRIVER,\"01000\"},","{ALIAS_UNSUPPORTED,\"01000\"},","{ISOLATION_UNKNOWN,\"01000\"},","{FLAGVALUE_INVALID,\"01000\"},","{ARGUMENT_INVALID,\"01000\"},","{GENER_KEYS_UNREQUIRED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["writeInt(column.getPrecision());","writeByte(column.getScale());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","Stringdef=column.getDefaultDefinition();","writeBoolean(def==null);","if(def!=null)"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfromSource;","throwcreateSyntaxError(token,Language.STXADD_FROM_PAR_CLOSE);","default:","if(isKeyword(token)){","previousToken();","returnfromSource;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetFromLocaleTree(localeStr);","catch(IllegalArgumentExceptione){","returngetDefaultLanguage();","publicstaticLanguagegetDefaultLanguage(){","StringdfltLocaleStr=Locale.getDefault().toString();","try{"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["writeString(expr.getString(),column.getDisplaySize(),true);","break;","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["byte[]bytes=newbyte[1];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.SMALLINT:","bytes=newbyte[2];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.alias=alias;","StringgetAlias(){","return(alias!=null)?alias:getTableView().name;","booleanhasAlias(){","returnalias!=null;","booleaninit(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["case1:","case3:","case5:","case8:","case10:","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{TABLE_EXISTENT,\"01000\"},","{FK_NOT_TABLE,\"01000\"},","{PK_ONLYONE,\"01000\"},","{KEY_DUPLICATE,\"01000\"},","{MONTH_TOOLARGE,\"01000\"},","{DAYS_TOOLARGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["booleanisNull(intoffset)throwsSQLException{","thrownoCurrentRow();","booleangetBoolean(intoffset,intdataType)throwsException{","thrownoCurrentRow();","byte[]getBytes(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["if(isNull())return0;","returnLong.parseLong(getString().trim());","finalfloatgetFloat()throwsException{","if(isNull())return0;","returnFloat.parseFloat(getString().trim());","finaldoublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["privateStringname;//thenameoftheoriginalcolumninthetable","privateStringalias;","privateExpression[]params;","Expression(inttype){","this.type=type;","protectedObjectclone()throwsCloneNotSupportedException{"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["}else{","value[0]=(int)(complement\>\>32);","value[1]=(int)complement;","signum=1;","MutableNumeric(longcomplement,intscale){","this(complement);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionCaseextendsExpression/*Function*/{","ExpressionFunctionCase(){","super(FUNCTION);","privatefinalExpressionscases=newExpressions();","privatefinalExpressionsresults=newExpressions();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["case\'.\':","if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){","intk=tokenStart;","if(k==i){//pointisfirstcharacter"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicResultSetgetVersionColumns(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=newObject[0][0];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.RIGHT:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.RIGHT_JOIN);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncreateTable();","caseSQLTokenizer.VIEW:","returncreateView();","caseSQLTokenizer.INDEX:","returncreateIndex(false);","caseSQLTokenizer.PROCEDURE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnint2bytes(Float.floatToIntBits(value));","staticbyte[]long2bytes(longvalue){","byte[]result=newbyte[8];","result[0]=(byte)(value\>\>56);","result[1]=(byte)(value\>\>48);","result[2]=(byte)(value\>\>40);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["output.writeByte(3);","((IndexNode)value).saveRef(output);","output.writeShort(nodes.length);","for(inti=0;i\<nodes.length;i++){","nodes[i].saveRef(output);","voidsaveRef(StoreImploutput)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["char[]puffer=remainderKey;","value=null;","remainderKey=null;","IndexNodenewNode=addNode(puffer[0]);","if(puffer.length==1){","newNode.value=rowOffset;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.REAL);","longgetMoney()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicStringgetSQLKeywords(){","return\"database,use\";","privateStringgetFunctions(intfrom,intto){","StringBufferbuf=newStringBuffer();","for(inti=from;i\<=to;i++){","if(i!=from)buf.append(\',\');"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["internalExpressions.add(expr);","returninternalExpressions.size()-1;","}else{","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","Expression[]params=expr.getParams();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["matrix=newint[count];","if(noColumns){","columnExpressions.clear();","for(inti=0;i\<count;i++){","matrix[i]=i;","if(count!=cmdSel.columnExpressions.size())"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?1:0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["references=newForeignKeys();","inttype;","while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();","switch(type){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["return;","privatevoidorder(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);","cmd.setOrder(expressionTokenList(cmd,SQLTokenizer.ORDER));","privatevoidlimit(CommandSelectselCmd)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["nextToken(MISSING_PARENTHESIS_L);","token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){","CommandSelectcmdSel=select();","leftExpr=newExpressionInSelect(con,leftExpr,cmdSel,operation);","nextToken(MISSING_PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Stringcolumn=store.readString();","columns.add(column);","expressions.add(sqlParser.parseExpression(column));","IndexDescriptionindexDesc=newIndexDescription(store.readString(),tableView.name,constraintType,expressions,columns);","indexDesc.init(database,tableView);","indexDesc.load(database);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["|(puffer[offset++]&0xFF);","longreadLong(){","return(((long)(puffer[offset++]&0xFF))\<\<56)","|(((long)(puffer[offset++]&0xFF))\<\<48)","|(((long)(puffer[offset++]&0xFF))\<\<40)","|(((long)(puffer[offset++]&0xFF))\<\<32)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["if(token==null||token.value!=SQLTokenizer.PARENTHESIS_L){","displaySize=30;","previousToken();","}else{","token=nextToken(MISSING_EXPRESSION);","try{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(value!=0){","buf.append(Utils.digits[value/10]);","value%=10;","if(value!=0)","buf.append(Utils.digits[value]);","privatefinalstaticvoidformatHour12(inthour,StringBufferbuf){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(StringcolumnName)throwsSQLException{","returngetObject(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["prev=lock;","while(lock!=null){","if(lock==storePage){","if(lock==prev){","if(lock.nextLock==null){","locks.remove(pageKey);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["setNull(findParameter(parameterName),sqlType,typeName);","publicStringgetString(StringparameterName)throwsSQLException{","returngetString(findParameter(parameterName));","publicbooleangetBoolean(StringparameterName)throwsSQLException{","returngetBoolean(findParameter(parameterName));","publicbytegetByte(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnidentity;","voidsetAutoIncrement(booleanidentity){","this.identity=identity;","intinitAutoIncrement(FileChannelraFile,longfilePos)throwsIOException{","if(identity){","counter=newIdentity(raFile,filePos);"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["publicvoidclose(){","st.con.log.println(\"ResultSet.close\");","cmd=null;","publicbooleanwasNull(){","returnwasNull;","publicStringgetString(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["link.filePos=fileOffset;","finallongcommit()throwsSQLException{","longresult=super.commit();","link.filePos=fileOffset;","link.page=null;","returnresult;"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["addKeyWord(\"SQL_REAL\",SQL_REAL);","addKeyWord(\"SQL_SMALLINT\",SQL_SMALLINT);","addKeyWord(\"SQL_TIME\",SQL_TIME);","addKeyWord(\"SQL_TIMESTAMP\",SQL_TIMESTAMP);","addKeyWord(\"SQL_TINYINT\",SQL_TINYINT);","addKeyWord(\"SQL_VARBINARY\",SQL_VARBINARY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["page=find(page,stringToBinarySortOrder(expr.getString(),false),nodeList);","break;","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:","page=find(page,stringToBinarySortOrder(expr.getString(),true),nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["voidclose()throwsException{","if(raFile!=null){","raFile.close();","raFile=null;","privatefinalvoidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnTypes.TIMESTAMP;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","returnTypes.CHAR;","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnfalse;","returntrue;","privatebooleancreateJoinScrollIndex()throwsException{","if(type==CROSS_JOIN){","returnfalse;","if(type!=INNER_JOIN){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["StringreadString(){","intlength=readShort()&0xFFFF;","returnnewString(readChars(length));","voidwriteBytes(byte[]daten){","intnewSize=offset+daten.length;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"DATEDIFF\",TIMESTAMPDIFF);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPDIFF\",TIMESTAMPDIFF);","addKeyWord(\"WEEK\",WEEK);","addKeyWord(\"YEAR\",YEAR);","staticfinalintSQL_TSI_FRAC_SECOND=1250;","staticfinalintSQL_TSI_SECOND=1251;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Stringvalue=entries[i][1];","messages.put(key,value);","privatefinalvoidsetSqlStates(){","Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<SQL_STATES.length;i++){","Stringkey=SQL_STATES[i][0];"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseGREATER:returncomp\>0;","caseGRE_EQU:returncomp\>=0;","caseLESSER:returncomp\<0;","caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importsmallsql.database.language.Language;","abstractclassExpressionFunctionextendsExpression{","Expressionparam1;","Expressionparam2;","Expressionparam3;","Expressionparam4;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["if(row==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","rowIdx=(row\>0)?","Math.min(row-1,rowList.size()):","Math.max(row+rowList.size(),-1);","returnmove();","finalbooleanrelative(introws){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["booleanlast()throwsException{","afterLast();","returnprevious();","finalbooleanisLast()throwsException{","if(row==0){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["prev=lock;","lock=lock.nextLock;","break;","caseLOCK_TAB:","assertstorePage.con==tabLockConnection:\"InternalErrorwithTabLock\";","if(--tabLockCount==0)tabLockConnection=null;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["packagesmallsql.database.language;","importjava.util.HashMap;","importjava.util.HashSet;","importjava.util.Locale;","importjava.util.Map;","importjava.util.Set;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnrow\>getRowCount()?0:row;","finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);","useSetRowPosition=true;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returnparam3.isNull();","booleangetBoolean()throwsException{","if(param1.getBoolean())","returnparam2.getBoolean();","returnparam3.getBoolean();","intgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["fullReturnCounter=0;","right.first();","left.nullRow();","while(isFullNotValid[fullReturnCounter++]){","if(fullReturnCounter\>=fullRowCount){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.MONEY:","return((Number)obj).floatValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnmove();","finalbooleanprevious(){","if(rowIdx--\<0)rowIdx=-1;","returnmove();","finalbooleannext(){","rowIdx++;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["addKeyWord(\"TRANSACTION\",TRANSACTION);","addKeyWord(\"ISOLATION\",ISOLATION);","addKeyWord(\"LEVEL\",LEVEL);","addKeyWord(\"READ\",READ);","addKeyWord(\"COMMITTED\",COMMITTED);","addKeyWord(\"UNCOMMITTED\",UNCOMMITTED);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(!isSetFrom){","throwSmallSQLException.create(Language.COL_INVALID_NAME,expr.getName());","compileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionParams(Expressionexpr)throwsException{","Expression[]expParams=expr.getParams();","isAggregateFunction=isAggregateFunction||expr.getType()\>=Expression.GROUP_BEGIN;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["char[]puffer=newchar[length];","for(inti=0;i\<length;i++){","puffer[i]=Character.toLowerCase(Character.toUpperCase(value.charAt(i)));","returnpuffer;","finalstaticprivatechar[]bytesToBinarySortOrder(byte[]value){","intlength=value.length;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseCOUNT:","value=newMutableInteger(0);","dataType=SQLTokenizer.INT;","break;","default:thrownewError();","ExpressionValue(Objectvalue,intdataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnstatus==NORMAL||(status==UPDATED_PAGE&&updatePointer!=null);","@Override","intgetUsedSize(){","returnsizeUsed;","@Override","longgetNextPagePos(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.AVG:","if(paramCount!=1){","invalidParamCount=true;","expr=null;//Onlyforthecompiler","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!isNull)offset+=count*4;","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{VALUE_NULL_INVALID,\"NullWertesindungÃ¼ltigfÃ¼rdieSpalte\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Kannnichtkonvertierenein{0}Wertzueinem{1}Wert.\"},","{BYTEARR_INVALID_SIZE,\"UngÃ¼ltigeBytearrayGroÃŸe{0}fÃ¼rUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjektwurdegelÃ¶scht.\"},","{PARAM_CLASS_UNKNOWN,\"UnbekanteParameterKlasse:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}istleer.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["addKeyWord(\"REPEAT\",REPEAT);","addKeyWord(\"REPLACE\",REPLACE);","addKeyWord(\"RIGHT\",RIGHT);","addKeyWord(\"RTRIM\",RTRIM);","addKeyWord(\"SOUNDEX\",SOUNDEX);","addKeyWord(\"SPACE\",SPACE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicstaticfinalStringFLAGVALUE_INVALID=\"SS-0582\";","publicstaticfinalStringARGUMENT_INVALID=\"SS-0583\";","publicstaticfinalStringGENER_KEYS_UNREQUIRED=\"SS-0584\";","publicstaticfinalStringSEQUENCE_HEX_INVALID=\"SS-0585\";","publicstaticfinalStringSEQUENCE_HEX_INVALID_STR=\"SS-0586\";","publicstaticfinalStringSYNTAX_BASE_OFS=\"SS-0610\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.INT);","longgetLong()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.BINARY);","booleanisInList()throwsException{","if(left.isNull())returnfalse;","try{","for(inti=0;i\<inList.length;i++){","right=inList[i];"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"SQL_TSI_DAY\",SQL_TSI_DAY);","addKeyWord(\"WK\",SQL_TSI_WEEK);","addKeyWord(\"WW\",SQL_TSI_WEEK);","addKeyWord(\"SQL_TSI_WEEK\",SQL_TSI_WEEK);","addKeyWord(\"M\",SQL_TSI_MONTH);","addKeyWord(\"MM\",SQL_TSI_MONTH);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{STXADD_ADDITIONAL_TOK,\"AdditionaltokenafterendofSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Identifierexpected.\"},","{STXADD_IDENT_EMPTY,\"EmptyIdentifier.\"},","{STXADD_IDENT_WRONG,\"WrongIdentifier\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"InvalidoperatorminusfordatatypeVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"Unknownfunction.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privateColumndatatype(booleanisEscape)throwsSQLException{","SQLTokentoken;","intdataType;","if(isEscape){","token=nextToken(MISSING_SQL_DATATYPE);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"PROCEDURE\",PROCEDURE);","addKeyWord(\"TRANSACTION\",TRANSACTION);","addKeyWord(\"ISOLATION\",ISOLATION);","addKeyWord(\"LEVEL\",LEVEL);","addKeyWord(\"READ\",READ);","addKeyWord(\"COMMITTED\",COMMITTED);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnUtils.string2boolean(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(isMinus)tok=\"-\"+tok;","if(Utils.indexOf(\'.\',sql,token.offset,token.length)\>=0||","Utils.indexOf(\'e\',sql,token.offset,token.length)\>=0){","returnnewExpressionValue(newDouble(tok),SQLTokenizer.DOUBLE);","}else{","try{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return-1;","staticintindexOf(byte[]value,byte[]list,intoffset){","intlength=value.length;","loop1:","for(intend=list.length-length;offset\<=end;offset++){","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalvoidexecute()throwsException{","insertStorePages=table.getInserts(con);","firstOwnInsert=0x4000000000000000L|insertStorePages.size();","maxFileOffset=table.raFile.size();","beforeFirst();","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["default:","writeBytes(Utils.unique2bytes(expr.getString()));","break;","default:thrownewError(String.valueOf(column.getDataType()));","@Override","booleanisNull(intvalueOffset){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["node.addNode(digit,rowOffset);","returnnull;","returnnode.addRoot(digit);","node=node.addNode(digit);","if(node.isEmpty()){","if(isLastValue){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseEQUALS:","caseEQUALS_NULL:","caseGREATER:","caseGRE_EQU:","caseLESSER:","caseLES_EQU:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["buffer.append(\',\');","buffer.append(oldColumns.get(c).getName());","buffer.append(\")SELECT*FROM\").append(name);","con.createStatement().execute(buffer.toString());","database.replaceTable(oldTable,newTable);","}catch(Exceptionex){"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["row[5]=index.getName();//INDEX_NAME","row[6]=type;//TYPE","row[7]=Utils.getShort(c+1);//ORDINAL_POSITION","row[8]=columns.get(c);//COLUMN_NAME","rows.add(row);","Object[][]result=newObject[rows.size()][];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["cmdSel.from.execute();","cmdSel.beforeFirst();","StringskeyColumnNames=null;","ArrayListkeys=null;","booleanneedGeneratedKeys=st.needGeneratedKeys();","intgeneratedKeysType=0;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["synchronized(getMonitor()){","intcount=commitPages.size();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.rollback();","page.freeLock();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseMUL:returnleft.getFloat()*right.getFloat();","caseDIV:returnleft.getFloat()/right.getFloat();","caseNEGATIVE:return-left.getFloat();","caseMOD:returnleft.getFloat()%right.getFloat();","throwcreateUnspportedConversion(SQLTokenizer.REAL);","longgetMoney()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["throwSmallSQLException.create(Language.ROWSOURCE_READONLY);","voidsetAlias(Stringalias){","this.alias=alias;","StringgetAlias(){","return(alias!=null)?alias:getTableView().name;","booleanhasAlias(){"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["break;","caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:","IndexDescriptionindex=index(cmdCreate,token.value,cmdCreate.name,null,colName);","cmdCreate.addIndex(index);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","intcount=readShort()&0xFFFF;","if(!isNull)offset+=count;//notuse+=directlybecausereadShortchangetheoffset","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intvalue;","MutableInteger(intvalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["returnfrom.absolute(row);","finalbooleanrelative(introws)throwsException{","returnfrom.relative(rows);","finalintgetRow()throwsException{","introw=from.getRow();","if(maxRows\>=0&&row\>maxRows)return0;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.SQL_TSI_SECOND:","return(int)(param2.getLong()/1000-param1.getLong()/1000);","caseSQLTokenizer.SQL_TSI_MINUTE:","return(int)(param2.getLong()/60000-param1.getLong()/60000);","caseSQLTokenizer.SQL_TSI_HOUR:","return(int)(param2.getLong()/3600000-param1.getLong()/3600000);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["ByteArrayOutputStreambuffer=newByteArrayOutputStream();","buffer.write(bytes,0,start);","buffer.write(param4.getBytes());","if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));","buffer.write(bytes,start+length,bytes.length-start-length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["finalvoidsetOrder(Expressionsorder){","this.orderBy=order;","finalvoidsetMaxRows(intmax){","maxRows=max;","finalintgetMaxRows(){","returnmaxRows;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["addKeyWord(\"OCTET_LENGTH\",OCTETLEN);","addKeyWord(\"REPEAT\",REPEAT);","addKeyWord(\"REPLACE\",REPLACE);","addKeyWord(\"RIGHT\",RIGHT);","addKeyWord(\"RTRIM\",RTRIM);","addKeyWord(\"SOUNDEX\",SOUNDEX);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","returnfalse;","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BOOLEAN\"});","@Override","intgetInt(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["packagesmallsql.database;","importjava.sql.*;","classViewResultextendsTableViewResult{","finalprivateViewview;","finalprivateExpressionscolumnExpressions;","finalprivateCommandSelectcommandSelect;"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:{","LongpageKey=newLong(page);//TODOperformance","TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);","TableStorePageusableLock=null;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Expressionparam0=params[0];","Expressionparam1=params[1];","Expressionscolumns0=Utils.getExpressionNameFromTree(param0);","Expressionscolumns1=Utils.getExpressionNameFromTree(param1);","if(left.isExpressionsFromThisRowSource(columns0)&&right.isExpressionsFromThisRowSource(columns1)){","leftEx.add(param0);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["publiclonglongValue(){","returnvalue;","publicStringtoString(){","returnString.valueOf(value);","publicObjectgetImmutableObject(){","returnUtils.getInteger(value);"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["returnnull;","}else","returnpage.addRoot((char)0);","finalprivateIndexNodefind(IndexNodenode,longkey,intdigitCount,ArrayListnodeList){","for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["beforeFirst();","returnnext();","finalbooleannext()throwsException{","while(true){","booleanisNext=rowSource.next();","if(!isNext)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["publicintgetInt(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getInt();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["booleanabsolute(introw)throwsException{","if(row==0)","throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(row\<0){","afterLast();","rowIdx=rowList.size()+row;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["break;","caseSQLTokenizer.END:","expr.setEnd();","returnexpr;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalIndexNoderootPage;","Index(booleanunique){","rootPage=newIndexNode(unique,(char)-1);","Index(IndexNoderootPage){","this.rootPage=rootPage;","IndexScrollStatuscreateScrollStatus(Expressionsexpressions){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["params[i++]=cases.get(p);","params[i++]=results.get(p);","if(i\<params.length)","params[i]=elseResult;","super.setParams(params);","finalvoidsetParams(Expression[]params){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["try{","finalintlength=datetime.length();","finalintyear;","finalintmonth;","finalintday;","finalinthour;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["cmdSel.from.execute();","if(cmdSel.columnExpressions.size()!=1)","throwSmallSQLException.create(Language.SUBQUERY_COL_COUNT,newInteger(cmdSel.columnExpressions.size()));","index.clear();","while(cmdSel.next()){","try{"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["addKeyWord(\"CHARACTER_LENGTH\",CHARACTLEN);","keywords.put(newInteger(_CHAR),\"CHAR\");//neededformetadatafunctions","addKeyWord(\"CONCAT\",CONCAT);","addKeyWord(\"DIFFERENCE\",DIFFERENCE);","addKeyWord(\"STUFF\",INSERT);//aliasforMSSQLServer","addKeyWord(\"INSERT\",INSERT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intlength;//thelengthofthetoken","Stringname;","SQLToken(intvalue,inttokenStart,inttokenEnd){","this.value=value;","this.offset=tokenStart;","this.length=tokenEnd-tokenStart;"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["staticfinalintMIN=1401;","staticfinalintMAX=1402;","staticfinalintSUM=1403;","staticfinalintFIRST=1404;","staticfinalintLAST=1405;","staticfinalintAVG=1406;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:","page=find(page,bytesToBinarySortOrder(expr.getBytes()),nodeList);","break;","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["View(SSConnectioncon,CommandSelectcommandSelect)throwsException{","super(\"UNION\",newColumns());","this.sql=null;","this.commandSelect=commandSelect;","createColumns(con);","privatevoidcreateColumns(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["returncolumn.getScale();","intgetDisplaySize(){","returncolumn.getDisplaySize();","booleanisAutoIncrement(){","returncolumn.isAutoIncrement();","booleanisCaseSensitive(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){","returnvalue;","publicintintValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["buffer.write(param4.getBytes());","if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));","buffer.write(bytes,start+length,bytes.length-start-length);","returnbuffer.toByteArray();","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["Columncol=datatype(false);","nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,null);","caseSQLTokenizer.TIMESTAMPDIFF:","token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["params[0]=newExpressionValue(\"*\",SQLTokenizer.VARCHAR);","expr=newExpressionName(Expression.COUNT);","break;","caseSQLTokenizer.SUM:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.SUM);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnrow;","finalvoidupdateRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","intsavepoint=con.getSavepoint();","try{","for(intt=0;t\<tables.size();t++){","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(t));"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["DateTime(longtime,intdataType){","switch(dataType){","caseSQLTokenizer.SMALLDATETIME:","intseconds=(int)(time%60000);","if(seconds\<0){","seconds+=60000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return(short)getInt(columnIndex);","publicintgetInt(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getInt();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["abstractclassExpressionFunctionextendsExpression{","Expressionparam1;","Expressionparam2;","Expressionparam3;","Expressionparam4;","ExpressionFunction(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["finalStringgetName(){","returnname;","finalbooleanisPrimary(){","returnconstraintType==SQLTokenizer.PRIMARY;","finalbooleanisUnique(){","returnconstraintType==SQLTokenizer.PRIMARY||constraintType==SQLTokenizer.UNIQUE;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returntrue;","publicbooleansupportsSelectForUpdate(){","returntrue;","publicbooleansupportsStoredProcedures(){","returnfalse;","publicbooleansupportsSubqueriesInComparisons(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["thrownewjava.lang.UnsupportedOperationException(\"callescapesequence\");","default:thrownewError();","token=nextToken(ESCAPE_MISSING_CLOSE);","returnexpr;","caseSQLTokenizer.QUESTION:","ExpressionValueparam=newExpressionValue();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnsize-2;","finalprivatevoidinsertNodeLastLevel(intoctet)throwsSQLException{","intoldOffset=offset;","if(data.length\<size+2)resize();","System.arraycopy(data,offset,data,offset+2,size-offset);","size+=2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["Expressions(){","data=newExpression[16];","Expressions(intinitSize){","data=newExpression[initSize];","finalintsize(){","returnsize;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["if(storeinstanceofStoreNull&&store!=Store.NULL){","returntrue;","if(storeinstanceofStoreImpl&&","((StoreImpl)store).isRollback()){","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["try{","returnnewExpressionValue(newInteger(tok),SQLTokenizer.INT);","}catch(NumberFormatExceptione){","returnnewExpressionValue(newLong(tok),SQLTokenizer.BIGINT);","}else{","checkValidIdentifier(tok,token);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicvoidsetHoldability(intholdability){","this.holdability=holdability;","publicintgetHoldability(){","returnholdability;","intgetSavepoint()throwsSQLException{","testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","abstractvoidexecuteImpl(SSConnectioncon,SSStatementst)throwsException;","SSResultSetgetQueryResult()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;","staticbyte[]double2bytes(doublevalue){","returnlong2bytes(Double.doubleToLongBits(value));","staticbyte[]float2bytes(floatvalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalprivatevoidcorrectPointers(intstartOffset,intoldOffset,intdiff,intlevel){","offset=startOffset;","booleanfirstNode=true;","while(offset\<size){","if(offset==oldOffset){","intabsDiff=Math.abs(diff);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["complement[offset++]=(byte)(val\>\>8);","complement[offset++]=(byte)(val);","returncomplement;","publicintintValue(){","returnUtils.long2int(longValue());","publiclonglongValue(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?10000:0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"SQL_DATE\",SQL_DATE);","addKeyWord(\"SQL_DECIMAL\",SQL_DECIMAL);","addKeyWord(\"SQL_DOUBLE\",SQL_DOUBLE);","addKeyWord(\"SQL_FLOAT\",SQL_FLOAT);","addKeyWord(\"SQL_INTEGER\",SQL_INTEGER);","addKeyWord(\"SQL_LONGVARBINARY\",SQL_LONGVARBINARY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["case\'R\':","c=\'6\';","break;","default:","c=\'0\';","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","count=readByte();","offset+=2;","if(!isNull)offset+=count*4;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.LONG);","doublegetDouble()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["while(pattern.length()\>mIdx&&value.length()\>sIdx){","m=Character.toUpperCase(pattern.charAt(mIdx++));","if(Character.toUpperCase(value.charAt(sIdx))!=m){","if(m==\'%\'||m==\'_\'){","mIdx--;","break;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returntrue;","rowSource.beforeFirst();","returnfalse;","booleannext()throwsException{","if(++rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returnobj.toString();","byte[]getBytes()throwsException{","returngetBytes(getObject(),dataType);","staticbyte[]getBytes(Objectobj,intdataType)throwsException{","if(obj==null)returnnull;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalIndexDescriptionfk;","finalintupdateRule=DatabaseMetaData.importedKeyNoAction;","finalintdeleteRule=DatabaseMetaData.importedKeyNoAction;","ForeignKey(StringpkTable,IndexDescriptionpk,StringfkTable,IndexDescriptionfk){","this.pkTable=pkTable;","this.fkTable=fkTable;"]": ["|project://smallsql/src/smallsql/database/ForeignKey.java|"],
"["TableView(Stringname,Columnscolumns){","this.name=name;","this.columns=columns;","staticTableViewload(SSConnectioncon,Databasedatabase,Stringname)throwsSQLException{","FileChannelraFile=null;","try{"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["returndata[idx\<\<1];","finallongget2(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[(idx\<\<1)+1];","finalvoidadd(longvalue1,longvalue2){"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["switch(operation){","caseADD:returnlVal+rVal;","caseSUB:returnlVal-rVal;","caseMUL:returnlVal*rVal;","caseDIV:returnlVal/rVal;","caseNEGATIVE:return-rVal;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.SELECT:","cmd.addValues(select());","while(parthesisCount--\>0){","nextToken(MISSING_PARENTHESIS_R);","returncmd;","caseSQLTokenizer.PARENTHESIS_L:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intidx2=url.indexOf(\'?\');","if(idx1\>0){","StringdbPath=(idx2\>0)?url.substring(idx1+1,idx2):url.substring(idx1+1);","props.setProperty(\"dbpath\",dbPath);","if(idx2\>0){","StringpropsString=url.substring(idx2+1).replace(\'&\',\';\');"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["if(c!=0){","buffer.append(\',\');","buffer.append(oldColumns.get(c).getName());","buffer.append(\")SELECT*FROM\").append(name);","con.createStatement().execute(buffer.toString());","database.replaceTable(oldTable,newTable);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["remainderKey=null;","IndexNodenewNode=addNode(puffer[0]);","if(puffer.length==1){","newNode.value=rowOffset;","}else{","newNode.moveRemainderValueSub(rowOffset,puffer);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["expr=newExpressionFunctionChar();","break;","caseSQLTokenizer.CONCAT:","if(paramCount!=2){","invalidParamCount=true;","expr=null;//onlyforcompiler"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticfinalint[]MISSING_WHERE={SQLTokenizer.WHERE};","privatestaticfinalint[]MISSING_WHERE_COMMA={SQLTokenizer.WHERE,SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_ISOLATION={SQLTokenizer.ISOLATION};","privatestaticfinalint[]MISSING_LEVEL={SQLTokenizer.LEVEL};","privatestaticfinalint[]COMMANDS_TRANS_LEVEL={SQLTokenizer.READ,SQLTokenizer.REPEATABLE,SQLTokenizer.SERIALIZABLE};","privatestaticfinalint[]MISSING_READ={SQLTokenizer.READ};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MILLISECOND:","returnSQLTokenizer.SQL_TSI_FRAC_SECOND;","caseSQLTokenizer.SECOND:","returnSQLTokenizer.SQL_TSI_SECOND;","caseSQLTokenizer.MINUTE:","returnSQLTokenizer.SQL_TSI_MINUTE;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME).toString();","caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE).toString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);","if(idx2\>0){","hour=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["page=find(page,stringToBinarySortOrder(expr.getString(),true),nodeList);","break;","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["addKeyWord(\"COUNT\",COUNT);","addKeyWord(\"MIN\",MIN);","addKeyWord(\"MAX\",MAX);","addKeyWord(\"SUM\",SUM);","addKeyWord(\"FIRST\",FIRST);","addKeyWord(\"LAST\",LAST);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["daten[13]=hex2byte(chars,30);","daten[14]=hex2byte(chars,32);","daten[15]=hex2byte(chars,34);","returndaten;","privatestaticbytehex2byte(char[]hex,intoffset)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["throwSmallSQLException.create(Language.SUBQUERY_COL_COUNT,newInteger(cmdSel.columnExpressions.size()));","index.clear();","while(cmdSel.next()){","try{","index.addValues(0,cmdSel.columnExpressions);","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","bytes=newbyte[16];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","default:thrownewError();","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","value=newMutableInteger(expr.getInt());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.SMALLMONEY:","return4;","caseSQLTokenizer.TIMESTAMP:","return9;//nanoseconds","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["intnewCapacity=newTable.length;","for(intj=0;j\<src.length;j++){","Entrye=src[j];","if(e!=null){","src[j]=null;","do{"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["cal.set(1970,0,d+1,0,0,t);","cal.set(Calendar.MILLISECOND,millis);","returncal.getTimeInMillis();","privatestaticlongremoveDateTimeOffset(longdatetime){","synchronized(cal){","cal.setTimeZone(TimeZone.getDefault());"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return21;","default:","returnprecision;","staticintgetDataTypePrecision(intdataType,intdefaultValue){","switch(dataType){","caseSQLTokenizer.NULL:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{TABLE_OR_VIEW_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeinegÃ¼ltigerTabellenoderViewSpeicher.\"},","{TABLE_EXISTENT,\"DieTabelleoderView\'\'{0}\'\'existiertbereits.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'istkeineTabelle.\"},","{PK_ONLYONE,\"EineTabellekannnureinenPrimÃ¤rschlÃ¼sselhaben.\"},","{KEY_DUPLICATE,\"DoppelterSchlÃ¼ssel.\"},","{MONTH_TOOLARGE,\"DerMonatistzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["page[4]=(byte)(value\>\>24);","page[5]=(byte)(value\>\>16);","page[6]=(byte)(value\>\>8);","page[7]=(byte)(value);","returnnewStorePage(page,8,raFile,filePos);","voidcreateNextValue(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["ObjectgetObject(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getObject();","StringgetString(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBytes();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["static{","addKeyWord(\"COUNT\",COUNT);","addKeyWord(\"MIN\",MIN);","addKeyWord(\"MAX\",MAX);","addKeyWord(\"SUM\",SUM);","addKeyWord(\"FIRST\",FIRST);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["(expressions.get(level).getAlias()!=SQLTokenizer.DESC_STR),","scroll,level));","continue;","}else","returngetReturnValue(status.nodeValue);","idx=++status.idx;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["finalprivateTabletable;","privateListinsertStorePages;","privatelongfirstOwnInsert;","privatelongmaxFileOffset;","TableResult(Tabletable){","this.table=table;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["{VIEWDROP_NOT_VIEW,\"01000\"},","{VIEW_CANTDROP,\"01000\"},","{RSET_NOT_PRODUCED,\"01000\"},","{RSET_READONLY,\"01000\"},","{RSET_FWDONLY,\"01000\"},","{RSET_CLOSED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["TableStorePagestorePage=requestLock(con,SQLTokenizer.INSERT,-1);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-1);","StoreImplgetStoreTemp(SSConnectioncon)throwsException{","TableStorePagestorePage=newTableStorePage(con,this,LOCK_NONE,-2);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-2);","StoreImplgetLobStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["maxFileOffset=table.raFile.size();","beforeFirst();","@Override","finalTableViewgetTableView(){","returntable;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["addKeyWord(\"TIMESTAMP\",TIMESTAMP);","addKeyWord(\"SMALLDATETIME\",SMALLDATETIME);","addKeyWord(\"CHARACTER\",CHAR);//aliasforCHAR","addKeyWord(\"CHAR\",CHAR);","addKeyWord(\"NCHAR\",NCHAR);","addKeyWord(\"VARCHAR2\",VARCHAR);//aliasforOracleVARCHAR2"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.BIGINT:","returnnewLong(param1.getLong());","caseSQLTokenizer.REAL:","returnnewFloat(param1.getFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["checkValidIdentifier(tok,token);","ExpressionNameexpr=newExpressionName(tok);","if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());","}else{","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnUtils.string2boolean(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary())!=0;","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["synchronized(tableViews){","tableViews.put(name,table);","TablecreateTable(SSConnectioncon,StringtableName,Columnscolumns,IndexDescriptionsoldIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,tableName,columns,oldIndexes,newIndexes,foreignKeys);","synchronized(tableViews){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["case\'Q\':","case\'S\':","case\'X\':","case\'Z\':","c=\'2\';","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intstart=Math.min(Math.max(0,param2.getInt()-1),bytes.length);","intlength=Math.min(param3.getInt(),bytes.length);","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","buffer.write(bytes,0,start);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["if(Character.toUpperCase(value.charAt(sIdx))!=m){","if(m==\'%\'||m==\'_\'){","mIdx--;","break;","mIdx=lastmIdx;","continueweiter;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"SYSNAME\",SYSNAME);","addKeyWord(\"TEXT\",LONGVARCHAR);","addKeyWord(\"LONGVARCHAR\",LONGVARCHAR);","addKeyWord(\"NTEXT\",LONGNVARCHAR);","addKeyWord(\"LONGNVARCHAR\",LONGNVARCHAR);","addKeyWord(\"LONG\",LONG);//aliasforOracleLONGandLONGRAW"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticfinalintCOT=1007;","staticfinalintDEGREES=1008;","staticfinalintEXP=1009;","staticfinalintFLOOR=1010;","staticfinalintLOG=1011;","staticfinalintLOG10=1012;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["chars[0]=digits[(daten[offset+3]\>\>4)&0x0F];","chars[1]=digits[(daten[offset+3])&0x0F];","chars[2]=digits[(daten[offset+2]\>\>4)&0x0F];","chars[3]=digits[(daten[offset+2])&0x0F];","chars[4]=digits[(daten[offset+1]\>\>4)&0x0F];","chars[5]=digits[(daten[offset+1])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["packagesmallsql.database;","classForeignKeys{","privateintsize;","privateForeignKey[]data;","ForeignKeys(){","data=newForeignKey[16];"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["caseLAST:","set(expr.getObject(),expr.getDataType());","break;","caseCOUNT:","if(!expr.isNull())((MutableInteger)value).value++;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["updateInt(findColumn(columnName),x);","publicvoidupdateLong(StringcolumnName,longx)throwsSQLException{","updateLong(findColumn(columnName),x);","publicvoidupdateFloat(StringcolumnName,floatx)throwsSQLException{","updateFloat(findColumn(columnName),x);","publicvoidupdateDouble(StringcolumnName,doublex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["addKeyWord(\"REFERENCES\",REFERENCES);","addKeyWord(\"UNION\",UNION);","addKeyWord(\"ALL\",ALL);","addKeyWord(\"DISTINCT\",DISTINCT);","addKeyWord(\"CASE\",CASE);","addKeyWord(\"WHEN\",WHEN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(!left.next()){","returnfalse;","rows=index.findRows(leftEx,false,null);","}while(rows==null);","if(rowsinstanceofLong){","right.setRowPosition(((Long)rows).longValue());"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["clearRowBuffer();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicvoiddeleteRow()throwsSQLException{","st.con.log.println(\"deleteRow()\");","testNotInsertRow();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalvoidafterLast()throwsException{","while(next()){/*scrollaftertheend*/}","finalintgetRow()throwsException{","returnisCurrentRow?row:0;","finallonggetRowPosition(){","returnrowSource.getRowPosition();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","returndetails2.year-details1.year;","default:thrownewError();","longgetLong()throwsException{","returngetInt();","floatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalbooleangetBoolean(intcolIdx)throwsException{","returnstore.getBoolean(offsets[colIdx],dataTypes[colIdx]);","@Override","finalintgetInt(intcolIdx)throwsException{","returnstore.getInt(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case10://USAmm-dd-yy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["ExpressionArithmetic(Expressionleft,Expressionright,Expressionright2,intoperation){","super(FUNCTION);","this.left=left;","this.right=right;","this.right2=right2;","this.operation=operation;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["expr=newExpressionName(Expression.MAX);","break;","caseSQLTokenizer.MIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MIN);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"SQL_CHAR\",SQL_CHAR);","addKeyWord(\"SQL_DATE\",SQL_DATE);","addKeyWord(\"SQL_DECIMAL\",SQL_DECIMAL);","addKeyWord(\"SQL_DOUBLE\",SQL_DOUBLE);","addKeyWord(\"SQL_FLOAT\",SQL_FLOAT);","addKeyWord(\"SQL_INTEGER\",SQL_INTEGER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["default:","thrownewError();","privatevoidaddColumn(Columnscols,Columncolumn)throwsSQLException{","if(cols.get(column.getName())!=null){","throwSmallSQLException.create(Language.COL_DUPLICATE,column.getName());","cols.add(column);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["voidaddValues(Expressionsvalues){","this.cmdSel=newCommandSelect(log,values);","voidaddValues(CommandSelectcmdSel){","this.cmdSel=cmdSel;","privatevoidcompile(SSConnectioncon)throwsException{","TableViewtableView=con.getDatabase(false).getTableView(con,name);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["rollback();","throwSmallSQLException.createFromException(e);","voidrollbackFile(FileChannelraFile)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2double(readBinary());","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnull;","publicvoidsetTypeMap(Mapmap){","publicvoidsetHoldability(intholdability){","this.holdability=holdability;","publicintgetHoldability(){","returnholdability;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["addKeyWord(\"TABLE\",TABLE);","addKeyWord(\"VIEW\",VIEW);","addKeyWord(\"INDEX\",INDEX);","addKeyWord(\"PROCEDURE\",PROCEDURE);","addKeyWord(\"TRANSACTION\",TRANSACTION);","addKeyWord(\"ISOLATION\",ISOLATION);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"NULL\",NULL);","addKeyWord(\"YES\",TRUE);//aliasforTRUE","addKeyWord(\"TRUE\",TRUE);","addKeyWord(\"NO\",FALSE);//aliasforFALSE","addKeyWord(\"FALSE\",FALSE);","addKeyWord(\"BETWEEN\",BETWEEN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["abstractbooleangetBoolean()throwsException;","abstractintgetInt()throwsException;","abstractlonggetLong()throwsException;","abstractfloatgetFloat()throwsException;","abstractdoublegetDouble()throwsException;","abstractlonggetMoney()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnTypes.CHAR;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnTypes.VARCHAR;","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["TableStorePagenextLock;","TableStorePage(SSConnectioncon,Tabletable,intlockType,longfileOffset){","super(null,0,table.raFile,fileOffset);","this.con=con;","this.table=table;","this.lockType=lockType;"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["expr=newExpressionFunctionRadians();","break;","caseSQLTokenizer.RAND:","invalidParamCount=(paramCount!=0)&&(paramCount!=1);","expr=newExpressionFunctionRand();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintDAYNAME=1203;","staticfinalintDAYOFMONTH=1204;","staticfinalintDAYOFWEEK=1205;","staticfinalintDAYOFYEAR=1206;","staticfinalintDAY=1207;","staticfinalintHOUR=1208;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.PARENTHESIS_L:","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","parthesisCount++;","continueSwitch;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.sql.SQLException;","importsmallsql.database.language.Language;","finalclassCommandTableextendsCommand{","finalprivateColumnscolumns=newColumns();","finalprivateIndexDescriptionsindexes=newIndexDescriptions();","finalprivateForeignKeysforeignKeys=newForeignKeys();"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["writeFloat(expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","writeDouble(expr.getDouble());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoidadd(longvalue1,longvalue2){","intsize2=size\<\<1;","if(size2\>=data.length){","resize(size2);","data[size2]=value1;","data[size2+1]=value2;"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["{STMT_IS_CLOSED,\"LoStatementÃ¨instatochiuso.\"},","{SUBQUERY_COL_COUNT,\"Ilconteggiodellecolonnenellasubquerydeveessere1enon{0}.\"},","{JOIN_DELETE,\"DeleteRownonsupportatonellejoin.\"},","{JOIN_INSERT,\"InsertRownonsupportatonellejoin.\"},","{DELETE_WO_FROM,\"DeleteRownecessitaun\'\'espressioneFROM.\"},","{INSERT_WO_FROM,\"InsertRownecessitaun\'\'espressioneFROM.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["addKeyWord(\"NUMBER\",DECIMAL);","addKeyWord(\"VARNUM\",DECIMAL);","addKeyWord(\"DECIMAL\",DECIMAL);","addKeyWord(\"NUMERIC\",NUMERIC);","addKeyWord(\"REAL\",REAL);","addKeyWord(\"FLOAT\",FLOAT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TIME:","returnreadTime()!=0;","caseSQLTokenizer.DATE:","returnreadDate()!=0;","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);","nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampAdd(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;","caseSQLTokenizer.T://timeescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;","caseSQLTokenizer.TS://timestampescapesequence"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnfromEntry.getFloat(colIdx);","doublegetDouble()throwsException{","returnfromEntry.getDouble(colIdx);","longgetMoney()throwsException{","returnfromEntry.getMoney(colIdx);","MutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;","staticintbytes2int(byte[]bytes){","intresult=0;","intlength=Math.min(4,bytes.length);","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","return(int)(param2.getLong()-param1.getLong());","caseSQLTokenizer.SQL_TSI_SECOND:","return(int)(param2.getLong()/1000-param1.getLong()/1000);","caseSQLTokenizer.SQL_TSI_MINUTE:","return(int)(param2.getLong()/60000-param1.getLong()/60000);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["default:","Object[]param={\"ALTERTABLE\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandSetset()throwsSQLException{","SQLTokentoken=nextToken(COMMANDS_SET);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.readonly=readonly;","directory=canonicalFile;","if(!directory.isDirectory()){","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefile=newFile(directory,Utils.MASTER_FILENAME);","if(!file.exists())"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["threshold=12;","table=newEntry[17];","finalintsize(){","returnsize;","finalbooleanisEmpty(){","returnsize==0;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["formatMillis(details.millis,buf);","returnbuf.toString();","default:","returntoString();","privatefinalstaticvoidformatNumber(intvalue,intdigitCount,StringBufferbuf){","buf.setLength(buf.length()+digitCount);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["column.setPrecision(precision);","column.setScale(readByte());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","if(!readBoolean()){","Stringdef=readString();","column.setDefaultValue(newSQLParser().parseExpression(def),def);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["case105://italianodd-mm-yyyy","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["st.con.log.println(\"deleteRow()\");","testNotInsertRow();","getCmd().deleteRow(st.con);","clearRowBuffer();","publicvoidrefreshRow()throwsSQLException{","testNotInsertRow();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return(int)(value/10000.0);","publicfloatfloatValue(){","returnvalue/10000.0F;","publicdoubledoubleValue(){","returnvalue/10000.0;","publiclonglongValue(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["returnSSResultSetMetaData.getDisplaySize(dataType,precision,scale);","voidsetScale(intscale){","this.scale=scale;","intgetScale(){","switch(dataType){","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseTypes.VARBINARY:","caseTypes.LONGVARBINARY:","return\"[B\";","caseTypes.BLOB:","return\"java.sql.Blob\";","caseTypes.BIGINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject();","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return(long)(readFloat()*10000L);","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(long)(readDouble()*10000L);","caseSQLTokenizer.MONEY:","returnreadLong();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"COT\",COT);","addKeyWord(\"DEGREES\",DEGREES);","addKeyWord(\"EXP\",EXP);","addKeyWord(\"FLOOR\",FLOOR);","addKeyWord(\"LOG\",LOG);","addKeyWord(\"LOG10\",LOG10);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?10000:0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returncurrentDS.getMoney(colIdx);","finalMutableNumericgetNumeric(intcolIdx)throwsException{","returncurrentDS.getNumeric(colIdx);","finalObjectgetObject(intcolIdx)throwsException{","returncurrentDS.getObject(colIdx);","finalStringgetString(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["data[idx]=expr;","finalvoidaddAll(Expressionscols){","intcount=cols.size();","if(size+count\>=data.length){","resize(size+count);","System.arraycopy(cols.data,0,data,size,count);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["publicResultSetgetBestRowIdentifier(Stringcatalog,Stringschema,Stringtable,intscope,booleannullable)throwsSQLException{","try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=con.getDatabase(false).getBestRowIdentifier(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["rows=index.findRows(leftEx,false,null);","}while(rows==null);","if(rowsinstanceofLong){","right.setRowPosition(((Long)rows).longValue());","}else{","rowList=(LongTreeList)rows;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["staticMutableNumericgetNumeric(Objectobj,intdataType){","if(obj==null)returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","returnnewMutableNumeric((obj==Boolean.TRUE)?1:0);","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.MONEY:","returnreadLong()/10000;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DATE:","returnreadDate()!=0;","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime()!=0;","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnfalse;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalintgetInt()throwsException{","if(isNull())return0;","Stringstr1=ExpressionFunctionSoundex.getString(param1.getString());","Stringstr2=ExpressionFunctionSoundex.getString(param2.getString());","intdiff=0;","for(inti=0;i\<4;i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["default:thrownewError();","return;","writeBoolean(false);//false-isnotnull","column.setNewAutoIncrementValue(expr);","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnMoney.parseMoney(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","return(long)(Utils.bytes2double(readLongBinary())*10000L);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"ORDER\",ORDER);","addKeyWord(\"ASC\",ASC);","addKeyWord(DESC_STR,DESC);","addKeyWord(\"VALUES\",VALUES);","addKeyWord(\"AS\",AS);","addKeyWord(\"DEFAULT\",DEFAULT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.DECIMAL:","returnreadNumeric().doubleValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importsmallsql.database.language.Language;","publicclassSSDriverimplementsDriver{","staticfinalStringURL_PREFIX=\"jdbc:smallsql\";","staticSSDriverdrv;","static{","try{"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["if(!metadata.supportsTransactionIsolationLevel(level)){","throwSmallSQLException.create(Language.ISOLATION_UNKNOWN,String.valueOf(level));","isolationLevel=level;","publicintgetTransactionIsolation(){","returnisolationLevel;","publicSQLWarninggetWarnings(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["selCmd.setTables(from);","selCmd.addColumnExpression(newExpressionName(\"*\"));","nextToken(MISSING_ALL);","nextToken(MISSING_SELECT);","union.addDataSource(newViewResult(con,singleSelect()));","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidwriteFinish(SSConnectioncon){","finalvoidsave(StoreImplstore)throwsSQLException{","store.writeInt(constraintType);","store.writeInt(columns.size());","for(intc=0;c\<columns.size();c++){","store.writeString(columns.get(c));"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["staticfinalintSMALLINT=322;","staticfinalintINT=323;","staticfinalintCOUNTER=324;//aliasforINTIDENTITY,isusedfromMSACCESS","staticfinalintBIGINT=325;","staticfinalintSMALLMONEY=330;","staticfinalintMONEY=331;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"WK\",SQL_TSI_WEEK);","addKeyWord(\"WW\",SQL_TSI_WEEK);","addKeyWord(\"SQL_TSI_WEEK\",SQL_TSI_WEEK);","addKeyWord(\"M\",SQL_TSI_MONTH);","addKeyWord(\"MM\",SQL_TSI_MONTH);","addKeyWord(\"SQL_TSI_MONTH\",SQL_TSI_MONTH);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateExpression[]data;","Expressions(){","data=newExpression[16];","Expressions(intinitSize){","data=newExpression[initSize];","finalintsize(){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["returncurrentDS.isNull(colIdx);","finalbooleangetBoolean(intcolIdx)throwsException{","returncurrentDS.getBoolean(colIdx);","finalintgetInt(intcolIdx)throwsException{","returncurrentDS.getInt(colIdx);","finallonggetLong(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["voidwriteShort(intvalue){","verifyFreePufferSize(2);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteInt(intvalue){","verifyFreePufferSize(4);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["keywords.put(newInteger(_CHAR),\"CHAR\");//neededformetadatafunctions","addKeyWord(\"CONCAT\",CONCAT);","addKeyWord(\"DIFFERENCE\",DIFFERENCE);","addKeyWord(\"STUFF\",INSERT);//aliasforMSSQLServer","addKeyWord(\"INSERT\",INSERT);","addKeyWord(\"LCASE\",LCASE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnstr.substring(0,length);","caseSQLTokenizer.LONGVARBINARY:","returnparam1.getBytes();","caseSQLTokenizer.VARBINARY:{","byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["row[8]=Utils.getShort(c+1);//KEY_SEQ","row[9]=Utils.getShort(foreignKey.updateRule);//UPDATE_RULE","row[10]=Utils.getShort(foreignKey.deleteRule);//DELETE_RULE","row[11]=fk.getName();//FK_NAME","row[12]=pk.getName();//PK_NAME","row[13]=Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable);//DEFERRABILITY"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["addKeyWord(\"MIN\",MIN);","addKeyWord(\"MAX\",MAX);","addKeyWord(\"SUM\",SUM);","addKeyWord(\"FIRST\",FIRST);","addKeyWord(\"LAST\",LAST);","addKeyWord(\"AVG\",AVG);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(sharedPageData){","page=newbyte[PAGE_CONTROL_SIZE];","writeFinsh(con);","privateintoffset;//aktuelleread/writePositioninderPage","intgetCurrentOffsetInPage(){","returnoffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateIndexDescriptionindex(Commandcmd,intconstraintType,StringtableName,StringcontrainName,StringcolumnName)throwsSQLException{","if(constraintType!=SQLTokenizer.UNIQUE)nextToken(MISSING_KEY);","SQLTokentoken=nextToken();","if(token!=null){","switch(token.value){","caseSQLTokenizer.CLUSTERED:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntoString();","privatefinalstaticvoidformatNumber(intvalue,intdigitCount,StringBufferbuf){","buf.setLength(buf.length()+digitCount);","if(value\<0)value=-value;","for(inti=1;i\<=digitCount;i++){","buf.setCharAt(buf.length()-i,Utils.digits[value%10]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(params!=null){","for(intp=0;p\<params.length;p++){","addInternalExpressionFromSelect(params[p]);","return-1;","finalprivatevoidpatchExpressions(Expressionsexprs)throwsSQLException{","if(exprs==null)return;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["drv=newSSDriver();","java.sql.DriverManager.registerDriver(drv);","}catch(Throwablee){","e.printStackTrace();","publicConnectionconnect(Stringurl,Propertiesinfo)throwsSQLException{","if(!acceptsURL(url)){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["caseSQLTokenizer.INT:","writeInt(expr.getInt());","break;","caseSQLTokenizer.BIGINT:","writeLong(expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintTRIM=1121;","staticfinalintUCASE=1122;//laststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","static{","addKeyWord(\"ASCII\",ASCII);","addKeyWord(\"BIT_LENGTH\",BITLEN);","addKeyWord(\"CHAR_LENGTH\",CHARLEN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"ATAN2\",ATAN2);","addKeyWord(\"CEILING\",CEILING);","addKeyWord(\"COS\",COS);","addKeyWord(\"COT\",COT);","addKeyWord(\"DEGREES\",DEGREES);","addKeyWord(\"EXP\",EXP);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"SMALLDATETIME\",SMALLDATETIME);","addKeyWord(\"CHARACTER\",CHAR);//aliasforCHAR","addKeyWord(\"CHAR\",CHAR);","addKeyWord(\"NCHAR\",NCHAR);","addKeyWord(\"VARCHAR2\",VARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"VARCHAR\",VARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(needGeneratedKeys&&generatedKeysType==2){","int[]keyIndexes=st.getGeneratedKeyIndexes();","for(inti=0;i\<keyIndexes.length;i++){","if(c+1==keyIndexes[i]){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["break;","caseSQLTokenizer.NOT:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","token=nextToken(MISSING_NULL);","col.setNullable(false);","nullableWasSet=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importsmallsql.database.language.Language;","publicclassCommandDropextendsCommand{","CommandDrop(Loggerlog,Stringcatalog,Stringname,inttype){","super(log);","this.type=type;","this.catalog=catalog;"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["else","if(newValueinstanceofjava.util.Date){","DateTimedateTime;","this.value=dateTime=DateTime.valueOf((java.util.Date)newValue);","this.dataType=dateTime.getDataType();","}else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionDifferenceextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.DIFFERENCE;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["publicTimegetTime(StringparameterName)throwsSQLException{","returngetTime(findParameter(parameterName));","publicTimestampgetTimestamp(StringparameterName)throwsSQLException{","returngetTimestamp(findParameter(parameterName));","publicObjectgetObject(StringparameterName)throwsSQLException{","returngetObject(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["addKeyWord(\"REPLACE\",REPLACE);","addKeyWord(\"RIGHT\",RIGHT);","addKeyWord(\"RTRIM\",RTRIM);","addKeyWord(\"SOUNDEX\",SOUNDEX);","addKeyWord(\"SPACE\",SPACE);","addKeyWord(\"SUBSTRING\",SUBSTRING);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["abstractvoidsetRowPosition(longrowPosition)throwsException;","abstractvoidnullRow();","abstractvoidnoRow();","abstractbooleanrowInserted();","abstractbooleanrowDeleted();","booleanhasAlias(){"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["MutableNumericgetNumeric()throwsException{","returnfromEntry.getNumeric(colIdx);","ObjectgetObject()throwsException{","returnfromEntry.getObject(colIdx);","StringgetString()throwsException{","returnfromEntry.getString(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["if(index.isUnique()){","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","StringcolumnName=columns.get(c);","Columncolumn=tab.findColumn(columnName);","Object[]row=newObject[8];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(\"TABLE\".equalsIgnoreCase(types[i]))isTypeTable=true;","if(\"VIEW\".equalsIgnoreCase(types[i]))isTypeView=true;","if(database!=null){","Stringstables=database.getTables(tableNamePattern);","for(inti=0;i\<tables.size();i++){","Stringtable=tables.get(i);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.GREATER:returnGREATER;","caseSQLTokenizer.GREATER_EQU:returnGRE_EQU;","caseSQLTokenizer.LESSER:returnLESSER;","caseSQLTokenizer.LESSER_EQU:returnLES_EQU;","caseSQLTokenizer.UNEQUALS:returnUNEQUALS;","caseSQLTokenizer.BETWEEN:returnBETWEEN;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["offset=-1;","finalprivatevoidloopToEndOfNode(LongTreeListEnumlistEnum){","intnextEntry;","intnextOffset1,nextOffset2;","nextOffset1=offset;","offset+=2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["importjava.nio.channels.FileChannel;","importjava.nio.channels.FileLock;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","classUtils{","staticfinalStringMASTER_FILENAME=\"smallsql.master\";"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["value-=value%1;//moduloalsoworkwithvalueslargerlong","if(places\>0){","value/=factor;","}else{","value*=factor;","returnvalue;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["addKeyWord(\"SQL_SMALLINT\",SQL_SMALLINT);","addKeyWord(\"SQL_TIME\",SQL_TIME);","addKeyWord(\"SQL_TIMESTAMP\",SQL_TIMESTAMP);","addKeyWord(\"SQL_TINYINT\",SQL_TINYINT);","addKeyWord(\"SQL_VARBINARY\",SQL_VARBINARY);","addKeyWord(\"SQL_VARCHAR\",SQL_VARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["buf.append(digits[(bytes[i]\>\>4)&0x0F]);","buf.append(digits[(bytes[i])&0x0F]);","returnbuf.toString();","staticbyte[]hex2bytes(char[]hex,intoffset,intlength)throwsSQLException{","try{","byte[]bytes=newbyte[length/2];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["intlength=Math.min(param3.getInt(),str.length());","StringBufferbuffer=newStringBuffer();","buffer.append(str.substring(0,start));","buffer.append(param4.getString());","if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["packagesmallsql.database;","finalclassDataSources{","privateintsize;","privateDataSource[]data=newDataSource[4];","finalintsize(){","returnsize;"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["default:","millis=Integer.parseInt(strMillis.substring(0,3));","}else","millis=0;","}else{","hour=0;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseFIRST:","if(isEmpty())set(expr.getObject(),expr.getDataType());","break;","caseLAST:","set(expr.getObject(),expr.getDataType());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicintintValue(){","return(int)value;","publiclonglongValue(){","returnvalue;","publicStringtoString(){","returnString.valueOf(value);"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|"],
"["expr=newExpressionFunctionLog();","break;","caseSQLTokenizer.LOG10:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog10();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(list==null){","value=list=newLongTreeList();","list.add(rowOffset);","finalvoidaddRemainderKey(longrowOffset,longremainderValue,intcharCount)throwsSQLException{","saveRemainderValue(remainderValue,charCount);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["System.out.println(\"\\tVersion:\"+con.getMetaData().getDatabaseProductVersion());","System.out.println(\"\\tCurrentdatabase:\"+con.getCatalog());","System.out.println();","System.out.println(\"\\tUsetheUSEcommandtochangethedatabasecontext.\");","System.out.println(\"\\tType2timesENTERtoexecuteanySQLcommand.\");","StringBuffercommand=newStringBuffer();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["break;","IndexNodeparent=(IndexNode)nodeList.get(i);","parent.removeNode(node.getDigit());","node=parent;","finalprivateIndexNodefindNull(IndexNodepage){","returnpage.getChildNode((char)0);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["return!getColumnExpression(column).isDefinitelyWritable();","publicbooleanisWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();","publicbooleanisDefinitelyWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();","publicStringgetColumnClassName(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["writeShort(lengthColumn);","writeChars(daten);","for(inti=length;i\<lengthColumn;i++){","page[offset++]=\'\';","page[offset++]=0;","StringreadString(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnUtils.doubleToMoney(getDoubleImpl());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),true),isLastValues);","break;","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["result+=second*1000;","result+=minute*60000;","result+=hour*3600000;","result+=(day-1)*86400000L;","if(month\>11){","year+=month/12;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["correctPointers(0,oldOffset,2+pointerSize,0);","data[size++]=(byte)0;","data[size++]=(byte)0;","returnsize-2;","finalprivatevoidinsertNodeLastLevel(intoctet)throwsSQLException{","intoldOffset=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["staticfinalintBINARY=310;","staticfinalintVARBINARY=311;","staticfinalintRAW=312;","staticfinalintLONGVARBINARY=313;","staticfinalintBLOB=316;","staticfinalintTINYINT=321;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","offset+=4;","break;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["commandSelect=(CommandSelect)newSQLParser().parse(con,sql);","createColumns(con);","View(Databasedatabase,SSConnectioncon,Stringname,Stringsql)throwsException{","super(name,newColumns());","this.sql=sql;","this.commandSelect=null;"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["{FK_NOT_TABLE,\"01000\"},","{PK_ONLYONE,\"01000\"},","{KEY_DUPLICATE,\"01000\"},","{MONTH_TOOLARGE,\"01000\"},","{DAYS_TOOLARGE,\"01000\"},","{HOURS_TOOLARGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnfalse;","right.next();","returntrue;","}else","isFullNotValid[fullRightRowCounter-1]=result;","returnresult;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returngetInt(findParameter(parameterName));","publiclonggetLong(StringparameterName)throwsSQLException{","returngetLong(findParameter(parameterName));","publicfloatgetFloat(StringparameterName)throwsSQLException{","returngetFloat(findParameter(parameterName));","publicdoublegetDouble(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["break;","caseSQLTokenizer.FULL:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.FULL_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intoldOffset=offset;","if(data.length\<size+2)resize();","System.arraycopy(data,offset,data,offset+2,size-offset);","size+=2;","writeShort(octet);","correctPointers(0,oldOffset,2,0);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["switch(getColumnExpression(column).getDataType()){","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returntrue;","returnfalse;","publicintisNullable(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["isNot=true;","continue;","default:","previousToken();","returnleftExpr;","if(isNot){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{SECS_TOOLARGE,\"SecondsaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"MillisecondsaretoolargeinTIMESTAMPvalue\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isaninvalidDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Unsupportedconversiontodatatype\'\'{0}\'\'fromdatatype\'\'{1}\'\'foroperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Unsupporteddatatype\'\'{0}\'\'foroperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Unsupporteddatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returntrue;","intgetInt()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"SQL_DECIMAL\",SQL_DECIMAL);","addKeyWord(\"SQL_DOUBLE\",SQL_DOUBLE);","addKeyWord(\"SQL_FLOAT\",SQL_FLOAT);","addKeyWord(\"SQL_INTEGER\",SQL_INTEGER);","addKeyWord(\"SQL_LONGVARBINARY\",SQL_LONGVARBINARY);","addKeyWord(\"SQL_LONGVARCHAR\",SQL_LONGVARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalintgetFunction(){returnSQLTokenizer.ROUND;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;","finalintplaces=param2.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|"],
"["staticintlong2int(longvalue){","if(value\>Integer.MAX_VALUE)","returnInteger.MAX_VALUE;","if(value\<Integer.MIN_VALUE)","returnInteger.MIN_VALUE;","return(int)value;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["throwSmallSQLException.createFromException(Language.DATETIME_INVALID,datetime,ex);","longgetTimeMillis(){","returntime;","intgetDataType(){","returndataType;","publicStringtoString(){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnfalse;","abstractbooleanisNull()throwsException;","abstractbooleangetBoolean()throwsException;","abstractintgetInt()throwsException;","abstractlonggetLong()throwsException;","abstractfloatgetFloat()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["TransactionSteppage=(TransactionStep)commitPages.get(i);","if(page.raFile==raFile){","page.rollback();","page.freeLock();","voidrollback(intsavepoint)throwsSQLException{","testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returngetResult().getInt();","finallonggetLong()throwsException{","returngetResult().getLong();","finalfloatgetFloat()throwsException{","returngetResult().getFloat();","finaldoublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["returncomp\>=0&&0\>=Utils.compareBytes(leftBytes,right2.getBytes());","break;}","throwcreateUnspportedDataType();","StringgetString()throwsjava.lang.Exception{","if(isNull())returnnull;","returngetObject().toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","floatgetFloat()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["default:","thrownewError();","ExpressionparseExpression(Stringexpr)throwsSQLException{","this.sql=expr.toCharArray();","this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicStringtoString(){","StringBufferbuffer=newStringBuffer();","buffer.append(longValue()).append(\'.\');","finallongv=Math.abs(value);","buffer.append((char)((v%10000)/1000+\'0\'));","buffer.append((char)((v%1000)/100+\'0\'));"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["returntoken;//anexpressioncanbecontainedineverytoken.","if(validValues==MISSING_IDENTIFIER){","switch(token.value){","caseSQLTokenizer.PARENTHESIS_L:","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["setDate(findParameter(parameterName),x);","publicvoidsetTime(StringparameterName,Timex)throwsSQLException{","setTime(findParameter(parameterName),x);","publicvoidsetTimestamp(StringparameterName,Timestampx)throwsSQLException{","setTimestamp(findParameter(parameterName),x);","publicvoidsetAsciiStream(StringparameterName,InputStreamx,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["sizeUsed=sizePhysical=offset;","break;","caseSQLTokenizer.UPDATE:","if(status!=UPDATE_POINTER){","sizeUsed=offset;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row[10]=Utils.getInteger(col.isNullable()?DatabaseMetaData.columnNullable:DatabaseMetaData.columnNoNulls);//NULLABLE","row[12]=col.getDefaultDefinition();//COLUMN_DEF","row[15]=row[6];//CHAR_OCTET_LENGTH","row[16]=Utils.getInteger(i);//ORDINAL_POSITION","row[17]=col.isNullable()?\"YES\":\"NO\";//IS_NULLABLE","rows.add(row);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnrowPositions.size()-1;","finalvoidsetRowPosition(longrowPosition)throwsException{","left.setRowPosition(rowPositions.get1((int)rowPosition));","right.setRowPosition(rowPositions.get2((int)rowPosition));","finalbooleanrowInserted(){","returnleft.rowInserted()||right.rowInserted();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*12+details2.month)-(details1.year*12+details1.month);","caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*4+details2.month/3)-(details1.year*4+details1.month/3);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalbooleanrowInserted(){","returnfalse;","finalbooleanrowDeleted(){","returnfalse;","finalvoidnullRow(){","thrownewError();"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["returninsert();","caseSQLTokenizer.UPDATE:","returnupdate();","caseSQLTokenizer.CREATE:","returncreate();","caseSQLTokenizer.DROP:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleansupportsSchemasInTableDefinitions(){","returnfalse;","publicbooleansupportsSchemasInIndexDefinitions(){","returnfalse;","publicbooleansupportsSchemasInPrivilegeDefinitions(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["wasNull=expr.isNull();","returnexpr.getDouble();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(intcolumnIndex,intscale)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.EXECUTE:","returnexecute();","caseSQLTokenizer.TRUNCATE:","returntruncate();","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticSQLExceptioncreateUnsupportedConversion(intfromDataType,Objectobj,inttoDataType){","Object[]params={","SQLTokenizer.getKeyWord(fromDataType),","obj,","SQLTokenizer.getKeyWord(toDataType)","};"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"OUTER\",OUTER);","addKeyWord(\"FULL\",FULL);","addKeyWord(\"CROSS\",CROSS);","addKeyWord(\"USE\",USE);","addKeyWord(\"TOP\",TOP);","addKeyWord(\"ADD\",ADD);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicvoidupdateArray(StringcolumnName,Arrayx)throwsSQLException{","updateArray(findColumn(columnName),x);","finalprivateExpressiongetValue(intcolumnIndex)throwsSQLException{","if(values!=null){","ExpressionValuevalue=values[metaData.getColumnIdx(columnIndex)];","if(!value.isEmpty()||isInsertRow){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["page=findNull(page);","}else{","switch(expr.getDataType()){","caseSQLTokenizer.REAL:","page=find(page,floatToBinarySortOrder(expr.getFloat()),2,nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;","finalclassDatabase{","staticprivateHashMapdatabases=newHashMap();","privatefinalTableViewMaptableViews=newTableViewMap();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["addKeyWord(\"MONEY\",MONEY);","addKeyWord(\"NUMBER\",DECIMAL);","addKeyWord(\"VARNUM\",DECIMAL);","addKeyWord(\"DECIMAL\",DECIMAL);","addKeyWord(\"NUMERIC\",NUMERIC);","addKeyWord(\"REAL\",REAL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanlast()throwsException{","if(maxRows\>=0){","if(maxRows==0){","from.beforeFirst();","returnfalse;","returnfrom.absolute(maxRows);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["SQLTokenizer.BOOLEAN,","SQLTokenizer.LONGNVARCHAR,","SQLTokenizer.UNIQUEIDENTIFIER,","SQLTokenizer.NVARCHAR,","SQLTokenizer.NCHAR,","SQLTokenizer.VARCHAR,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["abstractlonggetMoney(intoffset,intdataType)throwsException;","abstractMutableNumericgetNumeric(intoffset,intdataType)throwsException;","abstractObjectgetObject(intoffset,intdataType)throwsException;","abstractStringgetString(intoffset,intdataType)throwsException;","booleanisValidPage(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BOOLEAN\"});","@Override","intgetInt(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ExpressionFunctionCase(){","super(FUNCTION);","privatefinalExpressionscases=newExpressions();","privatefinalExpressionsresults=newExpressions();","privateExpressionelseResult=Expression.NULL;","privateintdataType=-1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["addKeyWord(\"INDEX\",INDEX);","addKeyWord(\"PROCEDURE\",PROCEDURE);","addKeyWord(\"TRANSACTION\",TRANSACTION);","addKeyWord(\"ISOLATION\",ISOLATION);","addKeyWord(\"LEVEL\",LEVEL);","addKeyWord(\"READ\",READ);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returncolumnExpressions.get(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["importjava.io.File;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","publicclassCreateFileextendsTransactionStep{","privatefinalFilefile;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);","nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampDiff(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DECIMAL:","returnreadNumeric().intValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoidexecute()throwsException{","rowSource.execute();","Indexindex=newIndex(false);","lastRowOffset=-1;","while(rowSource.next()){","lastRowOffset=rowSource.getRowPosition();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returnnewDouble(getDouble());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(getMoney());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"FULL\",FULL);","addKeyWord(\"CROSS\",CROSS);","addKeyWord(\"USE\",USE);","addKeyWord(\"TOP\",TOP);","addKeyWord(\"ADD\",ADD);","addKeyWord(\"LIMIT\",LIMIT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["chars[33]=digits[(daten[offset+14])&0x0F];","chars[34]=digits[(daten[offset+15]\>\>4)&0x0F];","chars[35]=digits[(daten[offset+15])&0x0F];","returnnewString(chars);","staticbooleanstring2boolean(Stringval){","try{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["row[3]=SQLTokenizer.getKeyWord(dataType);//TYPE_NAME","row[4]=Utils.getInteger(column.getPrecision());//COLUMN_SIZE","row[6]=Utils.getShort(column.getScale());//DECIMAL_DIGITS","row[7]=Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN","rows.add(row);","Object[][]result=newObject[rows.size()][];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["intnextEntry;","intnextOffset1,nextOffset2;","nextOffset1=offset;","offset+=2;","if(listEnum.stack\<3)","offset+=pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(isNull())returnnull;","doublevalue=getDouble();","if(Double.isInfinite(value)||Double.isNaN(value))","returnnull;","returnnewMutableNumeric(value);","finalObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["publicvoidsetReadOnly(booleanreadOnly){","publicbooleanisReadOnly(){","returnreadonly;","publicvoidsetCatalog(Stringcatalog)throwsSQLException{","testClosedConnection();","database=Database.getDatabase(catalog,this,false);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnrow==0;","finalbooleanisFirst(){","returnrow==1;","voidbeforeFirst()throwsException{","scrollStatus.reset();","row=0;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["booleanfirstNode=true;//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","booleanfirstNode1=true;","booleanfirstNode2=true;","booleanfirstNode3=true;","while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["staticfinalintLOG=1011;","staticfinalintLOG10=1012;","staticfinalintMOD=1013;","staticfinalintPI=1014;","staticfinalintPOWER=1015;","staticfinalintRADIANS=1016;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["formatNumber(details.day,2,buf);","returnbuf.toString();","case102://ANSIyyyy.mm.dd","formatNumber(details.year,4,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["thrownoCurrentRow();","booleangetBoolean(intoffset,intdataType)throwsException{","thrownoCurrentRow();","byte[]getBytes(intoffset,intdataType)throwsException{","thrownoCurrentRow();","doublegetDouble(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database,name);","booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.INDEX_EXISTS,name);","FileChannelrandomFile=Utils.openRaFile(file,database.isReadOnly());"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.COMMA:","continuenextCol;","default:","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","privateSQLTokenaddColumn(SQLTokentoken,CommandTablecmdCreate)throwsSQLException{","StringcolName=getIdentifier(token);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}finally{","if(con.getAutoCommit())con.commit();","publicintfindColumn(StringcolumnName)throwsSQLException{","Expressionscolumns=columnExpressions;","for(inti=0;i\<columns.size();i++){","if(columnName.equalsIgnoreCase(columns.get(i).getAlias()))"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionDayOfMonthextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.DAYOFMONTH;","finalintgetInt()throwsException{","if(param1.isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfMonth.java|"],
"["booleanisCaseSensitive(){","returnexpr.isCaseSensitive();","booleanisNullable(){","returnexpr.isNullable();","intgetDataType(){","returnexpr.getDataType();"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["if(identity){","counter=newIdentity(raFile,filePos);","defaultValue=newExpressionValue(counter,SQLTokenizer.BIGINT);","return8;","voidsetNewAutoIncrementValue(Expressionobj)throwsException{","if(identity){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["intlast=value.length-1;","for(inti=0;i\<=last;i++){","value[i]=(i==last)?-value[i]:~value[i];","voidmul(MutableNumericnum){","BigDecimalbig=toBigDecimal().multiply(num.toBigDecimal());","setValue(big.unscaledValue().toByteArray());"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intdataType;","if(operation==NEGATIVE||operation==BIT_NOT){","if(leftIsNull)returnfalse;","dataType=left.getDataType();","}else{","finalbooleanrightIsNull=right.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnfalse;","if(row\>getRowCount()){","returnfalse;","booleanisNext=next();","previous();","return!isNext;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["return(byte[])obj;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.NCHAR:","return((String)obj).getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["classIndexScrollStatus{","privatefinalIndexNoderootPage;","privatefinalExpressionsexpressions;//isusedforthedescriptionofASCandDESC","privatefinaljava.util.StacknodeStack=newjava.util.Stack();//TODOperformanceStackdurchnichtsynchronisierteKlasseersetzten","finalvoidreset(){","nodeStack.clear();"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["updateAsciiStream(findColumn(columnName),x,length);","publicvoidupdateBinaryStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateBinaryStream(findColumn(columnName),x,length);","publicvoidupdateCharacterStream(StringcolumnName,Readerx,intlength)throwsSQLException{","updateCharacterStream(findColumn(columnName),x,length);","publicvoidupdateObject(StringcolumnName,Objectx,intscale)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnValue=(MutableNumeric)para1;","if(nValue.getSignum()\<0)nValue.setSignum(1);","returnnValue;","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["staticfinalintAND=21;//AND","staticfinalintNOT=31;//NOT","staticfinalintBIT_OR=41;//|","staticfinalintBIT_AND=42;//&","staticfinalintBIT_XOR=43;//^","staticfinalintEQUALS=51;//="]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.DECIMAL:","return(long)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.LONG);","privatelonggetLongImpl()throwsjava.lang.Exception{","if(isNull())return0;","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(leftIsNull)returnfalse;","dataType=left.getDataType();","}else{","finalbooleanrightIsNull=right.isNull();","if(operation==EQUALS_NULL&&leftIsNull&&rightIsNull)returntrue;","if(leftIsNull||rightIsNull)returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.util.Properties;","importjavax.swing.JOptionPane;","importsmallsql.database.*;","publicclassCommandLine{","publicstaticvoidmain(String[]args)throwsException{","System.out.println(\"SmallSQLDatabasecommandlinetool\\n\");"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["{STXADD_OPER_MINUS,\"UngÃ¼ltigerOperatorMinusfÃ¼rDatentypVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"UnbekannteFunktion.\"},","{STXADD_PARAM_INVALID_COUNT,\"UngÃ¼ltigeParamterAnzahl.\"},","{STXADD_JOIN_INVALID,\"UngÃ¼ltigeJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnerwartetschlieÃŸendeKlammerinFROMKlausel.\"},","{STXADD_KEYS_REQUIRED,\"BenÃ¶tigeSchlÃ¼sselwÃ¶rtersind:\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["raFile.read(buffer);","}else{","store.page=storePage.page;","store.sharedPageData=true;","store.readPageHeader();","store=store.loadUpdatedStore();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.BINARY:","return2+precision*2;","caseSQLTokenizer.SMALLDATETIME:","return21;","default:","returnprecision;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.LONGVARCHAR,length);","publicvoidsetUnicodeStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetCharacterStream()notyetimplemented.\");","publicvoidsetRef(inti,Refx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseSQLTokenizer.NVARCHAR:","count=readShort()&0xFFFF;","if(!isNull)offset+=count\<\<1;//notuse+=directlybecausereadShortchangetheoffset","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=String.CASE_INSENSITIVE_ORDER.compare(leftStr,right2.getString());","caseADD:returnUtils.string2boolean(leftStr+rightStr);","break;}"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(StringcolumnName)throwsSQLException{","returngetObject(findColumn(columnName));","publicintfindColumn(StringcolumnName)throwsSQLException{","returngetCmd().findColumn(columnName)+1;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["buf.append(digits[(bytes[i])&0x0F]);","returnbuf.toString();","staticbyte[]hex2bytes(char[]hex,intoffset,intlength)throwsSQLException{","try{","byte[]bytes=newbyte[length/2];","for(inti=0;i\<bytes.length;i++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getPrimaryKeys(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["this.dataType=dataType;","intgetDataType(){","returndataType;","intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(dataType,precision,scale);","voidsetScale(intscale){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returnSSResultSetMetaData.getDataTypePrecision(dataType,precision);","intgetColumnSize(){","if(SSResultSetMetaData.isNumberDataType(dataType))","returngetPrecision();","elsereturngetDisplaySize();","intgetFlag(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case103://britshdd/mm/yyyy","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(groupBy!=null){","for(inti=0;i\<groupBy.size();i++){","Expressionleft=groupBy.get(i);","intidx=addInternalExpressionFromGroupBy(left);","ExpressionNameright=newExpressionName(null);","right.setFrom(this,idx,newColumnExpression(left));"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value);","intreadByte(){","returnpage[offset++];","intreadUnsignedByte(){","returnpage[offset++]&0xFF;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicvoidcommit()throwsSQLException{","log.println(\"Commit\");","testClosedConnection();","synchronized(getMonitor()){","try{","intcount=commitPages.size();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["if(length\>str.length()){","char[]buffer=newchar[length-str.length()];","Arrays.fill(buffer,\'\');","returnstr+newString(buffer);","returnstr.substring(0,length);","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["con=newSSConnection(con);","TableoldTable=(Table)database.getTableView(con,name);","TableStorePagetableLock=oldTable.requestLock(con,SQLTokenizer.ALTER,-1);","StringnewName=\"#\"+System.currentTimeMillis()+this.hashCode();","try{","ColumnsoldColumns=oldTable.columns;"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["if((list[offset])==value)returnoffset;","return-1;","staticintindexOf(byte[]value,byte[]list,intoffset){","intlength=value.length;","loop1:","for(intend=list.length-length;offset\<=end;offset++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{CONNECTION_CLOSED,\"LaconnessioneÃ¨giÃ\u00a0chiusa.\"},","{VIEW_INSERT,\"INSERTnonÃ¨supportatoperunaview.\"},","{VIEWDROP_NOT_VIEW,\"NonÃ¨possibileeffettuareDROPVIEWcon\'\'{0}\'\'perchÃ©nonÃ¨unaview.\"},","{VIEW_CANTDROP,\"NonsipuÃ²effettuaredropsullaview\'\'{0}\'\'.\"},","{RSET_NOT_PRODUCED,\"NessunResultSetÃ¨statoprodotto.\"},","{RSET_READONLY,\"IlResultSetÃ¨disolalettura.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["staticfinalintSQL_TSI_QUARTER=1257;","staticfinalintSQL_TSI_YEAR=1258;","static{","addKeyWord(\"MS\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"SQL_TSI_FRAC_SECOND\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"S\",SQL_TSI_SECOND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalprivatevoidpatchExpressions(Expressionsexprs)throwsSQLException{","if(exprs==null)return;","for(inti=0;i\<exprs.size();i++){","exprs.set(i,patchExpression(exprs.get(i)));","finalprivatevoidpatchExpressions(Expressionexpression)throwsSQLException{","Expression[]params=expression.getParams();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["staticfinalintPARENTHESIS_R=\')\';//41","staticfinalintASTERISK=\'*\';//42","staticfinalintPLUS=\'+\';//43","staticfinalintCOMMA=\',\';//44","staticfinalintMINUS=\'-\';//45","staticfinalintPOINT=\'.\';//46"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnString.valueOf(readInt());","caseSQLTokenizer.BIGINT:","returnString.valueOf(readLong());","caseSQLTokenizer.REAL:","returnString.valueOf(readFloat());","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["writeInt(0);//nextPageOffset","writeLong(filePosUpdated);//Pointerofanupdatedpage","storePage.setPageData(page,sizeUsed);//TODOpagesollteeigentlichbeimeinlesengesetztsein","if(con==null){","returnstorePage.commit();","}else{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(intm=11;m\>=0;m--){","if(MONTH_DAYS[m]\<=day){","month=m;","day=day-MONTH_DAYS[m]+1;","break;","staticbooleanisLeapYear(intyear){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2long(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["byte[]getData(){","returnpage;","longcommit()throwsSQLException{","if(nextLock!=null){","fileOffset=nextLock.commit();","nextLock=null;"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["finalbooleanrowDeleted(){","if(storeinstanceofStoreNull&&store!=Store.NULL){","returntrue;","if(storeinstanceofStoreImpl&&","((StoreImpl)store).isRollback()){","returntrue;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["booleanfirst()throwsException{","beforeFirst();","returnnext();","booleanprevious()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()==0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["addRow(rowValues);","for(intc=0;c\<colCount;c++){","ExpressionValueexpr=rowValues[c]=newExpressionValue();","expr.set(row[c],-1);","Columncolumn=columns.get(c);","if(expr.getDataType()!=SQLTokenizer.NULL){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["complement[offset++]=(byte)(val);","returncomplement;","publicintintValue(){","returnUtils.long2int(longValue());","publiclonglongValue(){","if(value.length==0||signum==0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["staticStringbytes2hex(byte[]bytes){","StringBufferbuf=newStringBuffer(bytes.length\<\<1);","for(inti=0;i\<bytes.length;i++){","buf.append(digits[(bytes[i]\>\>4)&0x0F]);","buf.append(digits[(bytes[i])&0x0F]);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.INT:","returnreadInt();","caseSQLTokenizer.BIGINT:","returnreadLong();","caseSQLTokenizer.REAL:","return(long)readFloat();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","previousToken();","returntable;","privateJoinjoin(Commandcmd,DataSourcestables,RowSourceleft,inttype)throwsSQLException{","RowSourceright=rowSource(cmd,tables,0);","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intreadByte(){","returnpage[offset++];","intreadUnsignedByte(){","returnpage[offset++]&0xFF;","voidwriteBoolean(booleanvalue){","intnewSize=offset+1;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(type\>=Expression.GROUP_BEGIN){","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","internalExpressions.add(expr);","returninternalExpressions.size()-1;","}else{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["row++;","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;","if(lastRowOffset\>=0){","rowSource.setRowPosition(lastRowOffset);","}else{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["IndexScrollStatuscreateScrollStatus(Expressionsexpressions){","returnnewIndexScrollStatus(rootPage,expressions);","finalObjectfindRows(Expressionsexpressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;","intcount=expressions.size();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.FROM:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;","from(selCmd);","returnselCmd;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","isOuterValid=false;","isBeforeFirst=false;","right.nullRow();","returntrue;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","returnbuf.toString();","case9:","case109://monddyyyyhh:mi:ss:mmmAM(oderPM)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["thrownoCurrentRow();","byte[]getBytes(intoffset,intdataType)throwsException{","thrownoCurrentRow();","doublegetDouble(intoffset,intdataType)throwsException{","thrownoCurrentRow();","floatgetFloat(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["returnreadLong()/10000;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().longValue();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.database=database;","this.raFile=raFile;","this.firstPage=offset;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.SELECT);","if(store==null){","throwSmallSQLException.create(Language.TABLE_FILE_INVALID,getFile(database));"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.DIFFERENCE;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalintgetInt()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["case0:","case100://monddyyyyhh:miAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["displaySize=30;","previousToken();","}else{","token=nextToken(MISSING_EXPRESSION);","try{","displaySize=Integer.parseInt(token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(param1.getBoolean())","returnparam2.getInt();","returnparam3.getInt();","longgetLong()throwsException{","if(param1.getBoolean())","returnparam2.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["caseADD:returnleft.getInt()+right.getInt();","caseSUB:returnleft.getInt()-right.getInt();","caseMUL:returnleft.getInt()*right.getInt();","caseDIV:returnleft.getInt()/right.getInt();","caseNEGATIVE:return-left.getInt();","caseMOD:returnleft.getInt()%right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Stringname;","SSResultSetrs;","intupdateCount=-1;","Expressionsparams=newExpressions();","finalLoggerlog;","Command(Loggerlog){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","offset+=2;","break;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["tokenIdx=0;","returnexpression(null,0);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode){","Stringmessage=getErrorString(token,addMessageCode,null);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode,"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.CHAR:{","Stringstr=convertToString();","intlength=datatype.getDisplaySize();","if(length\>str.length()){","char[]buffer=newchar[length-str.length()];","Arrays.fill(buffer,\'\');"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["return0;","finallonggetLong(intoffset,intdataType)throwsException{","return0;","finallonggetMoney(intoffset,intdataType)throwsException{","return0;","finalMutableNumericgetNumeric(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["try{","TableViewtab=getTableView(con,tableName);","Columnscols=tab.columns;","for(intc=0;c\<cols.size();c++){","Columncol=cols.get(c);","Object[]row=newObject[18];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["staticintindexOf(intvalue,int[]list){","intoffset=0;","for(intend=list.length;offset\<end;offset++){","if((list[offset])==value)returnoffset;","return-1;","staticintindexOf(byte[]value,byte[]list,intoffset){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(rows==0)returnrowPos==1;","rowPos=Math.min(Math.max(rowPos+rows,-1),1);","returnrowPos==1;","finalintgetRow(){","returnrowPos==1?1:0;","finallonggetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["throwthis.createSyntaxError(token,MISSING_WHERE);","where(cmd);","returncmd;","privateCommandtruncate()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_TABLE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnoperation;","privateExpressionconvertExpressionIfNeeded(Expressionexpr,Expressionother){","if(expr==null||other==null){","returnexpr;","switch(expr.getDataType()){","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Expression[]updateValues=newExpression[count];","if(newRowSources!=null){","for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","ExpressionrsColumn=columnExpressions.get(i);//ColumnoftheResultSet"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intbyteLen=bytes.length;","intstart=Math.min(Math.max(0,param2.getInt()-1),byteLen);","intlength=param3.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER,params);","voidoptimize()throwsSQLException{","super.optimize();","Expression[]params=getParams();","if(params.length==1){","return;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnget(colIdx).getObject();","StringgetString(intcolIdx)throwsException{","returnget(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{","returnget(colIdx).getBytes();","intgetDataType(intcolIdx){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["voidsetParams(Expression[]params){","this.params=params;","voidsetParamAt(Expressionparam,intidx){","params[idx]=param;","finalExpression[]getParams(){returnparams;}","voidoptimize()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["LongTreeList(longvalue)throwsSQLException{","this();","add(value);","LongTreeList(StoreImplinput){","intreadSize=input.readInt();","data=input.readBytes(readSize);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{","if(isNull())returnnull;","returnUtils.getInteger(getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.TIMESTAMP:","offset+=8;","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicbooleansupportsOpenCursorsAcrossCommit(){","returntrue;","publicbooleansupportsOpenCursorsAcrossRollback(){","returntrue;","publicbooleansupportsOpenStatementsAcrossCommit(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintIDENTIFIER=4;","staticfinalintNUMBERVALUE=5;","static{","keywords.put(newInteger(VALUE),\"\<expression\>\");","keywords.put(newInteger(IDENTIFIER),\"\<identifier\>\");","keywords.put(newInteger(NUMBERVALUE),\"\<number\>\");"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicfloatfloatValue(){","if(value.length==0||signum==0){","return0;","}else{","if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleFloatFactor[scale]*signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnfalse;","finalbyte[]getBytes(intoffset,intdataType)throwsException{","returnnull;","finaldoublegetDouble(intoffset,intdataType)throwsException{","return0;","finalfloatgetFloat(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["raFile=null;","privatefinalvoidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_INDEX);","buffer.putInt(INDEX_VERSION);","buffer.position(0);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["FileChannelraFile=storePage.raFile;","synchronized(raFile){","if(filePos\>=raFile.size()-PAGE_CONTROL_SIZE){","returnnull;","raFile.position(filePos);","synchronized(page_control){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SQL_DECIMAL:dataType=SQLTokenizer.DECIMAL;break;","caseSQLTokenizer.SQL_DOUBLE:dataType=SQLTokenizer.DOUBLE;break;","caseSQLTokenizer.SQL_FLOAT:dataType=SQLTokenizer.FLOAT;break;","caseSQLTokenizer.SQL_INTEGER:dataType=SQLTokenizer.INT;break;","caseSQLTokenizer.SQL_LONGVARBINARY:dataType=SQLTokenizer.LONGVARBINARY;break;","caseSQLTokenizer.SQL_LONGVARCHAR:dataType=SQLTokenizer.LONGVARCHAR;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{PK_ONLYONE,\"UnatabellapuÃ²averesolounaprimarykey.\"},","{KEY_DUPLICATE,\"Chiaveduplicata.\"},","{MONTH_TOOLARGE,\"ValoredelmesetroppoaltodelinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"ValoredelgiornotroppoaltroinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"ValoredelleoretroppoaltoininTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"ValoredeiminutitroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["result|=ds.init(con);","intnextColCount=ds.getTableView().columns.size();","if(colCount==-1)","colCount=nextColCount;","else","if(colCount!=nextColCount)"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["synchronized(databases){","Databasedb=(Database)databases.get(dbKey);","if(db==null){","if(create&&!file.isDirectory()){","CommandCreateDatabasecommand=newCommandCreateDatabase(con.log,name);","command.execute(con,null);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Expressionparam3;","Expressionparam4;","ExpressionFunction(){","super(FUNCTION);","abstractintgetFunction();","byte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["longgetLong(intcolIdx)throwsException{","returnget(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{","returnget(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{","returnget(colIdx).getDouble();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["returnreadString().getBytes();","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnreadLongString().getBytes();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DAYOFWEEK:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfWeek();","break;","caseSQLTokenizer.DAYOFYEAR:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicstaticfinalStringUNION_DIFFERENT_COLS=\"SS-0433\";","publicstaticfinalStringINDEX_EXISTS=\"SS-0460\";","publicstaticfinalStringINDEX_MISSING=\"SS-0461\";","publicstaticfinalStringINDEX_FILE_INVALID=\"SS-0462\";","publicstaticfinalStringINDEX_CORRUPT=\"SS-0463\";","publicstaticfinalStringINDEX_TOOMANY_EQUALS=\"SS-0464\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blobobject\");","publicClobgetClob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicObjectgetObject(StringcolumnName,Mapmap)throwsSQLException{","returngetObject(columnName);","publicRefgetRef(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["this.dataType=SQLTokenizer.VARBINARY;","else","if(newValueinstanceofBoolean)","this.dataType=SQLTokenizer.BOOLEAN;","else","if(newValueinstanceofMoney)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateStorestore=Store.NOROW;","privatelongafterLastValidFilePos;","finalprivatebooleanmoveToRow()throwsException{","if(filePos\>=0x4000000000000000L){","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","}else{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["Stringname=getIdentifier(token);","ExpressionNameexpr=newExpressionName(name);","SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(float)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatefloatgetFloatImpl()throwsjava.lang.Exception{","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicvoidupdateTimestamp(StringcolumnName,Timestampx)throwsSQLException{","updateTimestamp(findColumn(columnName),x);","publicvoidupdateAsciiStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateAsciiStream(findColumn(columnName),x,length);","publicvoidupdateBinaryStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateBinaryStream(findColumn(columnName),x,length);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(name.startsWith(\"file:\"))","name=name.substring(5);","Filedir=newFile(name);","if(!dir.isDirectory()||","!newFile(dir,Utils.MASTER_FILENAME).exists())","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["caseSQLTokenizer.UPDATE:","caseSQLTokenizer.DELETE:","if(storePage.page==null){","FileChannelraFile=storePage.raFile;","synchronized(raFile){","if(filePos\>=raFile.size()-PAGE_CONTROL_SIZE){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{INDEX_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoperunindice.\"},","{INDEX_CORRUPT,\"Erroreduranteilcaricamentodell\'\'indice.Filedell\'\'indicecorrotto:\'\'{0}\'\'.\"},","{INDEX_TOOMANY_EQUALS,\"Troppevociugualinell\'\'indice.\"},","{FILE_TOONEW,\"Laversione({0})delfile\'\'{1}\'\'Ã¨tropporecenteperquestoruntime.\"},","{FILE_TOOOLD,\"Laversione({0})delfile\'\'{1}\'\'Ã¨troppovecchiaperquestoruntime.\"},","{FILE_CANT_DELETE,\"File\'\'(0)\'\'nonpossonoessereeliminati.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;","staticintbytes2int(byte[]bytes){","intresult=0;","intlength=Math.min(4,bytes.length);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["switch(dataType){","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","return4;","caseSQLTokenizer.TIMESTAMP:","return9;//nanoseconds"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["caseSQLTokenizer.BLOB:","returnUtils.bytes2double(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:","returnreadTime();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","Stringstr=param1.getString();","returnstr.length()*BYTES_PER_CHAR*8;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|"],
"["privatefinalTableViewMaptableViews=newTableViewMap();","privatefinalStringname;","privatefinalbooleanreadonly;","privatefinalFiledirectory;","privatefinalFileChannelmaster;","privatefinalWeakHashMapconnections=newWeakHashMap();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["complement[last]++;","byte[]toByteArray(){","if(signum==0)returnEMPTY_BYTES;","byte[]complement;","intoffset;","intv=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnreadInt();","caseSQLTokenizer.BIGINT:","returnreadLong();","caseSQLTokenizer.REAL:","returnreadFloat();","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returncomp==0;","caseGREATER:returncomp\>0;","caseGRE_EQU:returncomp\>=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getScale());","returnprecision;","finalprivateExpressiongetResult()throwsException{","for(inti=0;i\<cases.size();i++){","if(cases.get(i).getBoolean())returnresults.get(i);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["Stringstables=getTables(table);","Shorttype=Utils.getShort(DatabaseMetaData.tableIndexOther);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),false),isLastValues);","break;","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnexpr;","switch(expr.getDataType()){","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:","switch(other.getDataType()){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(size\<0){","returnnull;","char[]buffer=newchar[size];","for(inti=0;i\<size;i++){","buffer[i]=\'\';","returnnewString(buffer);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["ExpressionleftExpr;","switch(token.value){","caseSQLTokenizer.NOT:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NOT/10),ExpressionArithmetic.NOT);","break;","caseSQLTokenizer.MINUS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NUMERIC:{","if(operation==NEGATIVE)","returnleft.getNumeric().getSignum()!=0;","intcomp=left.getNumeric().compareTo(right.getNumeric());","switch(operation){","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["packagesmallsql.database;","abstractclassExpressionFunctionReturnP1NumberextendsExpressionFunctionReturnP1{","finalbooleangetBoolean()throwsException{","returngetDouble()!=0;","finalintgetInt()throwsException{","returnUtils.long2int(getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["page[offset++]=0;","byte[]readBinary(){","intlength=readShort()&0xFFFF;","returnreadBytes(length);","voidwriteLongBinary(byte[]daten)throwsException{","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,daten.length+4,SQLTokenizer.LONGVARBINARY);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.EXP:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionExp();","break;","caseSQLTokenizer.FLOOR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{COL_INVALID_SIZE,\"Lunghezzanonvalida({0})perlacolonna\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Ilprefissodicolonna\'\'{0}\'\'noncoincideconunaliasonomeditabellausatonellaquery.\"},","{COL_READONLY,\"Lacolonna\'\'{0}\'\'Ã¨disolalettura.\"},","{COL_INVALID_NAME,\"Nomedicolonnanonvalido\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Indicedicolonnafuoridall\'\'intervallovalido:{0}.\"},","{COL_AMBIGUOUS,\"Ilnomedicolonna\'\'{0}\'\'Ã¨ambiguo.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionDayOfWeekextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.DAYOFWEEK;","finalintgetInt()throwsException{","if(param1.isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfWeek.java|"],
"["rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;","longrowPosition=scrollStatus.getRowOffset(false);","if(rowPosition\>=0){","rowSource.setRowPosition(rowPosition);","returntrue;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["CommandTablecmd=newCommandTable(con.log,catalog,tableName,SQLTokenizer.INDEX);","Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();","expressionDefList(cmd,expressions,columns);","IndexDescriptionindexDesc=newIndexDescription(","indexName,"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["idx1=keyValue.indexOf(\'=\');","if(idx1\>0){","Stringkey=keyValue.substring(0,idx1).toLowerCase().trim();","Stringvalue=keyValue.substring(idx1+1).trim();","props.put(key,value);","}else{"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["returnString.valueOf(readBoolean());","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2hex(readBinary());","caseSQLTokenizer.TINYINT:","returnString.valueOf(readUnsignedByte());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rowSource.beforeFirst();","if(rowSource.next()){","row++;","lastRowOffset=rowSource.getRowPosition();","insertedRows.add(lastRowOffset);","returntrue;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["case0:","left=param;","break;","case1:","if(right!=null){","right=param;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.scale=scale;","MutableNumeric(doubleval){","this(newBigDecimal(String.valueOf(val)));","MutableNumeric(floatval){","this(newBigDecimal(String.valueOf(val)));","MutableNumeric(Stringval){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnparam3.getObject();","StringgetString()throwsException{","if(param1.getBoolean())","returnparam2.getString();","returnparam3.getString();","finalintgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["throwSmallSQLException.create(Language.JOIN_DELETE);","if(tables.size()==0)","throwSmallSQLException.create(Language.DELETE_WO_FROM);","TableViewResult.getTableViewResult(tables.get(0)).deleteRow();","}catch(Throwablee){","con.rollback(savepoint);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicbooleansupportsExpressionsInOrderBy(){","returntrue;","publicbooleansupportsOrderByUnrelated(){","returntrue;","publicbooleansupportsGroupBy(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnreadFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(float)readDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/(float)10000.0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnreadNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnnewMutableNumeric(readString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{FILE_TOONEW,\"01000\"},","{FILE_TOOOLD,\"01000\"},","{FILE_CANT_DELETE,\"01000\"},","{ROW_0_ABSOLUTE,\"01000\"},","{ROW_NOCURRENT,\"01000\"},","{ROWS_WRONG_MAX,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["getParam(idx).set(value,dataType);","if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType);","voidsetParamValue(intidx,Objectvalue,intdataType,intlength)throwsSQLException{","getParam(idx).set(value,dataType,length);","if(log.isLogging()){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue()!=0;","default:returnUtils.string2boolean(obj.toString());","intgetInt()throwsException{","returngetInt(getObject(),dataType);","staticintgetInt(Objectobj,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["expr=function(cmd,para,true);","break;","caseSQLTokenizer.CALL://callescapesequence","thrownewjava.lang.UnsupportedOperationException(\"callescapesequence\");","default:thrownewError();","token=nextToken(ESCAPE_MISSING_CLOSE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt()).toString();","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().toString();","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(dirs!=null)","if(tablePattern==null)tablePattern=\"%\";","tablePattern+=Utils.TABLE_VIEW_EXTENTION;","for(inti=0;i\<dirs.length;i++){","Stringname=dirs[i].getName();","if(Utils.like(name,tablePattern)){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteChars(char[]value){","verifyFreePufferSize(2*value.length);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["CommandSet(Loggerlog,inttype){","super(log);","this.type=type;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsjava.sql.SQLException{","switch(type){","caseSQLTokenizer.LEVEL:"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionSignextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.SIGN;","finalintgetInt()throwsException{","if(param1.isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["Stringkeyword=SQLTokenizer.getKeyWord(token);","if(keyword==null)keyword=\"\"+(char)token;","returnkeyword;","staticintgetOperationFromToken(intvalue){","switch(value){","caseSQLTokenizer.PLUS:returnADD;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","}else{","intidx=--status.idx;","if(idx==-1){","if(status.nodeValue!=null){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnreadBinary();","caseSQLTokenizer.TINYINT:","returnUtils.getInteger(readUnsignedByte());","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}elsequoteBuffer.append(c);","break;","case\'.\':","if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatelongfilePos;//Positioninthefile","privateintsizeUsed;","privateintsizePhysical;","privateintnextPageOffset;","privatelongfilePosUpdated;","privateinttype;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.firstPage=offset;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.SELECT);","if(store==null){","throwSmallSQLException.create(Language.TABLE_FILE_INVALID,getFile(database));","intcount=store.readInt();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}else{","value=newint[2];","if(complement\<0){","value[0]=(int)(~(complement\>\>32));","value[1]=(int)(-complement);","signum=-1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["TableViewgetTableView(SSConnectioncon,StringtableName)throwsSQLException{","synchronized(tableViews){","TableViewtableView=tableViews.get(tableName);","if(tableView==null){","tableView=TableView.load(con,this,tableName);","tableViews.put(tableName,tableView);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["packagesmallsql.database;","abstractclassExpressionFunctionReturnFloatextendsExpressionFunction{","booleanisNull()throwsException{","returnparam1.isNull();","finalbooleangetBoolean()throwsException{","returngetDouble()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["{INDEX_TOOMANY_EQUALS,\"Troppevociugualinell\'\'indice.\"},","{FILE_TOONEW,\"Laversione({0})delfile\'\'{1}\'\'Ã¨tropporecenteperquestoruntime.\"},","{FILE_TOOOLD,\"Laversione({0})delfile\'\'{1}\'\'Ã¨troppovecchiaperquestoruntime.\"},","{FILE_CANT_DELETE,\"File\'\'(0)\'\'nonpossonoessereeliminati.\"},","{ROW_0_ABSOLUTE,\"Ilnumerodiriga0nonÃ¨validoperilmetodo\'\'absolute()\'\'.\"},","{ROW_NOCURRENT,\"Nessunarigacorrente.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2float(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(parthesisCount--\>0){","nextToken(MISSING_PARENTHESIS_R);","returncmd;","caseSQLTokenizer.PARENTHESIS_L:","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","parthesisCount++;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.colIdx=colIdx;","this.column=column;","DataSourcegetDataSource(){","returnfromEntry;","StringgetTableAlias(){returntableAlias;}","finalTableViewgetTable(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["byte[]newPage=newbyte[newSize];","System.arraycopy(page,0,newPage,0,page.length);","page=newPage;","@Override","booleanisValidPage(){","returnstatus==NORMAL||(status==UPDATED_PAGE&&updatePointer!=null);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoidupdateRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidinsertRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","privateExpressionget(intcolIdx)throwsException{","if(currentRow==null)throwSmallSQLException.create(Language.ROW_NOCURRENT);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["row=0;","returnfalse;","@Override","finalvoidbeforeFirst(){","filePos=0;","store=Store.NOROW;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["setDouble(findParameter(parameterName),x);","publicvoidsetBigDecimal(StringparameterName,BigDecimalx)throwsSQLException{","setBigDecimal(findParameter(parameterName),x);","publicvoidsetString(StringparameterName,Stringx)throwsSQLException{","setString(findParameter(parameterName),x);","publicvoidsetBytes(StringparameterName,byte[]x)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["{RSET_FWDONLY,\"ResultSetisforwardonly.\"},","{RSET_CLOSED,\"ResultSetisclosed.\"},","{RSET_NOT_INSERT_ROW,\"Cursoriscurrentlynotontheinsertrow.\"},","{RSET_ON_INSERT_ROW,\"Cursoriscurrentlyontheinsertrow.\"},","{ROWSOURCE_READONLY,\"Rowsourceisreadonly.\"},","{STMT_IS_CLOSED,\"Statementisalreadyclosed.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["currentRaFile.close();","}catch(Throwableex){","con.rollbackFile(currentRaFile);","if(!file.delete()){","file.deleteOnExit();","throwSmallSQLException.create(Language.FILE_CANT_DELETE,file.getPath());"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["if(nodeDigit\<digit){","returnfindNodePos(digit,mid+1,end);","}else{","if(start==mid)return-1;","returnfindNodePos(digit,start,mid-1);","voidsave(StoreImploutput)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;","caseSQLTokenizer.YEAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionYear();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value));","writeShort(0);","size=offset;","return;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["st.con.log.println(\"updateRow()\");","testNotInsertRow();","finalCommandSelectcommand=getCmd();","command.updateRow(st.con,values);","command.relative(0);//refreshtherow","clearRowBuffer();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","if(defaultValue==-1)","return38;","returndefaultValue;","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["nextOffset1=offset;","nextEntry=getUnsignedShort();","if(listEnum.stack\<3)","offset+=pointerSize;","}while(nextEntry!=0);","offset=nextOffset2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["shift-=16;","octet=(int)(value\>\>shift)&0xFFFF;","firstNode=false;","if(shift!=0)offset+=pointerSize;","shift-=16;","finalvoidremove(longvalue)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnfalse;","booleanlast()throwsException{","afterLast();","returnprevious();","finalbooleanisLast()throwsException{","if(row==0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(fullReturnCounter\<0){","fullReturnCounter=0;","right.first();","left.nullRow();","while(isFullNotValid[fullReturnCounter++]){","if(fullReturnCounter\>=fullRowCount){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["if(n)returntrue;","while(dataSources.size()\>dataSourceIdx+1){","currentDS=dataSources.get(++dataSourceIdx);","currentDS.beforeFirst();","n=currentDS.next();","if(n)returntrue;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong();","returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["finalbyte[]getBytes(intcolIdx)throwsException{","returncurrentDS.getBytes(colIdx);","finalintgetDataType(intcolIdx){","returncurrentDS.getDataType(colIdx);","TableViewgetTableView(){","returncurrentDS.getTableView();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["rowIdx=rowList.size();","currentRow=null;","finalbooleanabsolute(introw)throwsSQLException{","if(row==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","rowIdx=(row\>0)?","Math.min(row-1,rowList.size()):"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["token=nextToken(MISSING_WHEN_ELSE_END);","privateExpressionfunction(Commandcmd,SQLTokentoken,booleanisEscape)throwsSQLException{","Expressionexpr;","switch(token.value){","caseSQLTokenizer.CONVERT:{","Columncol;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicvoidupdateAsciiStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateAsciiStream(findColumn(columnName),x,length);","publicvoidupdateBinaryStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateBinaryStream(findColumn(columnName),x,length);","publicvoidupdateCharacterStream(StringcolumnName,Readerx,intlength)throwsSQLException{","updateCharacterStream(findColumn(columnName),x,length);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();","switch(type){","store.setCurrentOffsetInPage(offsetInPage+size);","raFile.close();","commandSelect=(CommandSelect)newSQLParser().parse(con,sql);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intautoGeneratedKeys)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["if(page.raFile==raFile){","page.rollback();","page.freeLock();","voidrollback(intsavepoint)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returngetString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["second=0;","millis=0;","if(idx1==0&&length\>0){","throwSmallSQLException.create(Language.DATETIME_INVALID);","if(month\>=12){","throwSmallSQLException.create(Language.MONTH_TOOLARGE,datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["cmd.setMaxRows(maxRows);","cmd.execute(con,this);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","needGeneratedKeys=false;","generatedKeyIndexes=null;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["super(root);","this.raFile=raFile;","staticFileIndexload(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);","raFile.read(buffer);","buffer.position(0);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["newData.status=UPDATED_PAGE;","if(updatePointer==null){","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","filePosUpdated=newData.writeFinsh(null);","status=UPDATE_POINTER;","}else{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"LONGVARBINARY\",LONGVARBINARY);","addKeyWord(\"BLOB\",BLOB);","addKeyWord(\"BYTE\",TINYINT);","addKeyWord(\"TINYINT\",TINYINT);","addKeyWord(\"SMALLINT\",SMALLINT);","addKeyWord(\"INTEGER\",INT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StringtoString(intstyle){","if(style\<0)","returntoString();","Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();","switch(style){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["voidfloor(){","intoldScale=scale;","setScale(0);","setScale(oldScale);","privatevoidnegate(byte[]complement){","intlast=complement.length-1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["comment=NOT_COMMENT;","wasWhiteSpace=true;","tokenStart=i+1;","break;","case\'/\':","if((i+1\<sql.length)&&(sql[i+1]==\'*\')){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?newMutableNumeric(1):newMutableNumeric(0);","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(newValueinstanceofLong||newValueinstanceofIdentity)","this.dataType=SQLTokenizer.BIGINT;","else","if(newValueinstanceofFloat)","this.dataType=SQLTokenizer.REAL;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["switch(dataType){","caseSQLTokenizer.LONGVARCHAR:","returnconvertToString();","caseSQLTokenizer.VARCHAR:{","Stringstr=convertToString();","intlength=datatype.getDisplaySize();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["saveRemainderValue(remainderValue,offset);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalIndexNodeaddRoot(chardigit)throwsSQLException{","IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();","returnnode.addRoot();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);","intvalue;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return17;","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["switch(token.value){","caseSQLTokenizer.DESC:","expr.setAlias(SQLTokenizer.DESC_STR);","caseSQLTokenizer.ASC:","token=nextToken();","if(token==null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["list.remove(rowOffset);","if(list.getSize()\>0)return;","IndexNodenode=(IndexNode)nodeList.get(nodeList.size()-1);","node.clearValue();","for(inti=nodeList.size()-2;i\>=0;i--){","if(!node.isEmpty())"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["this.indexes=existIndexes;","existIndexes.add(newIndexes);","write(con);","for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);","TablepkTable=(Table)database.getTableView(con,foreignKey.pkTable);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnMoney.parseMoney(getString().trim());","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getString().trim());","finalObjectgetObject()throwsException{","returngetString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|"],
"["{ROW_0_ABSOLUTE,\"01000\"},","{ROW_NOCURRENT,\"01000\"},","{ROWS_WRONG_MAX,\"01000\"},","{ROW_LOCKED,\"01000\"},","{ROW_DELETED,\"01000\"},","{SAVEPT_INVALID_TRANS,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalprivateintaddInternalExpressionFromGroupBy(Expressionexpr)throwsSQLException{","inttype=expr.getType();","if(type\>=Expression.GROUP_BEGIN){","throwSmallSQLException.create(Language.GROUP_AGGR_INVALID,expr);","}else{","intidx=internalExpressions.indexOf(expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returngetIntImpl();","caseSQLTokenizer.BIGINT:","returngetLongImpl();","caseSQLTokenizer.REAL:","returngetFloatImpl();","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Stringsql;","CommandCreateView(Loggerlog,Stringname){","super(log);","this.type=SQLTokenizer.VIEW;","this.name=name;","voidaddColumn(Columncolumn){"]": ["|project://smallsql/src/smallsql/database/CommandCreateView.java|"],
"["packagesmallsql.database;","finalclassExpressions{","privateintsize;","privateExpression[]data;","Expressions(){","data=newExpression[16];"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["switch(token.value){","caseSQLTokenizer.COMMA:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;","break;","caseSQLTokenizer.FROM:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalintgetPrecision(){","switch(dataType){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","return((String)value).length();","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["for(;k\<i;k++){","charcc=sql[k];","if((cc!=\'-\'&&cc!=\'$\'&&cc\<\'0\')||cc\>\'9\')break;//isidentifier--\>break","if(k\>=i)break;//precedingtokensareonlydigitsthatitisnotanidentifierelseafloatingnumber","case\'-\':","if(comment!=NOT_COMMENT){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,tableName,columns,oldIndexes,newIndexes,foreignKeys);","synchronized(tableViews){","tableViews.put(tableName,table);","returntable;","voidcreateView(SSConnectioncon,StringviewName,Stringsql)throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(lObjinstanceofNumber&&rObjinstanceofNumber)","returnnewDouble(getDoubleImpl(((Number)lObj).doubleValue(),((Number)rObj).doubleValue()));","else","returngetString(lObj.toString(),rObj.toString());","caseSQLTokenizer.LONGVARBINARY:","returngetBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intnewSize=puffer.length\<\<1;","if(newSize\<minSize)newSize=minSize;","byte[]temp=newbyte[newSize];","System.arraycopy(puffer,0,temp,0,offset);","puffer=temp;","voidskip(intcount){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["staticfinalintCHAR=350;","staticfinalintNCHAR=352;","staticfinalintVARCHAR=353;","staticfinalintNVARCHAR=355;","staticfinalintSYSNAME=357;","staticfinalintLONGVARCHAR=359;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["booleanwasNextEntry=true;","for(inti=0;i\<letters.length;i++){","charc=(char)(letters[i]|0x20);","while(node!=null&&node.letter!=c){","prev=node;","node=node.nextEntry;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnnum;","}else","if(getDataType(left.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=right.getNumeric();","num.mul(left.getInt());","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else{","if(scale!=0){","MutableNumericnumeric=newMutableNumeric(this);","numeric.setScale(0);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["classIndexDescriptions{","privateintsize;","privateIndexDescription[]data;","voidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","for(inti=0;i\<size;i++){","data[i].create(con,database,tableView);"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["value[i]=(int)(v/quotient);","carryover=((v%quotient)\<\<32);","carryover/=quotient;","if(carryover\>2147483648L||//2147483648L==Integer.MAX_VALUE+1","(carryover==2147483648L&&(value[valueLength-1]%2==1))){","inti=valueLength-1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","returntrue;","if(columns.size()==1){","returnfalse;","Expressionssingle=newExpressions();","for(inti=0;i\<columns.size();i++){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["while(true){","intoffset=token.offset+token.length;","token=nextToken();","if(token!=null)offset=token.offset;","previousToken();","expressions.add(expression(cmd,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["cmd.setGroup(expressionTokenList(cmd,SQLTokenizer.GROUP));","privatevoidwhere(CommandSelectcmd)throwsSQLException{","cmd.setWhere(expression(cmd,0));","privatevoidhaving(CommandSelectcmd)throwsSQLException{","cmd.setHaving(expression(cmd,0));","privatestaticfinalint[]COMMANDS={SQLTokenizer.SELECT,SQLTokenizer.DELETE,SQLTokenizer.INSERT,SQLTokenizer.UPDATE,SQLTokenizer.CREATE,SQLTokenizer.DROP,SQLTokenizer.ALTER,SQLTokenizer.SET,SQLTokenizer.USE,SQLTokenizer.EXECUTE,SQLTokenizer.TRUNCATE};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","isOuterValid=false;","right.nullRow();","returntrue;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["this(16);","LongLongList(intinitialSize){","data=newlong[initialSize*2];","finalintsize(){","returnsize;","finallongget1(intidx){"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["if(cal==null){","returngetDate(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewDate(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["cmd.noColumns=true;","}else{","previousToken();","Expressionslist=expressionParenthesisList(cmd);","for(inti=0;i\<list.size();i++){","cmd.addColumnExpression(list.get(i));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ExpressionsleftEx;","ExpressionsrightEx;","privateIndexindex;","privateLongTreeListrowList;","privatefinalLongTreeListEnumlongListEnum=newLongTreeListEnum();","JoinScrollIndex(intjoinType,RowSourceleft,RowSourceright,ExpressionsleftEx,ExpressionsrightEx,intcompare)"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intautoGeneratedKeys)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(autoGeneratedKeys);","returnpr;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["importsmallsql.database.language.Language;","finalclassUnionAllextendsDataSource{","privatefinalDataSourcesdataSources=newDataSources();","privateintdataSourceIdx;","privateDataSourcecurrentDS;","privateintrow;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnSQLTokenizer.SQL_TSI_SECOND;","caseSQLTokenizer.MINUTE:","returnSQLTokenizer.SQL_TSI_MINUTE;","caseSQLTokenizer.HOUR:","returnSQLTokenizer.SQL_TSI_HOUR;","caseSQLTokenizer.D:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionSubstring();","break;","caseSQLTokenizer.UCASE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionUCase();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{MINUTES_TOOLARGE,\"MinutesaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"SecondsaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"MillisecondsaretoolargeinTIMESTAMPvalue\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isaninvalidDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Unsupportedconversiontodatatype\'\'{0}\'\'fromdatatype\'\'{1}\'\'foroperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Unsupporteddatatype\'\'{0}\'\'foroperation\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["value=EMPTY_INTS;","}else{","value=newint[1];","if(complement\<0){","value[0]=-complement;","signum=-1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["privateSQLTokennextToken(int[]validValues)throwsSQLException{","SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,validValues);","if(validValues==MISSING_EXPRESSION){","returntoken;//anexpressioncanbecontainedineverytoken.","if(validValues==MISSING_IDENTIFIER){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicBigDecimalgetBigDecimal(inti)throwsSQLException{","try{","MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["case\'\\\"\':","case\'\\\'\':","if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){","quote=c;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)rsColumn;","if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;","continue;","updateValues[i]=null;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","throwSmallSQLException.create(Language.GROUP_AGGR_NOTPART,expr);","}else","if(type\>=Expression.GROUP_BEGIN){","intidx=internalExpressions.indexOf(expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["page=newData.page;//newDataisonlyatempStoreImpl","offset=newData.offset;","if(sizePhysical\<offset)sizePhysical=offset;//occuronlyonupdatesofnotcommittedinserts(filePos==-1","writeFinsh(con);","}else{","newData.status=UPDATED_PAGE;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnreadTime()!=0;","caseSQLTokenizer.DATE:","returnreadDate()!=0;","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime()!=0;","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{","returngetInt()!=0;","intgetInt()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["SQLTokenizer.LONGVARBINARY,","SQLTokenizer.BLOB,","SQLTokenizer.NULL};","privatestaticintNVARCHAR_IDX=Utils.indexOf(SQLTokenizer.NVARCHAR,DatatypeRange);","privatestaticintINT_IDX=Utils.indexOf(SQLTokenizer.INT,DatatypeRange);","privatestaticintBIGINT_IDX=Utils.indexOf(SQLTokenizer.BIGINT,DatatypeRange);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["String[]dataNew=newString[newSize];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;","publicString[]toArray(){","String[]array=newString[size];","System.arraycopy(data,0,array,0,size);"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["finalvoiddeleteRow()throwsSQLException{","store.deleteRow(con);","store=newStoreNull(store.getNextPagePos());","@Override","finalvoidupdateRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{","if(isNull())returnnull;","returnUtils.getInteger(getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["{UNSUPPORTED_DATATYPE_FUNC,\"01000\"},","{UNSUPPORTED_CONVERSION_FUNC,\"01000\"},","{UNSUPPORTED_TYPE_CONV,\"01000\"},","{UNSUPPORTED_TYPE_SUM,\"01000\"},","{UNSUPPORTED_TYPE_MAX,\"01000\"},","{UNSUPPORTED_CONVERSION,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["super(VALUE);","clear();","ExpressionValue(inttype){","super(type);","switch(type){","caseGROUP_BY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicStringgetDatabaseProductVersion(){","returngetDriverVersion();","publicStringgetDriverName(){","return\"SmallSQLDriver\";","publicStringgetDriverVersion(){","returngetDriverMajorVersion()+\".\"+SSDriver.drv.getMinorVersion();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}else{","copyValueInto(i,newStore);","((StoreImpl)this.store).updateFinsh(con,newStore);","@Override","finalvoidinsertRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["finalintgetFunction(){returnSQLTokenizer.MOD;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","returnparam1.getInt()%param2.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionMod.java|"],
"["caseSQLTokenizer.FLOOR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionFloor();","break;","caseSQLTokenizer.LOG:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticfinalint[]MISSING_NOT_NULL={SQLTokenizer.NOT,SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_NULL={SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_COMMA={SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_COMMA_PARENTHESIS={SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_PARENTHESIS_VALUES_SELECT={SQLTokenizer.PARENTHESIS_L,SQLTokenizer.VALUES,SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_TOKEN_LIST={SQLTokenizer.COMMA,SQLTokenizer.FROM,SQLTokenizer.GROUP,SQLTokenizer.HAVING,SQLTokenizer.ORDER};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","((DateTime)value).time=Math.max(((DateTime)value).time,expr.getLong());","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnexpr.isAutoIncrement();","booleanisCaseSensitive(){","returnexpr.isCaseSensitive();","booleanisNullable(){","returnexpr.isNullable();","intgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["longgetTimestamp(){","returntimestamp;","finalintfindColumnIdx(StringcolumnName){","for(inti=0;i\<columns.size();i++){","if(columns.get(i).getName().equalsIgnoreCase(columnName))returni;","return-1;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseSQLTokenizer.MIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MIN);","break;","caseSQLTokenizer.FIRST:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.DriverManager;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","finalclassIndexDescription{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returnbuf.toString();","publicintcompareTo(MutableNumericnumeric){","returntoBigDecimal().compareTo(numeric.toBigDecimal());","publicbooleanequals(Objectobj){","if(!(objinstanceofMutableNumeric))returnfalse;","returncompareTo((MutableNumeric)obj)==0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["importsmallsql.database.language.Language;","classScrollableextendsRowSource{","privateintrowIdx;","Scrollable(RowSourcerowSource){","this.rowSource=rowSource;","finalbooleanisScrollable(){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnDouble.parseDouble(readString());","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["writeLong(ts);","longreadTimestamp(){","returnreadLong();","voidwriteTime(longtime){","writeInt((int)((time/1000)%86400));","longreadTime(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfalse;","publicbooleansupportsSchemasInTableDefinitions(){","returnfalse;","publicbooleansupportsSchemasInIndexDefinitions(){","returnfalse;","publicbooleansupportsSchemasInPrivilegeDefinitions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{SAVEPT_INVALID_DRIVER,\"Savepointisnotvalidforthisdriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnotsupportedforthistypeofrowsource.\"},","{ISOLATION_UNKNOWN,\"UnknownTransactionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"InvalidflagvalueinmethodgetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"InvalidargumentinmethodsetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnotrequested.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(dataType\<0){","dataType=elseResult.getDataType();","for(inti=0;i\<results.size();i++){","dataType=ExpressionArithmetic.getDataType(dataType,results.get(i).getDataType());","returndataType;","finalintgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["break;","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/Index.java|","|project://smallsql/src/smallsql/database/Index.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importjava.util.ArrayList;","importjava.util.List;","importsmallsql.database.language.Language;","classMemoryResultextendsDataSource{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["{MONTH_TOOLARGE,\"01000\"},","{DAYS_TOOLARGE,\"01000\"},","{HOURS_TOOLARGE,\"01000\"},","{MINUTES_TOOLARGE,\"01000\"},","{SECS_TOOLARGE,\"01000\"},","{MILLIS_TOOLARGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl();","caseSQLTokenizer.BIGINT:","returngetLongImpl();","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["longvalue;","privateMoney(){/*shouldbeempty*/}","publicMoney(doublevalue){","this.value=(long)(value*10000);","publicMoney(floatvalue){","this.value=(long)(value*10000);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["returnbytes;","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.BIT:","returnparam1.getBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.TINYINT:","returnUtils.getInteger(param1.getInt()&0xFF);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case7://Mondd,yy","buf.append(SHORT_MONTHS[details.month]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(tableTimestamp!=tableView.getTimestamp()){","this.con=con;","tableTimestamp=tableView.getTimestamp();","returntrue;","returnfalse;","abstractvoiddeleteRow()throwsSQLException;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["returnTypes.DECIMAL;","caseSQLTokenizer.NUMERIC:","returnTypes.NUMERIC;","caseSQLTokenizer.REAL:","returnTypes.REAL;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["synchronized(page_control){","pageControlBuffer.position(0);","raFile.read(pageControlBuffer);","store.page=page_control;","store.readPageHeader();","store.page=newbyte[store.sizeUsed];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["generatedKeyNames=null;","finalpublicvoidclose(){","con.log.println(\"Statement.close\");","isClosed=true;","cmd=null;","finalpublicintgetMaxFieldSize(){"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["noRow();","returnfalse;","finalprivatebooleanmoveToValidRow()throwsException{","while(filePos\>=0){","if(moveToRow())","returntrue;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["publicBigDecimalgetBigDecimal(inti,intscale)throwsSQLException{","try{","MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal(scale);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["finallonggetNext(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64)return-1;//apreviouscallhasreturn-1","offset=listEnum.offsetStack[listEnum.stack];","longresult=listEnum.resultStack[listEnum.stack];","booleanfirstNode=(offset==0);//trueifitthefirstentryinalevel"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returncmd;","finalprivateCommandparse(char[]sql)throwsSQLException{","this.sql=sql;","this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;","SQLTokentoken=nextToken(COMMANDS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.createFromException(e);","publicvoiddeleteRow()throwsSQLException{","st.con.log.println(\"deleteRow()\");","testNotInsertRow();","getCmd().deleteRow(st.con);","clearRowBuffer();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["isMinus=!isMinus;","token=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","}while(token.value==SQLTokenizer.MINUS||token.value==SQLTokenizer.PLUS);","default:","SQLTokentoken2=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnreadInt()*60000L;","voidwriteString(StringstrDaten)throwsSQLException{","writeString(strDaten,Short.MAX_VALUE,true);","voidwriteString(StringstrDaten,intlengthColumn,booleanvarchar)throwsSQLException{","char[]daten=strDaten.toCharArray();","intlength=daten.length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfalse;","if(type!=INNER_JOIN){","returnfalse;","if(conditioninstanceofExpressionArithmetic){","ExpressionArithmeticcond=(ExpressionArithmetic)condition;","ExpressionsleftEx=newExpressions();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["staticfinalintEQUALS_NULL=52;//likeEqualsbut(null=null)--\>true","staticfinalintGREATER=53;//\>","staticfinalintGRE_EQU=54;//\>=","staticfinalintLESSER=55;//\<","staticfinalintLES_EQU=56;//\<=","staticfinalintUNEQUALS=57;//\<\>"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatefinalString[][]SQL_STATES={","{CUSTOM_MESSAGE,\"01000\"},","{UNSUPPORTED_OPERATION,\"01000\"},","{CANT_LOCK_FILE,\"01000\"},","{DB_EXISTENT,\"01000\"},","{DB_NONEXISTENT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["createWriteLock();","writeFinsh(con);","StorePageLinkgetLink(){","return((TableStorePageInsert)storePage).getLink();","booleanisRollback(){","returnstorePage.raFile==null;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.util.Locale;","finalclassTableViewMap{","privatefinalHashMapmap=newHashMap();","privateObjectgetUniqueKey(Stringname){","returnname.toUpperCase(Locale.US);//usethesamelocaleforall","TableViewget(Stringname){"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["store.setCurrentOffsetInPage(offsetStart+4);//placeholderforlength","indexDesc.save(store);","intoffsetEnd=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart);","store.writeInt(offsetEnd-offsetStart);","store.setCurrentOffsetInPage(offsetEnd);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["LongList(intinitialSize){","data=newlong[initialSize];","finalintsize(){","returnsize;","finallongget(intidx){","if(idx\>=size)"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["publicbooleansupportsSchemasInIndexDefinitions(){","returnfalse;","publicbooleansupportsSchemasInPrivilegeDefinitions(){","returnfalse;","publicbooleansupportsCatalogsInDataManipulation(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["continuenextColumn;","returnInteger.MAX_VALUE;//NoStrinfoundforcolName","returnstrings.size()-columns.size();","finalvoidinit(Databasedatabase,TableViewtableView)/*throwsException*/{","intsize=tableView.columns.size();","matrix=newint[size];"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["Stringcatalog;","Stringname;","SSResultSetrs;","intupdateCount=-1;","Expressionsparams=newExpressions();","finalLoggerlog;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["{ROWS_WRONG_MAX,\"Numeromassimodirighenonvalido({0}).\"},","{ROW_LOCKED,\"LarigaÃ¨bloccatadaun\'\'altraconnessione.\"},","{ROW_DELETED,\"RigagiÃ\u00a0cancellata.\"},","{SAVEPT_INVALID_TRANS,\"SAVEPOINTnonvalidoperquestatransazione.\"},","{SAVEPT_INVALID_DRIVER,\"SAVEPOINTnonvalidoperquestodriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnonsupportatoperquestotipodisorgenterighe.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["this.expressions=expressions;","this.columns=columns;","this.name=createName(name,tableName);","privatestaticStringcreateName(StringdefaultName,StringtableName){","if(defaultName==null){","defaultName=tableName+\"_\"+Long.toHexString(System.currentTimeMillis())+Integer.toHexString(newObject().hashCode());"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["output.writeLong(fileOffset);","@Override","IndexNodeloadRef(longoffset)throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","MemoryStreaminput=newMemoryStream();"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["returncmd.getQueryResult();","finalpublicintexecuteUpdate(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getUpdateCount();","finalpublicbooleanexecute(Stringsql)throwsSQLException{","executeImpl(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["throwSmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED,name);","con.rollbackFile(raFile);","close();","if(lobs!=null)","lobs.drop(con);","if(indexes!=null)"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["voidafterLast()throwsException{","useSetRowPosition=false;","if(sortedRowCount\>0){","scrollStatus.afterLast();","scrollStatus.getRowOffset(false);//previousposition","}else{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["Expressionsparams=newExpressions();","finalLoggerlog;","Command(Loggerlog){","this.log=log;","this.columnExpressions=newExpressions();","Command(Loggerlog,ExpressionscolumnExpressions){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["publicStringgetExtraNameCharacters(){","return\"#$Ã€Ã\ufffdÃ‚ÃƒÃ„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹ÃŒÃ\ufffdÃŽÃ\ufffdÃ\ufffdÃ‘Ã’Ã“Ã”Ã•Ã–Ã˜Ã™ÃšÃ›ÃœÃ\ufffdÃžÃŸÃ\u00a0Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿\";","publicbooleansupportsAlterTableWithAddColumn(){","thrownewjava.lang.UnsupportedOperationException(\"MethodsupportsAlterTableWithDropColumn()notyetimplemented.\");","publicbooleansupportsColumnAliasing(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["e=e.next;","finalbooleancontainsKey(longkey){","return(get(key)!=null);","finalTableStorePageadd(longkey,TableStorePagevalue){","inti=(int)(key%table.length);","table[i]=newEntry(key,value,table[i]);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["{PARAM_CLASS_UNKNOWN,\"Classesconosciuta(\'\'{0}\'\')perilparametro.\"},","{PARAM_EMPTY,\"Ilparametro{0}Ã¨vuoto.\"},","{PARAM_IDX_OUT_RANGE,\"L\'\'indice{0}perilparametroÃ¨fuoridall\'\'intervalloconsentito(1\<=n\<={1}).\"},","{COL_DUPLICATE,\"Nomedicolonnaduplicato:\'\'{0}\'\'.\"},","{COL_MISSING,\"Colonna\'\'{0}\'\'nontrovata.\"},","{COL_VAL_UNMATCH,\"IlconteggiodicolonneevalorinonÃ¨identico.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(remainderKey!=null)moveRemainderValue();","intpos=findNodePos(digit);","if(pos==-1){","IndexNodenode=createIndexNode(unique,digit);","saveNode(node);","returnnode;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["switch(type){","caseINDEX:","indexes.add(IndexDescription.load(database,this,store));","break;","store.setCurrentOffsetInPage(offsetInPage+size);","firstPage=store.getNextPagePos();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","writeSmallDateTime(expr.getLong());","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(expr.getDataType()){","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["case9:","case109://monddyyyyhh:mi:ss:mmmAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["isClosed=true;","cmd=null;","finalpublicintgetMaxFieldSize(){","returnmaxFieldSize;","finalpublicvoidsetMaxFieldSize(intmax){","maxFieldSize=max;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["{SEQUENCE_HEX_INVALID_STR,\"Invalidhexsequenceatposition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Syntaxerroratoffset{0}on\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Syntaxerror,unexpectedendofSQLstring.\"},","{STXADD_ADDITIONAL_TOK,\"AdditionaltokenafterendofSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Identifierexpected.\"},","{STXADD_IDENT_EMPTY,\"EmptyIdentifier.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/Index.java|","|project://smallsql/src/smallsql/database/Index.java|"],
"["inttype=expr.getType();","if(type\<Expression.GROUP_BEGIN)type=Expression.GROUP_BY;","newRow[i]=newExpressionValue(type);","addRow(newRow);","finalprivatevoidaccumulateRow()throwsException{","for(inti=0;i\<currentRow.length;i++){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["{STMT_IS_CLOSED,\"DasStatementistbereitsgeschlossen.\"},","{SUBQUERY_COL_COUNT,\"DieAnzahlderSpalteninderSubquerymuss1seinundnicht{0}.\"},","{JOIN_DELETE,\"DieMethodedeleteRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{JOIN_INSERT,\"DieMethodeinsertRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{DELETE_WO_FROM,\"DieMethodedeleteRowbenÃ¶tigteinenFROMAusdruck.\"},","{INSERT_WO_FROM,\"DieMethodeinsertRowbenÃ¶tigteinenFROMAusdruck.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnisCurrentRow;","finalbooleanlast()throwsException{","while(next()){/*scrollaftertheend*/}","returnprevious();","finalvoidafterLast()throwsException{","while(next()){/*scrollaftertheend*/}"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["publicTimestampgetTimestamp(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){","returngetTimestamp(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnTypes.BOOLEAN;","caseSQLTokenizer.BINARY:","returnTypes.BINARY;","caseSQLTokenizer.VARBINARY:","returnTypes.VARBINARY;","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["select();//Parsetocheckforvalid","returncmd;","privateCommandTablecreateIndex(booleanunique)throwsSQLException{","StringindexName=nextIdentifier();","nextToken(MISSING_ON);","Stringcatalog;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{RSET_READONLY,\"ResultSetisreadonly.\"},","{RSET_FWDONLY,\"ResultSetisforwardonly.\"},","{RSET_CLOSED,\"ResultSetisclosed.\"},","{RSET_NOT_INSERT_ROW,\"Cursoriscurrentlynotontheinsertrow.\"},","{RSET_ON_INSERT_ROW,\"Cursoriscurrentlyontheinsertrow.\"},","{ROWSOURCE_READONLY,\"Rowsourceisreadonly.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["TableViewtable=result.getTableView();","ColumnstableColumns=table.columns;","intcount=tableColumns.size();","Expression[]updateValues=newExpression[count];","booleanisUpdateNeeded=false;","for(inti=0;i\<columnExpressions.size();i++){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalvoidremove(intidx){","System.arraycopy(data,idx+1,data,idx,(--size)-idx);","finalvoidset(intidx,Expressionexpr){","data[idx]=expr;","finalintindexOf(Expressionexpr){","if(expr==null){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["output[idx++]=c;","last=c;","for(;idx\<4;){","output[idx++]=\'0\';","returnnewString(output);","intgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["dataSourceIdx=dataSources.size()-1;","currentDS=dataSources.get(dataSourceIdx);","currentDS.afterLast();","row=0;","finalintgetRow()throwsException{","returnrow;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.year,4,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getInt(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary());","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringRSET_CLOSED=\"SS-0133\";","publicstaticfinalStringRSET_NOT_INSERT_ROW=\"SS-0134\";","publicstaticfinalStringRSET_ON_INSERT_ROW=\"SS-0135\";","publicstaticfinalStringROWSOURCE_READONLY=\"SS-0136\";","publicstaticfinalStringSTMT_IS_CLOSED=\"SS-0140\";","publicstaticfinalStringSUBQUERY_COL_COUNT=\"SS-0160\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.CHARACTLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCharLen();","break;","caseSQLTokenizer.CHAR:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSUB:","MutableNumericnum=left.getNumeric();","num.sub(right.getNumeric());","returnnum;","caseMUL:","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{TABLE_MODIFIED,\"Table\'\'{0}\'\'wasmodified.\"},","{TABLE_DEADLOCK,\"Deadlock,cannotcreatealockontable\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TableorView\'\'{0}\'\'doesnotexist.\"},","{TABLE_FILE_INVALID,\"File\'\'{0}\'\'doesnotincludeavalidSmallSQLTable.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidTableorViewstore.\"},","{TABLE_EXISTENT,\"TableorView\'\'{0}\'\'alreadyexists.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["break;","caseSQLTokenizer.MONEY:","((Money)value).value=Math.max(((Money)value).value,expr.getMoney());","break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(!file.delete()){","file.deleteOnExit();","throwSmallSQLException.create(Language.FILE_CANT_DELETE,file.getPath());","Stringname=file.getName();","name=name.substring(0,name.lastIndexOf(\'.\'));","database.removeTableView(name);"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleansupportsResultSetType(inttype){","switch(type){","caseResultSet.TYPE_FORWARD_ONLY:","caseResultSet.TYPE_SCROLL_INSENSITIVE:"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType+\";length=\"+length);","finalprivateCommandSelectgetCmd()throwsSQLException{","if(cmd==null){","throwSmallSQLException.create(Language.RSET_CLOSED);","st.con.testClosedConnection();","returncmd;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["}else","if(equals(node.getRemainderValue(),key,i)){","if(isLastValue){","node.saveValue(rowOffset);","returnnull;","returnnode.addRoot();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["expr=expression(cmd,0);","nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampAdd(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);","returnexpr;","ExpressionsparamList=expressionParenthesisList(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(noColumns){","columnExpressions.clear();","for(inti=0;i\<count;i++){","matrix[i]=i;","if(count!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseSQLTokenizer.CAST:","expr=expression(cmd,0);","nextToken(MISSING_AS);","Columncol=datatype(false);","nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,null);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(singleJoin.condition!=null)compileLinkExpressionParams(singleJoin.condition);","if(singleJoin.leftinstanceofJoin){","compileJoin((Join)singleJoin.left);","if(singleJoin.rightinstanceofJoin){","compileJoin((Join)singleJoin.right);","privatevoidcompileLinkExpression(Expressionexpr)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["table=newEntry[17];","finalintsize(){","returnsize;","finalbooleanisEmpty(){","returnsize==0;","finalTableStorePageget(longkey){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["scrollStatus.afterLast();","row--;","if(currentInsertedRow()\>=0){","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;","longrowPosition=scrollStatus.getRowOffset(false);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["ForeignKeysreferences=((Table)tab).references;","for(inti=0;i\<references.size();i++){","ForeignKeyforeignKey=references.get(i);","IndexDescriptionpk=foreignKey.pk;","IndexDescriptionfk=foreignKey.fk;","if((pkTable==null||pkTable.equals(foreignKey.pkTable))&&"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["booleanisAfterLast()throwsException{","returnfrom.isAfterLast();","finalbooleanabsolute(introw)throwsException{","returnfrom.absolute(row);","finalbooleanrelative(introws)throwsException{","returnfrom.relative(rows);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["Objectobj=getObject();","if(objinstanceofMutable){","return((Mutable)obj).getImmutableObject();","returnobj;","abstractStringgetString()throwsException;","abstractbyte[]getBytes()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionYearextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.YEAR;","finalintgetInt()throwsException{","if(param1.isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionYear.java|"],
"["store.sharedPageData=true;","store.readPageHeader();","store=store.loadUpdatedStore();","break;","default:thrownewError();","store.offset=PAGE_CONTROL_SIZE;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)-(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>=32);","value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]-1)==-1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["carryover=v\>\>32;","if(carryover\>0){","resizeValue((int)carryover);","voiddiv(MutableNumericnum){","intnewScale=Math.max(scale+5,num.scale+4);","BigDecimalbig=toBigDecimal().divide(num.toBigDecimal(),newScale,BigDecimal.ROUND_HALF_EVEN);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnfalse;","finalbooleanrowDeleted(){","returnfalse;","finalvoidnullRow(){","thrownewError();","finalvoidnoRow(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["while(node!=null&&node.letter!=c){","prev=node;","node=node.nextEntry;","wasNextEntry=true;","if(node==null){","node=newSearchNode();"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicstaticfinalStringSTXADD_KEYS_REQUIRED=\"SS-0621\";","publicstaticfinalStringSTXADD_NOT_NUMBER=\"SS-0622\";","publicstaticfinalStringSTXADD_COMMENT_OPEN=\"SS-0623\";","privateMapmessages;","privateMapsqlStates;","publicstaticLanguagegetLanguage(StringlocaleStr){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.create(Language.VIEW_INSERT);","table=(Table)tableView;","tableTimestamp=table.getTimestamp();","cmdSel.compile(con);","intcount=table.columns.size();","matrix=newint[count];"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["staticfinalintLEFT=1109;","staticfinalintLENGTH=1110;","staticfinalintLOCATE=1111;","staticfinalintLTRIM=1112;","staticfinalintOCTETLEN=1113;","staticfinalintREPEAT=1114;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intlength=last.offset+last.length-offset;","Stringdef=newString(sql,offset,length);","col.setDefaultValue(expr,def);","defaultWasSet=true;","break;","caseSQLTokenizer.IDENTITY:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(doubleValue\<0)","return-1;","if(doubleValue\>0)","return1;","return0;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["params[i++]=results.get(p);","if(i\<params.length)","params[i]=elseResult;","super.setParams(params);","finalvoidsetParams(Expression[]params){","super.setParams(params);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["returntrue;","publicbooleansupportsSubqueriesInExists(){","returntrue;","publicbooleansupportsSubqueriesInIns(){","returntrue;","publicbooleansupportsSubqueriesInQuantifieds(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["con.rollbackFile(currentRaFile);","if(!file.delete()){","file.deleteOnExit();","throwSmallSQLException.create(Language.FILE_CANT_DELETE,file.getPath());","Stringname=file.getName();","name=name.substring(0,name.lastIndexOf(\'.\'));"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["this.dataType=SQLTokenizer.INT;","else","if(newValueinstanceofLong||newValueinstanceofIdentity)","this.dataType=SQLTokenizer.BIGINT;","else","if(newValueinstanceofFloat)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["super(FUNCTION);","this.left=left;","this.operation=operation;","Expression[]params;","if(inList!=null){","this.inList=inList.toArray();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["thrownewjava.lang.UnsupportedOperationException(\"MethodregisterOutParameter()notyetimplemented.\");","publicbooleanwasNull(){","returnwasNull;","publicStringgetString(inti)throwsSQLException{","try{","Stringobj=getValue(i).getString();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["add(num.signum,num.value);","privatevoidadd(intsig2,int[]val2){","if(val2.length\>value.length){","int[]temp=val2;","val2=value;","value=temp;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["break;","caseSQLTokenizer.COUNT:","invalidParamCount=(paramCount!=1);","if(params[0].getType()==Expression.NAME){","ExpressionNameparam=(ExpressionName)params[0];","if(\"*\".equals(param.getName())&&param.getTableAlias()==null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["BigDecimalbig=toBigDecimal().divide(num.toBigDecimal(),newScale,BigDecimal.ROUND_HALF_EVEN);","setValue(big.unscaledValue().toByteArray());","scale=big.scale();","signum=big.signum();","finalvoiddiv(intquotient){","mul(100000);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnnewMutableNumeric(readString());","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","constraintName=null;","switch(token.value){","caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:","caseSQLTokenizer.FOREIGN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnull;","returnnode.addRootValue(key,i);","}else","if(equals(node.getRemainderValue(),key,i)){","if(isLastValue){","node.saveValue(rowOffset);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returngetString(left.getString(),right.getString());","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseLOCK_INSERT:","for(inti=0;i\<locksInsert.size();i++){","prev=lock=(TableStorePage)locksInsert.get(i);","while(lock!=null){","if(lock==storePage){","if(lock==prev){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["c=\'6\';","break;","default:","c=\'0\';","break;","if(c\>\'0\'&&last!=c){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["staticfinalintRADIANS=1016;","staticfinalintRAND=1017;","staticfinalintROUND=1018;","staticfinalintSIGN=1019;","staticfinalintSIN=1020;","staticfinalintSQRT=1021;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticfinalintSLACH=\'/\';//47","staticfinalintLESSER=\'\<\';//60","staticfinalintEQUALS=\'=\';//61","staticfinalintGREATER=\'\>\';//62","staticfinalintQUESTION=\'?\';//63","staticfinalintBIT_XOR=\'^\';//94"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["inti=-1;","while(true){","chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);","node=node.getChildNode(digit);","if(node==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).longValue();","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnreadNumeric().doubleValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnDouble.parseDouble(readString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["init(database,tableView);","raFile=createFile(con,database);","staticFilegetFile(Databasedatabase,Stringname)throwsException{","returnnewFile(Utils.createIdxFileName(database,name));","privateFileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["finalvoidadd(DataSourcetable){","if(size\>=data.length){","DataSource[]dataNew=newDataSource[size\<\<1];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;","data[size++]=table;"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["leftEx.add(param1);","rightEx.add(param0);","}else{","return0;","returnoperation;","return0;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["publicbooleansupportsPositionedDelete(){","returntrue;","publicbooleansupportsPositionedUpdate(){","returntrue;","publicbooleansupportsSelectForUpdate(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.REAL:","floatfValue=((Number)obj).floatValue();","if(Float.isInfinite(fValue)||Float.isNaN(fValue))","returnnull;","returnnewMutableNumeric(fValue);","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["signum=0;","return;","value=newint[(length+3)/4];","if(complement[0]\<0){","negate(complement);","signum=-1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalbooleancontainsKey(longkey){","return(get(key)!=null);","finalTableStorePageadd(longkey,TableStorePagevalue){","inti=(int)(key%table.length);","table[i]=newEntry(key,value,table[i]);","if(size++\>=threshold)"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["staticintdayOfWeek(longtime){","return(int)((time/86400000+3)%7);","staticlongparse(java.util.Datedate){","longt=date.getTime();","returnremoveDateTimeOffset(t);","staticDateTimevalueOf(java.util.Datedate){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewMutableNumeric(((Number)obj).intValue());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(((Number)obj).longValue());","caseSQLTokenizer.REAL:","floatfValue=((Number)obj).floatValue();","if(Float.isInfinite(fValue)||Float.isNaN(fValue))"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["booleanisFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleanfirst()throwsException;","booleanprevious()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleannext()throwsException;"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetDoubleImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["default:","returngetFloat()!=0;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","switch(operation){","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnreadShort();","caseSQLTokenizer.INT:","returnreadInt();","caseSQLTokenizer.BIGINT:","returnreadLong();","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=0;i\<SQL_STATES.length;i++){","Stringkey=SQL_STATES[i][0];","if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{","Stringvalue=SQL_STATES[i][1];"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["super(raFile);","this.file=file;","this.con=con;","this.database=database;","@Override","longcommit(){"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["while(true){","if(shift!=0){","offset=insertNode(octet);","}else{","insertNodeLastLevel(octet);","return;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["store.writeInt(count);","for(inti=0;i\<count;i++){","store.writeColumn(columns.get(i));","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindexDesc=indexes.get(i);","store.writeInt(INDEX);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql)throwsSQLException{","returnnewSSCallableStatement(this,sql);","publicStringnativeSQL(Stringsql){","returnsql;","publicvoidsetAutoCommit(booleanautoCommit)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","if(isOuterValid){","isOuterValid=false;","right.nullRow();","returntrue;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.CHAR:","page=find(page,stringToBinarySortOrder(expr.getString(),true),nodeList);","break;","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["{GROUP_AGGR_INVALID,\"FunzionediaggregrazionenonvalidaperlaclausolaGROUPBY:({0}).\"},","{GROUP_AGGR_NOTPART,\"L\'\'espressione\'\'{0}\'\'nonÃ¨partediunafunzionediaggregazioneodellaclausolaGROUPBY.\"},","{ORDERBY_INTERNAL,\"ErroreinternoperORDERBY.\"},","{UNION_DIFFERENT_COLS,\"SELECTappartenentiadunaUNIONconnumerodicolonnedifferenti:{0}e{1}.\"},","{INDEX_EXISTS,\"L\'\'indice\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{INDEX_MISSING,\"L\'\'indice\'\'{0}\'\'nonesiste.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["return((Number)obj).intValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return(int)((DateTime)obj).getTimeMillis();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{ROW_LOCKED,\"RowislockedfromanotherConnection.\"},","{ROW_DELETED,\"Rowalreadydeleted.\"},","{SAVEPT_INVALID_TRANS,\"Savepointisnotvalidforthistransaction.\"},","{SAVEPT_INVALID_DRIVER,\"Savepointisnotvalidforthisdriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnotsupportedforthistypeofrowsource.\"},","{ISOLATION_UNKNOWN,\"UnknownTransactionIsolationLevel:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.DOUBLE:","doubledValue=((Number)obj).doubleValue();","if(Double.isInfinite(dValue)||Double.isNaN(dValue))","returnnull;","returnnewMutableNumeric(dValue);","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Expressionparam4;","ExpressionFunction(){","super(FUNCTION);","abstractintgetFunction();","byte[]getBytes()throwsException{","returnExpressionValue.getBytes(getObject(),getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["publicvoidsetUnicodeStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetCharacterStream()notyetimplemented.\");","publicvoidsetRef(inti,Refx)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetBlob()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfYear();","break;","caseSQLTokenizer.HOUR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionHour();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnUtils.int2bytes(((Number)obj).intValue());","caseSQLTokenizer.DOUBLE:","returnUtils.double2bytes(((Number)obj).doubleValue());","caseSQLTokenizer.REAL:","returnUtils.float2bytes(((Number)obj).floatValue());","default:throwcreateUnsupportedConversion(dataType,obj,SQLTokenizer.VARBINARY);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["offset+=pointerSize;","do{","nextOffset2=nextOffset1;","nextOffset1=offset;","nextEntry=getUnsignedShort();","if(listEnum.stack\<3)"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["staticStringtranslateMsg(StringmessageCode,Object[]params){","assert(messageCode!=null&&params!=null):\"Fillparameters.msgCode=\"+messageCode+\"params=\"+params;","Stringlocalized=language.getMessage(messageCode);","returnMessageFormat.format(localized,params);","privatestaticStringstripMsg(Throwablethrowable){","Stringmsg=throwable.getMessage();"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["addKeyWord(\"SMALLINT\",SMALLINT);","addKeyWord(\"INTEGER\",INT);","addKeyWord(\"INT\",INT);","addKeyWord(\"SERIAL\",COUNTER);//aliasforMySQLandPostgreSQL","addKeyWord(\"COUNTER\",COUNTER);","addKeyWord(\"BIGINT\",BIGINT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","finalvoidafterLast(){","longList=null;","nodeStack.setSize(1);","((IndexNodeScrollStatus)nodeStack.peek()).afterLast();","privatefinallonggetReturnValue(Objectvalue){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["if(size\>=data.length){","resize(size\<\<1);","data[size++]=foreignKey;","privatefinalvoidresize(intnewSize){","ForeignKey[]dataNew=newForeignKey[newSize];","System.arraycopy(data,0,dataNew,0,size);"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","return(int)readSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"INT\"});","@Override","longgetLong(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["System.arraycopy(data,0,array,0,size);","returnarray;","privatefinalvoidresize(intnewSize){","Expression[]dataNew=newExpression[newSize];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(getDataType(),getPrecision(),getScale());","booleanisDefinitelyWritable(){","returnfalse;","booleanisAutoIncrement(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["if(size\>data.length)resize(newSize);","finalExpressionget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(Expressionexpr){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["try{","byte[]obj=getValue(i).getBytes();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["write(con);","for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);","TablepkTable=(Table)database.getTableView(con,foreignKey.pkTable);","pkTable.references.add(foreignKey);","Table(Databasedatabase,Stringname){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["status=UPDATE_POINTER;","}else{","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","updatePointer.filePosUpdated=newData.writeFinsh(null);","updatePointer.status=UPDATE_POINTER;","updatePointer.type=SQLTokenizer.UPDATE;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["expr.setNameAfterTableAlias(nextIdentifier());","}else{","previousToken();","returnexpr;","caseSQLTokenizer.TRUE:","returnnewExpressionValue(Boolean.TRUE,SQLTokenizer.BOOLEAN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode,","Objectparam0){","Stringmessage=getErrorString(token,addMessageCode,param0);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,int[]validValues){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintOCTETLEN=1113;","staticfinalintREPEAT=1114;","staticfinalintREPLACE=1115;","staticfinalintRIGHT=1116;","staticfinalintRTRIM=1117;","staticfinalintSOUNDEX=1118;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["wasNextEntry=false;","prev.value=value;","staticfinalStringgetKeyWord(intkey){","return(String)keywords.get(Utils.getInteger(key));","staticfinalintgetSQLDataType(inttype){","switch(type){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(dataTypeIdx\>=DECIMAL_IDX)","returnSQLTokenizer.DECIMAL;","returnSQLTokenizer.DOUBLE;","staticintgetDataType(inttypeLeft,inttypeRight){","if(typeLeft==typeRight)returntypeLeft;","intdataTypeIdx=Math.min(Utils.indexOf(typeLeft,DatatypeRange),Utils.indexOf(typeRight,DatatypeRange));"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BIGINT:","value=newMutableLong(expr.getLong());","break;","caseSQLTokenizer.REAL:","value=newMutableFloat(expr.getFloat());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["while(isFullNotValid[fullReturnCounter++]){","if(fullReturnCounter\>=fullRowCount){","returnfalse;","right.next();","returntrue;","}else"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["{UNSUPPORTED_CONVERSION,\"01000\"},","{INSERT_INVALID_LEN,\"01000\"},","{SUBSTR_INVALID_LEN,\"01000\"},","{VALUE_STR_TOOLARGE,\"01000\"},","{VALUE_BIN_TOOLARGE,\"01000\"},","{VALUE_NULL_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(isNull())return0;","finalintplaces=param2.getInt();","doublevalue=param1.getDouble();","longfactor=1;","if(places\>0){","for(inti=0;i\<places;i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["publicclassExpressionArithmeticextendsExpression{","privateExpressionleft;","privateExpressionright;","privateExpressionright2;","privateExpression[]inList;","finalprivateintoperation;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returngetTimestamp(findParameter(parameterName));","publicObjectgetObject(StringparameterName)throwsSQLException{","returngetObject(findParameter(parameterName));","publicBigDecimalgetBigDecimal(StringparameterName)throwsSQLException{","returngetBigDecimal(findParameter(parameterName));","publicObjectgetObject(StringparameterName,Mapmap)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().intValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalpublicResultSetexecuteQuery(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getQueryResult();","finalpublicintexecuteUpdate(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getUpdateCount();"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["{MINUTES_TOOLARGE,\"01000\"},","{SECS_TOOLARGE,\"01000\"},","{MILLIS_TOOLARGE,\"01000\"},","{DATETIME_INVALID,\"01000\"},","{UNSUPPORTED_CONVERSION_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_OPER,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalintsize(){","returnsize;","finalColumnget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["byte[]bytes=param1.getBytes();","intlength=bytes.length;","while(length\>0&&bytes[length-1]==0){","length--;","byte[]b=newbyte[length];","System.arraycopy(bytes,0,b,0,length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["privatestaticfinalint[]MISSING_KEYTYPE={SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.FOREIGN};","privatestaticfinalint[]MISSING_KEY={SQLTokenizer.KEY};","privatestaticfinalint[]MISSING_REFERENCES={SQLTokenizer.REFERENCES};","privatestaticfinalint[]MISSING_AS={SQLTokenizer.AS};","privatestaticfinalint[]MISSING_SELECT={SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_INTERVALS={SQLTokenizer.SQL_TSI_FRAC_SECOND,SQLTokenizer.SQL_TSI_SECOND,SQLTokenizer.SQL_TSI_MINUTE,SQLTokenizer.SQL_TSI_HOUR,SQLTokenizer.SQL_TSI_DAY,SQLTokenizer.SQL_TSI_WEEK,SQLTokenizer.SQL_TSI_MONTH,SQLTokenizer.SQL_TSI_QUARTER,SQLTokenizer.SQL_TSI_YEAR,SQLTokenizer.MILLISECOND,SQLTokenizer.SECOND,SQLTokenizer.MINUTE,SQLTokenizer.HOUR,SQLTokenizer.DAY,SQLTokenizer.WEEK,SQLTokenizer.MONTH,SQLTokenizer.QUARTER,SQLTokenizer.YEAR,SQLTokenizer.D};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["resize(size\<\<1);","data[size++]=descr;","privatefinalvoidresize(intnewSize){","String[]dataNew=newString[newSize];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["length--;","byte[]b=newbyte[length];","System.arraycopy(bytes,0,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","returnnewCommandDrop(con.log,catalog,name,tokenType.value);","default:","throwcreateSyntaxError(tokenType,COMMANDS_DROP);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicclassExpressionValueextendsExpression{","privateObjectvalue;","privateintdataType;","privateintlength;","ExpressionValue(){","super(VALUE);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.MOD:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionMod();","break;","caseSQLTokenizer.PI:","invalidParamCount=(paramCount!=0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ColumnsnewColumns=oldColumns.copy();","for(inti=0;i\<columns.size();i++){","addColumn(newColumns,columns.get(i));","TablenewTable=database.createTable(con,newName,newColumns,oldTable.indexes,indexes,foreignKeys);","StringBufferbuffer=newStringBuffer(256);","buffer.append(\"INSERTINTO\").append(newName).append(\'(\');"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["expr=newExpressionFunctionRTrim();","break;","caseSQLTokenizer.SPACE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSpace();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewString(store.readChars(store.readInt()));","voidwriteColumn(Columncolumn)throwsException{","intnewSize=offset+25;","if(newSize\>page.length)resizePage(newSize);","writeByte(column.getFlag());","writeString(column.getName());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["resize(size\<\<1);","data[size++]=foreignKey;","privatefinalvoidresize(intnewSize){","ForeignKey[]dataNew=newForeignKey[newSize];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["default:thrownewError();","@Override","StringgetString(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["daten[14]=hex2byte(chars,32);","daten[15]=hex2byte(chars,34);","returndaten;","privatestaticbytehex2byte(char[]hex,intoffset)throwsSQLException{","try{","return(byte)((hexDigit2int(hex[offset++])\<\<4)"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.ATAN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionATan();","break;","caseSQLTokenizer.ATAN2:","invalidParamCount=(paramCount!=2);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(Stringdescr){","if(size\>=data.length){","resize(size\<\<1);"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["privatefinalbooleanreadonly;","privateDatabasedatabase;","privatebooleanautoCommit=true;","intisolationLevel=TRANSACTION_READ_COMMITTED;//seealsogetDefaultTransactionIsolation","privateListcommitPages=newArrayList();","SSConnection(SSConnectioncon){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["SQLTokenizer.VARCHAR,","SQLTokenizer.CHAR,","SQLTokenizer.LONGVARCHAR,","SQLTokenizer.CLOB,","SQLTokenizer.VARBINARY,","SQLTokenizer.BINARY,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["TransactionSteppage=(TransactionStep)commitPages.get(i);","page.freeLock();","commitPages.clear();","transactionTime=System.currentTimeMillis();","}catch(Throwablee){","rollback();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["for(inti=1;i\<=digitCount;i++){","buf.setCharAt(buf.length()-i,Utils.digits[value%10]);","value/=10;","privatefinalstaticvoidformatMillis(intmillis,StringBufferbuf){","buf.append(Utils.digits[(millis/100)%10]);","intvalue=millis%100;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?10000:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","return(long)(Utils.bytes2double(readBinary())*10000L);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["SSStatement(SSConnectioncon)throwsSQLException{","this(con,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSStatement(SSConnectioncon,intrsType,intrsConcurrency)throwsSQLException{","this.con=con;","this.rsType=rsType;","this.rsConcurrency=rsConcurrency;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(!isLeapYear(year)){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(hour\>=24){","throwSmallSQLException.create(Language.HOURS_TOOLARGE,datetime);","if(minute\>=60){","throwSmallSQLException.create(Language.MINUTES_TOOLARGE,datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.VARBINARY:","returnreadBinary();","caseSQLTokenizer.TINYINT:","returnUtils.getInteger(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnUtils.getInteger(readShort());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(lock.nextLock==null){","locksInsert.remove(i--);","}else{","locksInsert.set(i,lock.nextLock);","}else{","prev.nextLock=lock.nextLock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicvoidsetClob(inti,Clobx)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetArray()notyetimplemented.\");","publicResultSetMetaDatagetMetaData()throwsSQLException{","checkStatement();","if(cmdinstanceofCommandSelect){"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["publicStringgetCursorName(){","returnnull;","publicResultSetMetaDatagetMetaData(){","returnmetaData;","publicObjectgetObject(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalclassExpressionFunctionMinuteextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.MINUTE;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionMinute.java|"],
"["try{","Objectobj=getValue(columnIndex).getApiObject();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","value=newDateTime(expr.getLong(),dataType);","break;","default:","value=expr.getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.NULL:","return0;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return1;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["staticfinalintBIT=300;","staticfinalintBOOLEAN=301;","staticfinalintBINARY=310;","staticfinalintVARBINARY=311;","staticfinalintRAW=312;","staticfinalintLONGVARBINARY=313;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["abstractbyte[]getBytes(intcolIdx)throwsException;","abstractintgetDataType(intcolIdx);","booleaninit(SSConnectioncon)throwsException{returnfalse;}","StringgetAlias(){returnnull;}","abstractTableViewgetTableView();","booleanisExpressionsFromThisRowSource(Expressionscolumns){"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["privatestaticfinalint[]MISSING_REFERENCES={SQLTokenizer.REFERENCES};","privatestaticfinalint[]MISSING_AS={SQLTokenizer.AS};","privatestaticfinalint[]MISSING_SELECT={SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_INTERVALS={SQLTokenizer.SQL_TSI_FRAC_SECOND,SQLTokenizer.SQL_TSI_SECOND,SQLTokenizer.SQL_TSI_MINUTE,SQLTokenizer.SQL_TSI_HOUR,SQLTokenizer.SQL_TSI_DAY,SQLTokenizer.SQL_TSI_WEEK,SQLTokenizer.SQL_TSI_MONTH,SQLTokenizer.SQL_TSI_QUARTER,SQLTokenizer.SQL_TSI_YEAR,SQLTokenizer.MILLISECOND,SQLTokenizer.SECOND,SQLTokenizer.MINUTE,SQLTokenizer.HOUR,SQLTokenizer.DAY,SQLTokenizer.WEEK,SQLTokenizer.MONTH,SQLTokenizer.QUARTER,SQLTokenizer.YEAR,SQLTokenizer.D};","privatestaticfinalint[]MISSING_ALL={SQLTokenizer.ALL};","privatestaticfinalint[]MISSING_THEN={SQLTokenizer.THEN};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintTAN=1022;","staticfinalintTRUNCATE=1023;//lastnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","static{","addKeyWord(\"ABS\",ABS);","addKeyWord(\"ACOS\",ACOS);","addKeyWord(\"ASIN\",ASIN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["case8:","case10:","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(month==1){","if(day==30){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privatestaticfinalString[]SHORT_MONTHS=newDateFormatSymbols().getShortMonths();","DateTime(longtime,intdataType){","switch(dataType){","caseSQLTokenizer.SMALLDATETIME:","intseconds=(int)(time%60000);","if(seconds\<0){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(!isInsertRow){","throwSmallSQLException.create(Language.RSET_NOT_INSERT_ROW);","getCmd().insertRow(st.con,values);","clearRowBuffer();","privatevoidtestNotInsertRow()throwsSQLException{","if(isInsertRow){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalstaticprivatechar[]stringToBinarySortOrder(Stringvalue,booleanneedTrim){","intlength=value.length();","if(needTrim){","while(length\>0&&value.charAt(length-1)==\'\')length--;","char[]puffer=newchar[length];","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returntrue;","}elsefullRightRowCounter++;","}elsefullRightRowCounter++;","isBeforeFirst=false;","}while(result&&!getBoolean());","isOuterValid=false;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["dayofyear++;","if(day\<0){","year--;","continue;","}else","if(day\>=365){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnexpr;","privateRowSourcetableSource(Commandcmd,DataSourcestables)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_L://(","returnrowSource(cmd,tables,SQLTokenizer.PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["offset+=2;","if(!isNull)offset+=count*4;","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["offset++;","break;","caseSQLTokenizer.SMALLINT:","offset+=2;","break;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetRef(findParameter(parameterName));","publicBlobgetBlob(StringparameterName)throwsSQLException{","returngetBlob(findParameter(parameterName));","publicClobgetClob(StringparameterName)throwsSQLException{","returngetClob(findParameter(parameterName));","publicArraygetArray(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnDriverManager.getLogWriter()!=null;","voidprintln(Stringmsg){","PrintWriterlog=DriverManager.getLogWriter();","if(log!=null){","synchronized(log){","log.print(\"[SmallSQL]\");"]": ["|project://smallsql/src/smallsql/database/Logger.java|"],
"["caseSQLTokenizer.INSERT:","returninsert();","caseSQLTokenizer.UPDATE:","returnupdate();","caseSQLTokenizer.CREATE:","returncreate();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionArithmetic))returnfalse;","if(((ExpressionArithmetic)expr).operation!=operation)returnfalse;","returntrue;","intgetInt()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnTypes.INTEGER;","caseSQLTokenizer.BIGINT:","returnTypes.BIGINT;","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.dataType=SQLTokenizer.DECIMAL;","else","if(newValueinstanceofjava.util.Date){","DateTimedateTime;","this.value=dateTime=DateTime.valueOf((java.util.Date)newValue);","this.dataType=dateTime.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","publicclassIdentityextendsNumberimplementsMutable{"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["voidaddColumn(Columncolumn)throwsSQLException{","addColumn(columns,column);","voidaddIndex(IndexDescriptionindexDescription)throwsSQLException{","indexes.add(indexDescription);","voidaddForeingnKey(ForeignKeykey){","foreignKeys.add(key);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["booleanprevious()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()==0){","scrollStatus.afterLast();","row--;","if(currentInsertedRow()\>=0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["{PARAM_CLASS_UNKNOWN,\"01000\"},","{PARAM_EMPTY,\"01000\"},","{PARAM_IDX_OUT_RANGE,\"01000\"},","{COL_DUPLICATE,\"01000\"},","{COL_MISSING,\"01000\"},","{COL_VAL_UNMATCH,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Databasedb=(Database)databases.get(dbKey);","if(db==null){","if(create&&!file.isDirectory()){","CommandCreateDatabasecommand=newCommandCreateDatabase(con.log,name);","command.execute(con,null);","db=newDatabase(name,file,con.isReadOnly());"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["isLeap=false;","dayofyear=day=d-((year-1970)*365+(year/4)-(year/100)+(year/400)-477);","if(isLeapYear(year)){","if(day\<59){","day++;","isLeap=true;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["abstractintgetFunction();","byte[]getBytes()throwsException{","returnExpressionValue.getBytes(getObject(),getDataType());","voidsetParams(Expression[]params){","super.setParams(params);","if(params.length\>0)param1=params[0];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["staticfinalintSUM=1403;","staticfinalintFIRST=1404;","staticfinalintLAST=1405;","staticfinalintAVG=1406;","static{","addKeyWord(\"COUNT\",COUNT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(raFile!=null)","try{","raFile.close();","}catch(Exceptione2){","DriverManager.println(e2.toString());","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|","|project://smallsql/src/smallsql/database/TableView.java|"],
"["@Override","finalintgetInt(intcolIdx)throwsException{","returnstore.getInt(offsets[colIdx],dataTypes[colIdx]);","@Override","finallonggetLong(intcolIdx)throwsException{","returnstore.getLong(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["intoffset;","intv=0;","while(v\<value.length&&value[v]==0)v++;","if(v==value.length)returnEMPTY_BYTES;","if(value[v]\<0){","complement=newbyte[(value.length-v)*4+4];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["addKeyWord(\"TRUE\",TRUE);","addKeyWord(\"NO\",FALSE);//aliasforFALSE","addKeyWord(\"FALSE\",FALSE);","addKeyWord(\"BETWEEN\",BETWEEN);","addKeyWord(\"LIKE\",LIKE);","addKeyWord(\"IN\",IN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["@Override","voidrollback()throwsSQLException{","FileChannelcurrentRaFile=raFile;","if(raFile==null){","return;","raFile=null;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["caseSQLTokenizer.LAST:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.LAST);","break;","caseSQLTokenizer.AVG:","if(paramCount!=1){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"INSERT\",INSERT);","addKeyWord(\"LCASE\",LCASE);","addKeyWord(\"LEFT\",LEFT);","addKeyWord(\"DATALENGTH\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LEN\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LENGTH\",LENGTH);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["longlValue=((Number)para1).longValue();","return(lValue\<0)?newLong(-lValue):para1;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","intiValue=((Number)para1).intValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["data[size++]=descr;","privatefinalvoidresize(intnewSize){","String[]dataNew=newString[newSize];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;","publicString[]toArray(){"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["break;","default:","previousToken();","return;","privatevoidorder(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateDataSourcecurrentDS;","privateintrow;","voidaddDataSource(DataSourceds){","dataSources.add(ds);","currentDS=dataSources.get(0);","booleaninit(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["privatestaticfinalint[]MISSING_PARENTHESIS_VALUES_SELECT={SQLTokenizer.PARENTHESIS_L,SQLTokenizer.VALUES,SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_TOKEN_LIST={SQLTokenizer.COMMA,SQLTokenizer.FROM,SQLTokenizer.GROUP,SQLTokenizer.HAVING,SQLTokenizer.ORDER};","privatestaticfinalint[]MISSING_FROM={SQLTokenizer.FROM};","privatestaticfinalint[]MISSING_SET={SQLTokenizer.SET};","privatestaticfinalint[]MISSING_EQUALS={SQLTokenizer.EQUALS};","privatestaticfinalint[]MISSING_WHERE={SQLTokenizer.WHERE};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnMESSAGES;","privatefinalString[][]MESSAGES={","{CUSTOM_MESSAGE,\"{0}\"},","{UNSUPPORTED_OPERATION,\"UnsupportedOperation{0}.\"},","{CANT_LOCK_FILE,\"Can\'\'tlockfile\'\'{0}\'\'.AsingleSmallSQLDatabasecanonlybeopenedfromasingleprocess.\"},","{DB_EXISTENT,\"Database\'\'{0}\'\'alreadyexists.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","publicclassStoreImplextendsStore{","privatestaticfinalintDEFAULT_PAGE_SIZE=8192;//8Kb"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","offset+=4;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticbooleanisSignedDataType(intdataType){","switch(dataType){","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["writeBytes(bytes);","default:","writeBytes(Utils.unique2bytes(expr.getString()));","break;","default:thrownewError(String.valueOf(column.getDataType()));","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["c=\'2\';","break;","case\'D\':","case\'T\':","c=\'3\';","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseSQLTokenizer.FLOAT:","page=find(page,doubleToBinarySortOrder(expr.getDouble()),4,nodeList);","break;","caseSQLTokenizer.TINYINT:","page=find(page,expr.getInt(),1,nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["return15;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(StringcolumnName,Calendarcal)throwsSQLException{","returngetTime(findColumn(columnName),cal);","publicTimestampgetTimestamp(intcolumnIndex,Calendarcal)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["{CONNECTION_CLOSED,\"Connectionisalreadyclosed.\"},","{VIEW_INSERT,\"INSERTisnotsupportedforaview.\"},","{VIEWDROP_NOT_VIEW,\"CannotuseDROPVIEWwith\'\'{0}\'\'becauseitdoesnotisaview.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'can\'\'tbedropped.\"},","{RSET_NOT_PRODUCED,\"NoResultSetwasproduced.\"},","{RSET_READONLY,\"ResultSetisreadonly.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["intoperation=createJoinScrollIndex(cond,leftEx,rightEx,0);","if(operation!=0){","scroll=newJoinScrollIndex(type,left,right,leftEx,rightEx,operation);","returntrue;","returnfalse;","privateintcreateJoinScrollIndex(ExpressionArithmeticcond,ExpressionsleftEx,ExpressionsrightEx,intoperation)throwsException{"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnnull;","finalchar[]getRemainderValue(){","returnremainderKey;","finalIndexNodeaddNode(chardigit)throwsSQLException{","if(remainderKey!=null)moveRemainderValue();","intpos=findNodePos(digit);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{STXADD_OPER_MINUS,\"Operatore\'\'meno\'\'nonvalidoperiltipodidatovarbinary.\"},","{STXADD_FUNC_UNKNOWN,\"Funzionesconosciuta.\"},","{STXADD_PARAM_INVALID_COUNT,\"Totaleparametrinonvalido.\"},","{STXADD_JOIN_INVALID,\"Sintassidellajoinnonvalida.\"},","{STXADD_FROM_PAR_CLOSE,\"Parentesichiusanonattesanellaclausolafrom.\"},","{STXADD_KEYS_REQUIRED,\"Leparolechiaverichiestesono:\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["puffer[i]=Character.toLowerCase(Character.toUpperCase(value.charAt(i)));","returnpuffer;","finalstaticprivatechar[]bytesToBinarySortOrder(byte[]value){","intlength=value.length;","char[]puffer=newchar[length];","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["(fkTable==null||fkTable.equals(foreignKey.fkTable))){","StringscolumnsPk=pk.getColumns();","StringscolumnsFk=fk.getColumns();","for(intc=0;c\<columnsPk.size();c++){","Object[]row=newObject[14];","row[0]=getName();//PKTABLE_CAT"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["expr=newExpressionFunctionIIF();","Expression[]newParams=newExpression[3];","newParams[0]=newExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","newParams[1]=params[1];","newParams[2]=params[0];","params=newParams;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnresult;","Object[][]getPrimaryKeys(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.SMALLMONEY:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getMoney()==right.getMoney();","caseGREATER:returnleft.getMoney()\>right.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["page[offset++]=(byte)(value);","intreadByte(){","returnpage[offset++];","intreadUnsignedByte(){","returnpage[offset++]&0xFF;","voidwriteBoolean(booleanvalue){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["try{","file=newFile(name).getCanonicalFile();","}catch(Throwableth){","throwSmallSQLException.createFromException(th);","StringdbKey=file.getName()+\";readonly=\"+con.isReadOnly();","synchronized(databases){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["signum=-1;","}else{","value[0]=complement;","signum=1;","MutableNumeric(intcomplement,intscale){","this(complement);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returngetDefaultLanguage();","publicstaticLanguagegetDefaultLanguage(){","StringdfltLocaleStr=Locale.getDefault().toString();","try{","returngetFromLocaleTree(dfltLocaleStr);","catch(IllegalArgumentExceptione){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.DOUBLE:","returnUtils.doubleToMoney(((Number)obj).doubleValue());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","return((Money)obj).value;","default:returnMoney.parseMoney(obj.toString());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["commit();","this.autoCommit=autoCommit;","publicbooleangetAutoCommit(){","returnautoCommit;","voidadd(TransactionStepstorePage)throwsSQLException{","testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","returnnewTableStorePage(con,this,LOCK_INSERT,-1);","default:","thrownewError(\"pageOperation:\"+pageOperation);","TableStorePagerequestWriteLock(SSConnectioncon,TableStorePagereadlock)throwsSQLException{","if(readlock.lockType==LOCK_INSERT){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["dataTypes=newint[columns.size()];","for(inti=0;i\<columns.size();i++){","dataTypes[i]=columns.get(i).getDataType();","returntrue;","returnfalse;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","return(byte[])obj;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["importjava.sql.*;","importjava.util.Properties;","importjavax.swing.JOptionPane;","importsmallsql.database.*;","publicclassCommandLine{","publicstaticvoidmain(String[]args)throwsException{"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\<0)//castneededforCompiler1.5","value=str;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["copy.size=size;","returncopy;","privatefinalvoidresize(intnewSize){","Column[]dataNew=newColumn[newSize];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["return0;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return1;","caseSQLTokenizer.TINYINT:","return3;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["MutableNumericnum=left.getNumeric();","num.add(right.getNumeric());","returnnum;","caseSUB:","MutableNumericnum=left.getNumeric();","num.sub(right.getNumeric());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["ExpressionName(inttype){","super(type);","voidsetNameAfterTableAlias(Stringname){","tableAlias=getName();","setName(name);","publicbooleanequals(Objectexpr){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["longgetMoney()throwsException{","returngetLong()*10000;","MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getLong());","ObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnnewMutableNumeric(getBoolean()?1:0);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateExpressionsgroupBy;//thelistofExpressionsintheGROUPBYclause","privateExpressionsexpressions=newExpressions();//ListofExpression","privateExpressionsinternalExpressions=newExpressions();//alistofAggregateFunctionandColNamesfromSELECT,GROUPBYandHAVING","GroupResult(CommandSelectcmd,RowSourcefrom,ExpressionsgroupBy,Expressionhaving,ExpressionsorderBy)throwsSQLException{","this.from=from;","this.groupBy=groupBy;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["Object[]params={","SQLTokenizer.getKeyWord(fromDataType),","obj,","SQLTokenizer.getKeyWord(toDataType)","};","returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION,params);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["buf.append(\'/\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case101://USAmm/dd/yyyy","formatNumber(details.month+1,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.REAL:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue()!=0;","default:returnUtils.string2boolean(obj.toString());","intgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","classIndexNode{","finalprivatebooleanunique;","finalprivatechardigit;//unsignedshort","staticfinalprivateIndexNode[]EMPTY_NODES=newIndexNode[0];"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["if(isKeyword(token)){","previousToken();","returnfromSource;","if(!fromSource.hasAlias()){","fromSource.setAlias(token.getName(sql));","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case\'X\':","case\'Z\':","c=\'2\';","break;","case\'D\':","case\'T\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["returndefaultDefinition;","StringgetName(){","returnname;","booleanisAutoIncrement(){","returnidentity;","voidsetAutoIncrement(booleanidentity){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importjava.util.ArrayList;","importjava.util.HashMap;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["{FILE_CANT_DELETE,\"File\'\'(0)\'\'nonpossonoessereeliminati.\"},","{ROW_0_ABSOLUTE,\"Ilnumerodiriga0nonÃ¨validoperilmetodo\'\'absolute()\'\'.\"},","{ROW_NOCURRENT,\"Nessunarigacorrente.\"},","{ROWS_WRONG_MAX,\"Numeromassimodirighenonvalido({0}).\"},","{ROW_LOCKED,\"LarigaÃ¨bloccatadaun\'\'altraconnessione.\"},","{ROW_DELETED,\"RigagiÃ\u00a0cancellata.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["intgetInt()throwsException{","Stringsuchstr=param1.getString();","Stringvalue=param2.getString();","if(suchstr==null||value==null||suchstr.length()==0||value.length()==0)return0;","intstart=0;","if(param3!=null){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|"],
"["val2=value;","value=temp;","inttempi=signum;","signum=sig2;","sig2=tempi;","if(signum!=sig2)"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().toByteArray();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(Utils.indexOf(\'.\',sql,token.offset,token.length)\>=0||","Utils.indexOf(\'e\',sql,token.offset,token.length)\>=0){","returnnewExpressionValue(newDouble(tok),SQLTokenizer.DOUBLE);","}else{","try{","returnnewExpressionValue(newInteger(tok),SQLTokenizer.INT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowList.add(rowSource.getRowPosition());","returntrue;","rowIdx=rowList.size();//rowIdxshouldbeneverlargerasrowcount","returnfalse;","booleanlast()throwsException{","afterLast();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returngetLong()*10000;","MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getLong());","ObjectgetObject()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["returnfalse;","publicbooleansupportsSubqueriesInComparisons(){","returntrue;","publicbooleansupportsSubqueriesInExists(){","returntrue;","publicbooleansupportsSubqueriesInIns(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintsize(){","returnsize;","finalvoidsetSize(intnewSize){","for(inti=newSize;i\<size;i++)data[i]=null;","size=newSize;","if(size\>data.length)resize(newSize);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["if(!ok)throwSmallSQLException.create(Language.TABLE_EXISTENT,name);","FileChannelraFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,raFile,con,database));","writeMagic(raFile);","returnraFile;","abstractvoidwriteMagic(FileChannelraFile)throwsException;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["addKeyWord(\"MS\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"SQL_TSI_FRAC_SECOND\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"S\",SQL_TSI_SECOND);","addKeyWord(\"SS\",SQL_TSI_SECOND);","addKeyWord(\"SQL_TSI_SECOND\",SQL_TSI_SECOND);","addKeyWord(\"MI\",SQL_TSI_MINUTE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case102://ANSIyyyy.mm.dd"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["union=newUnionAll();","union.addDataSource(newViewResult(con,selCmd));","selCmd=newCommandSelect(con.log);","selCmd.setSource(union);","DataSourcesfrom=newDataSources();","from.add(union);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:returnFloat.parseFloat(obj.toString());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(newSize\>page.length)resizePage(newSize);","writeByte(column.getFlag());","writeString(column.getName());","writeShort(column.getDataType());","writeInt(column.getPrecision());","writeByte(column.getScale());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["previousToken();","switch(dataType){","caseSQLTokenizer.RAW:","dataType=SQLTokenizer.VARBINARY;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalclassLongLongList{","privateintsize;","privatelong[]data;","LongLongList(){","this(16);","LongLongList(intinitialSize){"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["intgetInt(intcolIdx)throwsException{","returnget(colIdx).getInt();","longgetLong(intcolIdx)throwsException{","returnget(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{","returnget(colIdx).getFloat();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(token.value==SQLTokenizer.SELECT){","parthesisCount++;","cmd.noColumns=true;","}else{","previousToken();","Expressionslist=expressionParenthesisList(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<letters.length;i++){","charc=(char)(letters[i]|0x20);","while(node!=null&&node.letter!=c){","prev=node;","node=node.nextEntry;","wasNextEntry=true;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{LOB_DELETED,\"LobObjectwasdeleted.\"},","{PARAM_CLASS_UNKNOWN,\"Unknownparameterclass:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}isempty.\"},","{PARAM_IDX_OUT_RANGE,\"Parameterindex{0}outofrange.Thevaluemustbebetween1and{1}.\"},","{COL_DUPLICATE,\"Thereisaduplicatedcolumnname:\'\'{0}\'\'.\"},","{COL_MISSING,\"Column\'\'{0}\'\'notfound.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["isInsertRow=false;","clearRowBuffer();","if(values==null){","getUpdateValue(1);","publicStatementgetStatement(){","returnst;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returngetInt()!=0;","finallonggetLong()throwsException{","returngetInt();","finalfloatgetFloat()throwsException{","returngetInt();","finaldoublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["privatevoidadd(int[]val2){","longtemp=0;","intv1=value.length;","for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)+(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>32);","value[v1]=(int)temp;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["voidsetScale(intnewScale){","if(newScale==scale)return;","intfactor=1;","if(newScale\>scale){","for(;newScale\>scale;scale++){","factor*=10;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","longreadLong(){","return((long)(page[offset++])\<\<56)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicRefgetRef(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blobobject\");","publicClobgetClob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicObjectgetObject(StringcolumnName,Mapmap)throwsSQLException{","returngetObject(columnName);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken=nextToken(MISSING_SET);","while(true){","token=nextToken();","Expressiondest=expressionSingle(cmd,token);","if(dest.getType()!=Expression.NAME)throwcreateSyntaxError(token,MISSING_IDENTIFIER);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["cmdCreate.addIndex(index);","token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidinsertRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","privateExpressionget(intcolIdx)throwsException{","if(currentRow==null)throwSmallSQLException.create(Language.ROW_NOCURRENT);","returncurrentRow[colIdx];","intgetRowCount(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["throwcreateSyntaxError(token,Language.STXADD_JOIN_INVALID);","switch(token.value){","caseSQLTokenizer.ON:","if(type==Join.RIGHT_JOIN)","returnnewJoin(Join.LEFT_JOIN,right,left,expression(cmd,0));","returnnewJoin(type,left,right,expression(cmd,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnwhere==null||rowSource.rowInserted()||where.getBoolean();","finalbooleanisScrollable(){","returnrowSource.isScrollable();","finalbooleanisBeforeFirst(){","returnrow==0;","finalbooleanisFirst(){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["publicintisNullable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isNullable()?columnNullable:columnNoNulls;","publicbooleanisSigned(intcolumn)throwsSQLException{","returnisSignedDataType(getColumnExpression(column).getDataType());","staticbooleanisSignedDataType(intdataType){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["year--;","continue;","}else","if(day\>=365){","year++;","continue;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["list.add(expression(cmd,0));","SQLTokentoken=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returnlist;","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti,Mapmap)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetRef()notyetimplemented.\");","publicBlobgetBlob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetClob()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returntrue;","publicbooleansupportsOpenCursorsAcrossRollback(){","returntrue;","publicbooleansupportsOpenStatementsAcrossCommit(){","returntrue;","publicbooleansupportsOpenStatementsAcrossRollback(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["importjava.util.HashSet;","importjava.util.Locale;","importjava.util.Map;","importjava.util.Set;","publicclassLanguage{","publicstaticfinalStringCUSTOM_MESSAGE=\"SS-0000\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returncommandSelect.previous();","booleannext()throwsException{","returncommandSelect.next();","booleanlast()throwsException{","returncommandSelect.last();","booleanisLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["System.arraycopy(data,oldOffset,data,oldOffset+2+pointerSize,size-oldOffset);","size+=2+pointerSize;","writeShort(octet);","writePointer(size);","correctPointers(0,oldOffset,2+pointerSize,0);","data[size++]=(byte)0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]+1)==0;","if(uebertrag){","resizeValue(1);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["throwSmallSQLException.createFromException(e);","publicResultSetgetPrimaryKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"KEY_SEQ\",\"PK_NAME\"};","Object[][]data=con.getDatabase(false).getPrimaryKeys(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["for(inti=0;i\<count;i++){","buffer.write(bytes);","returnbuffer.toByteArray();","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["abstractObjectgetObject()throwsException;","finalObjectgetApiObject()throwsException{","Objectobj=getObject();","if(objinstanceofMutable){","return((Mutable)obj).getImmutableObject();","returnobj;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["addKeyWord(\"MI\",SQL_TSI_MINUTE);","addKeyWord(\"N\",SQL_TSI_MINUTE);","addKeyWord(\"SQL_TSI_MINUTE\",SQL_TSI_MINUTE);","addKeyWord(\"HH\",SQL_TSI_HOUR);","addKeyWord(\"SQL_TSI_HOUR\",SQL_TSI_HOUR);","addKeyWord(\"DD\",SQL_TSI_DAY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicfloatgetFloat(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return\"\";","returndatabase.getName();","publicvoidsetTransactionIsolation(intlevel)throwsSQLException{","if(!metadata.supportsTransactionIsolationLevel(level)){","throwSmallSQLException.create(Language.ISOLATION_UNKNOWN,String.valueOf(level));","isolationLevel=level;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["classExpressionInSelectextendsExpressionArithmetic{","finalprivateCommandSelectcmdSel;","finalprivateIndexindex=newIndex(true);","finalprivateSSConnectioncon;","ExpressionInSelect(SSConnectioncon,Expressionleft,CommandSelectcmdSel,intoperation){","super(left,(Expressions)null,operation);"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["publicstaticfinalStringUNSUPPORTED_CONVERSION_FUNC=\"SS-0283\";","publicstaticfinalStringUNSUPPORTED_TYPE_CONV=\"SS-0284\";","publicstaticfinalStringUNSUPPORTED_TYPE_SUM=\"SS-0285\";","publicstaticfinalStringUNSUPPORTED_TYPE_MAX=\"SS-0286\";","publicstaticfinalStringUNSUPPORTED_CONVERSION=\"SS-0287\";","publicstaticfinalStringINSERT_INVALID_LEN=\"SS-0288\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnvalue;","publicintintValue(){","return(int)value;","publiclonglongValue(){","returnvalue;","publicStringtoString(){"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|"],
"["break;","default:thrownewError(String.valueOf(dataTypes[i]));","@Override","voiddeleteRow(SSConnectioncon)throwsSQLException{","status=DELETED;","type=SQLTokenizer.DELETE;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returntrue;","}else","isFullNotValid[fullRightRowCounter-1]=result;","returnresult;","privatebooleangetBoolean()throwsException{","returntype==Join.CROSS_JOIN||condition.getBoolean();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["expr:","newExpressionArithmetic(currentGroup,expr,ExpressionArithmetic.AND);","expressions=internalExpressions;","for(intc=0;c\<expressions.size();c++){","addColumn(newColumnExpression(expressions.get(c)));","patchExpressions(cmd.columnExpressions);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["ExpressionFunction(){","super(FUNCTION);","abstractintgetFunction();","byte[]getBytes()throwsException{","returnExpressionValue.getBytes(getObject(),getDataType());","voidsetParams(Expression[]params){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["privatefinaljava.util.StacknodeStack=newjava.util.Stack();//TODOperformanceStackdurchnichtsynchronisierteKlasseersetzten","finalvoidreset(){","nodeStack.clear();","booleanasc=(expressions.get(0).getAlias()!=SQLTokenizer.DESC_STR);","nodeStack.push(newIndexNodeScrollStatus(rootPage,asc,true,0));","finallonggetRowOffset(booleanscroll){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2float(readBinary());","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidwriteTime(longtime){","writeInt((int)((time/1000)%86400));","longreadTime(){","returnreadInt()*1000L;","voidwriteDate(longdate){","writeInt((int)(date/86400000));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["default:thrownewError();","@Override","MutableNumericgetNumeric(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["currentDS=dataSources.get(++dataSourceIdx);","currentDS.beforeFirst();","n=currentDS.next();","if(n)returntrue;","row=0;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["staticfinalintSTRING=3;","staticfinalintIDENTIFIER=4;","staticfinalintNUMBERVALUE=5;","static{","keywords.put(newInteger(VALUE),\"\<expression\>\");","keywords.put(newInteger(IDENTIFIER),\"\<identifier\>\");"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importsmallsql.database.language.Language;","finalclassIndexDescription{","staticfinalintMAGIC_INDEX=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'I\';","staticfinalintINDEX_VERSION=1;","privatefinalStringname;","finalprivateintconstraintType;//PRIMARY,UNIQUE,FOREIGIN,INDEX"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\<0)","value=newValue;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"KEY_SEQ\",\"PK_NAME\"};","Object[][]data=con.getDatabase(false).getPrimaryKeys(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalclassExpressionFunctionHourextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.HOUR;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionHour.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","((DateTime)value).time=Math.min(((DateTime)value).time,expr.getLong());","break;","default:thrownewError(\"\"+dataType);","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["page=add(page,rowOffset,expr.getBoolean()?2:1,isLastValues,1);","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","page=add(page,rowOffset,numericToBinarySortOrder(expr.getNumeric()),isLastValues);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["break;","caseSQLTokenizer.IS:","token=nextToken(MISSING_NOT_NULL);","if(token.value==SQLTokenizer.NOT){","nextToken(MISSING_NULL);","operation++;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseEQUALS:returnleft.getMoney()==right.getMoney();","caseGREATER:returnleft.getMoney()\>right.getMoney();","caseGRE_EQU:returnleft.getMoney()\>=right.getMoney();","caseLESSER:returnleft.getMoney()\<right.getMoney();","caseLES_EQU:returnleft.getMoney()\<=right.getMoney();","caseUNEQUALS:returnleft.getMoney()!=right.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{GROUP_AGGR_NOTPART,\"01000\"},","{ORDERBY_INTERNAL,\"01000\"},","{UNION_DIFFERENT_COLS,\"01000\"},","{INDEX_EXISTS,\"01000\"},","{INDEX_MISSING,\"01000\"},","{INDEX_FILE_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Columnscopy=newColumns();","Column[]cols=copy.data=(Column[])data.clone();","for(inti=0;i\<size;i++){","cols[i]=cols[i].copy();","copy.size=size;","returncopy;"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["shift-=16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack]=result;","loopToEndOfNode(listEnum);","}else{","shift+=16;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["intgetSignum(){","returnsignum;","voidsetSignum(intsignum){","this.signum=signum;","voidfloor(){","intoldScale=scale;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","byte[]bytes=expr.getBytes();","if(bytes.length!=16)throwSmallSQLException.create(Language.BYTEARR_INVALID_SIZE,String.valueOf(bytes.length));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(rows++\<0){","if(!previous()){","returnfalse;","returntrue;","intgetRow(){","returnrow\>getRowCount()?0:row;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["privateObjectgetUniqueKey(Stringname){","returnname.toUpperCase(Locale.US);//usethesamelocaleforall","TableViewget(Stringname){","return(TableView)map.get(getUniqueKey(name));","voidput(Stringname,TableViewtableView){","map.put(getUniqueKey(name),tableView);"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["abstractclassExpressionFunctionReturnIntextendsExpressionFunction{","booleanisNull()throwsException{","returnparam1.isNull();","finalbooleangetBoolean()throwsException{","returngetInt()!=0;","finallonggetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["publicStringgetCatalog(){","if(database==null)","return\"\";","returndatabase.getName();","publicvoidsetTransactionIsolation(intlevel)throwsSQLException{","if(!metadata.supportsTransactionIsolationLevel(level)){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["for(inti=0;i\<count;i++){","store.writeColumn(columns.get(i));","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindexDesc=indexes.get(i);","store.writeInt(INDEX);","intoffsetStart=store.getCurrentOffsetInPage();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["while(length\>0&&bytes[length-1]==0){","length--;","byte[]b=newbyte[length];","System.arraycopy(bytes,0,b,0,length);","returnb;","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["wasNull=expr.isNull();","returnexpr.getFloat();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicdoublegetDouble(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewTime(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(length!=src2.length-offset2)returnfalse;","for(inti=0;i\<length;i++){","if(src1[i]!=src2[i+offset2])returnfalse;","returntrue;","privatefinalbooleanequals(char[]src1,longsrc2,intcharCount){","if(src1==null)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicResultSetMetaDatagetMetaData()throwsSQLException{","checkStatement();","if(cmdinstanceofCommandSelect){","try{","((CommandSelect)cmd).compile(con);","SSResultSetMetaDatametaData=newSSResultSetMetaData();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["publicvoidsetBytes(StringparameterName,byte[]x)throwsSQLException{","setBytes(findParameter(parameterName),x);","publicvoidsetDate(StringparameterName,Datex)throwsSQLException{","setDate(findParameter(parameterName),x);","publicvoidsetTime(StringparameterName,Timex)throwsSQLException{","setTime(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["value\<\<=8;","value+=(data[offset++]&0xFF);","returnvalue;","finalprivatevoidwritePointer(intvalue){","for(inti=pointerSize-1;i\>=0;i--){","data[offset++]=(byte)(value\>\>(i*8));"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["default:thrownewError();","@Override","ObjectgetObject(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["idx2=datetime.indexOf(\'\',idx1);","if(idx2\<0)idx2=datetime.length();","day=Integer.parseInt(datetime.substring(idx1,idx2).trim());","}else{","year=1970;","month=0;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getLong()==right.getLong();","caseGREATER:returnleft.getLong()\>right.getLong();","caseGRE_EQU:returnleft.getLong()\>=right.getLong();","caseLESSER:returnleft.getLong()\<right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["for(inti=0;i\<bytes.length;i++){","buf.append(digits[(bytes[i]\>\>4)&0x0F]);","buf.append(digits[(bytes[i])&0x0F]);","returnbuf.toString();","staticbyte[]hex2bytes(char[]hex,intoffset,intlength)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicstaticfinalStringTABLE_CANT_RENAME=\"SS-0190\";","publicstaticfinalStringTABLE_CANT_DROP=\"SS-0191\";","publicstaticfinalStringTABLE_CANT_DROP_LOCKED=\"SS-0192\";","publicstaticfinalStringTABLE_CORRUPT_PAGE=\"SS-0193\";","publicstaticfinalStringTABLE_MODIFIED=\"SS-0194\";","publicstaticfinalStringTABLE_DEADLOCK=\"SS-0195\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(rowIdx\>-1){","rowIdx--;","if(rowIdx\>-1&&rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","rowSource.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["staticfinalintSQL_SMALLINT=1362;","staticfinalintSQL_TIME=1363;","staticfinalintSQL_TIMESTAMP=1364;","staticfinalintSQL_TINYINT=1365;","staticfinalintSQL_VARBINARY=1366;","staticfinalintSQL_VARCHAR=1367;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intlength=value.length;","char[]puffer=newchar[length];","for(inti=0;i\<length;i++){","puffer[i]=(char)(value[i]&0xFF);","returnpuffer;","finalstaticprivatechar[]numericToBinarySortOrder(MutableNumericnumeric){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["chars[20]=digits[(daten[offset+8])&0x0F];","chars[21]=digits[(daten[offset+9]\>\>4)&0x0F];","chars[22]=digits[(daten[offset+9])&0x0F];","chars[24]=digits[(daten[offset+10]\>\>4)&0x0F];","chars[25]=digits[(daten[offset+10])&0x0F];","chars[26]=digits[(daten[offset+11]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicbooleangetBoolean(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getBoolean();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["addKeyWord(\"IDENTITY\",IDENTITY);","addKeyWord(\"INNER\",INNER);","addKeyWord(\"JOIN\",JOIN);","addKeyWord(\"ON\",ON);","addKeyWord(\"OUTER\",OUTER);","addKeyWord(\"FULL\",FULL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(token==null){","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["column.setPrecision(baseExpression.getPrecision());","column.setScale(baseExpression.getScale());","break;","default:","column.setPrecision(origExpression.getPrecision());","column.setScale(origExpression.getScale());"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["ForeignKeyforeignKey=newForeignKey(pk,pkIndex,tableName,index);","cmdCreate.addForeingnKey(foreignKey);","}else{","cmdCreate.addIndex(index);","token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintRIGHT=1116;","staticfinalintRTRIM=1117;","staticfinalintSOUNDEX=1118;","staticfinalintSPACE=1119;","staticfinalintSUBSTRING=1120;","staticfinalintTRIM=1121;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["dir.delete();","break;","caseSQLTokenizer.TABLE:","Database.dropTable(con,catalog,name);","break;","caseSQLTokenizer.VIEW:"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["addInternalExpressionFromSelect(params[p]);","return-1;","finalprivatevoidpatchExpressions(Expressionsexprs)throwsSQLException{","if(exprs==null)return;","for(inti=0;i\<exprs.size();i++){","exprs.set(i,patchExpression(exprs.get(i)));"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnDateTime.calcMillis(details2);","default:thrownewError();","floatgetFloat()throwsException{","returngetLong();","doublegetDouble()throwsException{","returngetLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["octet=(int)(value\>\>shift)&0xFFFF;","firstNode=false;","if(shift!=0)offset+=pointerSize;","shift-=16;","finalvoidremove(longvalue)throwsSQLException{","if(size==0)return;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["}else","returnnewInteger(value);","staticfinalShortgetShort(intvalue){","if(value\>=-4&&value\<256){","returnshortCache[value+4];","}else"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicstaticfinalStringVALUE_BIN_TOOLARGE=\"SS-0311\";","publicstaticfinalStringVALUE_NULL_INVALID=\"SS-0312\";","publicstaticfinalStringVALUE_CANT_CONVERT=\"SS-0313\";","publicstaticfinalStringBYTEARR_INVALID_SIZE=\"SS-0340\";","publicstaticfinalStringLOB_DELETED=\"SS-0341\";","publicstaticfinalStringPARAM_CLASS_UNKNOWN=\"SS-0370\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returntrue;","publicbooleansupportsANSI92EntryLevelSQL(){","returntrue;","publicbooleansupportsANSI92IntermediateSQL(){","returntrue;","publicbooleansupportsANSI92FullSQL(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["addKeyWord(\"HH\",SQL_TSI_HOUR);","addKeyWord(\"SQL_TSI_HOUR\",SQL_TSI_HOUR);","addKeyWord(\"DD\",SQL_TSI_DAY);","addKeyWord(\"SQL_TSI_DAY\",SQL_TSI_DAY);","addKeyWord(\"WK\",SQL_TSI_WEEK);","addKeyWord(\"WW\",SQL_TSI_WEEK);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["abstractStringgetString(intcolIdx)throwsException;","abstractbyte[]getBytes(intcolIdx)throwsException;","abstractintgetDataType(intcolIdx);","booleaninit(SSConnectioncon)throwsException{returnfalse;}","StringgetAlias(){returnnull;}","abstractTableViewgetTableView();"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["default:","thrownewError();","privateCommandSetsetTransaction()throwsSQLException{","SQLTokentoken=nextToken(MISSING_ISOLATION);","token=nextToken(MISSING_LEVEL);","token=nextToken(COMMANDS_TRANS_LEVEL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["writeInt((int)(datetime/60000));","longreadSmallDateTime(){","returnreadInt()*60000L;","voidwriteString(StringstrDaten)throwsSQLException{","writeString(strDaten,Short.MAX_VALUE,true);","voidwriteString(StringstrDaten,intlengthColumn,booleanvarchar)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{DB_NOT_DIRECTORY,\"01000\"},","{DB_NOTCONNECTED,\"01000\"},","{CONNECTION_CLOSED,\"01000\"},","{VIEW_INSERT,\"01000\"},","{VIEWDROP_NOT_VIEW,\"01000\"},","{VIEW_CANTDROP,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(idx\>=0){","valueExpress=cmdSel.columnExpressions.get(idx);","}else{","valueExpress=column.getDefaultValue(con);","if(needGeneratedKeys&&generatedKeysType==0&&valueExpress!=Expression.NULL){","keyColumnNames.add(column.getName());"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["publicstaticfinalStringSTXADD_JOIN_INVALID=\"SS-0619\";","publicstaticfinalStringSTXADD_FROM_PAR_CLOSE=\"SS-0620\";","publicstaticfinalStringSTXADD_KEYS_REQUIRED=\"SS-0621\";","publicstaticfinalStringSTXADD_NOT_NUMBER=\"SS-0622\";","publicstaticfinalStringSTXADD_COMMENT_OPEN=\"SS-0623\";","privateMapmessages;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["staticfinalintASCII=1100;//firststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","staticfinalintBITLEN=1101;","staticfinalintCHARLEN=1102;","staticfinalintCHARACTLEN=1103;","staticfinalint_CHAR=1104;","staticfinalintCONCAT=1105;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{DAYS_TOOLARGE,\"01000\"},","{HOURS_TOOLARGE,\"01000\"},","{MINUTES_TOOLARGE,\"01000\"},","{SECS_TOOLARGE,\"01000\"},","{MILLIS_TOOLARGE,\"01000\"},","{DATETIME_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["charc=value[i];","puffer[offset++]=(byte)(c\>\>8);","puffer[offset++]=(byte)(c);","voidwriteBytes(byte[]value,intoff,intlength){","verifyFreePufferSize(length);","System.arraycopy(value,off,puffer,offset,length);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["finalintmonth;","finalintday;","finalinthour;","finalintminute;","finalintsecond;","finalintmillis;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["database=Database.getDatabase(catalog,this,false);","publicStringgetCatalog(){","if(database==null)","return\"\";","returndatabase.getName();","publicvoidsetTransactionIsolation(intlevel)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnnewExpressionArithmetic(expr,ExpressionArithmetic.NEGATIVE);","returnexpr;","returnnull;","ExpressionFunctionCasecaseExpr(finalCommandcmd)throwsSQLException{","ExpressionFunctionCaseexpr=newExpressionFunctionCase();","SQLTokentoken=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["page=add(page,rowOffset,expr.getInt(),isLastValues,1);","break;","caseSQLTokenizer.SMALLINT:","page=add(page,rowOffset,shortToBinarySortOrder(expr.getInt()),isLastValues,1);","break;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["tokens.add(newSQLToken(value,tokenStart,sql.length));","returntokens;","staticprivatevoidaddKeyWord(Stringkeyword,intvalue){","keywords.put(Utils.getInteger(value),keyword);","char[]letters=keyword.toCharArray();","if(searchTree==null){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","page=add(page,rowOffset,doubleToBinarySortOrder(expr.getDouble()),isLastValues,4);","break;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["idx1=idx2+1;","idx2=datetime.indexOf(\'-\',idx1);","month=Integer.parseInt(datetime.substring(idx1,idx2).trim())-1;","idx1=idx2+1;","idx2=datetime.indexOf(\'\',idx1);","if(idx2\<0)idx2=datetime.length();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken=nextToken(MISSING_SET);","while(true){","token=nextToken();","Expressiondest=expressionSingle(cmd,token);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["currentDS=dataSources.get(0);","booleaninit(SSConnectioncon)throwsException{","booleanresult=false;","intcolCount=-1;","for(inti=0;i\<dataSources.size();i++){","DataSourceds=dataSources.get(i);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(oldIsCurrentRow||isCurrentRow)row++;","returnisCurrentRow;","finalbooleanlast()throwsException{","while(next()){/*scrollaftertheend*/}","returnprevious();","finalvoidafterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["case5://italianodd-mm-yy","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","classStorePageLink{","longfilePos;","TableStorePagepage;","StoreImplgetStore(Tabletable,SSConnectioncon,intlock)throwsException{","TableStorePagepage=this.page;"]": ["|project://smallsql/src/smallsql/database/StorePageLink.java|"],
"["returncolIdx;","finalColumngetColumn(){","returncolumn;","finalpublicStringtoString(){","if(tableAlias==null)returnString.valueOf(getAlias());","returntableAlias+\".\"+getAlias();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["row++;","if(n)returntrue;","while(dataSources.size()\>dataSourceIdx+1){","currentDS=dataSources.get(++dataSourceIdx);","currentDS.beforeFirst();","n=currentDS.next();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["break;","caseSQLTokenizer.TIME:","time%=86400000;","break;","caseSQLTokenizer.DATE:","intmillis=(int)(time%86400000);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalintgetDataType(){","returndataType;","StringgetTableName(){","returnnull;","finalintgetPrecision(){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["elseif(value\>Integer.MAX_VALUE)returnInteger.MAX_VALUE;","elsereturn(int)value;","staticbyte[]int2bytes(intvalue){","byte[]result=newbyte[4];","result[0]=(byte)(value\>\>24);","result[1]=(byte)(value\>\>16);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["TableStorePage(SSConnectioncon,Tabletable,intlockType,longfileOffset){","super(null,0,table.raFile,fileOffset);","this.con=con;","this.table=table;","this.lockType=lockType;","byte[]getData(){"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["return(int)getDouble();","finallonggetLong()throwsException{","return(long)getDouble();","finalfloatgetFloat()throwsException{","return(float)getDouble();","longgetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["byte[]getBytes()throwsException{","returngetBytes(getObject(),dataType);","staticbyte[]getBytes(Objectobj,intdataType)throwsException{","if(obj==null)returnnull;","switch(dataType){","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["for(;v\<=last;v++){","intval=(signum\>0)?value[v]:(v==last)?-value[v]:~value[v];","complement[offset++]=(byte)(val\>\>24);","complement[offset++]=(byte)(val\>\>16);","complement[offset++]=(byte)(val\>\>8);","complement[offset++]=(byte)(val);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["packagesmallsql.database;","importsmallsql.database.language.Language;","classScrollableextendsRowSource{","privateintrowIdx;","Scrollable(RowSourcerowSource){","this.rowSource=rowSource;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["publicbooleanothersDeletesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersInsertsAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanupdatesAreDetected(inttype){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnnewShort((short)value);","staticfinalFileChannelopenRaFile(Filefile,booleanreadonly)throwsFileNotFoundException,SQLException{","RandomAccessFileraFile=newRandomAccessFile(file,readonly?\"r\":\"rw\");","FileChannelchannel=raFile.getChannel();","if(!readonly){","try{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["return(int)readFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(int)readDouble();","caseSQLTokenizer.MONEY:","longlongValue=readLong()/10000;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["writeDouble(expr.getDouble());","break;","caseSQLTokenizer.MONEY:","writeLong(expr.getMoney());","break;","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnexpr;","default:","thrownewError();","token=nextToken(MISSING_WHEN_ELSE_END);","privateExpressionfunction(Commandcmd,SQLTokentoken,booleanisEscape)throwsSQLException{","Expressionexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["nextToken(MISSING_SELECT);","union.addDataSource(newViewResult(con,singleSelect()));","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.ORDER){","order(selCmd);","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntrue;","publicStringgetIdentifierQuoteString(){","return\"\\\"\";","publicStringgetSQLKeywords(){","return\"database,use\";","privateStringgetFunctions(intfrom,intto){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(params.length==1){","return;","setParamAt(convertExpressionIfNeeded(params[0],params[1]),0);","for(intp=1;p\<params.length;p++){","setParamAt(convertExpressionIfNeeded(params[p],left),p);","privatestaticStringgetKeywordFromOperation(intoperation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintNONCLUSTERED=256;","staticfinalintREFERENCES=257;","staticfinalintUNION=260;","staticfinalintALL=261;","staticfinalintDISTINCT=262;","staticfinalintCASE=263;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnvalue;","finalprivatevoidwritePointer(intvalue){","for(inti=pointerSize-1;i\>=0;i--){","data[offset++]=(byte)(value\>\>(i*8));","finalprivateintgetUnsignedShort(){","return((data[offset++]&0xFF)\<\<8)|(data[offset++]&0xFF);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicbooleannullsAreSortedAtEnd(){","returnfalse;","publicStringgetDatabaseProductName(){","return\"SmallSQLDatabase\";","publicStringgetDatabaseProductVersion(){","returngetDriverVersion();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(bytes.length\<=length)returnbytes;","byte[]b=newbyte[length];","System.arraycopy(bytes,0,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["addKeyWord(\"GETDATE\",NOW);//aliasforMSSQLServer","addKeyWord(\"NOW\",NOW);","addKeyWord(\"QUARTER\",QUARTER);","addKeyWord(\"SECOND\",SECOND);","addKeyWord(\"DATEADD\",TIMESTAMPADD);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPADD\",TIMESTAMPADD);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(param1.getBoolean())","returnparam2.getNumeric();","returnparam3.getNumeric();","ObjectgetObject()throwsException{","if(param1.getBoolean())","returnparam2.getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["caseSQLTokenizer.DATE:","intmillis=(int)(time%86400000);","if(millis\<0)","millis+=86400000;","time-=millis;","break;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(colCount==-1)","colCount=nextColCount;","else","if(colCount!=nextColCount)","throwSmallSQLException.create(Language.UNION_DIFFERENT_COLS,newObject[]{newInteger(colCount),newInteger(nextColCount)});","returnresult;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["data[offset++]=(byte)(value\>\>(i*8));","finalprivateintgetUnsignedShort(){","return((data[offset++]&0xFF)\<\<8)|(data[offset++]&0xFF);","finalprivatevoidwriteShort(intvalue){","data[offset++]=(byte)(value\>\>8);","data[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionModextendsExpressionFunctionReturnInt{","finalintgetFunction(){returnSQLTokenizer.MOD;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionMod.java|"],
"["}finally{","tableLock.freeLock();","break;","default:","thrownewError();","privatevoidaddColumn(Columnscols,Columncolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["publicstaticvoidmain(String[]args)throwsException{","System.out.println(\"SmallSQLDatabasecommandlinetool\\n\");","Connectioncon=newSSDriver().connect(\"jdbc:smallsql\",newProperties());","Statementst=con.createStatement();","if(args.length\>0){","con.setCatalog(args[0]);"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["publicStringgetUserName(){","return\"\";","publicbooleanisReadOnly(){","returnfalse;","publicbooleannullsAreSortedHigh(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returntrue;","returnfalse;","publicintisNullable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isNullable()?columnNullable:columnNoNulls;","publicbooleanisSigned(intcolumn)throwsSQLException{","returnisSignedDataType(getColumnExpression(column).getDataType());"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{GROUP_AGGR_INVALID,\"AggregatefunctionarenotvalidintheGROUPBYclause({0}).\"},","{GROUP_AGGR_NOTPART,\"Expression\'\'{0}\'\'isnotpartofaaggregatefunctionorGROUPBYclause.\"},","{ORDERBY_INTERNAL,\"InternalErrorwithORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DifferentSELECToftheUNIONhavedifferentcolumncount:{0}and{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'alreadyexists.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'doesnotexist.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["intresult=0;","intlength=Math.min(4,bytes.length);","for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;","staticbyte[]double2bytes(doublevalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{INDEX_FILE_INVALID,\"01000\"},","{INDEX_CORRUPT,\"01000\"},","{INDEX_TOOMANY_EQUALS,\"01000\"},","{FILE_TOONEW,\"01000\"},","{FILE_TOOOLD,\"01000\"},","{FILE_CANT_DELETE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["return\"java.lang.Boolean\";","caseTypes.BINARY:","caseTypes.VARBINARY:","caseTypes.LONGVARBINARY:","return\"[B\";","caseTypes.BLOB:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["writePointer(size);","correctPointers(0,oldOffset,2+pointerSize,0);","data[size++]=(byte)0;","data[size++]=(byte)0;","returnsize-2;","finalprivatevoidinsertNodeLastLevel(intoctet)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));","buffer.write(bytes,start+length,bytes.length-start-length);","returnbuffer.toByteArray();","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionExp();","break;","caseSQLTokenizer.FLOOR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionFloor();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnreadBinary();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","byte[]bytes=newbyte[1];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["prev.nextLock=lock.nextLock;","return;","prev=lock;","lock=lock.nextLock;","break;","caseLOCK_READ:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returncurrentDS.rowInserted();","finalbooleanrowDeleted(){","returncurrentDS.rowDeleted();","finalvoidnullRow(){","currentDS.nullRow();","row=0;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["token=nextToken(MISSING_EXPRESSION);","as=true;","if(as||(!isKeyword(token))){","Stringalias=getIdentifier(token);","column.setAlias(alias);","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowPositions.add(left.getRowPosition(),right.getRowPosition());","returnrowPositions.size()-1;","finalvoidsetRowPosition(longrowPosition)throwsException{","left.setRowPosition(rowPositions.get1((int)rowPosition));","right.setRowPosition(rowPositions.get2((int)rowPosition));","finalbooleanrowInserted(){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(intValue\<0)","return-1;","if(intValue\>0)","return1;","return0;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["staticfinalintRAW=312;","staticfinalintLONGVARBINARY=313;","staticfinalintBLOB=316;","staticfinalintTINYINT=321;","staticfinalintSMALLINT=322;","staticfinalintINT=323;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Stringname=token.getName(sql);","checkValidIdentifier(name,token);","CommandSetset=newCommandSet(con.log,SQLTokenizer.USE);","set.name=name;","returnset;","caseSQLTokenizer.EXECUTE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["output.writeByte(0);","}else","if(valueinstanceofLong){","output.writeByte(1);","output.writeLong(((Long)value).longValue());","}else"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["publicfloatfloatValue(){","returnvalue;","@Override","publicdoubledoubleValue(){","returnvalue;","@Override"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["if(lock.con!=con)returnnull;","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con!=con)returnnull;","if(serializeConnections.size()\>0){","Iteratorvalues=locks.values().iterator();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(ForeignKeyforeignKey){","if(size\>=data.length){","resize(size\<\<1);"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["byte[]getBytes(intcolIdx)throwsException{","returnget(colIdx).getBytes();","intgetDataType(intcolIdx){","returncolumns.get(colIdx).getDataType();","finalTableViewgetTableView(){","returnnull;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.NONCLUSTERED:","caseSQLTokenizer.CLUSTERED:","continue;","default:","throwcreateSyntaxError(token,COMMANDS_CREATE);","privateCommandCreateDatabasecreateDatabase()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(rowIdx+1\<rowList.size()){","rowIdx=rowList.size()-1;","rowSource.setRowPosition(rowList.get(rowIdx));","while(next()){/*scrollaftertheend*/}","booleanabsolute(introw)throwsException{","if(row==0)"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["staticObject[][]getCatalogs(Databasedatabase){","Listcatalogs=newArrayList();","FilebaseDir=(database!=null)?","database.directory.getParentFile():","newFile(\".\");","Filedirs[]=baseDir.listFiles();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["params[i]=elseResult;","super.setParams(params);","finalvoidsetParams(Expression[]params){","super.setParams(params);","inti=0;","for(intp=0;p\<cases.size();p++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["finaldoublegetDouble(intcolIdx)throwsException{","returnstore.getDouble(offsets[colIdx],dataTypes[colIdx]);","@Override","finallonggetMoney(intcolIdx)throwsException{","returnstore.getMoney(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["addKeyWord(\"EXECUTE\",EXECUTE);","addKeyWord(\"FROM\",FROM);","addKeyWord(\"WHERE\",WHERE);","addKeyWord(\"GROUP\",GROUP);","addKeyWord(\"BY\",BY);","addKeyWord(\"HAVING\",HAVING);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["sqlStates=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","addMessages(MESSAGES);","setSqlStates();","protectedfinalvoidaddMessages(String[][]entries)","throwsIllegalArgumentException{","Setinserted=newHashSet();//forduplicateschecking"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["page.rollback();","page.freeLock();","commitPages.clear();","transactionTime=System.currentTimeMillis();","publicvoidclose()throwsSQLException{","rollback();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicstaticfinalStringTABLE_CANT_DROP=\"SS-0191\";","publicstaticfinalStringTABLE_CANT_DROP_LOCKED=\"SS-0192\";","publicstaticfinalStringTABLE_CORRUPT_PAGE=\"SS-0193\";","publicstaticfinalStringTABLE_MODIFIED=\"SS-0194\";","publicstaticfinalStringTABLE_DEADLOCK=\"SS-0195\";","publicstaticfinalStringTABLE_OR_VIEW_MISSING=\"SS-0196\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.*;","importjava.util.ArrayList;","importjava.util.HashMap;","importjava.util.Iterator;","importjava.util.List;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicTimegetTime(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["try{","byte[]bytes=newbyte[length/2];","for(inti=0;i\<bytes.length;i++){","bytes[i]=(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));","returnbytes;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["idx2=datetime.indexOf(\'-\',idx1);","month=Integer.parseInt(datetime.substring(idx1,idx2).trim())-1;","idx1=idx2+1;","idx2=datetime.indexOf(\'\',idx1);","if(idx2\<0)idx2=datetime.length();","day=Integer.parseInt(datetime.substring(idx1,idx2).trim());"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicclassExpressionFunctionSpaceextendsExpressionFunctionReturnString{","finalintgetFunction(){","returnSQLTokenizer.SPACE;","booleanisNull()throwsException{","returnparam1.isNull()||param1.getInt()\<0;","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["if(type==CROSS_JOIN){","returnfalse;","if(type!=INNER_JOIN){","returnfalse;","if(conditioninstanceofExpressionArithmetic){","ExpressionArithmeticcond=(ExpressionArithmetic)condition;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["finalObjectnodeValue;","finalintlevel;","IndexNodeScrollStatus(IndexNodenode,booleanasc,booleanscroll,intlevel){","this.nodes=node.getChildNodes();","nodeValue=node.getValue();","this.asc=asc;"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["ViewResult(Viewview){","this.view=view;","this.columnExpressions=view.commandSelect.columnExpressions;","this.commandSelect=view.commandSelect;","ViewResult(SSConnectioncon,CommandSelectcommandSelect)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["setParams(newExpression[]{p1,p2});","intgetFunction(){","returnSQLTokenizer.TIMESTAMPADD;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["{PARAM_CLASS_UNKNOWN,\"Unknownparameterclass:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}isempty.\"},","{PARAM_IDX_OUT_RANGE,\"Parameterindex{0}outofrange.Thevaluemustbebetween1and{1}.\"},","{COL_DUPLICATE,\"Thereisaduplicatedcolumnname:\'\'{0}\'\'.\"},","{COL_MISSING,\"Column\'\'{0}\'\'notfound.\"},","{COL_VAL_UNMATCH,\"ColumnsandValuescountisnotidentical.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["voidsetRowPosition(longrowPosition)throwsException{","commandSelect.from.setRowPosition(rowPosition);","finalbooleanrowInserted(){","returncommandSelect.from.rowInserted();","finalbooleanrowDeleted(){","returncommandSelect.from.rowDeleted();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["System.out.print(\'\\t\');","System.out.println();","while(rs.next()){","for(inti=1;i\<=count;i++){","System.out.print(rs.getObject(i));","System.out.print(\'\\t\');"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["publicvoidsetObject(StringparameterName,Objectx,intsqlType)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType);","publicvoidsetObject(StringparameterName,Objectx)throwsSQLException{","setObject(findParameter(parameterName),x);","publicvoidsetCharacterStream(StringparameterName,Readerx,intlength)throwsSQLException{","setCharacterStream(findParameter(parameterName),x,length);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(k==i){//pointisfirstcharacter","if(sql.length\>k+1){","charcc=sql[k+1];","if((cc\>=\'0\')&&cc\<=\'9\')break;//isanumber--\>break","}else{","for(;k\<i;k++){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseGRE_EQU:returncomp\>=0;","caseLESSER:returncomp\<0;","caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=String.CASE_INSENSITIVE_ORDER.compare(leftStr,right2.getString());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_VIEW);","buffer.putInt(TABLE_VIEW_VERSION);","buffer.position(0);","raFile.write(buffer);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","return((Number)obj).intValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.SPACE;","booleanisNull()throwsException{","returnparam1.isNull()||param1.getInt()\<0;","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["CommandSelectcmdSel=select();","leftExpr=newExpressionInSelect(con,leftExpr,cmdSel,operation);","nextToken(MISSING_PARENTHESIS_R);","}else{","previousToken();","Expressionslist=expressionParenthesisList(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;","caseSQLTokenizer.FN://functionescapesequence","nextToken(MISSING_PARENTHESIS_L);","expr=function(cmd,para,true);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["char[]chars=daten.toCharArray();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,chars.length*2L+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(chars.length);","store.writeChars(chars);","writeLong(store.writeFinsh(null));","StringreadLongString()throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["java.sql.DriverManager.registerDriver(drv);","}catch(Throwablee){","e.printStackTrace();","publicConnectionconnect(Stringurl,Propertiesinfo)throwsSQLException{","if(!acceptsURL(url)){","returnnull;"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["publicStringgetCatalogSeparator(){","return\".\";","publicbooleansupportsSchemasInDataManipulation(){","returnfalse;","publicbooleansupportsSchemasInProcedureCalls(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}catch(NumberFormatExceptione){","returnnewExpressionValue(newLong(tok),SQLTokenizer.BIGINT);","}else{","checkValidIdentifier(tok,token);","ExpressionNameexpr=newExpressionName(tok);","if(token2!=null&&token2.value==SQLTokenizer.POINT){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatevoidwrite(SSConnectioncon)throwsException{","raFile=createFile(con,database);","firstPage=8;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.CREATE);","intcount=columns.size();","store.writeInt(count);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["this.params=params;","voidsetParamAt(Expressionparam,intidx){","params[idx]=param;","finalExpression[]getParams(){returnparams;}","voidoptimize()throwsSQLException{","if(params!=null){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["nextToken(MISSING_COMMA);","col=datatype(isEscape);","}else{","col=datatype(isEscape);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti)throwsSQLException{","try{","MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["ColumnsoldColumns=oldTable.columns;","ColumnsnewColumns=oldColumns.copy();","for(inti=0;i\<columns.size();i++){","addColumn(newColumns,columns.get(i));","TablenewTable=database.createTable(con,newName,newColumns,oldTable.indexes,indexes,foreignKeys);","StringBufferbuffer=newStringBuffer(256);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["intd=(int)(datetime/86400000);","if(t\<0){","t+=86400000;","d--;","intmillis=t%1000;","t/=1000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returngetFunctions(SQLTokenizer.CURDATE,SQLTokenizer.YEAR);","publicStringgetSearchStringEscape(){","return\"\\\\\";","publicStringgetExtraNameCharacters(){","return\"#$Ã€Ã\ufffdÃ‚ÃƒÃ„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹ÃŒÃ\ufffdÃŽÃ\ufffdÃ\ufffdÃ‘Ã’Ã“Ã”Ã•Ã–Ã˜Ã™ÃšÃ›ÃœÃ\ufffdÃžÃŸÃ\u00a0Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿\";","publicbooleansupportsAlterTableWithAddColumn(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?10000:0;","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.ISOLATION_UNKNOWN,String.valueOf(level));","isolationLevel=level;","publicintgetTransactionIsolation(){","returnisolationLevel;","publicSQLWarninggetWarnings(){","returnnull;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["privateintscale;","privateintprecision;","privateintdataType;","privateIdentitycounter;//counterforidentityvalues","voidsetName(Stringname){","this.name=name;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["finalvoidbeforeFirst(){","rowPos=0;","finalbooleanisBeforeFirst(){","returnrowPos\<=0;","finalbooleanisFirst(){","returnrowPos==1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["publicvoidsetBoolean(intparameterIndex,booleanx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x?Boolean.TRUE:Boolean.FALSE,SQLTokenizer.BOOLEAN);","publicvoidsetByte(intparameterIndex,bytex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.TINYINT);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["publicbyte[]getBytes(StringcolumnName)throwsSQLException{","returngetBytes(findColumn(columnName));","publicDategetDate(StringcolumnName)throwsSQLException{","returngetDate(findColumn(columnName));","publicTimegetTime(StringcolumnName)throwsSQLException{","returngetTime(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finallonggetRowPosition(){","returnrowIdx;","finalvoidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;","move();","finalbooleanrowInserted(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["Object[][]data=con.getDatabase(false).getBestRowIdentifier(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetVersionColumns(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["col.setPrecision(displaySize);","break;","caseSQLTokenizer.SYSNAME:","col.setPrecision(255);","dataType=SQLTokenizer.VARCHAR;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntrue;","rowSource.noRow();","row=(getRowCount()\>0)?getRowCount()+1:0;","returnfalse;","booleanlast()throwsException{","afterLast();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["booleanisNull(){","returngetObject()==null;","booleangetBoolean()throwsException{","returngetBoolean(getObject(),dataType);","staticbooleangetBoolean(Objectobj,intdataType)throwsException{","if(obj==null)returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["StringgetString(intoffset,intdataType)throwsException{","thrownoCurrentRow();","voidscanObjectOffsets(int[]offsets,int[]dataTypes){","intgetUsedSize(){","return0;","longgetNextPagePos(){"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["try{","this.view=newView(con,commandSelect);","this.columnExpressions=commandSelect.columnExpressions;","this.commandSelect=commandSelect;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returnstore;","privatefinalvoidreadPageHeader()throwsSQLException{","if(readInt()!=PAGE_MAGIC){","throwSmallSQLException.create(Language.TABLE_CORRUPT_PAGE,newObject[]{newLong(filePos)});","status=readInt();","sizeUsed=readInt();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["SQLTokenizer.TIME,","SQLTokenizer.DOUBLE,","SQLTokenizer.FLOAT,","SQLTokenizer.REAL,","SQLTokenizer.DECIMAL,","SQLTokenizer.NUMERIC,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType+\";length=\"+length);","finalvoidexecute(SSConnectioncon,SSStatementst)throwsSQLException{","intsavepoint=con.getSavepoint();","try{","executeImpl(con,st);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["column.setDefaultValue(newSQLParser().parseExpression(def),def);","returncolumn;","voidcopyValueFrom(StoreImplstore,intvalueOffset,intlength){","System.arraycopy(store.page,valueOffset,this.page,this.offset,length);","this.offset+=length;","voidwriteExpression(Expressionexpr,Columncolumn)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(super.init(con)){","Columnscolumns=table.columns;","offsets=newint[columns.size()];","dataTypes=newint[columns.size()];","for(inti=0;i\<columns.size();i++){","dataTypes[i]=columns.get(i).getDataType();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["addKeyWord(\"REAL\",REAL);","addKeyWord(\"FLOAT\",FLOAT);","addKeyWord(\"DOUBLE\",DOUBLE);","addKeyWord(\"DATE\",DATE);","addKeyWord(\"TIME\",TIME);","addKeyWord(\"DATETIME\",TIMESTAMP);//aliasforMSSQLServerdatatypeDATETIME"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{SUBSTR_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringvaluetoolargeforcolumn.\"},","{VALUE_BIN_TOOLARGE,\"Binaryvaluewithlength{0}tolargeforcolumnwithsize{1}.\"},","{VALUE_NULL_INVALID,\"Nullvaluesarenotvalidforcolumn\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Cannotconverta{0}valuetoa{1}value.\"},","{BYTEARR_INVALID_SIZE,\"Invalidbytearraysize{0}forUNIQUEIDENFIER.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["rollback();","database=null;","commitPages=null;","Database.closeConnection(this);","finalvoidtestClosedConnection()throwsSQLException{","if(isClosed())throwSmallSQLException.create(Language.CONNECTION_CLOSED);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["Objectv=((ExpressionValue)expr).value;","if(v==value)returntrue;","if(value==null)returnfalse;","returnvalue.equals(v);","voidaccumulate(Expressionexpr)throwsException{","inttype=getType();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.PERCENT:returnMOD;","caseSQLTokenizer.EQUALS:returnEQUALS;","caseSQLTokenizer.GREATER:returnGREATER;","caseSQLTokenizer.GREATER_EQU:returnGRE_EQU;","caseSQLTokenizer.LESSER:returnLESSER;","caseSQLTokenizer.LESSER_EQU:returnLES_EQU;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["rowSource.execute();","index=newIndex(true);","finalbooleanisScrollable(){","returnfalse;","finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["if(value==null||pattern==null)returnfalse;","if(pattern.length()==0)returntrue;","intmIdx=0;//indexinmaskArray","intsIdx=0;//indexinsearchArray","booleanrange=false;","weiter:"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["Expressionscolumns;","publicintgetColumnCount()throwsSQLException{","returncolumns.size();","publicbooleanisAutoIncrement(intcolumn)throwsSQLException{","returngetColumnExpression(column).isAutoIncrement();","publicbooleanisCaseSensitive(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["staticfinalintOR=11;//OR","staticfinalintAND=21;//AND","staticfinalintNOT=31;//NOT","staticfinalintBIT_OR=41;//|","staticfinalintBIT_AND=42;//&","staticfinalintBIT_XOR=43;//^"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.compare=compare;","createIndex(rightEx);","privatevoidcreateIndex(ExpressionsrightEx)throwsException{","index=newIndex(false);","right.beforeFirst();","while(right.next()){"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["else","if(newValueinstanceofByte)","this.dataType=SQLTokenizer.TINYINT;","else","if(newValueinstanceofShort)","this.dataType=SQLTokenizer.SMALLINT;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnpage[offset++]!=0;","voidwriteShort(intvalue){","intnewSize=offset+2;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{COL_DUPLICATE,\"Thereisaduplicatedcolumnname:\'\'{0}\'\'.\"},","{COL_MISSING,\"Column\'\'{0}\'\'notfound.\"},","{COL_VAL_UNMATCH,\"ColumnsandValuescountisnotidentical.\"},","{COL_INVALID_SIZE,\"Invalidcolumnsize{0}forcolumn\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Thecolumnprefix\'\'{0}\'\'doesnotmatchwithatablenameoraliasnameusedinthisquery.\"},","{COL_READONLY,\"Column{0}isreadonly.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returntrue;","finalbooleangetBoolean(intoffset,intdataType)throwsException{","returnfalse;","finalbyte[]getBytes(intoffset,intdataType)throwsException{","returnnull;","finaldoublegetDouble(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["rollback(savepoint.getSavepointId());","return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,savepoint);","publicvoidreleaseSavepoint(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){","((SSSavepoint)savepoint).transactionTime=0;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["Commandcmd=parse(sqlString.toCharArray());","SQLTokentoken=nextToken();","if(token!=null){","throwcreateSyntaxError(token,Language.STXADD_ADDITIONAL_TOK);","returncmd;","finalprivateCommandparse(char[]sql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatefinalstaticvoidformatMillis(intmillis,StringBufferbuf){","buf.append(Utils.digits[(millis/100)%10]);","intvalue=millis%100;","if(value!=0){","buf.append(Utils.digits[value/10]);","value%=10;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintLENGTH=1110;","staticfinalintLOCATE=1111;","staticfinalintLTRIM=1112;","staticfinalintOCTETLEN=1113;","staticfinalintREPEAT=1114;","staticfinalintREPLACE=1115;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["offset=getPointer();","shift-=16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack]=result;","firstNode=true;","}else{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnbuf.toString();","case104://germandd.mm.yyyy","formatNumber(details.day,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionSpaceextendsExpressionFunctionReturnString{","finalintgetFunction(){","returnSQLTokenizer.SPACE;","booleanisNull()throwsException{","returnparam1.isNull()||param1.getInt()\<0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["results.set(p,params[i++]);","if(i\<params.length)","elseResult=params[i];","voidsetParamAt(Expressionparam,intidx){","super.setParamAt(param,idx);","intp=idx/2;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["default:thrownewError();","voidsetFrom(DataSourcefromEntry,intcolIdx,TableViewtable){","this.fromEntry=fromEntry;","this.colIdx=colIdx;","this.table=table;","this.column=table.columns.get(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getLong());","ObjectgetObject()throwsException{","if(isNull())returnnull;","returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["signum=-signum;","intvalueLength=value.length;","longcarryover=0;","for(inti=0;i\<valueLength;i++){","longv=(value[i]&0xFFFFFFFFL)+carryover;","value[i]=(int)(v/quotient);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returntoken;","caseSQLTokenizer.DEFAULT:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","intoffset=token.offset+token.length;","token=nextToken();","if(token!=null)offset=token.offset;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(token.value!=SQLTokenizer.PARENTHESIS_L)throwcreateSyntaxError(token,MISSING_PARENTHESIS_L);","Loop:","while(true){","intoffset=token.offset+token.length;","token=nextToken();","if(token!=null)offset=token.offset;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicString[][]getEntries(){","returnMESSAGES;","privatefinalString[][]MESSAGES={","{CUSTOM_MESSAGE,\"{0}\"},","{UNSUPPORTED_OPERATION,\"UnsupportedOperation{0}.\"},","{CANT_LOCK_FILE,\"Can\'\'tlockfile\'\'{0}\'\'.AsingleSmallSQLDatabasecanonlybeopenedfromasingleprocess.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode){","Stringmessage=getErrorString(token,addMessageCode,null);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode,","Objectparam0){","Stringmessage=getErrorString(token,addMessageCode,param0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatedoublegetDoubleImpl()throwsjava.lang.Exception{","if(operation==NEGATIVE)","returngetDoubleImpl(0,left.getDouble());","returngetDoubleImpl(left.getDouble(),right.getDouble());","privatedoublegetDoubleImpl(doublelVal,doublerVal)throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["packagesmallsql.database;","importjava.io.File;","importjava.io.FileNotFoundException;","importjava.io.RandomAccessFile;","importjava.nio.channels.FileChannel;","importjava.nio.channels.FileLock;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["Entrye=table[i];","while(true){","if(e==null)","returnnull;","if(e.key==key)","returne.value;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["publicbooleansupportsOpenStatementsAcrossRollback(){","returntrue;","publicintgetMaxBinaryLiteralLength(){","return0;","publicintgetMaxCharLiteralLength(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["token=nextToken(MISSING_EXPRESSION);","Stringname=token.getName(sql);","checkValidIdentifier(name,token);","CommandSetset=newCommandSet(con.log,SQLTokenizer.USE);","set.name=name;","returnset;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SQL_BIT:dataType=SQLTokenizer.BIT;break;","caseSQLTokenizer.SQL_CHAR:dataType=SQLTokenizer.CHAR;break;","caseSQLTokenizer.SQL_DATE:dataType=SQLTokenizer.DATE;break;","caseSQLTokenizer.SQL_DECIMAL:dataType=SQLTokenizer.DECIMAL;break;","caseSQLTokenizer.SQL_DOUBLE:dataType=SQLTokenizer.DOUBLE;break;","caseSQLTokenizer.SQL_FLOAT:dataType=SQLTokenizer.FLOAT;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(true){","token=nextToken();","Expressiondest=expressionSingle(cmd,token);","if(dest.getType()!=Expression.NAME)throwcreateSyntaxError(token,MISSING_IDENTIFIER);","nextToken(MISSING_EQUALS);","Expressionsrc=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return\"java.lang.Long\";","caseTypes.DECIMAL:","caseTypes.NUMERIC:","return\"java.math.BigDecimal\";","caseTypes.REAL:","return\"java.lang.Float\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["if(tokenIdx\>=tokens.size()){","tokenIdx++;//mustbeeverincrementthatthemethodpreviousToken()isworking","returnnull;","return(SQLToken)tokens.get(tokenIdx++);","privateSQLTokennextToken(int[]validValues)throwsSQLException{","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticSSDriverdrv;","static{","try{","drv=newSSDriver();","java.sql.DriverManager.registerDriver(drv);","}catch(Throwablee){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["page[offset++]=(byte)(value\>\>40);","page[offset++]=(byte)(value\>\>32);","page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnrowPos;","finalvoidsetRowPosition(longrowPosition){","rowPos=(int)rowPosition;","finalbooleanrowInserted(){","returnfalse;","finalbooleanrowDeleted(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["publicintgetMaxProcedureNameLength(){","return255;","publicintgetMaxCatalogNameLength(){","return255;","publicintgetMaxRowSize(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["buf.append(Utils.digits[(millis/100)%10]);","intvalue=millis%100;","if(value!=0){","buf.append(Utils.digits[value/10]);","value%=10;","if(value!=0)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalbooleangetBoolean(intoffset,intdataType)throwsException{","returnfalse;","finalbyte[]getBytes(intoffset,intdataType)throwsException{","returnnull;","finaldoublegetDouble(intoffset,intdataType)throwsException{","return0;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["((long)(page[2]&0xFF)\<\<40)|","((long)(page[3]&0xFF)\<\<32)|","((long)(page[4]&0xFF)\<\<24)|","((page[5]&0xFF)\<\<16)|","((page[6]&0xFF)\<\<8)|","((page[7]&0xFF));"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["if(data.length\<size+2)resize();","System.arraycopy(data,offset,data,offset+2,size-offset);","size+=2;","writeShort(octet);","correctPointers(0,oldOffset,2,0);","finalprivatevoidremoveNode()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["firstNode=false;","if(shift!=0)offset+=pointerSize;","shift-=16;","finalvoidremove(longvalue)throwsSQLException{","if(size==0)return;","intoffset1=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["SQLTokenizer.NULL};","privatestaticintNVARCHAR_IDX=Utils.indexOf(SQLTokenizer.NVARCHAR,DatatypeRange);","privatestaticintINT_IDX=Utils.indexOf(SQLTokenizer.INT,DatatypeRange);","privatestaticintBIGINT_IDX=Utils.indexOf(SQLTokenizer.BIGINT,DatatypeRange);","privatestaticintMONEY_IDX=Utils.indexOf(SQLTokenizer.MONEY,DatatypeRange);","privatestaticintDECIMAL_IDX=Utils.indexOf(SQLTokenizer.DECIMAL,DatatypeRange);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong()*3;","returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfMonth();","break;","caseSQLTokenizer.DAYOFWEEK:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfWeek();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntableView;","staticvoiddropTable(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropTable(con,tableName);","voiddropTable(SSConnectioncon,StringtableName)throwsException{","synchronized(tableViews){","Tabletable=(Table)tableViews.get(tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnparam2.getLong()+param1.getLong()*3600000;","caseSQLTokenizer.SQL_TSI_DAY:","returnparam2.getLong()+param1.getLong()*86400000;","caseSQLTokenizer.SQL_TSI_WEEK:{","returnparam2.getLong()+param1.getLong()*604800000;","}caseSQLTokenizer.SQL_TSI_MONTH:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["caseUNEQUALS:","caseBETWEEN:","caseOR:","caseAND:","caseNOT:","caseLIKE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["char[]readChars(intlength){","char[]daten=newchar[length];","for(inti=0;i\<length;i++){","daten[i]=(char)((page[offset++]&0xFF)|(page[offset++]\<\<8));","returndaten;","voidwriteLongString(Stringdaten)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Columnscols=tab.columns;","for(intc=0;c\<cols.size();c++){","Columncol=cols.get(c);","Object[]row=newObject[18];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.CASE:","returncaseExpr(cmd);","caseSQLTokenizer.MINUS:","caseSQLTokenizer.PLUS:","do{","if(token.value==SQLTokenizer.MINUS)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["indexes.get(i).writeFinish(con);","updateCount++;","if(needGeneratedKeys){","Object[][]data=newObject[1][keys.size()];","keys.toArray(data[0]);","st.setGeneratedKeys(newSSResultSet(st,Utils.createMemoryCommandSelect(con,keyColumnNames.toArray(),data)));"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returnMoney.createFromUnscaledValue(readInt());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["nextPageOffset=readInt();","filePosUpdated=readLong();","finalprivateStoreImplloadUpdatedStore()throwsException{","if(status!=UPDATE_POINTER)returnthis;","StoreImplstoreTemp=table.getStore(((TableStorePage)storePage).con,filePosUpdated,type);","storeTemp.updatePointer=this;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","offset+=3;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["synchronized(con.getMonitor()){","((StoreImpl)this.store).createWriteLock();","for(inti=0;i\<count;i++){","Expressionsrc=updateValues[i];","if(src!=null){","newStore.writeExpression(src,tableColumns.get(i));"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["while(lock!=null){","if(lock==storePage){","if(lock==prev){","if(lock.nextLock==null){","locksInsert.remove(i--);","}else{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintPI=1014;","staticfinalintPOWER=1015;","staticfinalintRADIANS=1016;","staticfinalintRAND=1017;","staticfinalintROUND=1018;","staticfinalintSIGN=1019;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{MILLIS_TOOLARGE,\"MillisecondsaretoolargeinTIMESTAMPvalue\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isaninvalidDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Unsupportedconversiontodatatype\'\'{0}\'\'fromdatatype\'\'{1}\'\'foroperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Unsupporteddatatype\'\'{0}\'\'foroperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Unsupporteddatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Unsupportedconversiontodatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["newRowSources=sources.toArray();","updateCount=0;","from.execute();","for(inti=0;i\<columnExpressions.size();i++){","ExpressionNameexpr=(ExpressionName)columnExpressions.get(i);","DataSourceds=expr.getDataSource();"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["}else{","rowSource.noRow();","row=0;","returnfalse;","booleannext()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["staticfinalintQUARTER=1214;","staticfinalintSECOND=1215;","staticfinalintTIMESTAMPADD=1216;","staticfinalintTIMESTAMPDIFF=1217;","staticfinalintWEEK=1218;","staticfinalintYEAR=1219;//lasttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return((Mutable)obj).getImmutableObject();","returnobj;","abstractStringgetString()throwsException;","abstractbyte[]getBytes()throwsException;","abstractintgetDataType();","finalintgetType(){returntype;}"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["privatefinalFileChannelfile;","privatelongfileOffset;","FileIndexNode(booleanunique,chardigit,FileChannelfile){","super(unique,digit);","this.file=file;","fileOffset=-1;"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["IndexDescriptionpkIndex=newIndexDescription(null,pk,SQLTokenizer.UNIQUE,expressions,columns);","ForeignKeyforeignKey=newForeignKey(pk,pkIndex,tableName,index);","cmdCreate.addForeingnKey(foreignKey);","}else{","cmdCreate.addIndex(index);","token=nextToken(MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionMod();","break;","caseSQLTokenizer.PI:","invalidParamCount=(paramCount!=0);","expr=newExpressionFunctionPI();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatefinalintfindNodeInsertPos(chardigit,intstart,intend){","if(start==end)returnstart;","intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["token=nextToken(COMMANDS_ESCAPE);","SQLTokenpara=nextToken(MISSING_EXPRESSION);","Expressionexpr;","switch(token.value){","caseSQLTokenizer.D://dateescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.DATE),SQLTokenizer.DATE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["synchronized(locks){","ArrayListinserts=newArrayList();","if(con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","inserts.add(lock.getLink());"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["offset=previousOffset;","return;","offset=-1;","finalprivatevoidloopToEndOfNode(LongTreeListEnumlistEnum){","intnextEntry;","intnextOffset1,nextOffset2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicBigDecimaltoBigDecimal(){","if(signum==0)returnnewBigDecimal(BigInteger.ZERO,scale);","returnnewBigDecimal(newBigInteger(toByteArray()),scale);","publicBigDecimaltoBigDecimal(intnewScale){","if(newScale==this.scale)returntoBigDecimal();","returntoBigDecimal().setScale(newScale,BigDecimal.ROUND_HALF_EVEN);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetRef()notyetimplemented.\");","publicBlobgetBlob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetClob()notyetimplemented.\");","publicArraygetArray(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetDate()notyetimplemented.\");","publicTimegetTime(inti,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["writeBoolean(false);//false-isnotnull","column.setNewAutoIncrementValue(expr);","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","writeBoolean(expr.getBoolean());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setScale(value);","nextToken(MISSING_PARENTHESIS_R);","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnfalse;","rows=index.findRows(leftEx,false,null);","}while(rows==null);","if(rowsinstanceofLong){","right.setRowPosition(((Long)rows).longValue());","}else{"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["publicbooleaninsertsAreDetected(inttype){","returnsupportsResultSetType(type);","publicbooleansupportsBatchUpdates(){","returntrue;","publicResultSetgetUDTs(Stringcatalog,StringschemaPattern,StringtypeNamePattern,int[]types)throwsSQLException{","String[]colNames={\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"CLASS_NAME\",\"DATA_TYPE\",\"REMARKS\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["column.setScale(baseExpression.getScale());","break;","default:","column.setPrecision(origExpression.getPrecision());","column.setScale(origExpression.getScale());","column.setDataType(exprName.getDataType());"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)+(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>32);","value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]+1)==0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicbooleansupportsSubqueriesInIns(){","returntrue;","publicbooleansupportsSubqueriesInQuantifieds(){","returntrue;","publicbooleansupportsCorrelatedSubqueries(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["con.isolationLevel=isolationLevel;","break;","caseSQLTokenizer.USE:","con.setCatalog(name);","break;","default:"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["continue;","break;","}while(true);","if(isLeap&&day==59){","month=1;","day=29;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["cmd.setParamValue(parameterIndex,null,SQLTokenizer.NULL);","publicvoidsetBoolean(intparameterIndex,booleanx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x?Boolean.TRUE:Boolean.FALSE,SQLTokenizer.BOOLEAN);","publicvoidsetByte(intparameterIndex,bytex)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["staticfinalint_CHAR=1104;","staticfinalintCONCAT=1105;","staticfinalintDIFFERENCE=1106;","staticfinalintINSERT=1107;","staticfinalintLCASE=1108;","staticfinalintLEFT=1109;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return(int)(param2.getLong()/3600000-param1.getLong()/3600000);","caseSQLTokenizer.SQL_TSI_DAY:","return(int)(param2.getLong()/86400000-param1.getLong()/86400000);","caseSQLTokenizer.SQL_TSI_WEEK:{","longday2=param2.getLong()/86400000;","longday1=param1.getLong()/86400000;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["SQLTokenizer.TIMESTAMP,","SQLTokenizer.SMALLDATETIME,","SQLTokenizer.DATE,","SQLTokenizer.TIME,","SQLTokenizer.DOUBLE,","SQLTokenizer.FLOAT,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicshortgetShort(inti)throwsSQLException{","return(byte)getInt(i);","publicintgetInt(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["@Override","longcommit()throwsSQLException{","try{","if(raFile!=null&&page!=null){","ByteBufferbuffer=ByteBuffer.wrap(page,0,pageSize);","synchronized(raFile){"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.INT);","publicvoidsetLong(intparameterIndex,longx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newLong(x),SQLTokenizer.BIGINT);","publicvoidsetFloat(intparameterIndex,floatx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","return((Number)obj).intValue();","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returngetObject(columnName);","publicRefgetRef(StringcolumnName)throwsSQLException{","returngetRef(findColumn(columnName));","publicBlobgetBlob(StringcolumnName)throwsSQLException{","returngetBlob(findColumn(columnName));","publicClobgetClob(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returncolumn.isAutoIncrement();","booleanisCaseSensitive(){","returncolumn.isCaseSensitive();","booleanisNullable(){","returncolumn.isNullable();","booleanisDefinitelyWritable(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE);","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalObjectgetObject(intoffset,intdataType)throwsException{","returnnull;","finalStringgetString(intoffset,intdataType)throwsException{","returnnull;","finalvoidscanObjectOffsets(int[]offsets,int[]dataTypes){/*thereisnothingtoscan*/}","finalintgetUsedSize(){"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["finalstaticprivatechar[]numericToBinarySortOrder(MutableNumericnumeric){","int[]value=numeric.getInternalValue();","intcount=1;","inti;","for(i=0;i\<value.length;i++){","if(value[i]!=0){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["finalbooleanisScrollable(){","returntrue;","finalvoidexecute()throwsException{","rowSource.execute();","Indexindex=newIndex(false);","lastRowOffset=-1;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["case\'C\':","case\'G\':","case\'J\':","case\'K\':","case\'Q\':","case\'S\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseISNULL:returnleft.isNull();","caseISNOTNULL:return!left.isNull();","caseIN:if(right==null)","returnisInList();","break;","finalbooleanleftIsNull=left.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["elseResult=expr;","finalvoidsetEnd(){","Expression[]params=newExpression[cases.size()*2+(elseResult!=null?1:0)];","inti=0;","for(intp=0;p\<cases.size();p++){","params[i++]=cases.get(p);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["returndata[(idx\<\<1)+1];","finalvoidadd(longvalue1,longvalue2){","intsize2=size\<\<1;","if(size2\>=data.length){","resize(size2);","data[size2]=value1;"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["return(String)keywords.get(Utils.getInteger(key));","staticfinalintgetSQLDataType(inttype){","switch(type){","caseSQLTokenizer.BIT:","returnTypes.BIT;","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateintsize;","privateIndexDescription[]data;","voidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","for(inti=0;i\<size;i++){","data[i].create(con,database,tableView);","voiddrop(Databasedatabase)throwsException{"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["isCarryOver=(value[i--]+=1)==0;","if(valueLength\>1&&value[0]==0){","int[]temp=newint[valueLength-1];","System.arraycopy(value,1,temp,0,valueLength-1);","value=temp;","voidmod(MutableNumericnum){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicstaticfinalStringSTXADD_ADDITIONAL_TOK=\"SS-0612\";","publicstaticfinalStringSTXADD_IDENT_EXPECT=\"SS-0613\";","publicstaticfinalStringSTXADD_IDENT_EMPTY=\"SS-0614\";","publicstaticfinalStringSTXADD_IDENT_WRONG=\"SS-0615\";","publicstaticfinalStringSTXADD_OPER_MINUS=\"SS-0616\";","publicstaticfinalStringSTXADD_FUNC_UNKNOWN=\"SS-0617\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["this.where=where;","RowSourcegetFrom(){","returnrowSource;","finalprivatebooleanisValidRow()throwsException{","returnwhere==null||rowSource.rowInserted()||where.getBoolean();","finalbooleanisScrollable(){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["staticfinalintMOD=1013;","staticfinalintPI=1014;","staticfinalintPOWER=1015;","staticfinalintRADIANS=1016;","staticfinalintRAND=1017;","staticfinalintROUND=1018;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["mIdx=lastmIdx;","continueweiter;","sIdx++;","range=false;","}else{","if(Character.toUpperCase(value.charAt(sIdx))!=m)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalprivateintinterval;","ExpressionFunctionTimestampAdd(intintervalType,Expressionp1,Expressionp2){","interval=ExpressionFunctionTimestampDiff.mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});","intgetFunction(){","returnSQLTokenizer.TIMESTAMPADD;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["tokenStart=i+1;","wasWhiteSpace=true;","}elsequoteBuffer.append(c);","break;","case\'.\':","if(comment!=NOT_COMMENT){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["System.arraycopy(data,0,array,0,size);","finalExpression[]toArray(){","Expression[]array=newExpression[size];","System.arraycopy(data,0,array,0,size);","returnarray;","privatefinalvoidresize(intnewSize){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["publicstaticfinalStringINDEX_FILE_INVALID=\"SS-0462\";","publicstaticfinalStringINDEX_CORRUPT=\"SS-0463\";","publicstaticfinalStringINDEX_TOOMANY_EQUALS=\"SS-0464\";","publicstaticfinalStringFILE_TOONEW=\"SS-0490\";","publicstaticfinalStringFILE_TOOOLD=\"SS-0491\";","publicstaticfinalStringFILE_CANT_DELETE=\"SS-0492\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnleft.rowInserted()||right.rowInserted();","finalbooleanrowDeleted(){","returnleft.rowDeleted()||right.rowDeleted();","voidnullRow(){","left.nullRow();","right.nullRow();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["{FILE_CANT_DELETE,\"01000\"},","{ROW_0_ABSOLUTE,\"01000\"},","{ROW_NOCURRENT,\"01000\"},","{ROWS_WRONG_MAX,\"01000\"},","{ROW_LOCKED,\"01000\"},","{ROW_DELETED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["for(intc=0;c\<cols.size();c++){","Columncol=cols.get(c);","Object[]row=newObject[18];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=col.getName();//COLUMN_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["{INSERT_INVALID_LEN,\"01000\"},","{SUBSTR_INVALID_LEN,\"01000\"},","{VALUE_STR_TOOLARGE,\"01000\"},","{VALUE_BIN_TOOLARGE,\"01000\"},","{VALUE_NULL_INVALID,\"01000\"},","{VALUE_CANT_CONVERT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["packagesmallsql.database;","finalclassLongLongList{","privateintsize;","privatelong[]data;","LongLongList(){","this(16);"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["if(type==Join.FULL_JOIN){","isFullNotValid=newboolean[10];","voidbeforeFirst()throwsException{","left.beforeFirst();","right.beforeFirst();","isBeforeFirst=true;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["return_left\>=right.getDouble()&&right2.getDouble()\>=_left;","default:","returngetDouble()!=0;","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisBeforeFirst(){","returnrowIdx==-1||rowList.size()==0;","booleanisFirst(){","returnrowIdx==0&&rowList.size()\>0;","booleanfirst()throwsException{","rowIdx=-1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["publicstaticfinalStringDB_NONEXISTENT=\"SS-0031\";","publicstaticfinalStringDB_NOT_DIRECTORY=\"SS-0032\";","publicstaticfinalStringDB_NOTCONNECTED=\"SS-0033\";","publicstaticfinalStringDB_READONLY=\"SS-0034\";","publicstaticfinalStringCONNECTION_CLOSED=\"SS-0070\";","publicstaticfinalStringVIEW_INSERT=\"SS-0100\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.create(Language.TABLE_FILE_INVALID,getFile(database));","intcount=store.readInt();","for(inti=0;i\<count;i++){","columns.add(store.readColumn(tableFormatVersion));","indexes=newIndexDescriptions();","references=newForeignKeys();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["row[13]=Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable);//DEFERRABILITY","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getBestRowIdentifier(SSConnectioncon,Stringtable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["value=null;","remainderKey=null;","IndexNodenewNode=addNode(puffer[0]);","if(puffer.length==1){","newNode.value=rowOffset;","}else{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["intoffset2=0;","intoffset3=0;","offset=0;","intshift=48;","booleanfirstNode=true;//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","booleanfirstNode1=true;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returngetString();","caseSQLTokenizer.LONGVARBINARY:","returngetBytes();","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionName))returnfalse;","if(((ExpressionName)expr).fromEntry!=fromEntry)returnfalse;","returntrue;","booleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["WeakHashMapconnections=database.connections;","connections.remove(con);","if(connections.size()==0){","try{","iterator.remove();","database.close();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[(idx\<\<1)+1];","finalvoidadd(longvalue1,longvalue2){","intsize2=size\<\<1;","if(size2\>=data.length){","resize(size2);"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["publicstaticMoneycreateFromUnscaledValue(intvalue){","Moneymoney=newMoney();","money.value=value;","returnmoney;","publicintintValue(){","return(int)(value/10000.0);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["int_left=left.getInt();","return_left\>=right.getInt()&&right2.getInt()\>=_left;","default:","returngetInt()!=0;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finallonggetLong()throwsException{","return(long)getDouble();","finalfloatgetFloat()throwsException{","return(float)getDouble();","longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["break;","caseSQLTokenizer.MAX:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MAX);","break;","caseSQLTokenizer.MIN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleanabsolute(introw)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanrelative(introws)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractintgetRow()throwsException;","abstractlonggetRowPosition();"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["Stringdef=newString(sql,offset,length);","col.setDefaultValue(expr,def);","defaultWasSet=true;","break;","caseSQLTokenizer.IDENTITY:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publiclonggetLong(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue();","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["selCmd.setDistinct(false);","break;","caseSQLTokenizer.DISTINCT:","selCmd.setDistinct(true);","break;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(equals(node.getRemainderValue(),key,i)){","if(isLast){","node.saveValue(rowOffset);","returnnull;","returnnode.addRoot();","finalvoidclear(){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnnull;","finalStringgetString(intoffset,intdataType)throwsException{","returnnull;","finalvoidscanObjectOffsets(int[]offsets,int[]dataTypes){/*thereisnothingtoscan*/}","finalintgetUsedSize(){","return0;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["if(longValue\<0)","return-1;","if(longValue\>0)","return1;","return0;","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["returnbuf.toString();","case12://ISOyymmdd","formatNumber(details.year%100,2,buf);","formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["SearchNodenode=searchTree;","ArrayListtokens=newArrayList();","intvalue=0;","inttokenStart=0;","booleanwasWhiteSpace=true;","intcomment=NOT_COMMENT;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["byte[]readBytes(intlength){","byte[]daten=newbyte[length];","System.arraycopy(page,offset,daten,0,length);","offset+=length;","returndaten;","voidwriteBinary(byte[]daten,intlengthColumn,booleanvarBinary)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateCommandtruncate()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_TABLE);","from(cmd);","returncmd;","privateCommandinsert()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicPreparedStatementprepareStatement(Stringsql,int[]columnIndexes)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(columnIndexes);","returnpr;","publicPreparedStatementprepareStatement(Stringsql,String[]columnNames)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){","CommandSelectcmdSel=select();","leftExpr=newExpressionInSelect(con,leftExpr,cmdSel,operation);","nextToken(MISSING_PARENTHESIS_R);","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnUtils.getInteger((short)param1.getInt());","caseSQLTokenizer.INT:","returnUtils.getInteger(param1.getInt());","caseSQLTokenizer.BIGINT:","returnnewLong(param1.getLong());","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["this.type=SQLTokenizer.DATABASE;","if(name.startsWith(\"file:\"))","name=name.substring(5);","this.name=name;","@Override","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["else{","Stringvalue=SQL_STATES[i][1];","sqlStates.put(key,value);","publicStringgetMessage(Stringkey){","Stringmessage=(String)messages.get(key);","assert(message!=null):\"Messagecodenotfound:\"+key;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.createFromException(e);","voidrollbackFile(FileChannelraFile)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=0;i--){","TransactionSteppage=(TransactionStep)commitPages.get(i);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["{COL_AMBIGUOUS,\"Ilnomedicolonna\'\'{0}\'\'Ã¨ambiguo.\"},","{GROUP_AGGR_INVALID,\"FunzionediaggregrazionenonvalidaperlaclausolaGROUPBY:({0}).\"},","{GROUP_AGGR_NOTPART,\"L\'\'espressione\'\'{0}\'\'nonÃ¨partediunafunzionediaggregazioneodellaclausolaGROUPBY.\"},","{ORDERBY_INTERNAL,\"ErroreinternoperORDERBY.\"},","{UNION_DIFFERENT_COLS,\"SELECTappartenentiadunaUNIONconnumerodicolonnedifferenti:{0}e{1}.\"},","{INDEX_EXISTS,\"L\'\'indice\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case1://USAmm/dd/yy","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intidx=addInternalExpressionFromSelect(expr);","if(idx\>=0){","ExpressionorigExpression=expr;","ExpressionNameexprName;","if(exprinstanceofExpressionName){","exprName=(ExpressionName)expr;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["super.setParamAt(param,idx);","intp=idx/2;","if(p\>=cases.size()){","elseResult=param;","return;","if(idx%2\>0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["rowSource.noRow();","row=0;","returnfalse;","booleannext()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()\<0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["this.condition=condition;","this.left=left;","this.right=right;","if(type==Join.FULL_JOIN){","isFullNotValid=newboolean[10];","voidbeforeFirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["finalintsize(){","returnsize;","finalbooleanisEmpty(){","returnsize==0;","finalTableStorePageget(longkey){","inti=(int)(key%table.length);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["while(true){","list.add(expression(cmd,0));","SQLTokentoken=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returnlist;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().longValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["bitCount++;","size\>\>=1;","returnbitCount;","finallonggetRowPosition(){","intbitCount=getBitCount();","returndataSourceIdx|currentDS.getRowPosition()\<\<bitCount;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["}else{","insertNodeLastLevel(octet);","return;","shift-=16;","octet=(int)(value\>\>shift)&0xFFFF;","firstNode=false;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["intnewSize=offset+4;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringKEY_DUPLICATE=\"SS-0222\";","publicstaticfinalStringMONTH_TOOLARGE=\"SS-0251\";","publicstaticfinalStringDAYS_TOOLARGE=\"SS-0252\";","publicstaticfinalStringHOURS_TOOLARGE=\"SS-0253\";","publicstaticfinalStringMINUTES_TOOLARGE=\"SS-0254\";","publicstaticfinalStringSECS_TOOLARGE=\"SS-0255\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.UNIQUE:","do{","token=nextToken(COMMANDS_CREATE_UNIQUE);","}while(token.value==SQLTokenizer.INDEX);","returncreateIndex(true);","caseSQLTokenizer.NONCLUSTERED:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.LOCATE:","invalidParamCount=(paramCount!=2)&&(paramCount!=3);","expr=newExpressionFunctionLocate();","break;","caseSQLTokenizer.LTRIM:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=charCount-1,d=0;i\>=0;i--){","this.remainderKey[d++]=(char)(remainderValue\>\>(i\<\<4));","finalIndexNodeaddRoot()throwsSQLException{","IndexNoderoot=(IndexNode)value;","if(root==null){","value=root=createIndexNode(unique,(char)-1);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["privateintcreateJoinScrollIndex(ExpressionArithmeticcond,ExpressionsleftEx,ExpressionsrightEx,intoperation)throwsException{","Expression[]params=cond.getParams();","intop=cond.getOperation();","if(op==ExpressionArithmetic.AND){","Expressionparam0=params[0];","Expressionparam1=params[1];"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returngetParams().length==1&&param1.isNull();","finaldoublegetDouble()throwsException{","if(getParams().length==0)","returnrandom.nextDouble();","if(isNull())return0;","returnnewRandom(param1.getLong()).nextDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|"],
"["FileIndexNoderoot=FileIndexNode.loadRootNode(unique,raFile,raFile.position());","returnnewFileIndex(root,raFile);","voidsave()throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);","buffer.put(rootPage.getUnique()?(byte)1:(byte)0);","buffer.position(0);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["if(right!=null){","right=param;","break;","case2:","if(right!=null){","right2=param;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(type\>=ResultSet.TYPE_FORWARD_ONLY&&type\<=ResultSet.TYPE_SCROLL_SENSITIVE&&","concurrency\>=ResultSet.CONCUR_READ_ONLY&&concurrency\<=ResultSet.CONCUR_UPDATABLE)","returntrue;","returnfalse;","publicbooleanownUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privatestaticfinalint[]MISSING_IDENTIFIER={SQLTokenizer.IDENTIFIER};","privatestaticfinalint[]MISSING_BY={SQLTokenizer.BY};","privatestaticfinalint[]MISSING_PARENTHESIS_L={SQLTokenizer.PARENTHESIS_L};","privatestaticfinalint[]MISSING_PARENTHESIS_R={SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_DATATYPE={SQLTokenizer.BIT,SQLTokenizer.BOOLEAN,SQLTokenizer.BINARY,SQLTokenizer.VARBINARY,SQLTokenizer.RAW,SQLTokenizer.LONGVARBINARY,SQLTokenizer.BLOB,SQLTokenizer.TINYINT,SQLTokenizer.SMALLINT,SQLTokenizer.INT,SQLTokenizer.COUNTER,SQLTokenizer.BIGINT,SQLTokenizer.SMALLMONEY,SQLTokenizer.MONEY,SQLTokenizer.DECIMAL,SQLTokenizer.NUMERIC,SQLTokenizer.REAL,SQLTokenizer.FLOAT,SQLTokenizer.DOUBLE,SQLTokenizer.DATE,SQLTokenizer.TIME,SQLTokenizer.TIMESTAMP,SQLTokenizer.SMALLDATETIME,SQLTokenizer.CHAR,SQLTokenizer.NCHAR,SQLTokenizer.VARCHAR,SQLTokenizer.NVARCHAR,SQLTokenizer.LONG,SQLTokenizer.LONGNVARCHAR,SQLTokenizer.LONGVARCHAR,SQLTokenizer.CLOB,SQLTokenizer.NCLOB,SQLTokenizer.UNIQUEIDENTIFIER,SQLTokenizer.JAVA_OBJECT,SQLTokenizer.SYSNAME};","privatestaticfinalint[]MISSING_SQL_DATATYPE={SQLTokenizer.SQL_BIGINT,SQLTokenizer.SQL_BINARY,SQLTokenizer.SQL_BIT,SQLTokenizer.SQL_CHAR,SQLTokenizer.SQL_DATE,SQLTokenizer.SQL_DECIMAL,SQLTokenizer.SQL_DOUBLE,SQLTokenizer.SQL_FLOAT,SQLTokenizer.SQL_INTEGER,SQLTokenizer.SQL_LONGVARBINARY,SQLTokenizer.SQL_LONGVARCHAR,SQLTokenizer.SQL_REAL,SQLTokenizer.SQL_SMALLINT,SQLTokenizer.SQL_TIME,SQLTokenizer.SQL_TIMESTAMP,SQLTokenizer.SQL_TINYINT,SQLTokenizer.SQL_VARBINARY,SQLTokenizer.SQL_VARCHAR};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["@Override","protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewFileIndexNode(unique,digit,file);","voidsave()throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,fileOffset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["result-=86400000L;","returnresult;","staticlongnow(){","returnremoveDateTimeOffset(System.currentTimeMillis());","staticintdayOfWeek(longtime){","return(int)((time/86400000+3)%7);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();","expressionDefList(cmdCreate,expressions,columns);","IndexDescriptionpkIndex=newIndexDescription(null,pk,SQLTokenizer.UNIQUE,expressions,columns);","ForeignKeyforeignKey=newForeignKey(pk,pkIndex,tableName,index);","cmdCreate.addForeingnKey(foreignKey);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Database.dropTable(con,catalog,name);","break;","caseSQLTokenizer.VIEW:","Database.dropView(con,catalog,name);","break;","caseSQLTokenizer.INDEX:"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","privatevoidgroup(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);","cmd.setGroup(expressionTokenList(cmd,SQLTokenizer.GROUP));","privatevoidwhere(CommandSelectcmd)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["store.setCurrentOffsetInPage(offsetInPage+size);","firstPage=store.getNextPagePos();","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","this(database,con,name,columns,null,indexes,foreignKeys);","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsexistIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","super(name,columns);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["importjava.math.*;","importjava.io.*;","importjava.util.ArrayList;","importjava.util.Calendar;","importjava.net.URL;","classSSPreparedStatementextendsSSStatementimplementsPreparedStatement{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.VARCHAR);","intgetDataType(){","switch(operation){","caseNEGATIVE:","caseBIT_NOT:","returnleft.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["for(intc=0;c\<columns.size();c++){","store.writeString(columns.get(c));","store.writeString(name);","finalstaticIndexDescriptionload(Databasedatabase,TableViewtableView,StoreImplstore)throwsSQLException{","intconstraintType=store.readInt();","intcount=store.readInt();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["millis=Integer.parseInt(strMillis)*10;","break;","case3:","millis=Integer.parseInt(strMillis);","break;","default:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.VARBINARY:","ExpressionFunctionRTrimtrim=newExpressionFunctionRTrim();","trim.setParams(newExpression[]{expr});","returntrim;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicclassExpressionFunctionConvertextendsExpressionFunction{","finalprivateColumndatatype;","publicExpressionFunctionConvert(Columndatatype,Expressionvalue,Expressionstyle){","super();","this.datatype=datatype;","Expression[]params=(style==null)?newExpression[]{value}:newExpression[]{value,style};"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARBINARY:","ExpressionFunctionRTrimtrim=newExpressionFunctionRTrim();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["data[offset++]=(byte)(value);","privatefinalvoidresize()throwsSQLException{","intnewsize=data.length\<\<1;","if(newsize\>0xFFFFFF){//seepointerSize","newsize=0xFFFFFF;","if(newsize==data.length)throwSmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["threshold=(int)(newCapacity*0.75f);","finalprivatevoidtransfer(Entry[]newTable){","Entry[]src=table;","intnewCapacity=newTable.length;","for(intj=0;j\<src.length;j++){","Entrye=src[j];"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["break;","caseSQLTokenizer.HOUR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionHour();","break;","caseSQLTokenizer.MINUTE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(node!=null&&node.letter!=c)node=node.nextEntry;","if(node!=null){","value=node.value;","node=node.nextLetter;","}else{","value=0;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returntrue;","returnfalse;","publicintisNullable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isNullable()?columnNullable:columnNoNulls;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["StringgetString()throwsException{","returnfromEntry.getString(colIdx);","byte[]getBytes()throwsException{","returnfromEntry.getBytes(colIdx);","intgetDataType(){","switch(getType()){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["super(raFile);","this.page=page;","this.pageSize=pageSize;","this.fileOffset=fileOffset;","finalvoidsetPageData(byte[]data,intsize){","page=data;"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["publicvoidupdateTime(StringcolumnName,Timex)throwsSQLException{","updateTime(findColumn(columnName),x);","publicvoidupdateTimestamp(StringcolumnName,Timestampx)throwsSQLException{","updateTimestamp(findColumn(columnName),x);","publicvoidupdateAsciiStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{","updateAsciiStream(findColumn(columnName),x,length);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(comment==MULTI_COMMENT){","throwSmallSQLException.create(Language.STXADD_COMMENT_OPEN);","if(!wasWhiteSpace){","tokens.add(newSQLToken(value,tokenStart,sql.length));","returntokens;","staticprivatevoidaddKeyWord(Stringkeyword,intvalue){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["byte[]obj=getValue(i).getBytes();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["inList[idx-1]=param;","super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionArithmetic))returnfalse;","if(((ExpressionArithmetic)expr).operation!=operation)returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalbooleanisEmpty(){","returnnodes==EMPTY_NODES&&value==null;","finalvoidclear(){","nodes=EMPTY_NODES;","value=null;","remainderKey=null;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["staticfinalintIN=61;//IN","staticfinalintBETWEEN=62;//BETWEEN","staticfinalintLIKE=63;//LIKE","staticfinalintISNULL=64;//ISNULL","staticfinalintISNOTNULL=ISNULL+1;//ISNOTNULL","staticfinalintADD=71;//+"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseUNEQUALS:returnleft.getBoolean()!=right.getBoolean();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIT:","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnfalse;","returnfrom.next();","finalbooleanlast()throwsException{","if(maxRows\>=0){","if(maxRows==0){","from.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(con.getAutoCommit())con.commit();","finalvoidinsertRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_INSERT);","if(tables.size()==0)","throwSmallSQLException.create(Language.INSERT_WO_FROM);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","return(long)(Utils.bytes2double(readBinary())*10000L);","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()*10000L;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Columncolumn=table.columns.get(c);","intidx=matrix[c];","ExpressionvalueExpress;","if(idx\>=0){","valueExpress=cmdSel.columnExpressions.get(idx);","}else{"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'T\');","formatNumber(details.hour,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["byte[]getBytes()throwsException{","returnfromEntry.getBytes(colIdx);","intgetDataType(){","switch(getType()){","caseNAME:","caseGROUP_BY:"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["publicbooleanstoresUpperCaseIdentifiers(){","returnfalse;","publicbooleanstoresLowerCaseIdentifiers(){","returnfalse;","publicbooleanstoresMixedCaseIdentifiers(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["writeShort(octet);","writePointer(size);","correctPointers(0,oldOffset,2+pointerSize,0);","data[size++]=(byte)0;","data[size++]=(byte)0;","returnsize-2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["intnextEntry=getUnsignedShort();","if(nextEntry==octet){","if(shift==0){","offset-=2;","removeNodeLastLevel();","while(firstNode&&getUnsignedShort()==0){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["try{","intcount=commitPages.size();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.commit();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnSSDriver.drv.getMajorVersion();","publicintgetDriverMinorVersion(){","returnSSDriver.drv.getMinorVersion();","publicbooleanusesLocalFiles(){","returnfalse;","publicbooleanusesLocalFilePerTable(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(tableAlias!=null){","intt=0;","for(;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);","if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){","TableViewtable=fromEntry.getTableView();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["param3=param;","break;","case3:","param4=param;","break;","super.setParamAt(param,idx);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["caseSQLTokenizer.LOG:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog();","break;","caseSQLTokenizer.LOG10:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case14:","case114://hh:mi:ss:mmm(24h)","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["formatNumber(details.year,4,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.day,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privatefinalIndexNoderootPage;","privatefinalExpressionsexpressions;//isusedforthedescriptionofASCandDESC","privatefinaljava.util.StacknodeStack=newjava.util.Stack();//TODOperformanceStackdurchnichtsynchronisierteKlasseersetzten","finalvoidreset(){","nodeStack.clear();","booleanasc=(expressions.get(0).getAlias()!=SQLTokenizer.DESC_STR);"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["node.addRemainderKey(rowOffset,key,i);","returnnull;","returnnode.addRootValue(key,i);","}else","if(equals(node.getRemainderValue(),key,i)){","if(isLast){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["voidbeforeFirst()throwsException{","scrollStatus.reset();","row=0;","useSetRowPosition=false;","booleanfirst()throwsException{","beforeFirst();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","classFileIndexextendsIndex{","staticvoidprint(Indexindex,Expressionsexpressions){","IndexScrollStatusscroll=index.createScrollStatus(expressions);","longl;"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["caseSQLTokenizer.REAL:","returnString.valueOf(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnString.valueOf(readDouble());","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(size++\>=threshold)","resize(2*table.length);","returnnull;","finalprivatevoidresize(intnewCapacity){","Entry[]newTable=newEntry[newCapacity];","transfer(newTable);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returnnewIndexNode(unique,digit);","finalchargetDigit(){","returndigit;","finalbooleangetUnique(){","returnunique;","finalbooleanisEmpty(){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["ListgetInserts(SSConnectioncon){","synchronized(locks){","ArrayListinserts=newArrayList();","if(con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCeiling();","break;","caseSQLTokenizer.COS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCos();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(carryover\>2147483648L||//2147483648L==Integer.MAX_VALUE+1","(carryover==2147483648L&&(value[valueLength-1]%2==1))){","inti=valueLength-1;","booleanisCarryOver=true;","while(i\>=0&&isCarryOver)","isCarryOver=(value[i--]+=1)==0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(name==catalog)catalog=null;","switch(tokenType.value){","caseSQLTokenizer.DATABASE:","caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["t+=86400000;","d--;","millis=t%1000;","t/=1000;","second=t%60;","t/=60;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return\"SmallSQLDriver\";","publicStringgetDriverVersion(){","returngetDriverMajorVersion()+\".\"+SSDriver.drv.getMinorVersion();","publicintgetDriverMajorVersion(){","returnSSDriver.drv.getMajorVersion();","publicintgetDriverMinorVersion(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalprivatevoidremoveNode()throwsSQLException{","intoldOffset=offset;","correctPointers(0,oldOffset,-(2+pointerSize),0);","size-=2+pointerSize;","System.arraycopy(data,oldOffset+2+pointerSize,data,oldOffset,size-oldOffset);","offset=oldOffset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnnewSSPreparedStatement(this,sql,resultSetType,resultSetConcurrency);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicMapgetTypeMap(){","returnnull;","publicvoidsetTypeMap(Mapmap){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["@Override","longgetNextPagePos(){","if(updatePointer!=null)returnupdatePointer.getNextPagePos();","if(nextPageOffset\<=0){","nextPageOffset=sizePhysical;","returnfilePos+nextPageOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{FLAGVALUE_INVALID,\"InvalidflagvalueinmethodgetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"InvalidargumentinmethodsetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnotrequested.\"},","{SEQUENCE_HEX_INVALID,\"Invalidhexsequenceat{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Invalidhexsequenceatposition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Syntaxerroratoffset{0}on\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","finalbooleanresult=rowSource.next();","if(result){","rowList.add(rowSource.getRowPosition());","returntrue;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["break;","default:","previousToken();","breakSwitch;","while(true){","Expressioncolumn=expression(selCmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Objectobj=getValue(i).getObject();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","page=find(page,bytesToBinarySortOrder(expr.getBytes()),nodeList);","break;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","page=find(page,expr.getBoolean()?2:1,1,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["}catch(Throwableex){","throwSmallSQLException.createFromException(Language.DATETIME_INVALID,datetime,ex);","longgetTimeMillis(){","returntime;","intgetDataType(){","returndataType;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","page=add(page,rowOffset,doubleToBinarySortOrder(expr.getDouble()),isLastValues,4);","break;","caseSQLTokenizer.TINYINT:","page=add(page,rowOffset,expr.getInt(),isLastValues,1);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicdoublegetDouble(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["}else{","if(start==mid)returnstart;","returnfindNodeInsertPos(digit,start,mid);","privatefinalintfindNodePos(chardigit){","returnfindNodePos(digit,0,nodes.length);","privatefinalintfindNodePos(chardigit,intstart,intend){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseIN:if(right==null)","returnisInList();","break;","finalbooleanleftIsNull=left.isNull();","intdataType;","if(operation==NEGATIVE||operation==BIT_NOT){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{SYNTAX_BASE_END,\"01000\"},","{STXADD_ADDITIONAL_TOK,\"01000\"},","{STXADD_IDENT_EXPECT,\"01000\"},","{STXADD_IDENT_EMPTY,\"01000\"},","{STXADD_IDENT_WRONG,\"01000\"},","{STXADD_OPER_MINUS,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.NUMERIC:","returnprecision+(scale\>0?2:1);","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","return2+precision*2;","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteInt(intvalue){","verifyFreePufferSize(4);","puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["DriverManager.println(e2.toString());","throwSmallSQLException.createFromException(e);","FilegetFile(Databasedatabase){","returnnewFile(Utils.createTableViewFileName(database,name));","FileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["hour=t%24;","year=1970-(int)(t/365.2425);","booleanisLeap;","do{","isLeap=false;","dayofyear=day=d-((year-1970)*365+(year/4)-(year/100)+(year/400)-477);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intstart=0;","intlength=bytes.length;","while(start\<length&&bytes[start]==0){","start++;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["privatefinalintfindNodePos(chardigit,intstart,intend){","if(start==nodes.length)return-1;","intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["}catch(Exceptione){","command.setLength(0);","e.printStackTrace();","privatestaticvoidprintRS(ResultSetrs)throwsSQLException{","ResultSetMetaDatamd=rs.getMetaData();","intcount=md.getColumnCount();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["expr.setFrom(fromEntry,colIdx,table);","if(!isSetFrom){","throwSmallSQLException.create(Language.COL_INVALID_NAME,expr.getName());","compileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionParams(Expressionexpr)throwsException{","Expression[]expParams=expr.getParams();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["while(lock!=null){","if(lock==storePage){","if(lock==prev){","if(lock.nextLock==null){","locks.remove(pageKey);","}else{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["return;","offset=listEnum.offsetStack[listEnum.stack-1]-pointerSize;","intpointer=getPointer();","if(pointer\<=previousOffset){","offset=previousOffset;","return;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnnewMutableNumeric(getBoolean()?1:0);","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returnnewMutableNumeric(getIntImpl());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["assertstorePage.con==tabLockConnection:\"InternalErrorwithTabLock\";","if(--tabLockCount==0)tabLockConnection=null;","break;","default:","thrownewError();","}finally{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["{LOB_DELETED,\"L\'\'oggettoLOBÃ¨statocancellato.\"},","{PARAM_CLASS_UNKNOWN,\"Classesconosciuta(\'\'{0}\'\')perilparametro.\"},","{PARAM_EMPTY,\"Ilparametro{0}Ã¨vuoto.\"},","{PARAM_IDX_OUT_RANGE,\"L\'\'indice{0}perilparametroÃ¨fuoridall\'\'intervalloconsentito(1\<=n\<={1}).\"},","{COL_DUPLICATE,\"Nomedicolonnaduplicato:\'\'{0}\'\'.\"},","{COL_MISSING,\"Colonna\'\'{0}\'\'nontrovata.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["addKeyWord(\"T\",T);","addKeyWord(\"TS\",TS);","addKeyWord(\"FN\",FN);","addKeyWord(\"CALL\",CALL);","addKeyWord(\"OJ\",OJ);","staticfinalintOR=500;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanisScrollable(){","returntrue;","finalvoidbeforeFirst(){","rowIdx=-1;","currentRow=null;","finalbooleanisBeforeFirst(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["|(((long)(puffer[offset++]&0xFF))\<\<40)","|(((long)(puffer[offset++]&0xFF))\<\<32)","|((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnLong.parseLong(readLongString());","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["default:","leftExpr=expressionSingle(cmd,token);","booleanisNot=false;","while((token=nextToken())!=null){","ExpressionrightExpr;","intoperation=ExpressionArithmetic.getOperationFromToken(token.value);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{STXADD_IDENT_EMPTY,\"Identificatorevuoto.\"},","{STXADD_IDENT_WRONG,\"Identificatoreerrato\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"Operatore\'\'meno\'\'nonvalidoperiltipodidatovarbinary.\"},","{STXADD_FUNC_UNKNOWN,\"Funzionesconosciuta.\"},","{STXADD_PARAM_INVALID_COUNT,\"Totaleparametrinonvalido.\"},","{STXADD_JOIN_INVALID,\"Sintassidellajoinnonvalida.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["publicbooleanothersInsertsAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanupdatesAreDetected(inttype){","returnfalse;","publicbooleandeletesAreDetected(inttype){","returnsupportsResultSetType(type);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{ROWSOURCE_READONLY,\"Rowsourceisreadonly.\"},","{STMT_IS_CLOSED,\"Statementisalreadyclosed.\"},","{SUBQUERY_COL_COUNT,\"Countofcolumnsinsubquerymustbe1andnot{0}.\"},","{JOIN_DELETE,\"ThemethoddeleteRownotsupportedonjoins.\"},","{JOIN_INSERT,\"ThemethodinsertRownotsupportedonjoins.\"},","{DELETE_WO_FROM,\"ThemethoddeleteRowneedaFROMexpression.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["elseprev.nextLetter=node;","wasNextEntry=false;","prev=node;","node=null;","}else{","prev=node;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{JOIN_DELETE,\"DeleteRownonsupportatonellejoin.\"},","{JOIN_INSERT,\"InsertRownonsupportatonellejoin.\"},","{DELETE_WO_FROM,\"DeleteRownecessitaun\'\'espressioneFROM.\"},","{INSERT_WO_FROM,\"InsertRownecessitaun\'\'espressioneFROM.\"},","{TABLE_CANT_RENAME,\"Latabella\'\'{0}\'\'nonpuÃ²essererinominata.\"},","{TABLE_CANT_DROP,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["intgetScale(){","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:{","byte[]leftBytes=left.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseEQUALS_NULL:","caseEQUALS:returnleft.getDouble()==right.getDouble();","caseGREATER:returnleft.getDouble()\>right.getDouble();","caseGRE_EQU:returnleft.getDouble()\>=right.getDouble();","caseLESSER:returnleft.getDouble()\<right.getDouble();","caseLES_EQU:returnleft.getDouble()\<=right.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.sql.SQLException;","publicclassIdentityextendsNumberimplementsMutable{","finalprivatelongfilePos;","finalprivateFileChannelraFile;","finalprivatebyte[]page=newbyte[8];","privatelongvalue;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["ExpressionValue[]rowValues=newExpressionValue[row.length];","addRow(rowValues);","for(intc=0;c\<colCount;c++){","ExpressionValueexpr=rowValues[c]=newExpressionValue();","expr.set(row[c],-1);","Columncolumn=columns.get(c);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["{STXADD_FUNC_UNKNOWN,\"UnbekannteFunktion.\"},","{STXADD_PARAM_INVALID_COUNT,\"UngÃ¼ltigeParamterAnzahl.\"},","{STXADD_JOIN_INVALID,\"UngÃ¼ltigeJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnerwartetschlieÃŸendeKlammerinFROMKlausel.\"},","{STXADD_KEYS_REQUIRED,\"BenÃ¶tigeSchlÃ¼sselwÃ¶rtersind:\"},","{STXADD_NOT_NUMBER,\"EineZahlisterforderlich:\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["}catch(Throwableth){","throwSmallSQLException.createFromException(Language.CANT_LOCK_FILE,file,th);","returnchannel;","staticfinalExpressionsgetExpressionNameFromTree(Expressiontree){","Expressionslist=newExpressions();","getExpressionNameFromTree(list,tree);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","value=newMutableNumeric(expr.getNumeric());","break;","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalbooleanleftIsNull=left.isNull();","intdataType;","if(operation==NEGATIVE||operation==BIT_NOT){","if(leftIsNull)returnfalse;","dataType=left.getDataType();","}else{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["token=addColumn(token,cmdCreate);","if(token==null){","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["firstNode=false;","finallonggetPrevious(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64){//apreviouscallofgetNext()hasreturn-1","shift=48;","offset=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSUB:returnleft.getFloat()-right.getFloat();","caseMUL:returnleft.getFloat()*right.getFloat();","caseDIV:returnleft.getFloat()/right.getFloat();","caseNEGATIVE:return-left.getFloat();","caseMOD:returnleft.getFloat()%right.getFloat();","throwcreateUnspportedConversion(SQLTokenizer.REAL);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returngetDate(time);","caseSQLTokenizer.TIME:","returngetTime(time);","default:","returngetTimestamp(time);","staticclassDetails{"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["while(rowSource.next()){","lastRowOffset=rowSource.getRowPosition();","index.addValues(lastRowOffset,orderBy);","sortedRowCount++;","scrollStatus=index.createScrollStatus(orderBy);","useSetRowPosition=false;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returngetMoney(getObject(),dataType);","staticlonggetMoney(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","return(obj==Boolean.TRUE)?10000:0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["CommandalterTable(Stringcatalog,Stringname)throwsSQLException{","SQLTokentokenType=nextToken(MISSING_ADD_ALTER_DROP);","CommandTablecmd=newCommandTable(con.log,catalog,name,tokenType.value);","switch(tokenType.value){","caseSQLTokenizer.ADD:","SQLTokentoken;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DOUBLE:","returnreadDouble()!=0;","caseSQLTokenizer.MONEY:","returnreadLong()!=0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.ASCII:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAscii();","break;","caseSQLTokenizer.BITLEN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","return-11;","caseSQLTokenizer.NULL:","returnTypes.NULL;","default:thrownewError(\"DataType:\"+type);","staticSearchNodesearchTree;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["formatNumber(details.second,2,buf);","buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();","case130://Kuwaitiddmonyyyyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["try{","StoreImplstore=newStoreImpl(table,storePage,type,filePos);","switch(type){","caseSQLTokenizer.LONGVARBINARY:","store.page=newbyte[(int)filePos+PAGE_CONTROL_SIZE];","store.filePos=-1;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.REAL:","return7;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return15;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicclassLanguage{","publicstaticfinalStringCUSTOM_MESSAGE=\"SS-0000\";","publicstaticfinalStringUNSUPPORTED_OPERATION=\"SS-0001\";","publicstaticfinalStringCANT_LOCK_FILE=\"SS-0003\";","publicstaticfinalStringDB_EXISTENT=\"SS-0030\";","publicstaticfinalStringDB_NONEXISTENT=\"SS-0031\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["staticfinalintPROCEDURE=239;","staticfinalintTRANSACTION=240;","staticfinalintISOLATION=241;","staticfinalintLEVEL=242;","staticfinalintREAD=243;","staticfinalintCOMMITTED=244;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.SMALLINT:","returnUtils.getInteger(readShort());","caseSQLTokenizer.INT:","returnUtils.getInteger(readInt());","caseSQLTokenizer.BIGINT:","returnnewLong(readLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["sources.add(source);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","intcount=columnExpressions.size();","columnExpressions.addAll(sources);","compile(con);","columnExpressions.setSize(count);"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["returnnewExpressionValue(newMoney(Double.parseDouble(tok)),SQLTokenizer.MONEY);","Stringtok=newString(sql,token.offset,token.length);","if((chr1\>=\'0\'&&\'9\'\>=chr1)||chr1==\'.\'){","previousToken();","if(token.length\>1&&(sql[token.offset+1]|0x20)==\'x\'){","if(isMinus){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["data=newColumn[16];","finalintsize(){","returnsize;","finalColumnget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["returndata[idx];","finalvoidadd(Stringdescr){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=descr;","privatefinalvoidresize(intnewSize){"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["publicvoidupdateBigDecimal(StringcolumnName,BigDecimalx)throwsSQLException{","updateBigDecimal(findColumn(columnName),x);","publicvoidupdateString(StringcolumnName,Stringx)throwsSQLException{","updateString(findColumn(columnName),x);","publicvoidupdateBytes(StringcolumnName,byte[]x)throwsSQLException{","updateBytes(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["classCommandSelectextendsCommand{","privateDataSourcestables;//ListofTableResult(TablesandViews)","privateExpressionwhere;","RowSourcefrom;","privateExpressionsgroupBy;","privateExpressionhaving;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["TableStorePagetableLock=oldTable.requestLock(con,SQLTokenizer.ALTER,-1);","StringnewName=\"#\"+System.currentTimeMillis()+this.hashCode();","try{","ColumnsoldColumns=oldTable.columns;","ColumnsnewColumns=oldColumns.copy();","for(inti=0;i\<columns.size();i++){"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["if(left.isNull())returnfalse;","try{","for(inti=0;i\<inList.length;i++){","right=inList[i];","if(getBoolean())returntrue;","}finally{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisExpressionsFromThisRowSource(Expressionscolumns){","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","returntrue;","if(columns.size()==1){","returnfalse;","Expressionssingle=newExpressions();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;","if(needGeneratedKeys&&generatedKeysType==2){","int[]keyIndexes=st.getGeneratedKeyIndexes();","for(inti=0;i\<keyIndexes.length;i++){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returngetColumnExpression(column).getPrecision();","publicintgetScale(intcolumn)throwsSQLException{","returngetColumnExpression(column).getScale();","publicStringgetTableName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getTableName();","publicStringgetCatalogName(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["formatNumber(details.year,4,buf);","buf.append(\'\');","formatHour12(details.hour,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIME)),Utils.getInteger(8),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIMESTAMP)),Utils.getInteger(23),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(3),Utils.getInteger(3),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLDATETIME)),Utils.getInteger(16),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.JAVA_OBJECT)),Utils.getInteger(65535),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BLOB)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnonrichieste.\"},","{SEQUENCE_HEX_INVALID,\"Sequenzaesadecimalenonvalidoallaposizione{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Sequenceesadecimalenonvalidaallapositione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Erroredisintassiallaposizione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Erroredisintassi,fineinattesadellastringaSQL.\"},","{STXADD_ADDITIONAL_TOK,\"Tokenaggiuntivodopolafinedell\'\'istruzioneSQL.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["num.setScale(scale);","}else","if(num.scale\>scale){","setScale(num.scale);","add(-num.signum,num.value);","privatevoidsub(int[]val2){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["staticintindexOf(charvalue,char[]str,intoffset,intlength){","value|=0x20;","for(intend=offset+length;offset\<end;offset++){","if((str[offset]|0x20)==value)returnoffset;","return-1;","staticintindexOf(intvalue,int[]list){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case106://ddmonyyyy","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.DOUBLE:","returnUtils.double2bytes(((Number)obj).doubleValue());","caseSQLTokenizer.REAL:","returnUtils.float2bytes(((Number)obj).floatValue());","default:throwcreateUnsupportedConversion(dataType,obj,SQLTokenizer.VARBINARY);","finalintgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["switch(token.value){","caseSQLTokenizer.ON:","if(type==Join.RIGHT_JOIN)","returnnewJoin(Join.LEFT_JOIN,right,left,expression(cmd,0));","returnnewJoin(type,left,right,expression(cmd,0));","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnsupportsResultSetType(type);","publicbooleanownInsertsAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersDeletesAreVisible(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicbooleanisReadOnly(){","returnfalse;","publicbooleannullsAreSortedHigh(){","returnfalse;","publicbooleannullsAreSortedLow(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(i+1==count)","returnpage.getValue();","else","page=(IndexNode)page.getValue();","thrownewError();","finalprivateIndexNodefindRows(IndexNodepage,Expressionexpr,booleansearchNullValues,ArrayListnodeList)throwsException{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["TablecreateTable(SSConnectioncon,StringtableName,Columnscolumns,IndexDescriptionsoldIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,tableName,columns,oldIndexes,newIndexes,foreignKeys);","synchronized(tableViews){","tableViews.put(tableName,table);","returntable;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["token=nextToken();","previousToken();","returnselCmd;","privateCommanddelete()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_FROM);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidadd(Stringdescr){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=descr;","privatefinalvoidresize(intnewSize){","String[]dataNew=newString[newSize];"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["privateintsize;","privatelong[]data;","LongLongList(){","this(16);","LongLongList(intinitialSize){","data=newlong[initialSize*2];"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["returnMoney.createFromUnscaledValue(getMoney());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return1;","return0;","caseSQLTokenizer.BIGINT:","longlongValue=param1.getLong();","if(longValue\<0)","return-1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["chars[22]=digits[(daten[offset+9])&0x0F];","chars[24]=digits[(daten[offset+10]\>\>4)&0x0F];","chars[25]=digits[(daten[offset+10])&0x0F];","chars[26]=digits[(daten[offset+11]\>\>4)&0x0F];","chars[27]=digits[(daten[offset+11])&0x0F];","chars[28]=digits[(daten[offset+12]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);","returnbuf.toString();","case112://ISOyyyymmdd","formatNumber(details.year,4,buf);","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return((puffer[offset++]&0xFF)\<\<8)|(puffer[offset++]&0xFF);","intreadInt(){","return((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["packagesmallsql.database;","classIndexScrollStatus{","privatefinalIndexNoderootPage;","privatefinalExpressionsexpressions;//isusedforthedescriptionofASCandDESC","privatefinaljava.util.StacknodeStack=newjava.util.Stack();//TODOperformanceStackdurchnichtsynchronisierteKlasseersetzten","finalvoidreset(){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["packagesmallsql.database;","classCommandDeleteextendsCommandSelect{","CommandDelete(Loggerlog){","super(log);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);"]": ["|project://smallsql/src/smallsql/database/CommandDelete.java|"],
"["}catch(Exceptione){","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getReferenceKeys(SSConnectioncon,StringpkTable,StringfkTable)throwsSQLException{","Listrows=newArrayList();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["e=next;","returnnull;","finalvoidclear(){","Entrytab[]=table;","for(inti=0;i\<tab.length;i++)","tab[i]=null;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","finalvoiddeleteRow(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["break;","caseSQLTokenizer.DAYOFYEAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfYear();","break;","caseSQLTokenizer.HOUR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","switch(tokenType.value){","caseSQLTokenizer.TABLE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["daten[5]=hex2byte(chars,9);","daten[4]=hex2byte(chars,11);","daten[7]=hex2byte(chars,14);","daten[6]=hex2byte(chars,16);","daten[8]=hex2byte(chars,19);","daten[9]=hex2byte(chars,21);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["intcolCount=-1;","for(inti=0;i\<dataSources.size();i++){","DataSourceds=dataSources.get(i);","result|=ds.init(con);","intnextColCount=ds.getTableView().columns.size();","if(colCount==-1)"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["Listrows=newArrayList();","Stringstables=getTables(table);","Shorttype=Utils.getShort(DatabaseMetaData.tableIndexOther);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["oos.writeObject(expr.getObject());","writeLongBinary(baos.toByteArray());","break;","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","writeLongBinary(expr.getBytes());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["publicvoidsetString(intparameterIndex,Stringx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.VARCHAR);","publicvoidsetBytes(intparameterIndex,byte[]x)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.BINARY);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["thrownewjava.lang.UnsupportedOperationException(\"MethodsetTime()notyetimplemented.\");","publicvoidsetTimestamp(intparameterIndex,Timestampx,Calendarcal)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetNull()notyetimplemented.\");","publicvoidsetURL(intparameterIndex,URLx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["publicbooleanisClosed(){","return(commitPages==null);","publicDatabaseMetaDatagetMetaData(){","returnmetadata;","publicvoidsetReadOnly(booleanreadOnly){","publicbooleanisReadOnly(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["checkStatement();","generatedKeys=null;","try{","con.log.println(sql);","SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){","returnfindNodePos(digit,mid+1,end);","}else{","if(start==mid)return-1;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseUNEQUALS:returnleft.getDouble()!=right.getDouble();","caseBETWEEN:","double_left=left.getDouble();","return_left\>=right.getDouble()&&right2.getDouble()\>=_left;","default:","returngetDouble()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(obj==null)returnnull;","if(dataType==SQLTokenizer.BIT){","return(obj==Boolean.TRUE)?\"1\":\"0\";","returnobj.toString();","byte[]getBytes()throwsException{","returngetBytes(getObject(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["formatNumber(details.year%100,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.day,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["tmpFile.renameTo(oldFile);//restoretheoldtable","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","tmpFile.delete();","staticvoiddropView(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropView(tableName);","voiddropView(StringviewName)throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(st.getGeneratedKeyNames()!=null)","generatedKeysType=1;","if(st.getGeneratedKeyIndexes()!=null)","generatedKeysType=2;","StoreImplstore=table.getStoreInsert(con);","for(intc=0;c\<matrix.length;c++){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseADD:returnleft.getFloat()+right.getFloat();","caseSUB:returnleft.getFloat()-right.getFloat();","caseMUL:returnleft.getFloat()*right.getFloat();","caseDIV:returnleft.getFloat()/right.getFloat();","caseNEGATIVE:return-left.getFloat();","caseMOD:returnleft.getFloat()%right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];","offset=listEnum.offsetStack[listEnum.stack];","firstNode=false;","finallonggetPrevious(LongTreeListEnumlistEnum){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["Stringcatalog;","StringtableName=catalog=nextIdentifier();","switch(tokenType.value){","caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();","switch(type){","store.setCurrentOffsetInPage(offsetInPage+size);","raFile.close();"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["page=data;","pageSize=size;","@Override","longcommit()throwsSQLException{","try{","if(raFile!=null&&page!=null){"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["publicbooleansupportsConvert(intfromType,inttoType){","returntrue;","publicbooleansupportsTableCorrelationNames(){","returntrue;","publicbooleansupportsDifferentTableCorrelationNames(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["data[i].drop(database);","voidclose()throwsException{","for(inti=0;i\<size;i++){","data[i].close();","voidadd(IndexDescriptionsindexes)throwsSQLException{","for(inti=0;i\<indexes.size;i++){"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["testClosedConnection();","if(!returnNull&&database==null)throwSmallSQLException.create(Language.DB_NOTCONNECTED);","returndatabase;","ObjectgetMonitor(){","returnthis;","publicStatementcreateStatement()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["staticfinalintDISTINCT=262;","staticfinalintCASE=263;","staticfinalintWHEN=264;","staticfinalintTHEN=265;","staticfinalintELSE=266;","staticfinalintEND=267;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Filefile=getFile(database,name);","if(!file.exists())","throwSmallSQLException.create(Language.INDEX_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());","ByteBufferbuffer=ByteBuffer.allocate(8);","raFile.read(buffer);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateStringgetErrorString(SQLTokentoken,StringmiddleMsgCode,","ObjectmiddleMsgParam){","StringBufferbuffer=newStringBuffer(1024);","Stringmiddle=SmallSQLException.translateMsg(","middleMsgCode,newObject[]{middleMsgParam});"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["page=add(page,rowOffset,numericToBinarySortOrder(expr.getNumeric()),isLastValues);","break;","default:","thrownewError(String.valueOf(expr.getDataType()));","finalvoidremoveValue(longrowOffset,Expressionsexpressions)throwsException{","ArrayListnodeList=newArrayList();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["case2:","if(right!=null){","right2=param;","break;","if(inList!=null&&idx\>0&&idx\<=inList.length){","inList[idx-1]=param;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.DECIMAL:","value=newMutableNumeric(expr.getNumeric());","break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalintSQL_DOUBLE=1356;","staticfinalintSQL_FLOAT=1357;","staticfinalintSQL_INTEGER=1358;","staticfinalintSQL_LONGVARBINARY=1359;","staticfinalintSQL_LONGVARCHAR=1360;","staticfinalintSQL_REAL=1361;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["sizePhysical=readInt();","nextPageOffset=readInt();","filePosUpdated=readLong();","finalprivateStoreImplloadUpdatedStore()throwsException{","if(status!=UPDATE_POINTER)returnthis;","StoreImplstoreTemp=table.getStore(((TableStorePage)storePage).con,filePosUpdated,type);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["StringTokenizertok=newStringTokenizer(propsString,\";\");","while(tok.hasMoreTokens()){","StringkeyValue=tok.nextToken().trim();","if(keyValue.length()\>0){","idx1=keyValue.indexOf(\'=\');","if(idx1\>0){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["returnlock;","prevLock=lock;","lock=lock.nextLock;","lock=newTableStorePage(con,this,LOCK_WRITE,readlock.fileOffset);","if(prevLock!=null){","prevLock.nextLock=lock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["privateStorePagestorePage;","privatelongfilePos;//Positioninthefile","privateintsizeUsed;","privateintsizePhysical;","privateintnextPageOffset;","privatelongfilePosUpdated;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnreadInt();","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(long)(readNumeric().doubleValue()*10000L);","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Expressioncondition;//thejoincondition,thepartaftertheON","privateinttype;","RowSourceleft;//thelefttable,vieworrowsourceofthejoin","RowSourceright;","privatebooleanisAfterLast;","privateLongLongListrowPositions;//neededforgetRowPosition()andsetRowPosition()"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["booleanresult;","if(fullReturnCounter\>=0){","do{","if(fullReturnCounter\>=fullRowCount){","returnfalse;","right.next();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnnewDateTime(readTime(),SQLTokenizer.TIME);","caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE);","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]-1)==-1;","if(uebertrag){","signum=-signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returntrue;","returnfalse;","privateintcreateJoinScrollIndex(ExpressionArithmeticcond,ExpressionsleftEx,ExpressionsrightEx,intoperation)throwsException{","Expression[]params=cond.getParams();","intop=cond.getOperation();","if(op==ExpressionArithmetic.AND){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["privatevoidcompile(SSConnectioncon)throwsException{","TableViewtableView=con.getDatabase(false).getTableView(con,name);","if(!(tableViewinstanceofTable))","throwSmallSQLException.create(Language.VIEW_INSERT);","table=(Table)tableView;","tableTimestamp=table.getTimestamp();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIT)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TINYINT)),Utils.getInteger(3),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIGINT)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARBINARY)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARBINARY)),Utils.getInteger(65535),\"0x\",null,\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BINARY)),Utils.getInteger(65535),\"0x\",null,\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["longrowPosition=rowList.getNext(longListEnum);","if(rowPosition!=-1){","right.setRowPosition(rowPosition);","returntrue;","rowList=null;","Objectrows;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["MutableNumeric(intcomplement){","if(complement==0){","signum=0;","value=EMPTY_INTS;","}else{","value=newint[1];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnstr1;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr1=param1.getString();","Stringstr2=param2.getString();","intlength=str2.length();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["if(needGeneratedKeys){","keyColumnNames=newStrings();","keys=newArrayList();","if(st.getGeneratedKeyNames()!=null)","generatedKeysType=1;","if(st.getGeneratedKeyIndexes()!=null)"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returnfalse;","privateintcreateJoinScrollIndex(ExpressionArithmeticcond,ExpressionsleftEx,ExpressionsrightEx,intoperation)throwsException{","Expression[]params=cond.getParams();","intop=cond.getOperation();","if(op==ExpressionArithmetic.AND){","Expressionparam0=params[0];"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnnewMutableNumeric(readInt(),4);","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(longList!=null){","longrowOffset=scroll?","longList.getNext(longListEnum):","longList.getPrevious(longListEnum);","if(rowOffset\<0){","longList=null;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","intsize=param1.getInt();","if(size\<0){","returnnull;","char[]buffer=newchar[size];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","page=add(page,rowOffset,numericToBinarySortOrder(expr.getNumeric()),isLastValues);","break;","default:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticfinalintACOS=1001;","staticfinalintASIN=1002;","staticfinalintATAN=1003;","staticfinalintATAN2=1004;","staticfinalintCEILING=1005;","staticfinalintCOS=1006;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StringgetString()throwsjava.lang.Exception{","if(isNull())returnnull;","returngetObject().toString();","finalprivateStringgetString(StringlVal,StringrVal)throwsjava.lang.Exception{","switch(operation){","caseADD:returnlVal+rVal;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicfloatgetFloat(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returntrue;","returnfalse;","publicbooleanownUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanownDeletesAreVisible(inttype){","returnsupportsResultSetType(type);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{ROWS_WRONG_MAX,\"01000\"},","{ROW_LOCKED,\"01000\"},","{ROW_DELETED,\"01000\"},","{SAVEPT_INVALID_TRANS,\"01000\"},","{SAVEPT_INVALID_DRIVER,\"01000\"},","{ALIAS_UNSUPPORTED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","store.page=newbyte[(int)filePos+PAGE_CONTROL_SIZE];","store.filePos=-1;","break;","caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintVARCHAR=353;","staticfinalintNVARCHAR=355;","staticfinalintSYSNAME=357;","staticfinalintLONGVARCHAR=359;","staticfinalintLONGNVARCHAR=360;","staticfinalintLONG=361;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TIMESTAMP:","offset+=8;","break;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","intcount=readShort()&0xFFFF;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnbuf.toString();","case112://ISOyyyymmdd","formatNumber(details.year,4,buf);","formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(param1.getDataType()){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicstaticfinalStringMINUTES_TOOLARGE=\"SS-0254\";","publicstaticfinalStringSECS_TOOLARGE=\"SS-0255\";","publicstaticfinalStringMILLIS_TOOLARGE=\"SS-0256\";","publicstaticfinalStringDATETIME_INVALID=\"SS-0257\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_OPER=\"SS-0280\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_OPER=\"SS-0281\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returncolumnExpressions.get(colIdx).getBytes();","intgetDataType(intcolIdx){","returncolumnExpressions.get(colIdx).getDataType();","voidbeforeFirst()throwsException{","commandSelect.beforeFirst();","booleanisBeforeFirst()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["finalbyte[]getBytes()throwsException{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringinput=param1.getString();","returngetString(input);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["patchExpressions(expr);","returnexpr;","finalvoidexecute()throwsException{","super.execute();","from.execute();","NextRow:"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["finalExpression[]toArray(){","Expression[]array=newExpression[size];","System.arraycopy(data,0,array,0,size);","returnarray;","privatefinalvoidresize(intnewSize){","Expression[]dataNew=newExpression[newSize];"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["{UNSUPPORTED_DATATYPE_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_FUNC,\"01000\"},","{UNSUPPORTED_CONVERSION_FUNC,\"01000\"},","{UNSUPPORTED_TYPE_CONV,\"01000\"},","{UNSUPPORTED_TYPE_SUM,\"01000\"},","{UNSUPPORTED_TYPE_MAX,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["super.printStackTrace(ps);","publicvoidprintStackTrace(PrintWriterpw){","if(!isInit)return;","super.printStackTrace(pw);","staticSQLExceptioncreate(StringmessageCode){","assert(messageCode!=null):\"Fillparameters\";"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["caseSQLTokenizer.WHERE:","where(cmd);","break;","caseSQLTokenizer.GROUP:","group(cmd);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{DATETIME_INVALID,\"\'\'{0}\'\'isaninvalidDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Unsupportedconversiontodatatype\'\'{0}\'\'fromdatatype\'\'{1}\'\'foroperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Unsupporteddatatype\'\'{0}\'\'foroperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Unsupporteddatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Unsupportedconversiontodatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"UnsupportedtypeforCONVERTfunction:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.REAL:","return(long)getFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"FOREIGN\",FOREIGN);","addKeyWord(\"KEY\",KEY);","addKeyWord(\"UNIQUE\",UNIQUE);","addKeyWord(\"CLUSTERED\",CLUSTERED);","addKeyWord(\"NONCLUSTERED\",NONCLUSTERED);","addKeyWord(\"REFERENCES\",REFERENCES);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticfinalintVALUE=1;","staticfinalintNAME=2;","staticfinalintFUNCTION=3;","staticfinalintGROUP_BY=11;","staticfinalintCOUNT=12;","staticfinalintSUM=13;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["writeLong(expr.getMoney());","break;","caseSQLTokenizer.SMALLMONEY:","writeInt((int)expr.getMoney());","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfromEntry.getBoolean(colIdx);","intgetInt()throwsException{","returnfromEntry.getInt(colIdx);","longgetLong()throwsException{","returnfromEntry.getLong(colIdx);","floatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["throwSmallSQLException.create(Language.VALUE_STR_TOOLARGE);","if(varchar)lengthColumn=length;","intnewSize=offset+2+2*lengthColumn;","if(newSize\>page.length)resizePage(newSize);","writeShort(lengthColumn);","writeChars(daten);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row=0;","returnfalse;","booleannext()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()\<0){","longrowPosition=scrollStatus.getRowOffset(true);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(nodeList!=null)nodeList.add(node);","if(++i==length){","returnnode;","if(equals(node.getRemainderValue(),key,i)){","returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,char[]key,booleanisLast)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(typeLeft==typeRight)returntypeLeft;","intdataTypeIdx=Math.min(Utils.indexOf(typeLeft,DatatypeRange),Utils.indexOf(typeRight,DatatypeRange));","if(dataTypeIdx\<0)thrownewError(\"getDataType():\"+typeLeft+\",\"+typeRight);","returnDatatypeRange[dataTypeIdx];","staticfinalintOR=11;//OR","staticfinalintAND=21;//AND"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnFloat.parseFloat(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returndatabase.getName();","publicvoidsetTransactionIsolation(intlevel)throwsSQLException{","if(!metadata.supportsTransactionIsolationLevel(level)){","throwSmallSQLException.create(Language.ISOLATION_UNKNOWN,String.valueOf(level));","isolationLevel=level;","publicintgetTransactionIsolation(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["if(updatePointer.sharedPageData){","updatePointer.page=newbyte[PAGE_CONTROL_SIZE];","updatePointer.writeFinsh(con);","status=DELETED;","if(sharedPageData){","page=newbyte[PAGE_CONTROL_SIZE];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["writeInt((int)((time/1000)%86400));","longreadTime(){","returnreadInt()*1000L;","voidwriteDate(longdate){","writeInt((int)(date/86400000));","longreadDate(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnvalue==EMPTY;","finalvoidclear(){","value=EMPTY;","finalvoidset(Objectvalue,int_dataType,intlength)throwsSQLException{","set(value,_dataType);","this.length=length;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returncmd;","caseSQLTokenizer.SERIALIZABLE:","cmd.isolationLevel=Connection.TRANSACTION_SERIALIZABLE;","returncmd;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(cmdSel.columnExpressions.size()!=1)","throwSmallSQLException.create(Language.SUBQUERY_COL_COUNT,newInteger(cmdSel.columnExpressions.size()));","index.clear();","while(cmdSel.next()){","try{","index.addValues(0,cmdSel.columnExpressions);"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","offset+=4;","break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.sql.*;","classForeignKey{","finalStringpkTable;","finalStringfkTable;","finalIndexDescriptionpk;","finalIndexDescriptionfk;"]": ["|project://smallsql/src/smallsql/database/ForeignKey.java|"],
"["returnUtils.doubleToMoney(getDouble());","StringgetString()throwsException{","if(isNull())returnnull;","returngetObject().toString();","finalintgetDataType(){","returnExpressionArithmetic.getBestNumberDataType(param1.getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["caseSQLTokenizer.DECIMAL:","page=add(page,rowOffset,numericToBinarySortOrder(expr.getNumeric()),isLastValues);","break;","default:","thrownewError(String.valueOf(expr.getDataType()));","finalvoidremoveValue(longrowOffset,Expressionsexpressions)throwsException{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicfloatgetFloat(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value+=expr.getFloat();","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnrowIdx==rowList.size()-1&&currentRow!=null;","finalbooleanisAfterLast(){","returnrowIdx\>=rowList.size()||rowList.size()==0;","finalvoidafterLast(){","rowIdx=rowList.size();","currentRow=null;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return(int)((DateTime)obj).getTimeMillis();","default:","Stringstr=obj.toString().trim();","try{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["voidput(Stringname,TableViewtableView){","map.put(getUniqueKey(name),tableView);","TableViewremove(Stringname){","return(TableView)map.remove(getUniqueKey(name));","Collectionvalues(){","returnmap.values();"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["FileChannelraFile;","TransactionStep(FileChannelraFile){","this.raFile=raFile;","abstractlongcommit()throwsSQLException;","abstractvoidrollback()throwsSQLException;","voidfreeLock(){/*defaultnothing*/}"]": ["|project://smallsql/src/smallsql/database/TransactionStep.java|"],
"["value*=factor;","}else{","for(inti=0;i\>places;i--){","factor*=10;","value/=factor;","value-=value%1;//moduloalsoworkwithvalueslargerlong"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["returnnum;","caseNEGATIVE:","MutableNumericnum=left.getNumeric();","num.setSignum(-num.getSignum());","returnnum;","caseMOD:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"SQL_VARIANT\",JAVA_OBJECT);//aliasforMSSQLServerdatatypeSQL_VARIANT","addKeyWord(\"JAVA_OBJECT\",JAVA_OBJECT);","staticfinalintD=400;","staticfinalintT=401;","staticfinalintTS=402;","staticfinalintFN=403;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["nodeStack.pop();","continue;","}else{","status.idx=status.nodes.length;//topreventproblemswithscrollbackaftermultiplecallsaftertheend.","return-1;","IndexNodenode=status.nodes[idx];"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["try{","raFile.close();","}catch(Exceptione2){","DriverManager.println(e2.toString());","throwSmallSQLException.createFromException(e);","FilegetFile(Databasedatabase){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseSQLTokenizer.TRUNCATE:","returntruncate();","default:","thrownewError();","ExpressionparseExpression(Stringexpr)throwsSQLException{","this.sql=expr.toCharArray();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["tokenIdx--;","privateSQLTokennextToken(){","if(tokenIdx\>=tokens.size()){","tokenIdx++;//mustbeeverincrementthatthemethodpreviousToken()isworking","returnnull;","return(SQLToken)tokens.get(tokenIdx++);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"DELETE\",DELETE);","addKeyWord(\"INTO\",INTO);","addKeyWord(\"UPDATE\",UPDATE);","addKeyWord(\"CREATE\",CREATE);","addKeyWord(\"DROP\",DROP);","addKeyWord(\"ALTER\",ALTER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticfinalintgetSQLDataType(inttype){","switch(type){","caseSQLTokenizer.BIT:","returnTypes.BIT;","caseSQLTokenizer.BOOLEAN:","returnTypes.BOOLEAN;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["writeByte(num.getInternalValue().length);","writeByte(num.getScale());","writeByte(num.getSignum());","for(inti=0;i\<num.getInternalValue().length;i++){","writeInt(num.getInternalValue()[i]);","MutableNumericreadNumeric(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(!result){","switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","if(isOuterValid){","isOuterValid=false;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["SQLTokentokenType=nextToken(COMMANDS_ALTER);","Stringcatalog;","StringtableName=catalog=nextIdentifier();","switch(tokenType.value){","caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["selCmd.addColumnExpression(newExpressionName(\"*\"));","nextToken(MISSING_ALL);","nextToken(MISSING_SELECT);","union.addDataSource(newViewResult(con,singleSelect()));","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.ORDER){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case\'T\':","c=\'3\';","break;","case\'L\':","c=\'4\';","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["if(name==null){","returnnull;","if(name.startsWith(\"file:\")){","name=name.substring(5);","Filefile;","try{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["break;","default:thrownewError();","ExpressionValue(Objectvalue,intdataType){","super(VALUE);","this.value=value;","this.dataType=dataType;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.BLOB:","returnUtils.bytes2hex(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME).toString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.TABLE:","Database.dropTable(con,catalog,name);","break;","caseSQLTokenizer.VIEW:","Database.dropView(con,catalog,name);","break;"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["SQLTokenizer.UNIQUEIDENTIFIER,","SQLTokenizer.NVARCHAR,","SQLTokenizer.NCHAR,","SQLTokenizer.VARCHAR,","SQLTokenizer.CHAR,","SQLTokenizer.LONGVARCHAR,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Stringstr=obj.toString();","if(str.indexOf(\'-\')\>0||str.indexOf(\':\')\>0)","returnDateTime.parse(str);","try{","returnLong.parseLong(str);","}catch(NumberFormatExceptione){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["floatgetFloat()throwsException{","returngetFloat(getObject(),dataType);","staticfloatgetFloat(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["continue;","updateValues[i]=null;","result.insertRow(updateValues);","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicStringgetString(inti)throwsSQLException{","try{","Stringobj=getValue(i).getString();","wasNull=obj==null;","returnobj;","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["finalpublicintexecuteUpdate(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getUpdateCount();","finalpublicbooleanexecute(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getResultSet()!=null;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["for(inti=value.length-1;i\>=0;i--){","longv=(value[i]&0xFFFFFFFFL)*factor+carryover;","value[i]=(int)v;","carryover=v\>\>32;","if(carryover\>0){","resizeValue((int)carryover);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["while(true){","intnextEntry=(offset\<0)?-1:getUnsignedShort();","if(nextEntry\>=0){","result|=(((long)nextEntry)\<\<shift);","if(listEnum.stack\>=3){","listEnum.offsetStack[listEnum.stack]=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intlength=param2.getInt();","if(bytes.length\<=length)returnbytes;","byte[]b=newbyte[length];","System.arraycopy(bytes,bytes.length-length,b,0,length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["privatefinalFileChannelmaster;","privatefinalWeakHashMapconnections=newWeakHashMap();","staticDatabasegetDatabase(Stringname,SSConnectioncon,booleancreate)throwsSQLException{","if(name==null){","returnnull;","if(name.startsWith(\"file:\")){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalbooleanfirst()throwsException{","isCurrentRow=rowSource.first();","while(isCurrentRow&&!isValidRow()){","isCurrentRow=rowSource.next();","row=1;","returnisCurrentRow;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["abstractStringgetString(intoffset,intdataType)throwsException;","booleanisValidPage(){","returnfalse;","abstractvoidscanObjectOffsets(int[]offsets,intdataTypes[]);","abstractintgetUsedSize();","abstractlonggetNextPagePos();"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnTypes.TIMESTAMP;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","returnTypes.CHAR;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["nextToken(MISSING_PARENTHESIS_R);","col.setPrecision(displaySize);","break;","caseSQLTokenizer.SYSNAME:","col.setPrecision(255);","dataType=SQLTokenizer.VARCHAR;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicstaticfinalStringROW_NOCURRENT=\"SS-0521\";","publicstaticfinalStringROWS_WRONG_MAX=\"SS-0522\";","publicstaticfinalStringROW_LOCKED=\"SS-0523\";","publicstaticfinalStringROW_DELETED=\"SS-0524\";","publicstaticfinalStringSAVEPT_INVALID_TRANS=\"SS-0550\";","publicstaticfinalStringSAVEPT_INVALID_DRIVER=\"SS-0551\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnresult;","listEnum.offsetStack[listEnum.stack]=offset+pointerSize;","offset=getPointer();","shift-=16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack]=result;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|","|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["else","returngetString(lObj.toString(),rObj.toString());","caseSQLTokenizer.LONGVARBINARY:","returngetBytes();","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintNCLOB=363;","staticfinalintUNIQUEIDENTIFIER=370;","staticfinalintJAVA_OBJECT=371;","static{","addKeyWord(\"BIT\",BIT);","addKeyWord(\"BOOLEAN\",BOOLEAN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return4;","caseSQLTokenizer.TIMESTAMP:","return9;//nanoseconds","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return38;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["caseSQLTokenizer.DATABASE:","if(name.startsWith(\"file:\"))","name=name.substring(5);","Filedir=newFile(name);","if(!dir.isDirectory()||","!newFile(dir,Utils.MASTER_FILENAME).exists())"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["staticvoiddrop(Databasedatabase,Stringname)throwsException{","booleanok=newFile(Utils.createTableViewFileName(database,name)).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voiddrop(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.CREATE,-1);","if(storePage==null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.INT:","returngetIntImpl();","caseSQLTokenizer.BIGINT:","returngetLongImpl();","caseSQLTokenizer.REAL:","returngetFloatImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateintrow;//currentrownumber","JoinScrollscroll;","Join(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;","this.condition=condition;","this.left=left;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["do{","isCurrentRow=rowSource.next();","}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row++;","returnisCurrentRow;","finalbooleanlast()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["caseSQLTokenizer.SMALLMONEY:","page=add(page,rowOffset,longToBinarySortOrder(expr.getLong()),isLastValues,4);","break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnbuf.toString();","case105://italianodd-mm-yyyy","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["addKeyWord(\"NONCLUSTERED\",NONCLUSTERED);","addKeyWord(\"REFERENCES\",REFERENCES);","addKeyWord(\"UNION\",UNION);","addKeyWord(\"ALL\",ALL);","addKeyWord(\"DISTINCT\",DISTINCT);","addKeyWord(\"CASE\",CASE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{UNSUPPORTED_CONVERSION,\"Can\'\'tconvert\'\'{0}\'\'[{1}]to\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionINSERT.\"},","{SUBSTR_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringvaluetoolargeforcolumn.\"},","{VALUE_BIN_TOOLARGE,\"Binaryvaluewithlength{0}tolargeforcolumnwithsize{1}.\"},","{VALUE_NULL_INVALID,\"Nullvaluesarenotvalidforcolumn\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["intoffset3=0;","offset=0;","intshift=48;","booleanfirstNode=true;//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","booleanfirstNode1=true;","booleanfirstNode2=true;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_INDEX);","buffer.putInt(INDEX_VERSION);","buffer.position(0);","raFile.write(buffer);","finalvoidwriteExpression(intcolumnIdx,ExpressionvalueExpression){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(unique){","if(value!=null)throwSmallSQLException.create(Language.KEY_DUPLICATE);","value=newLong(rowOffset);","}else{","LongTreeListlist=(LongTreeList)value;","if(list==null){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{SEQUENCE_HEX_INVALID,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"SyntaxErrorbeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"SyntaxError,unerwartetesEndedesSQLStrings.\"},","{STXADD_ADDITIONAL_TOK,\"ZusÃ¤tzlicheZeichennachdemEndedesSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Bezeichnererwartet.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?1:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["expr=newExpressionFunctionSqrt();","break;","caseSQLTokenizer.TAN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionTan();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BIGINT:","return((Number)obj).intValue()!=0;","caseSQLTokenizer.REAL:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["intnewSize=offset+daten.length;","if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,0,page,offset,daten.length);","offset+=daten.length;","voidwriteBytes(byte[]daten,intoff,intlength){","intnewSize=offset+length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row++;","lastRowOffset=rowSource.getRowPosition();","insertedRows.add(lastRowOffset);","returntrue;","rowSource.noRow();","row=(getRowCount()\>0)?getRowCount()+1:0;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["expr=newExpressionFunctionOctetLen();","break;","caseSQLTokenizer.REPEAT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRepeat();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?10000:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["abstractbooleangetBoolean(intcolIdx)throwsException;","abstractintgetInt(intcolIdx)throwsException;","abstractlonggetLong(intcolIdx)throwsException;","abstractfloatgetFloat(intcolIdx)throwsException;","abstractdoublegetDouble(intcolIdx)throwsException;","abstractlonggetMoney(intcolIdx)throwsException;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetNumericImpl();","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(getMoneyImpl(),4);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intcount=tableColumns.size();","StoreImplstore=table.getStoreInsert(con);","for(inti=0;i\<count;i++){","ColumntableColumn=tableColumns.get(i);","Expressionsrc=updateValues[i];","if(src==null)src=tableColumn.getDefaultValue(con);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["for(inti=0;i\<inList.length;i++){","right=inList[i];","if(getBoolean())returntrue;","}finally{","right=null;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["invalidParamCount=true;","expr=null;//Onlyforthecompiler","break;","expr=newExpressionName(Expression.SUM);","expr.setParams(params);","Expressionexpr2=newExpressionName(Expression.COUNT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!result){","switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","isOuterValid=false;","isBeforeFirst=false;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["if(++rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","finalbooleanresult=rowSource.next();","if(result){","rowList.add(rowSource.getRowPosition());"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["privatevoidinitValue(Expressionexpr)throwsException{","dataType=expr.getDataType();","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finallongget2(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[(idx\<\<1)+1];","finalvoidadd(longvalue1,longvalue2){","intsize2=size\<\<1;"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["row=0;","booleanfirst()throwsException{","beforeFirst();","returnnext();","booleannext()throwsException{","if(isAfterLast)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["addKeyWord(\"WEEK\",WEEK);","addKeyWord(\"YEAR\",YEAR);","staticfinalintSQL_TSI_FRAC_SECOND=1250;","staticfinalintSQL_TSI_SECOND=1251;","staticfinalintSQL_TSI_MINUTE=1252;","staticfinalintSQL_TSI_HOUR=1253;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalpublicvoidsetMaxFieldSize(intmax){","maxFieldSize=max;","finalpublicintgetMaxRows(){","returnmaxRows;","finalpublicvoidsetMaxRows(intmax)throwsSQLException{","if(max\<0)"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["returnroot;","privatefinalvoidsaveNode(IndexNodenode){","intlength=nodes.length;","IndexNode[]temp=newIndexNode[length+1];","if(length==0){","temp[0]=node;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["addKeyWord(\"DAYNAME\",DAYNAME);","addKeyWord(\"DAYOFMONTH\",DAYOFMONTH);","addKeyWord(\"DAYOFWEEK\",DAYOFWEEK);","addKeyWord(\"DAYOFYEAR\",DAYOFYEAR);","addKeyWord(\"DAY\",DAY);","addKeyWord(\"HOUR\",HOUR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnnewDate(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(StringcolumnName,Calendarcal)throwsSQLException{","returngetDate(findColumn(columnName),cal);","publicTimegetTime(intcolumnIndex,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["this.distinctColumns=columns;","finalvoidexecute()throwsException{","rowSource.execute();","index=newIndex(true);","finalbooleanisScrollable(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["tableViews.put(name,table);","TablecreateTable(SSConnectioncon,StringtableName,Columnscolumns,IndexDescriptionsoldIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,tableName,columns,oldIndexes,newIndexes,foreignKeys);","synchronized(tableViews){","tableViews.put(tableName,table);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["importjava.util.Map;","importjava.util.Properties;","importsmallsql.database.language.Language;","publicclassSSConnectionimplementsConnection{","privatefinalbooleanreadonly;","privateDatabasedatabase;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["privateint[]value;","privateintscale;","privateintsignum;","MutableNumeric(byte[]complement){","setValue(complement);","privatevoidsetValue(byte[]complement){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["switch(tokenType.value){","caseSQLTokenizer.TABLE:","returnalterTable(catalog,tableName);","default:","Object[]param={\"ALTER\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ExpressionValue(){","super(VALUE);","clear();","ExpressionValue(inttype){","super(type);","switch(type){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["MutableNumeric(Stringval){","this(newBigDecimal(val));","MutableNumeric(BigDecimalbig){","this(big.unscaledValue().toByteArray());","scale=big.scale();","MutableNumeric(intsignum,int[]value,intscale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\<0)//castneededforCompiler1.5","value=str;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","finalvoidinsertRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_INSERT);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["row[17]=col.isNullable()?\"YES\":\"NO\";//IS_NULLABLE","rows.add(row);","}catch(Exceptione){","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(operation!=op){","return0;","if(operation==ExpressionArithmetic.EQUALS){","Expressionparam0=params[0];","Expressionparam1=params[1];","Expressionscolumns0=Utils.getExpressionNameFromTree(param0);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["num.floor();","returnnum;","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDouble());","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["caseSQLTokenizer.MONEY:","return19;","caseSQLTokenizer.REAL:","return7;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.INSERT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull()||param4.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["raFile.read(buffer);","value=((long)(page[0])\<\<56)|","((long)(page[1]&0xFF)\<\<48)|","((long)(page[2]&0xFF)\<\<40)|","((long)(page[3]&0xFF)\<\<32)|","((long)(page[4]&0xFF)\<\<24)|"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["longintValue=Double.doubleToLongBits(value);","return(intValue\<0)?","~intValue:","intValue^0x8000000000000000L;","finalstaticprivateintshortToBinarySortOrder(intvalue){","returnvalue^0x8000;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["SQLTokenizer.CLOB,","SQLTokenizer.VARBINARY,","SQLTokenizer.BINARY,","SQLTokenizer.LONGVARBINARY,","SQLTokenizer.BLOB,","SQLTokenizer.NULL};"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnparam3.getNumeric();","ObjectgetObject()throwsException{","if(param1.getBoolean())","returnparam2.getObject();","returnparam3.getObject();","StringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["((Money)value).value=Math.max(((Money)value).value,expr.getMoney());","break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateExpressioncurrentGroup;//Validateifthecurrentrowofcmdispartofthecurrentgroup","privateRowSourcefrom;","privateExpressionsgroupBy;//thelistofExpressionsintheGROUPBYclause","privateExpressionsexpressions=newExpressions();//ListofExpression","privateExpressionsinternalExpressions=newExpressions();//alistofAggregateFunctionandColNamesfromSELECT,GROUPBYandHAVING","GroupResult(CommandSelectcmd,RowSourcefrom,ExpressionsgroupBy,Expressionhaving,ExpressionsorderBy)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["LongTreeList(StoreImplinput){","intreadSize=input.readInt();","data=input.readBytes(readSize);","finalvoidsave(StoreImploutput){","output.writeInt(size);","output.writeBytes(data,0,size);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["row=0;","store=Store.NOROW;","@Override","finalbooleanisNull(intcolIdx)throwsException{","returnstore.isNull(offsets[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["cmd.isolationLevel=Connection.TRANSACTION_SERIALIZABLE;","returncmd;","default:","thrownewError();","privateCommandexecute()throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Execute\");"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintTABLE_VIEW_VERSION=2;","staticfinalintTABLE_VIEW_OLD_VERSION=1;","finalStringname;","finalColumnscolumns;","privatelongtimestamp=System.currentTimeMillis();","staticfinalintLOCK_NONE=0;//readonREAD_COMMITEDandREAD_UNCOMMITED"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["rowIdx=rowList.size()-1;","if(rowIdx\>=0)","rowSource.setRowPosition(rowList.get(rowIdx));","booleanresult;","while((result=next())&&row-1\>rowIdx){/*scrollforward*/}","returnresult;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["intgetFunction(){returnSQLTokenizer.FLOOR;}","doublegetDouble()throwsException{","returnMath.floor(param1.getDouble());","StringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionFloor.java|"],
"["SQLTokentoken=nextToken();","UnionAllunion=null;","while(token!=null&&token.value==SQLTokenizer.UNION){","if(union==null){","union=newUnionAll();","union.addDataSource(newViewResult(con,selCmd));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatevoidsub(int[]val2){","longtemp=0;","intv1=value.length;","for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)-(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>=32);","value[v1]=(int)temp;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["lobs.close();","lobs=null;","privatevoidwrite(SSConnectioncon)throwsException{","raFile=createFile(con,database);","firstPage=8;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.CREATE);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returngetString(left.getString(),right.getString());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["table[i]=newEntry(key,value,table[i]);","if(size++\>=threshold)","resize(2*table.length);","returnnull;","finalprivatevoidresize(intnewCapacity){","Entry[]newTable=newEntry[newCapacity];"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["Object[][]data=con.getDatabase(false).getReferenceKeys(con,primaryTable,foreignTable);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetTypeInfo()throwsSQLException{","String[]colNames={\"TYPE_NAME\",\"DATA_TYPE\",\"PRECISION\",\"LITERAL_PREFIX\",\"LITERAL_SUFFIX\",\"CREATE_PARAMS\",\"NULLABLE\",\"CASE_SENSITIVE\",\"SEARCHABLE\",\"UNSIGNED_ATTRIBUTE\",\"FIXED_PREC_SCALE\",\"AUTO_INCREMENT\",\"LOCAL_TYPE_NAME\",\"MINIMUM_SCALE\",\"MAXIMUM_SCALE\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"NUM_PREC_RADIX\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["char[]daten=newchar[length];","for(inti=0;i\<length;i++){","daten[i]=(char)((page[offset++]&0xFF)|(page[offset++]\<\<8));","returndaten;","voidwriteLongString(Stringdaten)throwsException{","char[]chars=daten.toCharArray();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["cmd.isolationLevel=Connection.TRANSACTION_READ_UNCOMMITTED;","break;","default:","thrownewError();","returncmd;","caseSQLTokenizer.REPEATABLE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{STXADD_JOIN_INVALID,\"01000\"},","{STXADD_FROM_PAR_CLOSE,\"01000\"},","{STXADD_KEYS_REQUIRED,\"01000\"},","{STXADD_NOT_NUMBER,\"01000\"},","{STXADD_COMMENT_OPEN,\"01000\"},","};"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["addKeyWord(\"INT\",INT);","addKeyWord(\"SERIAL\",COUNTER);//aliasforMySQLandPostgreSQL","addKeyWord(\"COUNTER\",COUNTER);","addKeyWord(\"BIGINT\",BIGINT);","addKeyWord(\"SMALLMONEY\",SMALLMONEY);","addKeyWord(\"MONEY\",MONEY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["super.setParams(newExpression[]{left});","ExpressionArithmetic(Expressionleft,Expressionright,intoperation){","super(FUNCTION);","this.left=left;","this.right=right;","this.operation=operation;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnSQLTokenizer.BOOLEAN;","default:","returngetDataType(left,right);","intgetScale(){","intdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.COMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_COMMITTED;","break;","caseSQLTokenizer.UNCOMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_UNCOMMITTED;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnfalse;//TODOperformance,ifleftandrightarescrollablethenthisshouldalsoscrollable","voidbeforeFirst()throwsException{","scroll.beforeFirst();","isAfterLast=false;","row=0;","booleanfirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["caseSQLTokenizer.GREATER_EQU:returnGRE_EQU;","caseSQLTokenizer.LESSER:returnLESSER;","caseSQLTokenizer.LESSER_EQU:returnLES_EQU;","caseSQLTokenizer.UNEQUALS:returnUNEQUALS;","caseSQLTokenizer.BETWEEN:returnBETWEEN;","caseSQLTokenizer.LIKE:returnLIKE;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.util.*;","importjava.io.*;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;","finalclassDatabase{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returngetString();","caseSQLTokenizer.LONGVARBINARY:","returngetBytes();","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["continuenextCol;","default:","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","privateSQLTokenaddColumn(SQLTokentoken,CommandTablecmdCreate)throwsSQLException{","StringcolName=getIdentifier(token);","Columncol=datatype(false);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longgetMoney(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getObject();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["{GENER_KEYS_UNREQUIRED,\"GeneratedKeyswurdennichtangefordert.\"},","{SEQUENCE_HEX_INVALID,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"SyntaxErrorbeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"SyntaxError,unerwartetesEndedesSQLStrings.\"},","{STXADD_ADDITIONAL_TOK,\"ZusÃ¤tzlicheZeichennachdemEndedesSQLstatement.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["finalprivateStoreImplloadUpdatedStore()throwsException{","if(status!=UPDATE_POINTER)returnthis;","StoreImplstoreTemp=table.getStore(((TableStorePage)storePage).con,filePosUpdated,type);","storeTemp.updatePointer=this;","returnstoreTemp;","privatevoidresizePage(intminNewSize){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalObjectgetObject()throwsException{","if(isNull())returnnull;","returnnewDouble(getDouble());","finalStringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["finalvoidinsertRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_INSERT);","if(tables.size()==0)","throwSmallSQLException.create(Language.INSERT_WO_FROM);","intsavepoint=con.getSavepoint();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["row=1;","returnmoveToValidRow();","finalprivatevoidsetNextFilePos(){","if(filePos\<0)return;//endofrows","if(store==Store.NOROW)","filePos=table.getFirstPage();//canpointattheendoffile"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["finalMutableNumericgetNumeric(intcolIdx)throwsException{","returncurrentDS.getNumeric(colIdx);","finalObjectgetObject(intcolIdx)throwsException{","returncurrentDS.getObject(colIdx);","finalStringgetString(intcolIdx)throwsException{","returncurrentDS.getString(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseSQLTokenizer.COUNTER:","col.setAutoIncrement(true);","dataType=SQLTokenizer.INT;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["((Money)value).value=Math.min(((Money)value).value,expr.getMoney());","break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["break;","default:","leftExpr=expressionSingle(cmd,token);","booleanisNot=false;","while((token=nextToken())!=null){","ExpressionrightExpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["nodeStack.push(newIndexNodeScrollStatus(rootPage,asc,true,0));","finallonggetRowOffset(booleanscroll){","if(longList!=null){","longrowOffset=scroll?","longList.getNext(longListEnum):","longList.getPrevious(longListEnum);"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["finalinttype;","finalRowSourceleft;//thelefttable,vieworrowsourceofthejoin","finalRowSourceright;","privatebooleanisBeforeFirst=true;","privatebooleanisOuterValid=true;","privateboolean[]isFullNotValid;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["writeSmallDateTime(expr.getLong());","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(expr.getDataType()){","caseSQLTokenizer.UNIQUEIDENTIFIER:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalintyear;","finalintmonth;","finalintday;","finalinthour;","finalintminute;","finalintsecond;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["divImpl(factor);","intgetSignum(){","returnsignum;","voidsetSignum(intsignum){","this.signum=signum;","voidfloor(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["}else{","charchr1=sql[token.offset];","if(chr1==\'$\'){","previousToken();","Stringtok=newString(sql,token.offset+1,token.length-1);","if(isMinus)tok=\"-\"+tok;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:","returngetDataType(left,right);","intgetScale(){","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","buf.append(Long.toString(temp));","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).toString();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["switch(token.value){","caseSQLTokenizer.TRANSACTION:","returnsetTransaction();","default:","thrownewError();","privateCommandSetsetTransaction()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidaddRemainderKey(longrowOffset,char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalIndexNodeaddRoot(chardigit)throwsSQLException{","IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["doublereadDouble(){","returnDouble.longBitsToDouble(readLong());","voidwriteFloat(floatvalue){","writeInt(Float.floatToIntBits(value));","floatreadFloat(){","returnFloat.intBitsToFloat(readInt());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["System.arraycopy(value,0,val,1,value.length);","value=val;","voidsub(MutableNumericnum){","if(num.scale\<scale){","num.setScale(scale);","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(day==29){","if(!isLeapYear(year)){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(hour\>=24){","throwSmallSQLException.create(Language.HOURS_TOOLARGE,datetime);","if(minute\>=60){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnsuper.getPrecision();","intgetScale(){","switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","MutableNumericobj=getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnabsolute(newRow);","intgetRow()throwsException{","if(rowIdx\>=rowList.size())return0;","returnrowIdx+1;","longgetRowPosition(){","returnrowIdx;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["privatestaticfinalint[]MISSING_FROM={SQLTokenizer.FROM};","privatestaticfinalint[]MISSING_SET={SQLTokenizer.SET};","privatestaticfinalint[]MISSING_EQUALS={SQLTokenizer.EQUALS};","privatestaticfinalint[]MISSING_WHERE={SQLTokenizer.WHERE};","privatestaticfinalint[]MISSING_WHERE_COMMA={SQLTokenizer.WHERE,SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_ISOLATION={SQLTokenizer.ISOLATION};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticfinalByteBufferpageControlBuffer=ByteBuffer.wrap(page_control);","privateintstatus;//validvaluearefollow:","privatestaticfinalintNORMAL=0;","privatestaticfinalintDELETED=1;","privatestaticfinalintUPDATE_POINTER=2;","privatestaticfinalintUPDATED_PAGE=3;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncommandSelect.isAfterLast();","voidafterLast()throwsException{","commandSelect.afterLast();","booleanabsolute(introw)throwsException{","returncommandSelect.absolute(row);","booleanrelative(introws)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseSQLTokenizer.VARBINARY:","returnUtils.bytes2hex(readBinary());","caseSQLTokenizer.TINYINT:","returnString.valueOf(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnString.valueOf(readShort());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalintlockType=storePage.lockType;","finallongfileOffset=storePage.fileOffset;","synchronized(locks){","try{","TableStorePagelock;","TableStorePageprev;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returntrue;","publicbooleansupportsSubqueriesInIns(){","returntrue;","publicbooleansupportsSubqueriesInQuantifieds(){","returntrue;","publicbooleansupportsCorrelatedSubqueries(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassTableView{"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["privatevoidlimit(CommandSelectselCmd)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","try{","intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["bytes=newbyte[4];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this(newBigDecimal(String.valueOf(val)));","MutableNumeric(floatval){","this(newBigDecimal(String.valueOf(val)));","MutableNumeric(Stringval){","this(newBigDecimal(val));","MutableNumeric(BigDecimalbig){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["}else{","year=1970;","month=0;","day=1;","idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","classStorePageextendsTransactionStep{","byte[]page;//dataofonepage","intpageSize;","longfileOffset;//positioninfile"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["return(((long)(puffer[offset++]&0xFF))\<\<56)","|(((long)(puffer[offset++]&0xFF))\<\<48)","|(((long)(puffer[offset++]&0xFF))\<\<40)","|(((long)(puffer[offset++]&0xFF))\<\<32)","|((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["row[11]=fk.getName();//FK_NAME","row[12]=pk.getName();//PK_NAME","row[13]=Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable);//DEFERRABILITY","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["row=0;","@Override","finalbooleanfirst()throwsException{","filePos=table.getFirstPage();","row=1;","returnmoveToValidRow();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["intlength=remainderKey==null?0:remainderKey.length;","output.writeInt(length);","if(length\>0)output.writeChars(remainderKey);","if(value==null){","output.writeByte(0);","}else"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnfalse;","@Override","finalvoidnullRow(){","row=0;","store=Store.NULL;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["intidx=table.findColumnIdx(sqlColName);","if(idx\>=0){","matrix[idx]=c;","}else{","throwSmallSQLException.create(Language.COL_MISSING,sqlColName);","if(columnExpressions.size()!=cmdSel.columnExpressions.size())"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["{STXADD_JOIN_INVALID,\"InvalidJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnexpectedclosingparenthesisinFROMclause.\"},","{STXADD_KEYS_REQUIRED,\"Requiredkeywordsare:\"},","{STXADD_NOT_NUMBER,\"Numbervaluerequired(passed=\'\'{0}\'\').\"},","{STXADD_COMMENT_OPEN,\"Missingendcommentmark(\'\'*/\'\').\"},","};"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(lock==storePage){","if(lock==prev){","if(lock.nextLock==null){","locks.remove(pageKey);","}else{","locks.put(pageKey,lock.nextLock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnstore.getInt(offsets[colIdx],dataTypes[colIdx]);","@Override","finallonggetLong(intcolIdx)throwsException{","returnstore.getLong(offsets[colIdx],dataTypes[colIdx]);","@Override","finalfloatgetFloat(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["longfileOffset;//positioninfile","StorePage(byte[]page,intpageSize,FileChannelraFile,longfileOffset){","super(raFile);","this.page=page;","this.pageSize=pageSize;","this.fileOffset=fileOffset;"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.JAVA_OBJECT)),Utils.getInteger(65535),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BLOB)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["break;","caseSQLTokenizer.COUNTER:","col.setAutoIncrement(true);","dataType=SQLTokenizer.INT;","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.commit();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.freeLock();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnvalue;","publicfloatfloatValue(){","returnvalue;","publicintintValue(){","return(int)value;","publiclonglongValue(){"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|","|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","page=find(page,doubleToBinarySortOrder(expr.getDouble()),4,nodeList);","break;","caseSQLTokenizer.TINYINT:","page=find(page,expr.getInt(),1,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["default:thrownewError();","longgetLong()throwsException{","returngetInt();","floatgetFloat()throwsException{","returngetInt();","doublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["publicObjectgetObject(inti,Mapmap)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetRef()notyetimplemented.\");","publicBlobgetBlob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetClob()notyetimplemented.\");","publicArraygetArray(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetDate()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnreadInt()*86400000L;","voidwriteSmallDateTime(longdatetime){","writeInt((int)(datetime/60000));","longreadSmallDateTime(){","returnreadInt()*60000L;","voidwriteString(StringstrDaten)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row[3]=columns.get(c);//COLUMN_NAME","row[4]=Utils.getShort(c+1);//KEY_SEQ","row[5]=index.getName();//PK_NAME","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Stringdef=readString();","column.setDefaultValue(newSQLParser().parseExpression(def),def);","returncolumn;","voidcopyValueFrom(StoreImplstore,intvalueOffset,intlength){","System.arraycopy(store.page,valueOffset,this.page,this.offset,length);","this.offset+=length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{SUBQUERY_COL_COUNT,\"DieAnzahlderSpalteninderSubquerymuss1seinundnicht{0}.\"},","{JOIN_DELETE,\"DieMethodedeleteRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{JOIN_INSERT,\"DieMethodeinsertRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{DELETE_WO_FROM,\"DieMethodedeleteRowbenÃ¶tigteinenFROMAusdruck.\"},","{INSERT_WO_FROM,\"DieMethodeinsertRowbenÃ¶tigteinenFROMAusdruck.\"},","{TABLE_CANT_RENAME,\"DieTabelle\'\'{0}\'\'kannnichtumbenanntwerden.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnfrom.isLast();","booleanisAfterLast()throwsException{","returnfrom.isAfterLast();","finalbooleanabsolute(introw)throwsException{","returnfrom.absolute(row);","finalbooleanrelative(introws)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["bytes[offset++]=(byte)(value\>\>32);","bytes[offset++]=(byte)(value\>\>24);","bytes[offset++]=(byte)(value\>\>16);","bytes[offset++]=(byte)(value\>\>8);","bytes[offset++]=(byte)(value);","returnbytes;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["publicvoidsetByte(StringparameterName,bytex)throwsSQLException{","setByte(findParameter(parameterName),x);","publicvoidsetShort(StringparameterName,shortx)throwsSQLException{","setShort(findParameter(parameterName),x);","publicvoidsetInt(StringparameterName,intx)throwsSQLException{","setInt(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["isOuterValid=true;","result=left.next();","if(result){","result=right.first();","if(!result){","switch(type){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["Database.getDatabase(catalog,con,false);","switch(tableCommandType){","caseSQLTokenizer.CREATE:","database.createTable(con,name,columns,indexes,foreignKeys);","break;","caseSQLTokenizer.ADD:"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["default:","thrownewError();","privateExpressionsexpressionTokenList(Commandcmd,intlistType)throwsSQLException{","Expressionslist=newExpressions();","while(true){","Expressionexpr=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateStorePagecreateStorePage(){","page[0]=(byte)(value\>\>56);","page[1]=(byte)(value\>\>48);","page[2]=(byte)(value\>\>40);","page[3]=(byte)(value\>\>32);","page[4]=(byte)(value\>\>24);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","charchr=(char)param1.getInt();","returnString.valueOf(chr);","finalintgetDataType(){","returnSQLTokenizer.CHAR;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|"],
"["returnnewString((byte[])obj);","returnobj.toString();","ObjectgetObject()throwsException{","if(param1.isNull())returnnull;","finalintdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["result+=(year-1970)*31536000000L;//millis365days","result+=((year/4)-(year/100)+(year/400)-477)*86400000L;","if(month\<2&&year%4==0&&(year%100!=0||year%400==0))","result-=86400000L;","returnresult;","staticlongnow(){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(shift!=0){","offset=insertNode(octet);","}else{","insertNodeLastLevel(octet);","return;","shift-=16;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(status!=UPDATE_POINTER){","sizeUsed=offset;","break;","caseSQLTokenizer.DELETE:","sizeUsed=PAGE_CONTROL_SIZE;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["staticfinalintQUESTION=\'?\';//63","staticfinalintBIT_XOR=\'^\';//94","staticfinalintESCAPE_L=\'{\';//123","staticfinalintBIT_OR=\'|\';//124","staticfinalintESCAPE_R=\'}\';//125","staticfinalintTILDE=\'~\';//126"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(shift!=0)offset+=pointerSize;","shift-=16;","finalvoidremove(longvalue)throwsSQLException{","if(size==0)return;","intoffset1=0;","intoffset2=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnnull;","return(SQLToken)tokens.get(tokenIdx++);","privateSQLTokennextToken(int[]validValues)throwsSQLException{","SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,validValues);","if(validValues==MISSING_EXPRESSION){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["store.setCurrentOffsetInPage(offsetEnd);","store.writeInt(0);//nomoreadditionalinformations","store.writeFinsh(null);//Theconnectionparameterisnullbecausethetableheaderiswrittenimmediately.","firstPage=store.getNextPagePos();","@Override","voidwriteMagic(FileChannelraFile)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnTypes.SMALLINT;","caseSQLTokenizer.INT:","returnTypes.INTEGER;","caseSQLTokenizer.BIGINT:","returnTypes.BIGINT;","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["value=newMutableNumeric(expr.getNumeric());","break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{TABLE_FILE_INVALID,\"DieDatei\'\'{0}\'\'enthÃ¤ltkeinegÃ¼ltigeSmallSQLTabelle.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeinegÃ¼ltigerTabellenoderViewSpeicher.\"},","{TABLE_EXISTENT,\"DieTabelleoderView\'\'{0}\'\'existiertbereits.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'istkeineTabelle.\"},","{PK_ONLYONE,\"EineTabellekannnureinenPrimÃ¤rschlÃ¼sselhaben.\"},","{KEY_DUPLICATE,\"DoppelterSchlÃ¼ssel.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","page=add(page,rowOffset,expr.getBoolean()?2:1,isLastValues,1);","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetIndexInfo(Stringcatalog,Stringschema,Stringtable,booleanunique,booleanapproximate)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"NON_UNIQUE\",\"INDEX_QUALIFIER\",\"INDEX_NAME\",\"TYPE\",\"ORDINAL_POSITION\",\"COLUMN_NAME\",\"ASC_OR_DESC\",\"CARDINALITY\",\"PAGES\",\"FILTER_CONDITION\"};","Object[][]data=con.getDatabase(false).getIndexInfo(con,table,unique);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["booleanfirstNode2=true;","booleanfirstNode3=true;","while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){","intnextEntry=getUnsignedShort();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(prev==e)","table[i]=next;","else","prev.next=next;","returne.value;","prev=e;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["case\'Z\':","c=\'2\';","break;","case\'D\':","case\'T\':","c=\'3\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["publicstaticfinalStringDB_READONLY=\"SS-0034\";","publicstaticfinalStringCONNECTION_CLOSED=\"SS-0070\";","publicstaticfinalStringVIEW_INSERT=\"SS-0100\";","publicstaticfinalStringVIEWDROP_NOT_VIEW=\"SS-0101\";","publicstaticfinalStringVIEW_CANTDROP=\"SS-0102\";","publicstaticfinalStringRSET_NOT_PRODUCED=\"SS-0130\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalStringgetString(intcolIdx)throwsException{","returnstore.getString(offsets[colIdx],dataTypes[colIdx]);","@Override","finalbyte[]getBytes(intcolIdx)throwsException{","returnstore.getBytes(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));","voidwriteDouble(doublevalue){","writeLong(Double.doubleToLongBits(value));","doublereadDouble(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["references=null;","staticvoiddrop(Databasedatabase,Stringname)throwsException{","booleanok=newFile(Utils.createTableViewFileName(database,name)).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voiddrop(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.CREATE,-1);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatefloatgetFloatImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getFloat()+right.getFloat();","caseSUB:returnleft.getFloat()-right.getFloat();","caseMUL:returnleft.getFloat()*right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(catalog==null){","database=con.getDatabase(true);","if(database!=null)","catalog=database.getName();","}else{","database=Database.getDatabase(catalog,con,false);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(values==null){","intcount=metaData.getColumnCount();","values=newExpressionValue[count];","while(count--\>0){","values[count]=newExpressionValue();","returnvalues[metaData.getColumnIdx(columnIndex)];"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["name=nextIdentifier();","token=nextToken();","TableViewtableView=Database.getTableView(con,catalog,name);","TableViewResulttable=TableViewResult.createResult(tableView);","tables.add(table);","if(token!=null&&token.value==SQLTokenizer.AS){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","offset+=4;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["exprCase.addCase(params[i],params[i+1]);","exprCase.setEnd();","expr=exprCase;","break;","caseSQLTokenizer.IFNULL:","switch(paramCount){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.ESCAPE_R:","if(parenthesis==token.value)returnfromSource;","if(parenthesis==0){","previousToken();","returnfromSource;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSPreparedStatement(this,sql,resultSetType,resultSetConcurrency);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicMapgetTypeMap(){","returnnull;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["assert(false):\"Internalerror:mustneverhappen.\";","catch(ClassNotFoundExceptione){","catch(InstantiationExceptione){","assert(false):\"ErrorduringLanguageinstantiation:\"+e.getMessage();","intlastUndsc=part.lastIndexOf(\"_\");","if(lastUndsc\>-1)part=part.substring(0,lastUndsc);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.DEFAULT:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","intoffset=token.offset+token.length;","token=nextToken();","if(token!=null)offset=token.offset;","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnrowIdx==0&&currentRow!=null;","finalbooleanfirst(){","rowIdx=0;","returnmove();","finalbooleanprevious(){","if(rowIdx--\<0)rowIdx=-1;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["name=nextIdentiferPart(name);","if(name==catalog)catalog=null;","switch(tokenType.value){","caseSQLTokenizer.DATABASE:","caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TS://timestampescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;","caseSQLTokenizer.FN://functionescapesequence","nextToken(MISSING_PARENTHESIS_L);","expr=function(cmd,para,true);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Loop:","while(true){","intoffset=token.offset+token.length;","token=nextToken();","if(token!=null)offset=token.offset;","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnMoney.parseMoney(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","count=readShort()&0xFFFF;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(mValue.value\<0)mValue.value=-mValue.value;","returnmValue;","default:throwcreateUnspportedDataType(param1.getDataType());","StringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["StoreImplnewStore=table.getStoreTemp(con);","synchronized(con.getMonitor()){","((StoreImpl)this.store).createWriteLock();","for(inti=0;i\<count;i++){","Expressionsrc=updateValues[i];","if(src!=null){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["continue;","if(isUpdateNeeded){","result.updateRow(updateValues);","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalclassColumns{","privateintsize;","privateColumn[]data;//commenthere2","Columns(){","data=newColumn[16];","finalintsize(){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["RowSourcefromSource=null;","fromSource=tableSource(cmd,tables);","while(true){","SQLTokentoken=nextToken();","if(token==null)returnfromSource;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ByteBufferbuffer=ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","intmagic=buffer.getInt();","intversion=buffer.getInt();","if(magic!=MAGIC_INDEX){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getLong(),dataType);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returngetBytes();","default:throwcreateUnspportedDataType();","booleangetBoolean()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"DROP\",DROP);","addKeyWord(\"ALTER\",ALTER);","addKeyWord(\"SET\",SET);","addKeyWord(\"EXEC\",EXECUTE);//aliasforEXECUTE;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"EXECUTE\",EXECUTE);","addKeyWord(\"FROM\",FROM);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","return((Number)obj).intValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicStringgetCatalogName(intcolumn)throwsSQLException{","returnnull;","publicintgetColumnType(intcolumn)throwsSQLException{","returnSQLTokenizer.getSQLDataType(getColumnExpression(column).getDataType());","publicStringgetColumnTypeName(intcolumn)throwsSQLException{","returnSQLTokenizer.getKeyWord(getColumnExpression(column).getDataType());"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["booleanprevious()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleannext()throwsException;","booleanlast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["writeInt(sizeUsed);","writeInt(sizePhysical);","writeInt(0);//nextPageOffset","writeLong(filePosUpdated);//Pointerofanupdatedpage","storePage.setPageData(page,sizeUsed);//TODOpagesollteeigentlichbeimeinlesengesetztsein","if(con==null){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["con.add(createStorePage());","voidsetNextValue(Expressionexpr)throwsException{","longnewValue=expr.getLong();","if(newValue\>value){","value=newValue;","createStorePage().commit();"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","returnnewMutableNumeric((obj==Boolean.TRUE)?1:0);","caseSQLTokenizer.INT:","returnnewMutableNumeric(((Number)obj).intValue());","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["signum=-signum;","intlast=value.length-1;","for(inti=0;i\<=last;i++){","value[i]=(i==last)?-value[i]:~value[i];","voidmul(MutableNumericnum){","BigDecimalbig=toBigDecimal().multiply(num.toBigDecimal());"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseIN:","caseEQUALS_NULL:","caseEQUALS:returncomp==0;","caseGREATER:returncomp\>0;","caseGRE_EQU:returncomp\>=0;","caseLESSER:returncomp\<0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatNumber(hour,2,buf);","privatefinalstaticlongaddDateTimeOffset(longdatetime){","returnaddDateTimeOffset(datetime,TimeZone.getDefault());","finalstaticlongaddDateTimeOffset(longdatetime,TimeZonetimezone){","intt=(int)(datetime%86400000);","intd=(int)(datetime/86400000);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returndatabase.getName()+\'/\'+name+LOB_EXTENTION;","staticStringcreateIdxFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+IDX_EXTENTION;","staticbooleanlike(Stringvalue,Stringpattern){","if(value==null||pattern==null)returnfalse;","if(pattern.length()==0)returntrue;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnreadNumeric().intValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnInteger.parseInt(readString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["abstractclassDataSourceextendsRowSource{","abstractbooleanisNull(intcolIdx)throwsException;","abstractbooleangetBoolean(intcolIdx)throwsException;","abstractintgetInt(intcolIdx)throwsException;","abstractlonggetLong(intcolIdx)throwsException;","abstractfloatgetFloat(intcolIdx)throwsException;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["returntrue;","publicbooleanstoresUpperCaseIdentifiers(){","returnfalse;","publicbooleanstoresLowerCaseIdentifiers(){","returnfalse;","publicbooleanstoresMixedCaseIdentifiers(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["default:","thrownewError(\"Compareoperationnotsupported:\"+compare);","privatebooleannextEquals()throwsException{","if(rowList!=null){","longrowPosition=rowList.getNext(longListEnum);","if(rowPosition!=-1){"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["returninternalExpressions.size()-1;","}else{","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","Expression[]params=expr.getParams();","if(params!=null){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["switch(dataType){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","return((String)value).length();","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.D://dateescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;","caseSQLTokenizer.T://timeescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["thrownewError();","privateExpressionsexpressionTokenList(Commandcmd,intlistType)throwsSQLException{","Expressionslist=newExpressions();","while(true){","Expressionexpr=expression(cmd,0);","list.add(expr);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["TableViewgetTableView(){","returncurrentDS.getTableView();","finalbooleanisScrollable(){","returnfalse;//TODOperformance,canimplementitifalldatasourcesimplementit","finalvoidbeforeFirst()throwsException{","dataSourceIdx=0;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["publicvoidupdateObject(intcolumnIndex,Objectx)throwsSQLException{","updateValue(columnIndex,x,-1);","publicvoidupdateNull(StringcolumnName)throwsSQLException{","updateNull(findColumn(columnName));","publicvoidupdateBoolean(StringcolumnName,booleanx)throwsSQLException{","updateBoolean(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privatestaticfinalint[]MISSING_COMMA={SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_COMMA_PARENTHESIS={SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_PARENTHESIS_VALUES_SELECT={SQLTokenizer.PARENTHESIS_L,SQLTokenizer.VALUES,SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_TOKEN_LIST={SQLTokenizer.COMMA,SQLTokenizer.FROM,SQLTokenizer.GROUP,SQLTokenizer.HAVING,SQLTokenizer.ORDER};","privatestaticfinalint[]MISSING_FROM={SQLTokenizer.FROM};","privatestaticfinalint[]MISSING_SET={SQLTokenizer.SET};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["charlast=\'0\';","for(inti=1;idx\<4&&i\<input.length();i++){","charc=input.charAt(i);","switch(c){","case\'B\':","case\'F\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["publicvoidsetBytes(intparameterIndex,byte[]x)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.BINARY);","publicvoidsetDate(intparameterIndex,Datex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.DATE);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["returnstore.getNumeric(offsets[colIdx],dataTypes[colIdx]);","@Override","finalObjectgetObject(intcolIdx)throwsException{","returnstore.getObject(offsets[colIdx],dataTypes[colIdx]);","@Override","finalStringgetString(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["testNotInsertRow();","getCmd().deleteRow(st.con);","clearRowBuffer();","publicvoidrefreshRow()throwsSQLException{","testNotInsertRow();","relative(0);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["abstractintgetInt(intcolIdx)throwsException;","abstractlonggetLong(intcolIdx)throwsException;","abstractfloatgetFloat(intcolIdx)throwsException;","abstractdoublegetDouble(intcolIdx)throwsException;","abstractlonggetMoney(intcolIdx)throwsException;","abstractMutableNumericgetNumeric(intcolIdx)throwsException;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["caseSQLTokenizer.INT:","returnString.valueOf(readInt());","caseSQLTokenizer.BIGINT:","returnString.valueOf(readLong());","caseSQLTokenizer.REAL:","returnString.valueOf(readFloat());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicclassLongTreeListEnum{","long[]resultStack=newlong[4];","int[]offsetStack=newint[4];","intstack;","finalvoidreset(){","stack=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeListEnum.java|"],
"["publicbooleanacceptsURL(Stringurl){","returnurl.startsWith(URL_PREFIX);","publicDriverPropertyInfo[]getPropertyInfo(Stringurl,Propertiesinfo)","throwsSQLException{","Propertiesprops=parse(url,info);","DriverPropertyInfo[]driverInfos=newDriverPropertyInfo[1];"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["prev=lock;","lock=lock.nextLock;","break;","caseLOCK_READ:","caseLOCK_WRITE:","LongpageKey=newLong(fileOffset);//TODOperformance"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["intmagic=buffer.getInt();","intversion=buffer.getInt();","switch(magic){","caseMAGIC_TABLE:","caseMAGIC_VIEW:","break;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["returnget(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{","returnget(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{","returnget(colIdx).getInt();","longgetLong(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["finalbooleangetUnique(){","returnunique;","finalbooleanisEmpty(){","returnnodes==EMPTY_NODES&&value==null;","finalvoidclear(){","nodes=EMPTY_NODES;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["data[idx]=expr;","finalintindexOf(Expressionexpr){","if(expr==null){","for(inti=0;i\<size;i++)","if(data[i]==null)","returni;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;","caseSQLTokenizer.COMMA:","continuenextCol;","token=addColumn(token,cmdCreate);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicObjectgetObject(inti)throwsSQLException{","try{","Objectobj=getValue(i).getObject();","wasNull=obj==null;","returnobj;","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["saveRemainderValue(remainderValue,offset);","returnaddRoot();","finalIndexNodeaddRootValue(longremainderValue,intdigitCount)throwsSQLException{","saveRemainderValue(remainderValue,digitCount);","returnaddRoot();","privatefinalvoidmoveRemainderValue()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getDouble()==right.getDouble();","caseGREATER:returnleft.getDouble()\>right.getDouble();","caseGRE_EQU:returnleft.getDouble()\>=right.getDouble();","caseLESSER:returnleft.getDouble()\<right.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intidx=matrix[c];","ExpressionvalueExpress;","if(idx\>=0){","valueExpress=cmdSel.columnExpressions.get(idx);","}else{","valueExpress=column.getDefaultValue(con);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseSQLTokenizer.DECIMAL:","return(int)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.INT);","privateintgetIntImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getInt()+right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisLast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisAfterLast()throwsSQLException,Exception{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractvoidafterLast()throwsException;","booleanabsolute(introw)throwsException{"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["staticfinalintMAGIC_INDEX=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'I\';","staticfinalintINDEX_VERSION=1;","privatefinalStringname;","finalprivateintconstraintType;//PRIMARY,UNIQUE,FOREIGIN,INDEX","finalprivateStringscolumns;","privateint[]matrix;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.BIGINT:","return((Number)obj).longValue()*10000;","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnUtils.doubleToMoney(((Number)obj).doubleValue());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalbooleanfirst(){","rowPos=1;","returntrue;","finalbooleanprevious(){","rowPos--;","returnrowPos==1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["addKeyWord(\"MONTH\",MONTH);","addKeyWord(\"MONTHNAME\",MONTHNAME);","addKeyWord(\"GETDATE\",NOW);//aliasforMSSQLServer","addKeyWord(\"NOW\",NOW);","addKeyWord(\"QUARTER\",QUARTER);","addKeyWord(\"SECOND\",SECOND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnnode.addRootValue(key,i);","}else","if(equals(node.getRemainderValue(),key,i)){","if(isLastValue){","node.saveValue(rowOffset);","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","type=SQLTokenizer.TIMESTAMP;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","returnnewDateTime(param1.getLong(),type).toString(param2.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["charquote=0;","StringBufferquoteBuffer=newStringBuffer();","for(inti=0;i\<sql.length;i++){","charc=sql[i];","switch(c){","case\'\\\"\':"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(row\>getRowCount()){","returnfalse;","booleanisNext=next();","previous();","return!isNext;","finalbooleanisAfterLast(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returnresult;","finalbooleanisNull(intcolIdx)throwsException{","returncurrentDS.isNull(colIdx);","finalbooleangetBoolean(intcolIdx)throwsException{","returncurrentDS.getBoolean(colIdx);","finalintgetInt(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["row=(getRowCount()\>0)?getRowCount()+1:0;","returnfalse;","booleanlast()throwsException{","afterLast();","returnprevious();","finalbooleanisLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["finalprivateSSConnectioncon;","ExpressionInSelect(SSConnectioncon,Expressionleft,CommandSelectcmdSel,intoperation){","super(left,(Expressions)null,operation);","this.cmdSel=cmdSel;","this.con=con;","privatevoidloadInList()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["finalprivateExpressionexpr;","ColumnExpression(Expressionexpr){","this.expr=expr;","StringgetName(){","returnexpr.getAlias();","booleanisAutoIncrement(){"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["default:returnMoney.parseMoney(obj.toString());","MutableNumericgetNumeric(){","returngetNumeric(getObject(),dataType);","staticMutableNumericgetNumeric(Objectobj,intdataType){","if(obj==null)returnnull;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(DataSourcetable){","if(size\>=data.length){","DataSource[]dataNew=newDataSource[size\<\<1];","System.arraycopy(data,0,dataNew,0,size);"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["database.directory.getParentFile():","newFile(\".\");","Filedirs[]=baseDir.listFiles();","if(dirs!=null)","for(inti=0;i\<dirs.length;i++){","if(dirs[i].isDirectory()){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["{STXADD_PARAM_INVALID_COUNT,\"Invalidparametercount.\"},","{STXADD_JOIN_INVALID,\"InvalidJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnexpectedclosingparenthesisinFROMclause.\"},","{STXADD_KEYS_REQUIRED,\"Requiredkeywordsare:\"},","{STXADD_NOT_NUMBER,\"Numbervaluerequired(passed=\'\'{0}\'\').\"},","{STXADD_COMMENT_OPEN,\"Missingendcommentmark(\'\'*/\'\').\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["longgetMoney()throwsException{","returngetMoney(getObject(),dataType);","staticlonggetMoney(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicfloatgetFloat(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["this.type=SQLTokenizer.TABLE;","this.catalog=catalog;","this.name=name;","this.tableCommandType=tableCommandType;","voidaddColumn(Columncolumn)throwsSQLException{","addColumn(columns,column);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject().toString();","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"AUTO_INCREMENT\",IDENTITY);//aliasforIDENTITY;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"IDENTITY\",IDENTITY);","addKeyWord(\"INNER\",INNER);","addKeyWord(\"JOIN\",JOIN);","addKeyWord(\"ON\",ON);","addKeyWord(\"OUTER\",OUTER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DATE)),Utils.getInteger(10),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIME)),Utils.getInteger(8),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIMESTAMP)),Utils.getInteger(23),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(3),Utils.getInteger(3),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLDATETIME)),Utils.getInteger(16),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.JAVA_OBJECT)),Utils.getInteger(65535),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BLOB)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintplaces=param2.getInt();","doublevalue=param1.getDouble();","longfactor=1;","if(places\>0){","for(inti=0;i\<places;i++){","factor*=10;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["TableViewtableView=getTableView();","if(tableTimestamp!=tableView.getTimestamp()){","this.con=con;","tableTimestamp=tableView.getTimestamp();","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["data=newbyte[25];","LongTreeList(longvalue)throwsSQLException{","this();","add(value);","LongTreeList(StoreImplinput){","intreadSize=input.readInt();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","finalvoiddeleteRow(SSConnectioncon)throwsSQLException{","intsavepoint=con.getSavepoint();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["writeByte(num.getSignum());","for(inti=0;i\<num.getInternalValue().length;i++){","writeInt(num.getInternalValue()[i]);","MutableNumericreadNumeric(){","int[]value=newint[readByte()];","intscale=readByte();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicvoidupdateString(StringcolumnName,Stringx)throwsSQLException{","updateString(findColumn(columnName),x);","publicvoidupdateBytes(StringcolumnName,byte[]x)throwsSQLException{","updateBytes(findColumn(columnName),x);","publicvoidupdateDate(StringcolumnName,Datex)throwsSQLException{","updateDate(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["transactionTime=System.currentTimeMillis();","}catch(Throwablee){","rollback();","throwSmallSQLException.createFromException(e);","voidrollbackFile(FileChannelraFile)throwsSQLException{","testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["staticfinalintmapIntervalType(intintervalType){","switch(intervalType){","caseSQLTokenizer.MILLISECOND:","returnSQLTokenizer.SQL_TSI_FRAC_SECOND;","caseSQLTokenizer.SECOND:","returnSQLTokenizer.SQL_TSI_SECOND;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["Stringmessage=translateMsg(messageCode,null);","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Objectparam0){","Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["longgetLong()throwsException{","returngetLong(getObject(),dataType);","staticlonggetLong(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["size\>\>=1;","returnbitCount;","finallonggetRowPosition(){","intbitCount=getBitCount();","returndataSourceIdx|currentDS.getRowPosition()\<\<bitCount;","finalvoidsetRowPosition(longrowPosition)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","((DateTime)value).time=Math.min(((DateTime)value).time,expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["row[2]=foreignKey.pkTable;//PKTABLE_NAME","row[3]=columnsPk.get(c);//PKCOLUMN_NAME","row[4]=getName();//FKTABLE_CAT","row[6]=foreignKey.fkTable;//FKTABLE_NAME","row[7]=columnsFk.get(c);//FKCOLUMN_NAME","row[8]=Utils.getShort(c+1);//KEY_SEQ"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(++i==length){","returnnode;","if(equals(node.getRemainderValue(),key,i)){","returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,char[]key,booleanisLast)throwsSQLException{","intlength=key.length;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["return0xFFFF;","returndefaultValue;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","if(defaultValue==-1)","return38;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnnull;","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);","intgetScale(){","returngetScale(getDataType());","finalstaticintgetScale(intdataType){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","writeString(expr.getString(),column.getDisplaySize(),false);","break;","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DELETE:","if(storePage.page==null){","FileChannelraFile=storePage.raFile;","synchronized(raFile){","if(filePos\>=raFile.size()-PAGE_CONTROL_SIZE){","returnnull;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnLong.MAX_VALUE;","if(value\<Long.MIN_VALUE)","returnLong.MIN_VALUE;","return(long)value;","staticfloatbytes2float(byte[]bytes){","returnFloat.intBitsToFloat(bytes2int(bytes));"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["daten[1]=hex2byte(chars,4);","daten[0]=hex2byte(chars,6);","daten[5]=hex2byte(chars,9);","daten[4]=hex2byte(chars,11);","daten[7]=hex2byte(chars,14);","daten[6]=hex2byte(chars,16);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["chardigit=(char)(key\>\>(i\<\<4));","if(i==0){","if(isLastValue){","node.addNode(digit,rowOffset);","returnnull;","returnnode.addRoot(digit);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.TIMESTAMP:","bytes=newbyte[8];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintSMALLMONEY=330;","staticfinalintMONEY=331;","staticfinalintDECIMAL=332;","staticfinalintNUMERIC=333;","staticfinalintREAL=336;","staticfinalintFLOAT=337;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["default:thrownewError(\"\"+type);","offset=0;","writeInt(PAGE_MAGIC);//forrepair","writeInt(status);","writeInt(sizeUsed);","writeInt(sizePhysical);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetInt();","floatgetFloat()throwsException{","returngetInt();","doublegetDouble()throwsException{","returngetInt();","longgetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.min(((MutableFloat)value).value,expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["case103://britshdd/mm/yyyy","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["assert(messageCode!=null&&params!=null):\"Fillparameters.msgCode=\"+messageCode+\"params=\"+params;","Stringlocalized=language.getMessage(messageCode);","returnMessageFormat.format(localized,params);","privatestaticStringstripMsg(Throwablethrowable){","Stringmsg=throwable.getMessage();","if(msg==null||msg.length()\<30){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["if(token!=null&&token.value==SQLTokenizer.ORDER){","order(selCmd);","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.LIMIT){","limit(selCmd);","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicintgetDefaultTransactionIsolation(){","returnConnection.TRANSACTION_READ_COMMITTED;","publicbooleansupportsTransactions(){","returntrue;","publicbooleansupportsTransactionIsolationLevel(intlevel){","switch(level){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intbyteLen=bytes.length;","intstart=Math.min(Math.max(0,param2.getInt()-1),byteLen);","intlength=param3.getInt();","if(length\<0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["staticfinalintSQL_TINYINT=1365;","staticfinalintSQL_VARBINARY=1366;","staticfinalintSQL_VARCHAR=1367;","static{","addKeyWord(\"SQL_BIGINT\",SQL_BIGINT);","addKeyWord(\"SQL_BINARY\",SQL_BINARY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","caseSQLTokenizer.CURDATE:","caseSQLTokenizer.CURRENTDATE:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewMutableNumeric(dValue);","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(((Money)obj).value,4);","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.MONEY:","returnreadLong()/(float)10000.0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/(float)10000.0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","returnparam1.getBytes();","caseSQLTokenizer.VARBINARY:{","byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();","if(length\<bytes.length){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(readLong());","caseSQLTokenizer.REAL:","returnnewMutableNumeric(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["offset+=length;","privatevoidverifyFreePufferSize(intfreeSize){","intminSize=offset+freeSize;","if(minSize\<puffer.length){","intnewSize=puffer.length\<\<1;","if(newSize\<minSize)newSize=minSize;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.COMMA:","caseSQLTokenizer.SET:","caseSQLTokenizer.JOIN:","caseSQLTokenizer.LIMIT:","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"ACOS\",ACOS);","addKeyWord(\"ASIN\",ASIN);","addKeyWord(\"ATAN\",ATAN);","addKeyWord(\"ATN2\",ATAN2);//aliasforMSSQLServer","addKeyWord(\"ATAN2\",ATAN2);","addKeyWord(\"CEILING\",CEILING);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.INT:","returnreadInt();","caseSQLTokenizer.BIGINT:","returnreadLong();","caseSQLTokenizer.REAL:","returnreadFloat();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{VIEW_INSERT,\"INSERTnonÃ¨supportatoperunaview.\"},","{VIEWDROP_NOT_VIEW,\"NonÃ¨possibileeffettuareDROPVIEWcon\'\'{0}\'\'perchÃ©nonÃ¨unaview.\"},","{VIEW_CANTDROP,\"NonsipuÃ²effettuaredropsullaview\'\'{0}\'\'.\"},","{RSET_NOT_PRODUCED,\"NessunResultSetÃ¨statoprodotto.\"},","{RSET_READONLY,\"IlResultSetÃ¨disolalettura.\"},","{RSET_FWDONLY,\"IlResultSetÃ¨forwardonly.\"},//norealtranslation"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","value=newDateTime(expr.getLong(),dataType);","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["case2:","invalidParamCount=false;","expr=newExpressionFunctionIIF();","Expression[]newParams=newExpression[3];","newParams[0]=newExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","newParams[1]=params[1];"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["page[offset++]=(byte)(lengthColumn\>\>8);","page[offset++]=(byte)(lengthColumn);","writeBytes(daten);","if(!varBinary){","for(inti=length;i\<lengthColumn;i++){","page[offset++]=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicConnectiongetConnection(){","returncon;","publicbooleansupportsSavepoints(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;","caseSQLTokenizer.CURTIME:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.ATAN2:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionATan2();","break;","caseSQLTokenizer.CEILING:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["initValue(expr);","}else","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["return(byte)getInt(i);","publicintgetInt(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getInt();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnnewViewResult((View)tableView);","staticTableViewResultgetTableViewResult(RowSourcefrom)throwsSQLException{","if(frominstanceofWhere){","from=((Where)from).getFrom();","if(frominstanceofTableViewResult){","return(TableViewResult)from;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["value=newLong(rowOffset);","}else{","LongTreeListlist=(LongTreeList)value;","if(list==null){","value=list=newLongTreeList();","list.add(rowOffset);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["publicstaticfinalStringSECS_TOOLARGE=\"SS-0255\";","publicstaticfinalStringMILLIS_TOOLARGE=\"SS-0256\";","publicstaticfinalStringDATETIME_INVALID=\"SS-0257\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_OPER=\"SS-0280\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_OPER=\"SS-0281\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_FUNC=\"SS-0282\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.max(((MutableInteger)value).value,expr.getInt());","break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.max(((MutableLong)value).value,expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["for(intc=0;c\<exprs.size();c++){","Expressionexpr=exprs.get(c);","if(exprinstanceofExpressionName){","Columncolumn=((ExpressionName)expr).getColumn().copy();","column.setName(expr.getAlias());","columns.add(column);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["importjava.math.*;","importjava.util.Map;","importjava.util.Calendar;","importjava.net.URL;","importjava.io.*;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["finalStringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;","returnobj.toString();","finalintgetDataType(){","returnSQLTokenizer.FLOAT;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["addKeyWord(\"BOOLEAN\",BOOLEAN);","addKeyWord(\"BINARY\",BINARY);","addKeyWord(\"VARBINARY\",VARBINARY);","addKeyWord(\"RAW\",RAW);//aliasforOracleRAWandLONGRAW","addKeyWord(\"IMAGE\",LONGVARBINARY);//aliasforMSSQLServerdatatypeIMAGE","addKeyWord(\"LONGVARBINARY\",LONGVARBINARY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{MILLIS_TOOLARGE,\"VAloredeimilliseconditroppoaltoinTIMESTAMP\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'Ã¨unDATE,TIMEorTIMESTAMPnonvalido.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Conversionenonsupportataversoiltipodidato\'\'{0}\'\'daltipo\'\'{1}\'\'perl\'\'operazione\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Tipodidato\'\'{0}\'\'nonsupportatoperl\'\'operazione\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Tipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Conversioneversoiltipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["super(con,sql);","SSCallableStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,sql,rsType,rsConcurrency);","privateExpressiongetValue(inti)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodfindParameter()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["valueExpress=cmdSel.columnExpressions.get(idx);","}else{","valueExpress=column.getDefaultValue(con);","if(needGeneratedKeys&&generatedKeysType==0&&valueExpress!=Expression.NULL){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["newTable.close();","FileoldFile=oldTable.getFile(this);","FilenewFile=newTable.getFile(this);","FiletmpFile=newFile(Utils.createTableViewFileName(this,\"#\"+System.currentTimeMillis()+this.hashCode()));","if(!oldFile.renameTo(tmpFile)){","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["cmd.setHaving(expression(cmd,0));","privatestaticfinalint[]COMMANDS={SQLTokenizer.SELECT,SQLTokenizer.DELETE,SQLTokenizer.INSERT,SQLTokenizer.UPDATE,SQLTokenizer.CREATE,SQLTokenizer.DROP,SQLTokenizer.ALTER,SQLTokenizer.SET,SQLTokenizer.USE,SQLTokenizer.EXECUTE,SQLTokenizer.TRUNCATE};","privatestaticfinalint[]COMMANDS_ESCAPE={SQLTokenizer.D,SQLTokenizer.T,SQLTokenizer.TS,SQLTokenizer.FN,SQLTokenizer.CALL};","privatestaticfinalint[]COMMANDS_ALTER={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.PROCEDURE,};","privatestaticfinalint[]COMMANDS_CREATE={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE,SQLTokenizer.UNIQUE,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]COMMANDS_DROP={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","returnLong.parseLong(str);","}catch(NumberFormatExceptione){","return(long)Double.parseDouble(str);","floatgetFloat()throwsException{","returngetFloat(getObject(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["token=nextToken();","if(token==null){","previousToken();","returnlist;","switch(token.value){","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["System.arraycopy(daten,0,page,offset,daten.length);","offset+=daten.length;","voidwriteBytes(byte[]daten,intoff,intlength){","intnewSize=offset+length;","if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,off,page,offset,length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidsetParamValue(intidx,Objectvalue,intdataType)throwsSQLException{","getParam(idx).set(value,dataType);","if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType);","voidsetParamValue(intidx,Objectvalue,intdataType,intlength)throwsSQLException{","getParam(idx).set(value,dataType,length);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["importjava.net.URL;","importsmallsql.database.language.Language;","publicclassSSResultSetimplementsResultSet{","SSResultSetMetaDatametaData=newSSResultSetMetaData();","privateCommandSelectcmd;","privatebooleanwasNull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(isBeforeFirst){","result=left.next();","if(result){","result=right.first();","if(!result){","switch(type){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["switch(token.value){","caseSQLTokenizer.PLUS:","caseSQLTokenizer.MINUS:","caseSQLTokenizer.ASTERISK:","caseSQLTokenizer.SLACH:","caseSQLTokenizer.PERCENT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returngetMoneyImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatelonggetMoneyImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getMoney()+right.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["file.write(buffer);","voidwriteByte(intvalue){","verifyFreePufferSize(1);","puffer[offset++]=(byte)(value);","voidwriteShort(intvalue){","verifyFreePufferSize(2);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["for(inti=0;i\<columns.size();i++){","matrix[tableView.findColumnIdx(columns.get(i))]=i;","finalvoidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","init(database,tableView);","raFile=createFile(con,database);","staticFilegetFile(Databasedatabase,Stringname)throwsException{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["finalvoidreset(){","nodeStack.clear();","booleanasc=(expressions.get(0).getAlias()!=SQLTokenizer.DESC_STR);","nodeStack.push(newIndexNodeScrollStatus(rootPage,asc,true,0));","finallonggetRowOffset(booleanscroll){","if(longList!=null){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["intcount=readShort()&0xFFFF;","if(!isNull)offset+=count;//notuse+=directlybecausereadShortchangetheoffset","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","count=readByte();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfileOffset;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","@Override","finalvoidrollback(){","raFile=null;"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","nullableWasSet=true;","break;","caseSQLTokenizer.NOT:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","token=nextToken(MISSING_NULL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["catalog=name;","name=nextIdentifier();","token=nextToken();","TableViewtableView=Database.getTableView(con,catalog,name);","TableViewResulttable=TableViewResult.createResult(tableView);","tables.add(table);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.INT);","privateintgetIntImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getInt()+right.getInt();","caseSUB:returnleft.getInt()-right.getInt();","caseMUL:returnleft.getInt()*right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["default:","thrownewError();","token=nextToken(MISSING_WHEN_ELSE_END);","privateExpressionfunction(Commandcmd,SQLTokentoken,booleanisEscape)throwsSQLException{","Expressionexpr;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(start==end)returnstart;","intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){","returnfindNodeInsertPos(digit,mid+1,end);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["staticfinalintGROUP_BY=11;","staticfinalintCOUNT=12;","staticfinalintSUM=13;","staticfinalintFIRST=14;","staticfinalintLAST=15;","staticfinalintMIN=16;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["staticintindexOf(byte[]value,byte[]list,intoffset){","intlength=value.length;","loop1:","for(intend=list.length-length;offset\<=end;offset++){","for(inti=0;i\<length;i++){","if(list[offset+i]!=value[i]){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);"]": ["|project://smallsql/src/smallsql/database/Database.java|","|project://smallsql/src/smallsql/database/Database.java|","|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:returnDouble.parseDouble(obj.toString());","longgetMoney()throwsException{","returngetMoney(getObject(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.PROCEDURE:","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","switch(tokenType.value){","caseSQLTokenizer.TABLE:","returnalterTable(catalog,tableName);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]str1=param1.getBytes();","byte[]str2=param2.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["store.writeString(name);","finalstaticIndexDescriptionload(Databasedatabase,TableViewtableView,StoreImplstore)throwsSQLException{","intconstraintType=store.readInt();","intcount=store.readInt();","Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["abstractbooleanrowInserted();","abstractbooleanrowDeleted();","booleanhasAlias(){","returntrue;","voidsetAlias(Stringname)throwsSQLException{","throwSmallSQLException.create(Language.ALIAS_UNSUPPORTED);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["returngetBoolean()?10000:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl()*10000;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","caseSQLTokenizer.DISTINCT:","selCmd.setDistinct(true);","break;","default:","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{STXADD_PARAM_INVALID_COUNT,\"01000\"},","{STXADD_JOIN_INVALID,\"01000\"},","{STXADD_FROM_PAR_CLOSE,\"01000\"},","{STXADD_KEYS_REQUIRED,\"01000\"},","{STXADD_NOT_NUMBER,\"01000\"},","{STXADD_COMMENT_OPEN,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["|hexDigit2int(hex[offset++]));","returnbytes;","}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID,String.valueOf(offset));/*,offset*/","privatestaticinthexDigit2int(chardigit){","if(digit\>=\'0\'&&digit\<=\'9\')returndigit-\'0\';"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["row[6]=Utils.getShort(column.getScale());//DECIMAL_DIGITS","row[7]=Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["expr=newExpressionFunctionTruncate();","break;","caseSQLTokenizer.ASCII:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAscii();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["getKeywordFromOperation(operation)","};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER,params);","SQLExceptioncreateUnspportedConversion(intdataType){","inttype=left==null?right.getDataType():getDataType(left,right);","Object[]params=newObject[]{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(places\>0){","for(inti=0;i\<places;i++){","factor*=10;","value*=factor;","}else{","for(inti=0;i\>places;i--){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(((Number)obj).longValue());","caseSQLTokenizer.REAL:","floatfValue=((Number)obj).floatValue();","if(Float.isInfinite(fValue)||Float.isNaN(fValue))","returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.NUMERIC:","returnTypes.NUMERIC;","caseSQLTokenizer.REAL:","returnTypes.REAL;","caseSQLTokenizer.FLOAT:","returnTypes.FLOAT;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["longgetMoney()throwsException{","returngetInt()*10000L;","MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["StringsqlState=language.getSqlState(Language.CUSTOM_MESSAGE);","returnnewSmallSQLException(e,message,sqlState);","staticSQLExceptioncreateFromException(StringmessageCode,Objectparam0,","Throwablee)","Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["if(factor==1000000000){","divImpl(factor);","factor=1;","divImpl(factor);","intgetSignum(){","returnsignum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["addKeyWord(\"COMMITTED\",COMMITTED);","addKeyWord(\"UNCOMMITTED\",UNCOMMITTED);","addKeyWord(\"REPEATABLE\",REPEATABLE);","addKeyWord(\"SERIALIZABLE\",SERIALIZABLE);","addKeyWord(\"CONSTRAINT\",CONSTRAINT);","addKeyWord(\"PRIMARY\",PRIMARY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnreadBoolean();","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary())!=0;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(value.length==0||signum==0){","return0;","}else{","if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleDoubleFactor[scale]*signum;","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["return(get(key)!=null);","finalTableStorePageadd(longkey,TableStorePagevalue){","inti=(int)(key%table.length);","table[i]=newEntry(key,value,table[i]);","if(size++\>=threshold)","resize(2*table.length);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["privatestaticfinalint[]MISSING_SELECT={SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_INTERVALS={SQLTokenizer.SQL_TSI_FRAC_SECOND,SQLTokenizer.SQL_TSI_SECOND,SQLTokenizer.SQL_TSI_MINUTE,SQLTokenizer.SQL_TSI_HOUR,SQLTokenizer.SQL_TSI_DAY,SQLTokenizer.SQL_TSI_WEEK,SQLTokenizer.SQL_TSI_MONTH,SQLTokenizer.SQL_TSI_QUARTER,SQLTokenizer.SQL_TSI_YEAR,SQLTokenizer.MILLISECOND,SQLTokenizer.SECOND,SQLTokenizer.MINUTE,SQLTokenizer.HOUR,SQLTokenizer.DAY,SQLTokenizer.WEEK,SQLTokenizer.MONTH,SQLTokenizer.QUARTER,SQLTokenizer.YEAR,SQLTokenizer.D};","privatestaticfinalint[]MISSING_ALL={SQLTokenizer.ALL};","privatestaticfinalint[]MISSING_THEN={SQLTokenizer.THEN};","privatestaticfinalint[]MISSING_WHEN_ELSE_END={SQLTokenizer.WHEN,SQLTokenizer.ELSE,SQLTokenizer.END};","privatestaticfinalint[]MISSING_ADD_ALTER_DROP={SQLTokenizer.ADD,SQLTokenizer.ALTER,SQLTokenizer.DROP};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["break;","caseSQLTokenizer.SMALLMONEY:","writeInt((int)expr.getMoney());","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnString.valueOf(readBoolean());","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2hex(readBinary());","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringVALUE_STR_TOOLARGE=\"SS-0310\";","publicstaticfinalStringVALUE_BIN_TOOLARGE=\"SS-0311\";","publicstaticfinalStringVALUE_NULL_INVALID=\"SS-0312\";","publicstaticfinalStringVALUE_CANT_CONVERT=\"SS-0313\";","publicstaticfinalStringBYTEARR_INVALID_SIZE=\"SS-0340\";","publicstaticfinalStringLOB_DELETED=\"SS-0341\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["row[7]=Utils.getShort(c+1);//ORDINAL_POSITION","row[8]=columns.get(c);//COLUMN_NAME","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalprivateColumndatatype;","publicExpressionFunctionConvert(Columndatatype,Expressionvalue,Expressionstyle){","super();","this.datatype=datatype;","Expression[]params=(style==null)?newExpression[]{value}:newExpression[]{value,style};","setParams(params);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["intshift=48;","booleanfirstNode=(size\>2);//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){","intnextEntry=getUnsignedShort();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["break;","super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionFunction))returnfalse;","return((ExpressionFunction)expr).getFunction()==getFunction();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["chars[30]=digits[(daten[offset+13]\>\>4)&0x0F];","chars[31]=digits[(daten[offset+13])&0x0F];","chars[32]=digits[(daten[offset+14]\>\>4)&0x0F];","chars[33]=digits[(daten[offset+14])&0x0F];","chars[34]=digits[(daten[offset+15]\>\>4)&0x0F];","chars[35]=digits[(daten[offset+15])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["second=t%60;","t/=60;","minute=t%60;","t/=60;","hour=t%24;","year=1970-(int)(t/365.2425);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(token.value==SQLTokenizer.SELECT){","CommandSelectcmdSel=select();","leftExpr=newExpressionInSelect(con,leftExpr,cmdSel,operation);","nextToken(MISSING_PARENTHESIS_R);","}else{","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidafterLast(){","rowIdx=rowList.size();","currentRow=null;","finalbooleanabsolute(introw)throwsSQLException{","if(row==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","rowIdx=(row\>0)?"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["verifyFreePufferSize(length);","System.arraycopy(value,off,puffer,offset,length);","offset+=length;","privatevoidverifyFreePufferSize(intfreeSize){","intminSize=offset+freeSize;","if(minSize\<puffer.length){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["if(!col.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)col;","if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;","isUpdateNeeded=true;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(start==mid)returnstart;","returnfindNodeInsertPos(digit,start,mid);","privatefinalintfindNodePos(chardigit){","returnfindNodePos(digit,0,nodes.length);","privatefinalintfindNodePos(chardigit,intstart,intend){","if(start==nodes.length)return-1;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["this.colIdx=colIdx;","this.table=table;","this.column=table.columns.get(colIdx);","voidsetFrom(DataSourcefromEntry,intcolIdx,Columncolumn){","this.fromEntry=fromEntry;","this.colIdx=colIdx;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returncreateView();","caseSQLTokenizer.INDEX:","returncreateIndex(false);","caseSQLTokenizer.PROCEDURE:","returncreateProcedure();","caseSQLTokenizer.UNIQUE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["classSSStatementimplementsStatement{","finalSSConnectioncon;","Commandcmd;","privatebooleanisClosed;","intrsType;","intrsConcurrency;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["staticvoiddropTable(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropTable(con,tableName);","voiddropTable(SSConnectioncon,StringtableName)throwsException{","synchronized(tableViews){","Tabletable=(Table)tableViews.get(tableName);","if(table!=null){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalbooleangetBoolean()throwsException{","returngetDouble()!=0;","finalintgetInt()throwsException{","returnUtils.long2int(getLong());","finallonggetLong()throwsException{","returnUtils.double2long(getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["publicInputStreamgetAsciiStream(StringcolumnName)throwsSQLException{","returngetAsciiStream(findColumn(columnName));","publicInputStreamgetUnicodeStream(StringcolumnName)throwsSQLException{","returngetUnicodeStream(findColumn(columnName));","publicInputStreamgetBinaryStream(StringcolumnName)throwsSQLException{","returngetBinaryStream(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["page=find(page,floatToBinarySortOrder(expr.getFloat()),2,nodeList);","break;","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","page=find(page,doubleToBinarySortOrder(expr.getDouble()),4,nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.TIMESTAMP:","bytes=newbyte[8];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=String.CASE_INSENSITIVE_ORDER.compare(leftStr,right2.getString());","caseADD:returnUtils.string2boolean(leftStr+rightStr);","break;}","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publiclonglongValue(){","return(long)(value/10000.0);","publicStringtoString(){","StringBufferbuffer=newStringBuffer();","buffer.append(longValue()).append(\'.\');","finallongv=Math.abs(value);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["writeInt((int)expr.getMoney());","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnumeric=expr.getNumeric();","numeric.setScale(column.getScale());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.sql.*;","importjava.math.*;","importjava.io.ByteArrayInputStream;","importjava.io.InputStream;","importjava.io.Reader;","importjava.util.Map;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["filePos=-1;","noRow();","@Override","finalintgetRow(){","returnrow;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["for(intc=0;c\<columns.size();c++){","Object[]row=newObject[6];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=columns.get(c);//COLUMN_NAME","row[4]=Utils.getShort(c+1);//KEY_SEQ"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(store==null){","throwSmallSQLException.create(Language.TABLE_FILE_INVALID,getFile(database));","intcount=store.readInt();","for(inti=0;i\<count;i++){","columns.add(store.readColumn(tableFormatVersion));","indexes=newIndexDescriptions();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnreadonly;","staticfinalvoidcloseConnection(SSConnectioncon)throwsSQLException{","synchronized(databases){","Iteratoriterator=databases.values().iterator();","while(iterator.hasNext()){","Databasedatabase=(Database)iterator.next();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["this.from=from;","this.groupBy=groupBy;","if(groupBy!=null){","for(inti=0;i\<groupBy.size();i++){","Expressionleft=groupBy.get(i);","intidx=addInternalExpressionFromGroupBy(left);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["return_left\>=right.getInt()&&right2.getInt()\>=_left;","default:","returngetInt()!=0;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{GENER_KEYS_UNREQUIRED,\"01000\"},","{SEQUENCE_HEX_INVALID,\"01000\"},","{SEQUENCE_HEX_INVALID_STR,\"01000\"},","{SYNTAX_BASE_OFS,\"01000\"},","{SYNTAX_BASE_END,\"01000\"},","{STXADD_ADDITIONAL_TOK,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returntrue;","privatefinalbooleanequals(char[]src1,longsrc2,intcharCount){","if(src1==null)returnfalse;","intlength=src1.length;","if(length!=charCount)returnfalse;","for(inti=0,d=charCount-1;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseNOT:","caseLIKE:","caseISNULL:","caseISNOTNULL:","caseIN:","returnfalse;//Booleanoperationsreturneveraresult???,butatleastISNULLandISNOTNULL"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["t/=1000;","synchronized(cal){","cal.setTimeZone(timezone);","cal.set(1970,0,d+1,0,0,t);","cal.set(Calendar.MILLISECOND,millis);","returncal.getTimeInMillis();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intnextEntry=getUnsignedShort();","if(nextEntry!=0||firstNode){","result|=(((long)nextEntry)\<\<shift);","if(listEnum.stack\>=3){","listEnum.offsetStack[listEnum.stack]=offset;","returnresult;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["intgetDisplaySize(){","returncolumn.getDisplaySize();","booleanisAutoIncrement(){","returncolumn.isAutoIncrement();","booleanisCaseSensitive(){","returncolumn.isCaseSensitive();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.CREATE,8);","store.writeString(sql);","store.writeInt(0);//nomoreadditinalinformations","store.writeFinsh(null);","raFile.close();","@Override"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["throwSmallSQLException.createFromException(e);","booleaninit(SSConnectioncon)throwsException{","if(super.init(con)){","commandSelect.compile(con);","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["if(param1.getBoolean())","returnparam2.getObject();","returnparam3.getObject();","StringgetString()throwsException{","if(param1.getBoolean())","returnparam2.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["millis=0;","}else{","hour=0;","minute=0;","second=0;","millis=0;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetImportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,null,null,null,table);","publicResultSetgetExportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,table,null,null,null);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintdeleteRule=DatabaseMetaData.importedKeyNoAction;","ForeignKey(StringpkTable,IndexDescriptionpk,StringfkTable,IndexDescriptionfk){","this.pkTable=pkTable;","this.fkTable=fkTable;","this.pk=pk;","this.fk=fk;"]": ["|project://smallsql/src/smallsql/database/ForeignKey.java|"],
"["returnresult;","booleanrelative(introws)throwsException{","intnewRow=rows+rowIdx+1;","if(newRow\<=0){","beforeFirst();","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["break;","caseSQLTokenizer.REAL:","writeFloat(expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["String[]colNames={\"PKTABLE_CAT\",\"PKTABLE_SCHEM\",\"PKTABLE_NAME\",\"PKCOLUMN_NAME\",\"FKTABLE_CAT\",\"FKTABLE_SCHEM\",\"FKTABLE_NAME\",\"FKCOLUMN_NAME\",\"KEY_SEQ\",\"UPDATE_RULE\",\"DELETE_RULE\",\"FK_NAME\",\"PK_NAME\",\"DEFERRABILITY\"};","Object[][]data=con.getDatabase(false).getReferenceKeys(con,primaryTable,foreignTable);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetTypeInfo()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["intsize=store.readInt();","switch(type){","caseINDEX:","indexes.add(IndexDescription.load(database,this,store));","break;","store.setCurrentOffsetInPage(offsetInPage+size);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["intgetScale(){","returngetScale(getDataType());","finalstaticintgetScale(intdataType){","switch(dataType){","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["buffer.position(0);","intmagic=buffer.getInt();","intversion=buffer.getInt();","if(magic!=MAGIC_INDEX){","throwSmallSQLException.create(Language.INDEX_FILE_INVALID,file.getName());","if(version\>INDEX_VERSION){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["publicclassSSResultSetimplementsResultSet{","SSResultSetMetaDatametaData=newSSResultSetMetaData();","privateCommandSelectcmd;","privatebooleanwasNull;","SSStatementst;","privatebooleanisUpdatable;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["intgetInt()throwsException{","returngetInt(getObject(),dataType);","staticintgetInt(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Expressionexpr=expressions.get(i);","booleanisLastValues=(i==count-1);","if(expr.isNull()){","page=addNull(page,rowOffset,isLastValues);","}else{","switch(expr.getDataType()){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["booleanabsolute(intnewRow)throwsException{","if(newRow==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(newRow\>0){","beforeFirst();","while(newRow--\>0){","if(!next()){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["staticfinalintGREATER=\'\>\';//62","staticfinalintQUESTION=\'?\';//63","staticfinalintBIT_XOR=\'^\';//94","staticfinalintESCAPE_L=\'{\';//123","staticfinalintBIT_OR=\'|\';//124","staticfinalintESCAPE_R=\'}\';//125"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else","if(num.scale\>scale){","setScale(num.scale);","add(-num.signum,num.value);","privatevoidsub(int[]val2){","longtemp=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["addKeyWord(\"SQL_TSI_WEEK\",SQL_TSI_WEEK);","addKeyWord(\"M\",SQL_TSI_MONTH);","addKeyWord(\"MM\",SQL_TSI_MONTH);","addKeyWord(\"SQL_TSI_MONTH\",SQL_TSI_MONTH);","addKeyWord(\"Q\",SQL_TSI_QUARTER);","addKeyWord(\"QQ\",SQL_TSI_QUARTER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finallonggetLong(intoffset,intdataType)throwsException{","return0;","finallonggetMoney(intoffset,intdataType)throwsException{","return0;","finalMutableNumericgetNumeric(intoffset,intdataType)throwsException{","returnnull;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["caseSQLTokenizer.INNER:","nextToken(MISSING_JOIN);","caseSQLTokenizer.JOIN:","fromSource=join(cmd,tables,fromSource,Join.INNER_JOIN);","break;","caseSQLTokenizer.LEFT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetInt();","finaldoublegetDouble()throwsException{","returngetInt();","finallonggetMoney()throwsException{","returngetInt()*10000;","finalMutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["super(log);","this.type=type;","this.catalog=catalog;","this.name=name;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","switch(type){"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["publicbytegetByte(StringcolumnName)throwsSQLException{","returngetByte(findColumn(columnName));","publicshortgetShort(StringcolumnName)throwsSQLException{","returngetShort(findColumn(columnName));","publicintgetInt(StringcolumnName)throwsSQLException{","returngetInt(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["@Override","voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_VIEW);","buffer.putInt(TABLE_VIEW_VERSION);","buffer.position(0);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["if(fileOffset\<0){","save();","output.writeLong(fileOffset);","@Override","IndexNodeloadRef(longoffset)throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,offset);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["testClosedConnection();","synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=0;i--){","TransactionSteppage=(TransactionStep)commitPages.get(i);","if(page.raFile==raFile){","page.rollback();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["formatNumber(details.year,4,buf);","returnbuf.toString();","case6://ddmonyy","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalvoidexecute()throwsException{","super.execute();","from.execute();","NextRow:","while(from.next()){","beforeFirst();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnvalue.equals(v);","voidaccumulate(Expressionexpr)throwsException{","inttype=getType();","if(type!=GROUP_BY)expr=expr.getParams()[0];","switch(type){","caseGROUP_BY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnreadBoolean()?newMutableNumeric(1):newMutableNumeric(0);","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnnewMutableNumeric(Utils.bytes2double(readBinary()));","caseSQLTokenizer.TINYINT:","returnnewMutableNumeric(readUnsignedByte());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnstr+newString(buffer);","returnstr.substring(0,length);","caseSQLTokenizer.LONGVARBINARY:","returnparam1.getBytes();","caseSQLTokenizer.VARBINARY:{","byte[]bytes=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["finalIndexNode[]nodes;","intidx;","finalObjectnodeValue;","finalintlevel;","IndexNodeScrollStatus(IndexNodenode,booleanasc,booleanscroll,intlevel){","this.nodes=node.getChildNodes();"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["{FK_NOT_TABLE,\"\'\'{0}\'\'isnotatable.\"},","{PK_ONLYONE,\"Atablecanhaveonlyoneprimarykey.\"},","{KEY_DUPLICATE,\"DuplicateKey.\"},","{MONTH_TOOLARGE,\"MonthsaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DaysaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"HoursaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["importsmallsql.database.language.Language;","classIndexNode{","finalprivatebooleanunique;","finalprivatechardigit;//unsignedshort","staticfinalprivateIndexNode[]EMPTY_NODES=newIndexNode[0];","privateIndexNode[]nodes=EMPTY_NODES;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["createColumns(con);","privatevoidcreateColumns(SSConnectioncon)throwsException{","commandSelect.compile(con);","Expressionsexprs=commandSelect.columnExpressions;","for(intc=0;c\<exprs.size();c++){","Expressionexpr=exprs.get(c);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["thrownewRuntimeException();","staticbyte[]unique2bytes(Stringunique)throwsSQLException{","char[]chars=unique.toCharArray();","byte[]daten=newbyte[16];","daten[3]=hex2byte(chars,0);","daten[2]=hex2byte(chars,2);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["MemoryResult(Object[][]data,intcolCount)throwsSQLException{","for(intc=0;c\<colCount;c++){","Columncolumn=newColumn();","column.setDataType(SQLTokenizer.NULL);","columns.add(column);","for(intr=0;r\<data.length;r++){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["addKeyWord(\"CHAR_LENGTH\",CHARLEN);","addKeyWord(\"CHARACTER_LENGTH\",CHARACTLEN);","keywords.put(newInteger(_CHAR),\"CHAR\");//neededformetadatafunctions","addKeyWord(\"CONCAT\",CONCAT);","addKeyWord(\"DIFFERENCE\",DIFFERENCE);","addKeyWord(\"STUFF\",INSERT);//aliasforMSSQLServer"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionBitLenextendsExpressionFunctionReturnInt{","privatestaticfinalintBYTES_PER_CHAR=2;","finalintgetFunction(){","returnSQLTokenizer.BITLEN;","booleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|"],
"["right.nullRow();","row=0;","voidnoRow(){","isAfterLast=true;","left.noRow();","right.noRow();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["return(int)getLongImpl();","caseSQLTokenizer.REAL:","return(int)getFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["language=Language.getDefaultLanguage();","else{","language=Language.getLanguage(localeObj.toString());","publicvoidprintStackTrace(){","if(!isInit)return;","super.printStackTrace();"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","Stringstr=param1.getString();","returnstr.length();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCharLen.java|"],
"["this.sql=expr.toCharArray();","this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;","returnexpression(null,0);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode){","Stringmessage=getErrorString(token,addMessageCode,null);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatevoidcompileLinkExpression(Expressionexpr)throwsException{","if(expr.getType()==Expression.NAME)","compileLinkExpressionName((ExpressionName)expr);","elsecompileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionName(ExpressionNameexpr)throwsException{","StringtableAlias=expr.getTableAlias();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(other.getPrecision()\>expr.getPrecision()){","returnnewExpressionFunctionConvert(newColumnExpression(other),expr,null);","break;","break;","returnexpr;","finalvoidsetParamAt(Expressionparam,intidx){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassRowSource{","abstractbooleanisScrollable();","abstractvoidbeforeFirst()throwsException;","booleanisBeforeFirst()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["}else","filePos=store.getNextPagePos();","@Override","finalbooleannext()throwsException{","if(filePos\<0)returnfalse;","setNextFilePos();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["break;","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:","page=find(page,stringToBinarySortOrder(expr.getString(),true),nodeList);","break;","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnpr;","publicPreparedStatementprepareStatement(Stringsql,int[]columnIndexes)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(columnIndexes);","returnpr;","publicPreparedStatementprepareStatement(Stringsql,String[]columnNames)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicbooleanallTablesAreSelectable(){","returntrue;","publicStringgetURL()throwsSQLException{","Databasedatabase=con.getDatabase(true);","if(database==null)","returnSSDriver.URL_PREFIX;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returngetColumnExpression(column).getDisplaySize();","publicStringgetColumnLabel(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();","publicStringgetColumnName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();","publicStringgetSchemaName(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Execute\");","privateExpressionsexpressionParenthesisList(Commandcmd)throwsSQLException{","Expressionslist=newExpressions();","SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_R){","returnlist;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intcount=table.columns.size();","matrix=newint[count];","if(noColumns){","columnExpressions.clear();","for(inti=0;i\<count;i++){","matrix[i]=i;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["staticclassEntry{","finallongkey;","finalTableStorePagevalue;","Entrynext;","Entry(longk,TableStorePagev,Entryn){","value=v;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returnnewMutableNumeric(readShort());","caseSQLTokenizer.INT:","returnnewMutableNumeric(readInt());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(readLong());","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["d--;","intmillis=t%1000;","t/=1000;","synchronized(cal){","cal.setTimeZone(timezone);","cal.set(1970,0,d+1,0,0,t);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx\<\<1];","finallongget2(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["publicbooleanequals(Objectobj){","if(!(objinstanceofMutableNumeric))returnfalse;","returncompareTo((MutableNumeric)obj)==0;","publicBigDecimaltoBigDecimal(){","if(signum==0)returnnewBigDecimal(BigInteger.ZERO,scale);","returnnewBigDecimal(newBigInteger(toByteArray()),scale);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","num.div(right.getInt());","else","num.div(right.getNumeric());","returnnum;","caseNEGATIVE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["right.setRowPosition(rowPositions.get2((int)rowPosition));","finalbooleanrowInserted(){","returnleft.rowInserted()||right.rowInserted();","finalbooleanrowDeleted(){","returnleft.rowDeleted()||right.rowDeleted();","voidnullRow(){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(param1.isNull())returnnull;","Objectpara1=param1.getObject();","switch(param1.getDataType()){","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","doubledValue=((Double)para1).doubleValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["publicvoidprintStackTrace(PrintWriterpw){","if(!isInit)return;","super.printStackTrace(pw);","staticSQLExceptioncreate(StringmessageCode){","assert(messageCode!=null):\"Fillparameters\";","Stringmessage=translateMsg(messageCode,null);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["node=null;","}else{","quoteBuffer.append(c);","wasWhiteSpace=false;","break;","if(comment==MULTI_COMMENT){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else{","for(inti=0;i\<size;i++)","if(expr.equals(data[i]))","returni;","return-1;","finalvoidtoArray(Expression[]array){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["offset=0;","writeInt(PAGE_MAGIC);//forrepair","writeInt(status);","writeInt(sizeUsed);","writeInt(sizePhysical);","writeInt(0);//nextPageOffset"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionTruncate();","break;","caseSQLTokenizer.ASCII:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAscii();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(next()){","booleanabsolute(intnewRow)throwsException{","if(newRow==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(newRow\>0){","beforeFirst();","while(newRow--\>0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["throwcreateSyntaxError(token,MISSING_TOKEN_LIST);","privatevoidexpressionDefList(Commandcmd,Expressionsexpressions,Stringscolumns)throwsSQLException{","SQLTokentoken=nextToken();","if(token.value!=SQLTokenizer.PARENTHESIS_L)throwcreateSyntaxError(token,MISSING_PARENTHESIS_L);","Loop:","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["data=newlong[initialSize];","finalintsize(){","returnsize;","finallongget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["returnSQLTokenizer.MONEY;","if(dataTypeIdx\>=DECIMAL_IDX)","returnSQLTokenizer.DECIMAL;","returnSQLTokenizer.DOUBLE;","staticintgetDataType(inttypeLeft,inttypeRight){","if(typeLeft==typeRight)returntypeLeft;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","privatefinalvoidclose()throwsException{","synchronized(tableViews){","Iteratoriterator=tableViews.values().iterator();","while(iterator.hasNext()){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalfloatgetFloat(intcolIdx)throwsException{","returncurrentDS.getFloat(colIdx);","finaldoublegetDouble(intcolIdx)throwsException{","returncurrentDS.getDouble(colIdx);","finallonggetMoney(intcolIdx)throwsException{","returncurrentDS.getMoney(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["CommandCreateViewcmd=newCommandCreateView(con.log,viewName);","cmd.sql=newString(sql,token.offset,sql.length-token.offset);","select();//Parsetocheckforvalid","returncmd;","privateCommandTablecreateIndex(booleanunique)throwsSQLException{","StringindexName=nextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntrue;","publicbooleansupportsGroupByBeyondSelect(){","returntrue;","publicbooleansupportsLikeEscapeClause(){","returntrue;","publicbooleansupportsMultipleResultSets(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(((ExpressionValue)params.get(p)).isEmpty())","throwSmallSQLException.create(Language.PARAM_EMPTY,newInteger(p+1));","voidclearParams(){","for(intp=0;p\<params.size();p++){","((ExpressionValue)params.get(p)).clear();","privateExpressionValuegetParam(intidx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["result+=(day-1)*86400000L;","if(month\>11){","year+=month/12;","month%=12;","result+=MONTH_DAYS[month]*86400000L;","result+=(year-1970)*31536000000L;//millis365days"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintSQL_CHAR=1353;","staticfinalintSQL_DATE=1354;","staticfinalintSQL_DECIMAL=1355;","staticfinalintSQL_DOUBLE=1356;","staticfinalintSQL_FLOAT=1357;","staticfinalintSQL_INTEGER=1358;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getLong(),dataType);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returngetBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["SQLTokentoken=nextToken(MISSING_PARENTHESIS_L);","nextCol:","while(true){","token=nextToken(MISSING_EXPRESSION);","StringconstraintName;","if(token.value==SQLTokenizer.CONSTRAINT){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["charcc=sql[k+1];","if((cc\>=\'0\')&&cc\<=\'9\')break;//isanumber--\>break","}else{","for(;k\<i;k++){","charcc=sql[k];","if((cc!=\'-\'&&cc!=\'$\'&&cc\<\'0\')||cc\>\'9\')break;//isidentifier--\>break"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["store.writeFinsh(null);","raFile.close();","@Override","voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_VIEW);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["finalpublicvoidsetMaxRows(intmax)throwsSQLException{","if(max\<0)","throwSmallSQLException.create(Language.ROWS_WRONG_MAX,String.valueOf(max));","maxRows=max;","finalpublicvoidsetEscapeProcessing(booleanenable)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["beforeFirst();","@Override","finalTableViewgetTableView(){","returntable;","@Override","finalvoiddeleteRow()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["colCount=nextColCount;","else","if(colCount!=nextColCount)","throwSmallSQLException.create(Language.UNION_DIFFERENT_COLS,newObject[]{newInteger(colCount),newInteger(nextColCount)});","returnresult;","finalbooleanisNull(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["finallonggetRowPosition(){","returnfilePos;","@Override","finalvoidsetRowPosition(longrowPosition)throwsException{","filePos=rowPosition;","if(filePos\<0||!moveToRow()){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["{INDEX_MISSING,\"Index\'\'{0}\'\'existiertnicht.\"},","{INDEX_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeingÃ¼ltigerIndexspeicher.\"},","{INDEX_CORRUPT,\"ErrorbeimLadendesIndex.DieIndexDateiistbeschÃ¤digt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ZuvieleidentischeEintrÃ¤geimIndex.\"},","{FILE_TOONEW,\"Dateiversion({0})derDatei\'\'{1}\'\'istzuneufÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_TOOOLD,\"Dateiversion({0})derDatei\'\'{1}\'\'istzualtfÃ¼rdieseLaufzeitbibliothek.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["token=nextToken();","booleannullableWasSet=false;","booleandefaultWasSet=col.isAutoIncrement();//withdatatypeCOUNTERalreadythisvalueisset","while(true){","if(token==null){","cmdCreate.addColumn(col);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intsavepoint=con.getSavepoint();","try{","for(intt=0;t\<tables.size();t++){","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(t));","TableViewtable=result.getTableView();","ColumnstableColumns=table.columns;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["DatabasegetDatabase(booleanreturnNull)throwsSQLException{","testClosedConnection();","if(!returnNull&&database==null)throwSmallSQLException.create(Language.DB_NOTCONNECTED);","returndatabase;","ObjectgetMonitor(){","returnthis;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["}else{","if(isTypeTable){","row[3]=\"TABLE\";","rows.add(row);","}catch(Exceptione){","Object[][]data=newObject[rows.size()][];"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privatefinalWeakHashMapconnections=newWeakHashMap();","staticDatabasegetDatabase(Stringname,SSConnectioncon,booleancreate)throwsSQLException{","if(name==null){","returnnull;","if(name.startsWith(\"file:\")){","name=name.substring(5);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["filePos=table.getFirstPage();","row=1;","returnmoveToValidRow();","finalprivatevoidsetNextFilePos(){","if(filePos\<0)return;//endofrows","if(store==Store.NOROW)"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["break;","caseSQLTokenizer.SUM:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.SUM);","break;","caseSQLTokenizer.MAX:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicResultSetgetTypeInfo()throwsSQLException{","String[]colNames={\"TYPE_NAME\",\"DATA_TYPE\",\"PRECISION\",\"LITERAL_PREFIX\",\"LITERAL_SUFFIX\",\"CREATE_PARAMS\",\"NULLABLE\",\"CASE_SENSITIVE\",\"SEARCHABLE\",\"UNSIGNED_ATTRIBUTE\",\"FIXED_PREC_SCALE\",\"AUTO_INCREMENT\",\"LOCAL_TYPE_NAME\",\"MINIMUM_SCALE\",\"MAXIMUM_SCALE\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"NUM_PREC_RADIX\"};","Object[][]data={","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.UNIQUEIDENTIFIER)),Utils.getInteger(36),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIT)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TINYINT)),Utils.getInteger(3),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnDouble.parseDouble(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnDouble.parseDouble(readLongString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["thrownewError();","token=nextToken(MISSING_WHEN_ELSE_END);","privateExpressionfunction(Commandcmd,SQLTokentoken,booleanisEscape)throwsSQLException{","Expressionexpr;","switch(token.value){","caseSQLTokenizer.CONVERT:{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(param1.isNull())return0;","switch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){","caseSQLTokenizer.INT:","intintValue=param1.getInt();","if(intValue\<0)","return-1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["}else{","Table.drop(this,tableName);","voidremoveTableView(StringtableViewName){","synchronized(tableViews){","tableViews.remove(tableViewName);","voidreplaceTable(TableoldTable,TablenewTable)throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Columncol=datatype(false);","col.setName(colName);","token=nextToken();","booleannullableWasSet=false;","booleandefaultWasSet=col.isAutoIncrement();//withdatatypeCOUNTERalreadythisvalueisset","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;","caseSQLTokenizer.COMMA:","continuenextCol;","default:","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2double(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(token.value){","caseSQLTokenizer.WHERE:","where(cmd);","break;","caseSQLTokenizer.GROUP:","group(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.UNIQUEIDENTIFIER)),Utils.getInteger(36),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIT)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TINYINT)),Utils.getInteger(3),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIGINT)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARBINARY)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARBINARY)),Utils.getInteger(65535),\"0x\",null,\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintFLOAT=337;","staticfinalintDOUBLE=338;","staticfinalintDATE=340;","staticfinalintTIME=341;","staticfinalintTIMESTAMP=342;","staticfinalintSMALLDATETIME=343;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Databasedatabase=con.getDatabase(true);","if(database==null)","returnSSDriver.URL_PREFIX;","returnSSDriver.URL_PREFIX+\':\'+database.getName();","publicStringgetUserName(){","return\"\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["thrownoCurrentRow();","floatgetFloat(intoffset,intdataType)throwsException{","thrownoCurrentRow();","intgetInt(intoffset,intdataType)throwsException{","thrownoCurrentRow();","longgetLong(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["publicclassExpressionFunctionReplaceextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.REPLACE;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["importjava.sql.*;","abstractclassStore{","staticfinalStoreNULL=newStoreNull();","staticfinalStoreNOROW=newStoreNoCurrentRow();","abstractbooleanisNull(intoffset)throwsException;","abstractbooleangetBoolean(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["if(t\<0){","t+=86400000;","d--;","millis=t%1000;","t/=1000;","second=t%60;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnreadLong();","voidwriteTime(longtime){","writeInt((int)((time/1000)%86400));","longreadTime(){","returnreadInt()*1000L;","voidwriteDate(longdate){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalprivatevoidremoveNodeLastLevel()throwsSQLException{","intoldOffset=offset;","correctPointers(0,oldOffset,-2,0);","size-=2;","System.arraycopy(data,oldOffset+2,data,oldOffset,size-oldOffset);","offset=oldOffset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(!previous()){","returnfalse;","returntrue;","intgetRow(){","returnrow\>getRowCount()?0:row;","finallonggetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["commandSelect.from.setRowPosition(rowPosition);","finalbooleanrowInserted(){","returncommandSelect.from.rowInserted();","finalbooleanrowDeleted(){","returncommandSelect.from.rowDeleted();","voidnullRow(){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["break;","caseSQLTokenizer.INT:","page=add(page,rowOffset,intToBinarySortOrder(expr.getInt()),isLastValues,2);","break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["booleanisNull()throwsException{","if(param1.getBoolean())","returnparam2.isNull();","returnparam3.isNull();","booleangetBoolean()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["privateintsizeUsed;","privateintsizePhysical;","privateintnextPageOffset;","privatelongfilePosUpdated;","privateinttype;","privateStoreImplupdatePointer;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleDoubleFactor[scale]*signum;","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleDoubleFactor[scale]*signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicbooleansupportsMinimumSQLGrammar(){","returntrue;","publicbooleansupportsCoreSQLGrammar(){","returntrue;","publicbooleansupportsExtendedSQLGrammar(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Stringmsg=throwable.getMessage();","if(msg==null||msg.length()\<30){","Stringmsg2=throwable.getClass().getName();","msg2=msg2.substring(msg2.lastIndexOf(\'.\')+1);","if(msg!=null)","msg2=msg2+\':\'+msg;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(length!=bytes.length){","byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;","returnbytes;","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(diff\>0)pointer+=diff;","if(level\<2){","startOffset=offset;","correctPointers(pointer,oldOffset,diff,level+1);","offset=startOffset;","firstNode=false;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnreadString();","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(existIndexes==null){","this.indexes=newIndexes;","}else{","this.indexes=existIndexes;","existIndexes.add(newIndexes);","write(con);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["isFullNotValid=newboolean[10];","voidbeforeFirst()throwsException{","left.beforeFirst();","right.beforeFirst();","isBeforeFirst=true;","fullRightRowCounter=0;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["try{","returnDouble.parseDouble(val)!=0;","}catch(NumberFormatExceptione){/*ignoreitifitnotanumber*/}","return\"true\".equalsIgnoreCase(val)||\"yes\".equalsIgnoreCase(val)||\"t\".equalsIgnoreCase(val);","staticlongdoubleToMoney(doublevalue){","if(value\<0)"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setPrecision(value);","token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return((data[offset++]&0xFF)\<\<8)|(data[offset++]&0xFF);","finalprivatevoidwriteShort(intvalue){","data[offset++]=(byte)(value\>\>8);","data[offset++]=(byte)(value);","privatefinalvoidresize()throwsSQLException{","intnewsize=data.length\<\<1;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["previousToken();","isNot=true;","continue;","default:","previousToken();","returnleftExpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.createFromException(e);","publicInputStreamgetAsciiStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"getUnicodeStream\");","publicInputStreamgetBinaryStream(intcolumnIndex)throwsSQLException{","returnnewByteArrayInputStream(getBytes(columnIndex));","publicStringgetString(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["rowSource.noRow();","rowIdx=-1;","voidexecute()throwsException{","rowSource.execute();","rowList.clear();","rowIdx=-1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["Stringmessage=(String)messages.get(key);","assert(message!=null):\"Messagecodenotfound:\"+key;","returnmessage;","publicStringgetSqlState(Stringkey){","StringsqlState=(String)sqlStates.get(key);","assert(sqlState!=null):\"SQLStatecodenotfound:\"+key;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(length\>str.length())","returnstr;","returnstr.substring(0,length);","caseSQLTokenizer.CHAR:{","Stringstr=convertToString();","intlength=datatype.getDisplaySize();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["this.dataType=dataType;","staticlongcalcMillis(Detailsdetails){","returncalcMillis(details.year,details.month,details.day,details.hour,details.minute,details.second,details.millis);","staticlongcalcMillis(intyear,intmonth,finalintday,finalinthour,finalintminute,finalintsecond,finalintmillis){","longresult=millis;","result+=second*1000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["default:","returngetScale(dataType);","staticSQLExceptioncreateUnsupportedConversion(intfromDataType,Objectobj,inttoDataType){","Object[]params={","SQLTokenizer.getKeyWord(fromDataType),","obj,"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(storePage==null){","throwSmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED,name);","con.rollbackFile(raFile);","close();","if(lobs!=null)","lobs.drop(con);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalprivateIndexNodefindRows(IndexNodepage,Expressionexpr,booleansearchNullValues,ArrayListnodeList)throwsException{","if(expr.isNull()){","if(!searchNullValues){","returnnull;","page=findNull(page);","}else{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["millis=Integer.parseInt(strMillis)*100;","break;","case2:","millis=Integer.parseInt(strMillis)*10;","break;","case3:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(isNull())returnnull;","returnUtils.getInteger(getInt());","finalStringgetString()throwsException{","if(isNull())returnnull;","returnString.valueOf(getInt());","finalintgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["StoreImplgetStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","TableStorePagestorePage=requestLock(con,pageOperation,filePos);","returnStoreImpl.createStore(this,storePage,pageOperation,filePos);","StoreImplgetStore(TableStorePagestorePage,intpageOperation)throwsException{","returnStoreImpl.recreateStore(this,storePage,pageOperation);","StoreImplgetStoreInsert(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["{DB_NONEXISTENT,\"DieDatenbank\'\'{0}\'\'existiertnicht.\"},","{DB_NOT_DIRECTORY,\"DasVerzeichnis\'\'{0}\'\'istkeineSmallSQLDatenbank.\"},","{DB_NOTCONNECTED,\"SiesindnichtmiteinerDatenbankverbunden.\"},","{CONNECTION_CLOSED,\"DieVerbindungistbereitsgeschlossen.\"},","{VIEW_INSERT,\"INSERTwirdnichtunterstÃ¼tztfÃ¼reineView.\"},","{VIEWDROP_NOT_VIEW,\"DROPVIEWkannnichtmit\'\'{0}\'\'verwendetwerden,weileskeineViewist.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returncmd;","privateCommandTablecreateIndex(booleanunique)throwsSQLException{","StringindexName=nextIdentifier();","nextToken(MISSING_ON);","Stringcatalog;","StringtableName=catalog=nextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["doublegetDouble()throwsException{","if(param1.getBoolean())","returnparam2.getDouble();","returnparam3.getDouble();","longgetMoney()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["caseSQLTokenizer.PARENTHESIS_L://(","returnrowSource(cmd,tables,SQLTokenizer.PARENTHESIS_R);","caseSQLTokenizer.ESCAPE_L://{","token=nextToken(MISSING_OJ);","returnrowSource(cmd,tables,SQLTokenizer.ESCAPE_R);","caseSQLTokenizer.SELECT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["raFile.close();","raFile=null;","privatefinalvoidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_INDEX);","buffer.putInt(INDEX_VERSION);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["complement[i]=(byte)((i==last)?-complement[i]:~complement[i]);","while(complement[last]==0){","last--;","complement[last]++;","byte[]toByteArray(){","if(signum==0)returnEMPTY_BYTES;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["this.name=name;","this.readonly=readonly;","directory=canonicalFile;","if(!directory.isDirectory()){","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefile=newFile(directory,Utils.MASTER_FILENAME);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();","if(length\<bytes.length){","byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["Connectioncon=newSSDriver().connect(\"jdbc:smallsql\",newProperties());","Statementst=con.createStatement();","if(args.length\>0){","con.setCatalog(args[0]);","System.out.println(\"\\tVersion:\"+con.getMetaData().getDatabaseProductVersion());","System.out.println(\"\\tCurrentdatabase:\"+con.getCatalog());"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["returnfalse;","publicbooleanstoresMixedCaseIdentifiers(){","returntrue;","publicbooleansupportsMixedCaseQuotedIdentifiers(){","returntrue;","publicbooleanstoresUpperCaseQuotedIdentifiers(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(type\<Expression.GROUP_BEGIN)type=Expression.GROUP_BY;","newRow[i]=newExpressionValue(type);","addRow(newRow);","finalprivatevoidaccumulateRow()throwsException{","for(inti=0;i\<currentRow.length;i++){","Expressionsrc=expressions.get(i);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnnewStorePage(page,8,raFile,filePos);","voidcreateNextValue(SSConnectioncon)throwsSQLException{","value++;","con.add(createStorePage());","voidsetNextValue(Expressionexpr)throwsException{","longnewValue=expr.getLong();"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["Stringstr1=param1.getString();","Stringstr2=param2.getString();","intlength=str2.length();","if(length==0){","returnstr1;","Stringstr3=param3.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["}else","if(getDataType(left.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=right.getNumeric();","num.mul(left.getInt());","returnnum;","}else{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["doublegetDouble()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnDouble.parseDouble(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{ROWSOURCE_READONLY,\"DieRowsourceistschreibgeschÃ¼tzt.\"},","{STMT_IS_CLOSED,\"DasStatementistbereitsgeschlossen.\"},","{SUBQUERY_COL_COUNT,\"DieAnzahlderSpalteninderSubquerymuss1seinundnicht{0}.\"},","{JOIN_DELETE,\"DieMethodedeleteRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{JOIN_INSERT,\"DieMethodeinsertRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{DELETE_WO_FROM,\"DieMethodedeleteRowbenÃ¶tigteinenFROMAusdruck.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["expr=newExpressionFunctionUCase();","break;","caseSQLTokenizer.CURDATE:","caseSQLTokenizer.CURRENTDATE:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.DATE),SQLTokenizer.DATE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["row[0]=Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE","row[1]=columnName;//COLUMN_NAME","finalintdataType=column.getDataType();","row[2]=Utils.getInteger(dataType);//DATA_TYPE","row[3]=SQLTokenizer.getKeyWord(dataType);//TYPE_NAME","row[4]=Utils.getInteger(column.getPrecision());//COLUMN_SIZE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLong());","caseSQLTokenizer.MONEY:","returnnewMutableNumeric(getMoney(),4);","caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["longgetLong()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalStringsgetColumns(){","returncolumns;","finalintmatchFactor(Stringsstrings){","if(strings.size()\<columns.size())","returnInteger.MAX_VALUE;//doesnotmap","nextColumn:"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["intprecision=0;","for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getScale());","returnprecision;","finalprivateExpressiongetResult()throwsException{","for(inti=0;i\<cases.size();i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["if(e.key==key){","size--;","if(prev==e)","table[i]=next;","else","prev.next=next;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseLES_EQU:returnleft.getDouble()\<=right.getDouble();","caseUNEQUALS:returnleft.getDouble()!=right.getDouble();","caseBETWEEN:","double_left=left.getDouble();","return_left\>=right.getDouble()&&right2.getDouble()\>=_left;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintSUB=72;//-","staticfinalintMUL=81;//*","staticfinalintDIV=82;///","staticfinalintMOD=83;//%","staticfinalintBIT_NOT=91;//~","staticfinalintNEGATIVE=101;//-"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["StringgetTableName(){","returnnull;","finalintgetPrecision(){","switch(dataType){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voidclose()throwsException{","if(raFile!=null){","raFile.close();","raFile=null;","privatefinalvoidwriteMagic(FileChannelraFile)throwsException{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64){//apreviouscallofgetNext()hasreturn-1","shift=48;","offset=0;","listEnum.stack=0;","listEnum.offsetStack[0]=2+pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER,params);","SQLExceptioncreateUnspportedConversion(intdataType){","inttype=left==null?right.getDataType():getDataType(left,right);","Object[]params=newObject[]{","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(type),"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","col.setDataType(dataType);","returncol;","privateCommandCreateViewcreateView()throwsSQLException{","StringviewName=nextIdentifier();","nextToken(MISSING_AS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["store.sharedPageData=true;","store.readPageHeader();","store=store.loadUpdatedStore();","store.offset=PAGE_CONTROL_SIZE;","returnstore;","privatefinalvoidreadPageHeader()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"UPDATE\",UPDATE);","addKeyWord(\"CREATE\",CREATE);","addKeyWord(\"DROP\",DROP);","addKeyWord(\"ALTER\",ALTER);","addKeyWord(\"SET\",SET);","addKeyWord(\"EXEC\",EXECUTE);//aliasforEXECUTE;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{STXADD_FUNC_UNKNOWN,\"Unknownfunction.\"},","{STXADD_PARAM_INVALID_COUNT,\"Invalidparametercount.\"},","{STXADD_JOIN_INVALID,\"InvalidJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnexpectedclosingparenthesisinFROMclause.\"},","{STXADD_KEYS_REQUIRED,\"Requiredkeywordsare:\"},","{STXADD_NOT_NUMBER,\"Numbervaluerequired(passed=\'\'{0}\'\').\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privateExpressionwhere;","RowSourcefrom;","privateExpressionsgroupBy;","privateExpressionhaving;","privateExpressionsorderBy;","privatebooleanisAggregateFunction;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["Expressionexpr=expressions.get(i);","inttype=expr.getType();","if(type\<Expression.GROUP_BEGIN)type=Expression.GROUP_BY;","newRow[i]=newExpressionValue(type);","addRow(newRow);","finalprivatevoidaccumulateRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["else","precision=readInt();","column.setPrecision(precision);","column.setScale(readByte());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","if(!readBoolean()){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=newSize;i\<size;i++)data[i]=null;","size=newSize;","if(size\>data.length)resize(newSize);","finalExpressionget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["buffer.position(0);","booleanunique=buffer.get()!=0;","FileIndexNoderoot=FileIndexNode.loadRootNode(unique,raFile,raFile.position());","returnnewFileIndex(root,raFile);","voidsave()throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["if((st.rsType==ResultSet.TYPE_SCROLL_INSENSITIVE||st.rsType==ResultSet.TYPE_SCROLL_SENSITIVE)&&","!from.isScrollable()){","from=newScrollable(from);","from.execute();","rs=newSSResultSet(st,this);","voidbeforeFirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","if(defaultValue==-1)","return0xFFFF;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{FILE_TOONEW,\"Fileversion({0})offile\'\'{1}\'\'istoonewforthisruntime.\"},","{FILE_TOOOLD,\"Fileversion({0})offile\'\'{1}\'\'istoooldforthisruntime.\"},","{FILE_CANT_DELETE,\"File\'\'{0}\'\'can\'tbedeleted.\"},","{ROW_0_ABSOLUTE,\"Row0isinvalidformethodabsolute().\"},","{ROW_NOCURRENT,\"Nocurrentrow.\"},","{ROWS_WRONG_MAX,\"Wrongmaxrowsvalue:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:","page=find(page,stringToBinarySortOrder(expr.getString(),false),nodeList);","break;","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(columnName!=null){","columns.add(columnName);","expressions.add(newExpressionName(columnName));","}else{","expressionDefList(cmd,expressions,columns);","returnnewIndexDescription(contrainName,tableName,constraintType,expressions,columns);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnname;","finalbooleanisPrimary(){","returnconstraintType==SQLTokenizer.PRIMARY;","finalbooleanisUnique(){","returnconstraintType==SQLTokenizer.PRIMARY||constraintType==SQLTokenizer.UNIQUE;","finalStringsgetColumns(){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["page.rollback();","page.freeLock();","publicvoidrollback()throwsSQLException{","log.println(\"Rollback\");","testClosedConnection();","synchronized(getMonitor()){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnreadBinary();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(table==null||tableTimestamp!=table.getTimestamp())compile(con);","finalIndexDescriptionsindexes=table.indexes;","updateCount=0;","cmdSel.from.execute();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["case\'D\':","case\'T\':","c=\'3\';","break;","case\'L\':","c=\'4\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["while(idx2\>=0){","buffer.append(str1.substring(idx1,idx2));","buffer.append(str3);","idx1=idx2+length;","idx2=str1.indexOf(str2,idx1);","if(idx1\>0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["page.addNode((char)0,rowOffset);","returnnull;","}else","returnpage.addRoot((char)0);","finalprivateIndexNodefind(IndexNodenode,longkey,intdigitCount,ArrayListnodeList){","for(inti=digitCount-1;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseISNULL:","caseISNOTNULL:","caseIN:","returnfalse;//Booleanoperationsreturneveraresult???,butatleastISNULLandISNOTNULL","caseNEGATIVE:","caseBIT_NOT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["abstractintgetInt(intoffset,intdataType)throwsException;","abstractlonggetLong(intoffset,intdataType)throwsException;","abstractlonggetMoney(intoffset,intdataType)throwsException;","abstractMutableNumericgetNumeric(intoffset,intdataType)throwsException;","abstractObjectgetObject(intoffset,intdataType)throwsException;","abstractStringgetString(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["returnreadLong()/(float)10000.0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/(float)10000.0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().floatValue();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetColumnExpression(column).getAlias();","publicStringgetColumnName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();","publicStringgetSchemaName(intcolumn)throwsSQLException{","returnnull;","publicintgetPrecision(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.CLOB:","returnUtils.bytes2unique(Utils.unique2bytes(param1.getString()),0);","returnUtils.bytes2unique(param1.getBytes(),0);","Object[]param={SQLTokenizer.getKeyWord(dataType)};"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["finalintdataType=getDataType();","switch(dataType){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["{UNSUPPORTED_CONVERSION_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_OPER,\"01000\"},","{UNSUPPORTED_DATATYPE_FUNC,\"01000\"},","{UNSUPPORTED_CONVERSION_FUNC,\"01000\"},","{UNSUPPORTED_TYPE_CONV,\"01000\"},","{UNSUPPORTED_TYPE_SUM,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.SQL_BIGINT:dataType=SQLTokenizer.BIGINT;break;","caseSQLTokenizer.SQL_BINARY:dataType=SQLTokenizer.BINARY;break;","caseSQLTokenizer.SQL_BIT:dataType=SQLTokenizer.BIT;break;","caseSQLTokenizer.SQL_CHAR:dataType=SQLTokenizer.CHAR;break;","caseSQLTokenizer.SQL_DATE:dataType=SQLTokenizer.DATE;break;","caseSQLTokenizer.SQL_DECIMAL:dataType=SQLTokenizer.DECIMAL;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StoreImplstore=newStoreImpl(table,storePage,type,-1);","store.page=storePage.page;","store.sharedPageData=true;","store.readPageHeader();","store=store.loadUpdatedStore();","store.offset=PAGE_CONTROL_SIZE;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["page[offset++]=(byte)(value);","intreadInt(){","return((page[offset++])\<\<24)|","((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SQL_VARCHAR:dataType=SQLTokenizer.VARCHAR;break;","default:thrownewError();","}else{","token=nextToken(MISSING_DATATYPE);","dataType=token.value;","Columncol=newColumn();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["st.con.log.println(\"insertRow()\");","if(!isInsertRow){","throwSmallSQLException.create(Language.RSET_NOT_INSERT_ROW);","getCmd().insertRow(st.con,values);","clearRowBuffer();","privatevoidtestNotInsertRow()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["break;","caseSQLTokenizer.TAN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionTan();","break;","caseSQLTokenizer.TRUNCATE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.RSET_NOT_PRODUCED);","returnrs;","SSResultSetgetResultSet(){","returnrs;","intgetUpdateCount(){","returnupdateCount;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","bytes=newbyte[4];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnnewMutableNumeric(Utils.bytes2double(readLongBinary()));","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicfloatfloatValue(){","returnvalue;","publicintintValue(){","return(int)value;","publiclonglongValue(){","return(long)value;"]": ["|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["getExpressionNameFromTree(list,tree);","returnlist;","privatestaticfinalvoidgetExpressionNameFromTree(Expressionslist,Expressiontree){","if(tree.getType()==Expression.NAME){","list.add(tree);","Expression[]params=tree.getParams();"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticfinalintTIME=341;","staticfinalintTIMESTAMP=342;","staticfinalintSMALLDATETIME=343;","staticfinalintCHAR=350;","staticfinalintNCHAR=352;","staticfinalintVARCHAR=353;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Math.min(row,1):","Math.min(row+1,-1);","returnrowPos==1;","finalbooleanrelative(introws){","if(rows==0)returnrowPos==1;","rowPos=Math.min(Math.max(rowPos+rows,-1),1);"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["importjava.util.List;","importsmallsql.database.language.Language;","classMemoryResultextendsDataSource{","ExpressionValue[]currentRow;","privatefinalColumnscolumns=newColumns();","privateintrowIdx=-1;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["finalstaticprivateintintToBinarySortOrder(intvalue){","returnvalue^0x80000000;","finalstaticprivatelonglongToBinarySortOrder(longvalue){","returnvalue^0x8000000000000000L;","finalstaticprivatechar[]stringToBinarySortOrder(Stringvalue,booleanneedTrim){","intlength=value.length();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["finalclassExpressions{","privateintsize;","privateExpression[]data;","Expressions(){","data=newExpression[16];","Expressions(intinitSize){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["if(quotient\<0){","quotient=-quotient;","signum=-signum;","intvalueLength=value.length;","longcarryover=0;","for(inti=0;i\<valueLength;i++){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["FileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database);","booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.TABLE_EXISTENT,name);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["store.writeChars(chars);","writeLong(store.writeFinsh(null));","StringreadLongString()throwsException{","longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","if(store==null)throwSmallSQLException.create(Language.LOB_DELETED);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatevoidclearRowBuffer(){","if(values!=null){","for(inti=values.length-1;i\>=0;i--){","values[i].clear();","publicvoidmoveToInsertRow()throwsSQLException{","if(isUpdatable){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["this.offset=newOffset;","voidwriteByte(intvalue){","intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value);","intreadByte(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnSQLTokenizer.UCASE;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","returngetString().getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|"],
"["caseTypes.TIMESTAMP:","return\"java.sql.Timestamp\";","caseTypes.CHAR:","caseTypes.VARCHAR:","caseTypes.LONGVARCHAR:","case-11://uniqueidentifier"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.NUMERIC:","return((Number)obj).intValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicstaticfinalStringCONNECTION_CLOSED=\"SS-0070\";","publicstaticfinalStringVIEW_INSERT=\"SS-0100\";","publicstaticfinalStringVIEWDROP_NOT_VIEW=\"SS-0101\";","publicstaticfinalStringVIEW_CANTDROP=\"SS-0102\";","publicstaticfinalStringRSET_NOT_PRODUCED=\"SS-0130\";","publicstaticfinalStringRSET_READONLY=\"SS-0131\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["this.length=val.length;","booleanisNull(){","returngetObject()==null;","booleangetBoolean()throwsException{","returngetBoolean(getObject(),dataType);","staticbooleangetBoolean(Objectobj,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","return((Number)obj).intValue()!=0;","caseSQLTokenizer.REAL:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateCommandCreateViewcreateView()throwsSQLException{","StringviewName=nextIdentifier();","nextToken(MISSING_AS);","SQLTokentoken=nextToken(MISSING_SELECT);","CommandCreateViewcmd=newCommandCreateView(con.log,viewName);","cmd.sql=newString(sql,token.offset,sql.length-token.offset);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(nodeStack.size()\>1){","nodeStack.pop();","continue;","}else{","status.idx=status.nodes.length;//topreventproblemswithscrollbackaftermultiplecallsaftertheend.","return-1;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["staticfinalintLOG10=1012;","staticfinalintMOD=1013;","staticfinalintPI=1014;","staticfinalintPOWER=1015;","staticfinalintRADIANS=1016;","staticfinalintRAND=1017;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(right!=null){","right2=param;","break;","if(inList!=null&&idx\>0&&idx\<=inList.length){","inList[idx-1]=param;","super.setParamAt(param,idx);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intgetInt(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getInt();","longgetLong(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getFloat();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["Expressionslist=newExpressions();","SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_R){","returnlist;","previousToken();","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["thrownewError();","voidnoRow(){","currentRow=null;","finalprivatebooleanmove(){","if(rowIdx\<rowList.size()&&rowIdx\>=0){","currentRow=(ExpressionValue[])rowList.get(rowIdx);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(readDouble());","caseSQLTokenizer.MONEY:","returnnewMutableNumeric(readLong(),4);","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(readInt(),4);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnSQLTokenizer.LCASE;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","returngetString().getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|"],
"["writeInt(num.getInternalValue()[i]);","MutableNumericreadNumeric(){","int[]value=newint[readByte()];","intscale=readByte();","intsignum=readByte();","for(inti=0;i\<value.length;i++){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnname;","finalvoidsetName(Stringname){","this.alias=this.name=name;","finalStringgetAlias(){","returnalias;","finalvoidsetAlias(Stringalias){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["publicbooleansupportsAlterTableWithAddColumn(){","thrownewjava.lang.UnsupportedOperationException(\"MethodsupportsAlterTableWithDropColumn()notyetimplemented.\");","publicbooleansupportsColumnAliasing(){","returntrue;","publicbooleannullPlusNonNullIsNull(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["con.createStatement().execute(buffer.toString());","database.replaceTable(oldTable,newTable);","}catch(Exceptionex){","try{","database.dropTable(con,newName);","}catch(Exceptionex1){/*ignoreit*/}"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["store.writeFinsh(con);","for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeFinish(con);","updateCount++;","if(needGeneratedKeys){","Object[][]data=newObject[1][keys.size()];"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["publicSavepointsetSavepoint()throwsSQLException{","returnnewSSSavepoint(getSavepoint(),null,transactionTime);","publicSavepointsetSavepoint(Stringname)throwsSQLException{","returnnewSSSavepoint(getSavepoint(),name,transactionTime);","publicvoidrollback(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["voidnoRow(){","isAfterLast=true;","left.noRow();","right.noRow();","row=0;","voidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["staticfinalintBIT_XOR=43;//^","staticfinalintEQUALS=51;//=","staticfinalintEQUALS_NULL=52;//likeEqualsbut(null=null)--\>true","staticfinalintGREATER=53;//\>","staticfinalintGRE_EQU=54;//\>=","staticfinalintLESSER=55;//\<"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","caseSQLTokenizer.TABLE:","Database.dropTable(con,catalog,name);","break;","caseSQLTokenizer.VIEW:","Database.dropView(con,catalog,name);"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["returngetInt()!=0;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return\"java.lang.Integer\";","caseTypes.BIT:","caseTypes.BOOLEAN:","return\"java.lang.Boolean\";","caseTypes.BINARY:","caseTypes.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["voidnoRow(){","currentRow=null;","finalprivatebooleanmove(){","if(rowIdx\<rowList.size()&&rowIdx\>=0){","currentRow=(ExpressionValue[])rowList.get(rowIdx);","returntrue;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["finalpublicbooleanexecute(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);","returnexecute(sql);","finalpublicbooleanexecute(Stringsql,String[]columnNames)throwsSQLException{","setNeedGeneratedKeys(columnNames);","returnexecute(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["correctPointers(pointer,oldOffset,diff,level+1);","offset=startOffset;","firstNode=false;","}else{","return;","finalprivateintgetPointer(){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:","caseSQLTokenizer.DELETE:","if(storePage.page==null){","FileChannelraFile=storePage.raFile;","synchronized(raFile){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(idx1\>0){","buffer.append(str1.substring(idx1));","returnbuffer.toString();","returnstr1;","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["publicbooleansupportsCoreSQLGrammar(){","returntrue;","publicbooleansupportsExtendedSQLGrammar(){","returntrue;","publicbooleansupportsANSI92EntryLevelSQL(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returntrue;","publicbooleansupportsCoreSQLGrammar(){","returntrue;","publicbooleansupportsExtendedSQLGrammar(){","returntrue;","publicbooleansupportsANSI92EntryLevelSQL(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case6://ddmonyy","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(p1!=null&&p2!=null){","if(p1==null)returnfalse;","for(inti=0;i\<p1.length;i++){","if(!p2[i].equals(p1[i]))returnfalse;","Stringname1=((Expression)expr).name;","Stringname2=name;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnparam1.getString();","finalprivatelonggetDateTimeLong()throwsException{","switch(param1.getDataType()){","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["for(intj=0;j\<src.length;j++){","Entrye=src[j];","if(e!=null){","src[j]=null;","do{","Entrynext=e.next;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returnvalue;","publiclonglongValue(){","returnvalue;","publicStringtoString(){","returnString.valueOf(value);","publicObjectgetImmutableObject(){"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["{PARAM_EMPTY,\"01000\"},","{PARAM_IDX_OUT_RANGE,\"01000\"},","{COL_DUPLICATE,\"01000\"},","{COL_MISSING,\"01000\"},","{COL_VAL_UNMATCH,\"01000\"},","{COL_INVALID_SIZE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["pr.setNeedGeneratedKeys(autoGeneratedKeys);","returnpr;","publicPreparedStatementprepareStatement(Stringsql,int[]columnIndexes)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(columnIndexes);","returnpr;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returncmdCreate;","caseSQLTokenizer.COMMA:","continuenextCol;","token=addColumn(token,cmdCreate);","if(token==null){","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnSQLTokenizer.RIGHT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["{TABLE_OR_VIEW_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidTableorViewstore.\"},","{TABLE_EXISTENT,\"TableorView\'\'{0}\'\'alreadyexists.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'isnotatable.\"},","{PK_ONLYONE,\"Atablecanhaveonlyoneprimarykey.\"},","{KEY_DUPLICATE,\"DuplicateKey.\"},","{MONTH_TOOLARGE,\"MonthsaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returntrue;","longrowPosition=scrollStatus.getRowOffset(false);","if(rowPosition\>=0){","rowSource.setRowPosition(rowPosition);","returntrue;","}else{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(comp==0&&leftBytes.length!=rightBytes.length){","comp=leftBytes.length\<rightBytes.length?-1:1;","returncomp;","staticCommandSelectcreateMemoryCommandSelect(SSConnectioncon,String[]colNames,Object[][]data)throwsSQLException{","MemoryResultsource=newMemoryResult(data,colNames.length);","CommandSelectcmd=newCommandSelect(con.log);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["firstNode2=firstNode1;","firstNode1=firstNode;","firstNode=true;","break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){","return;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.BLOB:","return(long)(Utils.bytes2double(readLongBinary())*10000L);","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{VIEW_CANTDROP,\"NonsipuÃ²effettuaredropsullaview\'\'{0}\'\'.\"},","{RSET_NOT_PRODUCED,\"NessunResultSetÃ¨statoprodotto.\"},","{RSET_READONLY,\"IlResultSetÃ¨disolalettura.\"},","{RSET_FWDONLY,\"IlResultSetÃ¨forwardonly.\"},//norealtranslation","{RSET_CLOSED,\"IlResultSetÃ¨chiuso.\"},","{RSET_NOT_INSERT_ROW,\"IlcursorenonÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["switch(token.value){","caseSQLTokenizer.COMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_COMMITTED;","break;","caseSQLTokenizer.UNCOMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_UNCOMMITTED;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["columnExpressions.clear();","for(inti=0;i\<count;i++){","matrix[i]=i;","if(count!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","}else{"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["this.value=dateTime=DateTime.valueOf((java.util.Date)newValue);","this.dataType=dateTime.getDataType();","}else","if(newValueinstanceofbyte[])","this.dataType=SQLTokenizer.VARBINARY;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=Boolean.valueOf(!index.isUnique());//NON_UNIQUE","row[5]=index.getName();//INDEX_NAME","row[6]=type;//TYPE","row[7]=Utils.getShort(c+1);//ORDINAL_POSITION"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["clearRowBuffer();","if(values==null){","getUpdateValue(1);","publicStatementgetStatement(){","returnst;","publicObjectgetObject(inti,Mapmap)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnTypes.LONGVARCHAR;","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","returnTypes.CLOB;","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(database.getTableView(con,table)instanceofView){","if(isTypeView){","row[3]=\"VIEW\";","rows.add(row);","}else{","if(isTypeTable){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["packagesmallsql.database;","importjava.io.*;","importsmallsql.database.language.Language;","publicclassCommandDropextendsCommand{","CommandDrop(Loggerlog,Stringcatalog,Stringname,inttype){","super(log);"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["compileLinkExpressionName((ExpressionName)expr);","elsecompileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionName(ExpressionNameexpr)throwsException{","StringtableAlias=expr.getTableAlias();","if(tableAlias!=null){","intt=0;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.SERIALIZABLE:","cmd.isolationLevel=Connection.TRANSACTION_SERIALIZABLE;","returncmd;","default:","thrownewError();","privateCommandexecute()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintMILLISECOND=1209;","staticfinalintMINUTE=1210;","staticfinalintMONTH=1211;","staticfinalintMONTHNAME=1212;","staticfinalintNOW=1213;","staticfinalintQUARTER=1214;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["writeInt(expr.getInt());","break;","caseSQLTokenizer.BIGINT:","writeLong(expr.getLong());","break;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["log.println(\"Rollback\");","testClosedConnection();","synchronized(getMonitor()){","intcount=commitPages.size();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnnewByteArrayInputStream(getBytes(columnIndex));","publicStringgetString(StringcolumnName)throwsSQLException{","returngetString(findColumn(columnName));","publicbooleangetBoolean(StringcolumnName)throwsSQLException{","returngetBoolean(findColumn(columnName));","publicbytegetByte(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["buf.append(\'\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case7://Mondd,yy","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["store.readPageHeader();","store.page=newbyte[store.sizeUsed];","raFile.position(filePos);","ByteBufferbuffer=ByteBuffer.wrap(store.page);","raFile.read(buffer);","}else{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","token=nextToken();","intdisplaySize;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publiclonglongValue(){","if(value.length==0||signum==0){","return0;","}else{","if(value.length==1&&(value[0]\>0)){","returnUtils.double2long(value[0]/scaleDoubleFactor[scale]*signum);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["FileoldFile=oldTable.getFile(this);","FilenewFile=newTable.getFile(this);","FiletmpFile=newFile(Utils.createTableViewFileName(this,\"#\"+System.currentTimeMillis()+this.hashCode()));","if(!oldFile.renameTo(tmpFile)){","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","if(!newFile.renameTo(oldFile)){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["staticfinalintT=401;","staticfinalintTS=402;","staticfinalintFN=403;","staticfinalintCALL=404;","staticfinalintOJ=405;","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["packagesmallsql.database;","classWhereextendsRowSource{","finalprivateRowSourcerowSource;","finalprivateExpressionwhere;","privateintrow=0;","privatebooleanisCurrentRow;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["caseSQLTokenizer.DECIMAL:","returnparam1.getNumeric().getSignum();","caseSQLTokenizer.DOUBLE:","doubledoubleValue=param1.getDouble();","if(doubleValue\<0)","return-1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["publicResultSetgetUDTs(Stringcatalog,StringschemaPattern,StringtypeNamePattern,int[]types)throwsSQLException{","String[]colNames={\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"CLASS_NAME\",\"DATA_TYPE\",\"REMARKS\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicConnectiongetConnection(){","returncon;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case101://USAmm/dd/yyyy","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["default:","thrownewError(String.valueOf(expr.getDataType()));","finalvoidremoveValue(longrowOffset,Expressionsexpressions)throwsException{","ArrayListnodeList=newArrayList();","Objectobj=findRows(expressions,true,nodeList);","if(!rootPage.getUnique()){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","returnnewCommandCreateDatabase(con.log,token.getName(sql));","privateCommandTablecreateTable()throwsSQLException{","Stringcatalog;","StringtableName=catalog=nextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{STXADD_IDENT_WRONG,\"01000\"},","{STXADD_OPER_MINUS,\"01000\"},","{STXADD_FUNC_UNKNOWN,\"01000\"},","{STXADD_PARAM_INVALID_COUNT,\"01000\"},","{STXADD_JOIN_INVALID,\"01000\"},","{STXADD_FROM_PAR_CLOSE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnDouble.parseDouble(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnDouble.parseDouble(ois.readObject().toString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{COL_READONLY,\"01000\"},","{COL_INVALID_NAME,\"01000\"},","{COL_IDX_OUT_RANGE,\"01000\"},","{COL_AMBIGUOUS,\"01000\"},","{GROUP_AGGR_INVALID,\"01000\"},","{GROUP_AGGR_NOTPART,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["return(int)value;","publiclonglongValue(){","returnvalue;","publicStringtoString(){","returnString.valueOf(value);","publicObjectgetImmutableObject(){"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|"],
"["if(operation==ExpressionArithmetic.EQUALS){","Expressionparam0=params[0];","Expressionparam1=params[1];","Expressionscolumns0=Utils.getExpressionNameFromTree(param0);","Expressionscolumns1=Utils.getExpressionNameFromTree(param1);","if(left.isExpressionsFromThisRowSource(columns0)&&right.isExpressionsFromThisRowSource(columns1)){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["checkStatement();","cmd.verifyParams();","if(getMaxRows()!=0&&(top==-1||top\>getMaxRows()))","cmd.setMaxRows(getMaxRows());","cmd.execute(con,this);","publicvoidsetNull(intparameterIndex,intsqlType)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["finalvoidafterLast()throwsException{","dataSourceIdx=dataSources.size()-1;","currentDS=dataSources.get(dataSourceIdx);","currentDS.afterLast();","row=0;","finalintgetRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["{CANT_LOCK_FILE,\"Can\'\'tlockfile\'\'{0}\'\'.AsingleSmallSQLDatabasecanonlybeopenedfromasingleprocess.\"},","{DB_EXISTENT,\"Database\'\'{0}\'\'alreadyexists.\"},","{DB_NONEXISTENT,\"Database\'\'{0}\'\'doesnotexist.\"},","{DB_NOT_DIRECTORY,\"Directory\'\'{0}\'\'isnotaSmallSQLdatabase.\"},","{DB_NOTCONNECTED,\"YouarenotconnectedwithaDatabase.\"},","{CONNECTION_CLOSED,\"Connectionisalreadyclosed.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnnewTimestamp(DateTime.addDateTimeOffset(time));","staticTimegetTime(longtime){","returnnewTime(DateTime.addDateTimeOffset(time));","staticDategetDate(longtime){","returnnewDate(DateTime.addDateTimeOffset(time));","publicObjectgetImmutableObject(){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","importjava.io.PrintWriter;","importjava.sql.*;","classLogger{","booleanisLogging(){","returnDriverManager.getLogWriter()!=null;"]": ["|project://smallsql/src/smallsql/database/Logger.java|"],
"["if(range){//%wildcardisactive","for(;sIdx\<value.length();sIdx++){","if(Character.toUpperCase(value.charAt(sIdx))==m)break;//Countermustn\'tincrementbeforebreak","if(sIdx\>=value.length())returnfalse;","intlastmIdx=mIdx-1;","sIdx++;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["accumulateRow();","if(getRowCount()==0&&groupBy==null){","addGroupRow();","beforeFirst();","finalprivatevoidaddGroupRow(){","ExpressionValue[]newRow=currentRow=newExpressionValue[expressions.size()];"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["publicStringtoString(){","StringBufferbuf=newStringBuffer();","if(value.length==0||signum==0){","buf.append(\'0\');","}else{","if(value.length==1&&(value[0]\>0)){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalbooleanrightIsNull=right.isNull();","if(operation==EQUALS_NULL&&leftIsNull&&rightIsNull)returntrue;","if(leftIsNull||rightIsNull)returnfalse;","dataType=getDataType(left,right);","switch(dataType){","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(frominstanceofWhere){","from=((Where)from).getFrom();","if(frominstanceofTableViewResult){","return(TableViewResult)from;","throwSmallSQLException.create(Language.ROWSOURCE_READONLY);","voidsetAlias(Stringalias){"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["BufferedReaderinput=newBufferedReader(newInputStreamReader(System.in));","while(true){","try{","Stringline;","try{","line=input.readLine();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["return(int)readDouble();","caseSQLTokenizer.MONEY:","longlongValue=readLong()/10000;","returnUtils.money2int(longValue);","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{MILLIS_TOOLARGE,\"DieMillisekundensindzugroÃŸimTIMESTAMPWert\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isteinungÃ¼ltigesDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'vonDatentyp\'\'{1}\'\'fÃ¼rdieOperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rOperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","CommandTablecmd=newCommandTable(con.log,catalog,tableName,SQLTokenizer.INDEX);","Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();","expressionDefList(cmd,expressions,columns);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<columnExpressions.size();i++){","ExpressionNameexpr=(ExpressionName)columnExpressions.get(i);","DataSourceds=expr.getDataSource();","TableResulttableResult=(TableResult)ds;","tableResult.lock=SQLTokenizer.UPDATE;","while(true){"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["caseNEGATIVE:return-left.getLong();","caseMOD:returnleft.getLong()%right.getLong();","caseBIT_NOT:return~right.getInt();","throwcreateUnspportedConversion(SQLTokenizer.LONG);","doublegetDouble()throwsjava.lang.Exception{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicclassSSDriverimplementsDriver{","staticfinalStringURL_PREFIX=\"jdbc:smallsql\";","staticSSDriverdrv;","static{","try{","drv=newSSDriver();"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["intversion=buffer.getInt();","if(magic!=MAGIC_INDEX){","throwSmallSQLException.create(Language.INDEX_FILE_INVALID,file.getName());","if(version\>INDEX_VERSION){","Object[]params={newInteger(version),file.getName()};","throwSmallSQLException.create(Language.FILE_TOONEW,params);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returngetBoolean(getObject(),dataType);","staticbooleangetBoolean(Objectobj,intdataType)throwsException{","if(obj==null)returnfalse;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getLong()==right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandCreateDatabasecreateProcedure()throwsSQLException{","Object[]param={\"CreateProcedure\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommanddrop()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_DROP);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidmod(MutableNumericnum){","num=newMutableNumeric(doubleValue()%num.doubleValue());","value=num.value;","scale=num.scale;","signum=num.signum;","intgetScale(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intpos=findNodePos(digit);","if(pos==-1){","IndexNodenode=createIndexNode(unique,digit);","saveNode(node);","returnnode;","}else{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["if(n)returntrue;","row=0;","returnfalse;","finalvoidafterLast()throwsException{","dataSourceIdx=dataSources.size()-1;","currentDS=dataSources.get(dataSourceIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["publicclassExpressionFunctionLeftextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.LEFT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["offset=nextOffset2;","finalprivateintinsertNode(intoctet)throwsSQLException{","intoldOffset=offset;","if(data.length\<size+4+pointerSize)resize();","System.arraycopy(data,oldOffset,data,oldOffset+2+pointerSize,size-oldOffset);","size+=2+pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnnull;","if(e.key==key)","returne.value;","e=e.next;","finalbooleancontainsKey(longkey){","return(get(key)!=null);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returnreadString();","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnreadLongString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{JOIN_INSERT,\"01000\"},","{DELETE_WO_FROM,\"01000\"},","{INSERT_WO_FROM,\"01000\"},","{TABLE_CANT_RENAME,\"01000\"},","{TABLE_CANT_DROP,\"01000\"},","{TABLE_CANT_DROP_LOCKED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["}else{","value=newint[1];","if(complement\<0){","value[0]=-complement;","signum=-1;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["break;","caseSQLTokenizer.FIRST:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.FIRST);","break;","caseSQLTokenizer.LAST:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(date==null)returnnull;","inttype;","if(dateinstanceofjava.sql.Date)","type=SQLTokenizer.DATE;","else","if(dateinstanceofjava.sql.Time)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.REAL:","return(long)readFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(long)readDouble();","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["super.execute();","from.execute();","NextRow:","while(from.next()){","beforeFirst();","while(next()){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["Stringtable=tables.get(i);","Object[]row=newObject[10];","row[0]=catalog;","row[2]=table;","try{","if(database.getTableView(con,table)instanceofView){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticStringcreateIdxFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+IDX_EXTENTION;","staticbooleanlike(Stringvalue,Stringpattern){","if(value==null||pattern==null)returnfalse;","if(pattern.length()==0)returntrue;","intmIdx=0;//indexinmaskArray"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["}else{","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con==con)","inserts.add(lock.getLink());","returninserts;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(isEscape){","token=nextToken(MISSING_SQL_DATATYPE);","switch(token.value){","caseSQLTokenizer.SQL_BIGINT:dataType=SQLTokenizer.BIGINT;break;","caseSQLTokenizer.SQL_BINARY:dataType=SQLTokenizer.BINARY;break;","caseSQLTokenizer.SQL_BIT:dataType=SQLTokenizer.BIT;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["thrownewError();","voidload(StoreImplinput)throwsSQLException{","intlength=input.readInt();","remainderKey=(length\>0)?input.readChars(length):null;","intvalueType=input.readByte();","switch(valueType){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["return1;","return0;","caseSQLTokenizer.DECIMAL:","returnparam1.getNumeric().getSignum();","caseSQLTokenizer.DOUBLE:","doubledoubleValue=param1.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.RIGHT_JOIN);","break;","caseSQLTokenizer.FULL:","token=nextToken(MISSING_OUTER_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.UPDATE:","if(status!=UPDATE_POINTER){","sizeUsed=offset;","break;","caseSQLTokenizer.DELETE:","sizeUsed=PAGE_CONTROL_SIZE;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteChars(char[]value){","verifyFreePufferSize(2*value.length);","for(inti=0;i\<value.length;i++){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["dataType=token.value;","Columncol=newColumn();","if(dataType==SQLTokenizer.LONG){","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.RAW){","dataType=SQLTokenizer.LONGVARBINARY;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnInteger.parseInt(getString().trim());","finallonggetLong()throwsException{","if(isNull())return0;","returnLong.parseLong(getString().trim());","finalfloatgetFloat()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["voidverifyParams()throwsSQLException{","for(intp=0;p\<params.size();p++){","if(((ExpressionValue)params.get(p)).isEmpty())","throwSmallSQLException.create(Language.PARAM_EMPTY,newInteger(p+1));","voidclearParams(){","for(intp=0;p\<params.size();p++){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["throwsSQLException{","Propertiesprops=parse(url,info);","DriverPropertyInfo[]driverInfos=newDriverPropertyInfo[1];","driverInfos[0]=newDriverPropertyInfo(\"dbpath\",props.getProperty(\"dbpath\"));","returndriverInfos;","publicintgetMajorVersion(){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["resizeValue((int)carryover);","voiddiv(MutableNumericnum){","intnewScale=Math.max(scale+5,num.scale+4);","BigDecimalbig=toBigDecimal().divide(num.toBigDecimal(),newScale,BigDecimal.ROUND_HALF_EVEN);","setValue(big.unscaledValue().toByteArray());","scale=big.scale();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(lobs!=null){","lobs.close();","lobs=null;","privatevoidwrite(SSConnectioncon)throwsException{","raFile=createFile(con,database);","firstPage=8;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidinsertRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","privateExpressionget(intcolIdx)throwsException{","if(currentRow==null)throwSmallSQLException.create(Language.ROW_NOCURRENT);","returncurrentRow[colIdx];"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["intgetInt()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicstaticfinalStringBYTEARR_INVALID_SIZE=\"SS-0340\";","publicstaticfinalStringLOB_DELETED=\"SS-0341\";","publicstaticfinalStringPARAM_CLASS_UNKNOWN=\"SS-0370\";","publicstaticfinalStringPARAM_EMPTY=\"SS-0371\";","publicstaticfinalStringPARAM_IDX_OUT_RANGE=\"SS-0372\";","publicstaticfinalStringCOL_DUPLICATE=\"SS-0400\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","internalExpressions.add(expr);","returninternalExpressions.size()-1;","}else{","intidx=internalExpressions.indexOf(expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["caseDIV:returnleft.getFloat()/right.getFloat();","caseNEGATIVE:return-left.getFloat();","caseMOD:returnleft.getFloat()%right.getFloat();","throwcreateUnspportedConversion(SQLTokenizer.REAL);","longgetMoney()throwsjava.lang.Exception{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{INSERT_WO_FROM,\"01000\"},","{TABLE_CANT_RENAME,\"01000\"},","{TABLE_CANT_DROP,\"01000\"},","{TABLE_CANT_DROP_LOCKED,\"01000\"},","{TABLE_CORRUPT_PAGE,\"01000\"},","{TABLE_MODIFIED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(newValueinstanceofMoney)","this.dataType=SQLTokenizer.MONEY;","else","throwSmallSQLException.create(Language.PARAM_CLASS_UNKNOWN,newValue.getClass().getName());","finalvoidset(ExpressionValueval){","this.value=val.value;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(filePos\<0)return;//endofrows","if(store==Store.NOROW)","filePos=table.getFirstPage();//canpointattheendoffile","else","if(filePos\>=0x4000000000000000L){","filePos++;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["intop=cond.getOperation();","if(op==ExpressionArithmetic.AND){","Expressionparam0=params[0];","Expressionparam1=params[1];","if(param0instanceofExpressionArithmetic&&param1instanceofExpressionArithmetic){","op=createJoinScrollIndex((ExpressionArithmetic)param0,leftEx,rightEx,operation);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnnewMutableNumeric(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnnewMutableNumeric(ois.readObject().toString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnSQLTokenizer.LEFT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["row[9]=Utils.getInteger(10);//NUM_PREC_RADIX","row[10]=Utils.getInteger(col.isNullable()?DatabaseMetaData.columnNullable:DatabaseMetaData.columnNoNulls);//NULLABLE","row[12]=col.getDefaultDefinition();//COLUMN_DEF","row[15]=row[6];//CHAR_OCTET_LENGTH","row[16]=Utils.getInteger(i);//ORDINAL_POSITION","row[17]=col.isNullable()?\"YES\":\"NO\";//IS_NULLABLE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicclassCommandSetextendsCommand{","intisolationLevel;","CommandSet(Loggerlog,inttype){","super(log);","this.type=type;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsjava.sql.SQLException{"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["finalintfindColumnIdx(StringcolumnName){","for(inti=0;i\<columns.size();i++){","if(columns.get(i).getName().equalsIgnoreCase(columnName))returni;","return-1;","finalColumnfindColumn(StringcolumnName){","for(inti=0;i\<columns.size();i++){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["{UNION_DIFFERENT_COLS,\"SELECTappartenentiadunaUNIONconnumerodicolonnedifferenti:{0}e{1}.\"},","{INDEX_EXISTS,\"L\'\'indice\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{INDEX_MISSING,\"L\'\'indice\'\'{0}\'\'nonesiste.\"},","{INDEX_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoperunindice.\"},","{INDEX_CORRUPT,\"Erroreduranteilcaricamentodell\'\'indice.Filedell\'\'indicecorrotto:\'\'{0}\'\'.\"},","{INDEX_TOOMANY_EQUALS,\"Troppevociugualinell\'\'indice.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["publicInputStreamgetBinaryStream(StringcolumnName)throwsSQLException{","returngetBinaryStream(findColumn(columnName));","publicSQLWarninggetWarnings(){","returnnull;","publicvoidclearWarnings(){","publicStringgetCursorName(){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(size==0)return;","intoffset1=0;","intoffset2=0;","intoffset3=0;","offset=0;","intshift=48;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicclassSSResultSetMetaDataimplementsResultSetMetaData{","Expressionscolumns;","publicintgetColumnCount()throwsSQLException{","returncolumns.size();","publicbooleanisAutoIncrement(intcolumn)throwsSQLException{","returngetColumnExpression(column).isAutoIncrement();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["switch(dataType){","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intk=tokenStart;","if(k==i){//pointisfirstcharacter","if(sql.length\>k+1){","charcc=sql[k+1];","if((cc\>=\'0\')&&cc\<=\'9\')break;//isanumber--\>break","}else{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalpublicintgetMaxRows(){","returnmaxRows;","finalpublicvoidsetMaxRows(intmax)throwsSQLException{","if(max\<0)","throwSmallSQLException.create(Language.ROWS_WRONG_MAX,String.valueOf(max));","maxRows=max;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseBETWEEN:","caseOR:","caseAND:","caseNOT:","caseLIKE:","caseISNULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnewMutableNumeric(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnnewMutableNumeric(readLongString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row=0;","store=Store.NULL;","@Override","finalvoidnoRow(){","row=0;","store=Store.NOROW;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["throwSmallSQLException.create(Language.SAVEPT_INVALID_TRANS);","rollback(savepoint.getSavepointId());","return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,savepoint);","publicvoidreleaseSavepoint(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnnewMutableNumeric(Utils.bytes2double(readBinary()));","caseSQLTokenizer.TINYINT:","returnnewMutableNumeric(readUnsignedByte());","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["longgetMoney()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatestaticfinalObjectEMPTY=newObject();","finalbooleanisEmpty(){","returnvalue==EMPTY;","finalvoidclear(){","value=EMPTY;","finalvoidset(Objectvalue,int_dataType,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["for(inti=0;i\<offsets.length;i++){","offsets[i]=offset;","booleanisNull=readBoolean();//forisNull","switch(dataTypes[i]){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnnewMutableNumeric(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importsmallsql.database.language.Language;","publicclassExpressionFunctionInsertextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.INSERT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull()||param4.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["staticSQLExceptioncreate(StringmessageCode,Object[]params){","Stringmessage=translateMsg(messageCode,params);","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreateFromException(Throwablee){","if(einstanceofSQLException){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["Columncolumn=((ExpressionName)expr).getColumn().copy();","column.setName(expr.getAlias());","columns.add(column);","}else{","columns.add(newColumnExpression(expr));","staticvoiddrop(Databasedatabase,Stringname)throwsException{"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["booleanisNull(intvalueOffset){","returnpage[valueOffset]!=0;","@Override","booleangetBoolean(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnfalse;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["thrownoCurrentRow();","longgetLong(intoffset,intdataType)throwsException{","thrownoCurrentRow();","longgetMoney(intoffset,intdataType)throwsException{","thrownoCurrentRow();","MutableNumericgetNumeric(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["returntrue;","publicbooleansupportsMinimumSQLGrammar(){","returntrue;","publicbooleansupportsCoreSQLGrammar(){","returntrue;","publicbooleansupportsExtendedSQLGrammar(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Objectobj=getObject(columnIndex);","if(objinstanceofString||obj==null){","return(String)obj;","if(objinstanceofbyte[]){","return\"0x\"+Utils.bytes2hex((byte[])obj);","returngetValue(columnIndex).getString();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returntrue;","setNextFilePos();","row=0;","returnfalse;","@Override","finalvoidbeforeFirst(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["pr.setNeedGeneratedKeys(columnIndexes);","returnpr;","publicPreparedStatementprepareStatement(Stringsql,String[]columnNames)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(columnNames);","returnpr;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["if(pointer\<=previousOffset){","offset=previousOffset;","return;","offset=-1;","finalprivatevoidloopToEndOfNode(LongTreeListEnumlistEnum){","intnextEntry;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:{","finalStringleftStr=left.getString();","finalStringrightStr=right.getString();","intcomp=String.CASE_INSENSITIVE_ORDER.compare(leftStr,rightStr);","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.sql.SQLException;","abstractclassTransactionStep{","FileChannelraFile;","TransactionStep(FileChannelraFile){","this.raFile=raFile;","abstractlongcommit()throwsSQLException;"]": ["|project://smallsql/src/smallsql/database/TransactionStep.java|"],
"["metaData.columns=cmd.columnExpressions;","this.cmd=cmd;","isUpdatable=st!=null&&st.rsConcurrency==CONCUR_UPDATABLE&&!cmd.isGroupResult();","publicvoidclose(){","st.con.log.println(\"ResultSet.close\");","cmd=null;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(newValueinstanceofBoolean)","this.dataType=SQLTokenizer.BOOLEAN;","else","if(newValueinstanceofMoney)","this.dataType=SQLTokenizer.MONEY;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseConnection.TRANSACTION_SERIALIZABLE:","serializeConnections.put(con,con);","break;","switch(pageOperation){","caseSQLTokenizer.CREATE:{","if(locks.size()\>0){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.DATE);","publicvoidsetTime(intparameterIndex,Timex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIME);","publicvoidsetTimestamp(intparameterIndex,Timestampx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.HOUR;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());","returndetails.hour;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionHour.java|"],
"["publicintgetMaxStatementLength(){","return0;","publicintgetMaxStatements(){","return0;","publicintgetMaxTableNameLength(){","return255;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintSUM=13;","staticfinalintFIRST=14;","staticfinalintLAST=15;","staticfinalintMIN=16;","staticfinalintMAX=17;","staticfinalintGROUP_BEGIN=GROUP_BY;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\',\');","buf.append(\'\');","formatNumber(details.year,4,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.TINYINT:","returnUtils.getInteger(param1.getInt()&0xFF);","caseSQLTokenizer.SMALLINT:","returnUtils.getInteger((short)param1.getInt());","caseSQLTokenizer.INT:","returnUtils.getInteger(param1.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["staticfinalintUSER=1302;","staticfinalintCONVERT=1303;","staticfinalintCAST=1304;","staticfinalintIIF=1305;//lastsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","static{","addKeyWord(\"ISNULL\",IFNULL);//aliasforIFNULL,usedfromMSSQLServerwith2parameter,fromMSAccesswith1parameter"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(p\>=cases.size()){","elseResult=param;","return;","if(idx%2\>0){","results.set(p,param);","}else{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["publicbooleansupportsGroupByBeyondSelect(){","returntrue;","publicbooleansupportsLikeEscapeClause(){","returntrue;","publicbooleansupportsMultipleResultSets(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(node!=null){","value=node.value;","node=node.nextLetter;","}else{","value=0;","node=null;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.createFromException(e);","returnnull;","publicvoidsetDate(intparameterIndex,Datex,Calendarcal)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetTime()notyetimplemented.\");","publicvoidsetTimestamp(intparameterIndex,Timestampx,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["staticfinalintDIFFERENCE=1106;","staticfinalintINSERT=1107;","staticfinalintLCASE=1108;","staticfinalintLEFT=1109;","staticfinalintLENGTH=1110;","staticfinalintLOCATE=1111;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(newValueinstanceofByte)","this.dataType=SQLTokenizer.TINYINT;","else","if(newValueinstanceofShort)","this.dataType=SQLTokenizer.SMALLINT;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnUtils.unique2bytes((String)obj);","caseSQLTokenizer.INT:","returnUtils.int2bytes(((Number)obj).intValue());","caseSQLTokenizer.DOUBLE:","returnUtils.double2bytes(((Number)obj).doubleValue());","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.CHARLEN;","booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCharLen.java|"],
"["endTime=System.currentTimeMillis()+5000;","longwaitTime=endTime-System.currentTimeMillis();","if(waitTime\<=0)","throwSmallSQLException.create(Language.TABLE_DEADLOCK,name);","locks.wait(waitTime);","finalprivateTableStorePagerequestLockImpl(SSConnectioncon,intpageOperation,longpage)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnUtils.string2boolean(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnUtils.string2boolean(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalclassExpressionFunctionPowerextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.POWER;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionPower.java|"],
"["intupdateCount=-1;","Expressionsparams=newExpressions();","finalLoggerlog;","Command(Loggerlog){","this.log=log;","this.columnExpressions=newExpressions();"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["privateintprecision;","privateintdataType;","privateIdentitycounter;//counterforidentityvalues","voidsetName(Stringname){","this.name=name;","voidsetDefaultValue(ExpressiondefaultValue,StringdefaultDefinition){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["privateintmaxFieldSize;","privateArrayListbatches;","privatebooleanneedGeneratedKeys;","privateResultSetgeneratedKeys;","privateint[]generatedKeyIndexes;","privateString[]generatedKeyNames;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["DataSourceds=dataSources.get(i);","result|=ds.init(con);","intnextColCount=ds.getTableView().columns.size();","if(colCount==-1)","colCount=nextColCount;","else"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["booleanisSetFrom=false;","for(intt=0;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);","TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:","page=find(page,bytesToBinarySortOrder(expr.getBytes()),nodeList);","break;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnLong.parseLong(getString().trim());","finalfloatgetFloat()throwsException{","if(isNull())return0;","returnFloat.parseFloat(getString().trim());","finaldoublegetDouble()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["if(rootPage.getUnique()){","return((Long)value).longValue();","}else{","longList=(LongTreeList)value;","longListEnum.reset();","returnlongList.getNext(longListEnum);//therebeshouldonevalueasminimum"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["value=newint[2];","if(complement\<0){","value[0]=(int)(~(complement\>\>32));","value[1]=(int)(-complement);","signum=-1;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["nextToken(MISSING_JOIN);","caseSQLTokenizer.JOIN:","fromSource=join(cmd,tables,fromSource,Join.INNER_JOIN);","break;","caseSQLTokenizer.LEFT:","token=nextToken(MISSING_OUTER_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!returnNull&&database==null)throwSmallSQLException.create(Language.DB_NOTCONNECTED);","returndatabase;","ObjectgetMonitor(){","returnthis;","publicStatementcreateStatement()throwsSQLException{","returnnewSSStatement(this);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["matrix[i]=i;","if(count!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","}else{","for(inti=0;i\<count;i++)matrix[i]=-1;","for(intc=0;c\<columnExpressions.size();c++){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returngetInt(findColumn(columnName));","publiclonggetLong(StringcolumnName)throwsSQLException{","returngetLong(findColumn(columnName));","publicfloatgetFloat(StringcolumnName)throwsSQLException{","returngetFloat(findColumn(columnName));","publicdoublegetDouble(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["expressionDefList(cmdCreate,expressions,columns);","IndexDescriptionpkIndex=newIndexDescription(null,pk,SQLTokenizer.UNIQUE,expressions,columns);","ForeignKeyforeignKey=newForeignKey(pk,pkIndex,tableName,index);","cmdCreate.addForeingnKey(foreignKey);","}else{","cmdCreate.addIndex(index);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return;","value=newint[(length+3)/4];","if(complement[0]\<0){","negate(complement);","signum=-1;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(tableName==catalog)catalog=null;","CommandTablecmdCreate=newCommandTable(con.log,catalog,tableName,SQLTokenizer.CREATE);","SQLTokentoken=nextToken(MISSING_PARENTHESIS_L);","nextCol:","while(true){","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(filePos\>=raFile.size()-PAGE_CONTROL_SIZE){","returnnull;","raFile.position(filePos);","synchronized(page_control){","pageControlBuffer.position(0);","raFile.read(pageControlBuffer);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwcreateSyntaxError(token,Language.STXADD_OPER_MINUS);","returnnewExpressionValue(Utils.hex2bytes(sql,token.offset+2,token.length-2),SQLTokenizer.VARBINARY);","if(isMinus)tok=\"-\"+tok;","if(Utils.indexOf(\'.\',sql,token.offset,token.length)\>=0||","Utils.indexOf(\'e\',sql,token.offset,token.length)\>=0){","returnnewExpressionValue(newDouble(tok),SQLTokenizer.DOUBLE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(getBoolean())returntrue;","}finally{","right=null;","returnfalse;","SQLExceptioncreateUnspportedDataType(){","Object[]params={"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.where=where;","finalvoidsetGroup(Expressionsgroup){","this.groupBy=group;","finalvoidsetHaving(Expressionhaving){","this.having=having;","finalvoidsetOrder(Expressionsorder){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["token=nextToken();","if(token!=null)offset=token.offset;","previousToken();","expressions.add(expression(cmd,0));","SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","returnTypes.DECIMAL;","caseSQLTokenizer.NUMERIC:","returnTypes.NUMERIC;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["signum=1;","MutableNumeric(intcomplement,intscale){","this(complement);","this.scale=scale;","MutableNumeric(longcomplement){","if(complement==0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalbooleanisGroupResult(){","returngroupBy!=null||having!=null||isAggregateFunction;","privatevoidcompileJoin(JoinsingleJoin)throwsException{","if(singleJoin.condition!=null)compileLinkExpressionParams(singleJoin.condition);","if(singleJoin.leftinstanceofJoin){","compileJoin((Join)singleJoin.left);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["{SUBQUERY_COL_COUNT,\"Countofcolumnsinsubquerymustbe1andnot{0}.\"},","{JOIN_DELETE,\"ThemethoddeleteRownotsupportedonjoins.\"},","{JOIN_INSERT,\"ThemethodinsertRownotsupportedonjoins.\"},","{DELETE_WO_FROM,\"ThemethoddeleteRowneedaFROMexpression.\"},","{INSERT_WO_FROM,\"ThemethodinsertRowneedaFROMexpression.\"},","{TABLE_CANT_RENAME,\"Table\'\'{0}\'\'can\'\'tberenamed.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnnewString(chars);","staticbooleanstring2boolean(Stringval){","try{","returnDouble.parseDouble(val)!=0;","}catch(NumberFormatExceptione){/*ignoreitifitnotanumber*/}","return\"true\".equalsIgnoreCase(val)||\"yes\".equalsIgnoreCase(val)||\"t\".equalsIgnoreCase(val);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["nextToken(MISSING_AS);","SQLTokentoken=nextToken(MISSING_SELECT);","CommandCreateViewcmd=newCommandCreateView(con.log,viewName);","cmd.sql=newString(sql,token.offset,sql.length-token.offset);","select();//Parsetocheckforvalid","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["static{","try{","drv=newSSDriver();","java.sql.DriverManager.registerDriver(drv);","}catch(Throwablee){","e.printStackTrace();"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["returntrue;","}else{","filePos=-1;","noRow();","returnfalse;","finalprivatebooleanmoveToValidRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnSQLTokenizer.SUBSTRING;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["ExpressionvalueExpress;","if(idx\>=0){","valueExpress=cmdSel.columnExpressions.get(idx);","}else{","valueExpress=column.getDefaultValue(con);","if(needGeneratedKeys&&generatedKeysType==0&&valueExpress!=Expression.NULL){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value+=expr.getDouble();","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalintASIN=1002;","staticfinalintATAN=1003;","staticfinalintATAN2=1004;","staticfinalintCEILING=1005;","staticfinalintCOS=1006;","staticfinalintCOT=1007;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["GroupResult(CommandSelectcmd,RowSourcefrom,ExpressionsgroupBy,Expressionhaving,ExpressionsorderBy)throwsSQLException{","this.from=from;","this.groupBy=groupBy;","if(groupBy!=null){","for(inti=0;i\<groupBy.size();i++){","Expressionleft=groupBy.get(i);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["floatgetFloat()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["updateObject(findColumn(columnName),x,scale);","publicvoidupdateObject(StringcolumnName,Objectx)throwsSQLException{","updateObject(findColumn(columnName),x);","publicvoidinsertRow()throwsSQLException{","st.con.log.println(\"insertRow()\");","if(!isInsertRow){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return;","writeBoolean(false);//false-isnotnull","column.setNewAutoIncrementValue(expr);","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(operation){","caseOR:","caseAND:","caseNOT:","caseLIKE:","caseISNULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["con.add(lock);","returnlock;","caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:{","LongpageKey=newLong(page);//TODOperformance","TableStorePageprevLock=null;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["importjava.sql.SQLException;","classStorePageextendsTransactionStep{","byte[]page;//dataofonepage","intpageSize;","longfileOffset;//positioninfile","StorePage(byte[]page,intpageSize,FileChannelraFile,longfileOffset){"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["expr.setFrom(fromEntry,k,table);","columnExpressions.add(position++,expr);","returnposition;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);","if((st.rsType==ResultSet.TYPE_SCROLL_INSENSITIVE||st.rsType==ResultSet.TYPE_SCROLL_SENSITIVE)&&"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["privatestaticfinalintUPDATED_PAGE=3;","finalprivateTabletable;","privatebooleansharedPageData;","privateStorePagestorePage;","privatelongfilePos;//Positioninthefile","privateintsizeUsed;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.BIT_OR:","caseSQLTokenizer.BIT_XOR:","rightExpr=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,operation);","break;","caseSQLTokenizer.BETWEEN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncommandSelect.isBeforeFirst();","booleanisFirst()throwsSQLException{","returncommandSelect.isFirst();","booleanfirst()throwsException{","returncommandSelect.first();","booleanprevious()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisAfterLast()throwsSQLException,Exception{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractvoidafterLast()throwsException;","booleanabsolute(introw)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["useSetRowPosition=false;","if(sortedRowCount\>0){","scrollStatus.afterLast();","scrollStatus.getRowOffset(false);//previousposition","}else{","rowSource.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.CONVERT:{","Columncol;","Expressionstyle=null;","if(isEscape){","expr=expression(cmd,0);","nextToken(MISSING_COMMA);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{VIEW_INSERT,\"INSERTwirdnichtunterstÃ¼tztfÃ¼reineView.\"},","{VIEWDROP_NOT_VIEW,\"DROPVIEWkannnichtmit\'\'{0}\'\'verwendetwerden,weileskeineViewist.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{RSET_NOT_PRODUCED,\"EswurdekeinResultSeterzeugt.\"},","{RSET_READONLY,\"DasResultSetistschreibgeschÃ¼tzt.\"},","{RSET_FWDONLY,\"DasResultSetistforwardonly.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["if(getDataType(left.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=right.getNumeric();","num.mul(left.getInt());","returnnum;","}else{","MutableNumericnum=left.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["StringindexName=nextIdentifier();","nextToken(MISSING_ON);","Stringcatalog;","StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintLESSER=\'\<\';//60","staticfinalintEQUALS=\'=\';//61","staticfinalintGREATER=\'\>\';//62","staticfinalintQUESTION=\'?\';//63","staticfinalintBIT_XOR=\'^\';//94","staticfinalintESCAPE_L=\'{\';//123"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(intcolumnIndex,intscale)throwsSQLException{","try{","MutableNumericobj=getValue(columnIndex).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["{STXADD_PARAM_INVALID_COUNT,\"UngÃ¼ltigeParamterAnzahl.\"},","{STXADD_JOIN_INVALID,\"UngÃ¼ltigeJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnerwartetschlieÃŸendeKlammerinFROMKlausel.\"},","{STXADD_KEYS_REQUIRED,\"BenÃ¶tigeSchlÃ¼sselwÃ¶rtersind:\"},","{STXADD_NOT_NUMBER,\"EineZahlisterforderlich:\'\'{0}\'\'.\"},","{STXADD_COMMENT_OPEN,\"FehlendesKommentarende\'\'*/\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importjava.util.ArrayList;","finalclassSSDatabaseMetaDataimplementsDatabaseMetaData{","finalprivateSSConnectioncon;","finalprivateSSStatementst;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnUtils.doubleToMoney(((Number)obj).doubleValue());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","return((Money)obj).value;","default:returnMoney.parseMoney(obj.toString());","MutableNumericgetNumeric(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalintDELETE=201;","staticfinalintINTO=203;","staticfinalintUPDATE=204;","staticfinalintCREATE=205;","staticfinalintDROP=206;","staticfinalintALTER=207;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(msg==null||msg.length()\<30){","Stringmsg2=throwable.getClass().getName();","msg2=msg2.substring(msg2.lastIndexOf(\'.\')+1);","if(msg!=null)","msg2=msg2+\':\'+msg;","returnmsg2;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["returngetLong();","longgetMoney()throwsException{","returngetLong()*10000;","MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["staticfinalintBOOLEAN=301;","staticfinalintBINARY=310;","staticfinalintVARBINARY=311;","staticfinalintRAW=312;","staticfinalintLONGVARBINARY=313;","staticfinalintBLOB=316;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseExpression.MAX:","caseExpression.MIN:","caseExpression.FIRST:","caseExpression.LAST:","caseExpression.SUM:","ExpressionbaseExpression=exprName.getParams()[0];"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.FLOAT)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.REAL)),Utils.getInteger(7),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DOUBLE)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NVARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BOOLEAN)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseJoin.FULL_JOIN:","isOuterValid=false;","isBeforeFirst=false;","right.nullRow();","returntrue;","}elsefullRightRowCounter++;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["master.close();","staticTableViewgetTableView(SSConnectioncon,Stringcatalog,StringtableName)throwsSQLException{","returngetDatabase(con,catalog).getTableView(con,tableName);","TableViewgetTableView(SSConnectioncon,StringtableName)throwsSQLException{","synchronized(tableViews){","TableViewtableView=tableViews.get(tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["SQLTokentokenType=nextToken(COMMANDS_DROP);","Stringcatalog;","Stringname=catalog=nextIdentifier();","name=nextIdentiferPart(name);","if(name==catalog)catalog=null;","switch(tokenType.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MONEY:","MoneymValue=(Money)para1;","if(mValue.value\<0)mValue.value=-mValue.value;","returnmValue;","default:throwcreateUnspportedDataType(param1.getDataType());","StringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["returnfalse;","Expressionssingle=newExpressions();","for(inti=0;i\<columns.size();i++){","single.clear();","single.add(columns.get(i));","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["privatevoidcheckForeignKeys(SSConnectioncon,ForeignKeysforeignKeys)throwsSQLException{","for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);","TableViewpkTable=getTableView(con,foreignKey.pkTable);","if(!(pkTableinstanceofTable)){","throwSmallSQLException.create(Language.FK_NOT_TABLE,foreignKey.pkTable);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:{","finalStringleftStr=left.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(dataType,precision,scale);","voidsetScale(intscale){","this.scale=scale;","intgetScale(){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["finalbooleanfirst()throwsException{","filePos=table.getFirstPage();","row=1;","returnmoveToValidRow();","finalprivatevoidsetNextFilePos(){","if(filePos\<0)return;//endofrows"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(input!=null){","condition=newExpressionArithmetic(input,condition,ExpressionArithmetic.EQUALS);","nextToken(MISSING_THEN);","Expressionresult=expression(cmd,0);","expr.addCase(condition,result);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["con.add(lock);","returnlock;","caseSQLTokenizer.ALTER:{","if(locks.size()\>0||locksInsert.size()\>0){","returnnull;","if(serializeConnections.size()\>0){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["testNotInsertRow();","relative(0);","publicvoidcancelRowUpdates()throwsSQLException{","testNotInsertRow();","clearRowBuffer();","privatevoidclearRowBuffer(){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintDAYOFYEAR=1206;","staticfinalintDAY=1207;","staticfinalintHOUR=1208;","staticfinalintMILLISECOND=1209;","staticfinalintMINUTE=1210;","staticfinalintMONTH=1211;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.max(((MutableInteger)value).value,expr.getInt());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finallonggetLong()throwsException{","returnUtils.double2long(getDouble());","finalfloatgetFloat()throwsException{","return(float)getDouble();","MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["IndexNodenewNode=addNode(puffer[0]);","if(puffer.length==1){","newNode.value=rowOffset;","}else{","newNode.moveRemainderValueSub(rowOffset,puffer);","privatefinalvoidmoveRemainderValueSub(ObjectrowOffset,char[]remainderValue){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Expressionslist=newExpressions();","while(true){","Expressionexpr=expression(cmd,0);","list.add(expr);","SQLTokentoken=nextToken();","if(listType==SQLTokenizer.ORDER&&token!=null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.io.File;","classLobsextendsTable{","Lobs(Tabletable)throwsException{","super(table.database,table.name);","raFile=Utils.openRaFile(getFile(database),database.isReadOnly());","@Override"]": ["|project://smallsql/src/smallsql/database/Lobs.java|"],
"["for(inti=0;i\<count;i++){","Expressionsrc=updateValues[i];","if(src!=null){","newStore.writeExpression(src,tableColumns.get(i));","}else{","copyValueInto(i,newStore);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["updateBinaryStream(findColumn(columnName),x,length);","publicvoidupdateCharacterStream(StringcolumnName,Readerx,intlength)throwsSQLException{","updateCharacterStream(findColumn(columnName),x,length);","publicvoidupdateObject(StringcolumnName,Objectx,intscale)throwsSQLException{","updateObject(findColumn(columnName),x,scale);","publicvoidupdateObject(StringcolumnName,Objectx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(idx%2\>0){","results.set(p,param);","}else{","cases.set(p,param);","finalintgetFunction(){","returnSQLTokenizer.CASE;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.DECIMAL:","MutableNumericnValue=(MutableNumeric)para1;","if(nValue.getSignum()\<0)nValue.setSignum(1);","returnnValue;","caseSQLTokenizer.MONEY:","MoneymValue=(Money)para1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["classLogger{","booleanisLogging(){","returnDriverManager.getLogWriter()!=null;","voidprintln(Stringmsg){","PrintWriterlog=DriverManager.getLogWriter();","if(log!=null){"]": ["|project://smallsql/src/smallsql/database/Logger.java|"],
"["finalbooleanfirst()throwsException{","beforeFirst();","returnnext();","finalbooleannext()throwsException{","while(true){","booleanisNext=rowSource.next();"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["addKeyWord(\"BINARY\",BINARY);","addKeyWord(\"VARBINARY\",VARBINARY);","addKeyWord(\"RAW\",RAW);//aliasforOracleRAWandLONGRAW","addKeyWord(\"IMAGE\",LONGVARBINARY);//aliasforMSSQLServerdatatypeIMAGE","addKeyWord(\"LONGVARBINARY\",LONGVARBINARY);","addKeyWord(\"BLOB\",BLOB);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalintsize(){","returnsize;","finallongget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["publicStringgetStringFunctions(){","returngetFunctions(SQLTokenizer.ASCII,SQLTokenizer.UCASE);","publicStringgetSystemFunctions(){","returngetFunctions(SQLTokenizer.IFNULL,SQLTokenizer.IIF);","publicStringgetTimeDateFunctions(){","returngetFunctions(SQLTokenizer.CURDATE,SQLTokenizer.YEAR);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnreadString();","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnullable;","voidsetDataType(intdataType){","this.dataType=dataType;","intgetDataType(){","returndataType;","intgetDisplaySize(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["resize(2*table.length);","returnnull;","finalprivatevoidresize(intnewCapacity){","Entry[]newTable=newEntry[newCapacity];","transfer(newTable);","table=newTable;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["props.put(key,value);","}else{","throwSmallSQLException.create(Language.CUSTOM_MESSAGE,\"Missingequalinproperty:\"+keyValue);","returnprops;","publicbooleanacceptsURL(Stringurl){","returnurl.startsWith(URL_PREFIX);"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["if(!p2[i].equals(p1[i]))returnfalse;","Stringname1=((Expression)expr).name;","Stringname2=name;","if(name1==name2)returntrue;","if(name1==null)returnfalse;","if(name1.equalsIgnoreCase(name2))returntrue;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["longrowPosition=scrollStatus.getRowOffset(false);","if(rowPosition\>=0){","rowSource.setRowPosition(rowPosition);","returntrue;","}else{","rowSource.noRow();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returntrue;","publicbooleansupportsTransactionIsolationLevel(intlevel){","switch(level){","caseConnection.TRANSACTION_NONE:","caseConnection.TRANSACTION_READ_UNCOMMITTED:","caseConnection.TRANSACTION_READ_COMMITTED:"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["col.setNullable(false);","nullableWasSet=true;","break;","caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:","IndexDescriptionindex=index(cmdCreate,token.value,cmdCreate.name,null,colName);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["offset=newData.offset;","if(sizePhysical\<offset)sizePhysical=offset;//occuronlyonupdatesofnotcommittedinserts(filePos==-1","writeFinsh(con);","}else{","newData.status=UPDATED_PAGE;","if(updatePointer==null){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleangetBoolean()throwsjava.lang.Exception{","switch(operation){","caseOR:returnleft.getBoolean()||right.getBoolean();","caseAND:returnleft.getBoolean()&&right.getBoolean();","caseNOT:return!left.getBoolean();","caseLIKE:returnUtils.like(left.getString(),right.getString());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returndata[idx];","finalvoidadd(DataSourcetable){","if(size\>=data.length){","DataSource[]dataNew=newDataSource[size\<\<1];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","finalclassSQLParser{","SSConnectioncon;","privatechar[]sql;","privateListtokens;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["MutableNumericnum=left.getNumeric();","num.mod(right.getNumeric());","returnnum;","default:throwcreateUnspportedConversion(SQLTokenizer.NUMERIC);","ObjectgetObject()throwsjava.lang.Exception{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intstart=0;","while(start\<str.length()&&str.charAt(start)==\'\'){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["finalRowSourceleft;//thelefttable,vieworrowsourceofthejoin","finalRowSourceright;","privatebooleanisBeforeFirst=true;","privatebooleanisOuterValid=true;","privateboolean[]isFullNotValid;","privateintfullRightRowCounter;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnUtils.doubleToMoney(getDoubleImpl());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returngetMoneyImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["ExpressionNameparam=(ExpressionName)params[0];","if(\"*\".equals(param.getName())&&param.getTableAlias()==null){","params[0]=newExpressionValue(\"*\",SQLTokenizer.VARCHAR);","expr=newExpressionName(Expression.COUNT);","break;","caseSQLTokenizer.SUM:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returntrue;","returnfalse;","staticintgetDisplaySize(intdataType,intprecision,intscale){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?1:0;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["switch(token.value){","caseSQLTokenizer.READ:","token=nextToken(MISSING_COMM_UNCOMM);","switch(token.value){","caseSQLTokenizer.COMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_COMMITTED;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntime;","intgetDataType(){","returndataType;","publicStringtoString(){","Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importsmallsql.database.language.Language;","classViewextendsTableView{"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["tableTimestamp=table.getTimestamp();","cmdSel.compile(con);","intcount=table.columns.size();","matrix=newint[count];","if(noColumns){","columnExpressions.clear();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returnbuf.toString();","case3://britshdd/mm/yy","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["close();","if(lobs!=null)","lobs.drop(con);","if(indexes!=null)","indexes.drop(database);","booleanok=getFile(database).delete();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicbooleannullsAreSortedLow(){","returntrue;","publicbooleannullsAreSortedAtStart(){","returnfalse;","publicbooleannullsAreSortedAtEnd(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicObjectgetObject(StringcolumnName,Mapmap)throwsSQLException{","returngetObject(columnName);","publicRefgetRef(StringcolumnName)throwsSQLException{","returngetRef(findColumn(columnName));","publicBlobgetBlob(StringcolumnName)throwsSQLException{","returngetBlob(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returndefaultValue;","StringgetDefaultDefinition(){","returndefaultDefinition;","StringgetName(){","returnname;","booleanisAutoIncrement(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["num.div(right.getInt());","else","num.div(right.getNumeric());","returnnum;","caseNEGATIVE:","MutableNumericnum=left.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();","SQLParsersqlParser=newSQLParser();","for(intc=0;c\<count;c++){","Stringcolumn=store.readString();","columns.add(column);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["{GROUP_AGGR_NOTPART,\"Expression\'\'{0}\'\'isnotpartofaaggregatefunctionorGROUPBYclause.\"},","{ORDERBY_INTERNAL,\"InternalErrorwithORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DifferentSELECToftheUNIONhavedifferentcolumncount:{0}and{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'alreadyexists.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'doesnotexist.\"},","{INDEX_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidIndexstore.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["voiddrop(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.CREATE,-1);","if(storePage==null){","throwSmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED,name);","con.rollbackFile(raFile);","close();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["switch(token.value){","caseSQLTokenizer.DATABASE:","returncreateDatabase();","caseSQLTokenizer.TABLE:","returncreateTable();","caseSQLTokenizer.VIEW:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnull;","returnnewMutableNumeric(value);","finalObjectgetObject()throwsException{","if(isNull())returnnull;","returnnewDouble(getDouble());","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(Expressionexpr){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=expr;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["store=store.loadUpdatedStore();","store.offset=PAGE_CONTROL_SIZE;","returnstore;","privatefinalvoidreadPageHeader()throwsSQLException{","if(readInt()!=PAGE_MAGIC){","throwSmallSQLException.create(Language.TABLE_CORRUPT_PAGE,newObject[]{newLong(filePos)});"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintSQL_TSI_FRAC_SECOND=1250;","staticfinalintSQL_TSI_SECOND=1251;","staticfinalintSQL_TSI_MINUTE=1252;","staticfinalintSQL_TSI_HOUR=1253;","staticfinalintSQL_TSI_DAY=1254;","staticfinalintSQL_TSI_WEEK=1255;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["col.setAutoIncrement(true);","dataType=SQLTokenizer.INT;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["signum=big.signum();","finalvoiddiv(intquotient){","mul(100000);","scale+=5;","divImpl(quotient);","finalprivatevoiddivImpl(intquotient){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["rows.toArray(result);","returnresult;","Object[][]getBestRowIdentifier(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);","for(intt=0;t\<tables.size();t++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["setValue(big.unscaledValue().toByteArray());","scale=big.scale();","signum=big.signum();","finalvoiddiv(intquotient){","mul(100000);","scale+=5;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["for(inti=0;i\<size;i++){","data[i].drop(database);","voidclose()throwsException{","for(inti=0;i\<size;i++){","data[i].close();","voidadd(IndexDescriptionsindexes)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["finalbooleanlast(){","rowIdx=rowList.size()-1;","returnmove();","finalbooleanisLast(){","returnrowIdx==rowList.size()-1&&currentRow!=null;","finalbooleanisAfterLast(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["importjava.net.URL;","importjava.io.*;","importsmallsql.database.language.Language;","publicclassSSCallableStatementextendsSSPreparedStatementimplementsCallableStatement{","privatebooleanwasNull;","SSCallableStatement(SSConnectioncon,Stringsql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["buffer.append(oldColumns.get(c).getName());","buffer.append(\")SELECT*FROM\").append(name);","con.createStatement().execute(buffer.toString());","database.replaceTable(oldTable,newTable);","}catch(Exceptionex){","try{"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["if(lobs==null){","lobs=newLobs(this);","returnlobs.getStore(con,filePos,pageOperation);","finallonggetFirstPage(){","returnfirstPage;","ListgetInserts(SSConnectioncon){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalclassExpressionFunctionRandextendsExpressionFunctionReturnFloat{","finalstaticprivateRandomrandom=newRandom();","finalintgetFunction(){returnSQLTokenizer.RAND;}","booleanisNull()throwsException{","returngetParams().length==1&&param1.isNull();","finaldoublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|"],
"["abstractlonggetMoney()throwsException;","abstractMutableNumericgetNumeric()throwsException;","abstractObjectgetObject()throwsException;","finalObjectgetApiObject()throwsException{","Objectobj=getObject();","if(objinstanceofMutable){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["privatefinalExpressionsresults=newExpressions();","privateExpressionelseResult=Expression.NULL;","privateintdataType=-1;","finalvoidaddCase(Expressioncondition,Expressionresult){","cases.add(condition);","results.add(result);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["JOptionPane.showMessageDialog(null,\"Youneedtostartthecommandlineofthe\\nSmallSQLDatabasewithaconsolewindow:\\n\\njava-jarsmallsql.jar\\n\\n\"+ex,\"FatalError\",JOptionPane.OK_OPTION);","return;","if(line==null){","return;//endofprogram","if(line.length()==0&&command.length()\>0){","booleanisRS=st.execute(command.toString());"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["if(dataType==SQLTokenizer.BIT){","return(obj==Boolean.TRUE)?\"1\":\"0\";","returnobj.toString();","byte[]getBytes()throwsException{","returngetBytes(getObject(),dataType);","staticbyte[]getBytes(Objectobj,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["(caseSensitive?2:0)|","(nullable?4:0);","voidsetFlag(intflag){","identity=(flag&1)\>0;","caseSensitive=(flag&2)\>0;","nullable=(flag&4)\>0;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returngetResult().getBytes();","finalintgetDataType(){","if(dataType\<0){","dataType=elseResult.getDataType();","for(inti=0;i\<results.size();i++){","dataType=ExpressionArithmetic.getDataType(dataType,results.get(i).getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["if(connections.size()==0){","try{","iterator.remove();","database.close();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["listEnum.stack=0;","listEnum.offsetStack[0]=2+pointerSize;","loopToEndOfNode(listEnum);","}else{","setPreviousOffset(listEnum);","longresult=listEnum.resultStack[listEnum.stack];"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returntrue;","booleanrelative(introws)throwsException{","if(rows==0)return(row!=0);","if(rows\>0){","while(rows--\>0){","if(!next()){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["getParam(idx).set(value,dataType,length);","if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType+\";length=\"+length);","finalvoidexecute(SSConnectioncon,SSStatementst)throwsSQLException{","intsavepoint=con.getSavepoint();","try{"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["break;","caseSQLTokenizer.CEILING:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCeiling();","break;","caseSQLTokenizer.COS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["col.setPrecision(255);","dataType=SQLTokenizer.VARCHAR;","break;","caseSQLTokenizer.COUNTER:","col.setAutoIncrement(true);","dataType=SQLTokenizer.INT;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnchars;","byte[]readBytes(intlength){","byte[]bytes=newbyte[length];","System.arraycopy(puffer,offset,bytes,0,length);","offset+=length;","returnbytes;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["finalvoidsave(StoreImploutput){","output.writeInt(size);","output.writeBytes(data,0,size);","finalvoidadd(longvalue)throwsSQLException{","offset=0;","if(size==0){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case131://Kuwaitidd/mm/yyhh:mi:ss:mmmAM"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finaldoublegetDouble()throwsException{","returngetInt();","finallonggetMoney()throwsException{","returngetInt()*10000;","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["classSSPreparedStatementextendsSSStatementimplementsPreparedStatement{","privateArrayListbatches;","privatefinalinttop;//valueofanoptionaltopexpression","SSPreparedStatement(SSConnectioncon,Stringsql)throwsSQLException{","this(con,sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSPreparedStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["{MONTH_TOOLARGE,\"ValoredelmesetroppoaltodelinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"ValoredelgiornotroppoaltroinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"ValoredelleoretroppoaltoininTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"ValoredeiminutitroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"ValoredeiseconditroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"VAloredeimilliseconditroppoaltoinTIMESTAMP\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["for(inti=0;i\<validValues.length;i++){","Stringname=SQLTokenizer.getKeyWord(validValues[i]);","if(name==null)name=String.valueOf((char)validValues[i]);","msgBuf.append(name);","if(i\<validValues.length-2)","msgBuf.append(\",\");"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","if(comp==0&&leftBytes.length!=rightBytes.length){","comp=leftBytes.length\<rightBytes.length?-1:1;","returncomp;","staticCommandSelectcreateMemoryCommandSelect(SSConnectioncon,String[]colNames,Object[][]data)throwsSQLException{","MemoryResultsource=newMemoryResult(data,colNames.length);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"VARNUM\",DECIMAL);","addKeyWord(\"DECIMAL\",DECIMAL);","addKeyWord(\"NUMERIC\",NUMERIC);","addKeyWord(\"REAL\",REAL);","addKeyWord(\"FLOAT\",FLOAT);","addKeyWord(\"DOUBLE\",DOUBLE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.file=file;","this.con=con;","this.database=database;","@Override","longcommit(){","raFile=null;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["}else","if(valueinstanceofLong){","output.writeByte(1);","output.writeLong(((Long)value).longValue());","}else","if(valueinstanceofLongTreeList){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["values[count]=newExpressionValue();","returnvalues[metaData.getColumnIdx(columnIndex)];","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType);","if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["commandSelect.beforeFirst();","booleanisBeforeFirst()throwsSQLException{","returncommandSelect.isBeforeFirst();","booleanisFirst()throwsSQLException{","returncommandSelect.isFirst();","booleanfirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["expr=newExpressionFunctionHour();","break;","caseSQLTokenizer.MINUTE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMinute();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ExpressionValueexpr=rowValues[c]=newExpressionValue();","expr.set(row[c],-1);","Columncolumn=columns.get(c);","if(expr.getDataType()!=SQLTokenizer.NULL){","column.setDataType(expr.getDataType());","if(expr.getPrecision()\>column.getPrecision()){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["this.orderBy=orderBy;","finalbooleanisScrollable(){","returntrue;","finalvoidexecute()throwsException{","rowSource.execute();","Indexindex=newIndex(false);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returncmdCreate;","caseSQLTokenizer.COMMA:","continuenextCol;","default:","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","privateSQLTokenaddColumn(SQLTokentoken,CommandTablecmdCreate)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr=expression(cmd,0);","token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){","style=expression(cmd,0);","}else","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(serializeConnections.size()\>1)returnnull;","if(serializeConnections.size()==1&&serializeConnections.get(con)==null)returnnull;","TableStorePageInsertlock=newTableStorePageInsert(con,this,LOCK_INSERT);","locksInsert.add(lock);","con.add(lock);","returnlock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.SMALLINT:","bytes=newbyte[2];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnull;","finalprivatevoidresize(intnewCapacity){","Entry[]newTable=newEntry[newCapacity];","transfer(newTable);","table=newTable;","threshold=(int)(newCapacity*0.75f);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["privateintgetIntImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getInt()+right.getInt();","caseSUB:returnleft.getInt()-right.getInt();","caseMUL:returnleft.getInt()*right.getInt();","caseDIV:returnleft.getInt()/right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;","SQLTokentoken=nextToken(COMMANDS);","switch(token.value){","caseSQLTokenizer.SELECT:","returnselect();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["switch(type){","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:","sizeUsed=sizePhysical=offset;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["store.readPageHeader();","store=store.loadUpdatedStore();","store.offset=PAGE_CONTROL_SIZE;","returnstore;","privatefinalvoidreadPageHeader()throwsSQLException{","if(readInt()!=PAGE_MAGIC){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"NVARCHAR2\",NVARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"NVARCHAR\",NVARCHAR);","addKeyWord(\"SYSNAME\",SYSNAME);","addKeyWord(\"TEXT\",LONGVARCHAR);","addKeyWord(\"LONGVARCHAR\",LONGVARCHAR);","addKeyWord(\"NTEXT\",LONGNVARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnnode;","staticFileIndexNodeloadRootNode(booleanunique,FileChannelfile,longoffset)throwsException{","StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);","FileIndexNodenode=newFileIndexNode(unique,(char)store.readShort(),file);","node.fileOffset=offset;"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["filePos=0;","store=Store.NOROW;","row=0;","@Override","finalbooleanfirst()throwsException{","filePos=table.getFirstPage();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["throwSmallSQLException.create(Language.CANT_LOCK_FILE,file);","}catch(SQLExceptionsqlex){","throwsqlex;","}catch(Throwableth){","throwSmallSQLException.createFromException(Language.CANT_LOCK_FILE,file,th);","returnchannel;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["formatNumber(details.year%100,2,buf);","formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);","returnbuf.toString();","case112://ISOyyyymmdd","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["longreadSmallDateTime(){","returnreadInt()*60000L;","voidwriteString(StringstrDaten)throwsSQLException{","writeString(strDaten,Short.MAX_VALUE,true);","voidwriteString(StringstrDaten,intlengthColumn,booleanvarchar)throwsSQLException{","char[]daten=strDaten.toCharArray();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["page=find(page,expr.getInt(),1,nodeList);","break;","caseSQLTokenizer.SMALLINT:","page=find(page,shortToBinarySortOrder(expr.getInt()),1,nodeList);","break;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(!(pkTableinstanceofTable)){","throwSmallSQLException.create(Language.FK_NOT_TABLE,foreignKey.pkTable);","voidcreateTable(SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,name,columns,indexes,foreignKeys);","synchronized(tableViews){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returngetScale(dataType);","staticSQLExceptioncreateUnsupportedConversion(intfromDataType,Objectobj,inttoDataType){","Object[]params={","SQLTokenizer.getKeyWord(fromDataType),","obj,","SQLTokenizer.getKeyWord(toDataType)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["FileChannelcurrentRaFile=raFile;","if(raFile==null){","return;","raFile=null;","try{","currentRaFile.close();"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["default:","Stringstr=obj.toString();","if(str.indexOf(\'-\')\>0||str.indexOf(\':\')\>0)","returnDateTime.parse(str);","try{","returnLong.parseLong(str);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalTableStorePagevalue;","Entrynext;","Entry(longk,TableStorePagev,Entryn){","value=v;","next=n;","key=k;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["addKeyWord(\"LONGNVARCHAR\",LONGNVARCHAR);","addKeyWord(\"LONG\",LONG);//aliasforOracleLONGandLONGRAW","addKeyWord(\"CLOB\",CLOB);","addKeyWord(\"NCLOB\",NCLOB);","addKeyWord(\"UNIQUEIDENTIFIER\",UNIQUEIDENTIFIER);","addKeyWord(\"SQL_VARIANT\",JAVA_OBJECT);//aliasforMSSQLServerdatatypeSQL_VARIANT"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["row++;","booleanresult=scroll.next();","if(!result){","noRow();","returnresult;","voidafterLast(){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["for(inti=0;i\<count;i++){","matrix[i]=i;","if(count!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","}else{","for(inti=0;i\<count;i++)matrix[i]=-1;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["{RSET_CLOSED,\"01000\"},","{RSET_NOT_INSERT_ROW,\"01000\"},","{RSET_ON_INSERT_ROW,\"01000\"},","{ROWSOURCE_READONLY,\"01000\"},","{STMT_IS_CLOSED,\"HY010\"},","{SUBQUERY_COL_COUNT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicstaticfinalStringSTXADD_IDENT_EXPECT=\"SS-0613\";","publicstaticfinalStringSTXADD_IDENT_EMPTY=\"SS-0614\";","publicstaticfinalStringSTXADD_IDENT_WRONG=\"SS-0615\";","publicstaticfinalStringSTXADD_OPER_MINUS=\"SS-0616\";","publicstaticfinalStringSTXADD_FUNC_UNKNOWN=\"SS-0617\";","publicstaticfinalStringSTXADD_PARAM_INVALID_COUNT=\"SS-0618\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["data=newExpression[initSize];","finalintsize(){","returnsize;","finalvoidsetSize(intnewSize){","for(inti=newSize;i\<size;i++)data[i]=null;","size=newSize;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["updateBoolean(findColumn(columnName),x);","publicvoidupdateByte(StringcolumnName,bytex)throwsSQLException{","updateByte(findColumn(columnName),x);","publicvoidupdateShort(StringcolumnName,shortx)throwsSQLException{","updateShort(findColumn(columnName),x);","publicvoidupdateInt(StringcolumnName,intx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["else","prev.next=next;","returne.value;","prev=e;","e=next;","returnnull;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["return-1;","finalColumnfindColumn(StringcolumnName){","for(inti=0;i\<columns.size();i++){","Columncolumn=columns.get(i);","if(column.getName().equalsIgnoreCase(columnName))returncolumn;","returnnull;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["offset+=length;","returndaten;","voidwriteBinary(byte[]daten,intlengthColumn,booleanvarBinary)throwsSQLException{","intlength=daten.length;","if(lengthColumn\<length){","Objectparams=newObject[]{newInteger(length),newInteger(lengthColumn)};"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["locks.put(pageKey,lock.nextLock);","}else{","prev.nextLock=lock.nextLock;","return;","prev=lock;","lock=lock.nextLock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["{SAVEPT_INVALID_TRANS,\"01000\"},","{SAVEPT_INVALID_DRIVER,\"01000\"},","{ALIAS_UNSUPPORTED,\"01000\"},","{ISOLATION_UNKNOWN,\"01000\"},","{FLAGVALUE_INVALID,\"01000\"},","{ARGUMENT_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privatefinalString[][]MESSAGES={","{CUSTOM_MESSAGE,\"{0}\"},","{UNSUPPORTED_OPERATION,\"UnsupportedOperation{0}.\"},","{CANT_LOCK_FILE,\"Can\'\'tlockfile\'\'{0}\'\'.AsingleSmallSQLDatabasecanonlybeopenedfromasingleprocess.\"},","{DB_EXISTENT,\"Database\'\'{0}\'\'alreadyexists.\"},","{DB_NONEXISTENT,\"Database\'\'{0}\'\'doesnotexist.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnDouble.parseDouble(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2double(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rows.toArray(result);","returnresult;","Object[][]getReferenceKeys(SSConnectioncon,StringpkTable,StringfkTable)throwsSQLException{","Listrows=newArrayList();","Stringstables=(pkTable!=null)?getTables(pkTable):getTables(fkTable);","for(intt=0;t\<tables.size();t++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicstaticfinalStringINSERT_INVALID_LEN=\"SS-0288\";","publicstaticfinalStringSUBSTR_INVALID_LEN=\"SS-0289\";","publicstaticfinalStringVALUE_STR_TOOLARGE=\"SS-0310\";","publicstaticfinalStringVALUE_BIN_TOOLARGE=\"SS-0311\";","publicstaticfinalStringVALUE_NULL_INVALID=\"SS-0312\";","publicstaticfinalStringVALUE_CANT_CONVERT=\"SS-0313\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["StoreImplstore=getStore(con,firstPage,SQLTokenizer.CREATE);","intcount=columns.size();","store.writeInt(count);","for(inti=0;i\<count;i++){","store.writeColumn(columns.get(i));","for(inti=0;i\<indexes.size();i++){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["super(null,0,table.raFile,fileOffset);","this.con=con;","this.table=table;","this.lockType=lockType;","byte[]getData(){","returnpage;"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken;","while(null!=(token=nextToken())){","switch(token.value){","caseSQLTokenizer.WHERE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{RSET_FWDONLY,\"IlResultSetÃ¨forwardonly.\"},//norealtranslation","{RSET_CLOSED,\"IlResultSetÃ¨chiuso.\"},","{RSET_NOT_INSERT_ROW,\"IlcursorenonÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{RSET_ON_INSERT_ROW,\"IlcursoreÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{ROWSOURCE_READONLY,\"IlRowsourceÃ¨disolalettura.\"},","{STMT_IS_CLOSED,\"LoStatementÃ¨instatochiuso.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["rowPos=0;","finalbooleanisBeforeFirst(){","returnrowPos\<=0;","finalbooleanisFirst(){","returnrowPos==1;","finalbooleanfirst(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["privatebooleanisUpdatable;","privatebooleanisInsertRow;","privateExpressionValue[]values;","privateintfetchDirection;","privateintfetchSize;","SSResultSet(SSStatementst,CommandSelectcmd){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["packagesmallsql.database;","classExpressionFunctionAbsextendsExpressionFunctionReturnP1{","intgetFunction(){returnSQLTokenizer.ABS;}","booleangetBoolean()throwsException{","returngetDouble()!=0;","intgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["from.afterLast();","booleanisLast()throwsException{","returnfrom.isLast();","booleanisAfterLast()throwsException{","returnfrom.isAfterLast();","finalbooleanabsolute(introw)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalTabletable;","intlockType;","SSConnectioncon;","TableStorePagenextLock;","TableStorePage(SSConnectioncon,Tabletable,intlockType,longfileOffset){","super(null,0,table.raFile,fileOffset);"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["caseDIV:returnleft.getInt()/right.getInt();","caseNEGATIVE:return-left.getInt();","caseMOD:returnleft.getInt()%right.getInt();","caseBIT_NOT:return~left.getInt();","throwcreateUnspportedConversion(SQLTokenizer.INT);","longgetLong()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["value[i]=readInt();","returnnewMutableNumeric(signum,value,scale);","voidwriteTimestamp(longts){","writeLong(ts);","longreadTimestamp(){","returnreadLong();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.leftEx=leftEx;","this.rightEx=rightEx;","this.compare=compare;","createIndex(rightEx);","privatevoidcreateIndex(ExpressionsrightEx)throwsException{","index=newIndex(false);"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["day++;","isLeap=true;","dayofyear++;","if(day\<0){","year--;","continue;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(idx\>=0)//setonlyifthecolumnpartofthisindex","expressions.set(idx,valueExpression);","finalvoidwriteFinish(SSConnectioncon){","finalvoidsave(StoreImplstore)throwsSQLException{","store.writeInt(constraintType);","store.writeInt(columns.size());"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["}catch(Exceptione){","Object[][]data=newObject[rows.size()][];","rows.toArray(data);","CommandSelectcmdSelect=Utils.createMemoryCommandSelect(con,colNames,data);","Expressionsorder=newExpressions();","order.add(newExpressionName(\"TABLE_TYPE\"));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;","tabLockConnection=con;","tabLockCount++;","TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","con.add(lock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["{DB_NOTCONNECTED,\"01000\"},","{CONNECTION_CLOSED,\"01000\"},","{VIEW_INSERT,\"01000\"},","{VIEWDROP_NOT_VIEW,\"01000\"},","{VIEW_CANTDROP,\"01000\"},","{RSET_NOT_PRODUCED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["row[2]=table;","try{","if(database.getTableView(con,table)instanceofView){","if(isTypeView){","row[3]=\"VIEW\";","rows.add(row);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privateStringalias;","privateExpression[]params;","Expression(inttype){","this.type=type;","protectedObjectclone()throwsCloneNotSupportedException{","returnsuper.clone();"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnobj.toBigDecimal(scale);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(inti)throwsSQLException{","try{","byte[]obj=getValue(i).getBytes();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getInt();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publiclonggetLong(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["SQLTokentoken=nextToken();","if(listType==SQLTokenizer.ORDER&&token!=null){","switch(token.value){","caseSQLTokenizer.DESC:","expr.setAlias(SQLTokenizer.DESC_STR);","caseSQLTokenizer.ASC:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicvoidsetTypeMap(Mapmap){","publicvoidsetHoldability(intholdability){","this.holdability=holdability;","publicintgetHoldability(){","returnholdability;","intgetSavepoint()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.COMMA:","continuenextCol;","token=addColumn(token,cmdCreate);","if(token==null){","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["chars[34]=digits[(daten[offset+15]\>\>4)&0x0F];","chars[35]=digits[(daten[offset+15])&0x0F];","returnnewString(chars);","staticbooleanstring2boolean(Stringval){","try{","returnDouble.parseDouble(val)!=0;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["privateint[]generatedKeyIndexes;","privateString[]generatedKeyNames;","SSStatement(SSConnectioncon)throwsSQLException{","this(con,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSStatement(SSConnectioncon,intrsType,intrsConcurrency)throwsSQLException{","this.con=con;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["{INSERT_WO_FROM,\"ThemethodinsertRowneedaFROMexpression.\"},","{TABLE_CANT_RENAME,\"Table\'\'{0}\'\'can\'\'tberenamed.\"},","{TABLE_CANT_DROP,\"Table\'\'{0}\'\'can\'\'tbedropped.\"},","{TABLE_CANT_DROP_LOCKED,\"Table\'\'{0}\'\'can\'\'tdropbecauseislocked.\"},","{TABLE_CORRUPT_PAGE,\"Corrupttablepageatposition:{0}.\"},","{TABLE_MODIFIED,\"Table\'\'{0}\'\'wasmodified.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["cmd.setOrder(expressionTokenList(cmd,SQLTokenizer.ORDER));","privatevoidlimit(CommandSelectselCmd)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","try{","intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_WHEN_ELSE_END);","while(true){","switch(token.value){","caseSQLTokenizer.WHEN:","Expressioncondition=expression(cmd,0);","if(input!=null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(daten.length-offset\<16){","byte[]temp=newbyte[16];","System.arraycopy(daten,offset,temp,0,daten.length-offset);","daten=temp;","char[]chars=newchar[36];","chars[8]=chars[13]=chars[18]=chars[23]=\'-\';"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.WEEK:","returnSQLTokenizer.SQL_TSI_WEEK;","caseSQLTokenizer.MONTH:","returnSQLTokenizer.SQL_TSI_MONTH;","caseSQLTokenizer.QUARTER:","returnSQLTokenizer.SQL_TSI_QUARTER;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["if(isNull())return0;","Stringstr1=ExpressionFunctionSoundex.getString(param1.getString());","Stringstr2=ExpressionFunctionSoundex.getString(param2.getString());","intdiff=0;","for(inti=0;i\<4;i++){","if(str1.charAt(i)==str2.charAt(i)){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["return-1;","IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","finalvoidafterLast(){","longList=null;","nodeStack.setSize(1);"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["if(strings.size()\<columns.size())","returnInteger.MAX_VALUE;//doesnotmap","nextColumn:","for(intc=0;c\<columns.size();c++){","StringcolName=columns.get(c);","for(ints=0;s\<strings.size();s++){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NEGATIVE/10),ExpressionArithmetic.NEGATIVE);","break;","caseSQLTokenizer.TILDE:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.BIT_NOT/10),ExpressionArithmetic.BIT_NOT);","break;","caseSQLTokenizer.PARENTHESIS_L:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntable;","@Override","finalvoiddeleteRow()throwsSQLException{","store.deleteRow(con);","store=newStoreNull(store.getNextPagePos());","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["}else","if(day\>=365){","year++;","continue;","break;","}while(true);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returngetInt()*10000L;","MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["returnvalue[0]/scaleDoubleFactor[scale]*signum;","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleDoubleFactor[scale]*signum;","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["msgBuf.append(\"or\");","Stringmessage=getErrorString(","token,Language.CUSTOM_MESSAGE,msgBuf);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateStringgetErrorString(SQLTokentoken,StringmiddleMsgCode,","ObjectmiddleMsgParam){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["scale=big.scale();","signum=big.signum();","finalvoiddiv(intquotient){","mul(100000);","scale+=5;","divImpl(quotient);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["throwSmallSQLException.createFromException(e);","publicTimegetTime(StringcolumnName,Calendarcal)throwsSQLException{","returngetTime(findColumn(columnName),cal);","publicTimestampgetTimestamp(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["StringgetAlias(){","return(alias!=null)?alias:getTableView().name;","booleanhasAlias(){","returnalias!=null;","booleaninit(SSConnectioncon)throwsException{","TableViewtableView=getTableView();"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["locksInsert.set(i,lock.nextLock);","}else{","prev.nextLock=lock.nextLock;","return;","prev=lock;","lock=lock.nextLock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["View(SSConnectioncon,Stringname,FileChannelraFile,longoffset)throwsException{","super(name,newColumns());","StorePagestorePage=newStorePage(null,-1,raFile,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);","sql=store.readString();","inttype;"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["if(locks.size()\>0||locksInsert.size()\>0){","returnnull;","if(serializeConnections.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["packagesmallsql.database;","finalclassJoinextendsRowSource{","Expressioncondition;//thejoincondition,thepartaftertheON","privateinttype;","RowSourceleft;//thelefttable,vieworrowsourceofthejoin","RowSourceright;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["addKeyWord(DESC_STR,DESC);","addKeyWord(\"VALUES\",VALUES);","addKeyWord(\"AS\",AS);","addKeyWord(\"DEFAULT\",DEFAULT);","addKeyWord(\"AUTO_INCREMENT\",IDENTITY);//aliasforIDENTITY;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"IDENTITY\",IDENTITY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["voidwriteInt(intvalue){","verifyFreePufferSize(4);","puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["this.groupBy=group;","finalvoidsetHaving(Expressionhaving){","this.having=having;","finalvoidsetOrder(Expressionsorder){","this.orderBy=order;","finalvoidsetMaxRows(intmax){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnfalse;","publicbooleansupportsMixedCaseIdentifiers(){","returntrue;","publicbooleanstoresUpperCaseIdentifiers(){","returnfalse;","publicbooleanstoresLowerCaseIdentifiers(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NVARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BOOLEAN)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DATE)),Utils.getInteger(10),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIME)),Utils.getInteger(8),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIMESTAMP)),Utils.getInteger(23),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(3),Utils.getInteger(3),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLDATETIME)),Utils.getInteger(16),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=Utils.compareBytes(leftBytes,right2.getBytes());","break;}","throwcreateUnspportedDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{UNSUPPORTED_OPERATION,\"NichtunterstÃ¼tzteFunktion:{0}\"},","{CANT_LOCK_FILE,\"DieDatei\'\'{0}\'\'kannnichtgelocktwerden.EineeinzelneSmallSQLDatenbankkannnurfÃ¼reineneinzigenProzessgeÃ¶ffnetwerden.\"},","{DB_EXISTENT,\"DieDatenbank\'\'{0}\'\'existiertbereits.\"},","{DB_NONEXISTENT,\"DieDatenbank\'\'{0}\'\'existiertnicht.\"},","{DB_NOT_DIRECTORY,\"DasVerzeichnis\'\'{0}\'\'istkeineSmallSQLDatenbank.\"},","{DB_NOTCONNECTED,\"SiesindnichtmiteinerDatenbankverbunden.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnnewMutableNumeric(((Money)obj).value,4);","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","if(objinstanceofMutableNumeric)","return(MutableNumeric)obj;","returnnewMutableNumeric((BigDecimal)obj);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returngetInt()*10000;","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAscii();","break;","caseSQLTokenizer.BITLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionBitLen();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(value.length==1&&(value[0]\>0)){","buf.append(Integer.toString(value[0]));","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","buf.append(Long.toString(temp));"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(long)readDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/10000;","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["offset+=3;","break;","default:thrownewError();","return;","writeBoolean(false);//false-isnotnull","column.setNewAutoIncrementValue(expr);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnTypes.LONGVARCHAR;","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","returnTypes.CLOB;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseMUL:returnlVal*rVal;","caseDIV:returnlVal/rVal;","caseNEGATIVE:return-rVal;","caseMOD:returnlVal%rVal;","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","floatgetFloat()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["expr=newExpressionFunctionExp();","break;","caseSQLTokenizer.FLOOR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionFloor();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseOR:","caseAND:","caseNOT:","caseLIKE:","caseISNULL:","caseISNOTNULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["prev=e;","e=next;","returnnull;","finalvoidclear(){","Entrytab[]=table;","for(inti=0;i\<tab.length;i++)"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","privatevoidgroup(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);","cmd.setGroup(expressionTokenList(cmd,SQLTokenizer.GROUP));","privatevoidwhere(CommandSelectcmd)throwsSQLException{","cmd.setWhere(expression(cmd,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["value=null;","break;","case1:","value=newLong(input.readLong());","break;","case2:"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["if(column.getName().equalsIgnoreCase(keyNames[i])){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;","if(needGeneratedKeys&&generatedKeysType==2){","int[]keyIndexes=st.getGeneratedKeyIndexes();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["if(isNot){","isNot=false;","leftExpr=newExpressionArithmetic(leftExpr,ExpressionArithmetic.NOT);","previousToken();","returnleftExpr;","privateExpressionexpressionSingle(Commandcmd,SQLTokentoken)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["value=EMPTY;","finalvoidset(Objectvalue,int_dataType,intlength)throwsSQLException{","set(value,_dataType);","this.length=length;","finalvoidset(ObjectnewValue,intnewDataType)throwsSQLException{","this.value=newValue;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(getOperationFromToken(i)==operation){","token=i;","break;","if(operation==NEGATIVE)token=SQLTokenizer.MINUS;","if(operation==ISNOTNULL)token=SQLTokenizer.IS;","Stringkeyword=SQLTokenizer.getKeyWord(token);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidaccumulate(Expressionexpr)throwsException{","inttype=getType();","if(type!=GROUP_BY)expr=expr.getParams()[0];","switch(type){","caseGROUP_BY:","caseFIRST:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["year+=month/12;","month%=12;","result+=MONTH_DAYS[month]*86400000L;","result+=(year-1970)*31536000000L;//millis365days","result+=((year/4)-(year/100)+(year/400)-477)*86400000L;","if(month\<2&&year%4==0&&(year%100!=0||year%400==0))"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["addKeyWord(\"END\",END);","addKeyWord(\"SWITCH\",SWITCH);","staticfinalintBIT=300;","staticfinalintBOOLEAN=301;","staticfinalintBINARY=310;","staticfinalintVARBINARY=311;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["((StoreImpl)store).isRollback()){","returntrue;","returnfalse;","@Override","finalvoidnullRow(){","row=0;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["for(inti=0;i\<count;i++){","page=findRows(page,expressions.get(i),searchNullValues,nodeList);","if(page==null)","returnnull;","if(i+1==count)","returnpage.getValue();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","finalvoidexecute()throwsException{","rowSource.execute();","booleanisExpressionsFromThisRowSource(Expressionscolumns){","returnrowSource.isExpressionsFromThisRowSource(columns);"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intstart=0;","intlength=bytes.length;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getFloat();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["puffer[offset++]=(byte)(value);","voidwriteChars(char[]value){","verifyFreePufferSize(2*value.length);","for(inti=0;i\<value.length;i++){","charc=value[i];","puffer[offset++]=(byte)(c\>\>8);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["booleanfirstNode=(offset==0);//trueifitthefirstentryinalevel","while(true){","intnextEntry=getUnsignedShort();","if(nextEntry!=0||firstNode){","result|=(((long)nextEntry)\<\<shift);","if(listEnum.stack\>=3){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["doublegetDouble()throwsException{","returngetLong();","longgetMoney()throwsException{","returngetLong()*10000;","MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["classForeignKeys{","privateintsize;","privateForeignKey[]data;","ForeignKeys(){","data=newForeignKey[16];","finalintsize(){"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["for(intc=0;c\<columnsPk.size();c++){","Object[]row=newObject[14];","row[0]=getName();//PKTABLE_CAT","row[2]=foreignKey.pkTable;//PKTABLE_NAME","row[3]=columnsPk.get(c);//PKCOLUMN_NAME","row[4]=getName();//FKTABLE_CAT"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["currentDS.afterLast();","row=0;","finalintgetRow()throwsException{","returnrow;","privatefinalintgetBitCount(){","intsize=dataSources.size();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseSQLTokenizer.FOREIGN:","IndexDescriptionindex=index(cmdCreate,token.value,tableName,constraintName,null);","if(token.value==SQLTokenizer.FOREIGN){","nextToken(MISSING_REFERENCES);","Stringpk=nextIdentifier();","Expressionsexpressions=newExpressions();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DOUBLE:","returnnewDouble(getDouble());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(getMoney());","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnmoney;","publicstaticMoneycreateFromUnscaledValue(intvalue){","Moneymoney=newMoney();","money.value=value;","returnmoney;","publicintintValue(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","returngetString().getBytes();","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|"],
"["finallonggetMoney(intcolIdx)throwsException{","returncurrentDS.getMoney(colIdx);","finalMutableNumericgetNumeric(intcolIdx)throwsException{","returncurrentDS.getNumeric(colIdx);","finalObjectgetObject(intcolIdx)throwsException{","returncurrentDS.getObject(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(moveToRow())","returntrue;","setNextFilePos();","row=0;","returnfalse;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.REAL:","returnUtils.float2bytes(((Number)obj).floatValue());","default:throwcreateUnsupportedConversion(dataType,obj,SQLTokenizer.VARBINARY);","finalintgetDataType(){","returndataType;","StringgetTableName(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatefinalDataSourcesdataSources=newDataSources();","privateintdataSourceIdx;","privateDataSourcecurrentDS;","privateintrow;","voidaddDataSource(DataSourceds){","dataSources.add(ds);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["Object[][]getIndexInfo(SSConnectioncon,Stringtable,booleanunique)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);","Shorttype=Utils.getShort(DatabaseMetaData.tableIndexOther);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnExpressionValue.getBoolean(getObject(),getDataType());","intgetInt()throwsException{","returnExpressionValue.getInt(getObject(),getDataType());","longgetLong()throwsException{","returnExpressionValue.getLong(getObject(),getDataType());","floatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(parenthesis==0){","previousToken();","returnfromSource;","throwcreateSyntaxError(token,Language.STXADD_FROM_PAR_CLOSE);","default:","if(isKeyword(token)){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanisScrollable(){","returntrue;","finalvoidbeforeFirst(){","rowPos=0;","finalbooleanisBeforeFirst(){","returnrowPos\<=0;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["returnnewFileIndex(root,raFile);","voidsave()throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);","buffer.put(rootPage.getUnique()?(byte)1:(byte)0);","buffer.position(0);","raFile.write(buffer);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["booleanlast()throwsException{","afterLast();","returnprevious();","booleanisLast()throwsException{","if(rowIdx+1!=rowList.size()){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["finalvoidsetElseResult(Expressionexpr){","elseResult=expr;","finalvoidsetEnd(){","Expression[]params=newExpression[cases.size()*2+(elseResult!=null?1:0)];","inti=0;","for(intp=0;p\<cases.size();p++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["privatefloatgetFloatImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getFloat()+right.getFloat();","caseSUB:returnleft.getFloat()-right.getFloat();","caseMUL:returnleft.getFloat()*right.getFloat();","caseDIV:returnleft.getFloat()/right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["SQLTokenizer.SMALLMONEY,","SQLTokenizer.BIGINT,","SQLTokenizer.INT,","SQLTokenizer.SMALLINT,","SQLTokenizer.TINYINT,","SQLTokenizer.BIT,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["matrix[tableView.findColumnIdx(columns.get(i))]=i;","finalvoidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","init(database,tableView);","raFile=createFile(con,database);","staticFilegetFile(Databasedatabase,Stringname)throwsException{","returnnewFile(Utils.createIdxFileName(database,name));"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.IS:returnISNULL;","caseSQLTokenizer.OR:returnOR;","caseSQLTokenizer.AND:returnAND;","caseSQLTokenizer.NOT:returnNOT;","caseSQLTokenizer.BIT_OR:returnBIT_OR;","caseSQLTokenizer.BIT_AND:returnBIT_AND;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["StringuuidStr=expr.getString();","if(uuidStr.compareTo((String)value)\>0)value=uuidStr;","break;","default:","Stringkeyword=SQLTokenizer.getKeyWord(dataType);","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX,keyword);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["precision=Math.max(precision,results.get(i).getPrecision());","returnprecision;","finalintgetScale(){","intprecision=0;","for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getScale());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["publicResultSetgetExportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,table,null,null,null);","publicResultSetgetCrossReference(StringprimaryCatalog,StringprimarySchema,StringprimaryTable,StringforeignCatalog,StringforeignSchema,StringforeignTable)throwsSQLException{","try{","String[]colNames={\"PKTABLE_CAT\",\"PKTABLE_SCHEM\",\"PKTABLE_NAME\",\"PKCOLUMN_NAME\",\"FKTABLE_CAT\",\"FKTABLE_SCHEM\",\"FKTABLE_NAME\",\"FKCOLUMN_NAME\",\"KEY_SEQ\",\"UPDATE_RULE\",\"DELETE_RULE\",\"FK_NAME\",\"PK_NAME\",\"DEFERRABILITY\"};","Object[][]data=con.getDatabase(false).getReferenceKeys(con,primaryTable,foreignTable);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["addKeyWord(\"SQL_TSI_QUARTER\",SQL_TSI_QUARTER);","addKeyWord(\"YY\",SQL_TSI_YEAR);","addKeyWord(\"YYYY\",SQL_TSI_YEAR);","addKeyWord(\"SQL_TSI_YEAR\",SQL_TSI_YEAR);","staticfinalintIFNULL=1301;//firstsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","staticfinalintUSER=1302;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalclassExpressionFunctionLog10extendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.LOG10;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.log(param1.getDouble())/divisor;","privatestaticfinaldoubledivisor=Math.log(10);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLog10.java|"],
"["returnget(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{","returnget(colIdx).getInt();","longgetLong(intcolIdx)throwsException{","returnget(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["Expressionssingle=newExpressions();","for(inti=0;i\<columns.size();i++){","single.clear();","single.add(columns.get(i));","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","continue;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["expr=newExpressionFunctionInsert();","break;","caseSQLTokenizer.LCASE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLCase();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:returnFloat.parseFloat(obj.toString());","doublegetDouble()throwsException{","returngetDouble(getObject(),dataType);","staticdoublegetDouble(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["break;","caseSQLTokenizer.SWITCH:","invalidParamCount=(paramCount%2!=0);","ExpressionFunctionCaseexprCase=newExpressionFunctionCase();","for(inti=0;i\<paramCount-1;i+=2)","exprCase.addCase(params[i],params[i+1]);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["left.nullRow();","right.nullRow();","row=0;","voidnoRow(){","isAfterLast=true;","left.noRow();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnbuffer;","returnbytes;","caseSQLTokenizer.BINARY:{","byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();","if(length!=bytes.length){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnreadString().getBytes();","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnprecision;","staticintgetDataTypePrecision(intdataType,intdefaultValue){","switch(dataType){","caseSQLTokenizer.NULL:","return0;","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["for(inti=0;i\<matrix.length;i++){","matrix[i]=-1;","for(inti=0;i\<columns.size();i++){","matrix[tableView.findColumnIdx(columns.get(i))]=i;","finalvoidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","init(database,tableView);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["return(long)readDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/10000;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=0;i\<length;i++){","if(src1[i]!=src2[i+offset2])returnfalse;","returntrue;","privatefinalbooleanequals(char[]src1,longsrc2,intcharCount){","if(src1==null)returnfalse;","intlength=src1.length;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnbuf.toString();","publicStringgetNumericFunctions(){","returngetFunctions(SQLTokenizer.ABS,SQLTokenizer.TRUNCATE);","publicStringgetStringFunctions(){","returngetFunctions(SQLTokenizer.ASCII,SQLTokenizer.UCASE);","publicStringgetSystemFunctions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privatevoidorder(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);","cmd.setOrder(expressionTokenList(cmd,SQLTokenizer.ORDER));","privatevoidlimit(CommandSelectselCmd)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","try{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnSQLTokenizer.getSQLDataType(getColumnExpression(column).getDataType());","publicStringgetColumnTypeName(intcolumn)throwsSQLException{","returnSQLTokenizer.getKeyWord(getColumnExpression(column).getDataType());","publicbooleanisReadOnly(intcolumn)throwsSQLException{","return!getColumnExpression(column).isDefinitelyWritable();","publicbooleanisWritable(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["staticlongnow(){","returnremoveDateTimeOffset(System.currentTimeMillis());","staticintdayOfWeek(longtime){","return(int)((time/86400000+3)%7);","staticlongparse(java.util.Datedate){","longt=date.getTime();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalprivateIndexNodefindNull(IndexNodepage){","returnpage.getChildNode((char)0);","finalprivateIndexNodeaddNull(IndexNodepage,longrowOffset,booleanisLastValue)throwsSQLException{","if(isLastValue){","page.addNode((char)0,rowOffset);","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(value.length==0||signum==0){","buf.append(\'0\');","}else{","if(value.length==1&&(value[0]\>0)){","buf.append(Integer.toString(value[0]));","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSUM:","if(isEmpty()){","initValue(expr);","}else","switch(dataType){","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalvoidnullRow(){","currentDS.nullRow();","row=0;","finalvoidnoRow(){","currentDS.noRow();","row=0;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["this.length=length;","finalvoidset(ObjectnewValue,intnewDataType)throwsSQLException{","this.value=newValue;","this.dataType=newDataType;","if(dataType\<0){","if(newValue==null)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnfalse;//TODOperformance,canimplementitifalldatasourcesimplementit","finalvoidbeforeFirst()throwsException{","dataSourceIdx=0;","currentDS=dataSources.get(0);","currentDS.beforeFirst();","row=0;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["else","add(val2);","privatevoidadd(int[]val2){","longtemp=0;","intv1=value.length;","for(intv2=val2.length;v2\>0;){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalvoidtoArray(Expression[]array){","System.arraycopy(data,0,array,0,size);","finalExpression[]toArray(){","Expression[]array=newExpression[size];","System.arraycopy(data,0,array,0,size);","returnarray;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["returnparam3.getDouble();","longgetMoney()throwsException{","if(param1.getBoolean())","returnparam2.getMoney();","returnparam3.getMoney();","MutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["staticfinalintDECIMAL=332;","staticfinalintNUMERIC=333;","staticfinalintREAL=336;","staticfinalintFLOAT=337;","staticfinalintDOUBLE=338;","staticfinalintDATE=340;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicStringgetDatabaseProductName(){","return\"SmallSQLDatabase\";","publicStringgetDatabaseProductVersion(){","returngetDriverVersion();","publicStringgetDriverName(){","return\"SmallSQLDriver\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(value.length==1&&(value[0]\>0)){","returnUtils.double2long(value[0]/scaleDoubleFactor[scale]*signum);","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","page=add(page,rowOffset,longToBinarySortOrder(expr.getLong()),isLastValues,4);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticfinalintBITLEN=1101;","staticfinalintCHARLEN=1102;","staticfinalintCHARACTLEN=1103;","staticfinalint_CHAR=1104;","staticfinalintCONCAT=1105;","staticfinalintDIFFERENCE=1106;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateintrow;","Distinct(RowSourcerowSource,Expressionscolumns){","this.rowSource=rowSource;","this.distinctColumns=columns;","finalvoidexecute()throwsException{","rowSource.execute();"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["SQLTokenizer.FLOAT,","SQLTokenizer.REAL,","SQLTokenizer.DECIMAL,","SQLTokenizer.NUMERIC,","SQLTokenizer.MONEY,","SQLTokenizer.SMALLMONEY,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","return4;","caseSQLTokenizer.TIMESTAMP:","return9;//nanoseconds","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["longcommit()throwsSQLException{","if(nextLock!=null){","fileOffset=nextLock.commit();","nextLock=null;","rollback();","returnfileOffset;"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["staticfinalintSQL_TSI_HOUR=1253;","staticfinalintSQL_TSI_DAY=1254;","staticfinalintSQL_TSI_WEEK=1255;","staticfinalintSQL_TSI_MONTH=1256;","staticfinalintSQL_TSI_QUARTER=1257;","staticfinalintSQL_TSI_YEAR=1258;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleannext()throwsException;","booleanlast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisLast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["finalStringname;","finalColumnscolumns;","privatelongtimestamp=System.currentTimeMillis();","staticfinalintLOCK_NONE=0;//readonREAD_COMMITEDandREAD_UNCOMMITED","staticfinalintLOCK_INSERT=1;//preventonlyLOCK_TAB","staticfinalintLOCK_READ=2;//occuronreadandpreventawriteofdata,itcanoccurmoreasoneLOCK_READperpage"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["Expressionsrc=expression(cmd,0);","cmd.addSetting(dest,src);","token=nextToken();","if(token==null)break;","switch(token.value){","caseSQLTokenizer.WHERE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["input=expression(cmd,0);","token=nextToken(MISSING_WHEN_ELSE_END);","while(true){","switch(token.value){","caseSQLTokenizer.WHEN:","Expressioncondition=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(token!=null&&token.value==SQLTokenizer.UNION){","if(union==null){","union=newUnionAll();","union.addDataSource(newViewResult(con,selCmd));","selCmd=newCommandSelect(con.log);","selCmd.setSource(union);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Object[][]data={","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.UNIQUEIDENTIFIER)),Utils.getInteger(36),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIT)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TINYINT)),Utils.getInteger(3),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIGINT)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARBINARY)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privatestaticfinalint[]COMMANDS_CREATE={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE,SQLTokenizer.UNIQUE,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]COMMANDS_DROP={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE};","privatestaticfinalint[]COMMANDS_SET={SQLTokenizer.TRANSACTION};","privatestaticfinalint[]COMMANDS_CREATE_UNIQUE={SQLTokenizer.INDEX,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]MISSING_TABLE={SQLTokenizer.TABLE};","privatestaticfinalint[]ESCAPE_MISSING_CLOSE={SQLTokenizer.ESCAPE_R};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value\>\>32));","writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value\>\>16));"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["col.setScale(value);","nextToken(MISSING_PARENTHESIS_R);","}else{","col.setPrecision(18);//defaultPrecisionfordecimalandnumeric","previousToken();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"COUNTER\",COUNTER);","addKeyWord(\"BIGINT\",BIGINT);","addKeyWord(\"SMALLMONEY\",SMALLMONEY);","addKeyWord(\"MONEY\",MONEY);","addKeyWord(\"NUMBER\",DECIMAL);","addKeyWord(\"VARNUM\",DECIMAL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["name=name.substring(5);","Filedir=newFile(name);","if(!dir.isDirectory()||","!newFile(dir,Utils.MASTER_FILENAME).exists())","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefiles[]=dir.listFiles();"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","booleanisExpressionsFromThisRowSource(Expressionscolumns){","returnrowSource.isExpressionsFromThisRowSource(columns);"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["formatNumber(details.minute,2,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case1://USAmm/dd/yy","formatNumber(details.month+1,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["case1:","value=newLong(input.readLong());","break;","case2:","value=newLongTreeList(input);","break;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseTypes.DOUBLE:","return\"java.lang.Double\";","caseTypes.DATE:","return\"java.sql.Date\";","caseTypes.TIME:","return\"java.sql.Time\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["importjava.math.*;","importjava.io.ByteArrayInputStream;","importjava.io.InputStream;","importjava.io.Reader;","importjava.util.Map;","importjava.util.Calendar;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["chars[26]=digits[(daten[offset+11]\>\>4)&0x0F];","chars[27]=digits[(daten[offset+11])&0x0F];","chars[28]=digits[(daten[offset+12]\>\>4)&0x0F];","chars[29]=digits[(daten[offset+12])&0x0F];","chars[30]=digits[(daten[offset+13]\>\>4)&0x0F];","chars[31]=digits[(daten[offset+13])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticfinalintSQL_LONGVARCHAR=1360;","staticfinalintSQL_REAL=1361;","staticfinalintSQL_SMALLINT=1362;","staticfinalintSQL_TIME=1363;","staticfinalintSQL_TIMESTAMP=1364;","staticfinalintSQL_TINYINT=1365;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intValue^0x8000000000000000L;","finalstaticprivateintshortToBinarySortOrder(intvalue){","returnvalue^0x8000;","finalstaticprivateintintToBinarySortOrder(intvalue){","returnvalue^0x80000000;","finalstaticprivatelonglongToBinarySortOrder(longvalue){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["byte[]result=newbyte[4];","result[0]=(byte)(value\>\>24);","result[1]=(byte)(value\>\>16);","result[2]=(byte)(value\>\>8);","result[3]=(byte)(value);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){","return;","firstNode=false;","if(shift!=0)offset+=pointerSize;","shift-=16;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["}else","if(valueinstanceofLongTreeList){","output.writeByte(2);","((LongTreeList)value).save(output);","}else","if(valueinstanceofIndexNode){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["if(getMaxRows()!=0&&(top==-1||top\>getMaxRows()))","cmd.setMaxRows(getMaxRows());","cmd.execute(con,this);","publicvoidsetNull(intparameterIndex,intsqlType)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,null,SQLTokenizer.NULL);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["privatestaticfinalvoidgetExpressionNameFromTree(Expressionslist,Expressiontree){","if(tree.getType()==Expression.NAME){","list.add(tree);","Expression[]params=tree.getParams();","if(params!=null){","for(inti=0;i\<params.length;i++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["privatestaticfinalint[]MISSING_WHERE_COMMA={SQLTokenizer.WHERE,SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_ISOLATION={SQLTokenizer.ISOLATION};","privatestaticfinalint[]MISSING_LEVEL={SQLTokenizer.LEVEL};","privatestaticfinalint[]COMMANDS_TRANS_LEVEL={SQLTokenizer.READ,SQLTokenizer.REPEATABLE,SQLTokenizer.SERIALIZABLE};","privatestaticfinalint[]MISSING_READ={SQLTokenizer.READ};","privatestaticfinalint[]MISSING_COMM_UNCOMM={SQLTokenizer.COMMITTED,SQLTokenizer.UNCOMMITTED};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["raFile.close();","}catch(Exceptione2){","DriverManager.println(e2.toString());","throwSmallSQLException.createFromException(e);","voiddrop(Databasedatabase)throwsException{","close();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["rs=newSSResultSet(st,this);","voidbeforeFirst()throwsException{","from.beforeFirst();","booleanisBeforeFirst()throwsSQLException{","returnfrom.isBeforeFirst();","booleanisFirst()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["mul(factor);","factor=1;","mul(factor);","}else{","for(;newScale\<scale;scale--){","factor*=10;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["chars[12]=digits[(daten[offset+4])&0x0F];","chars[14]=digits[(daten[offset+7]\>\>4)&0x0F];","chars[15]=digits[(daten[offset+7])&0x0F];","chars[16]=digits[(daten[offset+6]\>\>4)&0x0F];","chars[17]=digits[(daten[offset+6])&0x0F];","chars[19]=digits[(daten[offset+8]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","byte[]bytes=expr.getBytes();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","Object[]row=newObject[13];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=Boolean.valueOf(!index.isUnique());//NON_UNIQUE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["break;","caseSQLTokenizer.CURTIME:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;","caseSQLTokenizer.DAYOFMONTH:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return;","finalprivateintgetPointer(){","intvalue=0;","for(inti=0;i\<pointerSize;i++){","value\<\<=8;","value+=(data[offset++]&0xFF);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(shift==0)return;//valueexistalready,thiscaseshouldnotoccur","offset=getPointer();","firstNode=true;","break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){","offset-=2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["page[offset++]=(byte)(value);","longreadLong(){","return((long)(page[offset++])\<\<56)|","((long)(page[offset++]&0xFF)\<\<48)|","((long)(page[offset++]&0xFF)\<\<40)|","((long)(page[offset++]&0xFF)\<\<32)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType,intlength)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType,length);","if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType+\";length=\"+length);","finalprivateCommandSelectgetCmd()throwsSQLException{","if(cmd==null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["packagesmallsql.database;","importjava.math.BigDecimal;","importjava.sql.*;","importsmallsql.database.language.Language;","publicclassExpressionValueextendsExpression{","privateObjectvalue;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalintNOT=31;//NOT","staticfinalintBIT_OR=41;//|","staticfinalintBIT_AND=42;//&","staticfinalintBIT_XOR=43;//^","staticfinalintEQUALS=51;//=","staticfinalintEQUALS_NULL=52;//likeEqualsbut(null=null)--\>true"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["System.arraycopy(isFullNotValid,0,temp,0,fullRightRowCounter);","isFullNotValid=temp;","if(!result){","if(fullRowCount==0){","returnfalse;","if(fullReturnCounter\<0){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["this.left=left;","this.right=right;","finalbooleanisScrollable(){","returnfalse;//TODOperformance,ifleftandrightarescrollablethenthisshouldalsoscrollable","voidbeforeFirst()throwsException{","scroll.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returngetDoubleImpl(0,left.getDouble());","returngetDoubleImpl(left.getDouble(),right.getDouble());","privatedoublegetDoubleImpl(doublelVal,doublerVal)throwsjava.lang.Exception{","switch(operation){","caseADD:returnlVal+rVal;","caseSUB:returnlVal-rVal;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintINDEX=238;","staticfinalintPROCEDURE=239;","staticfinalintTRANSACTION=240;","staticfinalintISOLATION=241;","staticfinalintLEVEL=242;","staticfinalintREAD=243;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publiclonggetLong(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["previousToken();","returnfromSource;","caseSQLTokenizer.CROSS:","nextToken(MISSING_JOIN);","caseSQLTokenizer.COMMA:","fromSource=newJoin(Join.CROSS_JOIN,fromSource,rowSource(cmd,tables,0),null);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivatechardigit;//unsignedshort","staticfinalprivateIndexNode[]EMPTY_NODES=newIndexNode[0];","privateIndexNode[]nodes=EMPTY_NODES;","privatechar[]remainderKey;","privateObjectvalue;","protectedIndexNode(booleanunique,chardigit){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["packagesmallsql.tools;","importjava.io.*;","importjava.sql.*;","importjava.util.Properties;","importjavax.swing.JOptionPane;","importsmallsql.database.*;"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["finalvoidaddNode(chardigit,longrowOffset)throwsSQLException{","IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();","node.saveValue(rowOffset);","finalvoidsaveValue(longrowOffset)throwsSQLException{","if(unique){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["order(selCmd);","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.LIMIT){","limit(selCmd);","token=nextToken();","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(day==31){","switch(month){","case1:","case3:","case5:","case8:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnExpressionValue.getFloat(getObject(),getDataType());","doublegetDouble()throwsException{","returnExpressionValue.getDouble(getObject(),getDataType());","longgetMoney()throwsException{","returnExpressionValue.getMoney(getObject(),getDataType());","MutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnSSDriver.drv.getMinorVersion();","publicbooleanusesLocalFiles(){","returnfalse;","publicbooleanusesLocalFilePerTable(){","returnfalse;","publicbooleansupportsMixedCaseIdentifiers(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["st.con.log.println(\"ResultSet.close\");","cmd=null;","publicbooleanwasNull(){","returnwasNull;","publicStringgetString(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnlock;","caseSQLTokenizer.ALTER:{","if(locks.size()\>0||locksInsert.size()\>0){","returnnull;","if(serializeConnections.size()\>0){","Iteratorvalues=locks.values().iterator();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["@Override","finalvoidbeforeFirst(){","filePos=0;","store=Store.NOROW;","row=0;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseExpression.FIRST:","caseExpression.LAST:","caseExpression.SUM:","ExpressionbaseExpression=exprName.getParams()[0];","column.setPrecision(baseExpression.getPrecision());","column.setScale(baseExpression.getScale());"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["packagesmallsql.database;","abstractclassExpressionFunctionReturnP1extendsExpressionFunction{","booleanisNull()throwsException{","returnparam1.isNull();","ObjectgetObject()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["scroll,level));","continue;","}else","returngetReturnValue(status.nodeValue);","idx=++status.idx;","if(idx\>=status.nodes.length){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["privatefinalvoidmoveRemainderValueSub(ObjectrowOffset,char[]remainderValue){","intlength=remainderValue.length-1;","this.remainderKey=newchar[length];","value=rowOffset;","System.arraycopy(remainderValue,1,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(char[]remainderValue,intoffset){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intlength=bytes.length;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["nextToken(MISSING_THEN);","Expressionresult=expression(cmd,0);","expr.addCase(condition,result);","break;","caseSQLTokenizer.ELSE:","expr.setElseResult(expression(cmd,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}else{","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","if(row\<=rowList.size()){","rowIdx=row-1;","rowSource.setRowPosition(rowList.get(rowIdx));"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["locks.put(pageKey,lock);","con.add(lock);","returnlock;","voidfreeLock(TableStorePagestorePage){","finalintlockType=storePage.lockType;","finallongfileOffset=storePage.fileOffset;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(dest.getType()!=Expression.NAME)throwcreateSyntaxError(token,MISSING_IDENTIFIER);","nextToken(MISSING_EQUALS);","Expressionsrc=expression(cmd,0);","cmd.addSetting(dest,src);","token=nextToken();","if(token==null)break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["verifyFreePufferSize(8);","puffer[offset++]=(byte)(value\>\>56);","puffer[offset++]=(byte)(value\>\>48);","puffer[offset++]=(byte)(value\>\>40);","puffer[offset++]=(byte)(value\>\>32);","puffer[offset++]=(byte)(value\>\>24);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnnewMutableNumeric(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["size=newSize;","if(size\>data.length)resize(newSize);","finalExpressionget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["break;","default:thrownewError(String.valueOf(column.getDataType()));","@Override","booleanisNull(intvalueOffset){","returnpage[valueOffset]!=0;","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnewCommandCreateDatabase(con.log,token.getName(sql));","privateCommandTablecreateTable()throwsSQLException{","Stringcatalog;","StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticfinalintNORMAL=0;","privatestaticfinalintDELETED=1;","privatestaticfinalintUPDATE_POINTER=2;","privatestaticfinalintUPDATED_PAGE=3;","finalprivateTabletable;","privatebooleansharedPageData;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importsmallsql.database.language.Language;","classViewextendsTableView{","finalStringsql;"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["privateintsize;","privateintthreshold;","StorePageMap(){","threshold=12;","table=newEntry[17];","finalintsize(){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["columns.add(store.readColumn(tableFormatVersion));","indexes=newIndexDescriptions();","references=newForeignKeys();","inttype;","while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetColumnPrivileges(Stringcatalog,Stringschema,Stringtable,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"GRANTOR\",\"GRANTEE\",\"PRIVILEGE\",\"IS_GRANTABLE\"};","thrownewjava.lang.UnsupportedOperationException(\"MethodgetTablePrivileges()notyetimplemented.\");","publicResultSetgetBestRowIdentifier(Stringcatalog,Stringschema,Stringtable,intscope,booleannullable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["importjava.sql.SQLException;","importjava.text.MessageFormat;","importsmallsql.database.language.Language;","classSmallSQLExceptionextendsSQLException{","privatestaticfinallongserialVersionUID=-1683756623665114L;","privatebooleanisInit;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["writeLong(Double.doubleToLongBits(value));","doublereadDouble(){","returnDouble.longBitsToDouble(readLong());","voidwriteFloat(floatvalue){","writeInt(Float.floatToIntBits(value));","floatreadFloat(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.DAYOFMONTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfMonth();","break;","caseSQLTokenizer.DAYOFWEEK:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicvoidclose()throwsSQLException{","rollback();","database=null;","commitPages=null;","Database.closeConnection(this);","finalvoidtestClosedConnection()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returndatabase.getName()+\'/\'+name+TABLE_VIEW_EXTENTION;","staticStringcreateLobFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+LOB_EXTENTION;","staticStringcreateIdxFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+IDX_EXTENTION;","staticbooleanlike(Stringvalue,Stringpattern){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnDouble.parseDouble(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseMAX:","break;","caseCOUNT:","value=newMutableInteger(0);","dataType=SQLTokenizer.INT;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP);","StringgetString()throwsException{","if(isNull())returnnull;","returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP).toString();","intgetDataType(){","returnSQLTokenizer.TIMESTAMP;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.max(((MutableDouble)value).value,expr.getDouble());","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{SEQUENCE_HEX_INVALID,\"Invalidhexsequenceat{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Invalidhexsequenceatposition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Syntaxerroratoffset{0}on\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Syntaxerror,unexpectedendofSQLstring.\"},","{STXADD_ADDITIONAL_TOK,\"AdditionaltokenafterendofSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Identifierexpected.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["switch(paramCount){","case1:","returnnewExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","case2:","invalidParamCount=false;","expr=newExpressionFunctionIIF();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivatebooleanunique;","finalprivatechardigit;//unsignedshort","staticfinalprivateIndexNode[]EMPTY_NODES=newIndexNode[0];","privateIndexNode[]nodes=EMPTY_NODES;","privatechar[]remainderKey;","privateObjectvalue;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["break;","caseSQLTokenizer.NOW:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;","caseSQLTokenizer.YEAR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["getDatabase(con,catalog).dropView(tableName);","voiddropView(StringviewName)throwsException{","synchronized(tableViews){","Objectview=tableViews.remove(viewName);","if(view!=null&&!(viewinstanceofView))","throwSmallSQLException.create(Language.VIEWDROP_NOT_VIEW,viewName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["try{","MutableNumericobj=getValue(columnIndex).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal(scale);","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["continue;","}else","if(day\>=365){","year++;","continue;","break;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returngetBytes(findParameter(parameterName));","publicDategetDate(StringparameterName)throwsSQLException{","returngetDate(findParameter(parameterName));","publicTimegetTime(StringparameterName)throwsSQLException{","returngetTime(findParameter(parameterName));","publicTimestampgetTimestamp(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(wasNull)returnnull;","returnobj.toBigDecimal(scale);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;","if(lastRowOffset\>=0){","rowSource.setRowPosition(lastRowOffset);","}else{","rowSource.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["switch(operation){","caseADD:","MutableNumericnum=left.getNumeric();","num.add(right.getNumeric());","returnnum;","caseSUB:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.REAL:","page=add(page,rowOffset,floatToBinarySortOrder(expr.getFloat()),isLastValues,2);","break;","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","page=add(page,rowOffset,doubleToBinarySortOrder(expr.getDouble()),isLastValues,4);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["expr=newExpressionFunctionDayOfYear();","break;","caseSQLTokenizer.HOUR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionHour();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseGRE_EQU:returnleft.getInt()\>=right.getInt();","caseLESSER:returnleft.getInt()\<right.getInt();","caseLES_EQU:returnleft.getInt()\<=right.getInt();","caseUNEQUALS:returnleft.getInt()!=right.getInt();","caseBETWEEN:","int_left=left.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["cmd=parser.parse(con,sql);","if(maxRows!=0&&(cmd.getMaxRows()==-1||cmd.getMaxRows()\>maxRows))","cmd.setMaxRows(maxRows);","cmd.execute(con,this);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["updateLong(findColumn(columnName),x);","publicvoidupdateFloat(StringcolumnName,floatx)throwsSQLException{","updateFloat(findColumn(columnName),x);","publicvoidupdateDouble(StringcolumnName,doublex)throwsSQLException{","updateDouble(findColumn(columnName),x);","publicvoidupdateBigDecimal(StringcolumnName,BigDecimalx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["voidaddColumnExpression(Expressioncolumn)throwsSQLException{","if(columnExpressions.indexOf(column)\>=0){","throwSmallSQLException.create(Language.COL_DUPLICATE,column);","super.addColumnExpression(column);","voidaddValues(Expressionsvalues){","this.cmdSel=newCommandSelect(log,values);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?10000:0;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(con.getAutoCommit())con.commit();","publicintfindColumn(StringcolumnName)throwsSQLException{","Expressionscolumns=columnExpressions;","for(inti=0;i\<columns.size();i++){","if(columnName.equalsIgnoreCase(columns.get(i).getAlias()))","returni;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.INSERT:","caseSQLTokenizer.UPDATE:","caseSQLTokenizer.UNION:","caseSQLTokenizer.FROM:","caseSQLTokenizer.WHERE:","caseSQLTokenizer.GROUP:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:","Stringstr=obj.toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnum;","caseSUB:","MutableNumericnum=left.getNumeric();","num.sub(right.getNumeric());","returnnum;","caseMUL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["node.addRemainderKey(rowOffset,key,i);","returnnull;","returnnode.addRootValue(key,i);","}else","if(equals(node.getRemainderValue(),key,i)){","if(isLastValue){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["{FILE_TOOOLD,\"01000\"},","{FILE_CANT_DELETE,\"01000\"},","{ROW_0_ABSOLUTE,\"01000\"},","{ROW_NOCURRENT,\"01000\"},","{ROWS_WRONG_MAX,\"01000\"},","{ROW_LOCKED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["else","if(newValueinstanceofMoney)","this.dataType=SQLTokenizer.MONEY;","else","throwSmallSQLException.create(Language.PARAM_CLASS_UNKNOWN,newValue.getClass().getName());","finalvoidset(ExpressionValueval){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatelongfilePosUpdated;","privateinttype;","privateStoreImplupdatePointer;","privateStoreImpl(Tabletable,StorePagestorePage,inttype,longfilePos){","this.table=table;","this.storePage=storePage;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\>0)//castneededforCompiler1.5"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["}else{","if(node==null){","value=0;","wasWhiteSpace=false;","break;","c|=0x20;//caseinsensitive"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intstart=Math.min(Math.max(0,param2.getInt()-1),bytes.length);","intlength=Math.min(param3.getInt(),bytes.length);","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","buffer.write(bytes,0,start);","buffer.write(param4.getBytes());","if(length\<0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["StringcolumnName=columns.get(c);","Columncolumn=tab.findColumn(columnName);","Object[]row=newObject[8];","row[0]=Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE","row[1]=columnName;//COLUMN_NAME","finalintdataType=column.getDataType();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["classSQLToken{","intvalue;","intoffset;//thestartoffsetthetokenintheSQLstring","intlength;//thelengthofthetoken","Stringname;","SQLToken(intvalue,inttokenStart,inttokenEnd){"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["abstractStringgetString()throwsException;","abstractbyte[]getBytes()throwsException;","abstractintgetDataType();","finalintgetType(){returntype;}","StringgetTableName(){","returnnull;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["cmd.setSource(source);","returncmd;","staticfinalIntegergetInteger(intvalue){","if(value\>=-4&&value\<256){","returnintegerCache[value+4];","}else"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(generatedKeys==null)","throwSmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);","returngeneratedKeys;","finalpublicintexecuteUpdate(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);","returnexecuteUpdate(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.CREATE:","database.createTable(con,name,columns,indexes,foreignKeys);","break;","caseSQLTokenizer.ADD:","con=newSSConnection(con);","TableoldTable=(Table)database.getTableView(con,name);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["{INDEX_TOOMANY_EQUALS,\"01000\"},","{FILE_TOONEW,\"01000\"},","{FILE_TOOOLD,\"01000\"},","{FILE_CANT_DELETE,\"01000\"},","{ROW_0_ABSOLUTE,\"01000\"},","{ROW_NOCURRENT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;","finalintplaces=param2.getInt();","doublevalue=param1.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["insertStorePages=table.getInserts(con);","firstOwnInsert=0x4000000000000000L|insertStorePages.size();","maxFileOffset=table.raFile.size();","beforeFirst();","@Override","finalTableViewgetTableView(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["importjava.util.Map;","importjava.util.Calendar;","importjava.net.URL;","importsmallsql.database.language.Language;","publicclassSSResultSetimplementsResultSet{","SSResultSetMetaDatametaData=newSSResultSetMetaData();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintNUMERIC=333;","staticfinalintREAL=336;","staticfinalintFLOAT=337;","staticfinalintDOUBLE=338;","staticfinalintDATE=340;","staticfinalintTIME=341;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["booleanunique=buffer.get()!=0;","FileIndexNoderoot=FileIndexNode.loadRootNode(unique,raFile,raFile.position());","returnnewFileIndex(root,raFile);","voidsave()throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);","buffer.put(rootPage.getUnique()?(byte)1:(byte)0);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["System.arraycopy(puffer,0,temp,0,offset);","puffer=temp;","voidskip(intcount){","offset+=count;","intreadByte(){","returnpuffer[offset++];"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.BOOLEAN:","return1;","caseSQLTokenizer.TINYINT:","return3;","caseSQLTokenizer.SMALLINT:","return5;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicstaticfinalStringFILE_TOOOLD=\"SS-0491\";","publicstaticfinalStringFILE_CANT_DELETE=\"SS-0492\";","publicstaticfinalStringROW_0_ABSOLUTE=\"SS-0520\";","publicstaticfinalStringROW_NOCURRENT=\"SS-0521\";","publicstaticfinalStringROWS_WRONG_MAX=\"SS-0522\";","publicstaticfinalStringROW_LOCKED=\"SS-0523\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["formatNumber(details.year,4,buf);","buf.append(\'\');","formatHour12(details.hour,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privatefinalStringname;","finalprivateintconstraintType;//PRIMARY,UNIQUE,FOREIGIN,INDEX","finalprivateStringscolumns;","privateint[]matrix;","finalprivateExpressionsexpressions;","privateIndexindex;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["staticfinalintSIN=1020;","staticfinalintSQRT=1021;","staticfinalintTAN=1022;","staticfinalintTRUNCATE=1023;//lastnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","static{","addKeyWord(\"ABS\",ABS);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatestaticfinallongserialVersionUID=-1683756623665114L;","privatebooleanisInit;","privatestaticLanguagelanguage;","privateSmallSQLException(Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);","init();"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["finalclassSQLParser{","SSConnectioncon;","privatechar[]sql;","privateListtokens;","privateinttokenIdx;","Commandparse(SSConnectioncon,StringsqlString)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2long(readBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["DataSourcefromEntry=tables.get(t);","if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){","TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){","expr.setFrom(fromEntry,colIdx,table);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["case\'S\':","case\'X\':","case\'Z\':","c=\'2\';","break;","case\'D\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseSQLTokenizer.CURRENTDATE:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;","caseSQLTokenizer.CURTIME:","invalidParamCount=(paramCount!=0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Expressionparam1=params[1];","if(param0instanceofExpressionArithmetic&&param1instanceofExpressionArithmetic){","op=createJoinScrollIndex((ExpressionArithmetic)param0,leftEx,rightEx,operation);","if(op==0){","return0;","returncreateJoinScrollIndex((ExpressionArithmetic)param1,leftEx,rightEx,operation);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(isNull())returnnull;","Stringinput=param1.getString();","returngetString(input);","staticStringgetString(Stringinput){","char[]output=newchar[4];","intidx=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(long)getDoubleImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatestaticfinalint[]MISSING_DATATYPE={SQLTokenizer.BIT,SQLTokenizer.BOOLEAN,SQLTokenizer.BINARY,SQLTokenizer.VARBINARY,SQLTokenizer.RAW,SQLTokenizer.LONGVARBINARY,SQLTokenizer.BLOB,SQLTokenizer.TINYINT,SQLTokenizer.SMALLINT,SQLTokenizer.INT,SQLTokenizer.COUNTER,SQLTokenizer.BIGINT,SQLTokenizer.SMALLMONEY,SQLTokenizer.MONEY,SQLTokenizer.DECIMAL,SQLTokenizer.NUMERIC,SQLTokenizer.REAL,SQLTokenizer.FLOAT,SQLTokenizer.DOUBLE,SQLTokenizer.DATE,SQLTokenizer.TIME,SQLTokenizer.TIMESTAMP,SQLTokenizer.SMALLDATETIME,SQLTokenizer.CHAR,SQLTokenizer.NCHAR,SQLTokenizer.VARCHAR,SQLTokenizer.NVARCHAR,SQLTokenizer.LONG,SQLTokenizer.LONGNVARCHAR,SQLTokenizer.LONGVARCHAR,SQLTokenizer.CLOB,SQLTokenizer.NCLOB,SQLTokenizer.UNIQUEIDENTIFIER,SQLTokenizer.JAVA_OBJECT,SQLTokenizer.SYSNAME};","privatestaticfinalint[]MISSING_SQL_DATATYPE={SQLTokenizer.SQL_BIGINT,SQLTokenizer.SQL_BINARY,SQLTokenizer.SQL_BIT,SQLTokenizer.SQL_CHAR,SQLTokenizer.SQL_DATE,SQLTokenizer.SQL_DECIMAL,SQLTokenizer.SQL_DOUBLE,SQLTokenizer.SQL_FLOAT,SQLTokenizer.SQL_INTEGER,SQLTokenizer.SQL_LONGVARBINARY,SQLTokenizer.SQL_LONGVARCHAR,SQLTokenizer.SQL_REAL,SQLTokenizer.SQL_SMALLINT,SQLTokenizer.SQL_TIME,SQLTokenizer.SQL_TIMESTAMP,SQLTokenizer.SQL_TINYINT,SQLTokenizer.SQL_VARBINARY,SQLTokenizer.SQL_VARCHAR};","privatestaticfinalint[]MISSING_INTO={SQLTokenizer.INTO};","privatestaticfinalint[]MISSING_BETWEEN_IN={SQLTokenizer.BETWEEN,SQLTokenizer.IN};","privatestaticfinalint[]MISSING_NOT_NULL={SQLTokenizer.NOT,SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_NULL={SQLTokenizer.NULL};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importsmallsql.database.language.Language;","publicclassSSResultSetMetaDataimplementsResultSetMetaData{","Expressionscolumns;","publicintgetColumnCount()throwsSQLException{","returncolumns.size();","publicbooleanisAutoIncrement(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalbooleanisBeforeFirst(){","returnrow==0;","finalbooleanisFirst(){","returnrow==1&&isCurrentRow;","finalbooleanisLast()throwsException{","if(!isCurrentRow)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getBoolean();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(Expressionexpr){","if(size\>=data.length){","resize(size\<\<1);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["ExpressionValuevalue=values[metaData.getColumnIdx(columnIndex)];","if(!value.isEmpty()||isInsertRow){","returnvalue;","returnmetaData.getColumnExpression(columnIndex);","finalprivateExpressionValuegetUpdateValue(intcolumnIndex)throwsSQLException{","if(values==null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privatefinalvoidsetSqlStates(){","Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<SQL_STATES.length;i++){","Stringkey=SQL_STATES[i][0];","if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["this.log=log;","this.columnExpressions=columnExpressions;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{","columnExpressions.add(column);","voidaddParameter(ExpressionValueparam){","params.add(param);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseSQLTokenizer.LIKE:returnLIKE;","caseSQLTokenizer.IN:returnIN;","caseSQLTokenizer.IS:returnISNULL;","caseSQLTokenizer.OR:returnOR;","caseSQLTokenizer.AND:returnAND;","caseSQLTokenizer.NOT:returnNOT;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["col.setPrecision(18);//defaultPrecisionfordecimalandnumeric","previousToken();","break;","col.setDataType(dataType);","returncol;","privateCommandCreateViewcreateView()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["signum=-signum;","longcarryover=0;","for(inti=value.length-1;i\>=0;i--){","longv=(value[i]&0xFFFFFFFFL)*factor+carryover;","value[i]=(int)v;","carryover=v\>\>32;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returngetTimestamp(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewTimestamp(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["params[p].optimize();","publicbooleanequals(Objectexpr){","if(!(exprinstanceofExpression))returnfalse;","if(((Expression)expr).type==type){","Expression[]p1=((Expression)expr).params;","Expression[]p2=params;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","isOuterValid=false;","right.nullRow();","returntrue;","}elsefullRightRowCounter++;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["publicbooleangetAutoCommit(){","returnautoCommit;","voidadd(TransactionStepstorePage)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){","commitPages.add(storePage);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnbuffer.toByteArray();","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intstart=Math.min(Math.max(0,param2.getInt()-1),str.length());","intlength=Math.min(param3.getInt(),str.length());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnMoney.parseMoney(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{GROUP_AGGR_INVALID,\"AggregatfunktionsindnichterlaubtimGROUPBYKlausel:({0}).\"},","{GROUP_AGGR_NOTPART,\"DerAusdruck\'\'{0}\'\'istnichtTeileinerAggregatfunktionoderGROUPBYKlausel.\"},","{ORDERBY_INTERNAL,\"InternerErrormitORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DieSELECTTeiledesUNIONhabeneineunterschiedlicheSpaltenanzahl:{0}und{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'existiertbereits.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'existiertnicht.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseExpressionArithmetic.EQUALS:","returnnextEquals();","default:","thrownewError(\"Compareoperationnotsupported:\"+compare);","privatebooleannextEquals()throwsException{","if(rowList!=null){"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["voidload(StoreImplinput)throwsSQLException{","intlength=input.readInt();","remainderKey=(length\>0)?input.readChars(length):null;","intvalueType=input.readByte();","switch(valueType){","case0:"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["addKeyWord(\"NVARCHAR\",NVARCHAR);","addKeyWord(\"SYSNAME\",SYSNAME);","addKeyWord(\"TEXT\",LONGVARCHAR);","addKeyWord(\"LONGVARCHAR\",LONGVARCHAR);","addKeyWord(\"NTEXT\",LONGNVARCHAR);","addKeyWord(\"LONGNVARCHAR\",LONGNVARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"SERIALIZABLE\",SERIALIZABLE);","addKeyWord(\"CONSTRAINT\",CONSTRAINT);","addKeyWord(\"PRIMARY\",PRIMARY);","addKeyWord(\"FOREIGN\",FOREIGN);","addKeyWord(\"KEY\",KEY);","addKeyWord(\"UNIQUE\",UNIQUE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticfinalintORDER=215;","staticfinalintASC=216;","staticfinalintDESC=217;","staticfinalintVALUES=218;","staticfinalintAS=219;","staticfinalintDEFAULT=220;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","classMemoryStream{","privatebyte[]puffer;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnFloat.parseFloat(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatebooleanwasNull;","SSCallableStatement(SSConnectioncon,Stringsql)throwsSQLException{","super(con,sql);","SSCallableStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,sql,rsType,rsConcurrency);","privateExpressiongetValue(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(filePos\>=0x4000000000000000L){","filePos++;","if((filePos&0x3FFFFFFFFFFFFFFFL)\>=insertStorePages.size()){","filePos=-1;","noRow();","}else"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.BETWEEN:returnBETWEEN;","caseSQLTokenizer.LIKE:returnLIKE;","caseSQLTokenizer.IN:returnIN;","caseSQLTokenizer.IS:returnISNULL;","caseSQLTokenizer.OR:returnOR;","caseSQLTokenizer.AND:returnAND;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["offset=getPointer();","firstNode3=firstNode2;","firstNode2=firstNode1;","firstNode1=firstNode;","firstNode=true;","break;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.DOUBLE:","returnString.valueOf(readDouble());","caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong()).toString();","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt()).toString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(page==null)","returnnull;","if(i+1==count)","returnpage.getValue();","else","page=(IndexNode)page.getValue();"]": ["|project://smallsql/src/smallsql/database/Index.java|","|project://smallsql/src/smallsql/database/Index.java|"],
"["{COL_MISSING,\"01000\"},","{COL_VAL_UNMATCH,\"01000\"},","{COL_INVALID_SIZE,\"01000\"},","{COL_WRONG_PREFIX,\"01000\"},","{COL_READONLY,\"01000\"},","{COL_INVALID_NAME,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returngetDriverVersion();","publicStringgetDriverName(){","return\"SmallSQLDriver\";","publicStringgetDriverVersion(){","returngetDriverMajorVersion()+\".\"+SSDriver.drv.getMinorVersion();","publicintgetDriverMajorVersion(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["buf.append(\'0\');","}else{","if(value.length==1&&(value[0]\>0)){","buf.append(Integer.toString(value[0]));","}else","if(value.length==1){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.AND:","caseSQLTokenizer.BIT_AND:","caseSQLTokenizer.BIT_OR:","caseSQLTokenizer.BIT_XOR:","rightExpr=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,operation);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.COMMA:","continue;","default:","if(isKeyword(token)){","previousToken();","returnlist;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');","formatHour12(details.hour,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["}catch(NumberFormatExceptione){/*ignoreitifitnotanumber*/}","return\"true\".equalsIgnoreCase(val)||\"yes\".equalsIgnoreCase(val)||\"t\".equalsIgnoreCase(val);","staticlongdoubleToMoney(doublevalue){","if(value\<0)","return(long)(value*10000-0.5);","return(long)(value*10000+0.5);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returncolumnExpressions.get(colIdx).getObject();","StringgetString(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBytes();","intgetDataType(intcolIdx){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["ByteArrayOutputStreambuffer=newByteArrayOutputStream();","intidx1=0;","intidx2=Utils.indexOf(str2,str1,idx1);","while(idx2\>0){","buffer.write(str1,idx1,idx2-idx1);","buffer.write(str3);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["caseSQLTokenizer.REAL:","writeFloat(expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","writeDouble(expr.getDouble());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(isNull())returnnull;","returnUtils.getInteger(getInt());","StringgetString()throwsException{","if(isNull())returnnull;","returnString.valueOf(getInt());","intgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalbooleanfirst(){","rowIdx=0;","returnmove();","finalbooleanprevious(){","if(rowIdx--\<0)rowIdx=-1;","returnmove();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["continue;","default:","thrownewError();","privateExpressionsexpressionTokenList(Commandcmd,intlistType)throwsSQLException{","Expressionslist=newExpressions();","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["page.freeLock();","publicvoidrollback()throwsSQLException{","log.println(\"Rollback\");","testClosedConnection();","synchronized(getMonitor()){","intcount=commitPages.size();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["Entrynext=e.next;","e.next=null;","inti=(int)(e.key%newCapacity);","if(newTable[i]==null){","newTable[i]=e;","}else{"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseSQLTokenizer.CHAR:","return((String)value).length();","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","return((byte[])value).length;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{ORDERBY_INTERNAL,\"InternerErrormitORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DieSELECTTeiledesUNIONhabeneineunterschiedlicheSpaltenanzahl:{0}und{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'existiertbereits.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'existiertnicht.\"},","{INDEX_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeingÃ¼ltigerIndexspeicher.\"},","{INDEX_CORRUPT,\"ErrorbeimLadendesIndex.DieIndexDateiistbeschÃ¤digt.({0}).\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnmoveToValidRow();","finalprivatevoidsetNextFilePos(){","if(filePos\<0)return;//endofrows","if(store==Store.NOROW)","filePos=table.getFirstPage();//canpointattheendoffile","else"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseLESSER:returnleft.getFloat()\<right.getFloat();","caseLES_EQU:returnleft.getFloat()\<=right.getFloat();","caseUNEQUALS:returnleft.getFloat()!=right.getFloat();","caseBETWEEN:","float_left=left.getFloat();","return_left\>=right.getFloat()&&right2.getFloat()\>=_left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["switch(operation){","caseADD:returnleft.getFloat()+right.getFloat();","caseSUB:returnleft.getFloat()-right.getFloat();","caseMUL:returnleft.getFloat()*right.getFloat();","caseDIV:returnleft.getFloat()/right.getFloat();","caseNEGATIVE:return-left.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case104://germandd.mm.yyyy","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicbooleansupportsSubqueriesInComparisons(){","returntrue;","publicbooleansupportsSubqueriesInExists(){","returntrue;","publicbooleansupportsSubqueriesInIns(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnreadLongString().getBytes();","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnreadLongBinary();","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["writeString(column.getName());","writeShort(column.getDataType());","writeInt(column.getPrecision());","writeByte(column.getScale());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","Stringdef=column.getDefaultDefinition();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","returnInteger.MAX_VALUE;","caseSQLTokenizer.NUMERIC:","returnprecision+(scale\>0?2:1);","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returngetString(lObj.toString(),rObj.toString());","caseSQLTokenizer.LONGVARBINARY:","returngetBytes();","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.DOUBLE:","returnreadDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/10000.0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000.0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while((l=scroll.getRowOffset(true))\>=0){","System.out.println(l);","System.out.println(\"============================\");","privatefinalFileChannelraFile;","FileIndex(booleanunique,FileChannelraFile){","this(newFileIndexNode(unique,(char)-1,raFile),raFile);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["rowSource.execute();","Indexindex=newIndex(false);","lastRowOffset=-1;","while(rowSource.next()){","lastRowOffset=rowSource.getRowPosition();","index.addValues(lastRowOffset,orderBy);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["publicInputStreamgetBinaryStream(intcolumnIndex)throwsSQLException{","returnnewByteArrayInputStream(getBytes(columnIndex));","publicStringgetString(StringcolumnName)throwsSQLException{","returngetString(findColumn(columnName));","publicbooleangetBoolean(StringcolumnName)throwsSQLException{","returngetBoolean(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["MutableNumericnumeric=expr.getNumeric();","numeric.setScale(column.getScale());","writeNumeric(numeric);","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.util.Iterator;","importjava.util.List;","importsmallsql.database.language.Language;","classTableextendsTableView{","privatestaticfinalintINDEX=1;","finalDatabasedatabase;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["token=nextToken();","intdisplaySize;","if(token==null||token.value!=SQLTokenizer.PARENTHESIS_L){","displaySize=30;","previousToken();","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnaddRoot();","finalIndexNodeaddRootValue(longremainderValue,intdigitCount)throwsSQLException{","saveRemainderValue(remainderValue,digitCount);","returnaddRoot();","privatefinalvoidmoveRemainderValue()throwsSQLException{","ObjectrowOffset=value;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().intValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalExpressionsgetExpressionNameFromTree(Expressiontree){","Expressionslist=newExpressions();","getExpressionNameFromTree(list,tree);","returnlist;","privatestaticfinalvoidgetExpressionNameFromTree(Expressionslist,Expressiontree){","if(tree.getType()==Expression.NAME){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{STXADD_IDENT_WRONG,\"UngÃ¼ltigerBezeichner\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"UngÃ¼ltigerOperatorMinusfÃ¼rDatentypVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"UnbekannteFunktion.\"},","{STXADD_PARAM_INVALID_COUNT,\"UngÃ¼ltigeParamterAnzahl.\"},","{STXADD_JOIN_INVALID,\"UngÃ¼ltigeJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnerwartetschlieÃŸendeKlammerinFROMKlausel.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["break;","caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:","store.page=newbyte[DEFAULT_PAGE_SIZE];","break;","caseSQLTokenizer.SELECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfilePos+nextPageOffset;","longwriteFinsh(SSConnectioncon)throwsSQLException{","switch(type){","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return1;","caseSQLTokenizer.TINYINT:","return3;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["packagesmallsql.database;","importjava.io.ByteArrayOutputStream;","publicclassExpressionFunctionRepeatextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.REPEAT;","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["returnvalue;","StringgetString(){","Objectobj=getObject();","if(obj==null)returnnull;","if(dataType==SQLTokenizer.BIT){","return(obj==Boolean.TRUE)?\"1\":\"0\";"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["formatMillis(details.millis,buf);","returnbuf.toString();","publicbooleanequals(Objectobj){","if(!(objinstanceofDateTime))returnfalse;","DateTimevalue=(DateTime)obj;","returnvalue.time==time&&value.dataType==dataType;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["newParams[1]=params[1];","newParams[2]=params[0];","params=newParams;","paramCount=3;","break;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["type=SQLTokenizer.TIME;","else","type=SQLTokenizer.TIMESTAMP;","returnnewDateTime(parse(date),type);","staticDateTimevalueOf(java.sql.Datedate){","if(date==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(token!=null&&token.value==SQLTokenizer.POINT){","catalog=name;","name=nextIdentifier();","token=nextToken();","TableViewtableView=Database.getTableView(con,catalog,name);","TableViewResulttable=TableViewResult.createResult(tableView);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetColumnExpression(column).getScale();","publicStringgetTableName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getTableName();","publicStringgetCatalogName(intcolumn)throwsSQLException{","returnnull;","publicintgetColumnType(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["if(operation==0){","operation=op;","if(operation!=op){","return0;","if(operation==ExpressionArithmetic.EQUALS){","Expressionparam0=params[0];"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["prev=node;","node=node.nextEntry;","wasNextEntry=true;","if(node==null){","node=newSearchNode();","node.letter=c;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case105://italianodd-mm-yyyy","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.CLOB:","page=find(page,stringToBinarySortOrder(expr.getString(),false),nodeList);","break;","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:","page=find(page,stringToBinarySortOrder(expr.getString(),true),nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["booleaninit(SSConnectioncon)throwsException{","booleanresult=false;","intcolCount=-1;","for(inti=0;i\<dataSources.size();i++){","DataSourceds=dataSources.get(i);","result|=ds.init(con);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["}else{","quoteBuffer.append(c);","wasWhiteSpace=false;","break;","if(comment==MULTI_COMMENT){","throwSmallSQLException.create(Language.STXADD_COMMENT_OPEN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return\"\\\\\";","publicStringgetExtraNameCharacters(){","return\"#$Ã€Ã\ufffdÃ‚ÃƒÃ„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹ÃŒÃ\ufffdÃŽÃ\ufffdÃ\ufffdÃ‘Ã’Ã“Ã”Ã•Ã–Ã˜Ã™ÃšÃ›ÃœÃ\ufffdÃžÃŸÃ\u00a0Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿\";","publicbooleansupportsAlterTableWithAddColumn(){","thrownewjava.lang.UnsupportedOperationException(\"MethodsupportsAlterTableWithDropColumn()notyetimplemented.\");","publicbooleansupportsColumnAliasing(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["System.arraycopy(bytes,start,b,0,b.length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intstrLen=str.length();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["staticfinalintOUTER=225;","staticfinalintFULL=226;","staticfinalintCROSS=227;","staticfinalintUSE=228;","staticfinalintTOP=229;","staticfinalintADD=230;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["System.arraycopy(data,idx,data,idx+1,(size++)-idx);","data[idx]=expr;","finalvoidaddAll(Expressionscols){","intcount=cols.size();","if(size+count\>=data.length){","resize(size+count);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["staticfinalintUNION=260;","staticfinalintALL=261;","staticfinalintDISTINCT=262;","staticfinalintCASE=263;","staticfinalintWHEN=264;","staticfinalintTHEN=265;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intnewSize=offset+2;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","intreadShort(){","return(page[offset++]\<\<8)|(page[offset++]&0xFF);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.YEAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionYear();","break;","caseSQLTokenizer.IIF:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(isNull())returnnull;","returnnewMutableNumeric(getString().trim());","finalObjectgetObject()throwsException{","if(SSResultSetMetaData.isBinaryDataType(param1.getDataType()))","returngetBytes();","returngetString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["data[size++]=(byte)0;","returnsize-2;","finalprivatevoidinsertNodeLastLevel(intoctet)throwsSQLException{","intoldOffset=offset;","if(data.length\<size+2)resize();","System.arraycopy(data,offset,data,offset+2,size-offset);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(Double.isInfinite(dValue)||Double.isNaN(dValue))","returnnull;","returnnewMutableNumeric(dValue);","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(((Money)obj).value,4);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["setValue(big.unscaledValue().toByteArray());","scale=big.scale();","signum=big.signum();","finalvoidmul(intfactor){","if(factor\<0){","factor=-factor;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["while(entry.next!=null)entry=entry.next;","entry.next=e;","e=next;","}while(e!=null);","finalTableStorePageremove(longkey){","inti=(int)(key%table.length);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returntrue;","returnfalse;","publicbooleansupportsResultSetConcurrency(inttype,intconcurrency){","if(type\>=ResultSet.TYPE_FORWARD_ONLY&&type\<=ResultSet.TYPE_SCROLL_SENSITIVE&&","concurrency\>=ResultSet.CONCUR_READ_ONLY&&concurrency\<=ResultSet.CONCUR_UPDATABLE)","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["puffer[offset++]=(byte)(value\>\>56);","puffer[offset++]=(byte)(value\>\>48);","puffer[offset++]=(byte)(value\>\>40);","puffer[offset++]=(byte)(value\>\>32);","puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returntrue;","publicintgetMaxBinaryLiteralLength(){","return0;","publicintgetMaxCharLiteralLength(){","return0;","publicintgetMaxColumnNameLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalbooleanisUnique(){","returnconstraintType==SQLTokenizer.PRIMARY||constraintType==SQLTokenizer.UNIQUE;","finalStringsgetColumns(){","returncolumns;","finalintmatchFactor(Stringsstrings){","if(strings.size()\<columns.size())"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returnreadShort()*10000L;","caseSQLTokenizer.INT:","returnreadInt()*10000L;","caseSQLTokenizer.BIGINT:","returnreadLong()*10000L;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["firstNode2=firstNode3;","removeNode();","shift++;","return;","offset3=offset2;","offset2=offset1;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnisSignedDataType(dataType)||dataType==SQLTokenizer.TINYINT;","staticbooleanisBinaryDataType(intdataType){","switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicshortgetShort(StringcolumnName)throwsSQLException{","returngetShort(findColumn(columnName));","publicintgetInt(StringcolumnName)throwsSQLException{","returngetInt(findColumn(columnName));","publiclonggetLong(StringcolumnName)throwsSQLException{","returngetLong(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["}else{","rowSource.beforeFirst();","if(rowSource.next()){","row++;","lastRowOffset=rowSource.getRowPosition();","insertedRows.add(lastRowOffset);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["importjava.net.URL;","classSSPreparedStatementextendsSSStatementimplementsPreparedStatement{","privateArrayListbatches;","privatefinalinttop;//valueofanoptionaltopexpression","SSPreparedStatement(SSConnectioncon,Stringsql)throwsSQLException{","this(con,sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["}else{","throwSmallSQLException.create(Language.CUSTOM_MESSAGE,\"Missingequalinproperty:\"+keyValue);","returnprops;","publicbooleanacceptsURL(Stringurl){","returnurl.startsWith(URL_PREFIX);","publicDriverPropertyInfo[]getPropertyInfo(Stringurl,Propertiesinfo)"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","if(defaultValue==-1)","return0xFFFF;","returndefaultValue;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returngetString();","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["page[7]=(byte)(value);","returnnewStorePage(page,8,raFile,filePos);","voidcreateNextValue(SSConnectioncon)throwsSQLException{","value++;","con.add(createStorePage());","voidsetNextValue(Expressionexpr)throwsException{"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["intstart=Math.min(Math.max(0,param2.getInt()-1),byteLen);","intlength=param3.getInt();","if(length\<0)","throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));","if(start==0&&byteLen==length)returnbytes;","if(byteLen\>length+start){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["{INDEX_EXISTS,\"L\'\'indice\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{INDEX_MISSING,\"L\'\'indice\'\'{0}\'\'nonesiste.\"},","{INDEX_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoperunindice.\"},","{INDEX_CORRUPT,\"Erroreduranteilcaricamentodell\'\'indice.Filedell\'\'indicecorrotto:\'\'{0}\'\'.\"},","{INDEX_TOOMANY_EQUALS,\"Troppevociugualinell\'\'indice.\"},","{FILE_TOONEW,\"Laversione({0})delfile\'\'{1}\'\'Ã¨tropporecenteperquestoruntime.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["offset2=offset1;","offset1=offset-2;","offset=getPointer();","firstNode3=firstNode2;","firstNode2=firstNode1;","firstNode1=firstNode;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","writeString(expr.getString(),column.getDisplaySize(),true);","break;","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=1;i\<1000;i++){","if(getOperationFromToken(i)==operation){","token=i;","break;","if(operation==NEGATIVE)token=SQLTokenizer.MINUS;","if(operation==ISNOTNULL)token=SQLTokenizer.IS;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintLCASE=1108;","staticfinalintLEFT=1109;","staticfinalintLENGTH=1110;","staticfinalintLOCATE=1111;","staticfinalintLTRIM=1112;","staticfinalintOCTETLEN=1113;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["table=(Table)tableView;","tableTimestamp=table.getTimestamp();","cmdSel.compile(con);","intcount=table.columns.size();","matrix=newint[count];","if(noColumns){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["for(intk=0;k\<expParams.length;k++){","Expressionparam=expParams[k];","intparamType=param.getType();","isAggregateFunction=isAggregateFunction||paramType\>=Expression.GROUP_BEGIN;","if(paramType==Expression.NAME)","compileLinkExpressionName((ExpressionName)param);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnreadBinary();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.columnExpressions=view.commandSelect.columnExpressions;","this.commandSelect=view.commandSelect;","ViewResult(SSConnectioncon,CommandSelectcommandSelect)throwsSQLException{","try{","this.view=newView(con,commandSelect);","this.columnExpressions=commandSelect.columnExpressions;"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returnnewTable(database,con,name,raFile,raFile.position(),version);","returnnewView(con,name,raFile,raFile.position());","}catch(Throwablee){","if(raFile!=null)","try{","raFile.close();"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["if(day\>=365){","year++;","continue;","break;","}while(true);","if(isLeap&&day==59){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["cmd.isolationLevel=Connection.TRANSACTION_READ_COMMITTED;","break;","caseSQLTokenizer.UNCOMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_UNCOMMITTED;","break;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{UNSUPPORTED_DATATYPE_OPER,\"Unsupporteddatatype\'\'{0}\'\'foroperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Unsupporteddatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Unsupportedconversiontodatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"UnsupportedtypeforCONVERTfunction:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"Unsupporteddatatype\'\'{0}\'\'forSUMfunction.\"},","{UNSUPPORTED_TYPE_MAX,\"Unsupporteddatatype\'\'{0}\'\'forMAXfunction.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["setValue(complement);","privatevoidsetValue(byte[]complement){","intlength=complement.length;","if(length==0){","value=EMPTY_INTS;","signum=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["Databasedatabase;","if(catalog==null){","database=con.getDatabase(true);","if(database!=null)","catalog=database.getName();","}else{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*12+details2.month)-(details1.year*12+details1.month);","caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["voidafterLast(){","isAfterLast=true;","noRow();","intgetRow(){","returnrow;","finallonggetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returntrue;","publicbooleansupportsPositionedDelete(){","returntrue;","publicbooleansupportsPositionedUpdate(){","returntrue;","publicbooleansupportsSelectForUpdate(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["@Override","finalintgetRow(){","returnrow;","@Override","finallonggetRowPosition(){","returnfilePos;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(wasNull)returnnull;","returnnewDate(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(StringcolumnName,Calendarcal)throwsSQLException{","returngetDate(findColumn(columnName),cal);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnnull;","page=findNull(page);","}else{","switch(expr.getDataType()){","caseSQLTokenizer.REAL:","page=find(page,floatToBinarySortOrder(expr.getFloat()),2,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["for(inti=length;i\<lengthColumn;i++){","page[offset++]=\'\';","page[offset++]=0;","StringreadString(){","intlength=readShort()&0xFFFF;","returnnewString(readChars(length));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleanisTypeView=types==null;","for(inti=0;types!=null&&i\<types.length;i++){","if(\"TABLE\".equalsIgnoreCase(types[i]))isTypeTable=true;","if(\"VIEW\".equalsIgnoreCase(types[i]))isTypeView=true;","if(database!=null){","Stringstables=database.getTables(tableNamePattern);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnnewDateTime(parse(date),SQLTokenizer.TIME);","staticDateTimevalueOf(java.sql.Timestampdate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIMESTAMP);","staticDateTimevalueOf(Stringdate,intdataType)throwsSQLException{","if(date==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intday;","inthour;","intminute;","intsecond;","intmillis;","Details(longtime){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnUtils.bytes2int(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","return(int)readTimestamp();","caseSQLTokenizer.TIME:","return(int)readTime();","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(++i==length){","if(isLast){","node.addNode(digit,rowOffset);","returnnull;","returnnode.addRoot(digit);","node=node.addNode(digit);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["privatestaticfinalint[]MISSING_EXPRESSION={SQLTokenizer.VALUE};","privatestaticfinalint[]MISSING_IDENTIFIER={SQLTokenizer.IDENTIFIER};","privatestaticfinalint[]MISSING_BY={SQLTokenizer.BY};","privatestaticfinalint[]MISSING_PARENTHESIS_L={SQLTokenizer.PARENTHESIS_L};","privatestaticfinalint[]MISSING_PARENTHESIS_R={SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_DATATYPE={SQLTokenizer.BIT,SQLTokenizer.BOOLEAN,SQLTokenizer.BINARY,SQLTokenizer.VARBINARY,SQLTokenizer.RAW,SQLTokenizer.LONGVARBINARY,SQLTokenizer.BLOB,SQLTokenizer.TINYINT,SQLTokenizer.SMALLINT,SQLTokenizer.INT,SQLTokenizer.COUNTER,SQLTokenizer.BIGINT,SQLTokenizer.SMALLMONEY,SQLTokenizer.MONEY,SQLTokenizer.DECIMAL,SQLTokenizer.NUMERIC,SQLTokenizer.REAL,SQLTokenizer.FLOAT,SQLTokenizer.DOUBLE,SQLTokenizer.DATE,SQLTokenizer.TIME,SQLTokenizer.TIMESTAMP,SQLTokenizer.SMALLDATETIME,SQLTokenizer.CHAR,SQLTokenizer.NCHAR,SQLTokenizer.VARCHAR,SQLTokenizer.NVARCHAR,SQLTokenizer.LONG,SQLTokenizer.LONGNVARCHAR,SQLTokenizer.LONGVARCHAR,SQLTokenizer.CLOB,SQLTokenizer.NCLOB,SQLTokenizer.UNIQUEIDENTIFIER,SQLTokenizer.JAVA_OBJECT,SQLTokenizer.SYSNAME};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["page[offset++]=(byte)(value\>\>48);","page[offset++]=(byte)(value\>\>40);","page[offset++]=(byte)(value\>\>32);","page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseCOUNT:","if(!expr.isNull())((MutableInteger)value).value++;","break;","caseSUM:","if(isEmpty()){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicbooleangetBoolean(StringcolumnName)throwsSQLException{","returngetBoolean(findColumn(columnName));","publicbytegetByte(StringcolumnName)throwsSQLException{","returngetByte(findColumn(columnName));","publicshortgetShort(StringcolumnName)throwsSQLException{","returngetShort(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["con.log.println(sql);","SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);","top=cmd.getMaxRows();","publicResultSetexecuteQuery()throwsSQLException{","executeImp();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["addColumn(newColumnExpression(expressions.get(c)));","patchExpressions(cmd.columnExpressions);","if(having!=null)having=patchExpression(having);","patchExpressions(orderBy);","finalprivateintaddInternalExpressionFromGroupBy(Expressionexpr)throwsSQLException{","inttype=expr.getType();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["staticbyte[]getBytes(Objectobj,intdataType)throwsException{","if(obj==null)returnnull;","switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["setPreviousOffset(listEnum);","longresult=listEnum.resultStack[listEnum.stack];","while(true){","intnextEntry=(offset\<0)?-1:getUnsignedShort();","if(nextEntry\>=0){","result|=(((long)nextEntry)\<\<shift);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicclassExpressionFunctionUCaseextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.UCASE;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|"],
"["right.beforeFirst();","while(right.next()){","index.addValues(right.getRowPosition(),rightEx);","booleannext()throwsException{","switch(compare){","caseExpressionArithmetic.EQUALS:"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["cmd.setParamValue(parameterIndex,newDouble(x),SQLTokenizer.DOUBLE);","publicvoidsetBigDecimal(intparameterIndex,BigDecimalx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.DECIMAL);","publicvoidsetString(intparameterIndex,Stringx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleFloatFactor[scale]*signum;","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).floatValue();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnprevious();","booleanisLast()throwsException{","if(rowIdx+1!=rowList.size()){","returnfalse;","booleanisNext=next();","previous();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["StringsgetTables(StringtablePattern){","Stringslist=newStrings();","Filedirs[]=directory.listFiles();","if(dirs!=null)","if(tablePattern==null)tablePattern=\"%\";","tablePattern+=Utils.TABLE_VIEW_EXTENTION;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(param1.getDouble());","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["while(lock!=null){","if(lock.con!=con)returnnull;//thereisalreadyanylockfromanotherconnection,wecannotstartwrite","if(lock.lockType\<LOCK_WRITE){","lock.lockType=LOCK_WRITE;","returnlock;","prevLock=lock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["scroll.beforeFirst();","isAfterLast=false;","row=0;","booleanfirst()throwsException{","beforeFirst();","returnnext();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');","formatHour12(details.hour,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["row=0;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","finalvoidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnreadInt()!=0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().getSignum()!=0;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatestaticfinalintPAGE_MAGIC=0x12DD13DE;//areusedforrepairingatable","privatestaticfinalintPAGE_CONTROL_SIZE=28;","privatestaticfinalbyte[]page_control=newbyte[PAGE_CONTROL_SIZE];","privatestaticfinalByteBufferpageControlBuffer=ByteBuffer.wrap(page_control);","privateintstatus;//validvaluearefollow:","privatestaticfinalintNORMAL=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["raFile.close();","@Override","voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_VIEW);","buffer.putInt(TABLE_VIEW_VERSION);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["lock=lock.nextLock;","break;","caseLOCK_READ:","caseLOCK_WRITE:","LongpageKey=newLong(fileOffset);//TODOperformance","lock=(TableStorePage)locks.get(pageKey);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["return(fValue\<0)?newFloat(-fValue):para1;","caseSQLTokenizer.BIGINT:","longlValue=((Number)para1).longValue();","return(lValue\<0)?newLong(-lValue):para1;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["{VALUE_CANT_CONVERT,\"01000\"},","{BYTEARR_INVALID_SIZE,\"01000\"},","{LOB_DELETED,\"01000\"},","{PARAM_CLASS_UNKNOWN,\"01000\"},","{PARAM_EMPTY,\"01000\"},","{PARAM_IDX_OUT_RANGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["node.letter=c;","if(wasNextEntry)","prev.nextEntry=node;","elseprev.nextLetter=node;","wasNextEntry=false;","prev=node;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["synchronized(raFile){","if(filePos\>=raFile.size()-PAGE_CONTROL_SIZE){","returnnull;","raFile.position(filePos);","synchronized(page_control){","pageControlBuffer.position(0);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intnewSize=offset+2*length;","if(newSize\>page.length)resizePage(newSize);","for(inti=0;i\<length;i++){","charc=daten[i];","page[offset++]=(byte)(c);","page[offset++]=(byte)(c\>\>8);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatevoidcompileLinkExpressionName(ExpressionNameexpr)throwsException{","StringtableAlias=expr.getTableAlias();","if(tableAlias!=null){","intt=0;","for(;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["{DB_NOTCONNECTED,\"L\'\'utentenonÃ¨connessoaundatabase.\"},","{CONNECTION_CLOSED,\"LaconnessioneÃ¨giÃ\u00a0chiusa.\"},","{VIEW_INSERT,\"INSERTnonÃ¨supportatoperunaview.\"},","{VIEWDROP_NOT_VIEW,\"NonÃ¨possibileeffettuareDROPVIEWcon\'\'{0}\'\'perchÃ©nonÃ¨unaview.\"},","{VIEW_CANTDROP,\"NonsipuÃ²effettuaredropsullaview\'\'{0}\'\'.\"},","{RSET_NOT_PRODUCED,\"NessunResultSetÃ¨statoprodotto.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["intgetCurrentOffsetInPage(){","returnoffset;","voidsetCurrentOffsetInPage(intnewOffset){","this.offset=newOffset;","voidwriteByte(intvalue){","intnewSize=offset+1;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return8;","voidsetNewAutoIncrementValue(Expressionobj)throwsException{","if(identity){","counter.setNextValue(obj);","booleanisCaseSensitive(){","returncaseSensitive;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returncaseExpr(cmd);","caseSQLTokenizer.MINUS:","caseSQLTokenizer.PLUS:","do{","if(token.value==SQLTokenizer.MINUS)","isMinus=!isMinus;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicvoidsetDate(intparameterIndex,Datex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.DATE);","publicvoidsetTime(intparameterIndex,Timex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIME);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["bytes[offset++]=(byte)(value);","returnbytes;","publicBigDecimaltoBigDecimal(){","if(value==0)returnZERO;","returnnewBigDecimal(newBigInteger(toByteArray()),4);","publicObjectgetImmutableObject(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["returnrowSource(cmd,tables,SQLTokenizer.ESCAPE_R);","caseSQLTokenizer.SELECT:","ViewResultviewResult=newViewResult(con,select());","tables.add(viewResult);","returnviewResult;","Stringcatalog=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intstrLen=str.length();","intstart=Math.min(Math.max(0,param2.getInt()-1),strLen);","intlength=param3.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnUtils.string2boolean(readString());","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case3://britshdd/mm/yy","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["row++;","returnmoveToValidRow();","@Override","finalvoidafterLast(){","filePos=-1;","noRow();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returncolumns;","finalintmatchFactor(Stringsstrings){","if(strings.size()\<columns.size())","returnInteger.MAX_VALUE;//doesnotmap","nextColumn:","for(intc=0;c\<columns.size();c++){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returnusableLock;","lock=newTableStorePage(con,this,LOCK_NONE,page);","if(con.isolationLevel\>=Connection.TRANSACTION_REPEATABLE_READ||pageOperation==SQLTokenizer.UPDATE){","lock.lockType=pageOperation==SQLTokenizer.UPDATE?LOCK_WRITE:LOCK_READ;","if(prevLock!=null){","prevLock.nextLock=lock.nextLock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["save(store);","fileOffset=store.writeFinsh(null);","@Override","voidsaveRef(StoreImploutput)throwsSQLException{","if(fileOffset\<0){","save();"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["staticfinalintEQUALS=51;//=","staticfinalintEQUALS_NULL=52;//likeEqualsbut(null=null)--\>true","staticfinalintGREATER=53;//\>","staticfinalintGRE_EQU=54;//\>=","staticfinalintLESSER=55;//\<","staticfinalintLES_EQU=56;//\<="]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisNull=expr.isNull();","if(isNull&&!column.isNullable()){","throwSmallSQLException.create(Language.VALUE_NULL_INVALID,column.getName());","intdataType=column.getDataType();","if(isNull){","writeBoolean(true);//true-isnull"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["type=SQLTokenizer.TIMESTAMP;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","returnnewDateTime(param1.getLong(),type).toString(param2.getInt());","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["filePos=-1;","noRow();","returnfalse;","finalprivatebooleanmoveToValidRow()throwsException{","while(filePos\>=0){","if(moveToRow())"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["finallongget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(longvalue){","if(size\>=data.length){"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["booleanisValidPage(){","returnfalse;","abstractvoidscanObjectOffsets(int[]offsets,intdataTypes[]);","abstractintgetUsedSize();","abstractlonggetNextPagePos();","abstractvoiddeleteRow(SSConnectioncon)throwsSQLException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","value=newDateTime(expr.getLong(),dataType);","break;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["}else{","previousToken();","Expressionslist=expressionParenthesisList(cmd);","for(inti=0;i\<list.size();i++){","cmd.addColumnExpression(list.get(i));","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncommitPages.size();//thecallisatomic,thatitneednotbesynchronized","publicSavepointsetSavepoint()throwsSQLException{","returnnewSSSavepoint(getSavepoint(),null,transactionTime);","publicSavepointsetSavepoint(Stringname)throwsSQLException{","returnnewSSSavepoint(getSavepoint(),name,transactionTime);","publicvoidrollback(Savepointsavepoint)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["intlength=daten.length;","intnewSize=offset+2*length;","if(newSize\>page.length)resizePage(newSize);","for(inti=0;i\<length;i++){","charc=daten[i];","page[offset++]=(byte)(c);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return(int)(value^(value\>\>\>32));","publiclongunscaledValue(){","returnvalue;","publicstaticlongparseMoney(Stringstr){","returnUtils.doubleToMoney(Double.parseDouble(str));","privatebyte[]toByteArray(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["ObjectlObj=left.getObject();","ObjectrObj=right.getObject();","if(lObjinstanceofNumber&&rObjinstanceofNumber)","returnnewDouble(getDoubleImpl(((Number)lObj).doubleValue(),((Number)rObj).doubleValue()));","else","returngetString(lObj.toString(),rObj.toString());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privatestaticfinalintDEFAULT_PAGE_SIZE=8192;//8Kb","privatestaticfinalintPAGE_MAGIC=0x12DD13DE;//areusedforrepairingatable","privatestaticfinalintPAGE_CONTROL_SIZE=28;","privatestaticfinalbyte[]page_control=newbyte[PAGE_CONTROL_SIZE];","privatestaticfinalByteBufferpageControlBuffer=ByteBuffer.wrap(page_control);","privateintstatus;//validvaluearefollow:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ExpressiongetDefaultValue(SSConnectioncon)throwsSQLException{","if(identity)","counter.createNextValue(con);","returndefaultValue;","StringgetDefaultDefinition(){","returndefaultDefinition;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["setScale(0);","setScale(oldScale);","privatevoidnegate(byte[]complement){","intlast=complement.length-1;","for(inti=0;i\<=last;i++){","complement[i]=(byte)((i==last)?-complement[i]:~complement[i]);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{ORDERBY_INTERNAL,\"01000\"},","{UNION_DIFFERENT_COLS,\"01000\"},","{INDEX_EXISTS,\"01000\"},","{INDEX_MISSING,\"01000\"},","{INDEX_FILE_INVALID,\"01000\"},","{INDEX_CORRUPT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnfrom.isBeforeFirst();","booleanisFirst()throwsSQLException{","returnfrom.isFirst();","booleanfirst()throwsException{","returnfrom.first();","booleanprevious()throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicRefgetRef(StringparameterName)throwsSQLException{","returngetRef(findParameter(parameterName));","publicBlobgetBlob(StringparameterName)throwsSQLException{","returngetBlob(findParameter(parameterName));","publicClobgetClob(StringparameterName)throwsSQLException{","returngetClob(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["privateString[]data;","Strings(){","data=newString[16];","finalintsize(){","returnsize;","finalStringget(intidx){"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl()*10000;","caseSQLTokenizer.BIGINT:","returngetLongImpl()*10000;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicbooleansupportsOpenCursorsAcrossRollback(){","returntrue;","publicbooleansupportsOpenStatementsAcrossCommit(){","returntrue;","publicbooleansupportsOpenStatementsAcrossRollback(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicvoidsetNull(StringparameterName,intsqlType)throwsSQLException{","setNull(findParameter(parameterName),sqlType);","publicvoidsetBoolean(StringparameterName,booleanx)throwsSQLException{","setBoolean(findParameter(parameterName),x);","publicvoidsetByte(StringparameterName,bytex)throwsSQLException{","setByte(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(dateinstanceofjava.sql.Date)","type=SQLTokenizer.DATE;","else","if(dateinstanceofjava.sql.Time)","type=SQLTokenizer.TIME;","else"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["columnExpressions.add(dest);","sources.add(source);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","intcount=columnExpressions.size();","columnExpressions.addAll(sources);","compile(con);"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["Stringdef=column.getDefaultDefinition();","writeBoolean(def==null);","if(def!=null)","writeString(column.getDefaultDefinition());","ColumnreadColumn(inttableFormatVersion)throwsException{","Columncolumn=newColumn();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this(newFileIndexNode(unique,(char)-1,raFile),raFile);","FileIndex(FileIndexNoderoot,FileChannelraFile){","super(root);","this.raFile=raFile;","staticFileIndexload(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["this.cmdSel=newCommandSelect(log,values);","voidaddValues(CommandSelectcmdSel){","this.cmdSel=cmdSel;","privatevoidcompile(SSConnectioncon)throwsException{","TableViewtableView=con.getDatabase(false).getTableView(con,name);","if(!(tableViewinstanceofTable))"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["internalExpressions.add(expr);","returninternalExpressions.size()-1;","finalprivateintaddInternalExpressionFromSelect(Expressionexpr)throwsSQLException{","inttype=expr.getType();","if(type==Expression.NAME){","intidx=internalExpressions.indexOf(expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnnull;","returnnode.addRootValue(key,i);","}else","if(equals(node.getRemainderValue(),key,i)){","if(isLast){","node.saveValue(rowOffset);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returngetTime(findColumn(columnName),cal);","publicTimestampgetTimestamp(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){","returngetTimestamp(columnIndex);","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(isNull())returnnull;","charchr=(char)param1.getInt();","returnString.valueOf(chr);","finalintgetDataType(){","returnSQLTokenizer.CHAR;","finalintgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|"],
"["previousToken();","returnname;","finalprivatebooleanisKeyword(SQLTokentoken){","if(token==null)returnfalse;","switch(token.value){","caseSQLTokenizer.SELECT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voiddrop(Databasedatabase)throwsException{","for(inti=0;i\<size;i++){","data[i].drop(database);","voidclose()throwsException{","for(inti=0;i\<size;i++){","data[i].close();"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["staticfinalintVALUE=0;","staticfinalintSTRING=3;","staticfinalintIDENTIFIER=4;","staticfinalintNUMBERVALUE=5;","static{","keywords.put(newInteger(VALUE),\"\<expression\>\");"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["puffer[offset++]=(byte)(value\>\>32);","puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteChars(char[]value){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["startOffset=offset;","correctPointers(pointer,oldOffset,diff,level+1);","offset=startOffset;","firstNode=false;","}else{","return;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["}while(true);","if(isLeap&&day==59){","month=1;","day=29;","}else{","for(intm=11;m\>=0;m--){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getLong(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2long(readLongBinary());","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returndatatype.getPrecision();","default:","returnsuper.getPrecision();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["value/=10;","privatefinalstaticvoidformatMillis(intmillis,StringBufferbuf){","buf.append(Utils.digits[(millis/100)%10]);","intvalue=millis%100;","if(value!=0){","buf.append(Utils.digits[value/10]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnfromEntry.getString(colIdx);","byte[]getBytes()throwsException{","returnfromEntry.getBytes(colIdx);","intgetDataType(){","switch(getType()){","caseNAME:"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["staticfinalintSYSNAME=357;","staticfinalintLONGVARCHAR=359;","staticfinalintLONGNVARCHAR=360;","staticfinalintLONG=361;","staticfinalintCLOB=362;","staticfinalintNCLOB=363;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateint[]matrix;//mappingofthecolumnsfromINSERTtothecolumnsintheTable;-1defaultValue","CommandInsert(Loggerlog,Stringname){","super(log);","this.name=name;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{","if(columnExpressions.indexOf(column)\>=0){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["privatefinalHashMapmap=newHashMap();","privateObjectgetUniqueKey(Stringname){","returnname.toUpperCase(Locale.US);//usethesamelocaleforall","TableViewget(Stringname){","return(TableView)map.get(getUniqueKey(name));","voidput(Stringname,TableViewtableView){"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["{DB_EXISTENT,\"DieDatenbank\'\'{0}\'\'existiertbereits.\"},","{DB_NONEXISTENT,\"DieDatenbank\'\'{0}\'\'existiertnicht.\"},","{DB_NOT_DIRECTORY,\"DasVerzeichnis\'\'{0}\'\'istkeineSmallSQLDatenbank.\"},","{DB_NOTCONNECTED,\"SiesindnichtmiteinerDatenbankverbunden.\"},","{CONNECTION_CLOSED,\"DieVerbindungistbereitsgeschlossen.\"},","{VIEW_INSERT,\"INSERTwirdnichtunterstÃ¼tztfÃ¼reineView.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["staticfinalintTRUE=505;","staticfinalintFALSE=506;","staticfinalintBETWEEN=507;","staticfinalintLIKE=508;","staticfinalintIN=509;","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(operation==NEGATIVE)","returnleft.getNumeric().getSignum()!=0;","intcomp=left.getNumeric().compareTo(right.getNumeric());","switch(operation){","caseIN:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importjava.util.ArrayList;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["exprCase.setEnd();","expr=exprCase;","break;","caseSQLTokenizer.IFNULL:","switch(paramCount){","case1:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog();","break;","caseSQLTokenizer.LOG10:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog10();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["SQLTokentoken;","Switch:while(true){","token=nextToken(MISSING_EXPRESSION);","switch(token.value){","caseSQLTokenizer.TOP:","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:","returngetNumeric().getSignum()!=0;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}else{","col=datatype(isEscape);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);","token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidwriteLongBinary(byte[]daten)throwsException{","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,daten.length+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(daten.length);","store.writeBytes(daten);","writeLong(store.writeFinsh(null));","byte[]readLongBinary()throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(idx1\>0){","StringdbPath=(idx2\>0)?url.substring(idx1+1,idx2):url.substring(idx1+1);","props.setProperty(\"dbpath\",dbPath);","if(idx2\>0){","StringpropsString=url.substring(idx2+1).replace(\'&\',\';\');","StringTokenizertok=newStringTokenizer(propsString,\";\");"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["throwSmallSQLException.createFromException(e);","FilegetFile(Databasedatabase){","returnnewFile(Utils.createTableViewFileName(database,name));","FileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["value=loadRef(input.readLong());","break;","default:","throwSmallSQLException.create(Language.INDEX_CORRUPT,String.valueOf(valueType));","nodes=newIndexNode[input.readShort()];","for(inti=0;i\<nodes.length;i++){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["return(float)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatefloatgetFloatImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getFloat()+right.getFloat();","caseSUB:returnleft.getFloat()-right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["data=input.readBytes(readSize);","finalvoidsave(StoreImploutput){","output.writeInt(size);","output.writeBytes(data,0,size);","finalvoidadd(longvalue)throwsSQLException{","offset=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["for(inti=0;i\<newRow.length;i++){","Expressionexpr=expressions.get(i);","inttype=expr.getType();","if(type\<Expression.GROUP_BEGIN)type=Expression.GROUP_BY;","newRow[i]=newExpressionValue(type);","addRow(newRow);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["throwSmallSQLException.createFromException(e);","publicResultSetgetImportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,null,null,null,table);","publicResultSetgetExportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,table,null,null,null);","publicResultSetgetCrossReference(StringprimaryCatalog,StringprimarySchema,StringprimaryTable,StringforeignCatalog,StringforeignSchema,StringforeignTable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalstaticlongaddDateTimeOffset(longdatetime,TimeZonetimezone){","intt=(int)(datetime%86400000);","intd=(int)(datetime/86400000);","if(t\<0){","t+=86400000;","d--;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]-1)==-1;","if(uebertrag){","signum=-signum;","intlast=value.length-1;","for(inti=0;i\<=last;i++){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["abstractbooleanrowDeleted();","booleanhasAlias(){","returntrue;","voidsetAlias(Stringname)throwsSQLException{","throwSmallSQLException.create(Language.ALIAS_UNSUPPORTED);","abstractvoidexecute()throwsException;"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["intval[]=newint[value.length+1];","val[0]=highBits;","System.arraycopy(value,0,val,1,value.length);","value=val;","voidsub(MutableNumericnum){","if(num.scale\<scale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["count=readByte();","offset+=2;","if(!isNull)offset+=count*4;","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetInt();","longgetMoney()throwsException{","returngetInt()*10000L;","MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["case\'K\':","case\'Q\':","case\'S\':","case\'X\':","case\'Z\':","c=\'2\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["e.next=null;","inti=(int)(e.key%newCapacity);","if(newTable[i]==null){","newTable[i]=e;","}else{","Entryentry=newTable[i];"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseGROUP_BY:","caseFIRST:","if(isEmpty())set(expr.getObject(),expr.getDataType());","break;","caseLAST:","set(expr.getObject(),expr.getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["break;","default:","tokens.add(newSQLToken(c,i,i+1));","wasWhiteSpace=true;","tokenStart=i+1;","}else{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicStringgetTableName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getTableName();","publicStringgetCatalogName(intcolumn)throwsSQLException{","returnnull;","publicintgetColumnType(intcolumn)throwsSQLException{","returnSQLTokenizer.getSQLDataType(getColumnExpression(column).getDataType());"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,null,SQLTokenizer.NULL);","publicvoidsetBoolean(intparameterIndex,booleanx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x?Boolean.TRUE:Boolean.FALSE,SQLTokenizer.BOOLEAN);","publicvoidsetByte(intparameterIndex,bytex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["importsmallsql.database.language.Language;","classExpressionInSelectextendsExpressionArithmetic{","finalprivateCommandSelectcmdSel;","finalprivateIndexindex=newIndex(true);","finalprivateSSConnectioncon;","ExpressionInSelect(SSConnectioncon,Expressionleft,CommandSelectcmdSel,intoperation){"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["returnnewInteger(getInt());","caseSQLTokenizer.BIGINT:","returnnewLong(getLong());","caseSQLTokenizer.REAL:","returnnewFloat(getFloat());","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","doublevalue=getDouble();","if(Double.isInfinite(value)||Double.isNaN(value))"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["intversion=buffer.getInt();","switch(magic){","caseMAGIC_TABLE:","caseMAGIC_VIEW:","break;","default:"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicTimestampgetTimestamp(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["importjava.sql.DatabaseMetaData;","importjava.sql.PreparedStatement;","importjava.sql.SQLException;","importjava.sql.SQLWarning;","importjava.sql.Savepoint;","importjava.sql.Statement;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","if(index.isUnique()){","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","StringcolumnName=columns.get(c);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(isNull())returnnull;","Stringstr1=param1.getString();","Stringstr2=param2.getString();","intlength=str2.length();","if(length==0){","returnstr1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["publicstaticfinalStringDB_NOTCONNECTED=\"SS-0033\";","publicstaticfinalStringDB_READONLY=\"SS-0034\";","publicstaticfinalStringCONNECTION_CLOSED=\"SS-0070\";","publicstaticfinalStringVIEW_INSERT=\"SS-0100\";","publicstaticfinalStringVIEWDROP_NOT_VIEW=\"SS-0101\";","publicstaticfinalStringVIEW_CANTDROP=\"SS-0102\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV,param);","finalprivateStringconvertToString()throwsException{","if(param2!=null){","inttype=param1.getDataType();","switch(type){","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","col.setAutoIncrement(true);","defaultWasSet=true;","break;","caseSQLTokenizer.NULL:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnum;","ObjectgetObject()throwsException{","if(param1.isNull())returnnull;","Objectpara1=param1.getObject();","switch(param1.getDataType()){","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIT:","switch(operation){","caseIN:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Columnscolumns=table.columns;","offsets=newint[columns.size()];","dataTypes=newint[columns.size()];","for(inti=0;i\<columns.size();i++){","dataTypes[i]=columns.get(i).getDataType();","returntrue;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returnnewInteger(getInt());","caseSQLTokenizer.BIGINT:","returnnewLong(getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.defaultDefinition=defaultDefinition;","ExpressiongetDefaultValue(SSConnectioncon)throwsSQLException{","if(identity)","counter.createNextValue(con);","returndefaultValue;","StringgetDefaultDefinition(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["setSqlStates();","protectedfinalvoidaddMessages(String[][]entries)","throwsIllegalArgumentException{","Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<entries.length;i++){","Stringkey=entries[i][0];"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["Propertiesprops=parse(url,info);","DriverPropertyInfo[]driverInfos=newDriverPropertyInfo[1];","driverInfos[0]=newDriverPropertyInfo(\"dbpath\",props.getProperty(\"dbpath\"));","returndriverInfos;","publicintgetMajorVersion(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["setPreviousOffset(listEnum);","finalprivatevoidsetPreviousOffset(LongTreeListEnumlistEnum){","intpreviousOffset=listEnum.offsetStack[listEnum.stack]-2*(2+(listEnum.stack\>=3?0:pointerSize));","if(listEnum.stack==0){","offset=previousOffset;","return;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["store.writeBytes(daten);","writeLong(store.writeFinsh(null));","byte[]readLongBinary()throwsException{","longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","returnstore.readBytes(store.readInt());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["try{","line=input.readLine();","}catch(IOExceptionex){","ex.printStackTrace();","JOptionPane.showMessageDialog(null,\"Youneedtostartthecommandlineofthe\\nSmallSQLDatabasewithaconsolewindow:\\n\\njava-jarsmallsql.jar\\n\\n\"+ex,\"FatalError\",JOptionPane.OK_OPTION);","return;"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value+=expr.getLong();","break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value+=expr.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["IndexNodenode=createIndexNode(unique,digit);","saveNode(node);","returnnode;","}else{","returnnodes[pos];","finalvoidremoveNode(chardigit){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnfalse;","}else{","while(rows++\<0){","if(!previous()){","returnfalse;","returntrue;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["intcomment=NOT_COMMENT;","charquote=0;","StringBufferquoteBuffer=newStringBuffer();","for(inti=0;i\<sql.length;i++){","charc=sql[i];","switch(c){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["synchronized(tableViews){","Objectview=tableViews.remove(viewName);","if(view!=null&&!(viewinstanceofView))","throwSmallSQLException.create(Language.VIEWDROP_NOT_VIEW,viewName);","View.drop(this,viewName);","privatevoidcheckForeignKeys(SSConnectioncon,ForeignKeysforeignKeys)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["{STXADD_FROM_PAR_CLOSE,\"UnexpectedclosingparenthesisinFROMclause.\"},","{STXADD_KEYS_REQUIRED,\"Requiredkeywordsare:\"},","{STXADD_NOT_NUMBER,\"Numbervaluerequired(passed=\'\'{0}\'\').\"},","{STXADD_COMMENT_OPEN,\"Missingendcommentmark(\'\'*/\'\').\"},","};","privatefinalString[][]SQL_STATES={"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["page[offset++]=(byte)(lengthColumn);","writeBytes(daten);","if(!varBinary){","for(inti=length;i\<lengthColumn;i++){","page[offset++]=0;","byte[]readBinary(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["value%=10;","if(value!=0)","buf.append(Utils.digits[value]);","privatefinalstaticvoidformatHour12(inthour,StringBufferbuf){","hour%=12;","if(hour==0)hour=12;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticbyte[]double2bytes(doublevalue){","returnlong2bytes(Double.doubleToLongBits(value));","staticbyte[]float2bytes(floatvalue){","returnint2bytes(Float.floatToIntBits(value));","staticbyte[]long2bytes(longvalue){","byte[]result=newbyte[8];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(!value.isEmpty()||isInsertRow){","returnvalue;","returnmetaData.getColumnExpression(columnIndex);","finalprivateExpressionValuegetUpdateValue(intcolumnIndex)throwsSQLException{","if(values==null){","intcount=metaData.getColumnCount();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["writeString(strDaten,Short.MAX_VALUE,true);","voidwriteString(StringstrDaten,intlengthColumn,booleanvarchar)throwsSQLException{","char[]daten=strDaten.toCharArray();","intlength=daten.length;","if(lengthColumn\<length){","throwSmallSQLException.create(Language.VALUE_STR_TOOLARGE);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetDouble()!=0;","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","switch(operation){","caseIN:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["cmd=null;","finalpublicintgetMaxFieldSize(){","returnmaxFieldSize;","finalpublicvoidsetMaxFieldSize(intmax){","maxFieldSize=max;","finalpublicintgetMaxRows(){"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","isOuterValid=false;","isBeforeFirst=false;","right.nullRow();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["wasWhiteSpace=true;","tokenStart=i+1;","}else{","quoteBuffer.append(c);","break;","default:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["raFile.position(filePos);","synchronized(page_control){","pageControlBuffer.position(0);","raFile.read(pageControlBuffer);","store.page=page_control;","store.readPageHeader();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SQL_LONGVARBINARY:dataType=SQLTokenizer.LONGVARBINARY;break;","caseSQLTokenizer.SQL_LONGVARCHAR:dataType=SQLTokenizer.LONGVARCHAR;break;","caseSQLTokenizer.SQL_REAL:dataType=SQLTokenizer.REAL;break;","caseSQLTokenizer.SQL_SMALLINT:dataType=SQLTokenizer.SMALLINT;break;","caseSQLTokenizer.SQL_TIME:dataType=SQLTokenizer.TIME;break;","caseSQLTokenizer.SQL_TIMESTAMP:dataType=SQLTokenizer.TIMESTAMP;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.RAND:","invalidParamCount=(paramCount!=0)&&(paramCount!=1);","expr=newExpressionFunctionRand();","break;","caseSQLTokenizer.ROUND:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TRUNCATE:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionTruncate();","break;","caseSQLTokenizer.ASCII:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_READ);","cmd.isolationLevel=Connection.TRANSACTION_REPEATABLE_READ;","returncmd;","caseSQLTokenizer.SERIALIZABLE:","cmd.isolationLevel=Connection.TRANSACTION_SERIALIZABLE;","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["resize(size\<\<1);","data[size++]=expr;","finalvoidadd(intidx,Expressionexpr){","if(size\>=data.length){","resize(size\<\<1);","System.arraycopy(data,idx,data,idx+1,(size++)-idx);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["staticfinalintMOD=83;//%","staticfinalintBIT_NOT=91;//~","staticfinalintNEGATIVE=101;//-","privatestaticfinalint[]DatatypeRange={","SQLTokenizer.TIMESTAMP,","SQLTokenizer.SMALLDATETIME,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnlock;","caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:{","LongpageKey=newLong(page);//TODOperformance","TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.SQL_REAL:dataType=SQLTokenizer.REAL;break;","caseSQLTokenizer.SQL_SMALLINT:dataType=SQLTokenizer.SMALLINT;break;","caseSQLTokenizer.SQL_TIME:dataType=SQLTokenizer.TIME;break;","caseSQLTokenizer.SQL_TIMESTAMP:dataType=SQLTokenizer.TIMESTAMP;break;","caseSQLTokenizer.SQL_TINYINT:dataType=SQLTokenizer.TINYINT;break;","caseSQLTokenizer.SQL_VARBINARY:dataType=SQLTokenizer.VARBINARY;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["System.arraycopy(bytes,start,b,0,length);","returnb;","}else{","byte[]b=newbyte[byteLen-start];","System.arraycopy(bytes,start,b,0,b.length);","returnb;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["result[2]=(byte)(value\>\>40);","result[3]=(byte)(value\>\>32);","result[4]=(byte)(value\>\>24);","result[5]=(byte)(value\>\>16);","result[6]=(byte)(value\>\>8);","result[7]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["}else{","return-1;","IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","finalvoidafterLast(){","longList=null;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["if(isTypeTable){","row[3]=\"TABLE\";","rows.add(row);","}catch(Exceptione){","Object[][]data=newObject[rows.size()][];","rows.toArray(data);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["return;","if(idx%2\>0){","results.set(p,param);","}else{","cases.set(p,param);","finalintgetFunction(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnLong.parseLong(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["classTableStorePageInsertextendsTableStorePage{","finalprivateStorePageLinklink=newStorePageLink();","TableStorePageInsert(SSConnectioncon,Tabletable,intlockType){","super(con,table,lockType,-1);","link.page=this;","link.filePos=fileOffset;"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["caseSQLTokenizer.TABLE:","returncreateTable();","caseSQLTokenizer.VIEW:","returncreateView();","caseSQLTokenizer.INDEX:","returncreateIndex(false);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewMutableNumeric(getLongImpl());","caseSQLTokenizer.REAL:","returnnewMutableNumeric(getFloatImpl());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDoubleImpl());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.SMALLMONEY:","return10;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:","return19;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnFloat.parseFloat(readLongString());","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(index.isPrimary()){","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","Object[]row=newObject[6];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["booleann=currentDS.next();","row++;","if(n)returntrue;","while(dataSources.size()\>dataSourceIdx+1){","currentDS=dataSources.get(++dataSourceIdx);","currentDS.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnparam2.getNumeric();","returnparam3.getNumeric();","ObjectgetObject()throwsException{","if(param1.getBoolean())","returnparam2.getObject();","returnparam3.getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["page=find(page,doubleToBinarySortOrder(expr.getDouble()),4,nodeList);","break;","caseSQLTokenizer.TINYINT:","page=find(page,expr.getInt(),1,nodeList);","break;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intautoGeneratedKeys)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(autoGeneratedKeys);","returnpr;","publicPreparedStatementprepareStatement(Stringsql,int[]columnIndexes)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.PERCENT:","caseSQLTokenizer.EQUALS:","caseSQLTokenizer.LESSER:","caseSQLTokenizer.LESSER_EQU:","caseSQLTokenizer.GREATER:","caseSQLTokenizer.GREATER_EQU:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateintrowPos;//0-before;1-onrow;2-afterlast","finalbooleanisScrollable(){","returntrue;","finalvoidbeforeFirst(){","rowPos=0;","finalbooleanisBeforeFirst(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["returnreadLongBinary();","caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME);","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatebooleanisBeforeFirst=true;","privatebooleanisOuterValid=true;","privateboolean[]isFullNotValid;","privateintfullRightRowCounter;","privateintfullRowCount;","privateintfullReturnCounter=-1;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["if(!(tableViewinstanceofTable))","throwSmallSQLException.create(Language.VIEW_INSERT);","table=(Table)tableView;","tableTimestamp=table.getTimestamp();","cmdSel.compile(con);","intcount=table.columns.size();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["Strings(){","data=newString[16];","finalintsize(){","returnsize;","finalStringget(intidx){","if(idx\>=size)"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);","if((st.rsType==ResultSet.TYPE_SCROLL_INSENSITIVE||st.rsType==ResultSet.TYPE_SCROLL_SENSITIVE)&&","!from.isScrollable()){","from=newScrollable(from);","from.execute();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnparam2.getLong()+param1.getLong();","caseSQLTokenizer.SQL_TSI_SECOND:","returnparam2.getLong()+param1.getLong()*1000;","caseSQLTokenizer.SQL_TSI_MINUTE:","returnparam2.getLong()+param1.getLong()*60000;","caseSQLTokenizer.SQL_TSI_HOUR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","token=nextToken(MISSING_NULL);","col.setNullable(false);","nullableWasSet=true;","break;","caseSQLTokenizer.PRIMARY:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intstart=Math.min(Math.max(0,param2.getInt()-1),str.length());","intlength=Math.min(param3.getInt(),str.length());","StringBufferbuffer=newStringBuffer();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["addKeyWord(\"TIMESTAMPDIFF\",TIMESTAMPDIFF);","addKeyWord(\"WEEK\",WEEK);","addKeyWord(\"YEAR\",YEAR);","staticfinalintSQL_TSI_FRAC_SECOND=1250;","staticfinalintSQL_TSI_SECOND=1251;","staticfinalintSQL_TSI_MINUTE=1252;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["right.execute();","if(!createJoinScrollIndex()){","scroll=newJoinScroll(type,left,right,condition);","booleanisExpressionsFromThisRowSource(Expressionscolumns){","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","returntrue;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["inttypeLeft=left.getDataType();","inttypeRight=right.getDataType();","returngetDataType(typeLeft,typeRight);","staticintgetBestNumberDataType(intparamDataType){","intdataTypeIdx=Utils.indexOf(paramDataType,DatatypeRange);","if(dataTypeIdx\>=NVARCHAR_IDX)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["packagesmallsql.database;","finalclassNoFromResultextendsRowSource{","privateintrowPos;//0-before;1-onrow;2-afterlast","finalbooleanisScrollable(){","returntrue;","finalvoidbeforeFirst(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["{VALUE_STR_TOOLARGE,\"Stringvaluetoolargeforcolumn.\"},","{VALUE_BIN_TOOLARGE,\"Binaryvaluewithlength{0}tolargeforcolumnwithsize{1}.\"},","{VALUE_NULL_INVALID,\"Nullvaluesarenotvalidforcolumn\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Cannotconverta{0}valuetoa{1}value.\"},","{BYTEARR_INVALID_SIZE,\"Invalidbytearraysize{0}forUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjectwasdeleted.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["packagesmallsql.database;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","abstractclassTableViewResultextendsDataSource{","SSConnectioncon;","privateStringalias;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["caseSQLTokenizer.SQRT:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSqrt();","break;","caseSQLTokenizer.TAN:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ExpressionFunctionTimestampDiff(intintervalType,Expressionp1,Expressionp2){","interval=mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});","intgetFunction(){","returnSQLTokenizer.TIMESTAMPDIFF;","booleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getInt()==right.getInt();","caseGREATER:returnleft.getInt()\>right.getInt();","caseGRE_EQU:returnleft.getInt()\>=right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong()*3;","returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_YEAR:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["importjava.util.ArrayList;","classIndex{","finalIndexNoderootPage;","Index(booleanunique){","rootPage=newIndexNode(unique,(char)-1);","Index(IndexNoderootPage){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["case\'P\':","case\'V\':","c=\'1\';","break;","case\'C\':","case\'G\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["publicStringgetString(StringcolumnName)throwsSQLException{","returngetString(findColumn(columnName));","publicbooleangetBoolean(StringcolumnName)throwsSQLException{","returngetBoolean(findColumn(columnName));","publicbytegetByte(StringcolumnName)throwsSQLException{","returngetByte(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["publicvoidsetObject(StringparameterName,Objectx)throwsSQLException{","setObject(findParameter(parameterName),x);","publicvoidsetCharacterStream(StringparameterName,Readerx,intlength)throwsSQLException{","setCharacterStream(findParameter(parameterName),x,length);","publicvoidsetDate(StringparameterName,Datex,Calendarcal)throwsSQLException{","setDate(findParameter(parameterName),x,cal);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["{SAVEPT_INVALID_DRIVER,\"SAVEPOINTnonvalidoperquestodriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnonsupportatoperquestotipodisorgenterighe.\"},","{ISOLATION_UNKNOWN,\"LivellodiIsolamentotransazionesconosciuto:{0}.\"},","{FLAGVALUE_INVALID,\"Flagnonvalidanelmetodo\'\'getMoreResults\'\':{0}.\"},","{ARGUMENT_INVALID,\"Argomentononvalidonelmetodo\'\'setNeedGenratedKeys\'\':{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnonrichieste.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["previousToken();","}else{","previousToken();","Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();","if(columnName!=null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetColumnExpression(column).isNullable()?columnNullable:columnNoNulls;","publicbooleanisSigned(intcolumn)throwsSQLException{","returnisSignedDataType(getColumnExpression(column).getDataType());","staticbooleanisSignedDataType(intdataType){","switch(dataType){","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["@Override","finalbooleanrowDeleted(){","if(storeinstanceofStoreNull&&store!=Store.NULL){","returntrue;","if(storeinstanceofStoreImpl&&","((StoreImpl)store).isRollback()){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(length==0){","temp[0]=node;","}else{","intpos=findNodeInsertPos(node.digit,0,length);","System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos,temp,pos+1,length-pos);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["this.rsConcurrency=rsConcurrency;","con.testClosedConnection();","finalpublicResultSetexecuteQuery(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getQueryResult();","finalpublicintexecuteUpdate(Stringsql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["for(intk=0;k\<table.columns.size();k++){","ExpressionNameexpr=newExpressionName(table.columns.get(k).getName());","expr.setFrom(fromEntry,k,table);","columnExpressions.add(position++,expr);","returnposition;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicbooleansupportsANSI92EntryLevelSQL(){","returntrue;","publicbooleansupportsANSI92IntermediateSQL(){","returntrue;","publicbooleansupportsANSI92FullSQL(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["TableResult(Tabletable){","this.table=table;","@Override","finalbooleaninit(SSConnectioncon)throwsException{","if(super.init(con)){","Columnscolumns=table.columns;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnTypes.BIT;","caseSQLTokenizer.BOOLEAN:","returnTypes.BOOLEAN;","caseSQLTokenizer.BINARY:","returnTypes.BINARY;","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicintgetHoldability(){","returnholdability;","intgetSavepoint()throwsSQLException{","testClosedConnection();","returncommitPages.size();//thecallisatomic,thatitneednotbesynchronized","publicSavepointsetSavepoint()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","switch(tokenType.value){","caseSQLTokenizer.TABLE:","returnalterTable(catalog,tableName);","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetString();","caseSQLTokenizer.LONGVARBINARY:","returngetBytes();","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["returnbytes;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().toByteArray();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Expressions(intinitSize){","data=newExpression[initSize];","finalintsize(){","returnsize;","finalvoidsetSize(intnewSize){","for(inti=newSize;i\<size;i++)data[i]=null;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["expr=newExpressionName(Expression.LAST);","break;","caseSQLTokenizer.AVG:","if(paramCount!=1){","invalidParamCount=true;","expr=null;//Onlyforthecompiler"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["else","if(filePos\>=0x4000000000000000L){","filePos++;","if((filePos&0x3FFFFFFFFFFFFFFFL)\>=insertStorePages.size()){","filePos=-1;","noRow();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["formatMillis(details.millis,buf);","returnbuf.toString();","case14:","case114://hh:mi:ss:mmm(24h)","formatNumber(details.hour,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","caseLAST:","set(expr.getObject(),expr.getDataType());","break;","caseCOUNT:","if(!expr.isNull())((MutableInteger)value).value++;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["minute=0;","second=0;","millis=0;","if(idx1==0&&length\>0){","throwSmallSQLException.create(Language.DATETIME_INVALID);","if(month\>=12){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintLOCK_NONE=0;//readonREAD_COMMITEDandREAD_UNCOMMITED","staticfinalintLOCK_INSERT=1;//preventonlyLOCK_TAB","staticfinalintLOCK_READ=2;//occuronreadandpreventawriteofdata,itcanoccurmoreasoneLOCK_READperpage","staticfinalintLOCK_WRITE=3;//occuronwriteandpreventeveryotheraccesstothedata,itisonlyoneLOCK_WRITEperpagepossible","staticfinalintLOCK_TAB=4;//lockthetotaltable","TableView(Stringname,Columnscolumns){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["{UNION_DIFFERENT_COLS,\"DieSELECTTeiledesUNIONhabeneineunterschiedlicheSpaltenanzahl:{0}und{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'existiertbereits.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'existiertnicht.\"},","{INDEX_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeingÃ¼ltigerIndexspeicher.\"},","{INDEX_CORRUPT,\"ErrorbeimLadendesIndex.DieIndexDateiistbeschÃ¤digt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ZuvieleidentischeEintrÃ¤geimIndex.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["if(rowIdx\<rowList.size()&&rowIdx\>=0){","currentRow=(ExpressionValue[])rowList.get(rowIdx);","returntrue;","currentRow=null;","returnfalse;","booleanisNull(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["Stringvalue=keyValue.substring(idx1+1).trim();","props.put(key,value);","}else{","throwSmallSQLException.create(Language.CUSTOM_MESSAGE,\"Missingequalinproperty:\"+keyValue);","returnprops;","publicbooleanacceptsURL(Stringurl){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["SQLTokenizer.getKeyWord(getDataType(left,right)),","getKeywordFromOperation(operation)","};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER,params);","SQLExceptioncreateUnspportedConversion(intdataType){","inttype=left==null?right.getDataType():getDataType(left,right);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["static{","addKeyWord(\"ABS\",ABS);","addKeyWord(\"ACOS\",ACOS);","addKeyWord(\"ASIN\",ASIN);","addKeyWord(\"ATAN\",ATAN);","addKeyWord(\"ATN2\",ATAN2);//aliasforMSSQLServer"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["while(true){","Expressioncolumn=expression(selCmd,0);","selCmd.addColumnExpression(column);","token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM","booleanas=false;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidaddCase(Expressioncondition,Expressionresult){","cases.add(condition);","results.add(result);","finalvoidsetElseResult(Expressionexpr){","elseResult=expr;","finalvoidsetEnd(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["try{","intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","privatevoidgroup(CommandSelectcmd)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.INT:","return10;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:","return19;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["privateintoffset;//aktuelleread/writePositioninderPage","intgetCurrentOffsetInPage(){","returnoffset;","voidsetCurrentOffsetInPage(intnewOffset){","this.offset=newOffset;","voidwriteByte(intvalue){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","if(isOuterValid){","isOuterValid=false;","right.nullRow();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnleft.rowDeleted()||right.rowDeleted();","voidnullRow(){","left.nullRow();","right.nullRow();","row=0;","voidnoRow(){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returngetFloat()!=0;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","switch(operation){","caseIN:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["offset=0;","intshift=48;","booleanfirstNode=true;//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","booleanfirstNode1=true;","booleanfirstNode2=true;","booleanfirstNode3=true;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];","offset=listEnum.offsetStack[listEnum.stack];","firstNode=false;","finallonggetPrevious(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["StorePageMap(){","threshold=12;","table=newEntry[17];","finalintsize(){","returnsize;","finalbooleanisEmpty(){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["break;","default:","throwcreateSyntaxError(token,MISSING_OPTIONS_DATATYPE);","token=nextToken();","privateIndexDescriptionindex(Commandcmd,intconstraintType,StringtableName,StringcontrainName,StringcolumnName)throwsSQLException{","if(constraintType!=SQLTokenizer.UNIQUE)nextToken(MISSING_KEY);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{KEY_DUPLICATE,\"01000\"},","{MONTH_TOOLARGE,\"01000\"},","{DAYS_TOOLARGE,\"01000\"},","{HOURS_TOOLARGE,\"01000\"},","{MINUTES_TOOLARGE,\"01000\"},","{SECS_TOOLARGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["packagesmallsql.database;","publicclassCommandCreateViewextendsCommand{","privateColumnscolumns=newColumns();","Stringsql;","CommandCreateView(Loggerlog,Stringname){","super(log);"]": ["|project://smallsql/src/smallsql/database/CommandCreateView.java|"],
"["break;","caseSQLTokenizer.INT:","writeInt(expr.getInt());","break;","caseSQLTokenizer.BIGINT:","writeLong(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getBoolean();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetTime()notyetimplemented.\");","publicvoidsetTimestamp(intparameterIndex,Timestampx,Calendarcal)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetNull()notyetimplemented.\");","publicvoidsetURL(intparameterIndex,URLx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["}finally{","if(con.getAutoCommit())con.commit();","finalvoidinsertRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_INSERT);","if(tables.size()==0)"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseEQUALS_NULL:","caseEQUALS:returnleft.getLong()==right.getLong();","caseGREATER:returnleft.getLong()\>right.getLong();","caseGRE_EQU:returnleft.getLong()\>=right.getLong();","caseLESSER:returnleft.getLong()\<right.getLong();","caseLES_EQU:returnleft.getLong()\<=right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIME);","publicvoidsetTimestamp(intparameterIndex,Timestampx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIMESTAMP);","publicvoidsetAsciiStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnDouble.parseDouble(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2double(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnreadBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnreadBinary();","caseSQLTokenizer.TINYINT:","returnUtils.getInteger(readUnsignedByte());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnaddDateTimeOffset(datetime,TimeZone.getDefault());","finalstaticlongaddDateTimeOffset(longdatetime,TimeZonetimezone){","intt=(int)(datetime%86400000);","intd=(int)(datetime/86400000);","if(t\<0){","t+=86400000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewExpressionFunctionConvert(newColumnExpression(other),expr,null);","break;","break;","returnexpr;","finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["sub(val2);","else","add(val2);","privatevoidadd(int[]val2){","longtemp=0;","intv1=value.length;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["value=root=createIndexNode(unique,(char)-1);","returnroot;","privatefinalvoidsaveNode(IndexNodenode){","intlength=nodes.length;","IndexNode[]temp=newIndexNode[length+1];","if(length==0){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["selCmd.addColumnExpression(column);","token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM","booleanas=false;","if(token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateintfetchSize;","privateintqueryTimeout;","privateintmaxRows;","privateintmaxFieldSize;","privateArrayListbatches;","privatebooleanneedGeneratedKeys;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["publicintgetInt(StringcolumnName)throwsSQLException{","returngetInt(findColumn(columnName));","publiclonggetLong(StringcolumnName)throwsSQLException{","returngetLong(findColumn(columnName));","publicfloatgetFloat(StringcolumnName)throwsSQLException{","returngetFloat(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalclassSortedResultextendsRowSource{","finalprivateExpressionsorderBy;","finalprivateRowSourcerowSource;","privateIndexScrollStatusscrollStatus;","privateintrow;","privatefinalLongListinsertedRows=newLongList();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.NUMERIC:","MutableNumericobj=getNumeric();","return(obj==null)?0:obj.getScale();","default:","returngetScale(dataType);","staticSQLExceptioncreateUnsupportedConversion(intfromDataType,Objectobj,inttoDataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnext();","booleannext()throwsException{","if(isAfterLast)returnfalse;","row++;","booleanresult=scroll.next();","if(!result){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["publicbooleansupportsSchemasInPrivilegeDefinitions(){","returnfalse;","publicbooleansupportsCatalogsInDataManipulation(){","returntrue;","publicbooleansupportsCatalogsInProcedureCalls(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["matrix[i]=-1;","for(inti=0;i\<columns.size();i++){","matrix[tableView.findColumnIdx(columns.get(i))]=i;","finalvoidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","init(database,tableView);","raFile=createFile(con,database);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(currentInsertedRow()\>=0){","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;","longrowPosition=scrollStatus.getRowOffset(false);","if(rowPosition\>=0){","rowSource.setRowPosition(rowPosition);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseEQUALS_NULL:","caseEQUALS:returnleft.getMoney()==right.getMoney();","caseGREATER:returnleft.getMoney()\>right.getMoney();","caseGRE_EQU:returnleft.getMoney()\>=right.getMoney();","caseLESSER:returnleft.getMoney()\<right.getMoney();","caseLES_EQU:returnleft.getMoney()\<=right.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisLast()throwsException{","if(rowIdx+1!=rowList.size()){","returnfalse;","booleanisNext=next();","previous();","return!isNext&&(rowIdx+1==rowList.size()&&rowList.size()\>0);"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["booleanreadBoolean(){","returnpage[offset++]!=0;","voidwriteShort(intvalue){","intnewSize=offset+2;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{INDEX_EXISTS,\"Index\'\'{0}\'\'alreadyexists.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'doesnotexist.\"},","{INDEX_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidIndexstore.\"},","{INDEX_CORRUPT,\"ErrorinloadingIndex.Indexfileiscorrupt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ToomanyequalsentryinIndex.\"},","{FILE_TOONEW,\"Fileversion({0})offile\'\'{1}\'\'istoonewforthisruntime.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["byte[]daten=newbyte[length];","System.arraycopy(page,offset,daten,0,length);","offset+=length;","returndaten;","voidwriteBinary(byte[]daten,intlengthColumn,booleanvarBinary)throwsSQLException{","intlength=daten.length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returndata[idx];","finalvoidadd(ForeignKeyforeignKey){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=foreignKey;","privatefinalvoidresize(intnewSize){"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti,intscale)throwsSQLException{","try{","MutableNumericobj=getValue(i).getNumeric();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:","caseSQLTokenizer.FOREIGN:","IndexDescriptionindex=index(cmdCreate,token.value,tableName,constraintName,null);","if(token.value==SQLTokenizer.FOREIGN){","nextToken(MISSING_REFERENCES);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnMoney.parseMoney(readLongString());","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intlength=src1.length;","if(length!=src2.length-offset2)returnfalse;","for(inti=0;i\<length;i++){","if(src1[i]!=src2[i+offset2])returnfalse;","returntrue;","privatefinalbooleanequals(char[]src1,longsrc2,intcharCount){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["raFile.position(filePos);","ByteBufferbuffer=ByteBuffer.wrap(store.page);","raFile.read(buffer);","}else{","store.page=storePage.page;","store.sharedPageData=true;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalbooleanisLast()throwsException{","if(!isCurrentRow)returnfalse;","longrowPos=rowSource.getRowPosition();","booleanisNext=next();","rowSource.setRowPosition(rowPos);","return!isNext;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returnSQLTokenizer.SQL_TSI_FRAC_SECOND;","caseSQLTokenizer.SECOND:","returnSQLTokenizer.SQL_TSI_SECOND;","caseSQLTokenizer.MINUTE:","returnSQLTokenizer.SQL_TSI_MINUTE;","caseSQLTokenizer.HOUR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["constraintName=nextIdentifier();","token=nextToken(MISSING_KEYTYPE);","}else{","constraintName=null;","switch(token.value){","caseSQLTokenizer.PRIMARY:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(parenthesis==token.value)returnfromSource;","if(parenthesis==0){","previousToken();","returnfromSource;","throwcreateSyntaxError(token,Language.STXADD_FROM_PAR_CLOSE);","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["super.setParams(params);","if(params.length\>0)param1=params[0];","if(params.length\>1)param2=params[1];","if(params.length\>2)param3=params[2];","if(params.length\>3)param4=params[3];","finalvoidsetParamAt(Expressionparam,intidx){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["staticDategetDate(longtime){","returnnewDate(DateTime.addDateTimeOffset(time));","publicObjectgetImmutableObject(){","switch(dataType){","caseSQLTokenizer.DATE:","returngetDate(time);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intoffsetStart=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart+4);//placeholderforlength","indexDesc.save(store);","intoffsetEnd=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart);","store.writeInt(offsetEnd-offsetStart);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["super(type);","voidsetNameAfterTableAlias(Stringname){","tableAlias=getName();","setName(name);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["caseSQLTokenizer.DELETE:","returndelete();","caseSQLTokenizer.INSERT:","returninsert();","caseSQLTokenizer.UPDATE:","returnupdate();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewExpressionValue(null,SQLTokenizer.NULL);","caseSQLTokenizer.STRING:","returnnewExpressionValue(token.getName(null),SQLTokenizer.VARCHAR);","caseSQLTokenizer.IDENTIFIER:","Stringname=getIdentifier(token);","ExpressionNameexpr=newExpressionName(name);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.year,4,buf);","returnbuf.toString();","case11://Japanyy/mm/dd","formatNumber(details.year%100,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalColumnget(Stringname){","for(inti=0;i\<size;i++){","Columncolumn=data[i];","if(name.equalsIgnoreCase(column.getName())){","returncolumn;","returnnull;"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["compile(con);","if((st.rsType==ResultSet.TYPE_SCROLL_INSENSITIVE||st.rsType==ResultSet.TYPE_SCROLL_SENSITIVE)&&","!from.isScrollable()){","from=newScrollable(from);","from.execute();","rs=newSSResultSet(st,this);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["Object[][]data=newObject[0][0];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetPrimaryKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnnewMutableNumeric(getInt());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLong());","caseSQLTokenizer.MONEY:","returnnewMutableNumeric(getMoney(),4);","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];","setPreviousOffset(listEnum);","finalprivatevoidsetPreviousOffset(LongTreeListEnumlistEnum){","intpreviousOffset=listEnum.offsetStack[listEnum.stack]-2*(2+(listEnum.stack\>=3?0:pointerSize));"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["store=Store.NOROW;","@Override","finalbooleanisNull(intcolIdx)throwsException{","returnstore.isNull(offsets[colIdx]);","@Override","finalbooleangetBoolean(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","Object[]row=newObject[6];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=columns.get(c);//COLUMN_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalIndexNodeaddRoot(chardigit)throwsSQLException{","IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();","returnnode.addRoot();","finalIndexNodeaddRootValue(char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["voidremoveTableView(StringtableViewName){","synchronized(tableViews){","tableViews.remove(tableViewName);","voidreplaceTable(TableoldTable,TablenewTable)throwsException{","synchronized(tableViews){","tableViews.remove(oldTable.name);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnreadUnsignedByte()*10000L;","caseSQLTokenizer.SMALLINT:","returnreadShort()*10000L;","caseSQLTokenizer.INT:","returnreadInt()*10000L;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{SYNTAX_BASE_OFS,\"SyntaxErrorbeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"SyntaxError,unerwartetesEndedesSQLStrings.\"},","{STXADD_ADDITIONAL_TOK,\"ZusÃ¤tzlicheZeichennachdemEndedesSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Bezeichnererwartet.\"},","{STXADD_IDENT_EMPTY,\"LeererBezeichner.\"},","{STXADD_IDENT_WRONG,\"UngÃ¼ltigerBezeichner\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["break;","caseSQLTokenizer.DEGREES:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDegrees();","break;","caseSQLTokenizer.EXP:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(left.isExpressionsFromThisRowSource(columns1)&&right.isExpressionsFromThisRowSource(columns0)){","leftEx.add(param1);","rightEx.add(param0);","}else{","return0;","returnoperation;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(token.length\>1&&(sql[token.offset+1]|0x20)==\'x\'){","if(isMinus){","throwcreateSyntaxError(token,Language.STXADD_OPER_MINUS);","returnnewExpressionValue(Utils.hex2bytes(sql,token.offset+2,token.length-2),SQLTokenizer.VARBINARY);","if(isMinus)tok=\"-\"+tok;","if(Utils.indexOf(\'.\',sql,token.offset,token.length)\>=0||"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayOutputStreambaos=newByteArrayOutputStream();","ObjectOutputStreamoos=newObjectOutputStream(baos);","oos.writeObject(expr.getObject());","writeLongBinary(baos.toByteArray());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{INDEX_EXISTS,\"01000\"},","{INDEX_MISSING,\"01000\"},","{INDEX_FILE_INVALID,\"01000\"},","{INDEX_CORRUPT,\"01000\"},","{INDEX_TOOMANY_EQUALS,\"01000\"},","{FILE_TOONEW,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnexpr.getDouble();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(intcolumnIndex,intscale)throwsSQLException{","try{","MutableNumericobj=getValue(columnIndex).getNumeric();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returngetBytes();","default:throwcreateUnspportedDataType(param1.getDataType());","intgetDataType(){","returnparam1.getDataType();","intgetPrecision(){","returnparam1.getPrecision();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["this.columnExpressions=newExpressions();","Command(Loggerlog,ExpressionscolumnExpressions){","this.log=log;","this.columnExpressions=columnExpressions;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{","columnExpressions.add(column);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["staticfinalintTRUNCATE=1023;//lastnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","static{","addKeyWord(\"ABS\",ABS);","addKeyWord(\"ACOS\",ACOS);","addKeyWord(\"ASIN\",ASIN);","addKeyWord(\"ATAN\",ATAN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["ObjectOutputStreamoos=newObjectOutputStream(baos);","oos.writeObject(expr.getObject());","writeLongBinary(baos.toByteArray());","break;","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(con.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filedir=newFile(name);","dir.mkdirs();","if(!newFile(dir,Utils.MASTER_FILENAME).createNewFile()){"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["token=nextToken(MISSING_KEYTYPE);","}else{","constraintName=null;","switch(token.value){","caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["master=Utils.openRaFile(file,readonly);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","StringgetName(){","returnname;","booleanisReadOnly(){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetColumns(Stringcatalog,StringschemaPattern,StringtableNamePattern,StringcolumnNamePattern)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"NUM_PREC_RADIX\",\"NULLABLE\",\"REMARKS\",\"COLUMN_DEF\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"CHAR_OCTET_LENGTH\",\"ORDINAL_POSITION\",\"IS_NULLABLE\"};","Object[][]data=con.getDatabase(false).getColumns(con,tableNamePattern,columnNamePattern);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{","Stringvalue=entries[i][1];","messages.put(key,value);","privatefinalvoidsetSqlStates(){","Setinserted=newHashSet();//forduplicateschecking"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(getRowCount()==0&&groupBy==null){","addGroupRow();","beforeFirst();","finalprivatevoidaddGroupRow(){","ExpressionValue[]newRow=currentRow=newExpressionValue[expressions.size()];","for(inti=0;i\<newRow.length;i++){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["size-=2;","System.arraycopy(data,oldOffset+2,data,oldOffset,size-oldOffset);","offset=oldOffset;","finalprivatevoidcorrectPointers(intstartOffset,intoldOffset,intdiff,intlevel){","offset=startOffset;","booleanfirstNode=true;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["@Override","finallonggetLong(intcolIdx)throwsException{","returnstore.getLong(offsets[colIdx],dataTypes[colIdx]);","@Override","finalfloatgetFloat(intcolIdx)throwsException{","returnstore.getFloat(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["ObjectgetObject()throwsException{","if(param1.isNull())returnnull;","Objectpara1=param1.getObject();","switch(param1.getDataType()){","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]-1)==-1;","if(uebertrag){","signum=-signum;","intlast=value.length-1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX,keyword);","break;","caseMIN:","if(value==null){","if(expr.isNull())","dataType=expr.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{STXADD_IDENT_WRONG,\"WrongIdentifier\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"InvalidoperatorminusfordatatypeVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"Unknownfunction.\"},","{STXADD_PARAM_INVALID_COUNT,\"Invalidparametercount.\"},","{STXADD_JOIN_INVALID,\"InvalidJoinSyntax.\"},","{STXADD_FROM_PAR_CLOSE,\"UnexpectedclosingparenthesisinFROMclause.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnUtils.string2boolean(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["expr=newExpressionFunctionCot();","break;","caseSQLTokenizer.DEGREES:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDegrees();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicstaticfinalStringUNSUPPORTED_CONVERSION=\"SS-0287\";","publicstaticfinalStringINSERT_INVALID_LEN=\"SS-0288\";","publicstaticfinalStringSUBSTR_INVALID_LEN=\"SS-0289\";","publicstaticfinalStringVALUE_STR_TOOLARGE=\"SS-0310\";","publicstaticfinalStringVALUE_BIN_TOOLARGE=\"SS-0311\";","publicstaticfinalStringVALUE_NULL_INVALID=\"SS-0312\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(length\<0)","throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));","if(start==0&&byteLen==length)returnbytes;","if(byteLen\>length+start){","byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\<0)//castneededforCompiler1.5"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalintgetDataType(intcolIdx){","returncurrentDS.getDataType(colIdx);","TableViewgetTableView(){","returncurrentDS.getTableView();","finalbooleanisScrollable(){","returnfalse;//TODOperformance,canimplementitifalldatasourcesimplementit"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["finalbyte[]getBytes()throwsException{","returngetResult().getBytes();","finalintgetDataType(){","if(dataType\<0){","dataType=elseResult.getDataType();","for(inti=0;i\<results.size();i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?Boolean.TRUE:Boolean.FALSE;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Stringmessage=getErrorString(","token,Language.CUSTOM_MESSAGE,msgBuf);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateStringgetErrorString(SQLTokentoken,StringmiddleMsgCode,","ObjectmiddleMsgParam){","StringBufferbuffer=newStringBuffer(1024);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","break;","caseSQLTokenizer.ALL:","selCmd.setDistinct(false);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["puffer[c++]=(char)value[i++];","returnpuffer;","privatefinalbooleanequals(char[]src1,char[]src2,intoffset2){","if(src1==null)returnfalse;","intlength=src1.length;","if(length!=src2.length-offset2)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["char[]readChars(intlength){","char[]chars=newchar[length];","for(inti=0;i\<length;i++){","chars[i]=(char)readShort();","returnchars;","byte[]readBytes(intlength){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["publicResultSetgetColumns(Stringcatalog,StringschemaPattern,StringtableNamePattern,StringcolumnNamePattern)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"NUM_PREC_RADIX\",\"NULLABLE\",\"REMARKS\",\"COLUMN_DEF\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"CHAR_OCTET_LENGTH\",\"ORDINAL_POSITION\",\"IS_NULLABLE\"};","Object[][]data=con.getDatabase(false).getColumns(con,tableNamePattern,columnNamePattern);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["return(TableView)map.get(getUniqueKey(name));","voidput(Stringname,TableViewtableView){","map.put(getUniqueKey(name),tableView);","TableViewremove(Stringname){","return(TableView)map.remove(getUniqueKey(name));","Collectionvalues(){"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["return\"java.lang.String\";","caseTypes.CLOB:","return\"java.sql.Clob\";","default:return\"java.lang.Object\";","finalintgetColumnIdx(intcolumn)throwsSQLException{","if(column\<1||column\>columns.size())"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["lock=lock.nextLock;","if(usableLock!=null){","returnusableLock;","lock=newTableStorePage(con,this,LOCK_NONE,page);","if(con.isolationLevel\>=Connection.TRANSACTION_REPEATABLE_READ||pageOperation==SQLTokenizer.UPDATE){","lock.lockType=pageOperation==SQLTokenizer.UPDATE?LOCK_WRITE:LOCK_READ;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(store==null)throwSmallSQLException.create(Language.LOB_DELETED);","returnnewString(store.readChars(store.readInt()));","voidwriteColumn(Columncolumn)throwsException{","intnewSize=offset+25;","if(newSize\>page.length)resizePage(newSize);","writeByte(column.getFlag());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["LongList(){","this(16);","LongList(intinitialSize){","data=newlong[initialSize];","finalintsize(){","returnsize;"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["{RSET_CLOSED,\"DasResultSetistgeschlossen.\"},","{RSET_NOT_INSERT_ROW,\"DerCursorzeigtaktuellnichtaufdieEinfÃ¼geposition(insertrow).\"},","{RSET_ON_INSERT_ROW,\"DerCursorzeigtaktuellaufdieEinfÃ¼geposition(insertrow).\"},","{ROWSOURCE_READONLY,\"DieRowsourceistschreibgeschÃ¼tzt.\"},","{STMT_IS_CLOSED,\"DasStatementistbereitsgeschlossen.\"},","{SUBQUERY_COL_COUNT,\"DieAnzahlderSpalteninderSubquerymuss1seinundnicht{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["{FLAGVALUE_INVALID,\"Flagnonvalidanelmetodo\'\'getMoreResults\'\':{0}.\"},","{ARGUMENT_INVALID,\"Argomentononvalidonelmetodo\'\'setNeedGenratedKeys\'\':{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnonrichieste.\"},","{SEQUENCE_HEX_INVALID,\"Sequenzaesadecimalenonvalidoallaposizione{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Sequenceesadecimalenonvalidaallapositione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Erroredisintassiallaposizione{0}in\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnparam1.getLong();","finalintgetDataType(){","returndatatype.getDataType();","finalintgetPrecision(){","finalintdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"REAL\"});","@Override","doublegetDouble(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["single.add(columns.get(i));","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","continue;","returnfalse;","returntrue;","privatebooleancreateJoinScrollIndex()throwsException{"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(token==null){","cmdCreate.addColumn(col);","returnnull;","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintMONTH=1211;","staticfinalintMONTHNAME=1212;","staticfinalintNOW=1213;","staticfinalintQUARTER=1214;","staticfinalintSECOND=1215;","staticfinalintTIMESTAMPADD=1216;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.REPLACE;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returndb;","privatestaticDatabasegetDatabase(SSConnectioncon,Stringname)throwsSQLException{","returnname==null?","con.getDatabase(false):","getDatabase(name,con,false);","privateDatabase(Stringname,FilecanonicalFile,booleanreadonly)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["rowSource.afterLast();","row=0;","finalintgetRow()throwsException{","returnrow;","finallonggetRowPosition(){","returnrowSource.getRowPosition();"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["if(newRowSources!=null){","for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","ExpressionrsColumn=columnExpressions.get(i);//ColumnoftheResultSet","if(!rsColumn.isDefinitelyWritable())"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["intgetDataType(){","returnparam1.getDataType();","intgetPrecision(){","returnparam1.getPrecision();","finalintgetScale(){","returnparam1.getScale();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["publicdoubledoubleValue(){","if(value.length==0||signum==0){","return0;","}else{","if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleDoubleFactor[scale]*signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["@Override","floatgetFloat(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["packagesmallsql.database;","importjava.sql.*;","classForeignKey{","finalStringpkTable;","finalStringfkTable;","finalIndexDescriptionpk;"]": ["|project://smallsql/src/smallsql/database/ForeignKey.java|"],
"["col.setDataType(dataType);","returncol;","privateCommandCreateViewcreateView()throwsSQLException{","StringviewName=nextIdentifier();","nextToken(MISSING_AS);","SQLTokentoken=nextToken(MISSING_SELECT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleansupportsBatchUpdates(){","returntrue;","publicResultSetgetUDTs(Stringcatalog,StringschemaPattern,StringtypeNamePattern,int[]types)throwsSQLException{","String[]colNames={\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"CLASS_NAME\",\"DATA_TYPE\",\"REMARKS\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["voidwriteDouble(doublevalue){","writeLong(Double.doubleToLongBits(value));","doublereadDouble(){","returnDouble.longBitsToDouble(readLong());","voidwriteFloat(floatvalue){","writeInt(Float.floatToIntBits(value));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalprivateRowSourcerowSource;","privateIndexindex;","privateintrow;","Distinct(RowSourcerowSource,Expressionscolumns){","this.rowSource=rowSource;","this.distinctColumns=columns;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["value/=factor;","value=Math.rint(value);","if(places\>0){","value/=factor;","}else{","value*=factor;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|"],
"["publicstaticfinalStringSTXADD_NOT_NUMBER=\"SS-0622\";","publicstaticfinalStringSTXADD_COMMENT_OPEN=\"SS-0623\";","privateMapmessages;","privateMapsqlStates;","publicstaticLanguagegetLanguage(StringlocaleStr){","try{"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["staticfinalintLIKE=63;//LIKE","staticfinalintISNULL=64;//ISNULL","staticfinalintISNOTNULL=ISNULL+1;//ISNOTNULL","staticfinalintADD=71;//+","staticfinalintSUB=72;//-","staticfinalintMUL=81;//*"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["database.close();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","privatefinalvoidclose()throwsException{","synchronized(tableViews){","Iteratoriterator=tableViews.values().iterator();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["IndexNodeScrollStatus(IndexNodenode,booleanasc,booleanscroll,intlevel){","this.nodes=node.getChildNodes();","nodeValue=node.getValue();","this.asc=asc;","this.idx=(asc^scroll)?nodes.length:-2;","this.level=level;"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.max(((MutableInteger)value).value,expr.getInt());","break;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["break;","case2:","value=newLongTreeList(input);","break;","case3:","value=loadRef(input.readLong());"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{SYNTAX_BASE_OFS,\"Erroredisintassiallaposizione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Erroredisintassi,fineinattesadellastringaSQL.\"},","{STXADD_ADDITIONAL_TOK,\"Tokenaggiuntivodopolafinedell\'\'istruzioneSQL.\"},","{STXADD_IDENT_EXPECT,\"Identificatoreatteso.\"},","{STXADD_IDENT_EMPTY,\"Identificatorevuoto.\"},","{STXADD_IDENT_WRONG,\"Identificatoreerrato\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["finallonggetMoney(intoffset,intdataType)throwsException{","return0;","finalMutableNumericgetNumeric(intoffset,intdataType)throwsException{","returnnull;","finalObjectgetObject(intoffset,intdataType)throwsException{","returnnull;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","filePosUpdated=newData.writeFinsh(null);","status=UPDATE_POINTER;","}else{","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","updatePointer.filePosUpdated=newData.writeFinsh(null);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.LEFT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["offset+=16;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","offset+=3;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalintgetInt()throwsException{","returngetResult().getInt();","finallonggetLong()throwsException{","returngetResult().getLong();","finalfloatgetFloat()throwsException{","returngetResult().getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/Index.java|","|project://smallsql/src/smallsql/database/Index.java|"],
"["if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,0,page,offset,daten.length);","offset+=daten.length;","voidwriteBytes(byte[]daten,intoff,intlength){","intnewSize=offset+length;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.BIGINT:","returnnewLong(getLong());","caseSQLTokenizer.REAL:","returnnewFloat(getFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"IS\",IS);","addKeyWord(\"NOT\",NOT);","addKeyWord(\"NULL\",NULL);","addKeyWord(\"YES\",TRUE);//aliasforTRUE","addKeyWord(\"TRUE\",TRUE);","addKeyWord(\"NO\",FALSE);//aliasforFALSE"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicstaticfinalStringROW_LOCKED=\"SS-0523\";","publicstaticfinalStringROW_DELETED=\"SS-0524\";","publicstaticfinalStringSAVEPT_INVALID_TRANS=\"SS-0550\";","publicstaticfinalStringSAVEPT_INVALID_DRIVER=\"SS-0551\";","publicstaticfinalStringALIAS_UNSUPPORTED=\"SS-0580\";","publicstaticfinalStringISOLATION_UNKNOWN=\"SS-0581\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(con==null){","returnstorePage.commit();","}else{","return0;","finalvoidcreateWriteLock()throwsSQLException{","TableStorePagestorePageWrite=table.requestWriteLock(((TableStorePage)storePage).con,(TableStorePage)storePage);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["DataSourcefromEntry=tables.get(t);","TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){","if(isSetFrom){","throwSmallSQLException.create(Language.COL_AMBIGUOUS,expr.getName());"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["nextToken(MISSING_BY);","cmd.setGroup(expressionTokenList(cmd,SQLTokenizer.GROUP));","privatevoidwhere(CommandSelectcmd)throwsSQLException{","cmd.setWhere(expression(cmd,0));","privatevoidhaving(CommandSelectcmd)throwsSQLException{","cmd.setHaving(expression(cmd,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["writeLongBinary(baos.toByteArray());","break;","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","writeLongBinary(expr.getBytes());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["data[size++]=(byte)0;","data[size++]=(byte)0;","returnsize-2;","finalprivatevoidinsertNodeLastLevel(intoctet)throwsSQLException{","intoldOffset=offset;","if(data.length\<size+2)resize();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnMath.abs(param1.getFloat());","doublegetDouble()throwsException{","returnMath.abs(param1.getDouble());","longgetMoney()throwsException{","returnMath.abs(param1.getMoney());","MutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["caseSQLTokenizer.COMMA:","throwcreateSyntaxError(token,validValues);","returntoken;","for(inti=validValues.length-1;i\>=0;i--){","if(token.value==validValues[i])returntoken;","throwcreateSyntaxError(token,validValues);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong()).toString();","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt()).toString();","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return(long)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.LONG);","privatelonggetLongImpl()throwsjava.lang.Exception{","if(isNull())return0;","switch(operation){","caseADD:returnleft.getLong()+right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["continue;","}else{","status.idx=status.nodes.length;//topreventproblemswithscrollbackaftermultiplecallsaftertheend.","return-1;","IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["caseSQLTokenizer.MONEY:","returnreadLong()/10000.0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000.0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intmIdx=0;//indexinmaskArray","intsIdx=0;//indexinsearchArray","booleanrange=false;","weiter:","while(pattern.length()\>mIdx&&value.length()\>sIdx){","charm=Character.toUpperCase(pattern.charAt(mIdx++));"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_TABLE);","from(cmd);","returncmd;","privateCommandinsert()throwsSQLException{","SQLTokentoken=nextToken(MISSING_INTO);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}else{","shift+=16;","listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];","offset=listEnum.offsetStack[listEnum.stack];"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["voidrollbackFile(FileChannelraFile)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=0;i--){","TransactionSteppage=(TransactionStep)commitPages.get(i);","if(page.raFile==raFile){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionRoundextendsExpressionFunctionReturnP1Number{","finalintgetFunction(){returnSQLTokenizer.ROUND;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|"],
"["returnnewMutableNumeric(getDoubleImpl());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetNumericImpl();","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["cmd=null;","publicbooleanwasNull(){","returnwasNull;","publicStringgetString(intcolumnIndex)throwsSQLException{","try{","Objectobj=getObject(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintATAN2=1004;","staticfinalintCEILING=1005;","staticfinalintCOS=1006;","staticfinalintCOT=1007;","staticfinalintDEGREES=1008;","staticfinalintEXP=1009;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returndaten;","privatestaticbytehex2byte(char[]hex,intoffset)throwsSQLException{","try{","return(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["packagesmallsql.database;","classStorePageMap{","privateEntry[]table;","privateintsize;","privateintthreshold;","StorePageMap(){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseNAME:","caseGROUP_BY:","returnfromEntry.getDataType(colIdx);","caseFIRST:","caseLAST:","caseMAX:"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicConnectiongetConnection(){","returncon;","publicbooleansupportsSavepoints(){","returnfalse;","publicbooleansupportsNamedParameters(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:","switch(other.getDataType()){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returncurrentDS.getLong(colIdx);","finalfloatgetFloat(intcolIdx)throwsException{","returncurrentDS.getFloat(colIdx);","finaldoublegetDouble(intcolIdx)throwsException{","returncurrentDS.getDouble(colIdx);","finallonggetMoney(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnrowSource(cmd,tables,SQLTokenizer.PARENTHESIS_R);","caseSQLTokenizer.ESCAPE_L://{","token=nextToken(MISSING_OJ);","returnrowSource(cmd,tables,SQLTokenizer.ESCAPE_R);","caseSQLTokenizer.SELECT:","ViewResultviewResult=newViewResult(con,select());"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["@Override","longgetMoney(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnUtils.double2long(value[0]/scaleDoubleFactor[scale]*signum);","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["indexes.add(IndexDescription.load(database,this,store));","break;","store.setCurrentOffsetInPage(offsetInPage+size);","firstPage=store.getNextPagePos();","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","this(database,con,name,columns,null,indexes,foreignKeys);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["importsmallsql.database.language.Language;","finalclassCommandTableextendsCommand{","finalprivateColumnscolumns=newColumns();","finalprivateIndexDescriptionsindexes=newIndexDescriptions();","finalprivateForeignKeysforeignKeys=newForeignKeys();","finalprivateinttableCommandType;"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["LongpageKey=newLong(page);//TODOperformance","TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);","TableStorePageusableLock=null;","while(lock!=null){","if(lock.con==con||"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["SSResultSetrs;","intupdateCount=-1;","Expressionsparams=newExpressions();","finalLoggerlog;","Command(Loggerlog){","this.log=log;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["testClosedConnection();","synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=savepoint;i--){","TransactionSteppage=(TransactionStep)commitPages.remove(i);","page.rollback();","page.freeLock();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","publicclassIdentityextendsNumberimplementsMutable{","finalprivatelongfilePos;","finalprivateFileChannelraFile;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["returntrue;","}elsefullRightRowCounter++;","}else{","if(type==Join.FULL_JOIN){","while(right.next()){","fullRightRowCounter++;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["StoreImplstore=newStoreImpl(table,storePage,type,filePos);","switch(type){","caseSQLTokenizer.LONGVARBINARY:","store.page=newbyte[(int)filePos+PAGE_CONTROL_SIZE];","store.filePos=-1;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidnullRow(){","thrownewError();","voidnoRow(){","currentRow=null;","finalprivatebooleanmove(){","if(rowIdx\<rowList.size()&&rowIdx\>=0){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","abstractclassTransactionStep{","FileChannelraFile;","TransactionStep(FileChannelraFile){","this.raFile=raFile;"]": ["|project://smallsql/src/smallsql/database/TransactionStep.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull();","ObjectgetObject()throwsException{","if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["value/=factor;","value-=value%1;//moduloalsoworkwithvalueslargerlong","if(places\>0){","value/=factor;","}else{","value*=factor;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["buffer.putInt(MAGIC_INDEX);","buffer.putInt(INDEX_VERSION);","buffer.position(0);","raFile.write(buffer);","finalvoidwriteExpression(intcolumnIdx,ExpressionvalueExpression){","intidx=matrix[columnIdx];"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["page=find(page,bytesToBinarySortOrder(expr.getBytes()),nodeList);","break;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","page=find(page,expr.getBoolean()?2:1,1,nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["right=param;","break;","case2:","if(right!=null){","right2=param;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidsetScale(intscale){","this.scale=scale;","intgetScale(){","switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["StringcolName=getIdentifier(token);","Columncol=datatype(false);","col.setName(colName);","token=nextToken();","booleannullableWasSet=false;","booleandefaultWasSet=col.isAutoIncrement();//withdatatypeCOUNTERalreadythisvalueisset"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["page=find(page,longToBinarySortOrder(expr.getLong()),4,nodeList);","break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.DECIMAL:","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);","intvalue;","try{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["offset=0;","if(size==0){","writeShort((int)(value\>\>48));","writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value\>\>32));"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["@Override","voidsaveRef(StoreImploutput)throwsSQLException{","if(fileOffset\<0){","save();","output.writeLong(fileOffset);","@Override"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["{UNSUPPORTED_OPERATION,\"01000\"},","{CANT_LOCK_FILE,\"01000\"},","{DB_EXISTENT,\"01000\"},","{DB_NONEXISTENT,\"01000\"},","{DB_NOT_DIRECTORY,\"01000\"},","{DB_NOTCONNECTED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["row[0]=catalog;","row[2]=table;","try{","if(database.getTableView(con,table)instanceofView){","if(isTypeView){","row[3]=\"VIEW\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["addKeyWord(\"RIGHT\",RIGHT);","addKeyWord(\"RTRIM\",RTRIM);","addKeyWord(\"SOUNDEX\",SOUNDEX);","addKeyWord(\"SPACE\",SPACE);","addKeyWord(\"SUBSTRING\",SUBSTRING);","addKeyWord(\"TRIM\",TRIM);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseNEGATIVE:return-left.getMoney();","throwcreateUnspportedConversion(SQLTokenizer.MONEY);","MutableNumericgetNumeric()throwsjava.lang.Exception{","if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(isMinus)","returnnewExpressionArithmetic(expr,ExpressionArithmetic.NEGATIVE);","returnexpr;","returnnull;","ExpressionFunctionCasecaseExpr(finalCommandcmd)throwsSQLException{","ExpressionFunctionCaseexpr=newExpressionFunctionCase();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Entrytab[]=table;","for(inti=0;i\<tab.length;i++)","for(Entrye=tab[i];e!=null;e=e.next)","if(value.equals(e.value))","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseSQLTokenizer.LCASE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLCase();","break;","caseSQLTokenizer.LEFT:","invalidParamCount=(paramCount!=2);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnois.readObject().toString();","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2hex(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP).toString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["store.writeInt(offsetEnd-offsetStart);","store.setCurrentOffsetInPage(offsetEnd);","store.writeInt(0);//nomoreadditionalinformations","store.writeFinsh(null);//Theconnectionparameterisnullbecausethetableheaderiswrittenimmediately.","firstPage=store.getNextPagePos();","@Override"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnSQLTokenizer.SQL_TSI_HOUR;","caseSQLTokenizer.D:","caseSQLTokenizer.DAY:","returnSQLTokenizer.SQL_TSI_DAY;","caseSQLTokenizer.WEEK:","returnSQLTokenizer.SQL_TSI_WEEK;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["page=add(page,rowOffset,longToBinarySortOrder(expr.getLong()),isLastValues,4);","break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnnum;","default:throwcreateUnspportedConversion(SQLTokenizer.NUMERIC);","ObjectgetObject()throwsjava.lang.Exception{","if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatestaticfinalint[]MISSING_SET={SQLTokenizer.SET};","privatestaticfinalint[]MISSING_EQUALS={SQLTokenizer.EQUALS};","privatestaticfinalint[]MISSING_WHERE={SQLTokenizer.WHERE};","privatestaticfinalint[]MISSING_WHERE_COMMA={SQLTokenizer.WHERE,SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_ISOLATION={SQLTokenizer.ISOLATION};","privatestaticfinalint[]MISSING_LEVEL={SQLTokenizer.LEVEL};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intminSize=offset+freeSize;","if(minSize\<puffer.length){","intnewSize=puffer.length\<\<1;","if(newSize\<minSize)newSize=minSize;","byte[]temp=newbyte[newSize];","System.arraycopy(puffer,0,temp,0,offset);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["return;","setParamAt(convertExpressionIfNeeded(params[0],params[1]),0);","for(intp=1;p\<params.length;p++){","setParamAt(convertExpressionIfNeeded(params[p],left),p);","privatestaticStringgetKeywordFromOperation(intoperation){","inttoken=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["throwex;","}finally{","tableLock.freeLock();","break;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["{SEQUENCE_HEX_INVALID,\"01000\"},","{SEQUENCE_HEX_INVALID_STR,\"01000\"},","{SYNTAX_BASE_OFS,\"01000\"},","{SYNTAX_BASE_END,\"01000\"},","{STXADD_ADDITIONAL_TOK,\"01000\"},","{STXADD_IDENT_EXPECT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returngetFloat(findColumn(columnName));","publicdoublegetDouble(StringcolumnName)throwsSQLException{","returngetDouble(findColumn(columnName));","publicBigDecimalgetBigDecimal(StringcolumnName,intscale)throwsSQLException{","returngetBigDecimal(findColumn(columnName),scale);","publicbyte[]getBytes(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["try{","((CommandSelect)cmd).compile(con);","SSResultSetMetaDatametaData=newSSResultSetMetaData();","metaData.columns=cmd.columnExpressions;","returnmetaData;","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["wasWhiteSpace=true;","}elsequoteBuffer.append(c);","break;","case\'.\':","if(comment!=NOT_COMMENT){","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateExpressionsexpressionParenthesisList(Commandcmd)throwsSQLException{","Expressionslist=newExpressions();","SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_R){","returnlist;","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(filePos\<0||!moveToRow()){","store=newStoreNull(store.getNextPagePos());","@Override","finalbooleanrowInserted(){","returnfilePos\>=firstOwnInsert;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(table==null||tableTimestamp!=table.getTimestamp())compile(con);","finalIndexDescriptionsindexes=table.indexes;","updateCount=0;","cmdSel.from.execute();","cmdSel.beforeFirst();","StringskeyColumnNames=null;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseSQLTokenizer.DATE:","returnreadDate();","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"REAL\"});"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["LongLongList(){","this(16);","LongLongList(intinitialSize){","data=newlong[initialSize*2];","finalintsize(){","returnsize;"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["rows.toArray(result);","returnresult;","Object[][]getIndexInfo(SSConnectioncon,Stringtable,booleanunique)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);","Shorttype=Utils.getShort(DatabaseMetaData.tableIndexOther);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalfloatgetFloat()throwsException{","returngetResult().getFloat();","finaldoublegetDouble()throwsException{","returngetResult().getDouble();","finallonggetMoney()throwsException{","returngetResult().getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["privatevoidexpressionDefList(Commandcmd,Expressionsexpressions,Stringscolumns)throwsSQLException{","SQLTokentoken=nextToken();","if(token.value!=SQLTokenizer.PARENTHESIS_L)throwcreateSyntaxError(token,MISSING_PARENTHESIS_L);","Loop:","while(true){","intoffset=token.offset+token.length;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatevoidtestNotInsertRow()throwsSQLException{","if(isInsertRow){","throwSmallSQLException.create(Language.RSET_ON_INSERT_ROW);","publicvoidupdateRow()throwsSQLException{","try{","if(values==null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["}else{","Entryentry=newTable[i];","while(entry.next!=null)entry=entry.next;","entry.next=e;","e=next;","}while(e!=null);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["do{","if(token.value==SQLTokenizer.MINUS)","isMinus=!isMinus;","token=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","}while(token.value==SQLTokenizer.MINUS||token.value==SQLTokenizer.PLUS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["nextToken(MISSING_PARENTHESIS_R);","returncmd;","caseSQLTokenizer.PARENTHESIS_L:","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","parthesisCount++;","continueSwitch;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam2.getInt();","returnparam3.getInt();","longgetLong()throwsException{","if(param1.getBoolean())","returnparam2.getLong();","returnparam3.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["if(value\>=-4&&value\<256){","returnintegerCache[value+4];","}else","returnnewInteger(value);","staticfinalShortgetShort(intvalue){","if(value\>=-4&&value\<256){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["buffer.write(bytes,0,start);","buffer.write(param4.getBytes());","if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));","buffer.write(bytes,start+length,bytes.length-start-length);","returnbuffer.toByteArray();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["if(values==null){","getUpdateValue(1);","publicStatementgetStatement(){","returnst;","publicObjectgetObject(inti,Mapmap)throwsSQLException{","returngetObject(i);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["voidsave()throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);","buffer.put(rootPage.getUnique()?(byte)1:(byte)0);","buffer.position(0);","raFile.write(buffer);","((FileIndexNode)rootPage).save();"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["setParamAt(convertExpressionIfNeeded(params[p],left),p);","privatestaticStringgetKeywordFromOperation(intoperation){","inttoken=0;","for(inti=1;i\<1000;i++){","if(getOperationFromToken(i)==operation){","token=i;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidsetName(Stringname){","this.name=name;","voidsetDefaultValue(ExpressiondefaultValue,StringdefaultDefinition){","this.defaultValue=defaultValue;","this.defaultDefinition=defaultDefinition;","ExpressiongetDefaultValue(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["ColumnreadColumn(inttableFormatVersion)throwsException{","Columncolumn=newColumn();","column.setFlag(readByte());","column.setName(readString());","column.setDataType(readShort());","intprecision;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Object[][]data=con.getDatabase(false).getColumns(con,tableNamePattern,columnNamePattern);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetColumnPrivileges(Stringcatalog,Stringschema,Stringtable,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"GRANTOR\",\"GRANTEE\",\"PRIVILEGE\",\"IS_GRANTABLE\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["importjava.sql.*;","importjava.util.ArrayList;","importjava.util.HashMap;","importjava.util.Iterator;","importjava.util.List;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnnewExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","case2:","invalidParamCount=false;","expr=newExpressionFunctionIIF();","Expression[]newParams=newExpression[3];","newParams[0]=newExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{ROW_DELETED,\"DerDatensatzistbereitsgelÃ¶scht.\"},","{SAVEPT_INVALID_TRANS,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdieaktuelleTransaction.\"},","{SAVEPT_INVALID_DRIVER,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdiesenTreiber{0}.\"},","{ALIAS_UNSUPPORTED,\"EinAliasistnichterlaubtfÃ¼rdiesenTypvonRowsource.\"},","{ISOLATION_UNKNOWN,\"UnbekantesTransaktionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"UngÃ¼ltigerWertdesFlagsinMethodegetMoreResults:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NUMERIC)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DECIMAL)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.MONEY)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLMONEY)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["try{","drv=newSSDriver();","java.sql.DriverManager.registerDriver(drv);","}catch(Throwablee){","e.printStackTrace();","publicConnectionconnect(Stringurl,Propertiesinfo)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleFloatFactor[scale]*signum;","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleFloatFactor[scale]*signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["break;","caseSQLTokenizer.NOT:","token=nextToken(MISSING_BETWEEN_IN);","previousToken();","isNot=true;","continue;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","token=nextToken();","intdisplaySize;","if(token==null||token.value!=SQLTokenizer.PARENTHESIS_L){","displaySize=30;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["SQLTokentoken=nextToken(COMMANDS_SET);","switch(token.value){","caseSQLTokenizer.TRANSACTION:","returnsetTransaction();","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(insertStorePages.size()\>0){","filePos=0x4000000000000000L;","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","if(store!=null){","if(!store.isValidPage()){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["interval=ExpressionFunctionTimestampDiff.mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});","intgetFunction(){","returnSQLTokenizer.TIMESTAMPADD;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["abstractvoidexecuteImpl(SSConnectioncon,SSStatementst)throwsException;","SSResultSetgetQueryResult()throwsSQLException{","if(rs==null)","throwSmallSQLException.create(Language.RSET_NOT_PRODUCED);","returnrs;","SSResultSetgetResultSet(){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseSQLTokenizer.BIGINT:","returnreadLong();","caseSQLTokenizer.REAL:","return(long)readFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnprevious();","finalbooleanisLast()throwsException{","if(row==0){","returnfalse;","if(row\>getRowCount()){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["cases.add(condition);","results.add(result);","finalvoidsetElseResult(Expressionexpr){","elseResult=expr;","finalvoidsetEnd(){","Expression[]params=newExpression[cases.size()*2+(elseResult!=null?1:0)];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["if(expr==null||other==null){","returnexpr;","switch(expr.getDataType()){","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(rowIdx\>=rowList.size())returntrue;","if(isBeforeFirst()&&rowList.size()==0){","next();","previous();","if(rowList.size()==0)returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["publicTimegetTime(StringcolumnName,Calendarcal)throwsSQLException{","returngetTime(findColumn(columnName),cal);","publicTimestampgetTimestamp(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){","returngetTimestamp(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(idx\>=0)returnidx;","internalExpressions.add(expr);","returninternalExpressions.size()-1;","}else{","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["this.name=name;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{","if(columnExpressions.indexOf(column)\>=0){","throwSmallSQLException.create(Language.COL_DUPLICATE,column);","super.addColumnExpression(column);","voidaddValues(Expressionsvalues){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["SQLToken(intvalue,inttokenStart,inttokenEnd){","this.value=value;","this.offset=tokenStart;","this.length=tokenEnd-tokenStart;","SQLToken(Stringname,intvalue,inttokenStart,inttokenEnd){","this.value=value;"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["privatevoidwhere(CommandSelectcmd)throwsSQLException{","cmd.setWhere(expression(cmd,0));","privatevoidhaving(CommandSelectcmd)throwsSQLException{","cmd.setHaving(expression(cmd,0));","privatestaticfinalint[]COMMANDS={SQLTokenizer.SELECT,SQLTokenizer.DELETE,SQLTokenizer.INSERT,SQLTokenizer.UPDATE,SQLTokenizer.CREATE,SQLTokenizer.DROP,SQLTokenizer.ALTER,SQLTokenizer.SET,SQLTokenizer.USE,SQLTokenizer.EXECUTE,SQLTokenizer.TRUNCATE};","privatestaticfinalint[]COMMANDS_ESCAPE={SQLTokenizer.D,SQLTokenizer.T,SQLTokenizer.TS,SQLTokenizer.FN,SQLTokenizer.CALL};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidsave()throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,fileOffset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","save(store);","fileOffset=store.writeFinsh(null);","@Override"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["@Override","finalbooleannext()throwsException{","if(filePos\<0)returnfalse;","setNextFilePos();","row++;","returnmoveToValidRow();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["noRow();","intgetRow(){","returnrow;","finallonggetRowPosition(){","if(rowPositions==null)rowPositions=newLongLongList();","rowPositions.add(left.getRowPosition(),right.getRowPosition());"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BIGINT\"});","@Override","floatgetFloat(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(isNull())return0;","switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","returnparam2.getLong()+param1.getLong();","caseSQLTokenizer.SQL_TSI_SECOND:","returnparam2.getLong()+param1.getLong()*1000;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["{COL_INVALID_SIZE,\"01000\"},","{COL_WRONG_PREFIX,\"01000\"},","{COL_READONLY,\"01000\"},","{COL_INVALID_NAME,\"01000\"},","{COL_IDX_OUT_RANGE,\"01000\"},","{COL_AMBIGUOUS,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["{INDEX_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidIndexstore.\"},","{INDEX_CORRUPT,\"ErrorinloadingIndex.Indexfileiscorrupt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ToomanyequalsentryinIndex.\"},","{FILE_TOONEW,\"Fileversion({0})offile\'\'{1}\'\'istoonewforthisruntime.\"},","{FILE_TOOOLD,\"Fileversion({0})offile\'\'{1}\'\'istoooldforthisruntime.\"},","{FILE_CANT_DELETE,\"File\'\'{0}\'\'can\'tbedeleted.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["}elseif(!expr.isNull()){","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.min(((MutableInteger)value).value,expr.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnfromEntry.getInt(colIdx);","longgetLong()throwsException{","returnfromEntry.getLong(colIdx);","floatgetFloat()throwsException{","returnfromEntry.getFloat(colIdx);","doublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnparam1.isNull()||param1.getString().length()==0;","finalintgetInt()throwsException{","Stringstr=param1.getString();","if(str==null||str.length()==0)return0;","returnstr.charAt(0);","finalObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|"],
"["{INSERT_WO_FROM,\"DieMethodeinsertRowbenÃ¶tigteinenFROMAusdruck.\"},","{TABLE_CANT_RENAME,\"DieTabelle\'\'{0}\'\'kannnichtumbenanntwerden.\"},","{TABLE_CANT_DROP,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{TABLE_CANT_DROP_LOCKED,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden,weilsiegelocktist.\"},","{TABLE_CORRUPT_PAGE,\"BeschÃ¤digteTabellenseitebeiPosition:{0}.\"},","{TABLE_MODIFIED,\"DieTabelle\'\'{0}\'\'wurdemodifiziert.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["privatebooleanisOuterValid=true;","privateboolean[]isFullNotValid;","privateintfullRightRowCounter;","privateintfullRowCount;","privateintfullReturnCounter=-1;","JoinScroll(inttype,RowSourceleft,RowSourceright,Expressioncondition){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.COMMA:","cmdCreate.addColumn(col);","returntoken;","caseSQLTokenizer.DEFAULT:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","intoffset=token.offset+token.length;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnsize;","finallongget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(longvalue){"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["@Override","doublegetDouble(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["static{","addKeyWord(\"SELECT\",SELECT);","addKeyWord(\"DELETE\",DELETE);","addKeyWord(\"INTO\",INTO);","addKeyWord(\"UPDATE\",UPDATE);","addKeyWord(\"CREATE\",CREATE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["((MutableFloat)value).value+=expr.getFloat();","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value+=expr.getDouble();","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["locksInsert.add(lock);","con.add(lock);","returnlock;","caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:{","LongpageKey=newLong(page);//TODOperformance"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(obj==null)returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","returnnewMutableNumeric((obj==Boolean.TRUE)?1:0);","caseSQLTokenizer.INT:","returnnewMutableNumeric(((Number)obj).intValue());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.PI:","invalidParamCount=(paramCount!=0);","expr=newExpressionFunctionPI();","break;","caseSQLTokenizer.POWER:","invalidParamCount=(paramCount!=2);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["col.setDefaultValue(expr,def);","defaultWasSet=true;","break;","caseSQLTokenizer.IDENTITY:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","col.setAutoIncrement(true);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.GROUP,SQLTokenizer.ORDER,SQLTokenizer.HAVING});","privatevoidfrom(CommandSelectcmd)throwsSQLException{","DataSourcestables=newDataSources();","cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return38;","default:return0;","intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(getDataType(),getPrecision(),getScale());","booleanisDefinitelyWritable(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["Object[]param={\"ALTER\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","CommandalterTable(Stringcatalog,Stringname)throwsSQLException{","SQLTokentokenType=nextToken(MISSING_ADD_ALTER_DROP);","CommandTablecmd=newCommandTable(con.log,catalog,name,tokenType.value);","switch(tokenType.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr=newExpressionFunctionMod();","break;","caseSQLTokenizer.PI:","invalidParamCount=(paramCount!=0);","expr=newExpressionFunctionPI();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatevoidpreviousToken(){","tokenIdx--;","privateSQLTokennextToken(){","if(tokenIdx\>=tokens.size()){","tokenIdx++;//mustbeeverincrementthatthemethodpreviousToken()isworking","returnnull;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["chars[4]=digits[(daten[offset+1]\>\>4)&0x0F];","chars[5]=digits[(daten[offset+1])&0x0F];","chars[6]=digits[(daten[offset+0]\>\>4)&0x0F];","chars[7]=digits[(daten[offset+0])&0x0F];","chars[9]=digits[(daten[offset+5]\>\>4)&0x0F];","chars[10]=digits[(daten[offset+5])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.VARBINARY:","if(defaultValue==-1)","return0xFFFF;","returndefaultValue;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["row[2]=Utils.getInteger(dataType);//DATA_TYPE","row[3]=SQLTokenizer.getKeyWord(dataType);//TYPE_NAME","row[4]=Utils.getInteger(column.getPrecision());//COLUMN_SIZE","row[6]=Utils.getShort(column.getScale());//DECIMAL_DIGITS","row[7]=Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN","rows.add(row);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["this.alias=alias;","voidsetParams(Expression[]params){","this.params=params;","voidsetParamAt(Expressionparam,intidx){","params[idx]=param;","finalExpression[]getParams(){returnparams;}"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["if(name1.equalsIgnoreCase(name2))returntrue;","returnfalse;","abstractbooleanisNull()throwsException;","abstractbooleangetBoolean()throwsException;","abstractintgetInt()throwsException;","abstractlonggetLong()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["page[offset++]=0;","StringreadString(){","intlength=readShort()&0xFFFF;","returnnewString(readChars(length));","voidwriteBytes(byte[]daten){","intnewSize=offset+daten.length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticListparseSQL(char[]sql)throwsSQLException{","SearchNodenode=searchTree;","ArrayListtokens=newArrayList();","intvalue=0;","inttokenStart=0;","booleanwasWhiteSpace=true;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"MONEY\"});","default:thrownewError();","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLINT)),Utils.getInteger(5),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.FLOAT)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.REAL)),Utils.getInteger(7),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DOUBLE)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NVARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.TINYINT:","offset++;","break;","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos,temp,pos+1,length-pos);","temp[pos]=node;","nodes=temp;","privatefinalintfindNodeInsertPos(chardigit,intstart,intend){","if(start==end)returnstart;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["try{","if(cal==null){","returngetTimestamp(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intlength=param2.getInt();","intstart=str.length()-Math.min(length,str.length());","returnstr.substring(start);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["publicclassCreateFileextendsTransactionStep{","privatefinalFilefile;","privatefinalSSConnectioncon;","privatefinalDatabasedatabase;","CreateFile(Filefile,FileChannelraFile,SSConnectioncon,Databasedatabase){","super(raFile);"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["returnnewSSConnection(parse(url,info));","privatePropertiesparse(Stringurl,Propertiesinfo)throwsSQLException{","Propertiesprops=(Properties)info.clone();","if(!acceptsURL(url)){","returnprops;","intidx1=url.indexOf(\':\',5);//searchafter\"jdbc:\""]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["importjava.sql.SQLException;","importsmallsql.database.language.Language;","abstractclassTableViewResultextendsDataSource{","SSConnectioncon;","privateStringalias;","privatelongtableTimestamp;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["if(cmdinstanceofCommandSelect){","try{","((CommandSelect)cmd).compile(con);","SSResultSetMetaDatametaData=newSSResultSetMetaData();","metaData.columns=cmd.columnExpressions;","returnmetaData;"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con==con)","inserts.add(lock.getLink());","returninserts;","finalTableStorePagerequestLock(SSConnectioncon,intpageOperation,longpage)throwsException{","synchronized(locks){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["setObject(findParameter(parameterName),x);","publicvoidsetCharacterStream(StringparameterName,Readerx,intlength)throwsSQLException{","setCharacterStream(findParameter(parameterName),x,length);","publicvoidsetDate(StringparameterName,Datex,Calendarcal)throwsSQLException{","setDate(findParameter(parameterName),x,cal);","publicvoidsetTime(StringparameterName,Timex,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["staticfinalintDROP=206;","staticfinalintALTER=207;","staticfinalintSET=208;","staticfinalintEXECUTE=209;","staticfinalintFROM=210;","staticfinalintWHERE=211;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"IMAGE\",LONGVARBINARY);//aliasforMSSQLServerdatatypeIMAGE","addKeyWord(\"LONGVARBINARY\",LONGVARBINARY);","addKeyWord(\"BLOB\",BLOB);","addKeyWord(\"BYTE\",TINYINT);","addKeyWord(\"TINYINT\",TINYINT);","addKeyWord(\"SMALLINT\",SMALLINT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["e=next;","}while(e!=null);","finalTableStorePageremove(longkey){","inti=(int)(key%table.length);","Entryprev=table[i];","Entrye=prev;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseBETWEEN:","returncomp\>=0&&0\>=left.getNumeric().compareTo(right2.getNumeric());","default:","returngetNumeric().getSignum()!=0;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value);","intreadByte(){","returnpage[offset++];","intreadUnsignedByte(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatefinalLongListinsertedRows=newLongList();","privatebooleanuseSetRowPosition;","privateintsortedRowCount;","privatelonglastRowOffset;","SortedResult(RowSourcerowSource,ExpressionsorderBy){","this.rowSource=rowSource;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["indexes.get(i).writeExpression(c,valueExpress);","store.writeFinsh(con);","for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeFinish(con);","updateCount++;","if(needGeneratedKeys){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseLIKE:returnUtils.like(left.getString(),right.getString());","caseISNULL:returnleft.isNull();","caseISNOTNULL:return!left.isNull();","caseIN:if(right==null)","returnisInList();","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["setNeedGeneratedKeys(autoGeneratedKeys);","returnexecute(sql);","finalpublicbooleanexecute(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);","returnexecute(sql);","finalpublicbooleanexecute(Stringsql,String[]columnNames)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["privatestaticfinalintBYTES_PER_CHAR=2;","finalintgetFunction(){","returnSQLTokenizer.OCTETLEN;","booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|"],
"["if(day\<0){","year--;","continue;","}else","if(day\>=365){","year++;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["char[]puffer=newchar[length];","for(inti=0;i\<length;i++){","puffer[i]=(char)(value[i]&0xFF);","returnpuffer;","finalstaticprivatechar[]numericToBinarySortOrder(MutableNumericnumeric){","int[]value=numeric.getInternalValue();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(shift\>=64)return-1;//apreviouscallhasreturn-1","offset=listEnum.offsetStack[listEnum.stack];","longresult=listEnum.resultStack[listEnum.stack];","booleanfirstNode=(offset==0);//trueifitthefirstentryinalevel","while(true){","intnextEntry=getUnsignedShort();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["privateinttabLockCount;","Table(Databasedatabase,SSConnectioncon,Stringname,FileChannelraFile,longoffset,inttableFormatVersion)throwsException{","super(name,newColumns());","this.database=database;","this.raFile=raFile;","this.firstPage=offset;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Expression[]expParams=expr.getParams();","isAggregateFunction=isAggregateFunction||expr.getType()\>=Expression.GROUP_BEGIN;","if(expParams!=null){","for(intk=0;k\<expParams.length;k++){","Expressionparam=expParams[k];","intparamType=param.getType();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicResultSetgetTables(Stringcatalog,StringschemaPattern,StringtableNamePattern,String[]types)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};","Databasedatabase;","if(catalog==null){","database=con.getDatabase(true);","if(database!=null)"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicstaticfinalStringDAYS_TOOLARGE=\"SS-0252\";","publicstaticfinalStringHOURS_TOOLARGE=\"SS-0253\";","publicstaticfinalStringMINUTES_TOOLARGE=\"SS-0254\";","publicstaticfinalStringSECS_TOOLARGE=\"SS-0255\";","publicstaticfinalStringMILLIS_TOOLARGE=\"SS-0256\";","publicstaticfinalStringDATETIME_INVALID=\"SS-0257\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Expressionscolumns=columnExpressions;","for(inti=0;i\<columns.size();i++){","if(columnName.equalsIgnoreCase(columns.get(i).getAlias()))","returni;","throwSmallSQLException.create(Language.COL_MISSING,columnName);","finalvoidsetDistinct(booleandistinct){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["column.setDataType(readShort());","intprecision;","if(tableFormatVersion==TableView.TABLE_VIEW_OLD_VERSION)","precision=readByte();","else","precision=readInt();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["CommandCreateView(Loggerlog,Stringname){","super(log);","this.type=SQLTokenizer.VIEW;","this.name=name;","voidaddColumn(Columncolumn){","columns.add(column);"]": ["|project://smallsql/src/smallsql/database/CommandCreateView.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionTruncateextendsExpressionFunctionReturnP1Number{","finalintgetFunction(){returnSQLTokenizer.TRUNCATE;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","doublevalue=getDouble();","if(Double.isInfinite(value)||Double.isNaN(value))","returnnull;","returnnewMutableNumeric(value);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["caseSQLTokenizer.BIGINT:","returnnewLong(readLong());","caseSQLTokenizer.REAL:","returnnewFloat(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intinitAutoIncrement(FileChannelraFile,longfilePos)throwsIOException{","if(identity){","counter=newIdentity(raFile,filePos);","defaultValue=newExpressionValue(counter,SQLTokenizer.BIGINT);","return8;","voidsetNewAutoIncrementValue(Expressionobj)throwsException{"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["finalclassLongTreeList{","privatebyte[]data;","privateintsize;","privateintoffset;","staticfinalprivateintpointerSize=3;//ifchangethenalsoinresize()","LongTreeList(){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["updateBytes(findColumn(columnName),x);","publicvoidupdateDate(StringcolumnName,Datex)throwsSQLException{","updateDate(findColumn(columnName),x);","publicvoidupdateTime(StringcolumnName,Timex)throwsSQLException{","updateTime(findColumn(columnName),x);","publicvoidupdateTimestamp(StringcolumnName,Timestampx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["isLeap=true;","dayofyear++;","if(day\<0){","year--;","continue;","}else"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.min(((MutableInteger)value).value,expr.getInt());","break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.min(((MutableLong)value).value,expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["selCmd.setSource(union);","DataSourcesfrom=newDataSources();","from.add(union);","selCmd.setTables(from);","selCmd.addColumnExpression(newExpressionName(\"*\"));","nextToken(MISSING_ALL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intlength=bytes.length;","while(length\>0&&bytes[length-1]==0){","length--;","byte[]b=newbyte[length];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["locks.wait(waitTime);","finalprivateTableStorePagerequestLockImpl(SSConnectioncon,intpageOperation,longpage)throwsSQLException{","synchronized(locks){","if(tabLockConnection!=null&&tabLockConnection!=con)returnnull;","switch(con.isolationLevel){","caseConnection.TRANSACTION_SERIALIZABLE:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.TILDE:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.BIT_NOT/10),ExpressionArithmetic.BIT_NOT);","break;","caseSQLTokenizer.PARENTHESIS_L:","leftExpr=expression(cmd,0);","token=nextToken(MISSING_PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"LIMIT\",LIMIT);","addKeyWord(\"DATABASE\",DATABASE);","addKeyWord(\"TABLE\",TABLE);","addKeyWord(\"VIEW\",VIEW);","addKeyWord(\"INDEX\",INDEX);","addKeyWord(\"PROCEDURE\",PROCEDURE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalintgetDataType(){","returndatatype.getDataType();","finalintgetPrecision(){","finalintdataType=getDataType();","switch(dataType){","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["column.setNewAutoIncrementValue(expr);","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","writeBoolean(expr.getBoolean());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetURL()notyetimplemented.\");","publicvoidsetURL(StringparameterName,URLx)throwsSQLException{","setURL(findParameter(parameterName),x);","publicvoidsetNull(StringparameterName,intsqlType)throwsSQLException{","setNull(findParameter(parameterName),sqlType);","publicvoidsetBoolean(StringparameterName,booleanx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["{COL_READONLY,\"Lacolonna\'\'{0}\'\'Ã¨disolalettura.\"},","{COL_INVALID_NAME,\"Nomedicolonnanonvalido\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Indicedicolonnafuoridall\'\'intervallovalido:{0}.\"},","{COL_AMBIGUOUS,\"Ilnomedicolonna\'\'{0}\'\'Ã¨ambiguo.\"},","{GROUP_AGGR_INVALID,\"FunzionediaggregrazionenonvalidaperlaclausolaGROUPBY:({0}).\"},","{GROUP_AGGR_NOTPART,\"L\'\'espressione\'\'{0}\'\'nonÃ¨partediunafunzionediaggregazioneodellaclausolaGROUPBY.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["{SUBSTR_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"DerStringWertistzugroÃŸfÃ¼rdieSpalte.\"},","{VALUE_BIN_TOOLARGE,\"EinBinÃ¤reWertmitLÃ¤nge{0}istzugroÃŸfÃ¼reineSpaltemitderGrÃ¶ÃŸe{1}.\"},","{VALUE_NULL_INVALID,\"NullWertesindungÃ¼ltigfÃ¼rdieSpalte\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Kannnichtkonvertierenein{0}Wertzueinem{1}Wert.\"},","{BYTEARR_INVALID_SIZE,\"UngÃ¼ltigeBytearrayGroÃŸe{0}fÃ¼rUNIQUEIDENFIER.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleFloatFactor[scale]*signum;","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).floatValue();","publicdoubledoubleValue(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["switch(tokenType.value){","caseSQLTokenizer.DATABASE:","caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["month%=12;","result+=MONTH_DAYS[month]*86400000L;","result+=(year-1970)*31536000000L;//millis365days","result+=((year/4)-(year/100)+(year/400)-477)*86400000L;","if(month\<2&&year%4==0&&(year%100!=0||year%400==0))","result-=86400000L;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewExpressionValue(token.getName(null),SQLTokenizer.VARCHAR);","caseSQLTokenizer.IDENTIFIER:","Stringname=getIdentifier(token);","ExpressionNameexpr=newExpressionName(name);","SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.POINT){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(validValues==MISSING_EXPRESSION){","returntoken;//anexpressioncanbecontainedineverytoken.","if(validValues==MISSING_IDENTIFIER){","switch(token.value){","caseSQLTokenizer.PARENTHESIS_L:","caseSQLTokenizer.PARENTHESIS_R:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["keywords.put(newInteger(UNEQUALS),\"\<\>\");","keywords.put(newInteger(GREATER_EQU),\"\>=\");","staticfinalintSELECT=200;","staticfinalintDELETE=201;","staticfinalintINTO=203;","staticfinalintUPDATE=204;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnpage.getChildNode((char)0);","finalprivateIndexNodeaddNull(IndexNodepage,longrowOffset,booleanisLastValue)throwsSQLException{","if(isLastValue){","page.addNode((char)0,rowOffset);","returnnull;","}else"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(e,message,sqlState);","staticStringtranslateMsg(StringmessageCode,Object[]params){","assert(messageCode!=null&&params!=null):\"Fillparameters.msgCode=\"+messageCode+\"params=\"+params;","Stringlocalized=language.getMessage(messageCode);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["finalprivatevoidwritePointer(intvalue){","for(inti=pointerSize-1;i\>=0;i--){","data[offset++]=(byte)(value\>\>(i*8));","finalprivateintgetUnsignedShort(){","return((data[offset++]&0xFF)\<\<8)|(data[offset++]&0xFF);","finalprivatevoidwriteShort(intvalue){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(expr.equals(data[i]))","returni;","return-1;","finalvoidtoArray(Expression[]array){","System.arraycopy(data,0,array,0,size);","finalExpression[]toArray(){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","returnnewCommandDrop(con.log,catalog,name,tokenType.value);","default:","throwcreateSyntaxError(tokenType,COMMANDS_DROP);","privateCommandalter()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.VIEW:","Database.dropView(con,catalog,name);","break;","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["break;","caseSQLTokenizer.SUBSTRING:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionSubstring();","break;","caseSQLTokenizer.UCASE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"MONTHNAME\",MONTHNAME);","addKeyWord(\"GETDATE\",NOW);//aliasforMSSQLServer","addKeyWord(\"NOW\",NOW);","addKeyWord(\"QUARTER\",QUARTER);","addKeyWord(\"SECOND\",SECOND);","addKeyWord(\"DATEADD\",TIMESTAMPADD);//aliasforMSSQLServer"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importsmallsql.database.language.Language;","abstractclassRowSource{","abstractbooleanisScrollable();","abstractvoidbeforeFirst()throwsException;","booleanisBeforeFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\>0)//castneededforCompiler1.5","value=str;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["buf.append(\'-\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case11://Japanyy/mm/dd","formatNumber(details.year%100,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["importsmallsql.database.language.Language;","finalclassExpressionFunctionSubstringextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.SUBSTRING;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["returnfalse;","TableViewgetTableView(){","returnview;","voiddeleteRow()throwsSQLException{","commandSelect.deleteRow(con);","voidupdateRow(Expression[]updateValues)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseGRE_EQU:returnleft.getDouble()\>=right.getDouble();","caseLESSER:returnleft.getDouble()\<right.getDouble();","caseLES_EQU:returnleft.getDouble()\<=right.getDouble();","caseUNEQUALS:returnleft.getDouble()!=right.getDouble();","caseBETWEEN:","double_left=left.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnrow;","finallonggetRowPosition(){","if(rowPositions==null)rowPositions=newLongLongList();","rowPositions.add(left.getRowPosition(),right.getRowPosition());","returnrowPositions.size()-1;","finalvoidsetRowPosition(longrowPosition)throwsException{"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["return10;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:","return19;","caseSQLTokenizer.REAL:","return7;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.FLOAT:","page=add(page,rowOffset,doubleToBinarySortOrder(expr.getDouble()),isLastValues,4);","break;","caseSQLTokenizer.TINYINT:","page=add(page,rowOffset,expr.getInt(),isLastValues,1);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["keywords.put(newInteger(IDENTIFIER),\"\<identifier\>\");","keywords.put(newInteger(NUMBERVALUE),\"\<number\>\");","staticfinalintPERCENT=\'%\';//37","staticfinalintBIT_AND=\'&\';//38","staticfinalintPARENTHESIS_L=\'(\';//40","staticfinalintPARENTHESIS_R=\')\';//41"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["@Override","intgetInt(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{UNSUPPORTED_CONVERSION,\"NonÃ¨possibleconvertire\'\'{0}\'\'[{1}]in\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneINSERT.\"},","{SUBSTR_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringatroppolungaperlacolonna.\"},","{VALUE_BIN_TOOLARGE,\"Valorebinariodilunghezza{0}eccessivaperlacolonnadilunghezza{1}.\"},","{VALUE_NULL_INVALID,\"Valorinullinonvalidiperlacolonna\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnnValue;","caseSQLTokenizer.MONEY:","MoneymValue=(Money)para1;","if(mValue.value\<0)mValue.value=-mValue.value;","returnmValue;","default:throwcreateUnspportedDataType(param1.getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["staticSearchNodesearchTree;","staticHashtablekeywords=newHashtable(337);","staticfinalintVALUE=0;","staticfinalintSTRING=3;","staticfinalintIDENTIFIER=4;","staticfinalintNUMBERVALUE=5;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.create(Language.JOIN_INSERT);","if(tables.size()==0)","throwSmallSQLException.create(Language.INSERT_WO_FROM);","intsavepoint=con.getSavepoint();","try{","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(0));"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalLoggerlog;","Command(Loggerlog){","this.log=log;","this.columnExpressions=newExpressions();","Command(Loggerlog,ExpressionscolumnExpressions){","this.log=log;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["returngetPrecision();","elsereturngetDisplaySize();","intgetFlag(){","return(identity?1:0)|","(caseSensitive?2:0)|","(nullable?4:0);"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["privatestaticfinalint[]MISSING_NULL={SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_COMMA={SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_COMMA_PARENTHESIS={SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_PARENTHESIS_VALUES_SELECT={SQLTokenizer.PARENTHESIS_L,SQLTokenizer.VALUES,SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_TOKEN_LIST={SQLTokenizer.COMMA,SQLTokenizer.FROM,SQLTokenizer.GROUP,SQLTokenizer.HAVING,SQLTokenizer.ORDER};","privatestaticfinalint[]MISSING_FROM={SQLTokenizer.FROM};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidsave(StoreImplstore)throwsSQLException{","store.writeInt(constraintType);","store.writeInt(columns.size());","for(intc=0;c\<columns.size();c++){","store.writeString(columns.get(c));","store.writeString(name);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["finalvoidsetWhere(Expressionwhere){","this.where=where;","finalvoidsetGroup(Expressionsgroup){","this.groupBy=group;","finalvoidsetHaving(Expressionhaving){","this.having=having;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["while(count--\>0){","values[count]=newExpressionValue();","returnvalues[metaData.getColumnIdx(columnIndex)];","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType);","if(st.con.log.isLogging()){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.REPEATABLE:","token=nextToken(MISSING_READ);","cmd.isolationLevel=Connection.TRANSACTION_REPEATABLE_READ;","returncmd;","caseSQLTokenizer.SERIALIZABLE:","cmd.isolationLevel=Connection.TRANSACTION_SERIALIZABLE;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicclassSSCallableStatementextendsSSPreparedStatementimplementsCallableStatement{","privatebooleanwasNull;","SSCallableStatement(SSConnectioncon,Stringsql)throwsSQLException{","super(con,sql);","SSCallableStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,sql,rsType,rsConcurrency);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionReplace();","break;","caseSQLTokenizer.RIGHT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRight();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteLong(longvalue){","verifyFreePufferSize(8);","puffer[offset++]=(byte)(value\>\>56);","puffer[offset++]=(byte)(value\>\>48);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returnnewMutableNumeric(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnnewMutableNumeric(Utils.bytes2double(readLongBinary()));","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseGREATER:returnleft.getDouble()\>right.getDouble();","caseGRE_EQU:returnleft.getDouble()\>=right.getDouble();","caseLESSER:returnleft.getDouble()\<right.getDouble();","caseLES_EQU:returnleft.getDouble()\<=right.getDouble();","caseUNEQUALS:returnleft.getDouble()!=right.getDouble();","caseBETWEEN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,newObject[]{savepoint});","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionPIextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.PI;}","booleanisNull()throwsException{","returnfalse;","finaldoublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionPI.java|"],
"["caseSQLTokenizer.MONEY:","((Money)value).value+=expr.getMoney();","break;","default:throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM,SQLTokenizer.getKeyWord(dataType));","break;","caseMAX:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.LIKE:","caseSQLTokenizer.OR:","caseSQLTokenizer.AND:","caseSQLTokenizer.BIT_AND:","caseSQLTokenizer.BIT_OR:","caseSQLTokenizer.BIT_XOR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{INDEX_CORRUPT,\"01000\"},","{INDEX_TOOMANY_EQUALS,\"01000\"},","{FILE_TOONEW,\"01000\"},","{FILE_TOOOLD,\"01000\"},","{FILE_CANT_DELETE,\"01000\"},","{ROW_0_ABSOLUTE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionYear();","break;","caseSQLTokenizer.IIF:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionIIF();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intstart=Math.min(Math.max(0,param2.getInt()-1),str.length());","intlength=Math.min(param3.getInt(),str.length());","StringBufferbuffer=newStringBuffer();","buffer.append(str.substring(0,start));","buffer.append(param4.getString());","if(length\<0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["StoreNull(longnextPos){","nextPagePos=nextPos;","finalbooleanisNull(intoffset){","returntrue;","finalbooleangetBoolean(intoffset,intdataType)throwsException{","returnfalse;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["longList=null;","nodeStack.setSize(1);","((IndexNodeScrollStatus)nodeStack.peek()).afterLast();","privatefinallonggetReturnValue(Objectvalue){","if(rootPage.getUnique()){","return((Long)value).longValue();"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionATan2extendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.ATAN2;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionATan2.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importjava.util.List;","finalclassTableResultextendsTableViewResult{","finalprivateTabletable;","privateListinsertStorePages;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["Objectobj=findRows(expressions,true,nodeList);","if(!rootPage.getUnique()){","LongTreeListlist=(LongTreeList)obj;","list.remove(rowOffset);","if(list.getSize()\>0)return;","IndexNodenode=(IndexNode)nodeList.get(nodeList.size()-1);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticfinalintBLOB=316;","staticfinalintTINYINT=321;","staticfinalintSMALLINT=322;","staticfinalintINT=323;","staticfinalintCOUNTER=324;//aliasforINTIDENTITY,isusedfromMSACCESS","staticfinalintBIGINT=325;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"DATETIME\",TIMESTAMP);//aliasforMSSQLServerdatatypeDATETIME","addKeyWord(\"TIMESTAMP\",TIMESTAMP);","addKeyWord(\"SMALLDATETIME\",SMALLDATETIME);","addKeyWord(\"CHARACTER\",CHAR);//aliasforCHAR","addKeyWord(\"CHAR\",CHAR);","addKeyWord(\"NCHAR\",NCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["thrownewNullPointerException(\"Columnisnull.\");","if(size\>=data.length){","resize(size\<\<1);","data[size++]=column;","Columnscopy(){","Columnscopy=newColumns();"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["return(obj==Boolean.TRUE)?10000:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","return((Number)obj).longValue()*10000;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["importjava.io.*;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;","classColumnimplementsCloneable{","privateExpressiondefaultValue=Expression.NULL;//DefaultvalueforINSERT"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["if(comment!=NOT_COMMENT){","break;","if(comment==LINE_COMMENT){","if(c==\'\\r\'||c==\'\\n\'){","comment=NOT_COMMENT;","wasWhiteSpace=true;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StringgetString(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","returnreadBoolean()?\"1\":\"0\";"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"SMALLMONEY\",SMALLMONEY);","addKeyWord(\"MONEY\",MONEY);","addKeyWord(\"NUMBER\",DECIMAL);","addKeyWord(\"VARNUM\",DECIMAL);","addKeyWord(\"DECIMAL\",DECIMAL);","addKeyWord(\"NUMERIC\",NUMERIC);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["expr=expression(cmd,0);","nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampDiff(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);","returnexpr;","caseSQLTokenizer.TIMESTAMPADD:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["IndexDescriptionindex=index(cmdCreate,token.value,tableName,constraintName,null);","if(token.value==SQLTokenizer.FOREIGN){","nextToken(MISSING_REFERENCES);","Stringpk=nextIdentifier();","Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TIME:","writeTime(expr.getLong());","break;","caseSQLTokenizer.DATE:","writeDate(expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intt=(int)(time%86400000);","intd=(int)(time/86400000);","if(t\<0){","t+=86400000;","d--;","millis=t%1000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicDatabaseMetaDatagetMetaData(){","returnmetadata;","publicvoidsetReadOnly(booleanreadOnly){","publicbooleanisReadOnly(){","returnreadonly;","publicvoidsetCatalog(Stringcatalog)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnnull;","publicResultSetMetaDatagetMetaData(){","returnmetaData;","publicObjectgetObject(intcolumnIndex)throwsSQLException{","try{","Objectobj=getValue(columnIndex).getApiObject();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["row[3]=Boolean.valueOf(!index.isUnique());//NON_UNIQUE","row[5]=index.getName();//INDEX_NAME","row[6]=type;//TYPE","row[7]=Utils.getShort(c+1);//ORDINAL_POSITION","row[8]=columns.get(c);//COLUMN_NAME","rows.add(row);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["buf.append(Integer.toString(value[0]));","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","buf.append(Long.toString(temp));","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnnewFloat(getFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(getDouble());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["while(true){","intnextEntry=getUnsignedShort();","if(nextEntry==octet){","if(shift==0){","offset-=2;","removeNodeLastLevel();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["cmd=parser.parse(con,sql);","top=cmd.getMaxRows();","publicResultSetexecuteQuery()throwsSQLException{","executeImp();","returncmd.getQueryResult();","publicintexecuteUpdate()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["else","if(newValueinstanceofString)","this.dataType=SQLTokenizer.VARCHAR;","else","if(newValueinstanceofByte)","this.dataType=SQLTokenizer.TINYINT;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{TABLE_CANT_DROP,\"Table\'\'{0}\'\'can\'\'tbedropped.\"},","{TABLE_CANT_DROP_LOCKED,\"Table\'\'{0}\'\'can\'\'tdropbecauseislocked.\"},","{TABLE_CORRUPT_PAGE,\"Corrupttablepageatposition:{0}.\"},","{TABLE_MODIFIED,\"Table\'\'{0}\'\'wasmodified.\"},","{TABLE_DEADLOCK,\"Deadlock,cannotcreatealockontable\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TableorView\'\'{0}\'\'doesnotexist.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["staticfinalintFULL=226;","staticfinalintCROSS=227;","staticfinalintUSE=228;","staticfinalintTOP=229;","staticfinalintADD=230;","staticfinalintLIMIT=231;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(ForeignKeyforeignKey){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=foreignKey;"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["command.relative(0);//refreshtherow","clearRowBuffer();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicvoiddeleteRow()throwsSQLException{","st.con.log.println(\"deleteRow()\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["ForeignKeyforeignKey=foreignKeys.get(i);","TableViewpkTable=getTableView(con,foreignKey.pkTable);","if(!(pkTableinstanceofTable)){","throwSmallSQLException.create(Language.FK_NOT_TABLE,foreignKey.pkTable);","voidcreateTable(SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Expressionslist=expressionParenthesisList(cmd);","for(inti=0;i\<list.size();i++){","cmd.addColumnExpression(list.get(i));","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","}elsecmd.noColumns=true;","Switch:while(true)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseFIRST:","caseLAST:","clear();","break;","caseMIN:","caseMAX:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["importjava.sql.SQLException;","importsmallsql.database.language.Language;","finalclassIndexDescription{","staticfinalintMAGIC_INDEX=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'I\';","staticfinalintINDEX_VERSION=1;","privatefinalStringname;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["currentRow=null;","finalprivatebooleanmove(){","if(rowIdx\<rowList.size()&&rowIdx\>=0){","currentRow=(ExpressionValue[])rowList.get(rowIdx);","returntrue;","currentRow=null;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["Expression[]p1=((Expression)expr).params;","Expression[]p2=params;","if(p1!=null&&p2!=null){","if(p1==null)returnfalse;","for(inti=0;i\<p1.length;i++){","if(!p2[i].equals(p1[i]))returnfalse;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnnewMutableNumeric(getFloatImpl());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDoubleImpl());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnInteger.parseInt(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.PARENTHESIS_R:","returnlist;","caseSQLTokenizer.COMMA:","continue;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","if(cal==null){","returngetDate(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privatefinalDatabasedatabase;","CreateFile(Filefile,FileChannelraFile,SSConnectioncon,Databasedatabase){","super(raFile);","this.file=file;","this.con=con;","this.database=database;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["break;","caseSQLTokenizer.LEFT:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.LEFT_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finallonggetLong()throwsException{","if(isNull())return0;","returnLong.parseLong(getString().trim());","finalfloatgetFloat()throwsException{","if(isNull())return0;","returnFloat.parseFloat(getString().trim());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["staticintgetDisplaySize(intdataType,intprecision,intscale){","switch(dataType){","caseSQLTokenizer.BIT:","return1;//1and0","caseSQLTokenizer.BOOLEAN:","return5;//trueandfalse"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnstore.getFloat(offsets[colIdx],dataTypes[colIdx]);","@Override","finaldoublegetDouble(intcolIdx)throwsException{","returnstore.getDouble(offsets[colIdx],dataTypes[colIdx]);","@Override","finallonggetMoney(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["staticfinalintCOS=1006;","staticfinalintCOT=1007;","staticfinalintDEGREES=1008;","staticfinalintEXP=1009;","staticfinalintFLOOR=1010;","staticfinalintLOG=1011;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{INSERT_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneINSERT.\"},","{SUBSTR_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringatroppolungaperlacolonna.\"},","{VALUE_BIN_TOOLARGE,\"Valorebinariodilunghezza{0}eccessivaperlacolonnadilunghezza{1}.\"},","{VALUE_NULL_INVALID,\"Valorinullinonvalidiperlacolonna\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Impossibleconvertireunvalore{0}inunvalore{1}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["StringtableName=catalog=nextIdentifier();","switch(tokenType.value){","caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(next()){/*scrollaftertheend*/}","booleanabsolute(introw)throwsException{","if(row==0)","throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(row\<0){","afterLast();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["Command(Loggerlog,ExpressionscolumnExpressions){","this.log=log;","this.columnExpressions=columnExpressions;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{","columnExpressions.add(column);","voidaddParameter(ExpressionValueparam){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["for(inti=0;i\<places;i++){","factor*=10;","value*=factor;","}else{","for(inti=0;i\>places;i--){","factor*=10;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["this.name=name;","this.columns=columns;","staticTableViewload(SSConnectioncon,Databasedatabase,Stringname)throwsSQLException{","FileChannelraFile=null;","try{","StringfileName=Utils.createTableViewFileName(database,name);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["SQLTokenpara=nextToken(MISSING_EXPRESSION);","Expressionexpr;","switch(token.value){","caseSQLTokenizer.D://dateescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.nio.channels.FileChannel;","importsmallsql.database.language.Language;","classViewextendsTableView{","finalStringsql;","finalCommandSelectcommandSelect;","View(SSConnectioncon,Stringname,FileChannelraFile,longoffset)throwsException{"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["classCommandDeleteextendsCommandSelect{","CommandDelete(Loggerlog){","super(log);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);","TableViewResultresult=TableViewResult.getTableViewResult(from);"]": ["|project://smallsql/src/smallsql/database/CommandDelete.java|"],
"["token=nextToken(MISSING_NULL);","col.setNullable(false);","nullableWasSet=true;","break;","caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidsetFlag(intflag){","identity=(flag&1)\>0;","caseSensitive=(flag&2)\>0;","nullable=(flag&4)\>0;","Columncopy(){","try{"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returntrue;","rowList=null;","Objectrows;","do{","if(!left.next()){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["booleanhasAlias(){","returnalias!=null;","booleaninit(SSConnectioncon)throwsException{","TableViewtableView=getTableView();","if(tableTimestamp!=tableView.getTimestamp()){","this.con=con;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["((IndexNode)value).saveRef(output);","output.writeShort(nodes.length);","for(inti=0;i\<nodes.length;i++){","nodes[i].saveRef(output);","voidsaveRef(StoreImploutput)throwsSQLException{","IndexNodeloadRef(longoffset)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["result+=minute*60000;","result+=hour*3600000;","result+=(day-1)*86400000L;","if(month\>11){","year+=month/12;","month%=12;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["~intValue:","intValue^0x80000000;","finalstaticprivatelongdoubleToBinarySortOrder(doublevalue){","longintValue=Double.doubleToLongBits(value);","return(intValue\<0)?","~intValue:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["expr=newExpressionFunctionDayOfMonth();","break;","caseSQLTokenizer.DAYOFWEEK:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfWeek();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(pos==-1){","IndexNodenode=createIndexNode(unique,digit);","saveNode(node);","returnnode;","}else{","returnnodes[pos];"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["importjava.sql.*;","classViewResultextendsTableViewResult{","finalprivateViewview;","finalprivateExpressionscolumnExpressions;","finalprivateCommandSelectcommandSelect;","ViewResult(Viewview){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["{PARAM_EMPTY,\"Parameter{0}isempty.\"},","{PARAM_IDX_OUT_RANGE,\"Parameterindex{0}outofrange.Thevaluemustbebetween1and{1}.\"},","{COL_DUPLICATE,\"Thereisaduplicatedcolumnname:\'\'{0}\'\'.\"},","{COL_MISSING,\"Column\'\'{0}\'\'notfound.\"},","{COL_VAL_UNMATCH,\"ColumnsandValuescountisnotidentical.\"},","{COL_INVALID_SIZE,\"Invalidcolumnsize{0}forcolumn\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["addKeyWord(\"TRUNCATE\",TRUNCATE);","staticfinalintASCII=1100;//firststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","staticfinalintBITLEN=1101;","staticfinalintCHARLEN=1102;","staticfinalintCHARACTLEN=1103;","staticfinalint_CHAR=1104;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicfloatfloatValue(){","returnvalue;","publicintintValue(){","return(int)value;","publiclonglongValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|"],
"["if(valueinstanceofLong){","output.writeByte(1);","output.writeLong(((Long)value).longValue());","}else","if(valueinstanceofLongTreeList){","output.writeByte(2);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){","if(isSetFrom){","throwSmallSQLException.create(Language.COL_AMBIGUOUS,expr.getName());","isSetFrom=true;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["intlength=bytes.length;","while(start\<length&&bytes[start]==0){","start++;","length-=start;","byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["StringtableAlias=expr.getTableAlias();","if(tableAlias!=null){","intt=0;","for(;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);","if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["invalidParamCount=(paramCount%2!=0);","ExpressionFunctionCaseexprCase=newExpressionFunctionCase();","for(inti=0;i\<paramCount-1;i+=2)","exprCase.addCase(params[i],params[i+1]);","exprCase.setEnd();","expr=exprCase;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case4://germandd.mm.yy","formatNumber(details.day,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returntrue;","returnfalse;","staticbooleanisNumberDataType(intdataType){","returnisSignedDataType(dataType)||dataType==SQLTokenizer.TINYINT;","staticbooleanisBinaryDataType(intdataType){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["Stringstr1=ExpressionFunctionSoundex.getString(param1.getString());","Stringstr2=ExpressionFunctionSoundex.getString(param2.getString());","intdiff=0;","for(inti=0;i\<4;i++){","if(str1.charAt(i)==str2.charAt(i)){","diff++;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["switch(con.isolationLevel){","caseConnection.TRANSACTION_SERIALIZABLE:","serializeConnections.put(con,con);","break;","switch(pageOperation){","caseSQLTokenizer.CREATE:{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["booleannext()throwsException{","booleanresult;","if(fullReturnCounter\>=0){","do{","if(fullReturnCounter\>=fullRowCount){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["publicResultSetgetIndexInfo(Stringcatalog,Stringschema,Stringtable,booleanunique,booleanapproximate)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"NON_UNIQUE\",\"INDEX_QUALIFIER\",\"INDEX_NAME\",\"TYPE\",\"ORDINAL_POSITION\",\"COLUMN_NAME\",\"ASC_OR_DESC\",\"CARDINALITY\",\"PAGES\",\"FILTER_CONDITION\"};","Object[][]data=con.getDatabase(false).getIndexInfo(con,table,unique);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{FLAGVALUE_INVALID,\"UngÃ¼ltigerWertdesFlagsinMethodegetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"UngÃ¼ltigesArgumentinMethodesetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeyswurdennichtangefordert.\"},","{SEQUENCE_HEX_INVALID,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"SyntaxErrorbeiPosition{0}in\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["addKeyWord(\"LOG\",LOG);","addKeyWord(\"LOG10\",LOG10);","addKeyWord(\"MOD\",MOD);","addKeyWord(\"PI\",PI);","addKeyWord(\"POWER\",POWER);","addKeyWord(\"RADIANS\",RADIANS);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StoreImplgetStore(TableStorePagestorePage,intpageOperation)throwsException{","returnStoreImpl.recreateStore(this,storePage,pageOperation);","StoreImplgetStoreInsert(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.INSERT,-1);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-1);","StoreImplgetStoreTemp(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintSELECT=200;","staticfinalintDELETE=201;","staticfinalintINTO=203;","staticfinalintUPDATE=204;","staticfinalintCREATE=205;","staticfinalintDROP=206;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{MINUTES_TOOLARGE,\"ValoredeiminutitroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"ValoredeiseconditroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"VAloredeimilliseconditroppoaltoinTIMESTAMP\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'Ã¨unDATE,TIMEorTIMESTAMPnonvalido.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Conversionenonsupportataversoiltipodidato\'\'{0}\'\'daltipo\'\'{1}\'\'perl\'\'operazione\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Tipodidato\'\'{0}\'\'nonsupportatoperl\'\'operazione\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["ViewResultviewResult=newViewResult(con,select());","tables.add(viewResult);","returnviewResult;","Stringcatalog=null;","Stringname=getIdentifier(token);","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr=newExpressionFunctionCeiling();","break;","caseSQLTokenizer.COS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCos();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["year=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\'-\',idx1);","month=Integer.parseInt(datetime.substring(idx1,idx2).trim())-1;","idx1=idx2+1;","idx2=datetime.indexOf(\'\',idx1);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["switch(lockType){","caseLOCK_INSERT:","for(inti=0;i\<locksInsert.size();i++){","prev=lock=(TableStorePage)locksInsert.get(i);","while(lock!=null){","if(lock==storePage){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnInteger.parseInt(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnInteger.parseInt(readLongString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{SEQUENCE_HEX_INVALID_STR,\"Sequenceesadecimalenonvalidaallapositione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Erroredisintassiallaposizione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Erroredisintassi,fineinattesadellastringaSQL.\"},","{STXADD_ADDITIONAL_TOK,\"Tokenaggiuntivodopolafinedell\'\'istruzioneSQL.\"},","{STXADD_IDENT_EXPECT,\"Identificatoreatteso.\"},","{STXADD_IDENT_EMPTY,\"Identificatorevuoto.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["caseSQLTokenizer.DATE:","return10;","caseSQLTokenizer.SMALLDATETIME:","return16;","caseSQLTokenizer.UNIQUEIDENTIFIER:","return36;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["DataSourcestables=newDataSources();","cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken=nextToken(MISSING_SET);","while(true){","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.INT:","page=add(page,rowOffset,intToBinarySortOrder(expr.getInt()),isLastValues,2);","break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.VALUES:{","token=nextToken(MISSING_PARENTHESIS_L);","cmd.addValues(expressionParenthesisList(cmd));","returncmd;","caseSQLTokenizer.SELECT:","cmd.addValues(select());"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["daten[8]=hex2byte(chars,19);","daten[9]=hex2byte(chars,21);","daten[10]=hex2byte(chars,24);","daten[11]=hex2byte(chars,26);","daten[12]=hex2byte(chars,28);","daten[13]=hex2byte(chars,30);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["return(int)readDate();","caseSQLTokenizer.SMALLDATETIME:","return(int)readSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"INT\"});","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidwriteExpression(Expressionexpr,Columncolumn)throwsException{","booleanisNull=expr.isNull();","if(isNull&&!column.isNullable()){","throwSmallSQLException.create(Language.VALUE_NULL_INVALID,column.getName());","intdataType=column.getDataType();","if(isNull){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["@Override","longgetLong(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateStoreImplupdatePointer;","privateStoreImpl(Tabletable,StorePagestorePage,inttype,longfilePos){","this.table=table;","this.storePage=storePage;","this.filePos=filePos;","this.type=type;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["nextToken(MISSING_BY);","cmd.setOrder(expressionTokenList(cmd,SQLTokenizer.ORDER));","privatevoidlimit(CommandSelectselCmd)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","try{","intmaxRows=Integer.parseInt(token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnsize==0;","finalTableStorePageget(longkey){","inti=(int)(key%table.length);","Entrye=table[i];","while(true){","if(e==null)"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["rowIdx=-1;","voidexecute()throwsException{","rowSource.execute();","rowList.clear();","rowIdx=-1;","booleanisExpressionsFromThisRowSource(Expressionscolumns){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["rowIdx++;","returnmove();","finalbooleanlast(){","rowIdx=rowList.size()-1;","returnmove();","finalbooleanisLast(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","returnreadBoolean()?\"1\":\"0\";","caseSQLTokenizer.BOOLEAN:","returnString.valueOf(readBoolean());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatestaticfinalint[]DatatypeRange={","SQLTokenizer.TIMESTAMP,","SQLTokenizer.SMALLDATETIME,","SQLTokenizer.DATE,","SQLTokenizer.TIME,","SQLTokenizer.DOUBLE,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"NTEXT\",LONGNVARCHAR);","addKeyWord(\"LONGNVARCHAR\",LONGNVARCHAR);","addKeyWord(\"LONG\",LONG);//aliasforOracleLONGandLONGRAW","addKeyWord(\"CLOB\",CLOB);","addKeyWord(\"NCLOB\",NCLOB);","addKeyWord(\"UNIQUEIDENTIFIER\",UNIQUEIDENTIFIER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["set.name=name;","returnset;","caseSQLTokenizer.EXECUTE:","returnexecute();","caseSQLTokenizer.TRUNCATE:","returntruncate();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["classSSSavepointimplementsSavepoint{","privatefinalintid;","privatefinalStringname;","longtransactionTime;","SSSavepoint(intid,Stringname,longtransactionTime){","this.id=id;"]": ["|project://smallsql/src/smallsql/database/SSSavepoint.java|"],
"["caseSQLTokenizer.TIMESTAMP:","return23;","caseSQLTokenizer.TIME:","return8;","caseSQLTokenizer.DATE:","return10;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["intsize=param1.getInt();","if(size\<0){","returnnull;","char[]buffer=newchar[size];","for(inti=0;i\<size;i++){","buffer[i]=\'\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["page.commit();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.freeLock();","commitPages.clear();","transactionTime=System.currentTimeMillis();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.NCHAR:","writeString(expr.getString(),column.getDisplaySize(),false);","break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","writeString(expr.getString(),column.getDisplaySize(),true);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateDataSource[]data=newDataSource[4];","finalintsize(){","returnsize;","finalDataSourceget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["intcount=columns.size();","store.writeInt(count);","for(inti=0;i\<count;i++){","store.writeColumn(columns.get(i));","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindexDesc=indexes.get(i);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getLong(),dataType);","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["while(newRow++\<0){","if(!previous()){","returnfalse;","returntrue;","booleanrelative(introws)throwsException{","if(rows==0)return(row!=0);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(locks.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;","for(inti=0;i\<locksInsert.size();i++){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["messages.put(key,value);","privatefinalvoidsetSqlStates(){","Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<SQL_STATES.length;i++){","Stringkey=SQL_STATES[i][0];","if(!inserted.add(key)){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["packagesmallsql.database;","importjava.io.ByteArrayOutputStream;","importsmallsql.database.language.Language;","publicclassExpressionFunctionInsertextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.INSERT;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["addKeyWord(\"LAST\",LAST);","addKeyWord(\"AVG\",AVG);","classSearchNode{","intvalue;","charletter;","SearchNodenextLetter;//nextcharacterofakeyword"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{TABLE_OR_VIEW_MISSING,\"01000\"},","{TABLE_FILE_INVALID,\"01000\"},","{TABLE_OR_VIEW_FILE_INVALID,\"01000\"},","{TABLE_EXISTENT,\"01000\"},","{FK_NOT_TABLE,\"01000\"},","{PK_ONLYONE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["thrownewError(String.valueOf(expr.getDataType()));","returnpage;","finalvoidaddValues(longrowOffset,Expressionsexpressions)throwsException{","IndexNodepage=this.rootPage;","intcount=expressions.size();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["prev.next=next;","returne.value;","prev=e;","e=next;","returnnull;","finalvoidclear(){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["booleanisCaseSensitive(){","returncolumn.isCaseSensitive();","booleanisNullable(){","returncolumn.isNullable();","booleanisDefinitelyWritable(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["MutableNumericnumeric=newMutableNumeric(this);","numeric.setScale(0);","returnnumeric.longValue();","return(signum\>0)?Long.MAX_VALUE:Long.MIN_VALUE;","publicfloatfloatValue(){","if(value.length==0||signum==0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["packagesmallsql.database;","importsmallsql.database.language.Language;","finalclassExpressionFunctionSubstringextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.SUBSTRING;","finalbooleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["row=0;","finalintgetRow()throwsException{","returnrow;","privatefinalintgetBitCount(){","intsize=dataSources.size();","intbitCount=0;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnfalse;","booleanisAutoIncrement(){","returnfalse;","booleanisCaseSensitive(){","returnfalse;","booleanisNullable(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","writeDouble(expr.getDouble());","break;","caseSQLTokenizer.MONEY:","writeLong(expr.getMoney());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).floatValue();","publicdoubledoubleValue(){","if(value.length==0||signum==0){","return0;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnleft.getNumeric().getSignum()!=0;","intcomp=left.getNumeric().compareTo(right.getNumeric());","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returncomp==0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"COLUMN_NAME\",\"COLUMN_TYPE\",\"DATA_TYPE\",\"TYPE_NAME\",\"PRECISION\",\"LENGTH\",\"SCALE\",\"RADIX\",\"NULLABLE\",\"REMARKS\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTables(Stringcatalog,StringschemaPattern,StringtableNamePattern,String[]types)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};","Databasedatabase;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["move();","finalbooleanrowInserted(){","returnfalse;","finalbooleanrowDeleted(){","returnfalse;","voidnullRow(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["TableViewtableView=(TableView)iterator.next();","tableView.close();","iterator.remove();","master.close();","staticTableViewgetTableView(SSConnectioncon,Stringcatalog,StringtableName)throwsSQLException{","returngetDatabase(con,catalog).getTableView(con,tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["charm=Character.toUpperCase(pattern.charAt(mIdx++));","switch(m){","case\'%\':","range=true;","break;","case\'_\':"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["importjava.util.Properties;","importsmallsql.database.language.Language;","publicclassSSConnectionimplementsConnection{","privatefinalbooleanreadonly;","privateDatabasedatabase;","privatebooleanautoCommit=true;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["store.page=newbyte[(int)filePos+PAGE_CONTROL_SIZE];","store.filePos=-1;","break;","caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:","store.page=newbyte[DEFAULT_PAGE_SIZE];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(m){","case\'%\':","range=true;","break;","case\'_\':","sIdx++;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseBETWEEN:","long_left=left.getLong();","return_left\>=right.getLong()&&right2.getLong()\>=_left;","default:","returngetLong()!=0;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["longgetMoney()throwsException{","if(param1.getBoolean())","returnparam2.getMoney();","returnparam3.getMoney();","MutableNumericgetNumeric()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["returnconstraintType==SQLTokenizer.PRIMARY;","finalbooleanisUnique(){","returnconstraintType==SQLTokenizer.PRIMARY||constraintType==SQLTokenizer.UNIQUE;","finalStringsgetColumns(){","returncolumns;","finalintmatchFactor(Stringsstrings){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returngetString();","caseSQLTokenizer.LONGVARBINARY:","returngetBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["returnisCurrentRow?row:0;","finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);","finalvoidnullRow(){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["daten[3]=hex2byte(chars,0);","daten[2]=hex2byte(chars,2);","daten[1]=hex2byte(chars,4);","daten[0]=hex2byte(chars,6);","daten[5]=hex2byte(chars,9);","daten[4]=hex2byte(chars,11);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?newMutableNumeric(1):newMutableNumeric(0);","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnnewMutableNumeric(Utils.bytes2double(readBinary()));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{ROW_NOCURRENT,\"Nocurrentrow.\"},","{ROWS_WRONG_MAX,\"Wrongmaxrowsvalue:{0}.\"},","{ROW_LOCKED,\"RowislockedfromanotherConnection.\"},","{ROW_DELETED,\"Rowalreadydeleted.\"},","{SAVEPT_INVALID_TRANS,\"Savepointisnotvalidforthistransaction.\"},","{SAVEPT_INVALID_DRIVER,\"Savepointisnotvalidforthisdriver{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returntrue;","publicbooleannullsAreSortedAtStart(){","returnfalse;","publicbooleannullsAreSortedAtEnd(){","returnfalse;","publicStringgetDatabaseProductName(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["break;","caseSQLTokenizer.REPEAT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRepeat();","break;","caseSQLTokenizer.REPLACE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return255;","publicintgetMaxCatalogNameLength(){","return255;","publicintgetMaxRowSize(){","return0;","publicbooleandoesMaxRowSizeIncludeBlobs(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\>0)","value=newValue;","break;","caseSQLTokenizer.MONEY:","((Money)value).value=Math.min(((Money)value).value,expr.getMoney());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["for(inti=0;i\<results.size();i++){","dataType=ExpressionArithmetic.getDataType(dataType,results.get(i).getDataType());","returndataType;","finalintgetPrecision(){","intprecision=0;","for(inti=results.size()-1;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["isNot=false;","leftExpr=newExpressionArithmetic(leftExpr,ExpressionArithmetic.NOT);","previousToken();","returnleftExpr;","privateExpressionexpressionSingle(Commandcmd,SQLTokentoken)throwsSQLException{","booleanisMinus=false;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(log.isLogging())log.println(\"AutoCommit:\"+autoCommit);","if(this.autoCommit!=autoCommit){","commit();","this.autoCommit=autoCommit;","publicbooleangetAutoCommit(){","returnautoCommit;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["intlastUndsc=part.lastIndexOf(\"_\");","if(lastUndsc\>-1)part=part.substring(0,lastUndsc);","elsebreak;","thrownewIllegalArgumentException(\"Localenotfoundinthetree:\"+localeStr);","protectedLanguage(){","messages=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(signum==0)returnEMPTY_BYTES;","byte[]complement;","intoffset;","intv=0;","while(v\<value.length&&value[v]==0)v++;","if(v==value.length)returnEMPTY_BYTES;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["addKeyWord(\"JAVA_OBJECT\",JAVA_OBJECT);","staticfinalintD=400;","staticfinalintT=401;","staticfinalintTS=402;","staticfinalintFN=403;","staticfinalintCALL=404;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.columnExpressions=commandSelect.columnExpressions;","this.commandSelect=commandSelect;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","booleaninit(SSConnectioncon)throwsException{","if(super.init(con)){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["finalvoidsetDistinct(booleandistinct){","this.isDistinct=distinct;","finalvoidsetSource(RowSourcejoin){","this.from=join;","finalvoidsetTables(DataSourcesfrom){","this.tables=from;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["}finally{","if(con.getAutoCommit())con.commit();","abstractvoidexecuteImpl(SSConnectioncon,SSStatementst)throwsException;","SSResultSetgetQueryResult()throwsSQLException{","if(rs==null)","throwSmallSQLException.create(Language.RSET_NOT_PRODUCED);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["returnfindNodeInsertPos(digit,mid+1,end);","}else{","if(start==mid)returnstart;","returnfindNodeInsertPos(digit,start,mid);","privatefinalintfindNodePos(chardigit){","returnfindNodePos(digit,0,nodes.length);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["System.arraycopy(bytes,0,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intlength=str.length();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(month==1){","if(day==30){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==29){","if(!isLeapYear(year)){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicbooleanownDeletesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanownInsertsAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["else","throwSmallSQLException.create(Language.PARAM_CLASS_UNKNOWN,newValue.getClass().getName());","finalvoidset(ExpressionValueval){","this.value=val.value;","this.dataType=val.dataType;","this.length=val.length;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseADD:returnlVal+rVal;","throwcreateUnspportedConversion(SQLTokenizer.VARCHAR);","intgetDataType(){","switch(operation){","caseNEGATIVE:","caseBIT_NOT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["buffer.append(\")SELECT*FROM\").append(name);","con.createStatement().execute(buffer.toString());","database.replaceTable(oldTable,newTable);","}catch(Exceptionex){","try{","database.dropTable(con,newName);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["returntrue;","publicbooleansupportsConvert(){","returntrue;","publicbooleansupportsConvert(intfromType,inttoType){","returntrue;","publicbooleansupportsTableCorrelationNames(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnfalse;","publicbooleandataDefinitionCausesTransactionCommit(){","returnfalse;","publicbooleandataDefinitionIgnoredInTransactions(){","returnfalse;","publicResultSetgetProcedures(Stringcatalog,StringschemaPattern,StringprocedureNamePattern)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["where(cmd);","returncmd;","caseSQLTokenizer.COMMA:","continue;","default:throwcreateSyntaxError(token,MISSING_WHERE_COMMA);","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfloatbytes2float(byte[]bytes){","returnFloat.intBitsToFloat(bytes2int(bytes));","staticdoublebytes2double(byte[]bytes){","returnDouble.longBitsToDouble(bytes2long(bytes));","staticlongbytes2long(byte[]bytes){","longresult=0;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returntrue;","if(row\<=rowList.size()){","rowIdx=row-1;","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","rowIdx=rowList.size()-1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["publicintintValue(){","returnUtils.long2int(longValue());","publiclonglongValue(){","if(value.length==0||signum==0){","return0;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intlength=readShort()&0xFFFF;","returnnewString(readChars(length));","voidwriteBytes(byte[]daten){","intnewSize=offset+daten.length;","if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,0,page,offset,daten.length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,newDouble(x),SQLTokenizer.DOUBLE);","publicvoidsetBigDecimal(intparameterIndex,BigDecimalx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.DECIMAL);","publicvoidsetString(intparameterIndex,Stringx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["if(i==validValues.length-2)","msgBuf.append(\"or\");","Stringmessage=getErrorString(","token,Language.CUSTOM_MESSAGE,msgBuf);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateStringgetErrorString(SQLTokentoken,StringmiddleMsgCode,"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(newFile(dirs[i],Utils.MASTER_FILENAME).exists()){","Object[]catalog=newObject[1];","catalog[0]=dirs[i].getPath();","catalogs.add(catalog);","Object[][]result=newObject[catalogs.size()][];","catalogs.toArray(result);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","returnscale;","default:","returnExpression.getScale(dataType);","voidsetPrecision(intprecision)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returntrue;","publicbooleansupportsCorrelatedSubqueries(){","returntrue;","publicbooleansupportsUnion(){","returntrue;","publicbooleansupportsUnionAll(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["intlast=complement.length-1;","for(inti=0;i\<=last;i++){","complement[i]=(byte)((i==last)?-complement[i]:~complement[i]);","while(complement[last]==0){","last--;","complement[last]++;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;","isUpdateNeeded=true;","continue;","if(isUpdateNeeded){","result.updateRow(updateValues);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["privateintfetchDirection;","privateintfetchSize;","privateintqueryTimeout;","privateintmaxRows;","privateintmaxFieldSize;","privateArrayListbatches;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","page=find(page,longToBinarySortOrder(expr.getLong()),4,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticintgetBestNumberDataType(intparamDataType){","intdataTypeIdx=Utils.indexOf(paramDataType,DatatypeRange);","if(dataTypeIdx\>=NVARCHAR_IDX)","returnSQLTokenizer.DOUBLE;","if(dataTypeIdx\>=INT_IDX)","returnSQLTokenizer.INT;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intintValue=Float.floatToIntBits(value);","return(intValue\<0)?","~intValue:","intValue^0x80000000;","finalstaticprivatelongdoubleToBinarySortOrder(doublevalue){","longintValue=Double.doubleToLongBits(value);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["result|=(((long)nextEntry)\<\<shift);","if(listEnum.stack\>=3){","listEnum.offsetStack[listEnum.stack]=offset;","returnresult;","listEnum.offsetStack[listEnum.stack]=offset+pointerSize;","offset=getPointer();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|","|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["StoreNull(){","this(-1);","StoreNull(longnextPos){","nextPagePos=nextPos;","finalbooleanisNull(intoffset){","returntrue;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["longl;","while((l=scroll.getRowOffset(true))\>=0){","System.out.println(l);","System.out.println(\"============================\");","privatefinalFileChannelraFile;","FileIndex(booleanunique,FileChannelraFile){"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["importjava.sql.Connection;","importjava.sql.DatabaseMetaData;","importjava.sql.PreparedStatement;","importjava.sql.SQLException;","importjava.sql.SQLWarning;","importjava.sql.Savepoint;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["ExpressionNameexprName;","if(exprinstanceofExpressionName){","exprName=(ExpressionName)expr;","}else{","expr=exprName=newExpressionName(expr.getAlias());","Columncolumn=exprName.getColumn();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["!newFile(dir,Utils.MASTER_FILENAME).exists())","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefiles[]=dir.listFiles();","if(files!=null)","for(inti=0;i\<files.length;i++){","files[i].delete();"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetIndexInfo(Stringcatalog,Stringschema,Stringtable,booleanunique,booleanapproximate)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"NON_UNIQUE\",\"INDEX_QUALIFIER\",\"INDEX_NAME\",\"TYPE\",\"ORDINAL_POSITION\",\"COLUMN_NAME\",\"ASC_OR_DESC\",\"CARDINALITY\",\"PAGES\",\"FILTER_CONDITION\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["break;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwsqlex;","}catch(Throwableth){","throwSmallSQLException.createFromException(Language.CANT_LOCK_FILE,file,th);","returnchannel;","staticfinalExpressionsgetExpressionNameFromTree(Expressiontree){","Expressionslist=newExpressions();"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","returnTypes.CLOB;","caseSQLTokenizer.JAVA_OBJECT:","returnTypes.JAVA_OBJECT;","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.WHERE:","where(cmd);","returncmd;","caseSQLTokenizer.COMMA:","continue;","default:throwcreateSyntaxError(token,MISSING_WHERE_COMMA);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["super(name,newColumns());","this.database=database;","this.raFile=raFile;","this.firstPage=offset;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.SELECT);","if(store==null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionArithmetic))returnfalse;","if(((ExpressionArithmetic)expr).operation!=operation)returnfalse;","returntrue;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintCHARLEN=1102;","staticfinalintCHARACTLEN=1103;","staticfinalint_CHAR=1104;","staticfinalintCONCAT=1105;","staticfinalintDIFFERENCE=1106;","staticfinalintINSERT=1107;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(tree.getType()==Expression.NAME){","list.add(tree);","Expression[]params=tree.getParams();","if(params!=null){","for(inti=0;i\<params.length;i++){","getExpressionNameFromTree(list,tree);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);","finalvoidnullRow(){","rowSource.nullRow();","row=0;","finalvoidnoRow(){"]": ["|project://smallsql/src/smallsql/database/Where.java|","|project://smallsql/src/smallsql/database/Distinct.java|"],
"["caseSQLTokenizer.BOOLEAN:","return5;//trueandfalse","caseSQLTokenizer.TINYINT:","return3;","caseSQLTokenizer.SMALLINT:","return6;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["this.nullable=nullable;","booleanisNullable(){","returnnullable;","voidsetDataType(intdataType){","this.dataType=dataType;","intgetDataType(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).longValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["offset+=length;","byte[]readBytes(intlength){","byte[]daten=newbyte[length];","System.arraycopy(page,offset,daten,0,length);","offset+=length;","returndaten;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;","tabLockConnection=con;","tabLockCount++;","TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","lock.rollback();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(puffer.length==1){","newNode.value=rowOffset;","}else{","newNode.moveRemainderValueSub(rowOffset,puffer);","privatefinalvoidmoveRemainderValueSub(ObjectrowOffset,char[]remainderValue){","intlength=remainderValue.length-1;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Stringcatalog;","StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","CommandTablecmdCreate=newCommandTable(con.log,catalog,tableName,SQLTokenizer.CREATE);","SQLTokentoken=nextToken(MISSING_PARENTHESIS_L);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(values==null){","return;","st.con.log.println(\"updateRow()\");","testNotInsertRow();","finalCommandSelectcommand=getCmd();","command.updateRow(st.con,values);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["this.name=name;","this.tableCommandType=tableCommandType;","voidaddColumn(Columncolumn)throwsSQLException{","addColumn(columns,column);","voidaddIndex(IndexDescriptionindexDescription)throwsSQLException{","indexes.add(indexDescription);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["if(e.key==key)","returne.value;","e=e.next;","finalbooleancontainsKey(longkey){","return(get(key)!=null);","finalTableStorePageadd(longkey,TableStorePagevalue){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["c|=0x20;//caseinsensitive","while(node!=null&&node.letter!=c)node=node.nextEntry;","if(node!=null){","value=node.value;","node=node.nextLetter;","}else{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","default:throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM,SQLTokenizer.getKeyWord(dataType));","break;","caseMAX:","if(value==null){","if(expr.isNull())"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(lock==storePage){","if(lock==prev){","if(lock.nextLock==null){","locksInsert.remove(i--);","}else{","locksInsert.set(i,lock.nextLock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["break;","caseSQLTokenizer.INSERT:","invalidParamCount=(paramCount!=4);","expr=newExpressionFunctionInsert();","break;","caseSQLTokenizer.LCASE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["cmd.addValues(select());","while(parthesisCount--\>0){","nextToken(MISSING_PARENTHESIS_R);","returncmd;","caseSQLTokenizer.PARENTHESIS_L:","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();","case14:","case114://hh:mi:ss:mmm(24h)","formatNumber(details.hour,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnfindNodePos(digit,mid+1,end);","}else{","if(start==mid)return-1;","returnfindNodePos(digit,start,mid-1);","voidsave(StoreImploutput)throwsSQLException{","output.writeShort(digit);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["printRS(st.getResultSet());","command.setLength(0);","command.append(line).append(\'\\n\');","}catch(Exceptione){","command.setLength(0);","e.printStackTrace();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["if(cal==null){","returngetTimestamp(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewTimestamp(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["default:","returnExpression.getScale(dataType);","voidsetPrecision(intprecision)throwsSQLException{","if(precision\<0)throwSmallSQLException.create(Language.COL_INVALID_SIZE,newObject[]{newInteger(precision),name});","this.precision=precision;","intgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseIN:","returnfalse;//Booleanoperationsreturneveraresult???,butatleastISNULLandISNOTNULL","caseNEGATIVE:","caseBIT_NOT:","returnleft.isNull();","default:returnleft.isNull()||right.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleangetBoolean()throwsException{","returngetDouble()!=0;","intgetInt()throwsException{","returnMath.abs(param1.getInt());","longgetLong()throwsException{","returnMath.abs(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["try{","Stringline;","try{","line=input.readLine();","}catch(IOExceptionex){","ex.printStackTrace();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["caseTypes.LONGVARCHAR:","case-11://uniqueidentifier","return\"java.lang.String\";","caseTypes.CLOB:","return\"java.sql.Clob\";","default:return\"java.lang.Object\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMonth();","break;","caseSQLTokenizer.NOW:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["@Override","finalvoidnoRow(){","row=0;","store=Store.NOROW;","@Override","finalbooleanisNull(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["((MutableLong)value).value=Math.min(((MutableLong)value).value,expr.getLong());","break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.min(((MutableFloat)value).value,expr.getFloat());","break;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["nextToken(MISSING_PARENTHESIS_L);","expr=function(cmd,para,true);","break;","caseSQLTokenizer.CALL://callescapesequence","thrownewjava.lang.UnsupportedOperationException(\"callescapesequence\");","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getBestRowIdentifier(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finallonggetMoney()throwsException{","returngetResult().getMoney();","finalMutableNumericgetNumeric()throwsException{","returngetResult().getNumeric();","finalObjectgetObject()throwsException{","returngetResult().getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["switch(operation){","caseADD:returnleft.getLong()+right.getLong();","caseSUB:returnleft.getLong()-right.getLong();","caseMUL:returnleft.getLong()*right.getLong();","caseDIV:returnleft.getLong()/right.getLong();","caseNEGATIVE:return-left.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicstaticfinalStringRSET_READONLY=\"SS-0131\";","publicstaticfinalStringRSET_FWDONLY=\"SS-0132\";","publicstaticfinalStringRSET_CLOSED=\"SS-0133\";","publicstaticfinalStringRSET_NOT_INSERT_ROW=\"SS-0134\";","publicstaticfinalStringRSET_ON_INSERT_ROW=\"SS-0135\";","publicstaticfinalStringROWSOURCE_READONLY=\"SS-0136\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["idx1=idx2+1;","if(idx1\<length){","StringstrMillis=datetime.substring(idx1).trim();","switch(strMillis.length()){","case1:","millis=Integer.parseInt(strMillis)*100;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["isAfterLast=false;","row=0;","booleanfirst()throwsException{","beforeFirst();","returnnext();","booleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["privatebooleanisInit;","privatestaticLanguagelanguage;","privateSmallSQLException(Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);","init();","privateSmallSQLException(Throwablethrowable,Stringmessage,StringvendorCode){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["importjava.io.*;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","publicclassFileIndexNodeextendsIndexNode{","privatefinalFileChannelfile;","privatelongfileOffset;"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["output.writeInt(size);","output.writeBytes(data,0,size);","finalvoidadd(longvalue)throwsSQLException{","offset=0;","if(size==0){","writeShort((int)(value\>\>48));"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.REAL:","return(long)(readFloat()*10000L);","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(long)(readDouble()*10000L);","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["IndexNodeScrollStatusstatus=(IndexNodeScrollStatus)nodeStack.peek();","intlevel=status.level;","if(!status.asc^scroll){","intidx=++status.idx;","if(idx==-1){","if(status.nodeValue!=null){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["col=datatype(isEscape);","}else{","col=datatype(isEscape);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);","token=nextToken(MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longgetNextPagePos(){","if(updatePointer!=null)returnupdatePointer.getNextPagePos();","if(nextPageOffset\<=0){","nextPageOffset=sizePhysical;","returnfilePos+nextPageOffset;","longwriteFinsh(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["as=true;","if(as||(!isKeyword(token))){","Stringalias=getIdentifier(token);","column.setAlias(alias);","token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["row=sortedRowCount;","while(next()){","booleanabsolute(intnewRow)throwsException{","if(newRow==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(newRow\>0){","beforeFirst();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnInteger.parseInt(readLongString());","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoidexecute(SSConnectioncon,SSStatementst)throwsSQLException{","intsavepoint=con.getSavepoint();","try{","executeImpl(con,st);","}catch(Throwablee){","con.rollback(savepoint);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(getMoneyImpl(),4);","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privateMutableNumericgetNumericImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BIT:","returnnewMutableNumeric((obj==Boolean.TRUE)?1:0);","caseSQLTokenizer.INT:","returnnewMutableNumeric(((Number)obj).intValue());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(((Number)obj).longValue());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returntrue;","publicbooleannullPlusNonNullIsNull(){","returntrue;","publicbooleansupportsConvert(){","returntrue;","publicbooleansupportsConvert(intfromType,inttoType){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintgetRow()throwsException{","returnisCurrentRow?row:0;","finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["floatgetFloat()throwsException{","if(param1.getBoolean())","returnparam2.getFloat();","returnparam3.getFloat();","doublegetDouble()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["caseSQLTokenizer.MINUTE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMinute();","break;","caseSQLTokenizer.MONTH:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["else","if(newValueinstanceofLong||newValueinstanceofIdentity)","this.dataType=SQLTokenizer.BIGINT;","else","if(newValueinstanceofFloat)","this.dataType=SQLTokenizer.REAL;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{INDEX_MISSING,\"01000\"},","{INDEX_FILE_INVALID,\"01000\"},","{INDEX_CORRUPT,\"01000\"},","{INDEX_TOOMANY_EQUALS,\"01000\"},","{FILE_TOONEW,\"01000\"},","{FILE_TOOOLD,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","abstractvoidexecuteImpl(SSConnectioncon,SSStatementst)throwsException;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["firstPage=8;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.CREATE);","intcount=columns.size();","store.writeInt(count);","for(inti=0;i\<count;i++){","store.writeColumn(columns.get(i));"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["privateMapsqlStates;","publicstaticLanguagegetLanguage(StringlocaleStr){","try{","returngetFromLocaleTree(localeStr);","catch(IllegalArgumentExceptione){","returngetDefaultLanguage();"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["}else{","for(inti=0;i\>places;i--){","factor*=10;","value/=factor;","value-=value%1;//moduloalsoworkwithvalueslargerlong","if(places\>0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["buf.append(\'\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case107://Mondd,yyyy","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["size=0;","finalbooleancontainsValue(TableStorePagevalue){","Entrytab[]=table;","for(inti=0;i\<tab.length;i++)","for(Entrye=tab[i];e!=null;e=e.next)","if(value.equals(e.value))"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["if(start==0&&byteLen==length)returnbytes;","if(byteLen\>length+start){","byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);","returnb;","}else{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["staticprivateHashMapdatabases=newHashMap();","privatefinalTableViewMaptableViews=newTableViewMap();","privatefinalStringname;","privatefinalbooleanreadonly;","privatefinalFiledirectory;","privatefinalFileChannelmaster;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["for(inti=0;i\<tab.length;i++)","for(Entrye=tab[i];e!=null;e=e.next)","if(value.equals(e.value))","returntrue;","returnfalse;","staticclassEntry{"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["return;","prev=lock;","lock=lock.nextLock;","break;","caseLOCK_READ:","caseLOCK_WRITE:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicStringgetDriverVersion(){","returngetDriverMajorVersion()+\".\"+SSDriver.drv.getMinorVersion();","publicintgetDriverMajorVersion(){","returnSSDriver.drv.getMajorVersion();","publicintgetDriverMinorVersion(){","returnSSDriver.drv.getMinorVersion();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["while(firstNode&&getUnsignedShort()==0){","offset-=2;","removeNodeLastLevel();//theend0ofanode","if(shift\>=3)","break;","offset=offset1;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnbytes;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Stringpk=nextIdentifier();","Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();","expressionDefList(cmdCreate,expressions,columns);","IndexDescriptionpkIndex=newIndexDescription(null,pk,SQLTokenizer.UNIQUE,expressions,columns);","ForeignKeyforeignKey=newForeignKey(pk,pkIndex,tableName,index);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicvoidrollback(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){","if(((SSSavepoint)savepoint).transactionTime!=transactionTime){","throwSmallSQLException.create(Language.SAVEPT_INVALID_TRANS);","rollback(savepoint.getSavepointId());","return;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returncurrentDS.getTableView();","finalbooleanisScrollable(){","returnfalse;//TODOperformance,canimplementitifalldatasourcesimplementit","finalvoidbeforeFirst()throwsException{","dataSourceIdx=0;","currentDS=dataSources.get(0);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnreadNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnreadString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnSQLTokenizer.INT;","if(dataTypeIdx\>=BIGINT_IDX)","returnSQLTokenizer.BIGINT;","if(dataTypeIdx\>=MONEY_IDX)","returnSQLTokenizer.MONEY;","if(dataTypeIdx\>=DECIMAL_IDX)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["chars[8]=chars[13]=chars[18]=chars[23]=\'-\';","chars[0]=digits[(daten[offset+3]\>\>4)&0x0F];","chars[1]=digits[(daten[offset+3])&0x0F];","chars[2]=digits[(daten[offset+2]\>\>4)&0x0F];","chars[3]=digits[(daten[offset+2])&0x0F];","chars[4]=digits[(daten[offset+1]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returntrue;","finalvoidafterLast()throwsException{","rowSource.afterLast();","row=0;","finalintgetRow()throwsException{","returnrow;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["voidwriteLong(longvalue){","verifyFreePufferSize(8);","puffer[offset++]=(byte)(value\>\>56);","puffer[offset++]=(byte)(value\>\>48);","puffer[offset++]=(byte)(value\>\>40);","puffer[offset++]=(byte)(value\>\>32);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:","page=find(page,bytesToBinarySortOrder(expr.getBytes()),nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["addKeyWord(\"SQL_TIME\",SQL_TIME);","addKeyWord(\"SQL_TIMESTAMP\",SQL_TIMESTAMP);","addKeyWord(\"SQL_TINYINT\",SQL_TINYINT);","addKeyWord(\"SQL_VARBINARY\",SQL_VARBINARY);","addKeyWord(\"SQL_VARCHAR\",SQL_VARCHAR);","staticfinalintCOUNT=1400;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnparam2.getFloat();","returnparam3.getFloat();","doublegetDouble()throwsException{","if(param1.getBoolean())","returnparam2.getDouble();","returnparam3.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["if(lock.con!=con)returnnull;","if(serializeConnections.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["{SECS_TOOLARGE,\"ValoredeiseconditroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"VAloredeimilliseconditroppoaltoinTIMESTAMP\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'Ã¨unDATE,TIMEorTIMESTAMPnonvalido.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Conversionenonsupportataversoiltipodidato\'\'{0}\'\'daltipo\'\'{1}\'\'perl\'\'operazione\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Tipodidato\'\'{0}\'\'nonsupportatoperl\'\'operazione\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Tipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnSQLTokenizer.SQL_TSI_YEAR;","default:","returnintervalType;","ExpressionFunctionTimestampDiff(intintervalType,Expressionp1,Expressionp2){","interval=mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["Expression[]updateValues=newExpression[count];","booleanisUpdateNeeded=false;","for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","Expressioncol=columnExpressions.get(i);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["row[2]=tableName;//TABLE_NAME","row[3]=Boolean.valueOf(!index.isUnique());//NON_UNIQUE","row[5]=index.getName();//INDEX_NAME","row[6]=type;//TYPE","row[7]=Utils.getShort(c+1);//ORDINAL_POSITION","row[8]=columns.get(c);//COLUMN_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["thrownewError();","returncmd;","caseSQLTokenizer.REPEATABLE:","token=nextToken(MISSING_READ);","cmd.isolationLevel=Connection.TRANSACTION_REPEATABLE_READ;","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["getUpdateValue(columnIndex).set(x,dataType,length);","if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType+\";length=\"+length);","finalprivateCommandSelectgetCmd()throwsSQLException{","if(cmd==null){","throwSmallSQLException.create(Language.RSET_CLOSED);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["this.catalog=catalog;","this.name=name;","this.tableCommandType=tableCommandType;","voidaddColumn(Columncolumn)throwsSQLException{","addColumn(columns,column);","voidaddIndex(IndexDescriptionindexDescription)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["intvalue=getUnsignedShort();","if(value!=0||firstNode){","intpointer=getPointer();","if(pointer\>oldOffset){","offset-=pointerSize;","writePointer(pointer+diff);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["synchronized(tableViews){","tableViews.remove(oldTable.name);","tableViews.remove(newTable.name);","oldTable.close();","newTable.close();","FileoldFile=oldTable.getFile(this);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.EXP:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionExp();","break;","caseSQLTokenizer.FLOOR:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["TransactionSteppage=(TransactionStep)commitPages.get(i);","page.rollback();","page.freeLock();","commitPages.clear();","transactionTime=System.currentTimeMillis();","publicvoidclose()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["break;","caseSQLTokenizer.LTRIM:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLTrim();","break;","caseSQLTokenizer.OCTETLEN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIME);","publicvoidsetTimestamp(intparameterIndex,Timestampx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIMESTAMP);","publicvoidsetAsciiStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseLES_EQU:returnleft.getLong()\<=right.getLong();","caseUNEQUALS:returnleft.getLong()!=right.getLong();","caseBETWEEN:","long_left=left.getLong();","return_left\>=right.getLong()&&right2.getLong()\>=_left;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","returnnewCommandCreateDatabase(con.log,token.getName(sql));","privateCommandTablecreateTable()throwsSQLException{","Stringcatalog;","StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.CALL://callescapesequence","thrownewjava.lang.UnsupportedOperationException(\"callescapesequence\");","default:thrownewError();","token=nextToken(ESCAPE_MISSING_CLOSE);","returnexpr;","caseSQLTokenizer.QUESTION:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalchar[]getRemainderValue(){","returnremainderKey;","finalIndexNodeaddNode(chardigit)throwsSQLException{","if(remainderKey!=null)moveRemainderValue();","intpos=findNodePos(digit);","if(pos==-1){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["StringBufferbuffer=newStringBuffer();","for(inti=0;i\<count;i++){","buffer.append(str);","returnbuffer.toString();","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["caseResultSet.TYPE_SCROLL_INSENSITIVE:","caseResultSet.TYPE_SCROLL_SENSITIVE:","returntrue;","returnfalse;","publicbooleansupportsResultSetConcurrency(inttype,intconcurrency){","if(type\>=ResultSet.TYPE_FORWARD_ONLY&&type\<=ResultSet.TYPE_SCROLL_SENSITIVE&&"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["super(con,table,lockType,-1);","link.page=this;","link.filePos=fileOffset;","finallongcommit()throwsSQLException{","longresult=super.commit();","link.filePos=fileOffset;"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["byte[]getBytes(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnget(colIdx).getBytes();","intgetDataType(intcolIdx){","returncolumns.get(colIdx).getDataType();","finalTableViewgetTableView(){","returnnull;","finalvoiddeleteRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(savepointinstanceofSSSavepoint){","if(((SSSavepoint)savepoint).transactionTime!=transactionTime){","throwSmallSQLException.create(Language.SAVEPT_INVALID_TRANS);","rollback(savepoint.getSavepointId());","return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,savepoint);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["tokenStart=i+1;","}else{","quoteBuffer.append(c);","break;","default:","if(comment!=NOT_COMMENT){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["cmd.setParamValue(parameterIndex,x,SQLTokenizer.DECIMAL);","publicvoidsetString(intparameterIndex,Stringx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.VARCHAR);","publicvoidsetBytes(intparameterIndex,byte[]x)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["idx1=idx2+length;","idx2=Utils.indexOf(str2,str1,idx1);","if(idx1\>0){","buffer.write(str1,idx1,str1.length-idx1);","returnbuffer.toByteArray();","returnstr1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returntableAlias+\".\"+getAlias();","StringgetTableName(){","if(table!=null){","returntable.getName();","returnnull;","intgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnshortCache[value+4];","}else","returnnewShort((short)value);","staticfinalFileChannelopenRaFile(Filefile,booleanreadonly)throwsFileNotFoundException,SQLException{","RandomAccessFileraFile=newRandomAccessFile(file,readonly?\"r\":\"rw\");","FileChannelchannel=raFile.getChannel();"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnnumeric.longValue();","return(signum\>0)?Long.MAX_VALUE:Long.MIN_VALUE;","publicfloatfloatValue(){","if(value.length==0||signum==0){","return0;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(currentInsertedRow()\<0){","longrowPosition=scrollStatus.getRowOffset(true);","if(rowPosition\>=0){","row++;","rowSource.setRowPosition(rowPosition);","returntrue;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["money.value=value;","returnmoney;","publicstaticMoneycreateFromUnscaledValue(intvalue){","Moneymoney=newMoney();","money.value=value;","returnmoney;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["CommandCreateDatabasecommand=newCommandCreateDatabase(con.log,name);","command.execute(con,null);","db=newDatabase(name,file,con.isReadOnly());","databases.put(dbKey,db);","db.connections.put(con,null);","returndb;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["voidcreateView(SSConnectioncon,StringviewName,Stringsql)throwsException{","newView(this,con,viewName,sql);","staticObject[][]getCatalogs(Databasedatabase){","Listcatalogs=newArrayList();","FilebaseDir=(database!=null)?","database.directory.getParentFile():"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\>0)","value=newValue;","break;","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["column.setPrecision(origExpression.getPrecision());","column.setScale(origExpression.getScale());","column.setDataType(exprName.getDataType());","}else{","exprName.setFrom(this,idx,column);","}else{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject();","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnreadLongBinary();","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["char[]chars=newchar[length];","for(inti=0;i\<length;i++){","chars[i]=(char)readShort();","returnchars;","byte[]readBytes(intlength){","byte[]bytes=newbyte[length];"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["chars[9]=digits[(daten[offset+5]\>\>4)&0x0F];","chars[10]=digits[(daten[offset+5])&0x0F];","chars[11]=digits[(daten[offset+4]\>\>4)&0x0F];","chars[12]=digits[(daten[offset+4])&0x0F];","chars[14]=digits[(daten[offset+7]\>\>4)&0x0F];","chars[15]=digits[(daten[offset+7])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["booleanrange=false;","weiter:","while(pattern.length()\>mIdx&&value.length()\>sIdx){","charm=Character.toUpperCase(pattern.charAt(mIdx++));","switch(m){","case\'%\':"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["writeLong(expr.getLong());","break;","caseSQLTokenizer.REAL:","writeFloat(expr.getFloat());","break;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.references=foreignKeys;","newIndexes.create(con,database,this);","if(existIndexes==null){","this.indexes=newIndexes;","}else{","this.indexes=existIndexes;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","publicclassExpressionValueextendsExpression{","privateObjectvalue;","privateintdataType;","privateintlength;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateCommandTablecreateIndex(booleanunique)throwsSQLException{","StringindexName=nextIdentifier();","nextToken(MISSING_ON);","Stringcatalog;","StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(isLast){","node.addNode(digit,rowOffset);","returnnull;","returnnode.addRoot(digit);","node=node.addNode(digit);","if(node.isEmpty()){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');","formatHour12(details.hour,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalvoidsetHaving(Expressionhaving){","this.having=having;","finalvoidsetOrder(Expressionsorder){","this.orderBy=order;","finalvoidsetMaxRows(intmax){","maxRows=max;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["ObjectgetObject(intoffset,intdataType)throwsException{","thrownoCurrentRow();","StringgetString(intoffset,intdataType)throwsException{","thrownoCurrentRow();","voidscanObjectOffsets(int[]offsets,int[]dataTypes){","intgetUsedSize(){"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID,String.valueOf(offset));/*,offset*/","privatestaticinthexDigit2int(chardigit){","if(digit\>=\'0\'&&digit\<=\'9\')returndigit-\'0\';","digit|=0x20;","if(digit\>=\'a\'&&digit\<=\'f\')returndigit-\'W\';//-\'W\'==-\'a\'+10"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["commandSelect.deleteRow(con);","voidupdateRow(Expression[]updateValues)throwsException{","commandSelect.updateRow(con,updateValues);","voidinsertRow(Expression[]updateValues)throwsException{","commandSelect.insertRow(con,updateValues);","booleanisNull(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","returnnull;","publicvoidsetDate(intparameterIndex,Datex,Calendarcal)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetTime()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["Stringstables=(pkTable!=null)?getTables(pkTable):getTables(fkTable);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","ForeignKeysreferences=((Table)tab).references;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnparam3.getString();","finalintgetDataType(){","returnExpressionArithmetic.getDataType(param2,param3);","finalintgetPrecision(){","returnMath.max(param2.getPrecision(),param3.getPrecision());","finalintgetScale(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:","return19;","caseSQLTokenizer.REAL:","return7;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["left.nullRow();","while(isFullNotValid[fullReturnCounter++]){","if(fullReturnCounter\>=fullRowCount){","returnfalse;","right.next();","returntrue;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.year,4,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["classUtils{","staticfinalStringMASTER_FILENAME=\"smallsql.master\";","staticfinalStringTABLE_VIEW_EXTENTION=\".sdb\";","privatestaticfinalStringLOB_EXTENTION=\".lob\";","staticfinalStringIDX_EXTENTION=\".idx\";","privatestaticfinalInteger[]integerCache=newInteger[260];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(newValue!=null)","((MutableNumeric)value).add(newValue);","break;","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{INDEX_TOOMANY_EQUALS,\"ZuvieleidentischeEintrÃ¤geimIndex.\"},","{FILE_TOONEW,\"Dateiversion({0})derDatei\'\'{1}\'\'istzuneufÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_TOOOLD,\"Dateiversion({0})derDatei\'\'{1}\'\'istzualtfÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_CANT_DELETE,\"Datei\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{ROW_0_ABSOLUTE,\"Datensatz0istungÃ¼ltigfÃ¼rdieMethodeabsolute().\"},","{ROW_NOCURRENT,\"KeinaktuellerDatensatz.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["daten[2]=hex2byte(chars,2);","daten[1]=hex2byte(chars,4);","daten[0]=hex2byte(chars,6);","daten[5]=hex2byte(chars,9);","daten[4]=hex2byte(chars,11);","daten[7]=hex2byte(chars,14);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["}else","if(equals(node.getRemainderValue(),key,i)){","if(isLast){","node.saveValue(rowOffset);","returnnull;","returnnode.addRoot();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["for(inti=0;i\<complement.length;i++)","if(complement[i]!=0){","signum=1;","break;","for(intv=value.length-1;v\>=0;v--){","inttemp=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returntrue;","publicbooleansupportsANSI92IntermediateSQL(){","returntrue;","publicbooleansupportsANSI92FullSQL(){","returntrue;","publicbooleansupportsIntegrityEnhancementFacility(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME);","caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE);","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),true),isLastValues);","break;","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["booleanisTypeTable=types==null;","booleanisTypeView=types==null;","for(inti=0;types!=null&&i\<types.length;i++){","if(\"TABLE\".equalsIgnoreCase(types[i]))isTypeTable=true;","if(\"VIEW\".equalsIgnoreCase(types[i]))isTypeView=true;","if(database!=null){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:{","byte[]leftBytes=left.getBytes();","byte[]rightBytes=right.getBytes();","intcomp=Utils.compareBytes(leftBytes,rightBytes);","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalintgetRow()throwsException{","returnrow;","finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["publicvoidinsertRow()throwsSQLException{","st.con.log.println(\"insertRow()\");","if(!isInsertRow){","throwSmallSQLException.create(Language.RSET_NOT_INSERT_ROW);","getCmd().insertRow(st.con,values);","clearRowBuffer();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnfalse;","staticintgetDisplaySize(intdataType,intprecision,intscale){","switch(dataType){","caseSQLTokenizer.BIT:","return1;//1and0","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);","returnbuf.toString();","case13:","case113://default+millis;ddmonyyyyhh:mm:ss:mmm(24h)","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.CLOB:","returnUtils.bytes2unique(Utils.unique2bytes(param1.getString()),0);","returnUtils.bytes2unique(param1.getBytes(),0);","Object[]param={SQLTokenizer.getKeyWord(dataType)};","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV,param);","finalprivateStringconvertToString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(colIdx\>=0){","expr.setFrom(fromEntry,colIdx,table);","break;","}else","throwSmallSQLException.create(Language.COL_INVALID_NAME,newObject[]{expr.getName()});","if(t==tables.size())"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(isLastValue){","node.addNode(digit,rowOffset);","returnnull;","returnnode.addRoot(digit);","node=node.addNode(digit);","if(node.isEmpty()){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["Stringmiddle=SmallSQLException.translateMsg(","middleMsgCode,newObject[]{middleMsgParam});","buffer.append(middle);","privateStringgetIdentifier(SQLTokentoken)throwsSQLException{","Stringname=token.getName(sql);","checkValidIdentifier(name,token);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncreateIndex(true);","caseSQLTokenizer.NONCLUSTERED:","caseSQLTokenizer.CLUSTERED:","continue;","default:","throwcreateSyntaxError(token,COMMANDS_CREATE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["size+=count;","finalvoidclear(){","size=0;","finalvoidremove(intidx){","System.arraycopy(data,idx+1,data,idx,(--size)-idx);","finalvoidset(intidx,Expressionexpr){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["abstractdoublegetDouble(intoffset,intdataType)throwsException;","abstractfloatgetFloat(intoffset,intdataType)throwsException;","abstractintgetInt(intoffset,intdataType)throwsException;","abstractlonggetLong(intoffset,intdataType)throwsException;","abstractlonggetMoney(intoffset,intdataType)throwsException;","abstractMutableNumericgetNumeric(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["}else{","hour=0;","minute=0;","second=0;","millis=0;","if(idx1==0&&length\>0){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["Stringlocalized=language.getMessage(messageCode);","returnMessageFormat.format(localized,params);","privatestaticStringstripMsg(Throwablethrowable){","Stringmsg=throwable.getMessage();","if(msg==null||msg.length()\<30){","Stringmsg2=throwable.getClass().getName();"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["returnnewLong(getLong());","caseSQLTokenizer.REAL:","returnnewFloat(getFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["byte[]getBytes()throwsException{","returnExpressionValue.getBytes(getObject(),getDataType());","voidsetParams(Expression[]params){","super.setParams(params);","if(params.length\>0)param1=params[0];","if(params.length\>1)param2=params[1];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["finalvoidremoveValue(longrowOffset,Expressionsexpressions)throwsException{","ArrayListnodeList=newArrayList();","Objectobj=findRows(expressions,true,nodeList);","if(!rootPage.getUnique()){","LongTreeListlist=(LongTreeList)obj;","list.remove(rowOffset);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.ESCAPE_L:{","token=nextToken(COMMANDS_ESCAPE);","SQLTokenpara=nextToken(MISSING_EXPRESSION);","Expressionexpr;","switch(token.value){","caseSQLTokenizer.D://dateescapesequence"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intidx2=Utils.indexOf(str2,str1,idx1);","while(idx2\>0){","buffer.write(str1,idx1,idx2-idx1);","buffer.write(str3);","idx1=idx2+length;","idx2=Utils.indexOf(str2,str1,idx1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["caseSQLTokenizer.HAVING:","having(cmd);","break;","default:","previousToken();","return;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{RSET_READONLY,\"01000\"},","{RSET_FWDONLY,\"01000\"},","{RSET_CLOSED,\"01000\"},","{RSET_NOT_INSERT_ROW,\"01000\"},","{RSET_ON_INSERT_ROW,\"01000\"},","{ROWSOURCE_READONLY,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicDategetDate(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["from.add(union);","selCmd.setTables(from);","selCmd.addColumnExpression(newExpressionName(\"*\"));","nextToken(MISSING_ALL);","nextToken(MISSING_SELECT);","union.addDataSource(newViewResult(con,singleSelect()));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getPrecision());","returnprecision;","finalintgetScale(){","intprecision=0;","for(inti=results.size()-1;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["inttempi=signum;","signum=sig2;","sig2=tempi;","if(signum!=sig2)","sub(val2);","else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSoundex();","break;","caseSQLTokenizer.SUBSTRING:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionSubstring();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ExpressionrightExpr;","intoperation=ExpressionArithmetic.getOperationFromToken(token.value);","intlevel=operation/10;","if(previousOperationLevel\>=level){","previousToken();","returnleftExpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returndefaultValue;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","if(defaultValue==-1)","return38;","returndefaultValue;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["if(sizePhysical\<offset)sizePhysical=offset;//occuronlyonupdatesofnotcommittedinserts(filePos==-1","writeFinsh(con);","}else{","newData.status=UPDATED_PAGE;","if(updatePointer==null){","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rowIdx=0;","returnmove();","finalbooleanprevious(){","if(rowIdx--\<0)rowIdx=-1;","returnmove();","finalbooleannext(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["voidsetDataType(intdataType){","this.dataType=dataType;","intgetDataType(){","returndataType;","intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(dataType,precision,scale);"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["currentDS.setRowPosition(rowPosition\>\>bitCount);","finalbooleanrowInserted(){","returncurrentDS.rowInserted();","finalbooleanrowDeleted(){","returncurrentDS.rowDeleted();","finalvoidnullRow(){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["result[6]=(byte)(value\>\>8);","result[7]=(byte)(value);","returnresult;","staticintmoney2int(longvalue){","if(value\<Integer.MIN_VALUE)returnInteger.MIN_VALUE;","elseif(value\>Integer.MAX_VALUE)returnInteger.MAX_VALUE;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["noRow();","@Override","finalintgetRow(){","returnrow;","@Override","finallonggetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnreadNumeric().toString();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnreadString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case110://USAmm-dd-yyyy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","switch(type){","caseSQLTokenizer.DATABASE:","if(name.startsWith(\"file:\"))","name=name.substring(5);","Filedir=newFile(name);"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["returnintegerCache[value+4];","}else","returnnewInteger(value);","staticfinalShortgetShort(intvalue){","if(value\>=-4&&value\<256){","returnshortCache[value+4];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["daten[11]=hex2byte(chars,26);","daten[12]=hex2byte(chars,28);","daten[13]=hex2byte(chars,30);","daten[14]=hex2byte(chars,32);","daten[15]=hex2byte(chars,34);","returndaten;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["byte[]daten=newbyte[16];","daten[3]=hex2byte(chars,0);","daten[2]=hex2byte(chars,2);","daten[1]=hex2byte(chars,4);","daten[0]=hex2byte(chars,6);","daten[5]=hex2byte(chars,9);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["raFile=null;","return-1;","@Override","voidrollback()throwsSQLException{","FileChannelcurrentRaFile=raFile;","if(raFile==null){"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.TIMESTAMP:","bytes=newbyte[8];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnewMutableNumeric(readInt());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(readLong());","caseSQLTokenizer.REAL:","returnnewMutableNumeric(readFloat());","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatestaticbytehex2byte(char[]hex,intoffset)throwsSQLException{","try{","return(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));","}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR,newObject[]{newInteger(offset),newString(hex)});"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["return0;","caseSQLTokenizer.MONEY:","longValue=param1.getMoney();","if(longValue\<0)","return-1;","if(longValue\>0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["caseSQLTokenizer.BINARY:","switch(other.getDataType()){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');","formatHour12(details.hour,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["millis=0;","if(idx1==0&&length\>0){","throwSmallSQLException.create(Language.DATETIME_INVALID);","if(month\>=12){","throwSmallSQLException.create(Language.MONTH_TOOLARGE,datetime);","if(day\>=32){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["value=newLong(input.readLong());","break;","case2:","value=newLongTreeList(input);","break;","case3:"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{BYTEARR_INVALID_SIZE,\"Lunghezzanonvalidaperunarraydibytes:{0}.\"},","{LOB_DELETED,\"L\'\'oggettoLOBÃ¨statocancellato.\"},","{PARAM_CLASS_UNKNOWN,\"Classesconosciuta(\'\'{0}\'\')perilparametro.\"},","{PARAM_EMPTY,\"Ilparametro{0}Ã¨vuoto.\"},","{PARAM_IDX_OUT_RANGE,\"L\'\'indice{0}perilparametroÃ¨fuoridall\'\'intervalloconsentito(1\<=n\<={1}).\"},","{COL_DUPLICATE,\"Nomedicolonnaduplicato:\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(v==value.length)returnEMPTY_BYTES;","if(value[v]\<0){","complement=newbyte[(value.length-v)*4+4];","if(signum\<0)","complement[0]=complement[1]=complement[2]=complement[3]=-1;","offset=4;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["break;","}elseif(quote==0){","intk=tokenStart;","if(k==i){//pointisfirstcharacter","if(sql.length\>k+1){","charcc=sql[k+1];"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getLong()==right.getLong();","caseGREATER:returnleft.getLong()\>right.getLong();","caseGRE_EQU:returnleft.getLong()\>=right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(getDataType(getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","returnnewMutableNumeric(getInt());","MutableNumericnum=left.getNumeric();","num.mod(right.getNumeric());","returnnum;","default:throwcreateUnspportedConversion(SQLTokenizer.NUMERIC);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisNext=next();","rowSource.setRowPosition(rowPos);","return!isNext;","finalbooleanisAfterLast(){","returnrow\>0&&!isCurrentRow;","finalvoidbeforeFirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["case11://Japanyy/mm/dd","formatNumber(details.year%100,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["this.con=con;","privatevoidloadInList()throwsException{","if(cmdSel.compile(con)){","cmdSel.from.execute();","if(cmdSel.columnExpressions.size()!=1)","throwSmallSQLException.create(Language.SUBQUERY_COL_COUNT,newInteger(cmdSel.columnExpressions.size()));"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["Filefile;","try{","file=newFile(name).getCanonicalFile();","}catch(Throwableth){","throwSmallSQLException.createFromException(th);","StringdbKey=file.getName()+\";readonly=\"+con.isReadOnly();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDoubleImpl());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetNumericImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalintgetFunction(){returnSQLTokenizer.POWER;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.pow(param1.getDouble(),param2.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionPower.java|"],
"["returnnewDateTime(readDate(),SQLTokenizer.DATE).toString();","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["selCmd.setDistinct(true);","break;","default:","previousToken();","breakSwitch;","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["searchTree.letter=(char)(letters[0]|0x20);","SearchNodeprev=null;","SearchNodenode=searchTree;","booleanwasNextEntry=true;","for(inti=0;i\<letters.length;i++){","charc=(char)(letters[i]|0x20);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["checkStatement();","finalpublicSQLWarninggetWarnings(){","returnnull;","finalpublicvoidclearWarnings(){","finalpublicvoidsetCursorName(Stringname)throwsSQLException{","finalvoidsetGeneratedKeys(ResultSetrs){"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["publicshortgetShort(intcolumnIndex)throwsSQLException{","return(short)getInt(columnIndex);","publicintgetInt(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["publicExpressionFunctionConvert(Columndatatype,Expressionvalue,Expressionstyle){","super();","this.datatype=datatype;","Expression[]params=(style==null)?newExpression[]{value}:newExpression[]{value,style};","setParams(params);","intgetFunction(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["defaultName=tableName+\"_\"+Long.toHexString(System.currentTimeMillis())+Integer.toHexString(newObject().hashCode());","returndefaultName;","finalStringgetName(){","returnname;","finalbooleanisPrimary(){","returnconstraintType==SQLTokenizer.PRIMARY;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["intgetInt()throwsException{","returnfromEntry.getInt(colIdx);","longgetLong()throwsException{","returnfromEntry.getLong(colIdx);","floatgetFloat()throwsException{","returnfromEntry.getFloat(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["privatevoidcompileLinkExpressionParams(Expressionexpr)throwsException{","Expression[]expParams=expr.getParams();","isAggregateFunction=isAggregateFunction||expr.getType()\>=Expression.GROUP_BEGIN;","if(expParams!=null){","for(intk=0;k\<expParams.length;k++){","Expressionparam=expParams[k];"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["intstart=Math.min(Math.max(0,param2.getInt()-1),strLen);","intlength=param3.getInt();","if(length\<0)","throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));","length=Math.min(length,strLen-start);","returnstr.substring(start,start+length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["compile(con);","columnExpressions.setSize(count);","newRowSources=sources.toArray();","updateCount=0;","from.execute();","for(inti=0;i\<columnExpressions.size();i++){"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["token=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){","catalog=name;","name=nextIdentifier();","token=nextToken();","TableViewtableView=Database.getTableView(con,catalog,name);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(i\>=0&&isCarryOver)","isCarryOver=(value[i--]+=1)==0;","if(valueLength\>1&&value[0]==0){","int[]temp=newint[valueLength-1];","System.arraycopy(value,1,temp,0,valueLength-1);","value=temp;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["inttypeRight=right.getDataType();","returngetDataType(typeLeft,typeRight);","staticintgetBestNumberDataType(intparamDataType){","intdataTypeIdx=Utils.indexOf(paramDataType,DatatypeRange);","if(dataTypeIdx\>=NVARCHAR_IDX)","returnSQLTokenizer.DOUBLE;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["limit(selCmd);","token=nextToken();","previousToken();","returnselCmd;","privateCommanddelete()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalvoidcloseConnection(SSConnectioncon)throwsSQLException{","synchronized(databases){","Iteratoriterator=databases.values().iterator();","while(iterator.hasNext()){","Databasedatabase=(Database)iterator.next();","WeakHashMapconnections=database.connections;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();","default:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"NON_UNIQUE\",\"INDEX_QUALIFIER\",\"INDEX_NAME\",\"TYPE\",\"ORDINAL_POSITION\",\"COLUMN_NAME\",\"ASC_OR_DESC\",\"CARDINALITY\",\"PAGES\",\"FILTER_CONDITION\"};","Object[][]data=con.getDatabase(false).getIndexInfo(con,table,unique);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleansupportsResultSetType(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["status=DELETED;","if(sharedPageData){","page=newbyte[PAGE_CONTROL_SIZE];","writeFinsh(con);","privateintoffset;//aktuelleread/writePositioninderPage","intgetCurrentOffsetInPage(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intgetRow()throwsException{","returncommandSelect.getRow();","longgetRowPosition(){","returncommandSelect.from.getRowPosition();","voidsetRowPosition(longrowPosition)throwsException{","commandSelect.from.setRowPosition(rowPosition);"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseSQLTokenizer.INT:","returnnewInteger(getInt());","caseSQLTokenizer.BIGINT:","returnnewLong(getLong());","caseSQLTokenizer.REAL:","returnnewFloat(getFloat());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetCatalogs()throwsSQLException{","String[]colNames={\"TABLE_CAT\"};","Object[][]data=Database.getCatalogs(con.getDatabase(true));","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTableTypes()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnnewMutableNumeric(Utils.bytes2double(readLongBinary()));","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(v\<value.length&&value[v]==0)v++;","if(v==value.length)returnEMPTY_BYTES;","if(value[v]\<0){","complement=newbyte[(value.length-v)*4+4];","if(signum\<0)","complement[0]=complement[1]=complement[2]=complement[3]=-1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["StringgetName(){","returnexpr.getAlias();","booleanisAutoIncrement(){","returnexpr.isAutoIncrement();","booleanisCaseSensitive(){","returnexpr.isCaseSensitive();"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["from(cmd);","returncmd;","privateCommandinsert()throwsSQLException{","SQLTokentoken=nextToken(MISSING_INTO);","CommandInsertcmd=newCommandInsert(con.log,nextIdentifier());","intparthesisCount=0;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["thrownewError(\"Precision:\"+SQLTokenizer.getKeyWord(dataType));","returndefaultValue;","publicintgetColumnDisplaySize(intcolumn)throwsSQLException{","returngetColumnExpression(column).getDisplaySize();","publicStringgetColumnLabel(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.TIMESTAMP:","offset+=8;","break;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["packagesmallsql.database;","importjava.util.List;","importjava.sql.*;","importsmallsql.database.language.Language;","finalclassSQLParser{","SSConnectioncon;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanrelative(introws){","if(rows==0)return(currentRow!=null);","rowIdx=Math.min(Math.max(rowIdx+rows,-1),rowList.size());","returnmove();","finalintgetRow(){","returncurrentRow==null?0:rowIdx+1;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["returntrue;","returnfalse;","abstractvoiddeleteRow()throwsSQLException;","abstractvoidupdateRow(Expression[]updateValues)throwsException;","abstractvoidinsertRow(Expression[]updateValues)throwsException;","finalbooleanisScrollable(){"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["returnbytes;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["synchronized(getMonitor()){","commitPages.add(storePage);","publicvoidcommit()throwsSQLException{","log.println(\"Commit\");","testClosedConnection();","synchronized(getMonitor()){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returntoken;","for(inti=validValues.length-1;i\>=0;i--){","if(token.value==validValues[i])returntoken;","throwcreateSyntaxError(token,validValues);","privateCommandSelectsingleSelect()throwsSQLException{","CommandSelectselCmd=newCommandSelect(con.log);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncolumnExpressions.get(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getObject();","StringgetString(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["publicstaticfinalStringGENER_KEYS_UNREQUIRED=\"SS-0584\";","publicstaticfinalStringSEQUENCE_HEX_INVALID=\"SS-0585\";","publicstaticfinalStringSEQUENCE_HEX_INVALID_STR=\"SS-0586\";","publicstaticfinalStringSYNTAX_BASE_OFS=\"SS-0610\";","publicstaticfinalStringSYNTAX_BASE_END=\"SS-0611\";","publicstaticfinalStringSTXADD_ADDITIONAL_TOK=\"SS-0612\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicDategetDate(StringparameterName)throwsSQLException{","returngetDate(findParameter(parameterName));","publicTimegetTime(StringparameterName)throwsSQLException{","returngetTime(findParameter(parameterName));","publicTimestampgetTimestamp(StringparameterName)throwsSQLException{","returngetTimestamp(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["{UNSUPPORTED_TYPE_SUM,\"Unsupporteddatatype\'\'{0}\'\'forSUMfunction.\"},","{UNSUPPORTED_TYPE_MAX,\"Unsupporteddatatype\'\'{0}\'\'forMAXfunction.\"},","{UNSUPPORTED_CONVERSION,\"Can\'\'tconvert\'\'{0}\'\'[{1}]to\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionINSERT.\"},","{SUBSTR_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringvaluetoolargeforcolumn.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["@Override","booleanisValidPage(){","returnstatus==NORMAL||(status==UPDATED_PAGE&&updatePointer!=null);","@Override","intgetUsedSize(){","returnsizeUsed;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseLOCK_READ:","caseLOCK_WRITE:","LongpageKey=newLong(fileOffset);//TODOperformance","lock=(TableStorePage)locks.get(pageKey);","prev=lock;","while(lock!=null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}elseif(quote==0){","if(wasWhiteSpace){","node=searchTree;","}else{","if(node==null){","value=0;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intnewRow=rows+rowIdx+1;","if(newRow\<=0){","beforeFirst();","returnfalse;","}else{","returnabsolute(newRow);"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["finalprivatevoidsetPreviousOffset(LongTreeListEnumlistEnum){","intpreviousOffset=listEnum.offsetStack[listEnum.stack]-2*(2+(listEnum.stack\>=3?0:pointerSize));","if(listEnum.stack==0){","offset=previousOffset;","return;","offset=listEnum.offsetStack[listEnum.stack-1]-pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["importjava.sql.*;","classTableStorePageInsertextendsTableStorePage{","finalprivateStorePageLinklink=newStorePageLink();","TableStorePageInsert(SSConnectioncon,Tabletable,intlockType){","super(con,table,lockType,-1);","link.page=this;"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["caseSQLTokenizer.BIT:","return(obj.equals(Boolean.TRUE))?1:0;","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicstaticfinalStringROW_DELETED=\"SS-0524\";","publicstaticfinalStringSAVEPT_INVALID_TRANS=\"SS-0550\";","publicstaticfinalStringSAVEPT_INVALID_DRIVER=\"SS-0551\";","publicstaticfinalStringALIAS_UNSUPPORTED=\"SS-0580\";","publicstaticfinalStringISOLATION_UNKNOWN=\"SS-0581\";","publicstaticfinalStringFLAGVALUE_INVALID=\"SS-0582\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Propertiesprops=(Properties)info.clone();","if(!acceptsURL(url)){","returnprops;","intidx1=url.indexOf(\':\',5);//searchafter\"jdbc:\"","intidx2=url.indexOf(\'?\');","if(idx1\>0){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["offset=0;","listEnum.stack=0;","listEnum.offsetStack[0]=2+pointerSize;","loopToEndOfNode(listEnum);","}else{","setPreviousOffset(listEnum);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["break;","switch(pageOperation){","caseSQLTokenizer.CREATE:{","if(locks.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["for(inti=values.length-1;i\>=0;i--){","values[i].clear();","publicvoidmoveToInsertRow()throwsSQLException{","if(isUpdatable){","isInsertRow=true;","clearRowBuffer();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["row++;","returntrue;","finalvoidafterLast()throwsException{","rowSource.afterLast();","row=0;","finalintgetRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["returnrow;","finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);","finalvoidnullRow(){"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case110://USAmm-dd-yyyy","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnull;","if(serializeConnections.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti)throwsSQLException{","try{","Objectobj=getValue(i).getObject();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["throwSmallSQLException.createFromException(e);","publiclonggetLong(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getLong();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","return(byte[])obj;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalExpressionNULL=newExpressionValue(null,SQLTokenizer.NULL);","finalprivateinttype;","privateStringname;//thenameoftheoriginalcolumninthetable","privateStringalias;","privateExpression[]params;","Expression(inttype){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["finalvoidscanObjectOffsets(int[]offsets,int[]dataTypes){/*thereisnothingtoscan*/}","finalintgetUsedSize(){","return0;","finallonggetNextPagePos(){","returnnextPagePos;","finalvoiddeleteRow(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["listEnum.offsetStack[0]=2+pointerSize;","loopToEndOfNode(listEnum);","}else{","setPreviousOffset(listEnum);","longresult=listEnum.resultStack[listEnum.stack];","while(true){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["{VIEW_INSERT,\"01000\"},","{VIEWDROP_NOT_VIEW,\"01000\"},","{VIEW_CANTDROP,\"01000\"},","{RSET_NOT_PRODUCED,\"01000\"},","{RSET_READONLY,\"01000\"},","{RSET_FWDONLY,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["raFile=Utils.openRaFile(file,database.isReadOnly());","ByteBufferbuffer=ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","intmagic=buffer.getInt();","intversion=buffer.getInt();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|","|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnreadString().getBytes();","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);","while(lock!=null){","if(lock.con!=con)returnnull;//thereisalreadyanylockfromanotherconnection,wecannotstartwrite","if(lock.lockType\<LOCK_WRITE){","lock.lockType=LOCK_WRITE;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["offset=getPointer();","firstNode=true;","break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){","offset-=2;","while(true){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["catalogs.toArray(result);","returnresult;","StringsgetTables(StringtablePattern){","Stringslist=newStrings();","Filedirs[]=directory.listFiles();","if(dirs!=null)"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(param1.getBoolean())","returnparam2.getString();","returnparam3.getString();","finalintgetDataType(){","returnExpressionArithmetic.getDataType(param2,param3);","finalintgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["if(obj==null)returnnull;","switch(datatype.getDataType()){","caseSQLTokenizer.BIT:","return((Boolean)obj).booleanValue()?\"1\":\"0\";","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(valueinstanceofLongTreeList){","output.writeByte(2);","((LongTreeList)value).save(output);","}else","if(valueinstanceofIndexNode){","output.writeByte(3);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnInteger.MAX_VALUE;","if(value\<Integer.MIN_VALUE)","returnInteger.MIN_VALUE;","return(int)value;","staticlongdouble2long(doublevalue){","if(value\>Long.MAX_VALUE)"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","bytes=newbyte[4];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["case111://Japanyy/mm/dd","formatNumber(details.year,4,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewBigDecimal(newBigInteger(toByteArray()),scale).toString();","if(scale\>0){","while(buf.length()\<=scale)buf.insert(0,\'0\');","buf.insert(buf.length()-scale,\'.\');","if(signum\<0)buf.insert(0,\'-\');","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseTypes.TINYINT:","caseTypes.SMALLINT:","caseTypes.INTEGER:","return\"java.lang.Integer\";","caseTypes.BIT:","caseTypes.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnTypes.VARCHAR;","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnTypes.LONGVARCHAR;","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["writeTimestamp(expr.getLong());","break;","caseSQLTokenizer.TIME:","writeTime(expr.getLong());","break;","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intlength=str2.length;","if(length==0){","returnstr1;","byte[]str3=param3.getBytes();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","intidx1=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returntrue;","publicbooleansupportsANSI92FullSQL(){","returntrue;","publicbooleansupportsIntegrityEnhancementFacility(){","returntrue;","publicbooleansupportsOuterJoins(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Expressionparam2;","Expressionparam3;","Expressionparam4;","ExpressionFunction(){","super(FUNCTION);","abstractintgetFunction();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionATan2();","break;","caseSQLTokenizer.CEILING:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCeiling();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{KEY_DUPLICATE,\"Chiaveduplicata.\"},","{MONTH_TOOLARGE,\"ValoredelmesetroppoaltodelinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"ValoredelgiornotroppoaltroinDATEoTIMESTAMP\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"ValoredelleoretroppoaltoininTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"ValoredeiminutitroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"ValoredeiseconditroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","writeLongString(expr.getString());","break;","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnname.toUpperCase(Locale.US);//usethesamelocaleforall","TableViewget(Stringname){","return(TableView)map.get(getUniqueKey(name));","voidput(Stringname,TableViewtableView){","map.put(getUniqueKey(name),tableView);","TableViewremove(Stringname){"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["importsmallsql.database.language.Language;","classStoreNullextendsStore{","privatefinallongnextPagePos;","StoreNull(){","this(-1);","StoreNull(longnextPos){"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["month=m;","day=day-MONTH_DAYS[m]+1;","break;","staticbooleanisLeapYear(intyear){","returnyear%4==0&&(year%100!=0||year%400==0);","privatestaticfinalCalendarcal=Calendar.getInstance();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewTime(DateTime.addDateTimeOffset(time));","staticDategetDate(longtime){","returnnewDate(DateTime.addDateTimeOffset(time));","publicObjectgetImmutableObject(){","switch(dataType){","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intoffset1=0;","intoffset2=0;","intoffset3=0;","offset=0;","intshift=48;","booleanfirstNode=true;//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(idx2\>0){","hour=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);","minute=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(((ExpressionName)expr).fromEntry!=fromEntry)returnfalse;","returntrue;","booleanisNull()throwsException{","returnfromEntry.isNull(colIdx);","booleangetBoolean()throwsException{","returnfromEntry.getBoolean(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["return;","if(line==null){","return;//endofprogram","if(line.length()==0&&command.length()\>0){","booleanisRS=st.execute(command.toString());","if(isRS){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["nextLock=null;","rollback();","returnfileOffset;","if(lockType==TableView.LOCK_READ)","returnfileOffset;","returnsuper.commit();"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(StringcolumnName,Calendarcal)throwsSQLException{","returngetTimestamp(findColumn(columnName),cal);","publicURLgetURL(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["}else{","previousToken();","if(isMinus)","returnnewExpressionArithmetic(expr,ExpressionArithmetic.NEGATIVE);","returnexpr;","returnnull;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionFloor();","break;","caseSQLTokenizer.LOG:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnUtils.bytes2int(readBinary())!=0;","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()!=0;","caseSQLTokenizer.SMALLINT:","returnreadShort()!=0;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewURL(expr.getString());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.DATABASE:","caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","returnnewCommandDrop(con.log,catalog,name,tokenType.value);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["sortedRowCount++;","scrollStatus=index.createScrollStatus(orderBy);","useSetRowPosition=false;","finalbooleanisBeforeFirst(){","returnrow==0;","finalbooleanisFirst(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["importjava.util.ArrayList;","importjava.util.List;","importjava.util.Map;","importjava.util.Properties;","importsmallsql.database.language.Language;","publicclassSSConnectionimplementsConnection{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["if(!(exprinstanceofExpressionName))returnfalse;","if(((ExpressionName)expr).fromEntry!=fromEntry)returnfalse;","returntrue;","booleanisNull()throwsException{","returnfromEntry.isNull(colIdx);","booleangetBoolean()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);","default:thrownewError();","@Override","StringgetString(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["puffer[offset++]=(byte)(value);","voidwriteLong(longvalue){","verifyFreePufferSize(8);","puffer[offset++]=(byte)(value\>\>56);","puffer[offset++]=(byte)(value\>\>48);","puffer[offset++]=(byte)(value\>\>40);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(newValue!=null)","((MutableNumeric)value).add(newValue);","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalprivateinttype;","privateStringname;//thenameoftheoriginalcolumninthetable","privateStringalias;","privateExpression[]params;","Expression(inttype){","this.type=type;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_TABLE);","buffer.putInt(TABLE_VIEW_VERSION);","buffer.position(0);","raFile.write(buffer);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["currentRow=null;","finalbooleanisBeforeFirst(){","returnrowIdx\<0||rowList.size()==0;","finalbooleanisFirst(){","returnrowIdx==0&&currentRow!=null;","finalbooleanfirst(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;","Stringdef=newString(sql,offset,length);","col.setDefaultValue(expr,def);","defaultWasSet=true;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnMoney.createFromUnscaledValue(param1.getMoney());","caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(param1.getDataType()){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","byte[]bytes=newbyte[1];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["page=find(page,numericToBinarySortOrder(expr.getNumeric()),nodeList);","break;","default:","thrownewError(String.valueOf(expr.getDataType()));","returnpage;","finalvoidaddValues(longrowOffset,Expressionsexpressions)throwsException{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnexpr.isCaseSensitive();","booleanisNullable(){","returnexpr.isNullable();","intgetDataType(){","returnexpr.getDataType();","intgetDisplaySize(){"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["for(intt=0;t\<tables.size();t++){","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(t));","TableViewtable=result.getTableView();","ColumnstableColumns=table.columns;","intcount=tableColumns.size();","Expression[]updateValues=newExpression[count];"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["keywords.put(newInteger(VALUE),\"\<expression\>\");","keywords.put(newInteger(IDENTIFIER),\"\<identifier\>\");","keywords.put(newInteger(NUMBERVALUE),\"\<number\>\");","staticfinalintPERCENT=\'%\';//37","staticfinalintBIT_AND=\'&\';//38","staticfinalintPARENTHESIS_L=\'(\';//40"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseEQUALS:returnleft.getFloat()==right.getFloat();","caseGREATER:returnleft.getFloat()\>right.getFloat();","caseGRE_EQU:returnleft.getFloat()\>=right.getFloat();","caseLESSER:returnleft.getFloat()\<right.getFloat();","caseLES_EQU:returnleft.getFloat()\<=right.getFloat();","caseUNEQUALS:returnleft.getFloat()!=right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(idx1\>0){","buffer.write(str1,idx1,str1.length-idx1);","returnbuffer.toByteArray();","returnstr1;","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returnparam1.isNull()||param1.getInt()\<0;","finalStringgetString()throwsException{","if(isNull())returnnull;","intsize=param1.getInt();","if(size\<0){","returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["if(second\>=60){","throwSmallSQLException.create(Language.SECS_TOOLARGE,datetime);","if(millis\>=1000){","throwSmallSQLException.create(Language.MILLIS_TOOLARGE,datetime);","returncalcMillis(year,month,day,hour,minute,second,millis);","}catch(SQLExceptionex){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returngetBigDecimal(findParameter(parameterName));","publicObjectgetObject(StringparameterName,Mapmap)throwsSQLException{","returngetObject(findParameter(parameterName),map);","publicRefgetRef(StringparameterName)throwsSQLException{","returngetRef(findParameter(parameterName));","publicBlobgetBlob(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["continue;","returnfalse;","returntrue;","privatebooleancreateJoinScrollIndex()throwsException{","if(type==CROSS_JOIN){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["longList.getNext(longListEnum):","longList.getPrevious(longListEnum);","if(rowOffset\<0){","longList=null;","}else{","returnrowOffset;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["returnreadSmallDateTime()!=0;","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnfalse;","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BOOLEAN\"});","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(defaultValue==-1)","return38;","returndefaultValue;","caseSQLTokenizer.TIMESTAMP:","return23;","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","intreadShort(){","return(page[offset++]\<\<8)|(page[offset++]&0xFF);","voidwriteInt(intvalue){","intnewSize=offset+4;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatestaticfinalint[]MISSING_OPTIONS_DATATYPE={SQLTokenizer.DEFAULT,SQLTokenizer.IDENTITY,SQLTokenizer.NOT,SQLTokenizer.NULL,SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_NUMBERVALUE={SQLTokenizer.NUMBERVALUE};","privatestaticfinalint[]MISSING_AND={SQLTokenizer.AND};","privatestaticfinalint[]MISSING_JOIN={SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OUTER_JOIN={SQLTokenizer.OUTER,SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OJ={SQLTokenizer.OJ};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longtransactionTime;","SSSavepoint(intid,Stringname,longtransactionTime){","this.id=id;","this.name=name;","this.transactionTime=transactionTime;","publicintgetSavepointId(){"]": ["|project://smallsql/src/smallsql/database/SSSavepoint.java|"],
"["packagesmallsql.database;","finalclassMutableIntegerextendsNumberimplementsMutable{","intvalue;","MutableInteger(intvalue){","this.value=value;","publicdoubledoubleValue(){"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["voidexecute()throwsException{","rowSource.execute();","rowList.clear();","rowIdx=-1;","booleanisExpressionsFromThisRowSource(Expressionscolumns){","returnrowSource.isExpressionsFromThisRowSource(columns);"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returngetTime(time);","default:","returngetTimestamp(time);","staticclassDetails{","intyear;","intmonth;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnull;","finalintgetPrecision(){","switch(dataType){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","return((String)value).length();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnbuf.toString();","case101://USAmm/dd/yyyy","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["default:","if(!isKeyword(token))","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.FROM});","previousToken();","returnselCmd;","finalprivateCommandSelectselect()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateintcolIdx;","privateTableViewtable;","privateColumncolumn;","ExpressionName(Stringname){","super(NAME);","setName(name);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["this.dataType=SQLTokenizer.SMALLINT;","else","if(newValueinstanceofInteger)","this.dataType=SQLTokenizer.INT;","else","if(newValueinstanceofLong||newValueinstanceofIdentity)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.LEFT_JOIN);","break;","caseSQLTokenizer.RIGHT:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Object[]row=newObject[10];","row[0]=catalog;","row[2]=table;","try{","if(database.getTableView(con,table)instanceofView){","if(isTypeView){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.UNEQUALS:returnUNEQUALS;","caseSQLTokenizer.BETWEEN:returnBETWEEN;","caseSQLTokenizer.LIKE:returnLIKE;","caseSQLTokenizer.IN:returnIN;","caseSQLTokenizer.IS:returnISNULL;","caseSQLTokenizer.OR:returnOR;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.OR:returnOR;","caseSQLTokenizer.AND:returnAND;","caseSQLTokenizer.NOT:returnNOT;","caseSQLTokenizer.BIT_OR:returnBIT_OR;","caseSQLTokenizer.BIT_AND:returnBIT_AND;","caseSQLTokenizer.BIT_XOR:returnBIT_XOR;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicObjectgetImmutableObject(){","switch(dataType){","caseSQLTokenizer.DATE:","returngetDate(time);","caseSQLTokenizer.TIME:","returngetTime(time);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["TablenewTable=database.createTable(con,newName,newColumns,oldTable.indexes,indexes,foreignKeys);","StringBufferbuffer=newStringBuffer(256);","buffer.append(\"INSERTINTO\").append(newName).append(\'(\');","for(intc=0;c\<oldColumns.size();c++){","if(c!=0){","buffer.append(\',\');"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["publicstaticfinalStringSTXADD_IDENT_EMPTY=\"SS-0614\";","publicstaticfinalStringSTXADD_IDENT_WRONG=\"SS-0615\";","publicstaticfinalStringSTXADD_OPER_MINUS=\"SS-0616\";","publicstaticfinalStringSTXADD_FUNC_UNKNOWN=\"SS-0617\";","publicstaticfinalStringSTXADD_PARAM_INVALID_COUNT=\"SS-0618\";","publicstaticfinalStringSTXADD_JOIN_INVALID=\"SS-0619\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.SMALLINT:","returnreadShort();","caseSQLTokenizer.INT:","returnreadInt();","caseSQLTokenizer.BIGINT:","returnreadLong();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["cmd.setWhere(expression(cmd,0));","privatevoidhaving(CommandSelectcmd)throwsSQLException{","cmd.setHaving(expression(cmd,0));","privatestaticfinalint[]COMMANDS={SQLTokenizer.SELECT,SQLTokenizer.DELETE,SQLTokenizer.INSERT,SQLTokenizer.UPDATE,SQLTokenizer.CREATE,SQLTokenizer.DROP,SQLTokenizer.ALTER,SQLTokenizer.SET,SQLTokenizer.USE,SQLTokenizer.EXECUTE,SQLTokenizer.TRUNCATE};","privatestaticfinalint[]COMMANDS_ESCAPE={SQLTokenizer.D,SQLTokenizer.T,SQLTokenizer.TS,SQLTokenizer.FN,SQLTokenizer.CALL};","privatestaticfinalint[]COMMANDS_ALTER={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.PROCEDURE,};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(Entrye=tab[i];e!=null;e=e.next)","if(value.equals(e.value))","returntrue;","returnfalse;","staticclassEntry{","finallongkey;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["break;","caseSQLTokenizer.TIMESTAMP:","writeTimestamp(expr.getLong());","break;","caseSQLTokenizer.TIME:","writeTime(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","return(byte[])obj;","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();","case26:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["addKeyWord(\"SQL_DOUBLE\",SQL_DOUBLE);","addKeyWord(\"SQL_FLOAT\",SQL_FLOAT);","addKeyWord(\"SQL_INTEGER\",SQL_INTEGER);","addKeyWord(\"SQL_LONGVARBINARY\",SQL_LONGVARBINARY);","addKeyWord(\"SQL_LONGVARCHAR\",SQL_LONGVARCHAR);","addKeyWord(\"SQL_REAL\",SQL_REAL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicbooleansupportsResultSetConcurrency(inttype,intconcurrency){","if(type\>=ResultSet.TYPE_FORWARD_ONLY&&type\<=ResultSet.TYPE_SCROLL_SENSITIVE&&","concurrency\>=ResultSet.CONCUR_READ_ONLY&&concurrency\<=ResultSet.CONCUR_UPDATABLE)","returntrue;","returnfalse;","publicbooleanownUpdatesAreVisible(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returngetAsciiStream(findColumn(columnName));","publicInputStreamgetUnicodeStream(StringcolumnName)throwsSQLException{","returngetUnicodeStream(findColumn(columnName));","publicInputStreamgetBinaryStream(StringcolumnName)throwsSQLException{","returngetBinaryStream(findColumn(columnName));","publicSQLWarninggetWarnings(){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnFloat.parseFloat(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2float(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.createFromException(e);","StringgetName(){","returnname;","booleanisReadOnly(){","returnreadonly;","staticfinalvoidcloseConnection(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["break;","caseSQLTokenizer.CONCAT:","if(paramCount!=2){","invalidParamCount=true;","expr=null;//onlyforcompiler","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["chars[3]=digits[(daten[offset+2])&0x0F];","chars[4]=digits[(daten[offset+1]\>\>4)&0x0F];","chars[5]=digits[(daten[offset+1])&0x0F];","chars[6]=digits[(daten[offset+0]\>\>4)&0x0F];","chars[7]=digits[(daten[offset+0])&0x0F];","chars[9]=digits[(daten[offset+5]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.NOT:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NOT/10),ExpressionArithmetic.NOT);","break;","caseSQLTokenizer.MINUS:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NEGATIVE/10),ExpressionArithmetic.NEGATIVE);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Table.drop(this,tableName);","voidremoveTableView(StringtableViewName){","synchronized(tableViews){","tableViews.remove(tableViewName);","voidreplaceTable(TableoldTable,TablenewTable)throwsException{","synchronized(tableViews){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["row=0;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","booleanisExpressionsFromThisRowSource(Expressionscolumns){"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["for(inti=0;i\<params.length;i++){","expression.setParamAt(patchExpression(params[i]),i);","finalprivateExpressionpatchExpression(Expressionexpr)throwsSQLException{","intidx=addInternalExpressionFromSelect(expr);","if(idx\>=0){","ExpressionorigExpression=expr;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["value++;","con.add(createStorePage());","voidsetNextValue(Expressionexpr)throwsException{","longnewValue=expr.getLong();","if(newValue\>value){","value=newValue;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["byte[]b=newbyte[byteLen-start];","System.arraycopy(bytes,start,b,0,b.length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case12://ISOyymmdd","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["buf.setCharAt(buf.length()-i,Utils.digits[value%10]);","value/=10;","privatefinalstaticvoidformatMillis(intmillis,StringBufferbuf){","buf.append(Utils.digits[(millis/100)%10]);","intvalue=millis%100;","if(value!=0){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnthis;","publicStatementcreateStatement()throwsSQLException{","returnnewSSStatement(this);","publicPreparedStatementprepareStatement(Stringsql)throwsSQLException{","returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicClobgetClob(StringcolumnName)throwsSQLException{","returngetClob(findColumn(columnName));","publicArraygetArray(StringcolumnName)throwsSQLException{","returngetArray(findColumn(columnName));","publicDategetDate(intcolumnIndex,Calendarcal)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intcount=param2.getInt();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","for(inti=0;i\<count;i++){","buffer.write(bytes);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["finalbooleannext()throwsException{","if(filePos\<0)returnfalse;","setNextFilePos();","row++;","returnmoveToValidRow();","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnsize;","finalvoidsetSize(intnewSize){","for(inti=newSize;i\<size;i++)data[i]=null;","size=newSize;","if(size\>data.length)resize(newSize);","finalExpressionget(intidx){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["MutableNumericnum=right.getNumeric();","num.mul(left.getInt());","returnnum;","}else{","MutableNumericnum=left.getNumeric();","num.mul(right.getNumeric());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return((page[offset++])\<\<24)|","((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));","voidwriteLong(longvalue){","intnewSize=offset+8;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buffer.append((char)((v%1000)/100+\'0\'));","buffer.append((char)((v%100)/10+\'0\'));","buffer.append((char)((v%10)+\'0\'));","returnbuffer.toString();","publicbooleanequals(Objectobj){","return(objinstanceofMoney&&((Money)obj).value==value);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["writeInt(Float.floatToIntBits(value));","floatreadFloat(){","returnFloat.intBitsToFloat(readInt());","voidwriteNumeric(MutableNumericnum){","writeByte(num.getInternalValue().length);","writeByte(num.getScale());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalprivateintoperation;","ExpressionArithmetic(Expressionleft,intoperation){","super(FUNCTION);","this.left=left;","this.operation=operation;","super.setParams(newExpression[]{left});"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TINYINT:","return3;","caseSQLTokenizer.SMALLINT:","return6;","caseSQLTokenizer.INT:","return10;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);","minute=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\'.\',idx1);","if(idx2\<0)idx2=datetime.length();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(size\>=data.length){","resize(size\<\<1);","data[size++]=column;","Columnscopy(){","Columnscopy=newColumns();","Column[]cols=copy.data=(Column[])data.clone();"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["raFile.write(buffer);","finalvoidwriteExpression(intcolumnIdx,ExpressionvalueExpression){","intidx=matrix[columnIdx];","if(idx\>=0)//setonlyifthecolumnpartofthisindex","expressions.set(idx,valueExpression);","finalvoidwriteFinish(SSConnectioncon){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","page=add(page,rowOffset,bytesToBinarySortOrder(expr.getBytes()),isLastValues);","break;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","page=add(page,rowOffset,expr.getBoolean()?2:1,isLastValues,1);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicstaticfinalStringDELETE_WO_FROM=\"SS-0163\";","publicstaticfinalStringINSERT_WO_FROM=\"SS-0164\";","publicstaticfinalStringTABLE_CANT_RENAME=\"SS-0190\";","publicstaticfinalStringTABLE_CANT_DROP=\"SS-0191\";","publicstaticfinalStringTABLE_CANT_DROP_LOCKED=\"SS-0192\";","publicstaticfinalStringTABLE_CORRUPT_PAGE=\"SS-0193\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Expressionparam1=params[1];","Expressionscolumns0=Utils.getExpressionNameFromTree(param0);","Expressionscolumns1=Utils.getExpressionNameFromTree(param1);","if(left.isExpressionsFromThisRowSource(columns0)&&right.isExpressionsFromThisRowSource(columns1)){","leftEx.add(param0);","rightEx.add(param1);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnview;","voiddeleteRow()throwsSQLException{","commandSelect.deleteRow(con);","voidupdateRow(Expression[]updateValues)throwsException{","commandSelect.updateRow(con,updateValues);","voidinsertRow(Expression[]updateValues)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["longrowPosition=scrollStatus.getRowOffset(true);","if(rowPosition\>=0){","row++;","rowSource.setRowPosition(rowPosition);","returntrue;","if(currentInsertedRow()\<insertedRows.size()-1){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["publicintintValue(){","return(int)value;","@Override","publiclonglongValue(){","returnvalue;","@Override"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["finalclassExpressionFunctionPIextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.PI;}","booleanisNull()throwsException{","returnfalse;","finaldoublegetDouble()throwsException{","returnMath.PI;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionPI.java|"],
"["assert(messageCode!=null):\"Fillparameters\";","Stringmessage=translateMsg(messageCode,null);","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Objectparam0){","Stringmessage=translateMsg(messageCode,newObject[]{param0});"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["addKeyWord(\"SIN\",SIN);","addKeyWord(\"SQRT\",SQRT);","addKeyWord(\"TAN\",TAN);","addKeyWord(\"TRUNCATE\",TRUNCATE);","staticfinalintASCII=1100;//firststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","staticfinalintBITLEN=1101;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["keys.add(valueExpress.getObject());","break;","if(needGeneratedKeys&&generatedKeysType==2){","int[]keyIndexes=st.getGeneratedKeyIndexes();","for(inti=0;i\<keyIndexes.length;i++){","if(c+1==keyIndexes[i]){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["for(inti=0;i\<tables.size();i++){","Stringtable=tables.get(i);","Object[]row=newObject[10];","row[0]=catalog;","row[2]=table;","try{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["listEnum.offsetStack[listEnum.stack]=offset+pointerSize;","offset=getPointer();","shift-=16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack]=result;","loopToEndOfNode(listEnum);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnsupportsResultSetType(type);","publicbooleanothersInsertsAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanupdatesAreDetected(inttype){","returnfalse;","publicbooleandeletesAreDetected(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.storePage=storePage;","this.filePos=filePos;","this.type=type;","staticStoreImplcreateStore(Tabletable,StorePagestorePage,inttype,longfilePos)throwsSQLException{","try{","StoreImplstore=newStoreImpl(table,storePage,type,filePos);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getBoolean()==right.getBoolean();","caseUNEQUALS:returnleft.getBoolean()!=right.getBoolean();","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return(long)value;","staticfloatbytes2float(byte[]bytes){","returnFloat.intBitsToFloat(bytes2int(bytes));","staticdoublebytes2double(byte[]bytes){","returnDouble.longBitsToDouble(bytes2long(bytes));","staticlongbytes2long(byte[]bytes){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["break;","caseSQLTokenizer.TINYINT:","writeByte(expr.getInt());","break;","caseSQLTokenizer.SMALLINT:","writeShort(expr.getInt());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this(big.unscaledValue().toByteArray());","scale=big.scale();","MutableNumeric(intsignum,int[]value,intscale){","this.signum=signum;","this.value=value;","this.scale=scale;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["addKeyWord(\"QQ\",SQL_TSI_QUARTER);","addKeyWord(\"SQL_TSI_QUARTER\",SQL_TSI_QUARTER);","addKeyWord(\"YY\",SQL_TSI_YEAR);","addKeyWord(\"YYYY\",SQL_TSI_YEAR);","addKeyWord(\"SQL_TSI_YEAR\",SQL_TSI_YEAR);","staticfinalintIFNULL=1301;//firstsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{COL_IDX_OUT_RANGE,\"SpaltenindexauÃŸerhalbdesGÃ¼ltigkeitsbereiches:{0}.\"},","{COL_AMBIGUOUS,\"DieSpalte\'\'{0}\'\'istmehrdeutig.\"},","{GROUP_AGGR_INVALID,\"AggregatfunktionsindnichterlaubtimGROUPBYKlausel:({0}).\"},","{GROUP_AGGR_NOTPART,\"DerAusdruck\'\'{0}\'\'istnichtTeileinerAggregatfunktionoderGROUPBYKlausel.\"},","{ORDERBY_INTERNAL,\"InternerErrormitORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DieSELECTTeiledesUNIONhabeneineunterschiedlicheSpaltenanzahl:{0}und{1}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["sizeUsed=offset;","break;","caseSQLTokenizer.DELETE:","sizeUsed=PAGE_CONTROL_SIZE;","break;","default:thrownewError(\"\"+type);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalTableStorePageadd(longkey,TableStorePagevalue){","inti=(int)(key%table.length);","table[i]=newEntry(key,value,table[i]);","if(size++\>=threshold)","resize(2*table.length);","returnnull;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["voidrollback()throwsSQLException{","FileChannelcurrentRaFile=raFile;","if(raFile==null){","return;","raFile=null;","try{"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["Expressionleft=groupBy.get(i);","intidx=addInternalExpressionFromGroupBy(left);","ExpressionNameright=newExpressionName(null);","right.setFrom(this,idx,newColumnExpression(left));","Expressionexpr=newExpressionArithmetic(left,right,ExpressionArithmetic.EQUALS_NULL);","currentGroup=(currentGroup==null)?"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["super(name,columns);","this.database=database;","this.references=foreignKeys;","newIndexes.create(con,database,this);","if(existIndexes==null){","this.indexes=newIndexes;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["updateDate(findColumn(columnName),x);","publicvoidupdateTime(StringcolumnName,Timex)throwsSQLException{","updateTime(findColumn(columnName),x);","publicvoidupdateTimestamp(StringcolumnName,Timestampx)throwsSQLException{","updateTimestamp(findColumn(columnName),x);","publicvoidupdateAsciiStream(StringcolumnName,InputStreamx,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["System.arraycopy(remainderValue,1,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(char[]remainderValue,intoffset){","intlength=remainderValue.length-offset;","this.remainderKey=newchar[length];","System.arraycopy(remainderValue,offset,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(longremainderValue,intcharCount){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["finalinthour;","finalintminute;","finalintsecond;","finalintmillis;","intidx1=0;","intidx2=datetime.indexOf(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnreadLong()*10000L;","caseSQLTokenizer.REAL:","return(long)(readFloat()*10000L);","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(long)(readDouble()*10000L);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["idx2=datetime.indexOf(\':\',idx1);","minute=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\'.\',idx1);","if(idx2\<0)idx2=datetime.length();","second=Integer.parseInt(datetime.substring(idx1,idx2).trim());"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","case\'/\':","if((i+1\<sql.length)&&(sql[i+1]==\'*\')){","i++;","tokenStart=i+1;","comment=MULTI_COMMENT;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["SSSavepoint(intid,Stringname,longtransactionTime){","this.id=id;","this.name=name;","this.transactionTime=transactionTime;","publicintgetSavepointId(){","returnid;"]": ["|project://smallsql/src/smallsql/database/SSSavepoint.java|"],
"["}else{","locksInsert.set(i,lock.nextLock);","}else{","prev.nextLock=lock.nextLock;","return;","prev=lock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case103://britshdd/mm/yyyy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["Object[][]data=con.getDatabase(false).getPrimaryKeys(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetImportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,null,null,null,table);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_FROM);","from(cmd);","SQLTokentoken=nextToken();","if(token!=null){","if(token.value!=SQLTokenizer.WHERE)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:thrownewError();","store.offset=PAGE_CONTROL_SIZE;","returnstore;","}catch(Throwableth){","throwSmallSQLException.createFromException(th);","staticStoreImplrecreateStore(Tabletable,StorePagestorePage,inttype)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=0;i\<length;i++){","puffer[i]=Character.toLowerCase(Character.toUpperCase(value.charAt(i)));","returnpuffer;","finalstaticprivatechar[]bytesToBinarySortOrder(byte[]value){","intlength=value.length;","char[]puffer=newchar[length];"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(oldIsCurrentRow||isCurrentRow)row--;","returnisCurrentRow;","finalbooleannext()throwsException{","booleanoldIsCurrentRow=isCurrentRow;","do{","isCurrentRow=rowSource.next();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["if(value!=0||firstNode){","intpointer=getPointer();","if(pointer\>oldOffset){","offset-=pointerSize;","writePointer(pointer+diff);","if(diff\>0)pointer+=diff;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["default:thrownewError();","floatgetFloat()throwsException{","returngetLong();","doublegetDouble()throwsException{","returngetLong();","longgetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["previousToken();","returnfromSource;","if(!fromSource.hasAlias()){","fromSource.setAlias(token.getName(sql));","break;","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.GROUP,SQLTokenizer.ORDER,SQLTokenizer.HAVING});"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.ELSE:","expr.setElseResult(expression(cmd,0));","break;","caseSQLTokenizer.END:","expr.setEnd();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(cal==null){","returngetTime(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewTime(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privateIdentitycounter;//counterforidentityvalues","voidsetName(Stringname){","this.name=name;","voidsetDefaultValue(ExpressiondefaultValue,StringdefaultDefinition){","this.defaultValue=defaultValue;","this.defaultDefinition=defaultDefinition;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseSQLTokenizer.MINUS:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NEGATIVE/10),ExpressionArithmetic.NEGATIVE);","break;","caseSQLTokenizer.TILDE:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.BIT_NOT/10),ExpressionArithmetic.BIT_NOT);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longwaitTime=endTime-System.currentTimeMillis();","if(waitTime\<=0)","throwSmallSQLException.create(Language.TABLE_DEADLOCK,name);","locks.wait(waitTime);","finalprivateTableStorePagerequestLockImpl(SSConnectioncon,intpageOperation,longpage)throwsSQLException{","synchronized(locks){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Expression(inttype){","this.type=type;","protectedObjectclone()throwsCloneNotSupportedException{","returnsuper.clone();","finalStringgetName(){","returnname;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["offset+=count;","intreadByte(){","returnpuffer[offset++];","intreadShort(){","return((puffer[offset++]&0xFF)\<\<8)|(puffer[offset++]&0xFF);","intreadInt(){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{","if(isNull())returnnull;","returnUtils.getInteger(getInt());","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["returnlist;","privatestaticfinalvoidgetExpressionNameFromTree(Expressionslist,Expressiontree){","if(tree.getType()==Expression.NAME){","list.add(tree);","Expression[]params=tree.getParams();","if(params!=null){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["Stringname1=((Expression)expr).name;","Stringname2=name;","if(name1==name2)returntrue;","if(name1==null)returnfalse;","if(name1.equalsIgnoreCase(name2))returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["importjava.util.ArrayList;","importjava.util.Calendar;","importjava.net.URL;","classSSPreparedStatementextendsSSStatementimplementsPreparedStatement{","privateArrayListbatches;","privatefinalinttop;//valueofanoptionaltopexpression"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["if(token!=null){","if(token.value!=SQLTokenizer.WHERE)","throwthis.createSyntaxError(token,MISSING_WHERE);","where(cmd);","returncmd;","privateCommandtruncate()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["value=expr.getObject();","privatestaticfinalObjectEMPTY=newObject();","finalbooleanisEmpty(){","returnvalue==EMPTY;","finalvoidclear(){","value=EMPTY;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["rightExpr=expression(cmd,ExpressionArithmetic.AND);","nextToken(MISSING_AND);","ExpressionrightExpr2=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,rightExpr2,operation);","break;","caseSQLTokenizer.IN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["doublegetDouble(intoffset,intdataType)throwsException{","thrownoCurrentRow();","floatgetFloat(intoffset,intdataType)throwsException{","thrownoCurrentRow();","intgetInt(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["return0;","publicintgetMaxUserNameLength(){","return0;","publicintgetDefaultTransactionIsolation(){","returnConnection.TRANSACTION_READ_COMMITTED;","publicbooleansupportsTransactions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","if(!newFile.renameTo(oldFile)){","tmpFile.renameTo(oldFile);//restoretheoldtable","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","tmpFile.delete();","staticvoiddropView(SSConnectioncon,Stringcatalog,StringtableName)throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["setFloat(findParameter(parameterName),x);","publicvoidsetDouble(StringparameterName,doublex)throwsSQLException{","setDouble(findParameter(parameterName),x);","publicvoidsetBigDecimal(StringparameterName,BigDecimalx)throwsSQLException{","setBigDecimal(findParameter(parameterName),x);","publicvoidsetString(StringparameterName,Stringx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","publicclassIdentityextendsNumberimplementsMutable{","finalprivatelongfilePos;","finalprivateFileChannelraFile;","finalprivatebyte[]page=newbyte[8];"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["privatefinalExpressionsexpressions;//isusedforthedescriptionofASCandDESC","privatefinaljava.util.StacknodeStack=newjava.util.Stack();//TODOperformanceStackdurchnichtsynchronisierteKlasseersetzten","finalvoidreset(){","nodeStack.clear();","booleanasc=(expressions.get(0).getAlias()!=SQLTokenizer.DESC_STR);","nodeStack.push(newIndexNodeScrollStatus(rootPage,asc,true,0));"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","if(index.isPrimary()){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["currentDS=dataSources.get(dataSourceIdx);","currentDS.afterLast();","row=0;","finalintgetRow()throwsException{","returnrow;","privatefinalintgetBitCount(){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["privatelongtimestamp=System.currentTimeMillis();","staticfinalintLOCK_NONE=0;//readonREAD_COMMITEDandREAD_UNCOMMITED","staticfinalintLOCK_INSERT=1;//preventonlyLOCK_TAB","staticfinalintLOCK_READ=2;//occuronreadandpreventawriteofdata,itcanoccurmoreasoneLOCK_READperpage","staticfinalintLOCK_WRITE=3;//occuronwriteandpreventeveryotheraccesstothedata,itisonlyoneLOCK_WRITEperpagepossible","staticfinalintLOCK_TAB=4;//lockthetotaltable"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["switch(token.value){","caseSQLTokenizer.COMMA:","continue;","default:","if(isKeyword(token)){","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwcreateSyntaxError(token,Language.STXADD_FROM_PAR_CLOSE);","default:","if(isKeyword(token)){","previousToken();","returnfromSource;","if(!fromSource.hasAlias()){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicReadergetCharacterStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Readerobject\");","publicvoidupdateObject(intcolumnIndex,Objectx,intscale)throwsSQLException{","updateValue(columnIndex,x,-1);","publicvoidupdateObject(intcolumnIndex,Objectx)throwsSQLException{","updateValue(columnIndex,x,-1);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["intpos=findNodeInsertPos(node.digit,0,length);","System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos,temp,pos+1,length-pos);","temp[pos]=node;","nodes=temp;","privatefinalintfindNodeInsertPos(chardigit,intstart,intend){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["messages=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","sqlStates=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","addMessages(MESSAGES);","setSqlStates();","protectedfinalvoidaddMessages(String[][]entries)","throwsIllegalArgumentException{"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["byte[]b=newbyte[length];","System.arraycopy(bytes,bytes.length-length,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["value=str;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\>0)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["case10://USAmm-dd-yy","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnull;","returnnode.addRoot(digit);","node=node.addNode(digit);","if(node.isEmpty()){","if(isLast){","node.addRemainderKey(rowOffset,key,i);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["else","if(newValueinstanceofInteger)","this.dataType=SQLTokenizer.INT;","else","if(newValueinstanceofLong||newValueinstanceofIdentity)","this.dataType=SQLTokenizer.BIGINT;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["doublegetDouble()throwsException{","returnMath.abs(param1.getDouble());","longgetMoney()throwsException{","returnMath.abs(param1.getMoney());","MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["StringdfltLocaleStr=Locale.getDefault().toString();","try{","returngetFromLocaleTree(dfltLocaleStr);","catch(IllegalArgumentExceptione){","returnnewLanguage();//defaulttoEnglish","privatestaticLanguagegetFromLocaleTree(StringlocaleStr)"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicvoidsetFloat(StringparameterName,floatx)throwsSQLException{","setFloat(findParameter(parameterName),x);","publicvoidsetDouble(StringparameterName,doublex)throwsSQLException{","setDouble(findParameter(parameterName),x);","publicvoidsetBigDecimal(StringparameterName,BigDecimalx)throwsSQLException{","setBigDecimal(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["longcommit(){","raFile=null;","return-1;","@Override","voidrollback()throwsSQLException{","FileChannelcurrentRaFile=raFile;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["{MINUTES_TOOLARGE,\"DieMinutensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"DieSekundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"DieMillisekundensindzugroÃŸimTIMESTAMPWert\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isteinungÃ¼ltigesDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'vonDatentyp\'\'{1}\'\'fÃ¼rdieOperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rOperation\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["addKeyWord(\"DEFAULT\",DEFAULT);","addKeyWord(\"AUTO_INCREMENT\",IDENTITY);//aliasforIDENTITY;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"IDENTITY\",IDENTITY);","addKeyWord(\"INNER\",INNER);","addKeyWord(\"JOIN\",JOIN);","addKeyWord(\"ON\",ON);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.INT:","returnreadInt();","caseSQLTokenizer.BIGINT:","return(int)readLong();","caseSQLTokenizer.REAL:","return(int)readFloat();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"NCLOB\",NCLOB);","addKeyWord(\"UNIQUEIDENTIFIER\",UNIQUEIDENTIFIER);","addKeyWord(\"SQL_VARIANT\",JAVA_OBJECT);//aliasforMSSQLServerdatatypeSQL_VARIANT","addKeyWord(\"JAVA_OBJECT\",JAVA_OBJECT);","staticfinalintD=400;","staticfinalintT=401;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassExpressionFunctionextendsExpression{","Expressionparam1;","Expressionparam2;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["addKeyWord(\"READ\",READ);","addKeyWord(\"COMMITTED\",COMMITTED);","addKeyWord(\"UNCOMMITTED\",UNCOMMITTED);","addKeyWord(\"REPEATABLE\",REPEATABLE);","addKeyWord(\"SERIALIZABLE\",SERIALIZABLE);","addKeyWord(\"CONSTRAINT\",CONSTRAINT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["year=1970;","month=0;","day=1;","idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);","if(idx2\>0){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnbuf.toString();","default:","returntoString();","privatefinalstaticvoidformatNumber(intvalue,intdigitCount,StringBufferbuf){","buf.setLength(buf.length()+digitCount);","if(value\<0)value=-value;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["ExpressionArithmetic(Expressionleft,Expressionright,intoperation){","super(FUNCTION);","this.left=left;","this.right=right;","this.operation=operation;","super.setParams(newExpression[]{left,right});"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","returnDateTime.parse(param1.getString());","returnparam1.getLong();","finalintgetDataType(){","returndatatype.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["buf.append(\'/\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case103://britshdd/mm/yyyy","formatNumber(details.day,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["column.setDataType(expr.getDataType());","if(expr.getPrecision()\>column.getPrecision()){","column.setPrecision(expr.getPrecision());","finalvoidaddRow(ExpressionValue[]row){","rowList.add(row);","finalColumngetColumn(intcolIdx){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["paramCount=3;","break;","default:","invalidParamCount=true;","expr=null;//onlyforCompiler","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.tables=from;","finalvoidsetWhere(Expressionwhere){","this.where=where;","finalvoidsetGroup(Expressionsgroup){","this.groupBy=group;","finalvoidsetHaving(Expressionhaving){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnrow==1&&isCurrentRow;","finalbooleanisLast()throwsException{","if(!isCurrentRow)returnfalse;","longrowPos=rowSource.getRowPosition();","booleanisNext=next();","rowSource.setRowPosition(rowPos);"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["Object[]catalog=newObject[1];","catalog[0]=dirs[i].getPath();","catalogs.add(catalog);","Object[][]result=newObject[catalogs.size()][];","catalogs.toArray(result);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);","if(maxRows!=0&&(cmd.getMaxRows()==-1||cmd.getMaxRows()\>maxRows))","cmd.setMaxRows(maxRows);","cmd.execute(con,this);","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["intstrLen=str.length();","intstart=Math.min(Math.max(0,param2.getInt()-1),strLen);","intlength=param3.getInt();","if(length\<0)","throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));","length=Math.min(length,strLen-start);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["privatefinalvoidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_INDEX);","buffer.putInt(INDEX_VERSION);","buffer.position(0);","raFile.write(buffer);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["{TABLE_OR_VIEW_MISSING,\"Latabella/view\'\'{0}\'\'nonesiste.\"},","{TABLE_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonincludeunatabellaSmallSQLvalida.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoditabella/view.\"},","{TABLE_EXISTENT,\"Latabella/vista\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'nonÃ¨unatabella.\"},","{PK_ONLYONE,\"UnatabellapuÃ²averesolounaprimarykey.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["longendTime=0;","while(true){","TableStorePagestorePage=requestLockImpl(con,pageOperation,page);","if(storePage!=null)","returnstorePage;//thenormalcaseshouldbethefasted","if(endTime==0)"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["privatevoidresizePage(intminNewSize){","intnewSize=Math.max(minNewSize,page.length*2);","byte[]newPage=newbyte[newSize];","System.arraycopy(page,0,newPage,0,page.length);","page=newPage;","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","signum=0;","for(inti=0;i\<complement.length;i++)","if(complement[i]!=0){","signum=1;","break;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicfloatgetFloat(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalpublicvoidsetQueryTimeout(intseconds)throwsSQLException{","checkStatement();","queryTimeout=seconds;","finalpublicvoidcancel()throwsSQLException{","checkStatement();","finalpublicSQLWarninggetWarnings(){"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;","returnexpression(null,0);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode){","Stringmessage=getErrorString(token,addMessageCode,null);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:","page=find(page,stringToBinarySortOrder(expr.getString(),false),nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"NON_UNIQUE\",\"INDEX_QUALIFIER\",\"INDEX_NAME\",\"TYPE\",\"ORDINAL_POSITION\",\"COLUMN_NAME\",\"ASC_OR_DESC\",\"CARDINALITY\",\"PAGES\",\"FILTER_CONDITION\"};","Object[][]data=con.getDatabase(false).getIndexInfo(con,table,unique);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(sIdx\>=value.length())returnfalse;","intlastmIdx=mIdx-1;","sIdx++;","while(pattern.length()\>mIdx&&value.length()\>sIdx){","m=Character.toUpperCase(pattern.charAt(mIdx++));","if(Character.toUpperCase(value.charAt(sIdx))!=m){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{RSET_FWDONLY,\"01000\"},","{RSET_CLOSED,\"01000\"},","{RSET_NOT_INSERT_ROW,\"01000\"},","{RSET_ON_INSERT_ROW,\"01000\"},","{ROWSOURCE_READONLY,\"01000\"},","{STMT_IS_CLOSED,\"HY010\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["byte[]b=newbyte[length];","System.arraycopy(bytes,0,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["numeric.setScale(column.getScale());","writeNumeric(numeric);","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","writeString(expr.getString(),column.getDisplaySize(),false);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["default:","returngetMoney()!=0;","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:{","if(operation==NEGATIVE)","returnleft.getNumeric().getSignum()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["for(inti=0;i\<columns.size();i++){","single.clear();","single.add(columns.get(i));","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","continue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["SQLParsersqlParser=newSQLParser();","for(intc=0;c\<count;c++){","Stringcolumn=store.readString();","columns.add(column);","expressions.add(sqlParser.parseExpression(column));","IndexDescriptionindexDesc=newIndexDescription(store.readString(),tableView.name,constraintType,expressions,columns);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["staticfinalintSQL_VARCHAR=1367;","static{","addKeyWord(\"SQL_BIGINT\",SQL_BIGINT);","addKeyWord(\"SQL_BINARY\",SQL_BINARY);","addKeyWord(\"SQL_BIT\",SQL_BIT);","addKeyWord(\"SQL_CHAR\",SQL_CHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["booleanisNull()throwsException{","returnfromEntry.isNull(colIdx);","booleangetBoolean()throwsException{","returnfromEntry.getBoolean(colIdx);","intgetInt()throwsException{","returnfromEntry.getInt(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["Expressionexpr=expression(cmd,0);","list.add(expr);","SQLTokentoken=nextToken();","if(listType==SQLTokenizer.ORDER&&token!=null){","switch(token.value){","caseSQLTokenizer.DESC:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["start++;","length-=start;","byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);","returnb;","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","@Override","longgetMoney(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfromEntry.isNull(colIdx);","booleangetBoolean()throwsException{","returnfromEntry.getBoolean(colIdx);","intgetInt()throwsException{","returnfromEntry.getInt(colIdx);","longgetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["publicStringgetString(intcolumnIndex)throwsSQLException{","try{","Objectobj=getObject(columnIndex);","if(objinstanceofString||obj==null){","return(String)obj;","if(objinstanceofbyte[]){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["Stringmessage=translateMsg(messageCode,params);","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreateFromException(Throwablee){","if(einstanceofSQLException){","return(SQLException)e;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["returnreadDouble()!=0;","caseSQLTokenizer.MONEY:","returnreadLong()!=0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()!=0;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintSPACE=1119;","staticfinalintSUBSTRING=1120;","staticfinalintTRIM=1121;","staticfinalintUCASE=1122;//laststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","static{","addKeyWord(\"ASCII\",ASCII);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(operation==NEGATIVE||operation==BIT_NOT){","if(leftIsNull)returnfalse;","dataType=left.getDataType();","}else{","finalbooleanrightIsNull=right.isNull();","if(operation==EQUALS_NULL&&leftIsNull&&rightIsNull)returntrue;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalclassExpressionFunctionDayOfMonthextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.DAYOFMONTH;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfMonth.java|"],
"["addKeyWord(\"BIT\",BIT);","addKeyWord(\"BOOLEAN\",BOOLEAN);","addKeyWord(\"BINARY\",BINARY);","addKeyWord(\"VARBINARY\",VARBINARY);","addKeyWord(\"RAW\",RAW);//aliasforOracleRAWandLONGRAW","addKeyWord(\"IMAGE\",LONGVARBINARY);//aliasforMSSQLServerdatatypeIMAGE"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatestaticfinalint[]COMMANDS_ALTER={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.PROCEDURE,};","privatestaticfinalint[]COMMANDS_CREATE={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE,SQLTokenizer.UNIQUE,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]COMMANDS_DROP={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE};","privatestaticfinalint[]COMMANDS_SET={SQLTokenizer.TRANSACTION};","privatestaticfinalint[]COMMANDS_CREATE_UNIQUE={SQLTokenizer.INDEX,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]MISSING_TABLE={SQLTokenizer.TABLE};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["fromSource.setAlias(token.getName(sql));","break;","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.GROUP,SQLTokenizer.ORDER,SQLTokenizer.HAVING});","privatevoidfrom(CommandSelectcmd)throwsSQLException{","DataSourcestables=newDataSources();","cmd.setTables(tables);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(val2.length\>value.length){","int[]temp=val2;","val2=value;","value=temp;","inttempi=signum;","signum=sig2;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["lock=lock.nextLock;","break;","caseLOCK_TAB:","assertstorePage.con==tabLockConnection:\"InternalErrorwithTabLock\";","if(--tabLockCount==0)tabLockConnection=null;","break;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["{UNSUPPORTED_DATATYPE_FUNC,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"NichtunterstÃ¼tzterTypfÃ¼rCONVERTFunktion:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rSUMFunktion.\"},","{UNSUPPORTED_TYPE_MAX,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rMAXFunktion.\"},","{UNSUPPORTED_CONVERSION,\"Kannnichtkonvertieren\'\'{0}\'\'[{1}]zu\'\'{2}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["publicstaticfinalStringUNSUPPORTED_DATATYPE_OPER=\"SS-0281\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_FUNC=\"SS-0282\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_FUNC=\"SS-0283\";","publicstaticfinalStringUNSUPPORTED_TYPE_CONV=\"SS-0284\";","publicstaticfinalStringUNSUPPORTED_TYPE_SUM=\"SS-0285\";","publicstaticfinalStringUNSUPPORTED_TYPE_MAX=\"SS-0286\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicbooleansupportsMixedCaseIdentifiers(){","returntrue;","publicbooleanstoresUpperCaseIdentifiers(){","returnfalse;","publicbooleanstoresLowerCaseIdentifiers(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["importjava.sql.*;","classSSSavepointimplementsSavepoint{","privatefinalintid;","privatefinalStringname;","longtransactionTime;","SSSavepoint(intid,Stringname,longtransactionTime){"]": ["|project://smallsql/src/smallsql/database/SSSavepoint.java|"],
"["for(;newScale\<scale;scale--){","factor*=10;","if(factor==1000000000){","divImpl(factor);","factor=1;","divImpl(factor);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["((CommandSelect)cmd).compile(con);","SSResultSetMetaDatametaData=newSSResultSetMetaData();","metaData.columns=cmd.columnExpressions;","returnmetaData;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["String[]colNames={\"TABLE_TYPE\"};","Object[][]data={{\"SYSTEMTABLE\"},{\"TABLE\"},{\"VIEW\"}};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetColumns(Stringcatalog,StringschemaPattern,StringtableNamePattern,StringcolumnNamePattern)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"NUM_PREC_RADIX\",\"NULLABLE\",\"REMARKS\",\"COLUMN_DEF\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"CHAR_OCTET_LENGTH\",\"ORDINAL_POSITION\",\"IS_NULLABLE\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","return(obj.equals(Boolean.TRUE))?1:0;","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["output.writeShort(nodes.length);","for(inti=0;i\<nodes.length;i++){","nodes[i].saveRef(output);","voidsaveRef(StoreImploutput)throwsSQLException{","IndexNodeloadRef(longoffset)throwsSQLException{","thrownewError();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();","case20:","case120://ODBCkannonish;yyyy-mm-ddhh:mi:ss(24h)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["IndexNoderoot=(IndexNode)value;","if(root==null){","value=root=createIndexNode(unique,(char)-1);","returnroot;","privatefinalvoidsaveNode(IndexNodenode){","intlength=nodes.length;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Commandcmd;","privatebooleanisClosed;","intrsType;","intrsConcurrency;","privateintfetchDirection;","privateintfetchSize;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(maxRows!=0&&(cmd.getMaxRows()==-1||cmd.getMaxRows()\>maxRows))","cmd.setMaxRows(maxRows);","cmd.execute(con,this);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","needGeneratedKeys=false;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["returnExpressionValue.getLong(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2long(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["isAfterLast=true;","noRow();","intgetRow(){","returnrow;","finallonggetRowPosition(){","if(rowPositions==null)rowPositions=newLongLongList();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["scroll=newJoinScrollIndex(type,left,right,leftEx,rightEx,operation);","returntrue;","returnfalse;","privateintcreateJoinScrollIndex(ExpressionArithmeticcond,ExpressionsleftEx,ExpressionsrightEx,intoperation)throwsException{","Expression[]params=cond.getParams();","intop=cond.getOperation();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(!node.isEmpty())","break;","IndexNodeparent=(IndexNode)nodeList.get(i);","parent.removeNode(node.getDigit());","node=parent;","finalprivateIndexNodefindNull(IndexNodepage){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["{UNSUPPORTED_TYPE_CONV,\"UnsupportedtypeforCONVERTfunction:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"Unsupporteddatatype\'\'{0}\'\'forSUMfunction.\"},","{UNSUPPORTED_TYPE_MAX,\"Unsupporteddatatype\'\'{0}\'\'forMAXfunction.\"},","{UNSUPPORTED_CONVERSION,\"Can\'\'tconvert\'\'{0}\'\'[{1}]to\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionINSERT.\"},","{SUBSTR_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionSUBSTRING.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["value[0]=(int)(~(complement\>\>32));","value[1]=(int)(-complement);","signum=-1;","}else{","value[0]=(int)(complement\>\>32);","value[1]=(int)complement;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["while((token=nextToken())!=null){","ExpressionrightExpr;","intoperation=ExpressionArithmetic.getOperationFromToken(token.value);","intlevel=operation/10;","if(previousOperationLevel\>=level){","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"SPACE\",SPACE);","addKeyWord(\"SUBSTRING\",SUBSTRING);","addKeyWord(\"TRIM\",TRIM);","addKeyWord(\"UCASE\",UCASE);","staticfinalintCURDATE=1200;//firsttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","staticfinalintCURRENTDATE=1201;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{SUBQUERY_COL_COUNT,\"Ilconteggiodellecolonnenellasubquerydeveessere1enon{0}.\"},","{JOIN_DELETE,\"DeleteRownonsupportatonellejoin.\"},","{JOIN_INSERT,\"InsertRownonsupportatonellejoin.\"},","{DELETE_WO_FROM,\"DeleteRownecessitaun\'\'espressioneFROM.\"},","{INSERT_WO_FROM,\"InsertRownecessitaun\'\'espressioneFROM.\"},","{TABLE_CANT_RENAME,\"Latabella\'\'{0}\'\'nonpuÃ²essererinominata.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["importjava.sql.CallableStatement;","importjava.sql.Connection;","importjava.sql.DatabaseMetaData;","importjava.sql.PreparedStatement;","importjava.sql.SQLException;","importjava.sql.SQLWarning;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returngetInt();","doublegetDouble()throwsException{","returngetInt();","longgetMoney()throwsException{","returngetInt()*10000L;","MutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["this.name=name;","this.transactionTime=transactionTime;","publicintgetSavepointId(){","returnid;","publicStringgetSavepointName(){","returnname;"]": ["|project://smallsql/src/smallsql/database/SSSavepoint.java|"],
"["dataType=expr.getDataType();","else","initValue(expr);","}elseif(!expr.isNull()){","switch(dataType){","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["IndexDescription(Stringname,StringtableName,intconstraintType,Expressionsexpressions,Stringscolumns){","this.constraintType=constraintType;","this.expressions=expressions;","this.columns=columns;","this.name=createName(name,tableName);","privatestaticStringcreateName(StringdefaultName,StringtableName){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["importsmallsql.database.language.Language;","publicclassCommandInsertextendsCommand{","booleannoColumns;//afterthetablenamewasnocolumnExpressions;allcolumnExpressionsindefaultorder","privateCommandSelectcmdSel;","privateTabletable;","privatelongtableTimestamp;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returntrue;","publicbooleansupportsDifferentTableCorrelationNames(){","returntrue;","publicbooleansupportsExpressionsInOrderBy(){","returntrue;","publicbooleansupportsOrderByUnrelated(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(value\>Long.MAX_VALUE)","returnLong.MAX_VALUE;","if(value\<Long.MIN_VALUE)","returnLong.MIN_VALUE;","return(long)value;","staticfloatbytes2float(byte[]bytes){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["parent.removeNode(node.getDigit());","node=parent;","finalprivateIndexNodefindNull(IndexNodepage){","returnpage.getChildNode((char)0);","finalprivateIndexNodeaddNull(IndexNodepage,longrowOffset,booleanisLastValue)throwsSQLException{","if(isLastValue){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["params[0]=left;","System.arraycopy(this.inList,0,params,1,this.inList.length);","}else{","params=newExpression[]{left};","super.setParams(params);","intgetOperation(){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["CommandSelectselCmd=singleSelect();","SQLTokentoken=nextToken();","UnionAllunion=null;","while(token!=null&&token.value==SQLTokenizer.UNION){","if(union==null){","union=newUnionAll();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["params=newExpression[]{left};","super.setParams(params);","intgetOperation(){","returnoperation;","privateExpressionconvertExpressionIfNeeded(Expressionexpr,Expressionother){","if(expr==null||other==null){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NUMERIC:","switch(operation){","caseADD:","caseSUB:","returnMath.max(left.getScale(),right.getScale());","caseMUL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["for(intp=0;p\<params.size();p++){","((ExpressionValue)params.get(p)).clear();","privateExpressionValuegetParam(intidx)throwsSQLException{","if(idx\<1||idx\>params.size())","throwSmallSQLException.create(Language.PARAM_IDX_OUT_RANGE,newObject[]{newInteger(idx),newInteger(params.size())});","return((ExpressionValue)params.get(idx-1));"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["returnreadBinary();","caseSQLTokenizer.TINYINT:","returnUtils.getInteger(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnUtils.getInteger(readShort());","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatebooleanisCurrentRow;","Where(RowSourcerowSource,Expressionwhere){","this.rowSource=rowSource;","this.where=where;","RowSourcegetFrom(){","returnrowSource;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["break;","caseMIN:","caseMAX:","break;","caseCOUNT:","value=newMutableInteger(0);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["value*=factor;","}else{","for(inti=0;i\>places;i--){","factor*=10;","value/=factor;","value=Math.rint(value);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|"],
"["caseSQLTokenizer.DAY:","returnSQLTokenizer.SQL_TSI_DAY;","caseSQLTokenizer.WEEK:","returnSQLTokenizer.SQL_TSI_WEEK;","caseSQLTokenizer.MONTH:","returnSQLTokenizer.SQL_TSI_MONTH;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["CreateFile(Filefile,FileChannelraFile,SSConnectioncon,Databasedatabase){","super(raFile);","this.file=file;","this.con=con;","this.database=database;","@Override"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["returnnewMutableNumeric(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnnewMutableNumeric(readShort());","caseSQLTokenizer.INT:","returnnewMutableNumeric(readInt());","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(cmdSel.next()){","if(needGeneratedKeys){","keyColumnNames=newStrings();","keys=newArrayList();","if(st.getGeneratedKeyNames()!=null)","generatedKeysType=1;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returnfindNodeInsertPos(digit,start,mid);","privatefinalintfindNodePos(chardigit){","returnfindNodePos(digit,0,nodes.length);","privatefinalintfindNodePos(chardigit,intstart,intend){","if(start==nodes.length)return-1;","intmid=start+(end-start)/2;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["staticfinalintINT=323;","staticfinalintCOUNTER=324;//aliasforINTIDENTITY,isusedfromMSACCESS","staticfinalintBIGINT=325;","staticfinalintSMALLMONEY=330;","staticfinalintMONEY=331;","staticfinalintDECIMAL=332;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnSQLTokenizer.DECIMAL;","returnSQLTokenizer.DOUBLE;","staticintgetDataType(inttypeLeft,inttypeRight){","if(typeLeft==typeRight)returntypeLeft;","intdataTypeIdx=Math.min(Utils.indexOf(typeLeft,DatatypeRange),Utils.indexOf(typeRight,DatatypeRange));","if(dataTypeIdx\<0)thrownewError(\"getDataType():\"+typeLeft+\",\"+typeRight);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","default:","Stringkeyword=SQLTokenizer.getKeyWord(dataType);","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX,keyword);","break;","caseMIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["super(unique,digit);","this.file=file;","fileOffset=-1;","@Override","protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewFileIndexNode(unique,digit,file);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["IndexNodepage=this.rootPage;","intcount=expressions.size();","for(inti=0;i\<count;i++){","Expressionexpr=expressions.get(i);","booleanisLastValues=(i==count-1);","if(expr.isNull()){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["language=Language.getLanguage(localeObj.toString());","publicvoidprintStackTrace(){","if(!isInit)return;","super.printStackTrace();","publicvoidprintStackTrace(PrintStreamps){","if(!isInit)return;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getInt();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.NOT:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","token=nextToken(MISSING_NULL);","col.setNullable(false);","nullableWasSet=true;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanisLast(){","returnrowPos==1;","finalbooleanisAfterLast(){","returnrowPos\>1;","finalvoidafterLast(){","rowPos=2;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["privatefinalvoidresize(intnewSize){","String[]dataNew=newString[newSize];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;","publicString[]toArray(){","String[]array=newString[size];"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["addKeyWord(\"FN\",FN);","addKeyWord(\"CALL\",CALL);","addKeyWord(\"OJ\",OJ);","staticfinalintOR=500;","staticfinalintAND=501;","staticfinalintIS=502;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["oldTable.close();","newTable.close();","FileoldFile=oldTable.getFile(this);","FilenewFile=newTable.getFile(this);","FiletmpFile=newFile(Utils.createTableViewFileName(this,\"#\"+System.currentTimeMillis()+this.hashCode()));","if(!oldFile.renameTo(tmpFile)){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["booleaninvalidParamCount;","switch(token.value){","caseSQLTokenizer.ABS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAbs();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleanrelative(introws)throwsException{","if(rows==0)return(row!=0);","if(rows\>0){","while(rows--\>0){","if(!next()){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["return0;","publicintgetMaxIndexLength(){","return0;","publicintgetMaxSchemaNameLength(){","return255;","publicintgetMaxProcedureNameLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintsize(){","returnsize;","finalStringget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["break;","caseSQLTokenizer.IDENTITY:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","col.setAutoIncrement(true);","defaultWasSet=true;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["resize(size+count);","System.arraycopy(cols.data,0,data,size,count);","size+=count;","finalvoidclear(){","size=0;","finalvoidremove(intidx){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["return(float)getDouble();","longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","doublevalue=getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["ArrayListtokens=newArrayList();","intvalue=0;","inttokenStart=0;","booleanwasWhiteSpace=true;","intcomment=NOT_COMMENT;","charquote=0;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetArray()notyetimplemented.\");","publicResultSetMetaDatagetMetaData()throwsSQLException{","checkStatement();","if(cmdinstanceofCommandSelect){","try{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["nextPagePos=nextPos;","finalbooleanisNull(intoffset){","returntrue;","finalbooleangetBoolean(intoffset,intdataType)throwsException{","returnfalse;","finalbyte[]getBytes(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["if(idx2\<0)idx2=datetime.length();","second=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","if(idx1\<length){","StringstrMillis=datetime.substring(idx1).trim();","switch(strMillis.length()){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnfromEntry.getMoney(colIdx);","MutableNumericgetNumeric()throwsException{","returnfromEntry.getNumeric(colIdx);","ObjectgetObject()throwsException{","returnfromEntry.getObject(colIdx);","StringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["privatestaticfinalint[]MISSING_TABLE={SQLTokenizer.TABLE};","privatestaticfinalint[]ESCAPE_MISSING_CLOSE={SQLTokenizer.ESCAPE_R};","privatestaticfinalint[]MISSING_EXPRESSION={SQLTokenizer.VALUE};","privatestaticfinalint[]MISSING_IDENTIFIER={SQLTokenizer.IDENTIFIER};","privatestaticfinalint[]MISSING_BY={SQLTokenizer.BY};","privatestaticfinalint[]MISSING_PARENTHESIS_L={SQLTokenizer.PARENTHESIS_L};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;","switch(datatype.getDataType()){","caseSQLTokenizer.BIT:","return((Boolean)obj).booleanValue()?\"1\":\"0\";"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","breakLoop;","caseSQLTokenizer.COMMA:","continue;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?newMutableNumeric(1):newMutableNumeric(0);","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"BIT_LENGTH\",BITLEN);","addKeyWord(\"CHAR_LENGTH\",CHARLEN);","addKeyWord(\"CHARACTER_LENGTH\",CHARACTLEN);","keywords.put(newInteger(_CHAR),\"CHAR\");//neededformetadatafunctions","addKeyWord(\"CONCAT\",CONCAT);","addKeyWord(\"DIFFERENCE\",DIFFERENCE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalvoidnullRow(){","row=0;","store=Store.NULL;","@Override","finalvoidnoRow(){","row=0;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["addKeyWord(\"ABS\",ABS);","addKeyWord(\"ACOS\",ACOS);","addKeyWord(\"ASIN\",ASIN);","addKeyWord(\"ATAN\",ATAN);","addKeyWord(\"ATN2\",ATAN2);//aliasforMSSQLServer","addKeyWord(\"ATAN2\",ATAN2);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return((Money)obj).value;","default:returnMoney.parseMoney(obj.toString());","MutableNumericgetNumeric(){","returngetNumeric(getObject(),dataType);","staticMutableNumericgetNumeric(Objectobj,intdataType){","if(obj==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatestaticfinalint[]MISSING_JOIN={SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OUTER_JOIN={SQLTokenizer.OUTER,SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OJ={SQLTokenizer.OJ};","privatestaticfinalint[]MISSING_ON={SQLTokenizer.ON};","privatestaticfinalint[]MISSING_KEYTYPE={SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.FOREIGN};","privatestaticfinalint[]MISSING_KEY={SQLTokenizer.KEY};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionIIF();","break;","caseSQLTokenizer.SWITCH:","invalidParamCount=(paramCount%2!=0);","ExpressionFunctionCaseexprCase=newExpressionFunctionCase();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intnewSize=offset+8;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>56);","page[offset++]=(byte)(value\>\>48);","page[offset++]=(byte)(value\>\>40);","page[offset++]=(byte)(value\>\>32);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["super(\"[SmallSQL]\"+message,vendorCode,0);","init();","privateSmallSQLException(Throwablethrowable,Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);","this.initCause(throwable);","init();"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,newObject[]{savepoint});","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSPreparedStatement(this,sql);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["switch(type){","caseSQLTokenizer.BIT:","returnTypes.BIT;","caseSQLTokenizer.BOOLEAN:","returnTypes.BOOLEAN;","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return0;","publicintgetMaxColumnNameLength(){","return255;","publicintgetMaxColumnsInGroupBy(){","return0;","publicintgetMaxColumnsInIndex(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","finalvoidexecute()throwsException{","rowSource.execute();","booleanisExpressionsFromThisRowSource(Expressionscolumns){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["isBeforeFirst=true;","fullRightRowCounter=0;","fullRowCount=0;","fullReturnCounter=-1;","booleannext()throwsException{","booleanresult;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["offset=oldOffset;","finalprivatevoidremoveNodeLastLevel()throwsSQLException{","intoldOffset=offset;","correctPointers(0,oldOffset,-2,0);","size-=2;","System.arraycopy(data,oldOffset+2,data,oldOffset,size-oldOffset);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["Objectview=tableViews.remove(viewName);","if(view!=null&&!(viewinstanceofView))","throwSmallSQLException.create(Language.VIEWDROP_NOT_VIEW,viewName);","View.drop(this,viewName);","privatevoidcheckForeignKeys(SSConnectioncon,ForeignKeysforeignKeys)throwsSQLException{","for(inti=0;i\<foreignKeys.size();i++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["importsmallsql.database.language.Language;","classGroupResultextendsMemoryResult{","privateExpressioncurrentGroup;//Validateifthecurrentrowofcmdispartofthecurrentgroup","privateRowSourcefrom;","privateExpressionsgroupBy;//thelistofExpressionsintheGROUPBYclause","privateExpressionsexpressions=newExpressions();//ListofExpression"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().getSignum()!=0;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["executeImpl(sql);","returncmd.getResultSet()!=null;","finalprivatevoidexecuteImpl(Stringsql)throwsSQLException{","checkStatement();","generatedKeys=null;","try{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["booleanprevious()throwsException{","returnfrom.previous();","booleannext()throwsException{","if(maxRows\>=0&&from.getRow()\>=maxRows){","from.afterLast();","returnfalse;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalIndexNodeaddRoot()throwsSQLException{","IndexNoderoot=(IndexNode)value;","if(root==null){","value=root=createIndexNode(unique,(char)-1);","returnroot;","privatefinalvoidsaveNode(IndexNodenode){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,chars.length*2L+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(chars.length);","store.writeChars(chars);","writeLong(store.writeFinsh(null));","StringreadLongString()throwsException{","longlobFilePos=readLong();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidclose()throwsException{","for(inti=0;i\<size;i++){","data[i].close();","voidadd(IndexDescriptionsindexes)throwsSQLException{","for(inti=0;i\<indexes.size;i++){","add(indexes.data[i]);"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["shift-=16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack]=result;","firstNode=true;","}else{","shift+=16;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(st.getGeneratedKeyIndexes()!=null)","generatedKeysType=2;","StoreImplstore=table.getStoreInsert(con);","for(intc=0;c\<matrix.length;c++){","Columncolumn=table.columns.get(c);","intidx=matrix[c];"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["default:return0;","intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(getDataType(),getPrecision(),getScale());","booleanisDefinitelyWritable(){","returnfalse;","booleanisAutoIncrement(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["addKeyWord(\"GROUP\",GROUP);","addKeyWord(\"BY\",BY);","addKeyWord(\"HAVING\",HAVING);","addKeyWord(\"ORDER\",ORDER);","addKeyWord(\"ASC\",ASC);","addKeyWord(DESC_STR,DESC);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["importsmallsql.database.language.Language;","classColumnimplementsCloneable{","privateExpressiondefaultValue=Expression.NULL;//DefaultvalueforINSERT","privateStringdefaultDefinition;//StringrepresentationforDefaultValue","privateStringname;","privatebooleanidentity;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["finalTableViewgetTableView(){","returntable;","@Override","finalvoiddeleteRow()throwsSQLException{","store.deleteRow(con);","store=newStoreNull(store.getNextPagePos());"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["voidaddParameter(ExpressionValueparam){","params.add(param);","voidverifyParams()throwsSQLException{","for(intp=0;p\<params.size();p++){","if(((ExpressionValue)params.get(p)).isEmpty())","throwSmallSQLException.create(Language.PARAM_EMPTY,newInteger(p+1));"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti,intscale)throwsSQLException{","try{","MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.FULL:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.FULL_JOIN);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<value.length;i++){","charc=value[i];","puffer[offset++]=(byte)(c\>\>8);","puffer[offset++]=(byte)(c);","voidwriteBytes(byte[]value,intoff,intlength){","verifyFreePufferSize(length);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["return\"\\\"\";","publicStringgetSQLKeywords(){","return\"database,use\";","privateStringgetFunctions(intfrom,intto){","StringBufferbuf=newStringBuffer();","for(inti=from;i\<=to;i++){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{COL_AMBIGUOUS,\"DieSpalte\'\'{0}\'\'istmehrdeutig.\"},","{GROUP_AGGR_INVALID,\"AggregatfunktionsindnichterlaubtimGROUPBYKlausel:({0}).\"},","{GROUP_AGGR_NOTPART,\"DerAusdruck\'\'{0}\'\'istnichtTeileinerAggregatfunktionoderGROUPBYKlausel.\"},","{ORDERBY_INTERNAL,\"InternerErrormitORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DieSELECTTeiledesUNIONhabeneineunterschiedlicheSpaltenanzahl:{0}und{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'existiertbereits.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["expr=newExpressionFunctionPower();","break;","caseSQLTokenizer.RADIANS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRadians();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intmagic=buffer.getInt();","intversion=buffer.getInt();","if(magic!=MAGIC_INDEX){","throwSmallSQLException.create(Language.INDEX_FILE_INVALID,file.getName());","if(version\>INDEX_VERSION){","Object[]params={newInteger(version),file.getName()};"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","returnnewString((byte[])obj);","returnobj.toString();","ObjectgetObject()throwsException{","if(param1.isNull())returnnull;","finalintdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(isNull&&!column.isNullable()){","throwSmallSQLException.create(Language.VALUE_NULL_INVALID,column.getName());","intdataType=column.getDataType();","if(isNull){","writeBoolean(true);//true-isnull","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(type){","caseSQLTokenizer.LONGVARBINARY:","store.page=newbyte[(int)filePos+PAGE_CONTROL_SIZE];","store.filePos=-1;","break;","caseSQLTokenizer.INSERT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.MINUTES_TOOLARGE,datetime);","if(second\>=60){","throwSmallSQLException.create(Language.SECS_TOOLARGE,datetime);","if(millis\>=1000){","throwSmallSQLException.create(Language.MILLIS_TOOLARGE,datetime);","returncalcMillis(year,month,day,hour,minute,second,millis);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return(obj==Boolean.TRUE)?1:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleDoubleFactor[scale]*signum;","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["FileChannelraFile=null;","try{","StringfileName=Utils.createTableViewFileName(database,name);","Filefile=newFile(fileName);","if(!file.exists())","throwSmallSQLException.create(Language.TABLE_OR_VIEW_MISSING,name);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["Stringname=getIdentifier(token);","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){","catalog=name;","name=nextIdentifier();","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnsupportsResultSetType(type);","publicbooleanothersDeletesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersInsertsAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanupdatesAreDetected(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?10000:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","return(long)(Utils.bytes2double(readBinary())*10000L);","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intlength=Math.min(8,bytes.length);","for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;","staticintbytes2int(byte[]bytes){","intresult=0;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","offset+=2;","break;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["longcarryover=0;","for(inti=value.length-1;i\>=0;i--){","longv=(value[i]&0xFFFFFFFFL)*factor+carryover;","value[i]=(int)v;","carryover=v\>\>32;","if(carryover\>0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseAND:","caseNOT:","caseLIKE:","caseISNULL:","caseISNOTNULL:","returnSQLTokenizer.BOOLEAN;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintYEAR=1219;//lasttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","static{","addKeyWord(\"CURDATE\",CURDATE);","addKeyWord(\"CURTIME\",CURTIME);","addKeyWord(\"CURRENT_DATE\",CURRENTDATE);","addKeyWord(\"DAYNAME\",DAYNAME);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["SQLTokenizer.getKeyWord(type),","getKeywordFromOperation(operation)","};","returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER,params);","voidoptimize()throwsSQLException{","super.optimize();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","caseSQLTokenizer.DIFFERENCE:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionDifference();","break;","caseSQLTokenizer.INSERT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getDateTimeLong(),dataType);","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();","if(num!=null&&(dataType==SQLTokenizer.NUMERIC||dataType==SQLTokenizer.DECIMAL))"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicTimestampgetTimestamp(StringparameterName)throwsSQLException{","returngetTimestamp(findParameter(parameterName));","publicObjectgetObject(StringparameterName)throwsSQLException{","returngetObject(findParameter(parameterName));","publicBigDecimalgetBigDecimal(StringparameterName)throwsSQLException{","returngetBigDecimal(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["int[]keyIndexes=st.getGeneratedKeyIndexes();","for(inti=0;i\<keyIndexes.length;i++){","if(c+1==keyIndexes[i]){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["importjava.io.Reader;","importjava.util.Map;","importjava.util.Calendar;","importjava.net.URL;","importsmallsql.database.language.Language;","publicclassSSResultSetimplementsResultSet{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["currentRow=null;","returnfalse;","booleanisNull(intcolIdx)throwsException{","returnget(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{","returnget(colIdx).getBoolean();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(identity)","counter.createNextValue(con);","returndefaultValue;","StringgetDefaultDefinition(){","returndefaultDefinition;","StringgetName(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["longgetLong()throwsException{","returnMath.abs(param1.getLong());","floatgetFloat()throwsException{","returnMath.abs(param1.getFloat());","doublegetDouble()throwsException{","returnMath.abs(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefiles[]=dir.listFiles();","if(files!=null)","for(inti=0;i\<files.length;i++){","files[i].delete();","dir.delete();"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["this.unique=unique;","this.digit=digit;","protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewIndexNode(unique,digit);","finalchargetDigit(){","returndigit;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnSQLTokenizer.SQL_TSI_WEEK;","caseSQLTokenizer.MONTH:","returnSQLTokenizer.SQL_TSI_MONTH;","caseSQLTokenizer.QUARTER:","returnSQLTokenizer.SQL_TSI_QUARTER;","caseSQLTokenizer.YEAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"NUM_PREC_RADIX\",\"NULLABLE\",\"REMARKS\",\"COLUMN_DEF\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"CHAR_OCTET_LENGTH\",\"ORDINAL_POSITION\",\"IS_NULLABLE\"};","Object[][]data=con.getDatabase(false).getColumns(con,tableNamePattern,columnNamePattern);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalColumnfindColumn(StringcolumnName){","for(inti=0;i\<columns.size();i++){","Columncolumn=columns.get(i);","if(column.getName().equalsIgnoreCase(columnName))returncolumn;","returnnull;","voidclose()throwsException{/*inthisabstractclassisnothingtofree*/}"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["leftExpr=newExpressionArithmetic(leftExpr,rightExpr,operation);","break;","caseSQLTokenizer.BETWEEN:","rightExpr=expression(cmd,ExpressionArithmetic.AND);","nextToken(MISSING_AND);","ExpressionrightExpr2=expression(cmd,level);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==29){","if(!isLeapYear(year)){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(hour\>=24){","throwSmallSQLException.create(Language.HOURS_TOOLARGE,datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["@Override","longcommit(){","raFile=null;","return-1;","@Override","voidrollback()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["returndataType;","publicStringtoString(){","Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();","if(dataType!=SQLTokenizer.TIME){","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintCONVERT=1303;","staticfinalintCAST=1304;","staticfinalintIIF=1305;//lastsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","static{","addKeyWord(\"ISNULL\",IFNULL);//aliasforIFNULL,usedfromMSSQLServerwith2parameter,fromMSAccesswith1parameter","addKeyWord(\"IFNULL\",IFNULL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["param1=param;","break;","case1:","param2=param;","break;","case2:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["staticfinalintNAME=2;","staticfinalintFUNCTION=3;","staticfinalintGROUP_BY=11;","staticfinalintCOUNT=12;","staticfinalintSUM=13;","staticfinalintFIRST=14;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["intlength=input.readInt();","remainderKey=(length\>0)?input.readChars(length):null;","intvalueType=input.readByte();","switch(valueType){","case0:","value=null;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["offset=startOffset;","firstNode=false;","}else{","return;","finalprivateintgetPointer(){","intvalue=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicCallableStatementprepareCall(Stringsql)throwsSQLException{","returnnewSSCallableStatement(this,sql);","publicStringnativeSQL(Stringsql){","returnsql;","publicvoidsetAutoCommit(booleanautoCommit)throwsSQLException{","if(log.isLogging())log.println(\"AutoCommit:\"+autoCommit);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnnode.addRoot(digit);","node=node.addNode(digit);","if(node.isEmpty()){","if(isLastValue){","node.addRemainderKey(rowOffset,key,i);","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["value=newValue;","createStorePage().commit();","@Override","publicfloatfloatValue(){","returnvalue;","@Override"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["{DB_NOT_DIRECTORY,\"DasVerzeichnis\'\'{0}\'\'istkeineSmallSQLDatenbank.\"},","{DB_NOTCONNECTED,\"SiesindnichtmiteinerDatenbankverbunden.\"},","{CONNECTION_CLOSED,\"DieVerbindungistbereitsgeschlossen.\"},","{VIEW_INSERT,\"INSERTwirdnichtunterstÃ¼tztfÃ¼reineView.\"},","{VIEWDROP_NOT_VIEW,\"DROPVIEWkannnichtmit\'\'{0}\'\'verwendetwerden,weileskeineViewist.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["isOuterValid=false;","if(type==Join.FULL_JOIN){","if(fullRightRowCounter\>=isFullNotValid.length){","boolean[]temp=newboolean[fullRightRowCounter\<\<1];","System.arraycopy(isFullNotValid,0,temp,0,fullRightRowCounter);","isFullNotValid=temp;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["publicbooleangetBoolean(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getBoolean();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnSQLTokenizer.INT;","default:thrownewError();","voidsetFrom(DataSourcefromEntry,intcolIdx,TableViewtable){","this.fromEntry=fromEntry;","this.colIdx=colIdx;","this.table=table;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["col.setAutoIncrement(true);","defaultWasSet=true;","break;","caseSQLTokenizer.NULL:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","nullableWasSet=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(filePos\>=0){","if(moveToRow())","returntrue;","setNextFilePos();","row=0;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["finalclassExpressionFunctionYearextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.YEAR;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionYear.java|"],
"["expr=newExpressionName(Expression.COUNT);","break;","caseSQLTokenizer.SUM:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.SUM);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intlength=datatype.getDisplaySize();","if(length\>str.length())","returnstr;","returnstr.substring(0,length);","caseSQLTokenizer.CHAR:{","Stringstr=convertToString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnreadDate();","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"REAL\"});","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(nextEntry==octet){","if(shift==0)return;//valueexistalready,thiscaseshouldnotoccur","offset=getPointer();","firstNode=true;","break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["writeBytes(Utils.unique2bytes(expr.getString()));","break;","default:thrownewError(String.valueOf(column.getDataType()));","@Override","booleanisNull(intvalueOffset){","returnpage[valueOffset]!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["classIndexNode{","finalprivatebooleanunique;","finalprivatechardigit;//unsignedshort","staticfinalprivateIndexNode[]EMPTY_NODES=newIndexNode[0];","privateIndexNode[]nodes=EMPTY_NODES;","privatechar[]remainderKey;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnfalse;","}else{","returnabsolute(newRow);","intgetRow()throwsException{","if(rowIdx\>=rowList.size())return0;","returnrowIdx+1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["tableAlias=getName();","setName(name);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionName))returnfalse;","if(((ExpressionName)expr).fromEntry!=fromEntry)returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["Expression[]params;","if(inList!=null){","this.inList=inList.toArray();","params=newExpression[this.inList.length+1];","params[0]=left;","System.arraycopy(this.inList,0,params,1,this.inList.length);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}else{","for(inti=0;i\<count;i++)matrix[i]=-1;","for(intc=0;c\<columnExpressions.size();c++){","ExpressionsqlCol=columnExpressions.get(c);","StringsqlColName=sqlCol.getName();","intidx=table.findColumnIdx(sqlColName);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["finalbooleanabsolute(introw){","rowPos=(row\>0)?","Math.min(row,1):","Math.min(row+1,-1);","returnrowPos==1;","finalbooleanrelative(introws){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["}else","previousToken();","nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,style);","caseSQLTokenizer.CAST:","expr=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr=newExpressionFunctionSpace();","break;","caseSQLTokenizer.SOUNDEX:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSoundex();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["node=node.addNode(digit);","if(node.isEmpty()){","if(isLastValue){","node.addRemainderKey(rowOffset,key,i);","returnnull;","returnnode.addRootValue(key,i);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["intv1=value.length;","for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)+(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>32);","value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["idx1=idx2+1;","idx2=datetime.indexOf(\'\',idx1);","if(idx2\<0)idx2=datetime.length();","day=Integer.parseInt(datetime.substring(idx1,idx2).trim());","}else{","year=1970;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","importjava.util.Collection;","importjava.util.HashMap;","importjava.util.Locale;","finalclassTableViewMap{","privatefinalHashMapmap=newHashMap();"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["try{","con.log.println(sql);","SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);","if(maxRows!=0&&(cmd.getMaxRows()==-1||cmd.getMaxRows()\>maxRows))","cmd.setMaxRows(maxRows);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["break;","case\'L\':","c=\'4\';","break;","case\'M\':","case\'N\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["finalvoidset(ExpressionValueval){","this.value=val.value;","this.dataType=val.dataType;","this.length=val.length;","booleanisNull(){","returngetObject()==null;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finallonggetRowPosition(){","returnrowPos;","finalvoidsetRowPosition(longrowPosition){","rowPos=(int)rowPosition;","finalbooleanrowInserted(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["if(name1==name2)returntrue;","if(name1==null)returnfalse;","if(name1.equalsIgnoreCase(name2))returntrue;","returnfalse;","abstractbooleanisNull()throwsException;","abstractbooleangetBoolean()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["this.column=table.columns.get(colIdx);","voidsetFrom(DataSourcefromEntry,intcolIdx,Columncolumn){","this.fromEntry=fromEntry;","this.colIdx=colIdx;","this.column=column;","DataSourcegetDataSource(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["caseSQLTokenizer.BINARY:","return((byte[])value).length;","default:","returnsuper.getPrecision();","intgetScale(){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Stringmessage=stripMsg(e);","StringsqlState=language.getSqlState(Language.CUSTOM_MESSAGE);","returnnewSmallSQLException(e,message,sqlState);","staticSQLExceptioncreateFromException(StringmessageCode,Objectparam0,","Throwablee)","Stringmessage=translateMsg(messageCode,newObject[]{param0});"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["voidwriteColumn(Columncolumn)throwsException{","intnewSize=offset+25;","if(newSize\>page.length)resizePage(newSize);","writeByte(column.getFlag());","writeString(column.getName());","writeShort(column.getDataType());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnresult;","staticbyte[]double2bytes(doublevalue){","returnlong2bytes(Double.doubleToLongBits(value));","staticbyte[]float2bytes(floatvalue){","returnint2bytes(Float.floatToIntBits(value));","staticbyte[]long2bytes(longvalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["level++;","nodeStack.push(","newIndexNodeScrollStatus((IndexNode)status.nodeValue,","(expressions.get(level).getAlias()!=SQLTokenizer.DESC_STR),","scroll,level));","continue;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|","|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["privateExpressionsexpressions=newExpressions();//ListofExpression","privateExpressionsinternalExpressions=newExpressions();//alistofAggregateFunctionandColNamesfromSELECT,GROUPBYandHAVING","GroupResult(CommandSelectcmd,RowSourcefrom,ExpressionsgroupBy,Expressionhaving,ExpressionsorderBy)throwsSQLException{","this.from=from;","this.groupBy=groupBy;","if(groupBy!=null){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnnewMutableNumeric(getBoolean()?1:0);","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseISNOTNULL:","returnSQLTokenizer.BOOLEAN;","default:","returngetDataType(left,right);","intgetScale(){","intdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["data[size++]=value;","finalvoidclear(){","size=0;","privatefinalvoidresize(intnewSize){","long[]dataNew=newlong[newSize];","System.arraycopy(data,0,dataNew,0,size);"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["if(!(exprinstanceofExpressionFunction))returnfalse;","return((ExpressionFunction)expr).getFunction()==getFunction();","SQLExceptioncreateUnspportedDataType(intdataType){","Object[]params={","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["this.raFile=raFile;","this.filePos=filePos;","privateStorePagecreateStorePage(){","page[0]=(byte)(value\>\>56);","page[1]=(byte)(value\>\>48);","page[2]=(byte)(value\>\>40);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["publicTimegetTime(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["intreadInt(){","return((page[offset++])\<\<24)|","((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));","voidwriteLong(longvalue){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"SQL_FLOAT\",SQL_FLOAT);","addKeyWord(\"SQL_INTEGER\",SQL_INTEGER);","addKeyWord(\"SQL_LONGVARBINARY\",SQL_LONGVARBINARY);","addKeyWord(\"SQL_LONGVARCHAR\",SQL_LONGVARCHAR);","addKeyWord(\"SQL_REAL\",SQL_REAL);","addKeyWord(\"SQL_SMALLINT\",SQL_SMALLINT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{SUBSTR_INVALID_LEN,\"01000\"},","{VALUE_STR_TOOLARGE,\"01000\"},","{VALUE_BIN_TOOLARGE,\"01000\"},","{VALUE_NULL_INVALID,\"01000\"},","{VALUE_CANT_CONVERT,\"01000\"},","{BYTEARR_INVALID_SIZE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalprivatebooleanisKeyword(SQLTokentoken){","if(token==null)returnfalse;","switch(token.value){","caseSQLTokenizer.SELECT:","caseSQLTokenizer.INSERT:","caseSQLTokenizer.UPDATE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam1.getString();","}else","returnparam1.getString();","finalprivatelonggetDateTimeLong()throwsException{","switch(param1.getDataType()){","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["finallonggetLong(intcolIdx)throwsException{","returnstore.getLong(offsets[colIdx],dataTypes[colIdx]);","@Override","finalfloatgetFloat(intcolIdx)throwsException{","returnstore.getFloat(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["for(inti=0;i\<=last;i++){","complement[i]=(byte)((i==last)?-complement[i]:~complement[i]);","while(complement[last]==0){","last--;","complement[last]++;","byte[]toByteArray(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["range=false;","}else{","if(Character.toUpperCase(value.charAt(sIdx))!=m)returnfalse;","sIdx++;","break;","while(pattern.length()\>mIdx){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewIndexNode(unique,digit);","finalchargetDigit(){","returndigit;","finalbooleangetUnique(){","returnunique;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["PrintWriterpw=DriverManager.getLogWriter();","if(pw!=null)this.printStackTrace(pw);","staticvoidsetLanguage(ObjectlocaleObj)throwsSQLException{","if(language!=null&&localeObj==null)return;","if(localeObj==null){","language=Language.getDefaultLanguage();"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["{SYNTAX_BASE_END,\"SyntaxError,unerwartetesEndedesSQLStrings.\"},","{STXADD_ADDITIONAL_TOK,\"ZusÃ¤tzlicheZeichennachdemEndedesSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Bezeichnererwartet.\"},","{STXADD_IDENT_EMPTY,\"LeererBezeichner.\"},","{STXADD_IDENT_WRONG,\"UngÃ¼ltigerBezeichner\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"UngÃ¼ltigerOperatorMinusfÃ¼rDatentypVARBINARY.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["return-11;","caseSQLTokenizer.NULL:","returnTypes.NULL;","default:thrownewError(\"DataType:\"+type);","staticSearchNodesearchTree;","staticHashtablekeywords=newHashtable(337);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["FiletmpFile=newFile(Utils.createTableViewFileName(this,\"#\"+System.currentTimeMillis()+this.hashCode()));","if(!oldFile.renameTo(tmpFile)){","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","if(!newFile.renameTo(oldFile)){","tmpFile.renameTo(oldFile);//restoretheoldtable","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["voidbeforeFirst()throwsException{","from.beforeFirst();","booleanisBeforeFirst()throwsSQLException{","returnfrom.isBeforeFirst();","booleanisFirst()throwsSQLException{","returnfrom.isFirst();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["writeBoolean(expr.getBoolean());","break;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","writeBinary(expr.getBytes(),column.getPrecision(),dataType!=SQLTokenizer.BINARY);","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rowPos=2;","finalbooleanabsolute(introw){","rowPos=(row\>0)?","Math.min(row,1):","Math.min(row+1,-1);","returnrowPos==1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["staticfinalintTABLE_VIEW_OLD_VERSION=1;","finalStringname;","finalColumnscolumns;","privatelongtimestamp=System.currentTimeMillis();","staticfinalintLOCK_NONE=0;//readonREAD_COMMITEDandREAD_UNCOMMITED","staticfinalintLOCK_INSERT=1;//preventonlyLOCK_TAB"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["packagesmallsql.database;","importjava.io.File;","classLobsextendsTable{","Lobs(Tabletable)throwsException{","super(table.database,table.name);","raFile=Utils.openRaFile(getFile(database),database.isReadOnly());"]": ["|project://smallsql/src/smallsql/database/Lobs.java|"],
"["dataSourceIdx=0;","currentDS=dataSources.get(0);","currentDS.beforeFirst();","row=0;","finalbooleanfirst()throwsException{","dataSourceIdx=0;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","finalvoidinsertRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","if(tables.size()\>1)"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["intgetScale(){","returncolumn.getScale();","intgetDisplaySize(){","returncolumn.getDisplaySize();","booleanisAutoIncrement(){","returncolumn.isAutoIncrement();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["importjava.math.*;","classMutableNumericextendsNumberimplementsMutable{","privatestaticfinallongserialVersionUID=-750525164208565056L;","privateint[]value;","privateintscale;","privateintsignum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC,params);","SQLExceptioncreateUnspportedConversion(intdataType){","Object[]params={","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["raFile.position(filePos);","raFile.read(buffer);","value=((long)(page[0])\<\<56)|","((long)(page[1]&0xFF)\<\<48)|","((long)(page[2]&0xFF)\<\<40)|","((long)(page[3]&0xFF)\<\<32)|"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["{ISOLATION_UNKNOWN,\"UnknownTransactionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"InvalidflagvalueinmethodgetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"InvalidargumentinmethodsetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnotrequested.\"},","{SEQUENCE_HEX_INVALID,\"Invalidhexsequenceat{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Invalidhexsequenceatposition{0}in\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["this.signum=numeric.signum;","this.value=newint[numeric.value.length];","System.arraycopy(numeric.value,0,value,0,value.length);","this.scale=numeric.scale;","int[]getInternalValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(inti)throwsSQLException{","try{","byte[]obj=getValue(i).getBytes();","wasNull=obj==null;","returnobj;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["inti=(int)(key%table.length);","table[i]=newEntry(key,value,table[i]);","if(size++\>=threshold)","resize(2*table.length);","returnnull;","finalprivatevoidresize(intnewCapacity){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["expr=expression(cmd,0);","nextToken(MISSING_COMMA);","col=datatype(isEscape);","}else{","col=datatype(isEscape);","nextToken(MISSING_COMMA);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti)throwsSQLException{","try{","MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(lock==prev){","if(lock.nextLock==null){","locks.remove(pageKey);","}else{","locks.put(pageKey,lock.nextLock);","}else{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseExpression.SUM:","ExpressionbaseExpression=exprName.getParams()[0];","column.setPrecision(baseExpression.getPrecision());","column.setScale(baseExpression.getScale());","break;","default:"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["chars[29]=digits[(daten[offset+12])&0x0F];","chars[30]=digits[(daten[offset+13]\>\>4)&0x0F];","chars[31]=digits[(daten[offset+13])&0x0F];","chars[32]=digits[(daten[offset+14]\>\>4)&0x0F];","chars[33]=digits[(daten[offset+14])&0x0F];","chars[34]=digits[(daten[offset+15]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returntruncate();","default:","thrownewError();","ExpressionparseExpression(Stringexpr)throwsSQLException{","this.sql=expr.toCharArray();","this.tokens=SQLTokenizer.parseSQL(sql);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["cmdSel.beforeFirst();","StringskeyColumnNames=null;","ArrayListkeys=null;","booleanneedGeneratedKeys=st.needGeneratedKeys();","intgeneratedKeysType=0;","while(cmdSel.next()){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["booleanrelative(introws)throwsException{","intnewRow=rows+rowIdx+1;","if(newRow\<=0){","beforeFirst();","returnfalse;","}else{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["thrownewError();","ExpressionparseExpression(Stringexpr)throwsSQLException{","this.sql=expr.toCharArray();","this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;","returnexpression(null,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","byte[]bytes=expr.getBytes();","if(bytes.length!=16)throwSmallSQLException.create(Language.BYTEARR_INVALID_SIZE,String.valueOf(bytes.length));","writeBytes(bytes);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row[3]=columnsPk.get(c);//PKCOLUMN_NAME","row[4]=getName();//FKTABLE_CAT","row[6]=foreignKey.fkTable;//FKTABLE_NAME","row[7]=columnsFk.get(c);//FKCOLUMN_NAME","row[8]=Utils.getShort(c+1);//KEY_SEQ","row[9]=Utils.getShort(foreignKey.updateRule);//UPDATE_RULE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();","case14:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.min(((MutableLong)value).value,expr.getLong());","break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.min(((MutableFloat)value).value,expr.getFloat());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{SEQUENCE_HEX_INVALID,\"Sequenzaesadecimalenonvalidoallaposizione{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Sequenceesadecimalenonvalidaallapositione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Erroredisintassiallaposizione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Erroredisintassi,fineinattesadellastringaSQL.\"},","{STXADD_ADDITIONAL_TOK,\"Tokenaggiuntivodopolafinedell\'\'istruzioneSQL.\"},","{STXADD_IDENT_EXPECT,\"Identificatoreatteso.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["privatestaticfinalbyte[]page_control=newbyte[PAGE_CONTROL_SIZE];","privatestaticfinalByteBufferpageControlBuffer=ByteBuffer.wrap(page_control);","privateintstatus;//validvaluearefollow:","privatestaticfinalintNORMAL=0;","privatestaticfinalintDELETED=1;","privatestaticfinalintUPDATE_POINTER=2;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);","longreadLong(){","return(((long)(puffer[offset++]&0xFF))\<\<56)","|(((long)(puffer[offset++]&0xFF))\<\<48)","|(((long)(puffer[offset++]&0xFF))\<\<40)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["millis+=86400000;","time-=millis;","break;","this.time=time;","this.dataType=dataType;","staticlongcalcMillis(Detailsdetails){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{VALUE_STR_TOOLARGE,\"DerStringWertistzugroÃŸfÃ¼rdieSpalte.\"},","{VALUE_BIN_TOOLARGE,\"EinBinÃ¤reWertmitLÃ¤nge{0}istzugroÃŸfÃ¼reineSpaltemitderGrÃ¶ÃŸe{1}.\"},","{VALUE_NULL_INVALID,\"NullWertesindungÃ¼ltigfÃ¼rdieSpalte\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Kannnichtkonvertierenein{0}Wertzueinem{1}Wert.\"},","{BYTEARR_INVALID_SIZE,\"UngÃ¼ltigeBytearrayGroÃŸe{0}fÃ¼rUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjektwurdegelÃ¶scht.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnname;","booleanisAutoIncrement(){","returnidentity;","voidsetAutoIncrement(booleanidentity){","this.identity=identity;","intinitAutoIncrement(FileChannelraFile,longfilePos)throwsIOException{"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","returngetBytes();","default:throwcreateUnspportedDataType();","booleangetBoolean()throwsjava.lang.Exception{","switch(operation){","caseOR:returnleft.getBoolean()||right.getBoolean();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnsize;","finalStringget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(Stringdescr){"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["intsize=dataSources.size();","intbitCount=0;","while(size\>0){","bitCount++;","size\>\>=1;","returnbitCount;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"MONEY\"});","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["abstractdoublegetDouble(intcolIdx)throwsException;","abstractlonggetMoney(intcolIdx)throwsException;","abstractMutableNumericgetNumeric(intcolIdx)throwsException;","abstractObjectgetObject(intcolIdx)throwsException;","abstractStringgetString(intcolIdx)throwsException;","abstractbyte[]getBytes(intcolIdx)throwsException;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["returncalcMillis(details.year,details.month,details.day,details.hour,details.minute,details.second,details.millis);","staticlongcalcMillis(intyear,intmonth,finalintday,finalinthour,finalintminute,finalintsecond,finalintmillis){","longresult=millis;","result+=second*1000;","result+=minute*60000;","result+=hour*3600000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return\"java.lang.Double\";","caseTypes.DATE:","return\"java.sql.Date\";","caseTypes.TIME:","return\"java.sql.Time\";","caseTypes.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["privateSQLTokenlastToken(){","if(tokenIdx\>tokens.size()){","returnnull;","return(SQLToken)tokens.get(tokenIdx-1);","privatevoidpreviousToken(){","tokenIdx--;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","executeImpl(con,st);","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["privateIndexScrollStatusscrollStatus;","privateintrow;","privatefinalLongListinsertedRows=newLongList();","privatebooleanuseSetRowPosition;","privateintsortedRowCount;","privatelonglastRowOffset;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","returnTypes.DECIMAL;","caseSQLTokenizer.NUMERIC:","returnTypes.NUMERIC;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalObjectgetObject()throwsException{","returngetResult().getObject();","finalStringgetString()throwsException{","returngetResult().getString();","finalbyte[]getBytes()throwsException{","returngetResult().getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["returnvalue;","voidadd(MutableNumericnum){","if(num.scale\<scale){","num.setScale(scale);","}else","if(num.scale\>scale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["default:","throwcreateSyntaxError(token,COMMANDS_CREATE);","privateCommandCreateDatabasecreateDatabase()throwsSQLException{","SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","returnnewCommandCreateDatabase(con.log,token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(lastUndsc\>-1)part=part.substring(0,lastUndsc);","elsebreak;","thrownewIllegalArgumentException(\"Localenotfoundinthetree:\"+localeStr);","protectedLanguage(){","messages=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","sqlStates=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","voidnullRow(){","rowSource.nullRow();","rowIdx=-1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["store.setCurrentOffsetInPage(offsetStart);","store.writeInt(offsetEnd-offsetStart);","store.setCurrentOffsetInPage(offsetEnd);","store.writeInt(0);//nomoreadditionalinformations","store.writeFinsh(null);//Theconnectionparameterisnullbecausethetableheaderiswrittenimmediately.","firstPage=store.getNextPagePos();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["newExpressionArithmetic(currentGroup,expr,ExpressionArithmetic.AND);","expressions=internalExpressions;","for(intc=0;c\<expressions.size();c++){","addColumn(newColumnExpression(expressions.get(c)));","patchExpressions(cmd.columnExpressions);","if(having!=null)having=patchExpression(having);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnrow\>rowCount||rowCount==0;","voidafterLast()throwsException{","useSetRowPosition=false;","if(sortedRowCount\>0){","scrollStatus.afterLast();","scrollStatus.getRowOffset(false);//previousposition"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["factor*=10;","value*=factor;","}else{","for(inti=0;i\>places;i--){","factor*=10;","value/=factor;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["returngetColumnExpression(column).getAlias();","publicStringgetSchemaName(intcolumn)throwsSQLException{","returnnull;","publicintgetPrecision(intcolumn)throwsSQLException{","returngetColumnExpression(column).getPrecision();","publicintgetScale(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["if(serializeConnections.size()==1&&serializeConnections.get(con)==null)returnnull;","TableStorePageInsertlock=newTableStorePageInsert(con,this,LOCK_INSERT);","locksInsert.add(lock);","con.add(lock);","returnlock;","caseSQLTokenizer.SELECT:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publiclonglongValue(){","returnvalue;","publicStringtoString(){","returnString.valueOf(value);","publicObjectgetImmutableObject(){","returnnewLong(value);"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|"],
"["@Override","finalbyte[]getBytes(intcolIdx)throwsException{","returnstore.getBytes(offsets[colIdx],dataTypes[colIdx]);","@Override","finalintgetDataType(intcolIdx){","returndataTypes[colIdx];"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["publicintgetMaxRowSize(){","return0;","publicbooleandoesMaxRowSizeIncludeBlobs(){","returnfalse;","publicintgetMaxStatementLength(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["firstNode=true;","break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){","offset-=2;","while(true){","if(shift!=0){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["while(buf.length()\<=scale)buf.insert(0,\'0\');","buf.insert(buf.length()-scale,\'.\');","if(signum\<0)buf.insert(0,\'-\');","returnbuf.toString();","publicintcompareTo(MutableNumericnumeric){","returntoBigDecimal().compareTo(numeric.toBigDecimal());"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["lock=(TableStorePage)locks.get(pageKey);","prev=lock;","while(lock!=null){","if(lock==storePage){","if(lock==prev){","if(lock.nextLock==null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){","case0:","left=param;","break;","case1:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionUCaseextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.UCASE;","finalbooleanisNull()throwsException{","returnparam1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionUCase.java|"],
"["if(obj==null)returnnull;","switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","return(byte[])obj;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setPrecision(value);","token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["abstractvoidnullRow();","abstractvoidnoRow();","abstractbooleanrowInserted();","abstractbooleanrowDeleted();","booleanhasAlias(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["returngetDouble(getObject(),dataType);","staticdoublegetDouble(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","return(obj.equals(Boolean.TRUE))?1:0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["try{","this.name=name;","this.readonly=readonly;","directory=canonicalFile;","if(!directory.isDirectory()){","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["setObject(findParameter(parameterName),x,sqlType,scale);","publicvoidsetObject(StringparameterName,Objectx,intsqlType)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType);","publicvoidsetObject(StringparameterName,Objectx)throwsSQLException{","setObject(findParameter(parameterName),x);","publicvoidsetCharacterStream(StringparameterName,Readerx,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["}else{","try{","returnnewExpressionValue(newInteger(tok),SQLTokenizer.INT);","}catch(NumberFormatExceptione){","returnnewExpressionValue(newLong(tok),SQLTokenizer.BIGINT);","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.DAYOFYEAR;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());","returndetails.dayofyear+1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfYear.java|"],
"["caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDoubleImpl());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetNumericImpl();","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.sql.SQLException;","importsmallsql.database.language.Language;","classUtils{","staticfinalStringMASTER_FILENAME=\"smallsql.master\";","staticfinalStringTABLE_VIEW_EXTENTION=\".sdb\";","privatestaticfinalStringLOB_EXTENTION=\".lob\";"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["SSConnection(SSConnectioncon){","readonly=con.readonly;","database=con.database;","metadata=con.metadata;","log=con.log;","DatabasegetDatabase(booleanreturnNull)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intautoGeneratedKeys)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnbuf.toString();","case102://ANSIyyyy.mm.dd","formatNumber(details.year,4,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","@Override","voidclose()throwsException{","if(indexes!=null)","indexes.close();","raFile.close();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}else{","token=nextToken(MISSING_EXPRESSION);","try{","displaySize=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.CROSS:","nextToken(MISSING_JOIN);","caseSQLTokenizer.COMMA:","fromSource=newJoin(Join.CROSS_JOIN,fromSource,rowSource(cmd,tables,0),null);","break;","caseSQLTokenizer.INNER:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["IndexDescriptionindex=indexes.get(i);","if(index.isPrimary()){","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","Object[]row=newObject[6];","row[0]=getName();//TABLE_CAT"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["introwCount=getRowCount();","returnrow\>rowCount||rowCount==0;","voidafterLast()throwsException{","useSetRowPosition=false;","if(sortedRowCount\>0){","scrollStatus.afterLast();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["privatevoidsetValue(byte[]complement){","intlength=complement.length;","if(length==0){","value=EMPTY_INTS;","signum=0;","return;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","default:thrownewError();","@Override","ObjectgetObject(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintGRE_EQU=54;//\>=","staticfinalintLESSER=55;//\<","staticfinalintLES_EQU=56;//\<=","staticfinalintUNEQUALS=57;//\<\>","staticfinalintIN=61;//IN","staticfinalintBETWEEN=62;//BETWEEN"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["complement=newbyte[(value.length-v)*4+4];","if(signum\<0)","complement[0]=complement[1]=complement[2]=complement[3]=-1;","offset=4;","}else{","complement=newbyte[(value.length-v)*4];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return(obj.equals(Boolean.TRUE));","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicbooleanisAutoIncrement(intcolumn)throwsSQLException{","returngetColumnExpression(column).isAutoIncrement();","publicbooleanisCaseSensitive(intcolumn)throwsSQLException{","returngetColumnExpression(column).isCaseSensitive();","publicbooleanisSearchable(intcolumn)throwsSQLException{","inttype=getColumnExpression(column).getType();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["super(log);","this.type=SQLTokenizer.TABLE;","this.catalog=catalog;","this.name=name;","this.tableCommandType=tableCommandType;","voidaddColumn(Columncolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["if(token!=null&&token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);","table.setAlias(token.getName(sql));","}else{","previousToken();","returntable;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleanisNext=rowSource.next();","if(!isNext)returnfalse;","LongoldRowOffset=(Long)index.findRows(distinctColumns,true,null);","longnewRowOffset=rowSource.getRowPosition();","if(oldRowOffset==null){","index.addValues(newRowOffset,distinctColumns);"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["finaldoublegetDouble(intoffset,intdataType)throwsException{","return0;","finalfloatgetFloat(intoffset,intdataType)throwsException{","return0;","finalintgetInt(intoffset,intdataType)throwsException{","return0;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["publicstaticfinalStringTABLE_OR_VIEW_FILE_INVALID=\"SS-0198\";","publicstaticfinalStringTABLE_EXISTENT=\"SS-0199\";","publicstaticfinalStringFK_NOT_TABLE=\"SS-0220\";","publicstaticfinalStringPK_ONLYONE=\"SS-0221\";","publicstaticfinalStringKEY_DUPLICATE=\"SS-0222\";","publicstaticfinalStringMONTH_TOOLARGE=\"SS-0251\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnnewFile(Utils.createIdxFileName(database,name));","privateFileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database,name);","booleanok=file.createNewFile();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["break;","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","writeLongString(expr.getString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","publicclassSSResultSetMetaDataimplementsResultSetMetaData{","Expressionscolumns;","publicintgetColumnCount()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalbooleanisScrollable(){","returnfalse;//TODOperformance,canimplementitifalldatasourcesimplementit","finalvoidbeforeFirst()throwsException{","dataSourceIdx=0;","currentDS=dataSources.get(0);","currentDS.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(idx==-1){","if(status.nodeValue!=null){","if(status.nodeValueinstanceofIndexNode){","level++;","nodeStack.push(","newIndexNodeScrollStatus((IndexNode)status.nodeValue,"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|","|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["this.left=left;","this.operation=operation;","Expression[]params;","if(inList!=null){","this.inList=inList.toArray();","params=newExpression[this.inList.length+1];"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(value\>Integer.MAX_VALUE)","returnInteger.MAX_VALUE;","if(value\<Integer.MIN_VALUE)","returnInteger.MIN_VALUE;","return(int)value;","staticlongdouble2long(doublevalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{CUSTOM_MESSAGE,\"{0}\"},","{UNSUPPORTED_OPERATION,\"UnsupportedOperation{0}.\"},","{CANT_LOCK_FILE,\"Can\'\'tlockfile\'\'{0}\'\'.AsingleSmallSQLDatabasecanonlybeopenedfromasingleprocess.\"},","{DB_EXISTENT,\"Database\'\'{0}\'\'alreadyexists.\"},","{DB_NONEXISTENT,\"Database\'\'{0}\'\'doesnotexist.\"},","{DB_NOT_DIRECTORY,\"Directory\'\'{0}\'\'isnotaSmallSQLdatabase.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.create(Language.DELETE_WO_FROM);","TableViewResult.getTableViewResult(tables.get(0)).deleteRow();","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"MONEY\"});","default:thrownewError();","@Override","MutableNumericgetNumeric(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleaninit(SSConnectioncon)throwsException{","TableViewtableView=getTableView();","if(tableTimestamp!=tableView.getTimestamp()){","this.con=con;","tableTimestamp=tableView.getTimestamp();","returntrue;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["SQLExceptioncreateUnspportedDataType(){","Object[]params={","SQLTokenizer.getKeyWord(getDataType(left,right)),","getKeywordFromOperation(operation)","};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER,params);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Expression[]params=getParams();","if(params.length==1){","return;","setParamAt(convertExpressionIfNeeded(params[0],params[1]),0);","for(intp=1;p\<params.length;p++){","setParamAt(convertExpressionIfNeeded(params[p],left),p);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["correctPointers(0,oldOffset,2,0);","finalprivatevoidremoveNode()throwsSQLException{","intoldOffset=offset;","correctPointers(0,oldOffset,-(2+pointerSize),0);","size-=2+pointerSize;","System.arraycopy(data,oldOffset+2+pointerSize,data,oldOffset,size-oldOffset);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalprivateExpressionpatchExpression(Expressionexpr)throwsSQLException{","intidx=addInternalExpressionFromSelect(expr);","if(idx\>=0){","ExpressionorigExpression=expr;","ExpressionNameexprName;","if(exprinstanceofExpressionName){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["caseSQLTokenizer.BLOB:","byte[]bytes=expr.getBytes();","if(bytes.length!=16)throwSmallSQLException.create(Language.BYTEARR_INVALID_SIZE,String.valueOf(bytes.length));","writeBytes(bytes);","default:","writeBytes(Utils.unique2bytes(expr.getString()));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(wasWhiteSpace){","node=searchTree;","}else{","if(node==null){","value=0;","wasWhiteSpace=false;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["raFile=createFile(con,database);","staticFilegetFile(Databasedatabase,Stringname)throwsException{","returnnewFile(Utils.createIdxFileName(database,name));","privateFileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["cmd.setParamValue(parameterIndex,x,SQLTokenizer.BINARY);","publicvoidsetDate(intparameterIndex,Datex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.DATE);","publicvoidsetTime(intparameterIndex,Timex)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["returncmd;","privateCommandtruncate()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_TABLE);","from(cmd);","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateStringgetFunctions(intfrom,intto){","StringBufferbuf=newStringBuffer();","for(inti=from;i\<=to;i++){","if(i!=from)buf.append(\',\');","buf.append(SQLTokenizer.getKeyWord(i));","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["break;","if(inList!=null&&idx\>0&&idx\<=inList.length){","inList[idx-1]=param;","super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(isOuterValid){","isOuterValid=false;","right.nullRow();","returntrue;","fullRowCount=Math.max(fullRowCount,fullRightRowCounter);","fullRightRowCounter=0;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case131://Kuwaitidd/mm/yyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(wasNull)returnnull;","returnobj.toBigDecimal();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti,Mapmap)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetRef()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["try{","value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setPrecision(value);","token=nextToken(MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return23;","caseSQLTokenizer.TIME:","return8;","caseSQLTokenizer.DATE:","return10;","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["SQLTokenizer.BINARY,","SQLTokenizer.LONGVARBINARY,","SQLTokenizer.BLOB,","SQLTokenizer.NULL};","privatestaticintNVARCHAR_IDX=Utils.indexOf(SQLTokenizer.NVARCHAR,DatatypeRange);","privatestaticintINT_IDX=Utils.indexOf(SQLTokenizer.INT,DatatypeRange);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returntrue;","publicResultSetgetUDTs(Stringcatalog,StringschemaPattern,StringtypeNamePattern,int[]types)throwsSQLException{","String[]colNames={\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"CLASS_NAME\",\"DATA_TYPE\",\"REMARKS\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicConnectiongetConnection(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);","default:thrownewError();","@Override","StringgetString(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["firstNode=firstNode1;","firstNode1=firstNode2;","firstNode2=firstNode3;","removeNode();","shift++;","return;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(num.scale\>scale){","setScale(num.scale);","add(-num.signum,num.value);","privatevoidsub(int[]val2){","longtemp=0;","intv1=value.length;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["break;","case\'_\':","sIdx++;","break;","default:","if(range){//%wildcardisactive"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["num.mul(right.getInt());","returnnum;","}else","if(getDataType(left.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=right.getNumeric();","num.mul(left.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticHashtablekeywords=newHashtable(337);","staticfinalintVALUE=0;","staticfinalintSTRING=3;","staticfinalintIDENTIFIER=4;","staticfinalintNUMBERVALUE=5;","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicDategetDate(StringcolumnName,Calendarcal)throwsSQLException{","returngetDate(findColumn(columnName),cal);","publicTimegetTime(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){","returngetTime(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["resize(size2);","data[size2]=value1;","data[size2+1]=value2;","size++;","finalvoidclear(){","size=0;"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["caseSQLTokenizer.PARENTHESIS_L:","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:","throwcreateSyntaxError(token,validValues);","returntoken;","for(inti=validValues.length-1;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["value[1]=(int)complement;","signum=1;","MutableNumeric(longcomplement,intscale){","this(complement);","this.scale=scale;","MutableNumeric(doubleval){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["throwSmallSQLException.create(Language.MONTH_TOOLARGE,datetime);","if(day\>=32){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==31){","switch(month){","case1:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.REAL:","returnnewMutableNumeric(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(readDouble());","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetURL(findColumn(columnName));","publicvoidupdateRef(intcolumnIndex,Refx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blob\");","publicvoidupdateBlob(StringcolumnName,Blobx)throwsSQLException{","updateBlob(findColumn(columnName),x);","publicvoidupdateClob(intcolumnIndex,Clobx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returncmd.getUpdateCount();","finalprivatevoidexecuteImp()throwsSQLException{","checkStatement();","cmd.verifyParams();","if(getMaxRows()!=0&&(top==-1||top\>getMaxRows()))","cmd.setMaxRows(getMaxRows());"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["switch(param1.getDataType()){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.CLOB:","returnUtils.bytes2unique(Utils.unique2bytes(param1.getString()),0);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["booleanisNext=next();","previous();","return!isNext;","finalbooleanisAfterLast(){","introwCount=getRowCount();","returnrow\>rowCount||rowCount==0;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["voidsetParamAt(Expressionparam,intidx){","params[idx]=param;","finalExpression[]getParams(){returnparams;}","voidoptimize()throwsSQLException{","if(params!=null){","for(intp=0;p\<params.length;p++){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnvalue;","@Override","publicStringtoString(){","returnString.valueOf(value);","publicObjectgetImmutableObject(){","returnnewLong(value);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","CommandTablecmdCreate=newCommandTable(con.log,catalog,tableName,SQLTokenizer.CREATE);","SQLTokentoken=nextToken(MISSING_PARENTHESIS_L);","nextCol:","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(\'-\');","formatNumber(details.day,2,buf);","if(dataType!=SQLTokenizer.DATE){","if(buf.length()\>0)buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintFLOOR=1010;","staticfinalintLOG=1011;","staticfinalintLOG10=1012;","staticfinalintMOD=1013;","staticfinalintPI=1014;","staticfinalintPOWER=1015;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["buffer.write(str1,idx1,str1.length-idx1);","returnbuffer.toByteArray();","returnstr1;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr1=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returnaddRoot();","privatefinalvoidmoveRemainderValue()throwsSQLException{","ObjectrowOffset=value;","char[]puffer=remainderKey;","value=null;","remainderKey=null;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["@Override","finalvoidafterLast(){","filePos=-1;","noRow();","@Override","finalintgetRow(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["importjava.io.*;","importsmallsql.database.language.Language;","publicclassSSCallableStatementextendsSSPreparedStatementimplementsCallableStatement{","privatebooleanwasNull;","SSCallableStatement(SSConnectioncon,Stringsql)throwsSQLException{","super(con,sql);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.SET:","caseSQLTokenizer.JOIN:","caseSQLTokenizer.LIMIT:","returntrue;","returnfalse;","privateSQLTokenlastToken(){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return!isNext&&(rowIdx+1==rowList.size()&&rowList.size()\>0);","booleanisAfterLast()throwsException{","if(rowIdx\>=rowList.size())returntrue;","if(isBeforeFirst()&&rowList.size()==0){","next();","previous();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returnbuffer.toString();","publicbooleanequals(Objectobj){","return(objinstanceofMoney&&((Money)obj).value==value);","publicinthashCode(){","return(int)(value^(value\>\>\>32));","publiclongunscaledValue(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["rowSource.nullRow();","rowIdx=-1;","voidnoRow(){","rowSource.noRow();","rowIdx=-1;","voidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["importjava.sql.*;","classLogger{","booleanisLogging(){","returnDriverManager.getLogWriter()!=null;","voidprintln(Stringmsg){","PrintWriterlog=DriverManager.getLogWriter();"]": ["|project://smallsql/src/smallsql/database/Logger.java|"],
"["if(values!=null){","for(inti=values.length-1;i\>=0;i--){","values[i].clear();","publicvoidmoveToInsertRow()throwsSQLException{","if(isUpdatable){","isInsertRow=true;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["offset=previousOffset;","return;","offset=listEnum.offsetStack[listEnum.stack-1]-pointerSize;","intpointer=getPointer();","if(pointer\<=previousOffset){","offset=previousOffset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["privateintrowIdx;","Scrollable(RowSourcerowSource){","this.rowSource=rowSource;","finalbooleanisScrollable(){","returntrue;","voidbeforeFirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["writeTime(expr.getLong());","break;","caseSQLTokenizer.DATE:","writeDate(expr.getLong());","break;","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnparam2.getString();","returnparam3.getString();","finalintgetDataType(){","returnExpressionArithmetic.getDataType(param2,param3);","finalintgetPrecision(){","returnMath.max(param2.getPrecision(),param3.getPrecision());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["publicintexecuteUpdate()throwsSQLException{","executeImp();","returncmd.getUpdateCount();","finalprivatevoidexecuteImp()throwsSQLException{","checkStatement();","cmd.verifyParams();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["char[]chars=newchar[36];","chars[8]=chars[13]=chars[18]=chars[23]=\'-\';","chars[0]=digits[(daten[offset+3]\>\>4)&0x0F];","chars[1]=digits[(daten[offset+3])&0x0F];","chars[2]=digits[(daten[offset+2]\>\>4)&0x0F];","chars[3]=digits[(daten[offset+2])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["@Override","booleanisNull(intvalueOffset){","returnpage[valueOffset]!=0;","@Override","booleangetBoolean(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["writeShort(0);","writeShort((int)(value\>\>32));","writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value\>\>16));","writePointer(offset+pointerSize+2);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returngetFloat(getObject(),dataType);","staticfloatgetFloat(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","return(obj.equals(Boolean.TRUE))?1:0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetPrimaryKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"KEY_SEQ\",\"PK_NAME\"};","Object[][]data=con.getDatabase(false).getPrimaryKeys(con,table);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{RSET_CLOSED,\"IlResultSetÃ¨chiuso.\"},","{RSET_NOT_INSERT_ROW,\"IlcursorenonÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{RSET_ON_INSERT_ROW,\"IlcursoreÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{ROWSOURCE_READONLY,\"IlRowsourceÃ¨disolalettura.\"},","{STMT_IS_CLOSED,\"LoStatementÃ¨instatochiuso.\"},","{SUBQUERY_COL_COUNT,\"Ilconteggiodellecolonnenellasubquerydeveessere1enon{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["return(int)readTimestamp();","caseSQLTokenizer.TIME:","return(int)readTime();","caseSQLTokenizer.DATE:","return(int)readDate();","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rowPos=(row\>0)?","Math.min(row,1):","Math.min(row+1,-1);","returnrowPos==1;","finalbooleanrelative(introws){","if(rows==0)returnrowPos==1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["caseSQLTokenizer.DATABASE:","returncreateDatabase();","caseSQLTokenizer.TABLE:","returncreateTable();","caseSQLTokenizer.VIEW:","returncreateView();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(count!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","}else{","for(inti=0;i\<count;i++)matrix[i]=-1;","for(intc=0;c\<columnExpressions.size();c++){","ExpressionsqlCol=columnExpressions.get(c);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["this.type=SQLTokenizer.VIEW;","this.name=name;","voidaddColumn(Columncolumn){","columns.add(column);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","con.getDatabase(false).createView(con,name,sql);"]": ["|project://smallsql/src/smallsql/database/CommandCreateView.java|"],
"["readlock.nextLock=lock;","con.add(lock);","returnlock;","LongpageKey=newLong(readlock.fileOffset);//TODOperformance","TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}catch(Throwablee){","e.printStackTrace();","publicConnectionconnect(Stringurl,Propertiesinfo)throwsSQLException{","if(!acceptsURL(url)){","returnnull;","returnnewSSConnection(parse(url,info));"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["buf.append(Long.toString(temp));","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","buf.append(Long.toString(temp));","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["}else{","returnabsolute(newRow);","intgetRow()throwsException{","if(rowIdx\>=rowList.size())return0;","returnrowIdx+1;","longgetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["indexes=null;","references=null;","staticvoiddrop(Databasedatabase,Stringname)throwsException{","booleanok=newFile(Utils.createTableViewFileName(database,name)).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voiddrop(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["privateExpressiongetValue(inti)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodfindParameter()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodregisterOutParameter()notyetimplemented.\");","publicbooleanwasNull(){","returnwasNull;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.DOUBLE:","returnTypes.DOUBLE;","caseSQLTokenizer.DATE:","returnTypes.DATE;","caseSQLTokenizer.TIME:","returnTypes.TIME;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.DriverManager;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","finalclassIndexDescription{","staticfinalintMAGIC_INDEX=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'I\';"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["con.add(lock);","returnlock;","caseSQLTokenizer.LONGVARBINARY:","returnnewTableStorePage(con,this,LOCK_INSERT,-1);","default:","thrownewError(\"pageOperation:\"+pageOperation);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["importjava.sql.*;","importjava.util.List;","finalclassTableResultextendsTableViewResult{","finalprivateTabletable;","privateListinsertStorePages;","privatelongfirstOwnInsert;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.COMMA:","fromSource=newJoin(Join.CROSS_JOIN,fromSource,rowSource(cmd,tables,0),null);","break;","caseSQLTokenizer.INNER:","nextToken(MISSING_JOIN);","caseSQLTokenizer.JOIN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalTableViewgetTable(){","returntable;","finalintgetColumnIndex(){","returncolIdx;","finalColumngetColumn(){","returncolumn;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["col.setName(colName);","token=nextToken();","booleannullableWasSet=false;","booleandefaultWasSet=col.isAutoIncrement();//withdatatypeCOUNTERalreadythisvalueisset","while(true){","if(token==null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncmd.getResultSet()!=null;","finalprivatevoidexecuteImpl(Stringsql)throwsSQLException{","checkStatement();","generatedKeys=null;","try{","con.log.println(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(token.value!=SQLTokenizer.WHERE)","throwthis.createSyntaxError(token,MISSING_WHERE);","where(cmd);","returncmd;","privateCommandtruncate()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["page.freeLock();","voidrollback(intsavepoint)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=savepoint;i--){","TransactionSteppage=(TransactionStep)commitPages.remove(i);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnfalse;","publicintisNullable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isNullable()?columnNullable:columnNoNulls;","publicbooleanisSigned(intcolumn)throwsSQLException{","returnisSignedDataType(getColumnExpression(column).getDataType());","staticbooleanisSignedDataType(intdataType){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["addColumn(columns,column);","voidaddIndex(IndexDescriptionindexDescription)throwsSQLException{","indexes.add(indexDescription);","voidaddForeingnKey(ForeignKeykey){","foreignKeys.add(key);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["expr=newExpressionFunctionBitLen();","break;","caseSQLTokenizer.CHARLEN:","caseSQLTokenizer.CHARACTLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCharLen();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicStringgetSearchStringEscape(){","return\"\\\\\";","publicStringgetExtraNameCharacters(){","return\"#$Ã€Ã\ufffdÃ‚ÃƒÃ„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹ÃŒÃ\ufffdÃŽÃ\ufffdÃ\ufffdÃ‘Ã’Ã“Ã”Ã•Ã–Ã˜Ã™ÃšÃ›ÃœÃ\ufffdÃžÃŸÃ\u00a0Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿\";","publicbooleansupportsAlterTableWithAddColumn(){","thrownewjava.lang.UnsupportedOperationException(\"MethodsupportsAlterTableWithDropColumn()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionDifference();","break;","caseSQLTokenizer.INSERT:","invalidParamCount=(paramCount!=4);","expr=newExpressionFunctionInsert();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","for(intv=value.length-1;v\>=0;v--){","inttemp=0;","for(inti=0;i\<4&&0\<length;i++){","temp|=(complement[--length]&0xFF)\<\<(i*8);","value[v]=temp;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["switch(strMillis.length()){","case1:","millis=Integer.parseInt(strMillis)*100;","break;","case2:","millis=Integer.parseInt(strMillis)*10;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["store.writeInt(daten.length);","store.writeBytes(daten);","writeLong(store.writeFinsh(null));","byte[]readLongBinary()throwsException{","longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseTypes.DECIMAL:","caseTypes.NUMERIC:","return\"java.math.BigDecimal\";","caseTypes.REAL:","return\"java.lang.Float\";","caseTypes.FLOAT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["if(MONTH_DAYS[m]\<=day){","month=m;","day=day-MONTH_DAYS[m]+1;","break;","staticbooleanisLeapYear(intyear){","returnyear%4==0&&(year%100!=0||year%400==0);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicstaticfinalStringCOL_READONLY=\"SS-0405\";","publicstaticfinalStringCOL_INVALID_NAME=\"SS-0406\";","publicstaticfinalStringCOL_IDX_OUT_RANGE=\"SS-0407\";","publicstaticfinalStringCOL_AMBIGUOUS=\"SS-0408\";","publicstaticfinalStringGROUP_AGGR_INVALID=\"SS-0430\";","publicstaticfinalStringGROUP_AGGR_NOTPART=\"SS-0431\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Stringstr3=param3.getString();","StringBufferbuffer=newStringBuffer();","intidx1=0;","intidx2=str1.indexOf(str2,idx1);","while(idx2\>=0){","buffer.append(str1.substring(idx1,idx2));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["addMessages(ENTRIES);","publicString[][]getEntries(){","returnENTRIES;","privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"NichtunterstÃ¼tzteFunktion:{0}\"},","{CANT_LOCK_FILE,\"DieDatei\'\'{0}\'\'kannnichtgelocktwerden.EineeinzelneSmallSQLDatenbankkannnurfÃ¼reineneinzigenProzessgeÃ¶ffnetwerden.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BOOLEAN)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DATE)),Utils.getInteger(10),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIME)),Utils.getInteger(8),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIMESTAMP)),Utils.getInteger(23),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(3),Utils.getInteger(3),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLDATETIME)),Utils.getInteger(16),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.JAVA_OBJECT)),Utils.getInteger(65535),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["IndexDescriptionindexDesc=newIndexDescription(","indexName,","tableName,","unique?SQLTokenizer.UNIQUE:SQLTokenizer.INDEX,","expressions,","columns);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{SUBQUERY_COL_COUNT,\"01000\"},","{JOIN_DELETE,\"01000\"},","{JOIN_INSERT,\"01000\"},","{DELETE_WO_FROM,\"01000\"},","{INSERT_WO_FROM,\"01000\"},","{TABLE_CANT_RENAME,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["switch(token.value){","caseSQLTokenizer.ON:","previousToken();","returnfromSource;","caseSQLTokenizer.CROSS:","nextToken(MISSING_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StringtableName=tables.get(i);","try{","TableViewtab=getTableView(con,tableName);","Columnscols=tab.columns;","for(intc=0;c\<cols.size();c++){","Columncol=cols.get(c);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.BIT:","return((Boolean)obj).booleanValue()?\"1\":\"0\";","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","returnnewString((byte[])obj);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["intcount=cols.size();","if(size+count\>=data.length){","resize(size+count);","System.arraycopy(cols.data,0,data,size,count);","size+=count;","finalvoidclear(){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){","returnfindNodeInsertPos(digit,mid+1,end);","}else{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["voidsetSignum(intsignum){","this.signum=signum;","voidfloor(){","intoldScale=scale;","setScale(0);","setScale(oldScale);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["getCmd().deleteRow(st.con);","clearRowBuffer();","publicvoidrefreshRow()throwsSQLException{","testNotInsertRow();","relative(0);","publicvoidcancelRowUpdates()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["ObjectgetObject()throwsException{","if(isNull())returnnull;","returnUtils.getInteger(getInt());","StringgetString()throwsException{","if(isNull())returnnull;","returnString.valueOf(getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["packagesmallsql.database;","importjava.sql.*;","abstractclassStore{","staticfinalStoreNULL=newStoreNull();","staticfinalStoreNOROW=newStoreNoCurrentRow();","abstractbooleanisNull(intoffset)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["{COL_DUPLICATE,\"EsgibteinendoppeltenSpaltennamen:\'\'{0}\'\'.\"},","{COL_MISSING,\"Spalte\'\'{0}\'\'wurdenichtgefunden.\"},","{COL_VAL_UNMATCH,\"DieSpaltenanzahlundWerteanzahlistnichtidentisch.\"},","{COL_INVALID_SIZE,\"UngÃ¼ltigeSpaltengrÃ¶ÃŸe{0}fÃ¼rSpalte\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"DerSpaltenprefix\'\'{0}\'\'passtzukeinemTabellennamenoderAliasnamenindieserAbfrage.\"},","{COL_READONLY,\"DieSpalte{0}istschreibgeschÃ¼tzt.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti)throwsSQLException{","try{","MutableNumericobj=getValue(i).getNumeric();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["break;","caseSQLTokenizer.RTRIM:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRTrim();","break;","caseSQLTokenizer.SPACE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnTypes.NULL;","default:thrownewError(\"DataType:\"+type);","staticSearchNodesearchTree;","staticHashtablekeywords=newHashtable(337);","staticfinalintVALUE=0;","staticfinalintSTRING=3;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseMOD:","if(getDataType(getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","returnnewMutableNumeric(getInt());","MutableNumericnum=left.getNumeric();","num.mod(right.getNumeric());","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.REAL:","returnnewFloat(getFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(getDouble());","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateCommandSetset()throwsSQLException{","SQLTokentoken=nextToken(COMMANDS_SET);","switch(token.value){","caseSQLTokenizer.TRANSACTION:","returnsetTransaction();","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnUtils.bytes2int(readLongBinary())!=0;","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp()!=0;","caseSQLTokenizer.TIME:","returnreadTime()!=0;","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returndefaultValue;","caseSQLTokenizer.TIMESTAMP:","return23;","caseSQLTokenizer.TIME:","return8;","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["staticfinalintLONGVARCHAR=359;","staticfinalintLONGNVARCHAR=360;","staticfinalintLONG=361;","staticfinalintCLOB=362;","staticfinalintNCLOB=363;","staticfinalintUNIQUEIDENTIFIER=370;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatestaticfinalint[]MISSING_INTO={SQLTokenizer.INTO};","privatestaticfinalint[]MISSING_BETWEEN_IN={SQLTokenizer.BETWEEN,SQLTokenizer.IN};","privatestaticfinalint[]MISSING_NOT_NULL={SQLTokenizer.NOT,SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_NULL={SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_COMMA={SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_COMMA_PARENTHESIS={SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","booleaninit(SSConnectioncon)throwsException{","if(super.init(con)){","commandSelect.compile(con);","returntrue;"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["privatestaticfinalShort[]shortCache=newShort[260];","static{","for(inti=-4;i\<256;i++){","integerCache[i+4]=newInteger(i);","shortCache[i+4]=newShort((short)i);","staticStringcreateTableViewFileName(Databasedatabase,Stringname){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["SQLTokenizer.SMALLINT,","SQLTokenizer.TINYINT,","SQLTokenizer.BIT,","SQLTokenizer.BOOLEAN,","SQLTokenizer.LONGNVARCHAR,","SQLTokenizer.UNIQUEIDENTIFIER,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(!ok)throwSmallSQLException.create(Language.INDEX_EXISTS,name);","FileChannelrandomFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,randomFile,con,database));","writeMagic(randomFile);","returnrandomFile;","privatevoidload(Databasedatabase)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["publicDategetDate(StringparameterName,Calendarcal)throwsSQLException{","returngetDate(findParameter(parameterName),cal);","publicTimegetTime(StringparameterName,Calendarcal)throwsSQLException{","returngetTime(findParameter(parameterName),cal);","publicTimestampgetTimestamp(StringparameterName,Calendarcal)throwsSQLException{","returngetTimestamp(findParameter(parameterName),cal);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(readlock.lockType==LOCK_INSERT){","TableStorePagelock=newTableStorePage(con,this,LOCK_INSERT,-1);","readlock.nextLock=lock;","con.add(lock);","returnlock;","LongpageKey=newLong(readlock.fileOffset);//TODOperformance"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["this.catalog=catalog;","this.name=name;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","switch(type){","caseSQLTokenizer.DATABASE:","if(name.startsWith(\"file:\"))"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["break;","caseSQLTokenizer.MONTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMonth();","break;","caseSQLTokenizer.NOW:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwcreateSyntaxError(token,MISSING_OPTIONS_DATATYPE);","token=nextToken();","privateIndexDescriptionindex(Commandcmd,intconstraintType,StringtableName,StringcontrainName,StringcolumnName)throwsSQLException{","if(constraintType!=SQLTokenizer.UNIQUE)nextToken(MISSING_KEY);","SQLTokentoken=nextToken();","if(token!=null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{UNION_DIFFERENT_COLS,\"01000\"},","{INDEX_EXISTS,\"01000\"},","{INDEX_MISSING,\"01000\"},","{INDEX_FILE_INVALID,\"01000\"},","{INDEX_CORRUPT,\"01000\"},","{INDEX_TOOMANY_EQUALS,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSUB:returnleft.getInt()-right.getInt();","caseMUL:returnleft.getInt()*right.getInt();","caseDIV:returnleft.getInt()/right.getInt();","caseNEGATIVE:return-left.getInt();","caseMOD:returnleft.getInt()%right.getInt();","caseBIT_NOT:return~left.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidwriteString(StringstrDaten,intlengthColumn,booleanvarchar)throwsSQLException{","char[]daten=strDaten.toCharArray();","intlength=daten.length;","if(lengthColumn\<length){","throwSmallSQLException.create(Language.VALUE_STR_TOOLARGE);","if(varchar)lengthColumn=length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDouble());","default:","thrownewError();","longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["staticfinalintEQUALS=\'=\';//61","staticfinalintGREATER=\'\>\';//62","staticfinalintQUESTION=\'?\';//63","staticfinalintBIT_XOR=\'^\';//94","staticfinalintESCAPE_L=\'{\';//123","staticfinalintBIT_OR=\'|\';//124"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();","if(dataType!=SQLTokenizer.TIME){","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return\"java.sql.Date\";","caseTypes.TIME:","return\"java.sql.Time\";","caseTypes.TIMESTAMP:","return\"java.sql.Timestamp\";","caseTypes.CHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnmetaData;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","returnnull;","publicvoidsetDate(intparameterIndex,Datex,Calendarcal)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["rowSource.beforeFirst();","returnfalse;","booleannext()throwsException{","if(++rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["{UNSUPPORTED_DATATYPE_OPER,\"Tipodidato\'\'{0}\'\'nonsupportatoperl\'\'operazione\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Tipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Conversioneversoiltipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"TipononsupportatoperlafunzioneCONVERT:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"TipononsupportatoperlafunzioneSUM:\'\'{0}\'\'.\"},","{UNSUPPORTED_TYPE_MAX,\"TipononsupportatoperlafunzioneMAX:\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["publicbooleansupportsSelectForUpdate(){","returntrue;","publicbooleansupportsStoredProcedures(){","returnfalse;","publicbooleansupportsSubqueriesInComparisons(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["default:throwcreateUnspportedDataType(param1.getDataType());","intgetDataType(){","returnparam1.getDataType();","intgetPrecision(){","returnparam1.getPrecision();","finalintgetScale(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value\>\>16));","writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value));"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["columnExpressions.add(position++,expr);","returnposition;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);","if((st.rsType==ResultSet.TYPE_SCROLL_INSENSITIVE||st.rsType==ResultSet.TYPE_SCROLL_SENSITIVE)&&","!from.isScrollable()){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["break;","default:","if(range){//%wildcardisactive","for(;sIdx\<value.length();sIdx++){","if(Character.toUpperCase(value.charAt(sIdx))==m)break;//Countermustn\'tincrementbeforebreak","if(sIdx\>=value.length())returnfalse;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalColumnget(Stringname){","for(inti=0;i\<size;i++){","Columncolumn=data[i];"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["for(inti=0;i\<colNames.length;i++){","ExpressionNameexpr=newExpressionName(colNames[i]);","cmd.addColumnExpression(expr);","expr.setFrom(source,i,source.getColumn(i));","cmd.setSource(source);","returncmd;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{SAVEPT_INVALID_TRANS,\"Savepointisnotvalidforthistransaction.\"},","{SAVEPT_INVALID_DRIVER,\"Savepointisnotvalidforthisdriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnotsupportedforthistypeofrowsource.\"},","{ISOLATION_UNKNOWN,\"UnknownTransactionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"InvalidflagvalueinmethodgetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"InvalidargumentinmethodsetNeedGenratedKeys:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicbooleanisReadOnly(){","returnreadonly;","publicvoidsetCatalog(Stringcatalog)throwsSQLException{","testClosedConnection();","database=Database.getDatabase(catalog,this,false);","publicStringgetCatalog(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["page=newPage;","@Override","booleanisValidPage(){","returnstatus==NORMAL||(status==UPDATED_PAGE&&updatePointer!=null);","@Override","intgetUsedSize(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.BINARY);","publicvoidsetDate(intparameterIndex,Datex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.DATE);","publicvoidsetTime(intparameterIndex,Timex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["abstractbooleannext()throwsException;","booleanlast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisLast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisAfterLast()throwsSQLException,Exception{"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Readerobject\");","publicvoidupdateObject(intcolumnIndex,Objectx,intscale)throwsSQLException{","updateValue(columnIndex,x,-1);","publicvoidupdateObject(intcolumnIndex,Objectx)throwsSQLException{","updateValue(columnIndex,x,-1);","publicvoidupdateNull(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalintindexOf(Expressionexpr){","if(expr==null){","for(inti=0;i\<size;i++)","if(data[i]==null)","returni;","}else{"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["finalvoiddeleteRow()throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidupdateRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidinsertRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return(obj==Boolean.TRUE)?1:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["nodes=temp;","finalvoidaddNode(chardigit,longrowOffset)throwsSQLException{","IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();","node.saveValue(rowOffset);","finalvoidsaveValue(longrowOffset)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","if(dataType!=SQLTokenizer.DATE){","if(buf.length()\>0)buf.append(\'\');","formatNumber(details.hour,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return0;","returngetScale(dataType);","booleanisNull()throwsException{","switch(operation){","caseOR:","caseAND:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["protectedLanguage(){","messages=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","sqlStates=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","addMessages(MESSAGES);","setSqlStates();","protectedfinalvoidaddMessages(String[][]entries)"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["file=newFile(name).getCanonicalFile();","}catch(Throwableth){","throwSmallSQLException.createFromException(th);","StringdbKey=file.getName()+\";readonly=\"+con.isReadOnly();","synchronized(databases){","Databasedb=(Database)databases.get(dbKey);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["booleanlast()throwsException{","returncommandSelect.last();","booleanisLast()throwsException{","returncommandSelect.isLast();","booleanisAfterLast()throwsException{","returncommandSelect.isAfterLast();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["throwSmallSQLException.create(Language.PARAM_EMPTY,newInteger(p+1));","voidclearParams(){","for(intp=0;p\<params.size();p++){","((ExpressionValue)params.get(p)).clear();","privateExpressionValuegetParam(intidx)throwsSQLException{","if(idx\<1||idx\>params.size())"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["returnreadTime();","caseSQLTokenizer.DATE:","returnreadDate();","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(operation){","caseNEGATIVE:","caseBIT_NOT:","returnleft.getDataType();","caseEQUALS:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnewDateTime(getLong(),dataType);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returngetBytes();","default:throwcreateUnspportedDataType();","booleangetBoolean()throwsjava.lang.Exception{","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}else{","newData.status=UPDATED_PAGE;","if(updatePointer==null){","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","filePosUpdated=newData.writeFinsh(null);","status=UPDATE_POINTER;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.GROUP_AGGR_INVALID,expr);","}else{","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","internalExpressions.add(expr);","returninternalExpressions.size()-1;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["while(true){","if(token==null){","throwcreateSyntaxError(token,Language.STXADD_JOIN_INVALID);","switch(token.value){","caseSQLTokenizer.ON:","if(type==Join.RIGHT_JOIN)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.util.ArrayList;","importjava.util.List;","importsmallsql.database.language.Language;","classMemoryResultextendsDataSource{","ExpressionValue[]currentRow;","privatefinalColumnscolumns=newColumns();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["afterLast();","rowIdx=rowList.size()+row;","if(rowIdx\<0){","beforeFirst();","returnfalse;","}else{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["finallonggetLong()throwsException{","returngetResult().getLong();","finalfloatgetFloat()throwsException{","returngetResult().getFloat();","finaldoublegetDouble()throwsException{","returngetResult().getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["importjava.util.HashMap;","importjava.util.Iterator;","importjava.util.List;","importsmallsql.database.language.Language;","classTableextendsTableView{","privatestaticfinalintINDEX=1;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["privatedoublegetDoubleImpl(doublelVal,doublerVal)throwsjava.lang.Exception{","switch(operation){","caseADD:returnlVal+rVal;","caseSUB:returnlVal-rVal;","caseMUL:returnlVal*rVal;","caseDIV:returnlVal/rVal;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["for(inti=0;i\<columns.size();i++){","if(columns.get(i).getName().equalsIgnoreCase(columnName))returni;","return-1;","finalColumnfindColumn(StringcolumnName){","for(inti=0;i\<columns.size();i++){","Columncolumn=columns.get(i);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["index.addValues(newRowOffset,distinctColumns);","row++;","returntrue;","}else","if(oldRowOffset.longValue()==newRowOffset){","row++;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(storeinstanceofStoreImpl&&","((StoreImpl)store).isRollback()){","returntrue;","returnfalse;","@Override","finalvoidnullRow(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["staticbyte[]float2bytes(floatvalue){","returnint2bytes(Float.floatToIntBits(value));","staticbyte[]long2bytes(longvalue){","byte[]result=newbyte[8];","result[0]=(byte)(value\>\>56);","result[1]=(byte)(value\>\>48);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicStringgetNumericFunctions(){","returngetFunctions(SQLTokenizer.ABS,SQLTokenizer.TRUNCATE);","publicStringgetStringFunctions(){","returngetFunctions(SQLTokenizer.ASCII,SQLTokenizer.UCASE);","publicStringgetSystemFunctions(){","returngetFunctions(SQLTokenizer.IFNULL,SQLTokenizer.IIF);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicintgetMaxColumnsInTable(){","return0;","publicintgetMaxConnections(){","return0;","publicintgetMaxCursorNameLength(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicintgetColumnDisplaySize(intcolumn)throwsSQLException{","returngetColumnExpression(column).getDisplaySize();","publicStringgetColumnLabel(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();","publicStringgetColumnName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.ALTER:","returnalter();","caseSQLTokenizer.SET:","returnset();","caseSQLTokenizer.USE:","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["super(left,(Expressions)null,operation);","this.cmdSel=cmdSel;","this.con=con;","privatevoidloadInList()throwsException{","if(cmdSel.compile(con)){","cmdSel.from.execute();"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["importjava.nio.channels.FileChannel;","classFileIndexextendsIndex{","staticvoidprint(Indexindex,Expressionsexpressions){","IndexScrollStatusscroll=index.createScrollStatus(expressions);","longl;","while((l=scroll.getRowOffset(true))\>=0){"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["returndigit;","finalbooleangetUnique(){","returnunique;","finalbooleanisEmpty(){","returnnodes==EMPTY_NODES&&value==null;","finalvoidclear(){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.UNION:","caseSQLTokenizer.FROM:","caseSQLTokenizer.WHERE:","caseSQLTokenizer.GROUP:","caseSQLTokenizer.HAVING:","caseSQLTokenizer.ORDER:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case\'M\':","case\'N\':","c=\'5\';","break;","case\'R\':","c=\'6\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["break;","caseSQLTokenizer.IIF:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionIIF();","break;","caseSQLTokenizer.SWITCH:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetValue(columnIndex).getString();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","classMemoryStream{","privatebyte[]puffer;","privateintoffset;","MemoryStream(){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["value=num.value;","scale=num.scale;","signum=num.signum;","intgetScale(){","returnscale;","voidsetScale(intnewScale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(i\<params.length)","elseResult=params[i];","voidsetParamAt(Expressionparam,intidx){","super.setParamAt(param,idx);","intp=idx/2;","if(p\>=cases.size()){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()!=0;","caseSQLTokenizer.SMALLINT:","returnreadShort()!=0;","caseSQLTokenizer.INT:","returnreadInt()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","voidnullRow(){","rowSource.nullRow();","row=0;","voidnoRow(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){","parthesisCount++;","cmd.noColumns=true;","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(minute\>=60){","throwSmallSQLException.create(Language.MINUTES_TOOLARGE,datetime);","if(second\>=60){","throwSmallSQLException.create(Language.SECS_TOOLARGE,datetime);","if(millis\>=1000){","throwSmallSQLException.create(Language.MILLIS_TOOLARGE,datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);","if(++i==length){","returnnode;","if(equals(node.getRemainderValue(),key,i)){","returnnode;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.CLOB:","returnUtils.bytes2unique(Utils.unique2bytes(param1.getString()),0);","returnUtils.bytes2unique(param1.getBytes(),0);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(\"VIEW\".equalsIgnoreCase(types[i]))isTypeView=true;","if(database!=null){","Stringstables=database.getTables(tableNamePattern);","for(inti=0;i\<tables.size();i++){","Stringtable=tables.get(i);","Object[]row=newObject[10];"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["IndexNodeloadRef(longoffset)throwsSQLException{","thrownewError();","voidload(StoreImplinput)throwsSQLException{","intlength=input.readInt();","remainderKey=(length\>0)?input.readChars(length):null;","intvalueType=input.readByte();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returngetBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returngetBytes();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{PK_ONLYONE,\"Atablecanhaveonlyoneprimarykey.\"},","{KEY_DUPLICATE,\"DuplicateKey.\"},","{MONTH_TOOLARGE,\"MonthsaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DaysaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"HoursaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"MinutesaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(e==null)","returnnull;","if(e.key==key)","returne.value;","e=e.next;","finalbooleancontainsKey(longkey){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["importjava.sql.*;","publicclassTableStorePageextendsStorePage{","finalTabletable;","intlockType;","SSConnectioncon;","TableStorePagenextLock;"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["{COL_READONLY,\"Column{0}isreadonly.\"},","{COL_INVALID_NAME,\"Invalidcolumnname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Columnindexoutofrange:{0}.\"},","{COL_AMBIGUOUS,\"Column\'\'{0}\'\'isambiguous.\"},","{GROUP_AGGR_INVALID,\"AggregatefunctionarenotvalidintheGROUPBYclause({0}).\"},","{GROUP_AGGR_NOTPART,\"Expression\'\'{0}\'\'isnotpartofaaggregatefunctionorGROUPBYclause.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionRadiansextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.RADIANS;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.toRadians(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRadians.java|"],
"["switch(token.value){","caseSQLTokenizer.PARENTHESIS_L://(","returnrowSource(cmd,tables,SQLTokenizer.PARENTHESIS_R);","caseSQLTokenizer.ESCAPE_L://{","token=nextToken(MISSING_OJ);","returnrowSource(cmd,tables,SQLTokenizer.ESCAPE_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnumeric=expr.getNumeric();","numeric.setScale(column.getScale());","writeNumeric(numeric);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["value[i]=(i==last)?-value[i]:~value[i];","voidmul(MutableNumericnum){","BigDecimalbig=toBigDecimal().multiply(num.toBigDecimal());","setValue(big.unscaledValue().toByteArray());","scale=big.scale();","signum=big.signum();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["previous();","if(rowList.size()==0)returntrue;","returnfalse;","voidafterLast()throwsException{","if(rowIdx+1\<rowList.size()){","rowIdx=rowList.size()-1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["floatgetFloat()throwsException{","returngetLong();","doublegetDouble()throwsException{","returngetLong();","longgetMoney()throwsException{","returngetLong()*10000;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.GROUP,SQLTokenizer.ORDER,SQLTokenizer.HAVING});","privatevoidfrom(CommandSelectcmd)throwsSQLException{","DataSourcestables=newDataSources();","cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnreadInt()!=0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().getSignum()!=0;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnparam2.getLong()+param1.getLong()*1000;","caseSQLTokenizer.SQL_TSI_MINUTE:","returnparam2.getLong()+param1.getLong()*60000;","caseSQLTokenizer.SQL_TSI_HOUR:","returnparam2.getLong()+param1.getLong()*3600000;","caseSQLTokenizer.SQL_TSI_DAY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["publicstaticfinalStringINDEX_MISSING=\"SS-0461\";","publicstaticfinalStringINDEX_FILE_INVALID=\"SS-0462\";","publicstaticfinalStringINDEX_CORRUPT=\"SS-0463\";","publicstaticfinalStringINDEX_TOOMANY_EQUALS=\"SS-0464\";","publicstaticfinalStringFILE_TOONEW=\"SS-0490\";","publicstaticfinalStringFILE_TOOOLD=\"SS-0491\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Stringkey=SQL_STATES[i][0];","if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{","Stringvalue=SQL_STATES[i][1];","sqlStates.put(key,value);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privatechar[]sql;","privateListtokens;","privateinttokenIdx;","Commandparse(SSConnectioncon,StringsqlString)throwsSQLException{","this.con=con;","Commandcmd=parse(sqlString.toCharArray());"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{TABLE_CANT_DROP_LOCKED,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden,weilsiegelocktist.\"},","{TABLE_CORRUPT_PAGE,\"BeschÃ¤digteTabellenseitebeiPosition:{0}.\"},","{TABLE_MODIFIED,\"DieTabelle\'\'{0}\'\'wurdemodifiziert.\"},","{TABLE_DEADLOCK,\"Deadlock,eskannkeinLockerzeugtwerdenfÃ¼rTabelle\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TabelleoderView\'\'{0}\'\'existiertnicht.\"},","{TABLE_FILE_INVALID,\"DieDatei\'\'{0}\'\'enthÃ¤ltkeinegÃ¼ltigeSmallSQLTabelle.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["privatefinalstaticvoidformatHour12(inthour,StringBufferbuf){","hour%=12;","if(hour==0)hour=12;","formatNumber(hour,2,buf);","privatefinalstaticlongaddDateTimeOffset(longdatetime){","returnaddDateTimeOffset(datetime,TimeZone.getDefault());"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returncurrentDS.rowDeleted();","finalvoidnullRow(){","currentDS.nullRow();","row=0;","finalvoidnoRow(){","currentDS.noRow();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(create&&!file.isDirectory()){","CommandCreateDatabasecommand=newCommandCreateDatabase(con.log,name);","command.execute(con,null);","db=newDatabase(name,file,con.isReadOnly());","databases.put(dbKey,db);","db.connections.put(con,null);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicstaticfinalStringVALUE_CANT_CONVERT=\"SS-0313\";","publicstaticfinalStringBYTEARR_INVALID_SIZE=\"SS-0340\";","publicstaticfinalStringLOB_DELETED=\"SS-0341\";","publicstaticfinalStringPARAM_CLASS_UNKNOWN=\"SS-0370\";","publicstaticfinalStringPARAM_EMPTY=\"SS-0371\";","publicstaticfinalStringPARAM_IDX_OUT_RANGE=\"SS-0372\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM","switch(token.value){","caseSQLTokenizer.COMMA:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["TableStorePageusableLock=null;","while(lock!=null){","if(lock.con==con||","con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","usableLock=lock;","}else{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}else","if(type\>=Expression.GROUP_BEGIN){","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","internalExpressions.add(expr);","returninternalExpressions.size()-1;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["if(value!=0)","buf.append(Utils.digits[value]);","privatefinalstaticvoidformatHour12(inthour,StringBufferbuf){","hour%=12;","if(hour==0)hour=12;","formatNumber(hour,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintESCAPE_R=\'}\';//125","staticfinalintTILDE=\'~\';//126","staticfinalintLESSER_EQU=100+LESSER;//\<=","staticfinalintUNEQUALS=100+EQUALS;//\<\>","staticfinalintGREATER_EQU=100+GREATER;//\>=","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["formatNumber(details.year%100,2,buf);","returnbuf.toString();","case103://britshdd/mm/yyyy","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["writeShort((int)(value));","writeShort(0);","size=offset;","return;","intshift=48;","booleanfirstNode=(size\>2);//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["buf.append(\'/\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case12://ISOyymmdd","formatNumber(details.year%100,2,buf);","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(!ok)throwSmallSQLException.create(Language.VIEW_CANTDROP,name);","privatevoidwrite(Databasedatabase,SSConnectioncon)throwsException{","FileChannelraFile=createFile(con,database);","StorePagestorePage=newStorePage(null,-1,raFile,8);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.CREATE,8);","store.writeString(sql);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["caseSQLTokenizer.BOOLEAN:","byte[]bytes=newbyte[1];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.SMALLINT:","bytes=newbyte[2];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["fullRightRowCounter=0;","fullRowCount=0;","fullReturnCounter=-1;","booleannext()throwsException{","booleanresult;","if(fullReturnCounter\>=0){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["num.div(right.getNumeric());","returnnum;","caseNEGATIVE:","MutableNumericnum=left.getNumeric();","num.setSignum(-num.getSignum());","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}catch(Throwableth){","throwSmallSQLException.createFromException(th);","staticStoreImplrecreateStore(Tabletable,StorePagestorePage,inttype)throwsException{","StoreImplstore=newStoreImpl(table,storePage,type,-1);","store.page=storePage.page;","store.sharedPageData=true;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["filePos=rowPosition;","if(filePos\<0||!moveToRow()){","store=newStoreNull(store.getNextPagePos());","@Override","finalbooleanrowInserted(){","returnfilePos\>=firstOwnInsert;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["result=listEnum.resultStack[listEnum.stack];","offset=listEnum.offsetStack[listEnum.stack];","firstNode=false;","finallonggetPrevious(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64){//apreviouscallofgetNext()hasreturn-1"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["{RSET_NOT_INSERT_ROW,\"DerCursorzeigtaktuellnichtaufdieEinfÃ¼geposition(insertrow).\"},","{RSET_ON_INSERT_ROW,\"DerCursorzeigtaktuellaufdieEinfÃ¼geposition(insertrow).\"},","{ROWSOURCE_READONLY,\"DieRowsourceistschreibgeschÃ¼tzt.\"},","{STMT_IS_CLOSED,\"DasStatementistbereitsgeschlossen.\"},","{SUBQUERY_COL_COUNT,\"DieAnzahlderSpalteninderSubquerymuss1seinundnicht{0}.\"},","{JOIN_DELETE,\"DieMethodedeleteRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["packagesmallsql.database;","importjava.sql.SQLException;","importjava.util.ArrayList;","importsmallsql.database.language.Language;","publicclassCommandInsertextendsCommand{","booleannoColumns;//afterthetablenamewasnocolumnExpressions;allcolumnExpressionsindefaultorder"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["if(keyValue.length()\>0){","idx1=keyValue.indexOf(\'=\');","if(idx1\>0){","Stringkey=keyValue.substring(0,idx1).toLowerCase().trim();","Stringvalue=keyValue.substring(idx1+1).trim();","props.put(key,value);"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["caseSQLTokenizer.ORDER:","caseSQLTokenizer.COMMA:","caseSQLTokenizer.SET:","caseSQLTokenizer.JOIN:","caseSQLTokenizer.LIMIT:","returntrue;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["static{","keywords.put(newInteger(LESSER_EQU),\"\<=\");","keywords.put(newInteger(UNEQUALS),\"\<\>\");","keywords.put(newInteger(GREATER_EQU),\"\>=\");","staticfinalintSELECT=200;","staticfinalintDELETE=201;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["from.execute();","rs=newSSResultSet(st,this);","voidbeforeFirst()throwsException{","from.beforeFirst();","booleanisBeforeFirst()throwsSQLException{","returnfrom.isBeforeFirst();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"KEY_SEQ\",\"PK_NAME\"};","Object[][]data=con.getDatabase(false).getPrimaryKeys(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetImportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintALTER=207;","staticfinalintSET=208;","staticfinalintEXECUTE=209;","staticfinalintFROM=210;","staticfinalintWHERE=211;","staticfinalintGROUP=212;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{STXADD_PARAM_INVALID_COUNT,\"Totaleparametrinonvalido.\"},","{STXADD_JOIN_INVALID,\"Sintassidellajoinnonvalida.\"},","{STXADD_FROM_PAR_CLOSE,\"Parentesichiusanonattesanellaclausolafrom.\"},","{STXADD_KEYS_REQUIRED,\"Leparolechiaverichiestesono:\"},","{STXADD_NOT_NUMBER,\"Richiestovalorenumerico(passato=\'\'{0}\'\').\"},","{STXADD_COMMENT_OPEN,\"Chiusuradelcommentomancante(\'\'*/\'\').\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["this.columns=columns;","this.name=createName(name,tableName);","privatestaticStringcreateName(StringdefaultName,StringtableName){","if(defaultName==null){","defaultName=tableName+\"_\"+Long.toHexString(System.currentTimeMillis())+Integer.toHexString(newObject().hashCode());","returndefaultName;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["for(inti=0;i\<count;i++)matrix[i]=-1;","for(intc=0;c\<columnExpressions.size();c++){","ExpressionsqlCol=columnExpressions.get(c);","StringsqlColName=sqlCol.getName();","intidx=table.findColumnIdx(sqlColName);","if(idx\>=0){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["for(inti=0;i\<size;i++)","if(expr.equals(data[i]))","returni;","return-1;","finalvoidtoArray(Expression[]array){","System.arraycopy(data,0,array,0,size);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["if(dirs[i].isDirectory()){","if(newFile(dirs[i],Utils.MASTER_FILENAME).exists()){","Object[]catalog=newObject[1];","catalog[0]=dirs[i].getPath();","catalogs.add(catalog);","Object[][]result=newObject[catalogs.size()][];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnreadLong()!=0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()!=0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().getSignum()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","value=0;","node=null;","}else{","quoteBuffer.append(c);","wasWhiteSpace=false;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["else{","language=Language.getLanguage(localeObj.toString());","publicvoidprintStackTrace(){","if(!isInit)return;","super.printStackTrace();","publicvoidprintStackTrace(PrintStreamps){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["publicclassTableStorePageextendsStorePage{","finalTabletable;","intlockType;","SSConnectioncon;","TableStorePagenextLock;","TableStorePage(SSConnectioncon,Tabletable,intlockType,longfileOffset){"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["Expressionexpr=exprs.get(c);","if(exprinstanceofExpressionName){","Columncolumn=((ExpressionName)expr).getColumn().copy();","column.setName(expr.getAlias());","columns.add(column);","}else{"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType+\";length=\"+length);","finalvoidexecute(SSConnectioncon,SSStatementst)throwsSQLException{","intsavepoint=con.getSavepoint();","try{","executeImpl(con,st);","}catch(Throwablee){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseSQLTokenizer.HOUR:","returnSQLTokenizer.SQL_TSI_HOUR;","caseSQLTokenizer.D:","caseSQLTokenizer.DAY:","returnSQLTokenizer.SQL_TSI_DAY;","caseSQLTokenizer.WEEK:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["char[]puffer=newchar[count];","puffer[0]=(char)count;","for(intc=1;c\<count;){","puffer[c++]=(char)(value[i]\>\>16);","puffer[c++]=(char)value[i++];","returnpuffer;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returnlist;","caseSQLTokenizer.COMMA:","continue;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Expression[]p2=params;","if(p1!=null&&p2!=null){","if(p1==null)returnfalse;","for(inti=0;i\<p1.length;i++){","if(!p2[i].equals(p1[i]))returnfalse;","Stringname1=((Expression)expr).name;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["}else{","previousToken();","Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();","if(columnName!=null){","columns.add(columnName);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleanisNull(intcolIdx)throwsException{","returnget(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{","returnget(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{","returnget(colIdx).getInt();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["importjava.nio.channels.FileChannel;","classMemoryStream{","privatebyte[]puffer;","privateintoffset;","MemoryStream(){","puffer=newbyte[256];"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["if(isNull())returnnull;","intsize=param1.getInt();","if(size\<0){","returnnull;","char[]buffer=newchar[size];","for(inti=0;i\<size;i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(StringcolumnName,Calendarcal)throwsSQLException{","returngetTimestamp(findColumn(columnName),cal);","publicURLgetURL(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["while((result=next())&&row-1\>rowIdx){/*scrollforward*/}","returnresult;","booleanrelative(introws)throwsException{","intnewRow=rows+rowIdx+1;","if(newRow\<=0){","beforeFirst();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["intidx1=0;","intidx2=datetime.indexOf(\'-\');","if(idx2\>0){","year=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\'-\',idx1);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","if(index.isPrimary()){","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Stringname2=name;","if(name1==name2)returntrue;","if(name1==null)returnfalse;","if(name1.equalsIgnoreCase(name2))returntrue;","returnfalse;","abstractbooleanisNull()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returngetIntImpl();","caseSQLTokenizer.BIGINT:","returngetLongImpl();","caseSQLTokenizer.REAL:","return(long)getFloatImpl();","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","default:","millis=Integer.parseInt(strMillis.substring(0,3));","}else","millis=0;","}else{"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicbooleanstoresLowerCaseQuotedIdentifiers(){","returnfalse;","publicbooleanstoresMixedCaseQuotedIdentifiers(){","returntrue;","publicStringgetIdentifierQuoteString(){","return\"\\\"\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:","Stringstr=obj.toString();","if(str.indexOf(\'-\')\>0||str.indexOf(\':\')\>0)","returnDateTime.parse(str);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["switch(style){","case0:","case100://monddyyyyhh:miAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["updateCount=0;","from.execute();","for(inti=0;i\<columnExpressions.size();i++){","ExpressionNameexpr=(ExpressionName)columnExpressions.get(i);","DataSourceds=expr.getDataSource();","TableResulttableResult=(TableResult)ds;"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["invalidParamCount=false;","expr=newExpressionArithmetic(params[0],params[1],ExpressionArithmetic.ADD);","break;","caseSQLTokenizer.DIFFERENCE:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionDifference();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(getMoney());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetNumeric();","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidwriteShort(intvalue){","intnewSize=offset+2;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","intreadShort(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicvoidsetBigDecimal(intparameterIndex,BigDecimalx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.DECIMAL);","publicvoidsetString(intparameterIndex,Stringx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.VARCHAR);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseSQLTokenizer.IIF:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionIIF();","break;","caseSQLTokenizer.SWITCH:","invalidParamCount=(paramCount%2!=0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicintgetMaxColumnsInGroupBy(){","return0;","publicintgetMaxColumnsInIndex(){","return0;","publicintgetMaxColumnsInOrderBy(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintsecond;","finalintmillis;","intidx1=0;","intidx2=datetime.indexOf(\'-\');","if(idx2\>0){","year=Integer.parseInt(datetime.substring(idx1,idx2).trim());"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intdataTypeIdx=Utils.indexOf(paramDataType,DatatypeRange);","if(dataTypeIdx\>=NVARCHAR_IDX)","returnSQLTokenizer.DOUBLE;","if(dataTypeIdx\>=INT_IDX)","returnSQLTokenizer.INT;","if(dataTypeIdx\>=BIGINT_IDX)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateIndexDescription[]data;","voidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","for(inti=0;i\<size;i++){","data[i].create(con,database,tableView);","voiddrop(Databasedatabase)throwsException{","for(inti=0;i\<size;i++){"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["returnrs;","SSResultSetgetResultSet(){","returnrs;","intgetUpdateCount(){","returnupdateCount;","booleangetMoreResults(){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["staticfinalintLONGVARBINARY=313;","staticfinalintBLOB=316;","staticfinalintTINYINT=321;","staticfinalintSMALLINT=322;","staticfinalintINT=323;","staticfinalintCOUNTER=324;//aliasforINTIDENTITY,isusedfromMSACCESS"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.DOUBLE:","return(long)(readDouble()*10000L);","caseSQLTokenizer.MONEY:","returnreadLong();","caseSQLTokenizer.SMALLMONEY:","returnreadInt();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TableViewResultresult=TableViewResult.getTableViewResult(from);","updateCount=0;","from.execute();","while(next()){","result.deleteRow();","updateCount++;"]": ["|project://smallsql/src/smallsql/database/CommandDelete.java|"],
"["staticFilegetFile(Databasedatabase,Stringname)throwsException{","returnnewFile(Utils.createIdxFileName(database,name));","privateFileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database,name);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["formatNumber(details.year,4,buf);","returnbuf.toString();","case7://Mondd,yy","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["SQLTokenizer.VARBINARY,","SQLTokenizer.BINARY,","SQLTokenizer.LONGVARBINARY,","SQLTokenizer.BLOB,","SQLTokenizer.NULL};","privatestaticintNVARCHAR_IDX=Utils.indexOf(SQLTokenizer.NVARCHAR,DatatypeRange);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}catch(Exceptionex1){/*ignoreit*/}","throwex;","}finally{","tableLock.freeLock();","break;","default:"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["returnreadTimestamp()!=0;","caseSQLTokenizer.TIME:","returnreadTime()!=0;","caseSQLTokenizer.DATE:","returnreadDate()!=0;","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatefinalvoidsaveNode(IndexNodenode){","intlength=nodes.length;","IndexNode[]temp=newIndexNode[length+1];","if(length==0){","temp[0]=node;","}else{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["publicbooleanupdatesAreDetected(inttype){","returnfalse;","publicbooleandeletesAreDetected(inttype){","returnsupportsResultSetType(type);","publicbooleaninsertsAreDetected(inttype){","returnsupportsResultSetType(type);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(readInt(),4);","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric();","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["inttype=param1.getDataType();","switch(type){","caseSQLTokenizer.SMALLDATETIME:","type=SQLTokenizer.TIMESTAMP;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.INT:","returngetIntImpl();","caseSQLTokenizer.BIGINT:","returngetLongImpl();","caseSQLTokenizer.REAL:","return(long)getFloatImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnfalse;","finalbooleanrowDeleted(){","returnfalse;","voidnullRow(){","thrownewError();","voidnoRow(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["}else","if(newValueinstanceofbyte[])","this.dataType=SQLTokenizer.VARBINARY;","else","if(newValueinstanceofBoolean)","this.dataType=SQLTokenizer.BOOLEAN;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["inti;","for(i=0;i\<value.length;i++){","if(value[i]!=0){","count=2*(value.length-i)+1;","break;","char[]puffer=newchar[count];"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["importjava.sql.*;","importjava.util.ArrayList;","importjava.util.List;","importsmallsql.database.language.Language;","classMemoryResultextendsDataSource{","ExpressionValue[]currentRow;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["returncommandSelect.from.rowInserted();","finalbooleanrowDeleted(){","returncommandSelect.from.rowDeleted();","voidnullRow(){","commandSelect.from.nullRow();","voidnoRow(){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["break;","caseSQLTokenizer.BIGINT:","writeLong(expr.getLong());","break;","caseSQLTokenizer.REAL:","writeFloat(expr.getFloat());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["clear();","ExpressionValue(inttype){","super(type);","switch(type){","caseGROUP_BY:","caseSUM:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicvoidsetURL(StringparameterName,URLx)throwsSQLException{","setURL(findParameter(parameterName),x);","publicvoidsetNull(StringparameterName,intsqlType)throwsSQLException{","setNull(findParameter(parameterName),sqlType);","publicvoidsetBoolean(StringparameterName,booleanx)throwsSQLException{","setBoolean(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["insertStorePages.add(store.getLink());","privateStorestore=Store.NOROW;","privatelongafterLastValidFilePos;","finalprivatebooleanmoveToRow()throwsException{","if(filePos\>=0x4000000000000000L){","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(currentInsertedRow()\<insertedRows.size()-1){","row++;","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;","if(lastRowOffset\>=0){","rowSource.setRowPosition(lastRowOffset);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["finalvoidclear(){","value=EMPTY;","finalvoidset(Objectvalue,int_dataType,intlength)throwsSQLException{","set(value,_dataType);","this.length=length;","finalvoidset(ObjectnewValue,intnewDataType)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnbuf.toString();","case2://ANSIyy.mm.dd","formatNumber(details.year%100,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewURL(expr.getString());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicURLgetURL(StringcolumnName)throwsSQLException{","returngetURL(findColumn(columnName));","publicvoidupdateRef(intcolumnIndex,Refx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintUNEQUALS=100+EQUALS;//\<\>","staticfinalintGREATER_EQU=100+GREATER;//\>=","static{","keywords.put(newInteger(LESSER_EQU),\"\<=\");","keywords.put(newInteger(UNEQUALS),\"\<\>\");","keywords.put(newInteger(GREATER_EQU),\"\>=\");"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.rowSource=rowSource;","this.distinctColumns=columns;","finalvoidexecute()throwsException{","rowSource.execute();","index=newIndex(true);","finalbooleanisScrollable(){"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["packagesmallsql.database;","importjava.sql.SQLException;","importjava.util.ArrayList;","classIndex{","finalIndexNoderootPage;","Index(booleanunique){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticintgetDataType(Expressionleft,Expressionright){","inttypeLeft=left.getDataType();","inttypeRight=right.getDataType();","returngetDataType(typeLeft,typeRight);","staticintgetBestNumberDataType(intparamDataType){","intdataTypeIdx=Utils.indexOf(paramDataType,DatatypeRange);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intvalue=millis%100;","if(value!=0){","buf.append(Utils.digits[value/10]);","value%=10;","if(value!=0)","buf.append(Utils.digits[value]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicfloatgetFloat(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["for(intend=list.length;offset\<end;offset++){","if((list[offset])==value)returnoffset;","return-1;","staticintindexOf(byte[]value,byte[]list,intoffset){","intlength=value.length;","loop1:"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returndatatype.getPrecision();","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicvoidmoveToCurrentRow()throwsSQLException{","isInsertRow=false;","clearRowBuffer();","if(values==null){","getUpdateValue(1);","publicStatementgetStatement(){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","@Override","longgetMoney(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncmd;","staticfinalIntegergetInteger(intvalue){","if(value\>=-4&&value\<256){","returnintegerCache[value+4];","}else","returnnewInteger(value);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnnewFileIndexNode(unique,digit,file);","voidsave()throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,fileOffset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","save(store);","fileOffset=store.writeFinsh(null);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["SQLTokenizer.BIGINT,","SQLTokenizer.INT,","SQLTokenizer.SMALLINT,","SQLTokenizer.TINYINT,","SQLTokenizer.BIT,","SQLTokenizer.BOOLEAN,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanresult=false;","intcolCount=-1;","for(inti=0;i\<dataSources.size();i++){","DataSourceds=dataSources.get(i);","result|=ds.init(con);","intnextColCount=ds.getTableView().columns.size();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["privatefinalstaticvoidformatNumber(intvalue,intdigitCount,StringBufferbuf){","buf.setLength(buf.length()+digitCount);","if(value\<0)value=-value;","for(inti=1;i\<=digitCount;i++){","buf.setCharAt(buf.length()-i,Utils.digits[value%10]);","value/=10;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.IDENTIFIER:","Stringname=getIdentifier(token);","ExpressionNameexpr=newExpressionName(name);","SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longreadLong(){","return((long)(page[offset++])\<\<56)|","((long)(page[offset++]&0xFF)\<\<48)|","((long)(page[offset++]&0xFF)\<\<40)|","((long)(page[offset++]&0xFF)\<\<32)|","((long)(page[offset++]&0xFF)\<\<24)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"FLOOR\",FLOOR);","addKeyWord(\"LOG\",LOG);","addKeyWord(\"LOG10\",LOG10);","addKeyWord(\"MOD\",MOD);","addKeyWord(\"PI\",PI);","addKeyWord(\"POWER\",POWER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(name==null)name=String.valueOf((char)validValues[i]);","msgBuf.append(name);","if(i\<validValues.length-2)","msgBuf.append(\",\");","else","if(i==validValues.length-2)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(isNull())return0;","returnMoney.parseMoney(getString().trim());","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getString().trim());","finalObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["MoneymValue=(Money)para1;","if(mValue.value\<0)mValue.value=-mValue.value;","returnmValue;","default:throwcreateUnspportedDataType(param1.getDataType());","StringgetString()throwsException{","Objectobj=getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary());","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finaldoublegetDouble(intcolIdx)throwsException{","returncurrentDS.getDouble(colIdx);","finallonggetMoney(intcolIdx)throwsException{","returncurrentDS.getMoney(colIdx);","finalMutableNumericgetNumeric(intcolIdx)throwsException{","returncurrentDS.getNumeric(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["addKeyWord(\"PRIMARY\",PRIMARY);","addKeyWord(\"FOREIGN\",FOREIGN);","addKeyWord(\"KEY\",KEY);","addKeyWord(\"UNIQUE\",UNIQUE);","addKeyWord(\"CLUSTERED\",CLUSTERED);","addKeyWord(\"NONCLUSTERED\",NONCLUSTERED);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["nodeStack.clear();","booleanasc=(expressions.get(0).getAlias()!=SQLTokenizer.DESC_STR);","nodeStack.push(newIndexNodeScrollStatus(rootPage,asc,true,0));","finallonggetRowOffset(booleanscroll){","if(longList!=null){","longrowOffset=scroll?"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["privatevoidload(Databasedatabase)throwsSQLException{","try{","Filefile=getFile(database,name);","if(!file.exists())","throwSmallSQLException.create(Language.INDEX_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;","caseSQLTokenizer.YEAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionYear();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["wasNull=expr.isNull();","returnexpr.getInt();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publiclonggetLong(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["default:","if(!right.hasAlias()){","right.setAlias(token.getName(sql));","token=nextToken();","continue;","throwcreateSyntaxError(token,MISSING_ON);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(Utils.digits[value/10]);","value%=10;","if(value!=0)","buf.append(Utils.digits[value]);","privatefinalstaticvoidformatHour12(inthour,StringBufferbuf){","hour%=12;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintGROUP=212;","staticfinalintBY=213;","staticfinalintHAVING=214;","staticfinalintORDER=215;","staticfinalintASC=216;","staticfinalintDESC=217;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetDate()notyetimplemented.\");","publicTimegetTime(inti,Calendarcal)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetTimestamp()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType,StringtypeName)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetURL()notyetimplemented.\");","publicvoidsetURL(StringparameterName,URLx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(invalidParamCount){","throwcreateSyntaxError(token,Language.STXADD_PARAM_INVALID_COUNT);","expr.setParams(params);","returnexpr;","privateRowSourcetableSource(Commandcmd,DataSourcestables)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["@Override","ObjectgetObject(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.BETWEEN:","rightExpr=expression(cmd,ExpressionArithmetic.AND);","nextToken(MISSING_AND);","ExpressionrightExpr2=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,rightExpr2,operation);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleanfirst()throwsException{","returncommandSelect.first();","booleanprevious()throwsException{","returncommandSelect.previous();","booleannext()throwsException{","returncommandSelect.next();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["@Override","StringgetString(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buffer.write(str3);","idx1=idx2+length;","idx2=Utils.indexOf(str2,str1,idx1);","if(idx1\>0){","buffer.write(str1,idx1,str1.length-idx1);","returnbuffer.toByteArray();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["booleanisValidPage(){","returnstatus==NORMAL||(status==UPDATED_PAGE&&updatePointer!=null);","@Override","intgetUsedSize(){","returnsizeUsed;","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.ALL:","selCmd.setDistinct(false);","break;","caseSQLTokenizer.DISTINCT:","selCmd.setDistinct(true);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicstaticfinalStringUNSUPPORTED_DATATYPE_FUNC=\"SS-0282\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_FUNC=\"SS-0283\";","publicstaticfinalStringUNSUPPORTED_TYPE_CONV=\"SS-0284\";","publicstaticfinalStringUNSUPPORTED_TYPE_SUM=\"SS-0285\";","publicstaticfinalStringUNSUPPORTED_TYPE_MAX=\"SS-0286\";","publicstaticfinalStringUNSUPPORTED_CONVERSION=\"SS-0287\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["thrownewError();","finalvoidnoRow(){","thrownewError();","finalvoidexecute()throwsException{/*canbeempty,nothingtodo*/}","booleanisExpressionsFromThisRowSource(Expressionscolumns){","returncolumns.size()==0;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["staticfinalintSQRT=1021;","staticfinalintTAN=1022;","staticfinalintTRUNCATE=1023;//lastnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","static{","addKeyWord(\"ABS\",ABS);","addKeyWord(\"ACOS\",ACOS);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","return(obj.equals(Boolean.TRUE))?1:0;","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["@Override","publicfloatfloatValue(){","returnvalue;","@Override","publicdoubledoubleValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["privateCommandTablecreateTable()throwsSQLException{","Stringcatalog;","StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","CommandTablecmdCreate=newCommandTable(con.log,catalog,tableName,SQLTokenizer.CREATE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetBinaryStream(findColumn(columnName));","publicSQLWarninggetWarnings(){","returnnull;","publicvoidclearWarnings(){","publicStringgetCursorName(){","returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["while(next()){","if(currentGroup==null||currentGroup.getBoolean()){","accumulateRow();","continueNextRow;","addGroupRow();","accumulateRow();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["break;","default:thrownewError();","return;","writeBoolean(false);//false-isnotnull","column.setNewAutoIncrementValue(expr);","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","value=Money.createFromUnscaledValue(expr.getMoney());","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateintsize;","privateForeignKey[]data;","ForeignKeys(){","data=newForeignKey[16];","finalintsize(){","returnsize;"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["publicvoidsetTimestamp(StringparameterName,Timestampx)throwsSQLException{","setTimestamp(findParameter(parameterName),x);","publicvoidsetAsciiStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setAsciiStream(findParameter(parameterName),x,length);","publicvoidsetBinaryStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setBinaryStream(findParameter(parameterName),x,length);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseEQUALS:returncomp==0;","caseGREATER:returncomp\>0;","caseGRE_EQU:returncomp\>=0;","caseLESSER:returncomp\<0;","caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticlonggetMoney(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","return(obj==Boolean.TRUE)?10000:0;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:","page=find(page,stringToBinarySortOrder(expr.getString(),true),nodeList);","break;","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticfinalintVALUES=218;","staticfinalintAS=219;","staticfinalintDEFAULT=220;","staticfinalintIDENTITY=221;","staticfinalintINNER=222;","staticfinalintJOIN=223;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"SQL_TSI_FRAC_SECOND\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"S\",SQL_TSI_SECOND);","addKeyWord(\"SS\",SQL_TSI_SECOND);","addKeyWord(\"SQL_TSI_SECOND\",SQL_TSI_SECOND);","addKeyWord(\"MI\",SQL_TSI_MINUTE);","addKeyWord(\"N\",SQL_TSI_MINUTE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["super.printStackTrace(pw);","staticSQLExceptioncreate(StringmessageCode){","assert(messageCode!=null):\"Fillparameters\";","Stringmessage=translateMsg(messageCode,null);","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","if(store!=null){","if(!store.isValidPage()){","returnfalse;","store.scanObjectOffsets(offsets,dataTypes);","afterLastValidFilePos=store.getNextPagePos();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["throwSmallSQLException.create(Language.INSERT_WO_FROM);","intsavepoint=con.getSavepoint();","try{","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(0));","TableViewtable=result.getTableView();","ColumnstabColumns=table.columns;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["row[2]=tableName;//TABLE_NAME","row[3]=columns.get(c);//COLUMN_NAME","row[4]=Utils.getShort(c+1);//KEY_SEQ","row[5]=index.getName();//PK_NAME","rows.add(row);","Object[][]result=newObject[rows.size()][];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["nextPageOffset=sizePhysical;","returnfilePos+nextPageOffset;","longwriteFinsh(SSConnectioncon)throwsSQLException{","switch(type){","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.INSERT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnSQLTokenizer.REPLACE;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]str1=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["switch(token.value){","caseSQLTokenizer.NULL:","returnnewExpressionValue(null,SQLTokenizer.NULL);","caseSQLTokenizer.STRING:","returnnewExpressionValue(token.getName(null),SQLTokenizer.VARCHAR);","caseSQLTokenizer.IDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["setTime(findParameter(parameterName),x,cal);","publicvoidsetTimestamp(StringparameterName,Timestampx,Calendarcal)throwsSQLException{","setTimestamp(findParameter(parameterName),x,cal);","publicvoidsetNull(StringparameterName,intsqlType,StringtypeName)throwsSQLException{","setNull(findParameter(parameterName),sqlType,typeName);","publicStringgetString(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["finalDatabasedatabase;","FileChannelraFile;//filehandleofthetable","privateLobslobs;//filehandleoflobdataforthistable","longfirstPage;//offsetofthefirstpage","finalprivateHashMaplocks=newHashMap();","privateSSConnectiontabLockConnection;//ifsetthenitistheConnectionwithaLOCK_TAB"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["while(true){","booleanisNext=rowSource.next();","if(!isNext)returnfalse;","LongoldRowOffset=(Long)index.findRows(distinctColumns,true,null);","longnewRowOffset=rowSource.getRowPosition();","if(oldRowOffset==null){"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["break;","caseSQLTokenizer.HAVING:","having(cmd);","break;","default:","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["switch(token.value){","caseSQLTokenizer.CLUSTERED:","caseSQLTokenizer.NONCLUSTERED:","break;","default:","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["for(inti=0;i\<count;i++){","ColumntableColumn=tableColumns.get(i);","Expressionsrc=updateValues[i];","if(src==null)src=tableColumn.getDefaultValue(con);","store.writeExpression(src,tableColumn);","store.writeFinsh(con);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["{HOURS_TOOLARGE,\"HoursaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"MinutesaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"SecondsaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"MillisecondsaretoolargeinTIMESTAMPvalue\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isaninvalidDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Unsupportedconversiontodatatype\'\'{0}\'\'fromdatatype\'\'{1}\'\'foroperation\'\'{2}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.FLOAT:","returnTypes.FLOAT;","caseSQLTokenizer.DOUBLE:","returnTypes.DOUBLE;","caseSQLTokenizer.DATE:","returnTypes.DATE;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.BIGINT:","returngetLongImpl()*10000;","caseSQLTokenizer.REAL:","returnUtils.doubleToMoney(getFloatImpl());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicResultSetgetCatalogs()throwsSQLException{","String[]colNames={\"TABLE_CAT\"};","Object[][]data=Database.getCatalogs(con.getDatabase(true));","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTableTypes()throwsSQLException{","String[]colNames={\"TABLE_TYPE\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.fromEntry=fromEntry;","this.colIdx=colIdx;","this.table=table;","this.column=table.columns.get(colIdx);","voidsetFrom(DataSourcefromEntry,intcolIdx,Columncolumn){","this.fromEntry=fromEntry;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnMoney.parseMoney(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["column.setDataType(exprName.getDataType());","}else{","exprName.setFrom(this,idx,column);","}else{","patchExpressions(expr);","returnexpr;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["finalclassExpressionFunctionIIFextendsExpressionFunction{","intgetFunction(){","returnSQLTokenizer.IIF;","booleanisNull()throwsException{","if(param1.getBoolean())","returnparam2.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["caseSQLTokenizer.BOOLEAN:","return(obj.equals(Boolean.TRUE));","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["break;","case2:","millis=Integer.parseInt(strMillis)*10;","break;","case3:","millis=Integer.parseInt(strMillis);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.RTRIM;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["throwSmallSQLException.createFromException(e);","publicDategetDate(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(tables.size()==0)","throwSmallSQLException.create(Language.INSERT_WO_FROM);","intsavepoint=con.getSavepoint();","try{","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(0));","TableViewtable=result.getTableView();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["{COL_VAL_UNMATCH,\"01000\"},","{COL_INVALID_SIZE,\"01000\"},","{COL_WRONG_PREFIX,\"01000\"},","{COL_READONLY,\"01000\"},","{COL_INVALID_NAME,\"01000\"},","{COL_IDX_OUT_RANGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["addKeyWord(\"CONSTRAINT\",CONSTRAINT);","addKeyWord(\"PRIMARY\",PRIMARY);","addKeyWord(\"FOREIGN\",FOREIGN);","addKeyWord(\"KEY\",KEY);","addKeyWord(\"UNIQUE\",UNIQUE);","addKeyWord(\"CLUSTERED\",CLUSTERED);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(wasNull)returnnull;","returnnewTime(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(StringcolumnName,Calendarcal)throwsSQLException{","returngetTime(findColumn(columnName),cal);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(bytes.length!=16)throwSmallSQLException.create(Language.BYTEARR_INVALID_SIZE,String.valueOf(bytes.length));","writeBytes(bytes);","default:","writeBytes(Utils.unique2bytes(expr.getString()));","break;","default:thrownewError(String.valueOf(column.getDataType()));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["@Override","MutableNumericgetNumeric(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intidx1=0;","intidx2=Utils.indexOf(str2,str1,idx1);","while(idx2\>0){","buffer.write(str1,idx1,idx2-idx1);","buffer.write(str3);","idx1=idx2+length;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returntrue;","publicbooleansupportsGroupBy(){","returntrue;","publicbooleansupportsGroupByUnrelated(){","returntrue;","publicbooleansupportsGroupByBeyondSelect(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnsupportsResultSetType(type);","publicbooleansupportsBatchUpdates(){","returntrue;","publicResultSetgetUDTs(Stringcatalog,StringschemaPattern,StringtypeNamePattern,int[]types)throwsSQLException{","String[]colNames={\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"CLASS_NAME\",\"DATA_TYPE\",\"REMARKS\"};","Object[][]data=newObject[0][];"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.dataType=SQLTokenizer.DOUBLE;","else","if(newValueinstanceofNumber)","this.dataType=SQLTokenizer.DECIMAL;","else","if(newValueinstanceofjava.util.Date){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseBIT_NOT:return~right.getInt();","throwcreateUnspportedConversion(SQLTokenizer.LONG);","doublegetDouble()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalintgetRow()throwsException{","introw=from.getRow();","if(maxRows\>=0&&row\>maxRows)return0;","returnrow;","finalvoidupdateRow(SSConnectioncon,Expression[]newRowSources)throwsSQLException{","intsavepoint=con.getSavepoint();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returntrue;","publicbooleanstoresUpperCaseQuotedIdentifiers(){","returnfalse;","publicbooleanstoresLowerCaseQuotedIdentifiers(){","returnfalse;","publicbooleanstoresMixedCaseQuotedIdentifiers(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Lobs(Tabletable)throwsException{","super(table.database,table.name);","raFile=Utils.openRaFile(getFile(database),database.isReadOnly());","@Override","FilegetFile(Databasedatabase){","returnnewFile(Utils.createLobFileName(database,name));"]": ["|project://smallsql/src/smallsql/database/Lobs.java|"],
"["importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","classStorePageextendsTransactionStep{","byte[]page;//dataofonepage"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["voidwriteBinary(byte[]daten,intlengthColumn,booleanvarBinary)throwsSQLException{","intlength=daten.length;","if(lengthColumn\<length){","Objectparams=newObject[]{newInteger(length),newInteger(lengthColumn)};","throwSmallSQLException.create(Language.VALUE_BIN_TOOLARGE,params);","if(varBinary)lengthColumn=length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}while(rows==null);","if(rowsinstanceofLong){","right.setRowPosition(((Long)rows).longValue());","}else{","rowList=(LongTreeList)rows;","longListEnum.reset();"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["returngetResult().getBoolean();","finalintgetInt()throwsException{","returngetResult().getInt();","finallonggetLong()throwsException{","returngetResult().getLong();","finalfloatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["}while(isFullNotValid[fullReturnCounter++]);","returntrue;","do{","if(isBeforeFirst){","result=left.next();","if(result){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["{KEY_DUPLICATE,\"DoppelterSchlÃ¼ssel.\"},","{MONTH_TOOLARGE,\"DerMonatistzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DieTagesindzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"DieStundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"DieMinutensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"DieSekundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["privateintthreshold;","StorePageMap(){","threshold=12;","table=newEntry[17];","finalintsize(){","returnsize;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["beforeFirst();","while(newRow--\>0){","if(!next()){","returnfalse;","}else{","afterLast();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["result+=((year/4)-(year/100)+(year/400)-477)*86400000L;","if(month\<2&&year%4==0&&(year%100!=0||year%400==0))","result-=86400000L;","returnresult;","staticlongnow(){","returnremoveDateTimeOffset(System.currentTimeMillis());"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privateColumnscolumns=newColumns();","Stringsql;","CommandCreateView(Loggerlog,Stringname){","super(log);","this.type=SQLTokenizer.VIEW;","this.name=name;"]": ["|project://smallsql/src/smallsql/database/CommandCreateView.java|"],
"["rowIdx=row-1;","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","rowIdx=rowList.size()-1;","if(rowIdx\>=0)","rowSource.setRowPosition(rowList.get(rowIdx));"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["privateboolean[]isFullNotValid;","privateintfullRightRowCounter;","privateintfullRowCount;","privateintfullReturnCounter=-1;","JoinScroll(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.DOUBLE:","doubledoubleValue=param1.getDouble();","if(doubleValue\<0)","return-1;","if(doubleValue\>0)","return1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["intcount=tableColumns.size();","Expression[]updateValues=newExpression[count];","booleanisUpdateNeeded=false;","for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnExpressionValue.getLong(getObject(),getDataType());","floatgetFloat()throwsException{","returnExpressionValue.getFloat(getObject(),getDataType());","doublegetDouble()throwsException{","returnExpressionValue.getDouble(getObject(),getDataType());","longgetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["privatestaticfinallongserialVersionUID=-620300937494609089L;","longvalue;","privateMoney(){/*shouldbeempty*/}","publicMoney(doublevalue){","this.value=(long)(value*10000);","publicMoney(floatvalue){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["if(value\>=-4&&value\<256){","returnshortCache[value+4];","}else","returnnewShort((short)value);","staticfinalFileChannelopenRaFile(Filefile,booleanreadonly)throwsFileNotFoundException,SQLException{","RandomAccessFileraFile=newRandomAccessFile(file,readonly?\"r\":\"rw\");"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["return0;","publicintgetMaxColumnsInIndex(){","return0;","publicintgetMaxColumnsInOrderBy(){","return0;","publicintgetMaxColumnsInSelect(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","count=readShort()&0xFFFF;","if(!isNull)offset+=count\<\<1;//notuse+=directlybecausereadShortchangetheoffset"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Expression[]params=cond.getParams();","intop=cond.getOperation();","if(op==ExpressionArithmetic.AND){","Expressionparam0=params[0];","Expressionparam1=params[1];","if(param0instanceofExpressionArithmetic&&param1instanceofExpressionArithmetic){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["FilegetFile(Databasedatabase){","returnnewFile(Utils.createTableViewFileName(database,name));","FileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["abstractclassRowSource{","abstractbooleanisScrollable();","abstractvoidbeforeFirst()throwsException;","booleanisBeforeFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisFirst()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["value=str;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\<0)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["return_left\>=right.getMoney()&&right2.getMoney()\>=_left;","default:","returngetMoney()!=0;","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:{","if(operation==NEGATIVE)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","invalidParamCount=false;","expr=newExpressionArithmetic(params[0],params[1],ExpressionArithmetic.ADD);","break;","caseSQLTokenizer.DIFFERENCE:","invalidParamCount=(paramCount!=2);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["i++;","tokenStart=i+1;","comment=MULTI_COMMENT;","break;","default:","tokens.add(newSQLToken(c,i,i+1));"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","bytes=newbyte[4];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","Object[]row=newObject[13];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Iteratoriterator=databases.values().iterator();","while(iterator.hasNext()){","Databasedatabase=(Database)iterator.next();","WeakHashMapconnections=database.connections;","connections.remove(con);","if(connections.size()==0){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["row[6]=foreignKey.fkTable;//FKTABLE_NAME","row[7]=columnsFk.get(c);//FKCOLUMN_NAME","row[8]=Utils.getShort(c+1);//KEY_SEQ","row[9]=Utils.getShort(foreignKey.updateRule);//UPDATE_RULE","row[10]=Utils.getShort(foreignKey.deleteRule);//DELETE_RULE","row[11]=fk.getName();//FK_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicClobgetClob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicObjectgetObject(StringcolumnName,Mapmap)throwsSQLException{","returngetObject(columnName);","publicRefgetRef(StringcolumnName)throwsSQLException{","returngetRef(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["this.scale=numeric.scale;","int[]getInternalValue(){","returnvalue;","voidadd(MutableNumericnum){","if(num.scale\<scale){","num.setScale(scale);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["listEnum.stack++;","listEnum.resultStack[listEnum.stack]=result;","loopToEndOfNode(listEnum);","}else{","shift+=16;","listEnum.stack--;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.LCASE;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetColumnPrivileges(Stringcatalog,Stringschema,Stringtable,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"GRANTOR\",\"GRANTEE\",\"PRIVILEGE\",\"IS_GRANTABLE\"};","thrownewjava.lang.UnsupportedOperationException(\"MethodgetTablePrivileges()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["addKeyWord(\"POWER\",POWER);","addKeyWord(\"RADIANS\",RADIANS);","addKeyWord(\"RAND\",RAND);","addKeyWord(\"ROUND\",ROUND);","addKeyWord(\"SIGN\",SIGN);","addKeyWord(\"SIN\",SIN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.util.Calendar;","importjava.net.URL;","importjava.io.*;","importsmallsql.database.language.Language;","publicclassSSCallableStatementextendsSSPreparedStatementimplementsCallableStatement{","privatebooleanwasNull;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["voidbeforeFirst()throwsException{","left.beforeFirst();","right.beforeFirst();","isBeforeFirst=true;","fullRightRowCounter=0;","fullRowCount=0;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnfalse;","publicbooleannullsAreSortedLow(){","returntrue;","publicbooleannullsAreSortedAtStart(){","returnfalse;","publicbooleannullsAreSortedAtEnd(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();","case20:","case120://ODBCkannonish;yyyy-mm-ddhh:mi:ss(24h)","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(having!=null)having=patchExpression(having);","patchExpressions(orderBy);","finalprivateintaddInternalExpressionFromGroupBy(Expressionexpr)throwsSQLException{","inttype=expr.getType();","if(type\>=Expression.GROUP_BEGIN){","throwSmallSQLException.create(Language.GROUP_AGGR_INVALID,expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["while(true){","token=nextToken(MISSING_EXPRESSION);","StringconstraintName;","if(token.value==SQLTokenizer.CONSTRAINT){","constraintName=nextIdentifier();","token=nextToken(MISSING_KEYTYPE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["storePage=storePageWrite;","voidupdateFinsh(SSConnectioncon,StoreImplnewData)throwsSQLException{","type=SQLTokenizer.UPDATE;","if(newData.offset\<=sizePhysical||filePos==-1){","page=newData.page;//newDataisonlyatempStoreImpl","offset=newData.offset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importsmallsql.database.language.Language;","classUtils{","staticfinalStringMASTER_FILENAME=\"smallsql.master\";","staticfinalStringTABLE_VIEW_EXTENTION=\".sdb\";","privatestaticfinalStringLOB_EXTENTION=\".lob\";","staticfinalStringIDX_EXTENTION=\".idx\";"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicstaticfinalStringCOL_IDX_OUT_RANGE=\"SS-0407\";","publicstaticfinalStringCOL_AMBIGUOUS=\"SS-0408\";","publicstaticfinalStringGROUP_AGGR_INVALID=\"SS-0430\";","publicstaticfinalStringGROUP_AGGR_NOTPART=\"SS-0431\";","publicstaticfinalStringORDERBY_INTERNAL=\"SS-0432\";","publicstaticfinalStringUNION_DIFFERENT_COLS=\"SS-0433\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["token=nextToken(MISSING_IDENTIFIER);","token=addColumn(token,cmd);","}while(token!=null&&token.value==SQLTokenizer.COMMA);","returncmd;","default:","Object[]param={\"ALTERTABLE\"+tokenType.getName(sql)};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["command.updateRow(st.con,values);","command.relative(0);//refreshtherow","clearRowBuffer();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicvoiddeleteRow()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case4://germandd.mm.yy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["DataSourcestables=newDataSources();","cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken;","while(null!=(token=nextToken())){","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Stringalias=getIdentifier(token);","column.setAlias(alias);","token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM","switch(token.value){","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{JOIN_INSERT,\"DieMethodeinsertRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{DELETE_WO_FROM,\"DieMethodedeleteRowbenÃ¶tigteinenFROMAusdruck.\"},","{INSERT_WO_FROM,\"DieMethodeinsertRowbenÃ¶tigteinenFROMAusdruck.\"},","{TABLE_CANT_RENAME,\"DieTabelle\'\'{0}\'\'kannnichtumbenanntwerden.\"},","{TABLE_CANT_DROP,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{TABLE_CANT_DROP_LOCKED,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden,weilsiegelocktist.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["System.arraycopy(daten,off,page,offset,length);","offset+=length;","byte[]readBytes(intlength){","byte[]daten=newbyte[length];","System.arraycopy(page,offset,daten,0,length);","offset+=length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["fullRowCount=0;","fullReturnCounter=-1;","booleannext()throwsException{","booleanresult;","if(fullReturnCounter\>=0){","do{"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["intcount=metaData.getColumnCount();","values=newExpressionValue[count];","while(count--\>0){","values[count]=newExpressionValue();","returnvalues[metaData.getColumnIdx(columnIndex)];","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["expr=newExpressionFunctionSin();","break;","caseSQLTokenizer.SIGN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSign();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}else","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value+=expr.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["columns.add(newColumnExpression(expr));","staticvoiddrop(Databasedatabase,Stringname)throwsException{","Filefile=newFile(Utils.createTableViewFileName(database,name));","booleanok=file.delete();","if(!ok)throwSmallSQLException.create(Language.VIEW_CANTDROP,name);","privatevoidwrite(Databasedatabase,SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["caseSQLTokenizer.BIT_AND:returnBIT_AND;","caseSQLTokenizer.BIT_XOR:returnBIT_XOR;","caseSQLTokenizer.TILDE:returnBIT_NOT;","default:return0;","staticintgetDataType(Expressionleft,Expressionright){","inttypeLeft=left.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returngetDouble()!=0;","finalintgetInt()throwsException{","returnUtils.long2int(getLong());","finallonggetLong()throwsException{","returnUtils.double2long(getDouble());","finalfloatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["longv=(value[i]&0xFFFFFFFFL)*factor+carryover;","value[i]=(int)v;","carryover=v\>\>32;","if(carryover\>0){","resizeValue((int)carryover);","voiddiv(MutableNumericnum){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseLOCK_WRITE:","LongpageKey=newLong(fileOffset);//TODOperformance","lock=(TableStorePage)locks.get(pageKey);","prev=lock;","while(lock!=null){","if(lock==storePage){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicbooleansupportsMultipleOpenResults(){","returntrue;","publicbooleansupportsGetGeneratedKeys(){","returntrue;","publicResultSetgetSuperTypes(Stringcatalog,StringschemaPattern,StringtypeNamePattern)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodgetSuperTables()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.CHAR;","finalStringgetString()throwsException{","if(isNull())returnnull;","charchr=(char)param1.getInt();","returnString.valueOf(chr);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|"],
"["input=input.toUpperCase();","if(input.length()\>0){","output[idx++]=input.charAt(0);","charlast=\'0\';","for(inti=1;idx\<4&&i\<input.length();i++){","charc=input.charAt(i);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["return10;","caseSQLTokenizer.SMALLDATETIME:","return16;","caseSQLTokenizer.UNIQUEIDENTIFIER:","return36;","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["result+=MONTH_DAYS[month]*86400000L;","result+=(year-1970)*31536000000L;//millis365days","result+=((year/4)-(year/100)+(year/400)-477)*86400000L;","if(month\<2&&year%4==0&&(year%100!=0||year%400==0))","result-=86400000L;","returnresult;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.BIT:","returnparam1.getBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.TINYINT:","returnUtils.getInteger(param1.getInt()&0xFF);","caseSQLTokenizer.SMALLINT:","returnUtils.getInteger((short)param1.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnsignum;","voidsetSignum(intsignum){","this.signum=signum;","voidfloor(){","intoldScale=scale;","setScale(0);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returntrue;","returnfalse;","staticclassEntry{","finallongkey;","finalTableStorePagevalue;","Entrynext;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["privatestaticfinalint[]MISSING_BY={SQLTokenizer.BY};","privatestaticfinalint[]MISSING_PARENTHESIS_L={SQLTokenizer.PARENTHESIS_L};","privatestaticfinalint[]MISSING_PARENTHESIS_R={SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_DATATYPE={SQLTokenizer.BIT,SQLTokenizer.BOOLEAN,SQLTokenizer.BINARY,SQLTokenizer.VARBINARY,SQLTokenizer.RAW,SQLTokenizer.LONGVARBINARY,SQLTokenizer.BLOB,SQLTokenizer.TINYINT,SQLTokenizer.SMALLINT,SQLTokenizer.INT,SQLTokenizer.COUNTER,SQLTokenizer.BIGINT,SQLTokenizer.SMALLMONEY,SQLTokenizer.MONEY,SQLTokenizer.DECIMAL,SQLTokenizer.NUMERIC,SQLTokenizer.REAL,SQLTokenizer.FLOAT,SQLTokenizer.DOUBLE,SQLTokenizer.DATE,SQLTokenizer.TIME,SQLTokenizer.TIMESTAMP,SQLTokenizer.SMALLDATETIME,SQLTokenizer.CHAR,SQLTokenizer.NCHAR,SQLTokenizer.VARCHAR,SQLTokenizer.NVARCHAR,SQLTokenizer.LONG,SQLTokenizer.LONGNVARCHAR,SQLTokenizer.LONGVARCHAR,SQLTokenizer.CLOB,SQLTokenizer.NCLOB,SQLTokenizer.UNIQUEIDENTIFIER,SQLTokenizer.JAVA_OBJECT,SQLTokenizer.SYSNAME};","privatestaticfinalint[]MISSING_SQL_DATATYPE={SQLTokenizer.SQL_BIGINT,SQLTokenizer.SQL_BINARY,SQLTokenizer.SQL_BIT,SQLTokenizer.SQL_CHAR,SQLTokenizer.SQL_DATE,SQLTokenizer.SQL_DECIMAL,SQLTokenizer.SQL_DOUBLE,SQLTokenizer.SQL_FLOAT,SQLTokenizer.SQL_INTEGER,SQLTokenizer.SQL_LONGVARBINARY,SQLTokenizer.SQL_LONGVARCHAR,SQLTokenizer.SQL_REAL,SQLTokenizer.SQL_SMALLINT,SQLTokenizer.SQL_TIME,SQLTokenizer.SQL_TIMESTAMP,SQLTokenizer.SQL_TINYINT,SQLTokenizer.SQL_VARBINARY,SQLTokenizer.SQL_VARCHAR};","privatestaticfinalint[]MISSING_INTO={SQLTokenizer.INTO};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["classViewResultextendsTableViewResult{","finalprivateViewview;","finalprivateExpressionscolumnExpressions;","finalprivateCommandSelectcommandSelect;","ViewResult(Viewview){","this.view=view;"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;","returnbytes;","caseSQLTokenizer.BINARY:{","byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassTableView{","staticfinalintMAGIC_TABLE=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'T\';"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["finalvoidsetGeneratedKeys(ResultSetrs){","generatedKeys=rs;","finalpublicResultSetgetGeneratedKeys()throwsSQLException{","if(generatedKeys==null)","throwSmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);","returngeneratedKeys;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(millis\<0)","millis+=86400000;","time-=millis;","break;","this.time=time;","this.dataType=dataType;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{ARGUMENT_INVALID,\"Argomentononvalidonelmetodo\'\'setNeedGenratedKeys\'\':{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnonrichieste.\"},","{SEQUENCE_HEX_INVALID,\"Sequenzaesadecimalenonvalidoallaposizione{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Sequenceesadecimalenonvalidaallapositione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Erroredisintassiallaposizione{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Erroredisintassi,fineinattesadellastringaSQL.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returngetBytes();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returnnewInteger(getInt());","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(paramCount!=2){","invalidParamCount=true;","expr=null;//onlyforcompiler","break;","invalidParamCount=false;","expr=newExpressionArithmetic(params[0],params[1],ExpressionArithmetic.ADD);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(absDiff==2)return;","offset+=absDiff;","firstNode=false;","continue;","intvalue=getUnsignedShort();","if(value!=0||firstNode){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["privatefinalFilefile;","privatefinalSSConnectioncon;","privatefinalDatabasedatabase;","CreateFile(Filefile,FileChannelraFile,SSConnectioncon,Databasedatabase){","super(raFile);","this.file=file;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["if(params.length\>3)param4=params[3];","finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){","case0:","param1=param;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["staticfinalintSQL_FLOAT=1357;","staticfinalintSQL_INTEGER=1358;","staticfinalintSQL_LONGVARBINARY=1359;","staticfinalintSQL_LONGVARCHAR=1360;","staticfinalintSQL_REAL=1361;","staticfinalintSQL_SMALLINT=1362;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnparam1.isNull();","booleangetBoolean()throwsException{","returnExpressionValue.getBoolean(getObject(),getDataType());","intgetInt()throwsException{","returnExpressionValue.getInt(getObject(),getDataType());","longgetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnMoney.parseMoney(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","return(long)(Utils.bytes2double(readLongBinary())*10000L);","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(true){","try{","Stringline;","try{","line=input.readLine();","}catch(IOExceptionex){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["complement[0]=complement[1]=complement[2]=complement[3]=-1;","offset=4;","}else{","complement=newbyte[(value.length-v)*4];","offset=0;","intlast=value.length-1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnfalse;","returnfrom.absolute(maxRows);","returnfrom.last();","finalvoidafterLast()throwsException{","from.afterLast();","booleanisLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["do{","nextOffset2=nextOffset1;","nextOffset1=offset;","nextEntry=getUnsignedShort();","if(listEnum.stack\<3)","offset+=pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnTypes.TINYINT;","caseSQLTokenizer.SMALLINT:","returnTypes.SMALLINT;","caseSQLTokenizer.INT:","returnTypes.INTEGER;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(((Money)obj).value,4);","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","if(objinstanceofMutableNumeric)","return(MutableNumeric)obj;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatestaticfinalint[]MISSING_TOKEN_LIST={SQLTokenizer.COMMA,SQLTokenizer.FROM,SQLTokenizer.GROUP,SQLTokenizer.HAVING,SQLTokenizer.ORDER};","privatestaticfinalint[]MISSING_FROM={SQLTokenizer.FROM};","privatestaticfinalint[]MISSING_SET={SQLTokenizer.SET};","privatestaticfinalint[]MISSING_EQUALS={SQLTokenizer.EQUALS};","privatestaticfinalint[]MISSING_WHERE={SQLTokenizer.WHERE};","privatestaticfinalint[]MISSING_WHERE_COMMA={SQLTokenizer.WHERE,SQLTokenizer.COMMA};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnreadLongBinary();","caseSQLTokenizer.UNIQUEIDENTIFIER:","bytes=newbyte[16];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["StringBufferbuf=newStringBuffer();","for(inti=from;i\<=to;i++){","if(i!=from)buf.append(\',\');","buf.append(SQLTokenizer.getKeyWord(i));","returnbuf.toString();","publicStringgetNumericFunctions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["try{","returngetFromLocaleTree(dfltLocaleStr);","catch(IllegalArgumentExceptione){","returnnewLanguage();//defaulttoEnglish","privatestaticLanguagegetFromLocaleTree(StringlocaleStr)","throwsIllegalArgumentException{"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returntrue;","rowIdx=rowList.size()-1;","if(rowIdx\>=0)","rowSource.setRowPosition(rowList.get(rowIdx));","booleanresult;","while((result=next())&&row-1\>rowIdx){/*scrollforward*/}"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["return(obj.equals(Boolean.TRUE));","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","return((Number)obj).intValue()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAbs();","break;","caseSQLTokenizer.ACOS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionACos();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["abstractclassExpressionimplementsCloneable{","staticfinalExpressionNULL=newExpressionValue(null,SQLTokenizer.NULL);","finalprivateinttype;","privateStringname;//thenameoftheoriginalcolumninthetable","privateStringalias;","privateExpression[]params;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["compile(con);","TableViewResultresult=TableViewResult.getTableViewResult(from);","updateCount=0;","from.execute();","while(next()){","result.deleteRow();"]": ["|project://smallsql/src/smallsql/database/CommandDelete.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","return(obj==Boolean.TRUE)?10000:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalShortgetShort(intvalue){","if(value\>=-4&&value\<256){","returnshortCache[value+4];","}else","returnnewShort((short)value);","staticfinalFileChannelopenRaFile(Filefile,booleanreadonly)throwsFileNotFoundException,SQLException{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["classExpressionFunctionAbsextendsExpressionFunctionReturnP1{","intgetFunction(){returnSQLTokenizer.ABS;}","booleangetBoolean()throwsException{","returngetDouble()!=0;","intgetInt()throwsException{","returnMath.abs(param1.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["num.mod(right.getNumeric());","returnnum;","default:throwcreateUnspportedConversion(SQLTokenizer.NUMERIC);","ObjectgetObject()throwsjava.lang.Exception{","if(isNull())returnnull;","intdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["page[1]=(byte)(value\>\>48);","page[2]=(byte)(value\>\>40);","page[3]=(byte)(value\>\>32);","page[4]=(byte)(value\>\>24);","page[5]=(byte)(value\>\>16);","page[6]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["case20:","case120://ODBCkannonish;yyyy-mm-ddhh:mi:ss(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewExpressionArithmetic(function(cmd,token,false),ExpressionArithmetic.NEGATIVE);","returnfunction(cmd,token,false);","}else{","charchr1=sql[token.offset];","if(chr1==\'$\'){","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanrowInserted(){","returnfalse;","finalbooleanrowDeleted(){","returnfalse;","voidnullRow(){","thrownewError();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["row[3]=\"VIEW\";","rows.add(row);","}else{","if(isTypeTable){","row[3]=\"TABLE\";","rows.add(row);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintINSERT=1107;","staticfinalintLCASE=1108;","staticfinalintLEFT=1109;","staticfinalintLENGTH=1110;","staticfinalintLOCATE=1111;","staticfinalintLTRIM=1112;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.REAL:","returnUtils.doubleToMoney(getFloatImpl());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"BIGINT\",BIGINT);","addKeyWord(\"SMALLMONEY\",SMALLMONEY);","addKeyWord(\"MONEY\",MONEY);","addKeyWord(\"NUMBER\",DECIMAL);","addKeyWord(\"VARNUM\",DECIMAL);","addKeyWord(\"DECIMAL\",DECIMAL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["testClosedConnection();","database=Database.getDatabase(catalog,this,false);","publicStringgetCatalog(){","if(database==null)","return\"\";","returndatabase.getName();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.GREATER_EQU:","caseSQLTokenizer.UNEQUALS:","caseSQLTokenizer.LIKE:","caseSQLTokenizer.OR:","caseSQLTokenizer.AND:","caseSQLTokenizer.BIT_AND:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return0;","publicintgetMaxCursorNameLength(){","return0;","publicintgetMaxIndexLength(){","return0;","publicintgetMaxSchemaNameLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["packagesmallsql.database;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","finalclassCommandTableextendsCommand{","finalprivateColumnscolumns=newColumns();","finalprivateIndexDescriptionsindexes=newIndexDescriptions();"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["returnrowIdx+1;","longgetRowPosition(){","returnrowIdx;","voidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;","finalbooleanrowInserted(){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseGREATER:returnleft.getMoney()\>right.getMoney();","caseGRE_EQU:returnleft.getMoney()\>=right.getMoney();","caseLESSER:returnleft.getMoney()\<right.getMoney();","caseLES_EQU:returnleft.getMoney()\<=right.getMoney();","caseUNEQUALS:returnleft.getMoney()!=right.getMoney();","caseBETWEEN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["value[1]=(int)(-complement);","signum=-1;","}else{","value[0]=(int)(complement\>\>32);","value[1]=(int)complement;","signum=1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnlist;","previousToken();","while(true){","list.add(expression(cmd,0));","SQLTokentoken=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(newsize\>0xFFFFFF){//seepointerSize","newsize=0xFFFFFF;","if(newsize==data.length)throwSmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);","byte[]temp=newbyte[newsize];","System.arraycopy(data,0,temp,0,data.length);","data=temp;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["token=nextToken(MISSING_BETWEEN_IN);","previousToken();","isNot=true;","continue;","default:","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else","if(value.length==2&&(value[0]\>0)){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["abstractclassExpressionFunctionReturnP1extendsExpressionFunction{","booleanisNull()throwsException{","returnparam1.isNull();","ObjectgetObject()throwsException{","if(isNull())returnnull;","intdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","return((Number)obj).intValue()!=0;","caseSQLTokenizer.REAL:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Objectparam0){","Stringmessage=getErrorString(token,addMessageCode,param0);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,int[]validValues){","StringmsgStr=SmallSQLException.translateMsg(","Language.STXADD_KEYS_REQUIRED,newObject[]{});"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","case2:","param3=param;","break;","case3:","param4=param;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["importjava.sql.*;","importjava.util.ArrayList;","finalclassSSDatabaseMetaDataimplementsDatabaseMetaData{","finalprivateSSConnectioncon;","finalprivateSSStatementst;","SSDatabaseMetaData(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseTypes.BLOB:","return\"java.sql.Blob\";","caseTypes.BIGINT:","return\"java.lang.Long\";","caseTypes.DECIMAL:","caseTypes.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.TIMESTAMP:","offset+=8;","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.util.ArrayList;","importsmallsql.database.language.Language;","publicclassCommandInsertextendsCommand{","booleannoColumns;//afterthetablenamewasnocolumnExpressions;allcolumnExpressionsindefaultorder","privateCommandSelectcmdSel;","privateTabletable;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["finalbooleanprevious(){","rowPos--;","returnrowPos==1;","finalbooleannext(){","rowPos++;","returnrowPos==1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong());","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatestaticfinalint[]MISSING_AS={SQLTokenizer.AS};","privatestaticfinalint[]MISSING_SELECT={SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_INTERVALS={SQLTokenizer.SQL_TSI_FRAC_SECOND,SQLTokenizer.SQL_TSI_SECOND,SQLTokenizer.SQL_TSI_MINUTE,SQLTokenizer.SQL_TSI_HOUR,SQLTokenizer.SQL_TSI_DAY,SQLTokenizer.SQL_TSI_WEEK,SQLTokenizer.SQL_TSI_MONTH,SQLTokenizer.SQL_TSI_QUARTER,SQLTokenizer.SQL_TSI_YEAR,SQLTokenizer.MILLISECOND,SQLTokenizer.SECOND,SQLTokenizer.MINUTE,SQLTokenizer.HOUR,SQLTokenizer.DAY,SQLTokenizer.WEEK,SQLTokenizer.MONTH,SQLTokenizer.QUARTER,SQLTokenizer.YEAR,SQLTokenizer.D};","privatestaticfinalint[]MISSING_ALL={SQLTokenizer.ALL};","privatestaticfinalint[]MISSING_THEN={SQLTokenizer.THEN};","privatestaticfinalint[]MISSING_WHEN_ELSE_END={SQLTokenizer.WHEN,SQLTokenizer.ELSE,SQLTokenizer.END};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();","case26:","case126://ISO8601;yyyy-mm-ddThh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["importjavax.swing.JOptionPane;","importsmallsql.database.*;","publicclassCommandLine{","publicstaticvoidmain(String[]args)throwsException{","System.out.println(\"SmallSQLDatabasecommandlinetool\\n\");","Connectioncon=newSSDriver().connect(\"jdbc:smallsql\",newProperties());"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["caseSQLTokenizer.BIGINT:","return(int)readLong();","caseSQLTokenizer.REAL:","return(int)readFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateExpression[]inList;","finalprivateintoperation;","ExpressionArithmetic(Expressionleft,intoperation){","super(FUNCTION);","this.left=left;","this.operation=operation;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(!isInit)return;","super.printStackTrace();","publicvoidprintStackTrace(PrintStreamps){","if(!isInit)return;","super.printStackTrace(ps);","publicvoidprintStackTrace(PrintWriterpw){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["returnstore.getBoolean(offsets[colIdx],dataTypes[colIdx]);","@Override","finalintgetInt(intcolIdx)throwsException{","returnstore.getInt(offsets[colIdx],dataTypes[colIdx]);","@Override","finallonggetLong(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["daten[6]=hex2byte(chars,16);","daten[8]=hex2byte(chars,19);","daten[9]=hex2byte(chars,21);","daten[10]=hex2byte(chars,24);","daten[11]=hex2byte(chars,26);","daten[12]=hex2byte(chars,28);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.COMMA:","continue;","default:","thrownewError();","privateExpressionexpression(Commandcmd,intpreviousOperationLevel)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(store==Store.NOROW)","filePos=table.getFirstPage();//canpointattheendoffile","else","if(filePos\>=0x4000000000000000L){","filePos++;","if((filePos&0x3FFFFFFFFFFFFFFFL)\>=insertStorePages.size()){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnnewDateTime(parse(date),dataType);","staticlongparse(finalStringdatetime)throwsSQLException{","try{","finalintlength=datetime.length();","finalintyear;","finalintmonth;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(equals(node.getRemainderValue(),key,i)){","returnnode;","returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,longkey,booleanisLastValue,intdigitCount)throwsSQLException{","for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["StringgetTableAlias(){returntableAlias;}","finalTableViewgetTable(){","returntable;","finalintgetColumnIndex(){","returncolIdx;","finalColumngetColumn(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["addKeyWord(\"LONG\",LONG);//aliasforOracleLONGandLONGRAW","addKeyWord(\"CLOB\",CLOB);","addKeyWord(\"NCLOB\",NCLOB);","addKeyWord(\"UNIQUEIDENTIFIER\",UNIQUEIDENTIFIER);","addKeyWord(\"SQL_VARIANT\",JAVA_OBJECT);//aliasforMSSQLServerdatatypeSQL_VARIANT","addKeyWord(\"JAVA_OBJECT\",JAVA_OBJECT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BLOB)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetIndexInfo(Stringcatalog,Stringschema,Stringtable,booleanunique,booleanapproximate)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(inti)throwsSQLException{","try{","byte[]obj=getValue(i).getBytes();","wasNull=obj==null;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseMOD:returnleft.getFloat()%right.getFloat();","throwcreateUnspportedConversion(SQLTokenizer.REAL);","longgetMoney()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["RowSourcegetFrom(){","returnrowSource;","finalprivatebooleanisValidRow()throwsException{","returnwhere==null||rowSource.rowInserted()||where.getBoolean();","finalbooleanisScrollable(){","returnrowSource.isScrollable();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["previousToken();","returnselCmd;","finalprivateCommandSelectselect()throwsSQLException{","CommandSelectselCmd=singleSelect();","SQLTokentoken=nextToken();","UnionAllunion=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnSQLTokenizer.SOUNDEX;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["returntrue;","publicbooleansupportsStoredProcedures(){","returnfalse;","publicbooleansupportsSubqueriesInComparisons(){","returntrue;","publicbooleansupportsSubqueriesInExists(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnSQLTokenizer.DOUBLE;","if(dataTypeIdx\>=INT_IDX)","returnSQLTokenizer.INT;","if(dataTypeIdx\>=BIGINT_IDX)","returnSQLTokenizer.BIGINT;","if(dataTypeIdx\>=MONEY_IDX)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnfalse;","publicbooleanstoresLowerCaseIdentifiers(){","returnfalse;","publicbooleanstoresMixedCaseIdentifiers(){","returntrue;","publicbooleansupportsMixedCaseQuotedIdentifiers(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["prev.value=value;","staticfinalStringgetKeyWord(intkey){","return(String)keywords.get(Utils.getInteger(key));","staticfinalintgetSQLDataType(inttype){","switch(type){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["ViewResult(SSConnectioncon,CommandSelectcommandSelect)throwsSQLException{","try{","this.view=newView(con,commandSelect);","this.columnExpressions=commandSelect.columnExpressions;","this.commandSelect=commandSelect;","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","value=newMutableInteger(expr.getInt());","break;","caseSQLTokenizer.BIGINT:","value=newMutableLong(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.BLOB:","writeLongBinary(expr.getBytes());","break;","caseSQLTokenizer.TIMESTAMP:","writeTimestamp(expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","rowIdx=rowList.size()-1;","if(rowIdx\>=0)","rowSource.setRowPosition(rowList.get(rowIdx));","booleanresult;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returngetDate(findParameter(parameterName));","publicTimegetTime(StringparameterName)throwsSQLException{","returngetTime(findParameter(parameterName));","publicTimestampgetTimestamp(StringparameterName)throwsSQLException{","returngetTimestamp(findParameter(parameterName));","publicObjectgetObject(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["tabLockConnection=con;","tabLockCount++;","TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","con.add(lock);","returnlock;","caseSQLTokenizer.ALTER:{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(nextLock!=null){","fileOffset=nextLock.commit();","nextLock=null;","rollback();","returnfileOffset;","if(lockType==TableView.LOCK_READ)"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["{COL_WRONG_PREFIX,\"Ilprefissodicolonna\'\'{0}\'\'noncoincideconunaliasonomeditabellausatonellaquery.\"},","{COL_READONLY,\"Lacolonna\'\'{0}\'\'Ã¨disolalettura.\"},","{COL_INVALID_NAME,\"Nomedicolonnanonvalido\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Indicedicolonnafuoridall\'\'intervallovalido:{0}.\"},","{COL_AMBIGUOUS,\"Ilnomedicolonna\'\'{0}\'\'Ã¨ambiguo.\"},","{GROUP_AGGR_INVALID,\"FunzionediaggregrazionenonvalidaperlaclausolaGROUPBY:({0}).\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnfalse;","right.next();","}while(isFullNotValid[fullReturnCounter++]);","returntrue;","do{","if(isBeforeFirst){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["throwSmallSQLException.create(Language.GROUP_AGGR_NOTPART,expr);","}else","if(type\>=Expression.GROUP_BEGIN){","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","internalExpressions.add(expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["importsmallsql.database.language.Language;","publicclassCreateFileextendsTransactionStep{","privatefinalFilefile;","privatefinalSSConnectioncon;","privatefinalDatabasedatabase;","CreateFile(Filefile,FileChannelraFile,SSConnectioncon,Databasedatabase){"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["privateArrayListbatches;","privatefinalinttop;//valueofanoptionaltopexpression","SSPreparedStatement(SSConnectioncon,Stringsql)throwsSQLException{","this(con,sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSPreparedStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,rsType,rsConcurrency);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["if(month\>11){","year+=month/12;","month%=12;","result+=MONTH_DAYS[month]*86400000L;","result+=(year-1970)*31536000000L;//millis365days","result+=((year/4)-(year/100)+(year/400)-477)*86400000L;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privatelong[]data;","LongLongList(){","this(16);","LongLongList(intinitialSize){","data=newlong[initialSize*2];","finalintsize(){"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["staticbyte[]unique2bytes(Stringunique)throwsSQLException{","char[]chars=unique.toCharArray();","byte[]daten=newbyte[16];","daten[3]=hex2byte(chars,0);","daten[2]=hex2byte(chars,2);","daten[1]=hex2byte(chars,4);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"ADD\",ADD);","addKeyWord(\"LIMIT\",LIMIT);","addKeyWord(\"DATABASE\",DATABASE);","addKeyWord(\"TABLE\",TABLE);","addKeyWord(\"VIEW\",VIEW);","addKeyWord(\"INDEX\",INDEX);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","caseSQLTokenizer.REAL:","value=newMutableFloat(expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["scroll,level));","continue;","}else","returngetReturnValue(status.nodeValue);","if(idx\<0){","if(nodeStack.size()\>1){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["returntrue;","if(lastRowOffset\>=0){","rowSource.setRowPosition(lastRowOffset);","}else{","rowSource.beforeFirst();","if(rowSource.next()){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["publicintintValue(){","return(int)value;","publiclonglongValue(){","return(long)value;","publicStringtoString(){","returnString.valueOf(value);"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|","|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["page[offset++]=(byte)(value?1:0);","booleanreadBoolean(){","returnpage[offset++]!=0;","voidwriteShort(intvalue){","intnewSize=offset+2;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfalse;","booleanlast()throwsException{","afterLast();","returnprevious();","booleanisLast()throwsException{","if(rowIdx+1!=rowList.size()){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["if(list.getSize()\>0)return;","IndexNodenode=(IndexNode)nodeList.get(nodeList.size()-1);","node.clearValue();","for(inti=nodeList.size()-2;i\>=0;i--){","if(!node.isEmpty())","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["columns.add(newString(sql,offset,length));","token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","breakLoop;","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnreadDate();","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BIGINT\"});","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Entryprev=table[i];","Entrye=prev;","while(e!=null){","Entrynext=e.next;","if(e.key==key){","size--;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returnresult;","staticStringbytes2hex(byte[]bytes){","StringBufferbuf=newStringBuffer(bytes.length\<\<1);","for(inti=0;i\<bytes.length;i++){","buf.append(digits[(bytes[i]\>\>4)&0x0F]);","buf.append(digits[(bytes[i])&0x0F]);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","classCommandSelectextendsCommand{","privateDataSourcestables;//ListofTableResult(TablesandViews)","privateExpressionwhere;","RowSourcefrom;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["}else{","returnnodes[pos];","finalvoidremoveNode(chardigit){","intpos=findNodePos(digit);","if(pos!=-1){","intlength=nodes.length-1;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["default:thrownewError();","}else{","token=nextToken(MISSING_DATATYPE);","dataType=token.value;","Columncol=newColumn();","if(dataType==SQLTokenizer.LONG){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(shift!=0)offset+=pointerSize;","shift-=16;","finallonggetNext(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64)return-1;//apreviouscallhasreturn-1","offset=listEnum.offsetStack[listEnum.stack];"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicObjectgetImmutableObject(){","returntoBigDecimal();","privatestaticfinalbyte[]EMPTY_BYTES=newbyte[0];","privatestaticfinalint[]EMPTY_INTS=newint[0];","privatestaticfinaldouble[]scaleDoubleFactor={1,10,100,1000,10000,100000,1000000,10000000};","privatestaticfinalfloat[]scaleFloatFactor={1,10,100,1000,10000,100000,1000000,10000000};"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(colIdx\>=0){","if(isSetFrom){","throwSmallSQLException.create(Language.COL_AMBIGUOUS,expr.getName());","isSetFrom=true;","expr.setFrom(fromEntry,colIdx,table);","if(!isSetFrom){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(isNull())returnnull;","Stringstr=param1.getString();","intstart=0;","while(start\<str.length()&&str.charAt(start)==\'\'){","start++;","returnstr.substring(start);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["publicbyte[]getBytes(inti)throwsSQLException{","try{","byte[]obj=getValue(i).getBytes();","wasNull=obj==null;","returnobj;","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["staticlongbytes2long(byte[]bytes){","longresult=0;","intlength=Math.min(8,bytes.length);","for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);","default:thrownewError();","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.COL_AMBIGUOUS,expr.getName());","isSetFrom=true;","expr.setFrom(fromEntry,colIdx,table);","if(!isSetFrom){","throwSmallSQLException.create(Language.COL_INVALID_NAME,expr.getName());","compileLinkExpressionParams(expr);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(isNull())returnnull;","Stringstr=param1.getString();","intlength=str.length();","while(length\>0&&str.charAt(length-1)==\'\'){","length--;","returnstr.substring(0,length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["returnbytes;","caseSQLTokenizer.BINARY:{","byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();","if(length!=bytes.length){","byte[]buffer=newbyte[length];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["throwSmallSQLException.createFromException(e);","publicTimegetTime(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnFloat.parseFloat(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intsavepoint=con.getSavepoint();","try{","executeImpl(con,st);","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["if(filePos\<0)returnfalse;","setNextFilePos();","row++;","returnmoveToValidRow();","@Override","finalvoidafterLast(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["staticfinalintFN=403;","staticfinalintCALL=404;","staticfinalintOJ=405;","static{","addKeyWord(\"D\",D);","addKeyWord(\"T\",T);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(shift\>=64){//apreviouscallofgetNext()hasreturn-1","shift=48;","offset=0;","listEnum.stack=0;","listEnum.offsetStack[0]=2+pointerSize;","loopToEndOfNode(listEnum);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["staticbooleanisBinaryDataType(intdataType){","switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["throwSmallSQLException.create(Language.FILE_TOONEW,newObject[]{newInteger(version),fileName});","if(version\<TABLE_VIEW_OLD_VERSION)","throwSmallSQLException.create(Language.FILE_TOOOLD,newObject[]{newInteger(version),fileName});","if(magic==MAGIC_TABLE)","returnnewTable(database,con,name,raFile,raFile.position(),version);","returnnewView(con,name,raFile,raFile.position());"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseSQLTokenizer.LIMIT:","returntrue;","returnfalse;","privateSQLTokenlastToken(){","if(tokenIdx\>tokens.size()){","returnnull;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalclassUnionAllextendsDataSource{","privatefinalDataSourcesdataSources=newDataSources();","privateintdataSourceIdx;","privateDataSourcecurrentDS;","privateintrow;","voidaddDataSource(DataSourceds){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["float_left=left.getFloat();","return_left\>=right.getFloat()&&right2.getFloat()\>=_left;","default:","returngetFloat()!=0;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NUMERIC)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DECIMAL)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.MONEY)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLMONEY)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.INT)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnnewMutableNumeric(getDouble());","default:","thrownewError();","longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());","StringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["if(database!=null)","catalog=database.getName();","}else{","database=Database.getDatabase(catalog,con,false);","ArrayListrows=newArrayList();","booleanisTypeTable=types==null;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{ROW_DELETED,\"01000\"},","{SAVEPT_INVALID_TRANS,\"01000\"},","{SAVEPT_INVALID_DRIVER,\"01000\"},","{ALIAS_UNSUPPORTED,\"01000\"},","{ISOLATION_UNKNOWN,\"01000\"},","{FLAGVALUE_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.LESSER:returnLESSER;","caseSQLTokenizer.LESSER_EQU:returnLES_EQU;","caseSQLTokenizer.UNEQUALS:returnUNEQUALS;","caseSQLTokenizer.BETWEEN:returnBETWEEN;","caseSQLTokenizer.LIKE:returnLIKE;","caseSQLTokenizer.IN:returnIN;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["setURL(findParameter(parameterName),x);","publicvoidsetNull(StringparameterName,intsqlType)throwsSQLException{","setNull(findParameter(parameterName),sqlType);","publicvoidsetBoolean(StringparameterName,booleanx)throwsSQLException{","setBoolean(findParameter(parameterName),x);","publicvoidsetByte(StringparameterName,bytex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["break;","if(operation==NEGATIVE)token=SQLTokenizer.MINUS;","if(operation==ISNOTNULL)token=SQLTokenizer.IS;","Stringkeyword=SQLTokenizer.getKeyWord(token);","if(keyword==null)keyword=\"\"+(char)token;","returnkeyword;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["tokenStart=i+1;","comment=MULTI_COMMENT;","break;","default:","tokens.add(newSQLToken(c,i,i+1));","wasWhiteSpace=true;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(newTable[i]==null){","newTable[i]=e;","}else{","Entryentry=newTable[i];","while(entry.next!=null)entry=entry.next;","entry.next=e;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["Stringcatalog;","Stringname=catalog=nextIdentifier();","name=nextIdentiferPart(name);","if(name==catalog)catalog=null;","switch(tokenType.value){","caseSQLTokenizer.DATABASE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["setDate(findParameter(parameterName),x,cal);","publicvoidsetTime(StringparameterName,Timex,Calendarcal)throwsSQLException{","setTime(findParameter(parameterName),x,cal);","publicvoidsetTimestamp(StringparameterName,Timestampx,Calendarcal)throwsSQLException{","setTimestamp(findParameter(parameterName),x,cal);","publicvoidsetNull(StringparameterName,intsqlType,StringtypeName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["inttype=left==null?right.getDataType():getDataType(left,right);","Object[]params=newObject[]{","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(type),","getKeywordFromOperation(operation)","};"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["case26:","case126://ISO8601;yyyy-mm-ddThh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["store.writeInt(constraintType);","store.writeInt(columns.size());","for(intc=0;c\<columns.size();c++){","store.writeString(columns.get(c));","store.writeString(name);","finalstaticIndexDescriptionload(Databasedatabase,TableViewtableView,StoreImplstore)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["offsets=newint[columns.size()];","dataTypes=newint[columns.size()];","for(inti=0;i\<columns.size();i++){","dataTypes[i]=columns.get(i).getDataType();","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLTrim();","break;","caseSQLTokenizer.OCTETLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionOctetLen();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(expr.isNull()){","page=addNull(page,rowOffset,isLastValues);","}else{","switch(expr.getDataType()){","caseSQLTokenizer.REAL:","page=add(page,rowOffset,floatToBinarySortOrder(expr.getFloat()),isLastValues,2);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["finallongcommit()throwsSQLException{","longresult=super.commit();","link.filePos=fileOffset;","link.page=null;","returnresult;","finalStorePageLinkgetLink(){"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnreadLongBinary();","caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(rowsinstanceofLong){","right.setRowPosition(((Long)rows).longValue());","}else{","rowList=(LongTreeList)rows;","longListEnum.reset();","right.setRowPosition(rowList.getNext(longListEnum));"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["Expression[]params=expression.getParams();","if(params==null)return;","for(inti=0;i\<params.length;i++){","expression.setParamAt(patchExpression(params[i]),i);","finalprivateExpressionpatchExpression(Expressionexpr)throwsSQLException{","intidx=addInternalExpressionFromSelect(expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["staticfinalintBY=213;","staticfinalintHAVING=214;","staticfinalintORDER=215;","staticfinalintASC=216;","staticfinalintDESC=217;","staticfinalintVALUES=218;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.VARBINARY:","returnUtils.bytes2double(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.INT:","returnUtils.int2bytes(((Number)obj).intValue());","caseSQLTokenizer.DOUBLE:","returnUtils.double2bytes(((Number)obj).doubleValue());","caseSQLTokenizer.REAL:","returnUtils.float2bytes(((Number)obj).floatValue());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["count=readShort()&0xFFFF;","if(!isNull)offset+=count\<\<1;//notuse+=directlybecausereadShortchangetheoffset","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"VALUES\",VALUES);","addKeyWord(\"AS\",AS);","addKeyWord(\"DEFAULT\",DEFAULT);","addKeyWord(\"AUTO_INCREMENT\",IDENTITY);//aliasforIDENTITY;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"IDENTITY\",IDENTITY);","addKeyWord(\"INNER\",INNER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return;","prev=lock;","lock=lock.nextLock;","break;","caseLOCK_TAB:","assertstorePage.con==tabLockConnection:\"InternalErrorwithTabLock\";"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["privatelong[]data;","LongList(){","this(16);","LongList(intinitialSize){","data=newlong[initialSize];","finalintsize(){"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["page[offset++]=(byte)(value\>\>56);","page[offset++]=(byte)(value\>\>48);","page[offset++]=(byte)(value\>\>40);","page[offset++]=(byte)(value\>\>32);","page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["node=node.nextEntry;","wasNextEntry=true;","if(node==null){","node=newSearchNode();","node.letter=c;","if(wasNextEntry)"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.database=database;","@Override","longcommit(){","raFile=null;","return-1;","@Override"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["{ROWSOURCE_READONLY,\"01000\"},","{STMT_IS_CLOSED,\"HY010\"},","{SUBQUERY_COL_COUNT,\"01000\"},","{JOIN_DELETE,\"01000\"},","{JOIN_INSERT,\"01000\"},","{DELETE_WO_FROM,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnexpr;","caseSQLTokenizer.TRUE:","returnnewExpressionValue(Boolean.TRUE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.FALSE:","returnnewExpressionValue(Boolean.FALSE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.ESCAPE_L:{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticTableViewResultcreateResult(TableViewtableView){","if(tableViewinstanceofTable)","returnnewTableResult((Table)tableView);","returnnewViewResult((View)tableView);","staticTableViewResultgetTableViewResult(RowSourcefrom)throwsSQLException{","if(frominstanceofWhere){"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["caseSQLTokenizer.BIGINT:","returnreadLong()!=0;","caseSQLTokenizer.REAL:","returnreadFloat()!=0;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["MutableNumeric(longcomplement,intscale){","this(complement);","this.scale=scale;","MutableNumeric(doubleval){","this(newBigDecimal(String.valueOf(val)));","MutableNumeric(floatval){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["con.getDatabase(false):","Database.getDatabase(catalog,con,false);","switch(tableCommandType){","caseSQLTokenizer.CREATE:","database.createTable(con,name,columns,indexes,foreignKeys);","break;"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["returnnewSSSavepoint(getSavepoint(),name,transactionTime);","publicvoidrollback(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){","if(((SSSavepoint)savepoint).transactionTime!=transactionTime){","throwSmallSQLException.create(Language.SAVEPT_INVALID_TRANS);","rollback(savepoint.getSavepointId());"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["Moneymoney=newMoney();","money.value=value;","returnmoney;","publicstaticMoneycreateFromUnscaledValue(intvalue){","Moneymoney=newMoney();","money.value=value;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfalse;","publicbooleansupportsResultSetConcurrency(inttype,intconcurrency){","if(type\>=ResultSet.TYPE_FORWARD_ONLY&&type\<=ResultSet.TYPE_SCROLL_SENSITIVE&&","concurrency\>=ResultSet.CONCUR_READ_ONLY&&concurrency\<=ResultSet.CONCUR_UPDATABLE)","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=0;i--){","TransactionSteppage=(TransactionStep)commitPages.get(i);","if(page.raFile==raFile){","page.rollback();","page.freeLock();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.DOUBLE:","return(int)readDouble();","caseSQLTokenizer.MONEY:","longlongValue=readLong()/10000;","returnUtils.money2int(longValue);","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.QUARTER:","returnSQLTokenizer.SQL_TSI_QUARTER;","caseSQLTokenizer.YEAR:","returnSQLTokenizer.SQL_TSI_YEAR;","default:","returnintervalType;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["caseAND:returnleft.getBoolean()&&right.getBoolean();","caseNOT:return!left.getBoolean();","caseLIKE:returnUtils.like(left.getString(),right.getString());","caseISNULL:returnleft.isNull();","caseISNOTNULL:return!left.isNull();","caseIN:if(right==null)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{ISOLATION_UNKNOWN,\"01000\"},","{FLAGVALUE_INVALID,\"01000\"},","{ARGUMENT_INVALID,\"01000\"},","{GENER_KEYS_UNREQUIRED,\"01000\"},","{SEQUENCE_HEX_INVALID,\"01000\"},","{SEQUENCE_HEX_INVALID_STR,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["longv=(value[i]&0xFFFFFFFFL)+carryover;","value[i]=(int)(v/quotient);","carryover=((v%quotient)\<\<32);","carryover/=quotient;","if(carryover\>2147483648L||//2147483648L==Integer.MAX_VALUE+1","(carryover==2147483648L&&(value[valueLength-1]%2==1))){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["right.nullRow();","returntrue;","fullRowCount=Math.max(fullRowCount,fullRightRowCounter);","fullRightRowCounter=0;","isOuterValid=true;","result=left.next();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["UnionAllunion=null;","while(token!=null&&token.value==SQLTokenizer.UNION){","if(union==null){","union=newUnionAll();","union.addDataSource(newViewResult(con,selCmd));","selCmd=newCommandSelect(con.log);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intpos=findNodePos(digit);","if(pos\>=0)returnnodes[pos];","returnnull;","finalchar[]getRemainderValue(){","returnremainderKey;","finalIndexNodeaddNode(chardigit)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["finalintgetPrecision(){","finalintdataType=getDataType();","switch(dataType){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicvoidsetTime(intparameterIndex,Timex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIME);","publicvoidsetTimestamp(intparameterIndex,Timestampx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIMESTAMP);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["invalidParamCount=(paramCount!=2)&&(paramCount!=3);","expr=newExpressionFunctionLocate();","break;","caseSQLTokenizer.LTRIM:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLTrim();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(;sIdx\<value.length();sIdx++){","if(Character.toUpperCase(value.charAt(sIdx))==m)break;//Countermustn\'tincrementbeforebreak","if(sIdx\>=value.length())returnfalse;","intlastmIdx=mIdx-1;","sIdx++;","while(pattern.length()\>mIdx&&value.length()\>sIdx){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["}else{","store.page=storePage.page;","store.sharedPageData=true;","store.readPageHeader();","store=store.loadUpdatedStore();","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\<0)//castneededforCompiler1.5","value=str;","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicbooleannullsAreSortedHigh(){","returnfalse;","publicbooleannullsAreSortedLow(){","returntrue;","publicbooleannullsAreSortedAtStart(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["intlength=key.length;","inti=-1;","while(true){","chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);","if(++i==length){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticdoublebytes2double(byte[]bytes){","returnDouble.longBitsToDouble(bytes2long(bytes));","staticlongbytes2long(byte[]bytes){","longresult=0;","intlength=Math.min(8,bytes.length);","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["expr=newExpressionName(Expression.MIN);","break;","caseSQLTokenizer.FIRST:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.FIRST);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.PLUS:","caseSQLTokenizer.MINUS:","caseSQLTokenizer.ASTERISK:","caseSQLTokenizer.SLACH:","caseSQLTokenizer.PERCENT:","caseSQLTokenizer.EQUALS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["CommandSelectselCmd=newCommandSelect(con.log);","SQLTokentoken;","Switch:while(true){","token=nextToken(MISSING_EXPRESSION);","switch(token.value){","caseSQLTokenizer.TOP:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"CASE\",CASE);","addKeyWord(\"WHEN\",WHEN);","addKeyWord(\"THEN\",THEN);","addKeyWord(\"ELSE\",ELSE);","addKeyWord(\"END\",END);","addKeyWord(\"SWITCH\",SWITCH);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["staticSQLExceptioncreateFromException(StringmessageCode,Objectparam0,","Throwablee)","Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(e,message,sqlState);","staticStringtranslateMsg(StringmessageCode,Object[]params){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["for(inti=nodeList.size()-2;i\>=0;i--){","if(!node.isEmpty())","break;","IndexNodeparent=(IndexNode)nodeList.get(i);","parent.removeNode(node.getDigit());","node=parent;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","CommandalterTable(Stringcatalog,Stringname)throwsSQLException{","SQLTokentokenType=nextToken(MISSING_ADD_ALTER_DROP);","CommandTablecmd=newCommandTable(con.log,catalog,name,tokenType.value);","switch(tokenType.value){","caseSQLTokenizer.ADD:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnDateTime.parse(param1.getString());","returnparam1.getLong();","finalintgetDataType(){","returndatatype.getDataType();","finalintgetPrecision(){","finalintdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["}else","returnparam1.getString();","finalprivatelonggetDateTimeLong()throwsException{","switch(param1.getDataType()){","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["expr=newExpressionFunctionLCase();","break;","caseSQLTokenizer.LEFT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionLeft();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleannullableWasSet=false;","booleandefaultWasSet=col.isAutoIncrement();//withdatatypeCOUNTERalreadythisvalueisset","while(true){","if(token==null){","cmdCreate.addColumn(col);","returnnull;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);","longreadLong(){","return(((long)(puffer[offset++]&0xFF))\<\<56)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["this.precision=precision;","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(dataType,precision);","intgetColumnSize(){","if(SSResultSetMetaData.isNumberDataType(dataType))","returngetPrecision();"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["charcc=sql[k];","if((cc!=\'-\'&&cc!=\'$\'&&cc\<\'0\')||cc\>\'9\')break;//isidentifier--\>break","if(k\>=i)break;//precedingtokensareonlydigitsthatitisnotanidentifierelseafloatingnumber","case\'-\':","if(comment!=NOT_COMMENT){","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);","finalvoidnullRow(){","rowSource.nullRow();","row=0;"]": ["|project://smallsql/src/smallsql/database/Where.java|","|project://smallsql/src/smallsql/database/Distinct.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["fromSource=tableSource(cmd,tables);","while(true){","SQLTokentoken=nextToken();","if(token==null)returnfromSource;","switch(token.value){","caseSQLTokenizer.ON:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetCrossReference(null,null,table,null,null,null);","publicResultSetgetCrossReference(StringprimaryCatalog,StringprimarySchema,StringprimaryTable,StringforeignCatalog,StringforeignSchema,StringforeignTable)throwsSQLException{","try{","String[]colNames={\"PKTABLE_CAT\",\"PKTABLE_SCHEM\",\"PKTABLE_NAME\",\"PKCOLUMN_NAME\",\"FKTABLE_CAT\",\"FKTABLE_SCHEM\",\"FKTABLE_NAME\",\"FKCOLUMN_NAME\",\"KEY_SEQ\",\"UPDATE_RULE\",\"DELETE_RULE\",\"FK_NAME\",\"PK_NAME\",\"DEFERRABILITY\"};","Object[][]data=con.getDatabase(false).getReferenceKeys(con,primaryTable,foreignTable);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}else{","previousToken();","returnname;","finalprivatebooleanisKeyword(SQLTokentoken){","if(token==null)returnfalse;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntrue;","publicbooleansupportsUnion(){","returntrue;","publicbooleansupportsUnionAll(){","returntrue;","publicbooleansupportsOpenCursorsAcrossCommit(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["signum=-1;","}else{","value[0]=(int)(complement\>\>32);","value[1]=(int)complement;","signum=1;","MutableNumeric(longcomplement,intscale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["case101://USAmm/dd/yyyy","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["expr=newExpressionFunctionSubstring();","break;","caseSQLTokenizer.UCASE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionUCase();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(wasNull)returnnull;","returnobj.toBigDecimal(scale);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(varBinary)lengthColumn=length;","intnewSize=offset+2+lengthColumn;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(lengthColumn\>\>8);","page[offset++]=(byte)(lengthColumn);","writeBytes(daten);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicStringgetColumnLabel(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();","publicStringgetColumnName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();","publicStringgetSchemaName(intcolumn)throwsSQLException{","returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalbooleanprevious()throwsException{","booleanoldIsCurrentRow=isCurrentRow;","do{","isCurrentRow=rowSource.previous();","}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row--;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returnTypes.LONGVARCHAR;","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","returnTypes.CLOB;","caseSQLTokenizer.JAVA_OBJECT:","returnTypes.JAVA_OBJECT;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return17;","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.BOOLEAN:","return(obj==Boolean.TRUE)?1:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;","caseSQLTokenizer.DAYOFMONTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfMonth();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnwasNull;","publicStringgetString(intcolumnIndex)throwsSQLException{","try{","Objectobj=getObject(columnIndex);","if(objinstanceofString||obj==null){","return(String)obj;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnposition;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);","if((st.rsType==ResultSet.TYPE_SCROLL_INSENSITIVE||st.rsType==ResultSet.TYPE_SCROLL_SENSITIVE)&&","!from.isScrollable()){","from=newScrollable(from);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["Object[]row=newObject[6];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=columns.get(c);//COLUMN_NAME","row[4]=Utils.getShort(c+1);//KEY_SEQ","row[5]=index.getName();//PK_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseNEGATIVE:","caseBIT_NOT:","returnleft.getDataType();","caseEQUALS:","caseEQUALS_NULL:","caseGREATER:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["throwcreateSyntaxError(tokenType,COMMANDS_DROP);","privateCommandalter()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_ALTER);","Stringcatalog;","StringtableName=catalog=nextIdentifier();","switch(tokenType.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnkeyword;","staticintgetOperationFromToken(intvalue){","switch(value){","caseSQLTokenizer.PLUS:returnADD;","caseSQLTokenizer.MINUS:returnSUB;","caseSQLTokenizer.ASTERISK:returnMUL;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnewMutableNumeric(value);","finalObjectgetObject()throwsException{","if(isNull())returnnull;","returnnewDouble(getDouble());","finalStringgetString()throwsException{","Objectobj=getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["finalIndexNode[]getChildNodes(){","returnnodes;","finalIndexNodegetChildNode(chardigit){","intpos=findNodePos(digit);","if(pos\>=0)returnnodes[pos];","returnnull;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["finalclassMutableDoubleextendsNumberimplementsMutable{","doublevalue;","MutableDouble(doublevalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["returnfalse;","returntrue;","intgetRow(){","returnrow\>getRowCount()?0:row;","finallonggetRowPosition(){","returnrowSource.getRowPosition();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(name.startsWith(\"file:\")){","name=name.substring(5);","Filefile;","try{","file=newFile(name).getCanonicalFile();","}catch(Throwableth){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicintgetDriverMajorVersion(){","returnSSDriver.drv.getMajorVersion();","publicintgetDriverMinorVersion(){","returnSSDriver.drv.getMinorVersion();","publicbooleanusesLocalFiles(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","}else{","intidx=--status.idx;","if(idx==-1){","if(status.nodeValue!=null){","if(status.nodeValueinstanceofIndexNode){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["row++;","rowSource.setRowPosition(rowPosition);","returntrue;","if(currentInsertedRow()\<insertedRows.size()-1){","row++;","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["|(puffer[offset++]&0xFF);","char[]readChars(intlength){","char[]chars=newchar[length];","for(inti=0;i\<length;i++){","chars[i]=(char)readShort();","returnchars;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["dataType=SQLTokenizer.INT;","break;","default:thrownewError();","ExpressionValue(Objectvalue,intdataType){","super(VALUE);","this.value=value;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.LTRIM;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["return\"java.sql.Blob\";","caseTypes.BIGINT:","return\"java.lang.Long\";","caseTypes.DECIMAL:","caseTypes.NUMERIC:","return\"java.math.BigDecimal\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["currentDS.beforeFirst();","n=currentDS.next();","if(n)returntrue;","row=0;","returnfalse;","finalvoidafterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["privatefinalintid;","privatefinalStringname;","longtransactionTime;","SSSavepoint(intid,Stringname,longtransactionTime){","this.id=id;","this.name=name;"]": ["|project://smallsql/src/smallsql/database/SSSavepoint.java|"],
"["operation++;","leftExpr=newExpressionArithmetic(leftExpr,operation);","break;","caseSQLTokenizer.NOT:","token=nextToken(MISSING_BETWEEN_IN);","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["int[]getInternalValue(){","returnvalue;","voidadd(MutableNumericnum){","if(num.scale\<scale){","num.setScale(scale);","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(isNull())return0;","returnDouble.parseDouble(getString().trim());","finallonggetMoney()throwsException{","if(isNull())return0;","returnMoney.parseMoney(getString().trim());","finalMutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["break;","caseSQLTokenizer.IFNULL:","switch(paramCount){","case1:","returnnewExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","case2:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnvalue;","@Override","publicintintValue(){","return(int)value;","@Override","publiclonglongValue(){"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["returngetTime(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewTime(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returngetResult().getFloat();","finaldoublegetDouble()throwsException{","returngetResult().getDouble();","finallonggetMoney()throwsException{","returngetResult().getMoney();","finalMutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["publicintfindColumn(StringcolumnName)throwsSQLException{","returngetCmd().findColumn(columnName)+1;","publicReadergetCharacterStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Readerobject\");","publicvoidupdateObject(intcolumnIndex,Objectx,intscale)throwsSQLException{","updateValue(columnIndex,x,-1);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["charc=sql[i];","switch(c){","case\'\\\"\':","case\'\\\'\':","if(comment!=NOT_COMMENT){","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["tableView.close();","iterator.remove();","master.close();","staticTableViewgetTableView(SSConnectioncon,Stringcatalog,StringtableName)throwsSQLException{","returngetDatabase(con,catalog).getTableView(con,tableName);","TableViewgetTableView(SSConnectioncon,StringtableName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["status=readInt();","sizeUsed=readInt();","sizePhysical=readInt();","nextPageOffset=readInt();","filePosUpdated=readLong();","finalprivateStoreImplloadUpdatedStore()throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalbooleanrowInserted(){","returncommandSelect.from.rowInserted();","finalbooleanrowDeleted(){","returncommandSelect.from.rowDeleted();","voidnullRow(){","commandSelect.from.nullRow();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","rowSource.beforeFirst();","returnfalse;","booleannext()throwsException{","if(++rowIdx\<rowList.size()){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["else","if(newValueinstanceofFloat)","this.dataType=SQLTokenizer.REAL;","else","if(newValueinstanceofDouble)","this.dataType=SQLTokenizer.DOUBLE;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["((page[offset++]&0xFF));","voidwriteDouble(doublevalue){","writeLong(Double.doubleToLongBits(value));","doublereadDouble(){","returnDouble.longBitsToDouble(readLong());","voidwriteFloat(floatvalue){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetString(findParameter(parameterName));","publicbooleangetBoolean(StringparameterName)throwsSQLException{","returngetBoolean(findParameter(parameterName));","publicbytegetByte(StringparameterName)throwsSQLException{","returngetByte(findParameter(parameterName));","publicshortgetShort(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["this.value=value;","this.dataType=dataType;","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionValue))returnfalse;","Objectv=((ExpressionValue)expr).value;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","finalclassLongTreeList{","privatebyte[]data;","privateintsize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.BIT:","return(obj==Boolean.TRUE)?10000:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["longcommit()throwsSQLException{","try{","if(raFile!=null&&page!=null){","ByteBufferbuffer=ByteBuffer.wrap(page,0,pageSize);","synchronized(raFile){","if(fileOffset\<0){"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["if(param1.getBoolean())","returnparam2.getFloat();","returnparam3.getFloat();","doublegetDouble()throwsException{","if(param1.getBoolean())","returnparam2.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","buf.append(Long.toString(temp));","}else","if(value.length==2&&(value[0]\>0)){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["privateintfetchSize;","SSResultSet(SSStatementst,CommandSelectcmd){","this.st=st;","metaData.columns=cmd.columnExpressions;","this.cmd=cmd;","isUpdatable=st!=null&&st.rsConcurrency==CONCUR_UPDATABLE&&!cmd.isGroupResult();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["MutableNumeric(BigDecimalbig){","this(big.unscaledValue().toByteArray());","scale=big.scale();","MutableNumeric(intsignum,int[]value,intscale){","this.signum=signum;","this.value=value;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["booleanisRS=st.execute(command.toString());","if(isRS){","printRS(st.getResultSet());","command.setLength(0);","command.append(line).append(\'\\n\');","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["finallonggetMoney(intcolIdx)throwsException{","returnstore.getMoney(offsets[colIdx],dataTypes[colIdx]);","@Override","finalMutableNumericgetNumeric(intcolIdx)throwsException{","returnstore.getNumeric(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returngetMoney()!=0;","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:{","if(operation==NEGATIVE)","returnleft.getNumeric().getSignum()!=0;","intcomp=left.getNumeric().compareTo(right.getNumeric());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["throwSmallSQLException.createFromException(e);","publicbytegetByte(intcolumnIndex)throwsSQLException{","return(byte)getInt(columnIndex);","publicshortgetShort(intcolumnIndex)throwsSQLException{","return(short)getInt(columnIndex);","publicintgetInt(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returntrue;","publicbooleansupportsExtendedSQLGrammar(){","returntrue;","publicbooleansupportsANSI92EntryLevelSQL(){","returntrue;","publicbooleansupportsANSI92IntermediateSQL(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetImportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,null,null,null,table);","publicResultSetgetExportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.pageSize=pageSize;","this.fileOffset=fileOffset;","finalvoidsetPageData(byte[]data,intsize){","page=data;","pageSize=size;","@Override"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["addKeyWord(\"Q\",SQL_TSI_QUARTER);","addKeyWord(\"QQ\",SQL_TSI_QUARTER);","addKeyWord(\"SQL_TSI_QUARTER\",SQL_TSI_QUARTER);","addKeyWord(\"YY\",SQL_TSI_YEAR);","addKeyWord(\"YYYY\",SQL_TSI_YEAR);","addKeyWord(\"SQL_TSI_YEAR\",SQL_TSI_YEAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["left=param;","break;","case1:","if(right!=null){","right=param;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{STXADD_IDENT_EXPECT,\"Bezeichnererwartet.\"},","{STXADD_IDENT_EMPTY,\"LeererBezeichner.\"},","{STXADD_IDENT_WRONG,\"UngÃ¼ltigerBezeichner\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"UngÃ¼ltigerOperatorMinusfÃ¼rDatentypVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"UnbekannteFunktion.\"},","{STXADD_PARAM_INVALID_COUNT,\"UngÃ¼ltigeParamterAnzahl.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returntrue;","publicbooleansupportsCatalogsInIndexDefinitions(){","returntrue;","publicbooleansupportsCatalogsInPrivilegeDefinitions(){","returntrue;","publicbooleansupportsPositionedDelete(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["break;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","intcount=readShort()&0xFFFF;","if(!isNull)offset+=count;//notuse+=directlybecausereadShortchangetheoffset","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["System.out.println(\"\\tType2timesENTERtoexecuteanySQLcommand.\");","StringBuffercommand=newStringBuffer();","BufferedReaderinput=newBufferedReader(newInputStreamReader(System.in));","while(true){","try{","Stringline;"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCharLen();","break;","caseSQLTokenizer.CHAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionChar();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"SQL_BIGINT\",SQL_BIGINT);","addKeyWord(\"SQL_BINARY\",SQL_BINARY);","addKeyWord(\"SQL_BIT\",SQL_BIT);","addKeyWord(\"SQL_CHAR\",SQL_CHAR);","addKeyWord(\"SQL_DATE\",SQL_DATE);","addKeyWord(\"SQL_DECIMAL\",SQL_DECIMAL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returngetShort(findParameter(parameterName));","publicintgetInt(StringparameterName)throwsSQLException{","returngetInt(findParameter(parameterName));","publiclonggetLong(StringparameterName)throwsSQLException{","returngetLong(findParameter(parameterName));","publicfloatgetFloat(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["results.add(result);","finalvoidsetElseResult(Expressionexpr){","elseResult=expr;","finalvoidsetEnd(){","Expression[]params=newExpression[cases.size()*2+(elseResult!=null?1:0)];","inti=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.max(((MutableFloat)value).value,expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.max(((MutableDouble)value).value,expr.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.VARBINARY:","intcount=readShort()&0xFFFF;","if(!isNull)offset+=count;//notuse+=directlybecausereadShortchangetheoffset","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(type\>=Expression.GROUP_BEGIN){","throwSmallSQLException.create(Language.GROUP_AGGR_INVALID,expr);","}else{","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","internalExpressions.add(expr);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["row=0;","useSetRowPosition=false;","booleanfirst()throwsException{","beforeFirst();","returnnext();","booleanprevious()throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["publicintgetMaxCharLiteralLength(){","return0;","publicintgetMaxColumnNameLength(){","return255;","publicintgetMaxColumnsInGroupBy(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnfalse;","privateSQLTokenlastToken(){","if(tokenIdx\>tokens.size()){","returnnull;","return(SQLToken)tokens.get(tokenIdx-1);","privatevoidpreviousToken(){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Stringmsg2=throwable.getClass().getName();","msg2=msg2.substring(msg2.lastIndexOf(\'.\')+1);","if(msg!=null)","msg2=msg2+\':\'+msg;","returnmsg2;","returnthrowable.getMessage();"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["break;","case\'C\':","case\'G\':","case\'J\':","case\'K\':","case\'Q\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["if(isKeyword(token)){","previousToken();","returnlist;","throwcreateSyntaxError(token,MISSING_TOKEN_LIST);","privatevoidexpressionDefList(Commandcmd,Expressionsexpressions,Stringscolumns)throwsSQLException{","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnleft.getScale();","caseMOD:","return0;","returngetScale(dataType);","booleanisNull()throwsException{","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateintsignum;","MutableNumeric(byte[]complement){","setValue(complement);","privatevoidsetValue(byte[]complement){","intlength=complement.length;","if(length==0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnString.valueOf(readLong());","caseSQLTokenizer.REAL:","returnString.valueOf(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnString.valueOf(readDouble());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalclassExpressionFunctionSubstringextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.SUBSTRING;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["returnnull;","returnnewSSConnection(parse(url,info));","privatePropertiesparse(Stringurl,Propertiesinfo)throwsSQLException{","Propertiesprops=(Properties)info.clone();","if(!acceptsURL(url)){","returnprops;"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["if(frominstanceofTableViewResult){","return(TableViewResult)from;","throwSmallSQLException.create(Language.ROWSOURCE_READONLY);","voidsetAlias(Stringalias){","this.alias=alias;","StringgetAlias(){"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["returngetInt(getObject(),dataType);","staticintgetInt(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["abstractfloatgetFloat(intoffset,intdataType)throwsException;","abstractintgetInt(intoffset,intdataType)throwsException;","abstractlonggetLong(intoffset,intdataType)throwsException;","abstractlonggetMoney(intoffset,intdataType)throwsException;","abstractMutableNumericgetNumeric(intoffset,intdataType)throwsException;","abstractObjectgetObject(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["returnsetTransaction();","default:","thrownewError();","privateCommandSetsetTransaction()throwsSQLException{","SQLTokentoken=nextToken(MISSING_ISOLATION);","token=nextToken(MISSING_LEVEL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.defaultValue=defaultValue;","this.defaultDefinition=defaultDefinition;","ExpressiongetDefaultValue(SSConnectioncon)throwsSQLException{","if(identity)","counter.createNextValue(con);","returndefaultValue;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["token=nextToken();","if(token!=null&&token.value==SQLTokenizer.LIMIT){","limit(selCmd);","token=nextToken();","previousToken();","returnselCmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanrowInserted(){","returnfilePos\>=firstOwnInsert;","@Override","finalbooleanrowDeleted(){","if(storeinstanceofStoreNull&&store!=Store.NULL){","returntrue;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getMoney()==right.getMoney();","caseGREATER:returnleft.getMoney()\>right.getMoney();","caseGRE_EQU:returnleft.getMoney()\>=right.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseLES_EQU:returnleft.getMoney()\<=right.getMoney();","caseUNEQUALS:returnleft.getMoney()!=right.getMoney();","caseBETWEEN:","long_left=left.getMoney();","return_left\>=right.getMoney()&&right2.getMoney()\>=_left;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","default:","if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){","if(wasWhiteSpace){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["list.add(name.substring(0,name.length()-Utils.TABLE_VIEW_EXTENTION.length()));","returnlist;","Object[][]getColumns(SSConnectioncon,StringtablePattern,StringcolPattern)throwsException{","Listrows=newArrayList();","Stringstables=getTables(tablePattern);","for(inti=0;i\<tables.size();i++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.TIMESTAMPADD:","token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);","nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampAdd(token.value,expr,expression(cmd,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowSource.setRowPosition(rowList.get(rowIdx));","while(next()){/*scrollaftertheend*/}","booleanabsolute(introw)throwsException{","if(row==0)","throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(row\<0){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["ObjectgetObject(intcolIdx)throwsException{","returnget(colIdx).getObject();","StringgetString(intcolIdx)throwsException{","returnget(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{","returnget(colIdx).getBytes();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["newParams[2]=params[0];","params=newParams;","paramCount=3;","break;","default:","invalidParamCount=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["init();","privateSmallSQLException(Throwablethrowable,Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);","this.initCause(throwable);","init();","privatevoidinit(){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","returnTypes.JAVA_OBJECT;","caseSQLTokenizer.UNIQUEIDENTIFIER:","return-11;","caseSQLTokenizer.NULL:","returnTypes.NULL;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["isCurrentRow=rowSource.previous();","}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row--;","returnisCurrentRow;","finalbooleannext()throwsException{","booleanoldIsCurrentRow=isCurrentRow;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["shortCache[i+4]=newShort((short)i);","staticStringcreateTableViewFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+TABLE_VIEW_EXTENTION;","staticStringcreateLobFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+LOB_EXTENTION;","staticStringcreateIdxFileName(Databasedatabase,Stringname){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,newLong(x),SQLTokenizer.BIGINT);","publicvoidsetFloat(intparameterIndex,floatx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newFloat(x),SQLTokenizer.REAL);","publicvoidsetDouble(intparameterIndex,doublex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["publicstaticfinalStringUNSUPPORTED_TYPE_MAX=\"SS-0286\";","publicstaticfinalStringUNSUPPORTED_CONVERSION=\"SS-0287\";","publicstaticfinalStringINSERT_INVALID_LEN=\"SS-0288\";","publicstaticfinalStringSUBSTR_INVALID_LEN=\"SS-0289\";","publicstaticfinalStringVALUE_STR_TOOLARGE=\"SS-0310\";","publicstaticfinalStringVALUE_BIN_TOOLARGE=\"SS-0311\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["thrownoCurrentRow();","intgetInt(intoffset,intdataType)throwsException{","thrownoCurrentRow();","longgetLong(intoffset,intdataType)throwsException{","thrownoCurrentRow();","longgetMoney(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["for(inti=validValues.length-1;i\>=0;i--){","if(token.value==validValues[i])returntoken;","throwcreateSyntaxError(token,validValues);","privateCommandSelectsingleSelect()throwsSQLException{","CommandSelectselCmd=newCommandSelect(con.log);","SQLTokentoken;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["value=((long)(page[0])\<\<56)|","((long)(page[1]&0xFF)\<\<48)|","((long)(page[2]&0xFF)\<\<40)|","((long)(page[3]&0xFF)\<\<32)|","((long)(page[4]&0xFF)\<\<24)|","((page[5]&0xFF)\<\<16)|"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["this.signum=signum;","voidfloor(){","intoldScale=scale;","setScale(0);","setScale(oldScale);","privatevoidnegate(byte[]complement){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["return((long)(page[offset++])\<\<56)|","((long)(page[offset++]&0xFF)\<\<48)|","((long)(page[offset++]&0xFF)\<\<40)|","((long)(page[offset++]&0xFF)\<\<32)|","((long)(page[offset++]&0xFF)\<\<24)|","((page[offset++]&0xFF)\<\<16)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicintgetColumnType(intcolumn)throwsSQLException{","returnSQLTokenizer.getSQLDataType(getColumnExpression(column).getDataType());","publicStringgetColumnTypeName(intcolumn)throwsSQLException{","returnSQLTokenizer.getKeyWord(getColumnExpression(column).getDataType());","publicbooleanisReadOnly(intcolumn)throwsSQLException{","return!getColumnExpression(column).isDefinitelyWritable();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.HOUR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionHour();","break;","caseSQLTokenizer.MINUTE:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.QUESTION:","ExpressionValueparam=newExpressionValue();","cmd.addParameter(param);","returnparam;","caseSQLTokenizer.CASE:","returncaseExpr(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnInteger.MIN_VALUE;","return(int)value;","staticlongdouble2long(doublevalue){","if(value\>Long.MAX_VALUE)","returnLong.MAX_VALUE;","if(value\<Long.MIN_VALUE)"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnnewBigDecimal(newBigInteger(toByteArray()),scale).floatValue();","publicdoubledoubleValue(){","if(value.length==0||signum==0){","return0;","}else{","if(value.length==1&&(value[0]\>0)){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicvoidsetAsciiStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.LONGVARCHAR,length);","publicvoidsetUnicodeStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetCharacterStream()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["{INDEX_MISSING,\"L\'\'indice\'\'{0}\'\'nonesiste.\"},","{INDEX_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoperunindice.\"},","{INDEX_CORRUPT,\"Erroreduranteilcaricamentodell\'\'indice.Filedell\'\'indicecorrotto:\'\'{0}\'\'.\"},","{INDEX_TOOMANY_EQUALS,\"Troppevociugualinell\'\'indice.\"},","{FILE_TOONEW,\"Laversione({0})delfile\'\'{1}\'\'Ã¨tropporecenteperquestoruntime.\"},","{FILE_TOOOLD,\"Laversione({0})delfile\'\'{1}\'\'Ã¨troppovecchiaperquestoruntime.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["prevLock.nextLock=lock;","}else{","locks.put(pageKey,lock);","con.add(lock);","returnlock;","voidfreeLock(TableStorePagestorePage){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getLong(),dataType);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returngetBytes();","default:throwcreateUnspportedDataType(param1.getDataType());","intgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["tabLockConnection=con;","tabLockCount++;","TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","lock.rollback();","returnlock;","caseSQLTokenizer.INSERT:{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(isNull())returnnull;","Stringstr=param1.getString();","intstart=Math.min(Math.max(0,param2.getInt()-1),str.length());","intlength=Math.min(param3.getInt(),str.length());","StringBufferbuffer=newStringBuffer();","buffer.append(str.substring(0,start));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["returnrowIdx\<0||rowList.size()==0;","finalbooleanisFirst(){","returnrowIdx==0&&currentRow!=null;","finalbooleanfirst(){","rowIdx=0;","returnmove();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["publicStatementcreateStatement()throwsSQLException{","returnnewSSStatement(this);","publicPreparedStatementprepareStatement(Stringsql)throwsSQLException{","returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql)throwsSQLException{","returnnewSSCallableStatement(this,sql);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["longlongValue=param1.getLong();","if(longValue\<0)","return-1;","if(longValue\>0)","return1;","return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["buf.append(\'-\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case6://ddmonyy","formatNumber(details.day,2,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseTypes.BIGINT:","return\"java.lang.Long\";","caseTypes.DECIMAL:","caseTypes.NUMERIC:","return\"java.math.BigDecimal\";","caseTypes.REAL:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["if(database!=null){","Stringstables=database.getTables(tableNamePattern);","for(inti=0;i\<tables.size();i++){","Stringtable=tables.get(i);","Object[]row=newObject[10];","row[0]=catalog;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["longValue=param1.getMoney();","if(longValue\<0)","return-1;","if(longValue\>0)","return1;","return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2hex(readBinary());","caseSQLTokenizer.TINYINT:","returnString.valueOf(readUnsignedByte());","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SQL_TSI_MINUTE:","returnparam2.getLong()+param1.getLong()*60000;","caseSQLTokenizer.SQL_TSI_HOUR:","returnparam2.getLong()+param1.getLong()*3600000;","caseSQLTokenizer.SQL_TSI_DAY:","returnparam2.getLong()+param1.getLong()*86400000;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["left.beforeFirst();","right.beforeFirst();","isBeforeFirst=true;","fullRightRowCounter=0;","fullRowCount=0;","fullReturnCounter=-1;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.SQL_TINYINT:dataType=SQLTokenizer.TINYINT;break;","caseSQLTokenizer.SQL_VARBINARY:dataType=SQLTokenizer.VARBINARY;break;","caseSQLTokenizer.SQL_VARCHAR:dataType=SQLTokenizer.VARCHAR;break;","default:thrownewError();","}else{","token=nextToken(MISSING_DATATYPE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["value[v]=temp;","MutableNumeric(intcomplement){","if(complement==0){","signum=0;","value=EMPTY_INTS;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["staticfinalintBIT_OR=41;//|","staticfinalintBIT_AND=42;//&","staticfinalintBIT_XOR=43;//^","staticfinalintEQUALS=51;//=","staticfinalintEQUALS_NULL=52;//likeEqualsbut(null=null)--\>true","staticfinalintGREATER=53;//\>"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnUtils.string2boolean(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary())!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti,Mapmap)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["break;","caseSQLTokenizer.INT:","page=find(page,intToBinarySortOrder(expr.getInt()),2,nodeList);","break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnnewTableStorePage(con,this,LOCK_INSERT,-1);","default:","thrownewError(\"pageOperation:\"+pageOperation);","TableStorePagerequestWriteLock(SSConnectioncon,TableStorePagereadlock)throwsSQLException{","if(readlock.lockType==LOCK_INSERT){","TableStorePagelock=newTableStorePage(con,this,LOCK_INSERT,-1);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["voidoptimize()throwsSQLException{","super.optimize();","Expression[]params=getParams();","if(params.length==1){","return;","setParamAt(convertExpressionIfNeeded(params[0],params[1]),0);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(int)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.INT);","privateintgetIntImpl()throwsjava.lang.Exception{","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalTableStorePagerequestLock(SSConnectioncon,intpageOperation,longpage)throwsException{","synchronized(locks){","if(raFile==null){","throwSmallSQLException.create(Language.TABLE_MODIFIED,name);","longendTime=0;","while(true){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnlock;","LongpageKey=newLong(readlock.fileOffset);//TODOperformance","TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);","while(lock!=null){","if(lock.con!=con)returnnull;//thereisalreadyanylockfromanotherconnection,wecannotstartwrite"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnUtils.long2int(longValue());","publiclonglongValue(){","if(value.length==0||signum==0){","return0;","}else{","if(value.length==1&&(value[0]\>0)){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intconstraintType=store.readInt();","intcount=store.readInt();","Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();","SQLParsersqlParser=newSQLParser();","for(intc=0;c\<count;c++){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(nextEntry\>=0){","result|=(((long)nextEntry)\<\<shift);","if(listEnum.stack\>=3){","listEnum.offsetStack[listEnum.stack]=offset;","returnresult;","listEnum.offsetStack[listEnum.stack]=offset+pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["booleannext()throwsException{","returncommandSelect.next();","booleanlast()throwsException{","returncommandSelect.last();","booleanisLast()throwsException{","returncommandSelect.isLast();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().toByteArray();","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["@Override","finalvoidinsertRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;","intcount=tableColumns.size();","StoreImplstore=table.getStoreInsert(con);","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["staticfinalintTILDE=\'~\';//126","staticfinalintLESSER_EQU=100+LESSER;//\<=","staticfinalintUNEQUALS=100+EQUALS;//\<\>","staticfinalintGREATER_EQU=100+GREATER;//\>=","static{","keywords.put(newInteger(LESSER_EQU),\"\<=\");"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnnum;","caseDIV:","MutableNumericnum=left.getNumeric();","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","num.div(right.getInt());","else"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importsmallsql.database.language.Language;","classTableextendsTableView{","privatestaticfinalintINDEX=1;","finalDatabasedatabase;","FileChannelraFile;//filehandleofthetable","privateLobslobs;//filehandleoflobdataforthistable"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["prevLock.nextLock=lock.nextLock;","}else{","locks.put(pageKey,lock);","con.add(lock);","returnlock;","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.D:","caseSQLTokenizer.DAY:","returnSQLTokenizer.SQL_TSI_DAY;","caseSQLTokenizer.WEEK:","returnSQLTokenizer.SQL_TSI_WEEK;","caseSQLTokenizer.MONTH:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["switch(type){","caseSQLTokenizer.DATABASE:","if(name.startsWith(\"file:\"))","name=name.substring(5);","Filedir=newFile(name);","if(!dir.isDirectory()||"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["publicStringgetSystemFunctions(){","returngetFunctions(SQLTokenizer.IFNULL,SQLTokenizer.IIF);","publicStringgetTimeDateFunctions(){","returngetFunctions(SQLTokenizer.CURDATE,SQLTokenizer.YEAR);","publicStringgetSearchStringEscape(){","return\"\\\\\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2long(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returndefaultName;","finalStringgetName(){","returnname;","finalbooleanisPrimary(){","returnconstraintType==SQLTokenizer.PRIMARY;","finalbooleanisUnique(){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["break;","default:","thrownewError();","returncmd;","caseSQLTokenizer.REPEATABLE:","token=nextToken(MISSING_READ);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnfalse;","publicResultSetgetProcedures(Stringcatalog,StringschemaPattern,StringprocedureNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"\",\"\",\"\",\"REMARKS\",\"PROCEDURE_TYPE\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetProcedureColumns(Stringcatalog,StringschemaPattern,StringprocedureNamePattern,StringcolumnNamePattern)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintDATABASE=235;","staticfinalintTABLE=236;","staticfinalintVIEW=237;","staticfinalintINDEX=238;","staticfinalintPROCEDURE=239;","staticfinalintTRANSACTION=240;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intgetInt()throwsException{","returnMath.abs(param1.getInt());","longgetLong()throwsException{","returnMath.abs(param1.getLong());","floatgetFloat()throwsException{","returnMath.abs(param1.getFloat());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.REPEAT;","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intcount=param2.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["publicbooleansupportsSubqueriesInExists(){","returntrue;","publicbooleansupportsSubqueriesInIns(){","returntrue;","publicbooleansupportsSubqueriesInQuantifieds(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returngetDate(findColumn(columnName),cal);","publicTimegetTime(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){","returngetTime(columnIndex);","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalvoidaddAll(Expressionscols){","intcount=cols.size();","if(size+count\>=data.length){","resize(size+count);","System.arraycopy(cols.data,0,data,size,count);","size+=count;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["if(date==null)returnnull;","returnnewDateTime(parse(date),dataType);","staticlongparse(finalStringdatetime)throwsSQLException{","try{","finalintlength=datetime.length();","finalintyear;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["addKeyWord(\"SUM\",SUM);","addKeyWord(\"FIRST\",FIRST);","addKeyWord(\"LAST\",LAST);","addKeyWord(\"AVG\",AVG);","classSearchNode{","intvalue;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{SYNTAX_BASE_END,\"Erroredisintassi,fineinattesadellastringaSQL.\"},","{STXADD_ADDITIONAL_TOK,\"Tokenaggiuntivodopolafinedell\'\'istruzioneSQL.\"},","{STXADD_IDENT_EXPECT,\"Identificatoreatteso.\"},","{STXADD_IDENT_EMPTY,\"Identificatorevuoto.\"},","{STXADD_IDENT_WRONG,\"Identificatoreerrato\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"Operatore\'\'meno\'\'nonvalidoperiltipodidatovarbinary.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["return(signum\>0)?Long.MAX_VALUE:Long.MIN_VALUE;","publicfloatfloatValue(){","if(value.length==0||signum==0){","return0;","}else{","if(value.length==1&&(value[0]\>0)){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalbooleannext(){","rowIdx++;","returnmove();","finalbooleanlast(){","rowIdx=rowList.size()-1;","returnmove();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.LOCATE:","invalidParamCount=(paramCount!=2)&&(paramCount!=3);","expr=newExpressionFunctionLocate();","break;","caseSQLTokenizer.LTRIM:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidremove(longvalue)throwsSQLException{","if(size==0)return;","intoffset1=0;","intoffset2=0;","intoffset3=0;","offset=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){","intnextEntry=getUnsignedShort();","if(nextEntry==octet){","if(shift==0)return;//valueexistalready,thiscaseshouldnotoccur","offset=getPointer();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["ColumnstabColumns=table.columns;","intcount=tabColumns.size();","Expression[]updateValues=newExpression[count];","if(newRowSources!=null){","for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["SortedResult(RowSourcerowSource,ExpressionsorderBy){","this.rowSource=rowSource;","this.orderBy=orderBy;","finalbooleanisScrollable(){","returntrue;","finalvoidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.IN:","nextToken(MISSING_PARENTHESIS_L);","token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){","CommandSelectcmdSel=select();","leftExpr=newExpressionInSelect(con,leftExpr,cmdSel,operation);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["transfer(newTable);","table=newTable;","threshold=(int)(newCapacity*0.75f);","finalprivatevoidtransfer(Entry[]newTable){","Entry[]src=table;","intnewCapacity=newTable.length;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returnstore.getBytes(offsets[colIdx],dataTypes[colIdx]);","@Override","finalintgetDataType(intcolIdx){","returndataTypes[colIdx];","finalprivatevoidcopyValueInto(intcolIdx,StoreImpldst){","intoffset=offsets[colIdx++];"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["continue;","throwcreateSyntaxError(token,MISSING_ON);","privateRowSourcerowSource(Commandcmd,DataSourcestables,intparenthesis)throwsSQLException{","RowSourcefromSource=null;","fromSource=tableSource(cmd,tables);","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(getMoneyImpl(),4);","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privateMutableNumericgetNumericImpl()throwsjava.lang.Exception{","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["for(;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);","if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){","TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["break;","offset=offset1;","offset1=offset2;","offset2=offset3;","firstNode=firstNode1;","firstNode1=firstNode2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnbuf.toString();","case6://ddmonyy","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","caseSQLTokenizer.MIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MIN);","break;","caseSQLTokenizer.FIRST:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.FLOOR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionFloor();","break;","caseSQLTokenizer.LOG:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["resize(size\<\<1);","System.arraycopy(data,idx,data,idx+1,(size++)-idx);","data[idx]=expr;","finalvoidaddAll(Expressionscols){","intcount=cols.size();","if(size+count\>=data.length){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:","page=add(page,rowOffset,bytesToBinarySortOrder(expr.getBytes()),isLastValues);","break;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["break;","caseSQLTokenizer.T://timeescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;","caseSQLTokenizer.TS://timestampescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["cmd.addSetting(dest,src);","token=nextToken();","if(token==null)break;","switch(token.value){","caseSQLTokenizer.WHERE:","where(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intgetDataType(intcolIdx){","returncolumns.get(colIdx).getDataType();","finalTableViewgetTableView(){","returnnull;","finalvoiddeleteRow()throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["{LOB_DELETED,\"LobObjektwurdegelÃ¶scht.\"},","{PARAM_CLASS_UNKNOWN,\"UnbekanteParameterKlasse:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}istleer.\"},","{PARAM_IDX_OUT_RANGE,\"ParameterIndex{0}liegtauÃŸerhalbdesGÃ¼ltigkeitsbereiches.DerWertmusszwischen1und{1}liegen.\"},","{COL_DUPLICATE,\"EsgibteinendoppeltenSpaltennamen:\'\'{0}\'\'.\"},","{COL_MISSING,\"Spalte\'\'{0}\'\'wurdenichtgefunden.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnlist;","Object[][]getColumns(SSConnectioncon,StringtablePattern,StringcolPattern)throwsException{","Listrows=newArrayList();","Stringstables=getTables(tablePattern);","for(inti=0;i\<tables.size();i++){","StringtableName=tables.get(i);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["this.dataType=SQLTokenizer.NULL;","else","if(newValueinstanceofString)","this.dataType=SQLTokenizer.VARCHAR;","else","if(newValueinstanceofByte)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["StorePagestorePage=newStorePage(null,-1,raFile,8);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.CREATE,8);","store.writeString(sql);","store.writeInt(0);//nomoreadditinalinformations","store.writeFinsh(null);","raFile.close();"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicvoidsetByte(intparameterIndex,bytex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.TINYINT);","publicvoidsetShort(intparameterIndex,shortx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.SMALLINT);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.BIT:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getInt()==right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseBETWEEN:","returncomp\>=0&&0\>=String.CASE_INSENSITIVE_ORDER.compare(leftStr,right2.getString());","caseADD:returnUtils.string2boolean(leftStr+rightStr);","break;}","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this(complement);","this.scale=scale;","MutableNumeric(longcomplement){","if(complement==0){","signum=0;","value=EMPTY_INTS;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.SQL_SMALLINT:dataType=SQLTokenizer.SMALLINT;break;","caseSQLTokenizer.SQL_TIME:dataType=SQLTokenizer.TIME;break;","caseSQLTokenizer.SQL_TIMESTAMP:dataType=SQLTokenizer.TIMESTAMP;break;","caseSQLTokenizer.SQL_TINYINT:dataType=SQLTokenizer.TINYINT;break;","caseSQLTokenizer.SQL_VARBINARY:dataType=SQLTokenizer.VARBINARY;break;","caseSQLTokenizer.SQL_VARCHAR:dataType=SQLTokenizer.VARCHAR;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.io.*;","importjava.sql.*;","importjava.util.Properties;","importjavax.swing.JOptionPane;","importsmallsql.database.*;","publicclassCommandLine{"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["returnnewExpressionValue(Utils.hex2bytes(sql,token.offset+2,token.length-2),SQLTokenizer.VARBINARY);","if(isMinus)tok=\"-\"+tok;","if(Utils.indexOf(\'.\',sql,token.offset,token.length)\>=0||","Utils.indexOf(\'e\',sql,token.offset,token.length)\>=0){","returnnewExpressionValue(newDouble(tok),SQLTokenizer.DOUBLE);","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnexecute();","caseSQLTokenizer.TRUNCATE:","returntruncate();","default:","thrownewError();","ExpressionparseExpression(Stringexpr)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["switch(month){","case1:","case3:","case5:","case8:","case10:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(language!=null&&localeObj==null)return;","if(localeObj==null){","language=Language.getDefaultLanguage();","else{","language=Language.getLanguage(localeObj.toString());","publicvoidprintStackTrace(){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionMonthextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.MONTH;","finalintgetInt()throwsException{","if(param1.isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionMonth.java|"],
"["catch(IllegalArgumentExceptione){","returngetDefaultLanguage();","publicstaticLanguagegetDefaultLanguage(){","StringdfltLocaleStr=Locale.getDefault().toString();","try{","returngetFromLocaleTree(dfltLocaleStr);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["CommandSetcmd=newCommandSet(con.log,SQLTokenizer.LEVEL);","switch(token.value){","caseSQLTokenizer.READ:","token=nextToken(MISSING_COMM_UNCOMM);","switch(token.value){","caseSQLTokenizer.COMMITTED:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicintgetMaxColumnsInOrderBy(){","return0;","publicintgetMaxColumnsInSelect(){","return0;","publicintgetMaxColumnsInTable(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(operation==EQUALS_NULL&&leftIsNull&&rightIsNull)returntrue;","if(leftIsNull||rightIsNull)returnfalse;","dataType=getDataType(left,right);","switch(dataType){","caseSQLTokenizer.BOOLEAN:","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicvoidsetDate(StringparameterName,Datex)throwsSQLException{","setDate(findParameter(parameterName),x);","publicvoidsetTime(StringparameterName,Timex)throwsSQLException{","setTime(findParameter(parameterName),x);","publicvoidsetTimestamp(StringparameterName,Timestampx)throwsSQLException{","setTimestamp(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.ALTER:{","if(locks.size()\>0||locksInsert.size()\>0){","returnnull;","if(serializeConnections.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnselCmd;","default:","if(!isKeyword(token))","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.FROM});","previousToken();","returnselCmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intdisplaySize;","if(token==null||token.value!=SQLTokenizer.PARENTHESIS_L){","displaySize=30;","previousToken();","}else{","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["TableViewtab=getTableView(con,tableName);","Columnscols=tab.columns;","for(intc=0;c\<cols.size();c++){","Columncol=cols.get(c);","Object[]row=newObject[18];","row[0]=getName();//TABLE_CAT"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Stringkey=entries[i][0];","if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{","Stringvalue=entries[i][1];","messages.put(key,value);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["result[4]=(byte)(value\>\>24);","result[5]=(byte)(value\>\>16);","result[6]=(byte)(value\>\>8);","result[7]=(byte)(value);","returnresult;","staticintmoney2int(longvalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["return19;","caseSQLTokenizer.REAL:","return7;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return15;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["while(newRow--\>0){","if(!next()){","returnfalse;","}else{","afterLast();","while(newRow++\<0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.DAYOFYEAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfYear();","break;","caseSQLTokenizer.HOUR:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["byte[]str3=param3.getBytes();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","intidx1=0;","intidx2=Utils.indexOf(str2,str1,idx1);","while(idx2\>0){","buffer.write(str1,idx1,idx2-idx1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"NUM_PREC_RADIX\",\"NULLABLE\",\"REMARKS\",\"COLUMN_DEF\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"CHAR_OCTET_LENGTH\",\"ORDINAL_POSITION\",\"IS_NULLABLE\"};","Object[][]data=con.getDatabase(false).getColumns(con,tableNamePattern,columnNamePattern);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetColumnPrivileges(Stringcatalog,Stringschema,Stringtable,StringcolumnNamePattern)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["MutableNumericgetNumeric()throwsException{","returnExpressionValue.getNumeric(getObject(),getDataType());","StringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;","switch(datatype.getDataType()){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnTypes.VARCHAR;","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnTypes.LONGVARCHAR;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbytegetByte(inti)throwsSQLException{","return(byte)getInt(i);","publicshortgetShort(inti)throwsSQLException{","return(byte)getInt(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnmValue;","default:throwcreateUnspportedDataType(param1.getDataType());","StringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;","returnobj.toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["try{","displaySize=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","nextToken(MISSING_PARENTHESIS_R);","col.setPrecision(displaySize);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicintgetMaxConnections(){","return0;","publicintgetMaxCursorNameLength(){","return0;","publicintgetMaxIndexLength(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.MAX:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MAX);","break;","caseSQLTokenizer.MIN:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["useSetRowPosition=true;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","voidnullRow(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["generatedKeysType=1;","if(st.getGeneratedKeyIndexes()!=null)","generatedKeysType=2;","StoreImplstore=table.getStoreInsert(con);","for(intc=0;c\<matrix.length;c++){","Columncolumn=table.columns.get(c);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["publicArraygetArray(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetDate()notyetimplemented.\");","publicTimegetTime(inti,Calendarcal)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetTimestamp()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType,StringtypeName)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetURL()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(filePos\>=0x4000000000000000L){","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","}else{","store=(filePos\<maxFileOffset)?table.getStore(con,filePos,lock):null;","if(store==null){","if(insertStorePages.size()\>0){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.BIT:","returnparam1.getBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.TINYINT:","returnUtils.getInteger(param1.getInt()&0xFF);","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["right.beforeFirst();","isBeforeFirst=true;","fullRightRowCounter=0;","fullRowCount=0;","fullReturnCounter=-1;","booleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returncomp\>=0&&0\>=left.getNumeric().compareTo(right2.getNumeric());","default:","returngetNumeric().getSignum()!=0;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(digit\>=\'0\'&&digit\<=\'9\')returndigit-\'0\';","digit|=0x20;","if(digit\>=\'a\'&&digit\<=\'f\')returndigit-\'W\';//-\'W\'==-\'a\'+10","thrownewRuntimeException();","staticbyte[]unique2bytes(Stringunique)throwsSQLException{","char[]chars=unique.toCharArray();"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["}else{","intidx=--status.idx;","if(idx==-1){","if(status.nodeValue!=null){","if(status.nodeValueinstanceofIndexNode){","level++;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["if(store==null){","if(insertStorePages.size()\>0){","filePos=0x4000000000000000L;","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","if(store!=null){","if(!store.isValidPage()){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["dataType=SQLTokenizer.LONGVARBINARY;","}else{","dataType=SQLTokenizer.LONGVARCHAR;","previousToken();","switch(dataType){","caseSQLTokenizer.RAW:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["fromSource=join(cmd,tables,fromSource,Join.INNER_JOIN);","break;","caseSQLTokenizer.LEFT:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanrowInserted(){","returncurrentDS.rowInserted();","finalbooleanrowDeleted(){","returncurrentDS.rowDeleted();","finalvoidnullRow(){","currentDS.nullRow();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["publicMapgetTypeMap(){","returnnull;","publicvoidsetTypeMap(Mapmap){","publicvoidsetHoldability(intholdability){","this.holdability=holdability;","publicintgetHoldability(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnSQLTokenizer.LTRIM;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["for(inti=0;i\<length;i++){","chars[i]=(char)readShort();","returnchars;","byte[]readBytes(intlength){","byte[]bytes=newbyte[length];","System.arraycopy(puffer,offset,bytes,0,length);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["return5;","caseSQLTokenizer.INT:","caseSQLTokenizer.SMALLMONEY:","return10;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["if(singleJoin.rightinstanceofJoin){","compileJoin((Join)singleJoin.right);","privatevoidcompileLinkExpression(Expressionexpr)throwsException{","if(expr.getType()==Expression.NAME)","compileLinkExpressionName((ExpressionName)expr);","elsecompileLinkExpressionParams(expr);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalvoidnoRow(){","rowSource.noRow();","row=0;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){"]": ["|project://smallsql/src/smallsql/database/Where.java|","|project://smallsql/src/smallsql/database/Distinct.java|"],
"["privatefinalintcompare;","ExpressionsleftEx;","ExpressionsrightEx;","privateIndexindex;","privateLongTreeListrowList;","privatefinalLongTreeListEnumlongListEnum=newLongTreeListEnum();"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["caseSQLTokenizer.ASCII:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAscii();","break;","caseSQLTokenizer.BITLEN:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(intend=list.length-length;offset\<=end;offset++){","for(inti=0;i\<length;i++){","if(list[offset+i]!=value[i]){","continueloop1;","returnoffset;","return-1;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnfrom.previous();","booleannext()throwsException{","if(maxRows\>=0&&from.getRow()\>=maxRows){","from.afterLast();","returnfalse;","returnfrom.next();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["{ALIAS_UNSUPPORTED,\"EinAliasistnichterlaubtfÃ¼rdiesenTypvonRowsource.\"},","{ISOLATION_UNKNOWN,\"UnbekantesTransaktionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"UngÃ¼ltigerWertdesFlagsinMethodegetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"UngÃ¼ltigesArgumentinMethodesetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeyswurdennichtangefordert.\"},","{SEQUENCE_HEX_INVALID,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["try{","return(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));","}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR,newObject[]{newInteger(offset),newString(hex)});","staticStringbytes2unique(byte[]daten,intoffset){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intcount=param2.getInt();","StringBufferbuffer=newStringBuffer();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["locks.put(pageKey,lock);","con.add(lock);","returnlock;","caseSQLTokenizer.LONGVARBINARY:","returnnewTableStorePage(con,this,LOCK_INSERT,-1);","default:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);","useSetRowPosition=true;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["right.setRowPosition(rowPosition);","returntrue;","rowList=null;","Objectrows;","do{","if(!left.next()){"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["weiter:","while(pattern.length()\>mIdx&&value.length()\>sIdx){","charm=Character.toUpperCase(pattern.charAt(mIdx++));","switch(m){","case\'%\':","range=true;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicstaticfinalStringCANT_LOCK_FILE=\"SS-0003\";","publicstaticfinalStringDB_EXISTENT=\"SS-0030\";","publicstaticfinalStringDB_NONEXISTENT=\"SS-0031\";","publicstaticfinalStringDB_NOT_DIRECTORY=\"SS-0032\";","publicstaticfinalStringDB_NOTCONNECTED=\"SS-0033\";","publicstaticfinalStringDB_READONLY=\"SS-0034\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.SLACH:","caseSQLTokenizer.PERCENT:","caseSQLTokenizer.EQUALS:","caseSQLTokenizer.LESSER:","caseSQLTokenizer.LESSER_EQU:","caseSQLTokenizer.GREATER:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longcarryover=0;","for(inti=0;i\<valueLength;i++){","longv=(value[i]&0xFFFFFFFFL)+carryover;","value[i]=(int)(v/quotient);","carryover=((v%quotient)\<\<32);","carryover/=quotient;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["Filedirs[]=directory.listFiles();","if(dirs!=null)","if(tablePattern==null)tablePattern=\"%\";","tablePattern+=Utils.TABLE_VIEW_EXTENTION;","for(inti=0;i\<dirs.length;i++){","Stringname=dirs[i].getName();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["addKeyWord(\"WW\",SQL_TSI_WEEK);","addKeyWord(\"SQL_TSI_WEEK\",SQL_TSI_WEEK);","addKeyWord(\"M\",SQL_TSI_MONTH);","addKeyWord(\"MM\",SQL_TSI_MONTH);","addKeyWord(\"SQL_TSI_MONTH\",SQL_TSI_MONTH);","addKeyWord(\"Q\",SQL_TSI_QUARTER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.BIT:","return(obj.equals(Boolean.TRUE))?1:0;","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["type=SQLTokenizer.UPDATE;","if(newData.offset\<=sizePhysical||filePos==-1){","page=newData.page;//newDataisonlyatempStoreImpl","offset=newData.offset;","if(sizePhysical\<offset)sizePhysical=offset;//occuronlyonupdatesofnotcommittedinserts(filePos==-1","writeFinsh(con);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{STXADD_IDENT_EMPTY,\"EmptyIdentifier.\"},","{STXADD_IDENT_WRONG,\"WrongIdentifier\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"InvalidoperatorminusfordatatypeVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"Unknownfunction.\"},","{STXADD_PARAM_INVALID_COUNT,\"Invalidparametercount.\"},","{STXADD_JOIN_INVALID,\"InvalidJoinSyntax.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.ASIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionASin();","break;","caseSQLTokenizer.ATAN:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["((MutableInteger)value).value=Math.max(((MutableInteger)value).value,expr.getInt());","break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.max(((MutableLong)value).value,expr.getLong());","break;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicstaticfinalStringINDEX_EXISTS=\"SS-0460\";","publicstaticfinalStringINDEX_MISSING=\"SS-0461\";","publicstaticfinalStringINDEX_FILE_INVALID=\"SS-0462\";","publicstaticfinalStringINDEX_CORRUPT=\"SS-0463\";","publicstaticfinalStringINDEX_TOOMANY_EQUALS=\"SS-0464\";","publicstaticfinalStringFILE_TOONEW=\"SS-0490\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["byte[]temp=newbyte[16];","System.arraycopy(daten,offset,temp,0,daten.length-offset);","daten=temp;","char[]chars=newchar[36];","chars[8]=chars[13]=chars[18]=chars[23]=\'-\';","chars[0]=digits[(daten[offset+3]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicclassExpressionFunctionRightextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.RIGHT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["System.arraycopy(nodes,pos+1,temp,pos,length-pos);","nodes=temp;","finalvoidaddNode(chardigit,longrowOffset)throwsSQLException{","IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();","node.saveValue(rowOffset);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["isUpdateNeeded=true;","continue;","if(isUpdateNeeded){","result.updateRow(updateValues);","}catch(Throwablee){","con.rollback(savepoint);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(newRow\<=0){","beforeFirst();","returnfalse;","}else{","returnabsolute(newRow);","intgetRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["publicstaticfinalStringTABLE_DEADLOCK=\"SS-0195\";","publicstaticfinalStringTABLE_OR_VIEW_MISSING=\"SS-0196\";","publicstaticfinalStringTABLE_FILE_INVALID=\"SS-0197\";","publicstaticfinalStringTABLE_OR_VIEW_FILE_INVALID=\"SS-0198\";","publicstaticfinalStringTABLE_EXISTENT=\"SS-0199\";","publicstaticfinalStringFK_NOT_TABLE=\"SS-0220\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privateCommandexecute()throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Execute\");","privateExpressionsexpressionParenthesisList(Commandcmd)throwsSQLException{","Expressionslist=newExpressions();","SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_R){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(valueinstanceofIndexNode){","output.writeByte(3);","((IndexNode)value).saveRef(output);","output.writeShort(nodes.length);","for(inti=0;i\<nodes.length;i++){","nodes[i].saveRef(output);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["staticfinalintPOINT=\'.\';//46","staticfinalintSLACH=\'/\';//47","staticfinalintLESSER=\'\<\';//60","staticfinalintEQUALS=\'=\';//61","staticfinalintGREATER=\'\>\';//62","staticfinalintQUESTION=\'?\';//63"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassRowSource{","abstractbooleanisScrollable();","abstractvoidbeforeFirst()throwsException;"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["publicbooleannullsAreSortedAtStart(){","returnfalse;","publicbooleannullsAreSortedAtEnd(){","returnfalse;","publicStringgetDatabaseProductName(){","return\"SmallSQLDatabase\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnsupportsResultSetType(type);","publicbooleanownDeletesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanownInsertsAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersUpdatesAreVisible(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["factor*=10;","value/=factor;","value=Math.rint(value);","if(places\>0){","value/=factor;","}else{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|"],
"["returncolumn.getDisplaySize();","booleanisAutoIncrement(){","returncolumn.isAutoIncrement();","booleanisCaseSensitive(){","returncolumn.isCaseSensitive();","booleanisNullable(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnlist;","caseSQLTokenizer.COMMA:","continue;","default:","thrownewError();","privateExpressionsexpressionTokenList(Commandcmd,intlistType)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewBigDecimal(newBigInteger(toByteArray()),scale).doubleValue();","publicStringtoString(){","StringBufferbuf=newStringBuffer();","if(value.length==0||signum==0){","buf.append(\'0\');","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(nextEntry!=0||firstNode){","result|=(((long)nextEntry)\<\<shift);","if(listEnum.stack\>=3){","listEnum.offsetStack[listEnum.stack]=offset;","returnresult;","listEnum.offsetStack[listEnum.stack]=offset+pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicclassExpressionFunctionRepeatextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.REPEAT;","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["returnfalse;","finalvoidnullRow(){","thrownewError();","finalvoidnoRow(){","thrownewError();","finalvoidexecute()throwsException{/*canbeempty,nothingtodo*/}"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["{STXADD_ADDITIONAL_TOK,\"01000\"},","{STXADD_IDENT_EXPECT,\"01000\"},","{STXADD_IDENT_EMPTY,\"01000\"},","{STXADD_IDENT_WRONG,\"01000\"},","{STXADD_OPER_MINUS,\"01000\"},","{STXADD_FUNC_UNKNOWN,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken;","while(null!=(token=nextToken())){","switch(token.value){","caseSQLTokenizer.WHERE:","where(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalstaticprivatechar[]bytesToBinarySortOrder(byte[]value){","intlength=value.length;","char[]puffer=newchar[length];","for(inti=0;i\<length;i++){","puffer[i]=(char)(value[i]&0xFF);","returnpuffer;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["chars[2]=digits[(daten[offset+2]\>\>4)&0x0F];","chars[3]=digits[(daten[offset+2])&0x0F];","chars[4]=digits[(daten[offset+1]\>\>4)&0x0F];","chars[5]=digits[(daten[offset+1])&0x0F];","chars[6]=digits[(daten[offset+0]\>\>4)&0x0F];","chars[7]=digits[(daten[offset+0])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["intreadUnsignedByte(){","returnpage[offset++]&0xFF;","voidwriteBoolean(booleanvalue){","intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value?1:0);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return(int)(param2.getLong()/86400000-param1.getLong()/86400000);","caseSQLTokenizer.SQL_TSI_WEEK:{","longday2=param2.getLong()/86400000;","longday1=param1.getLong()/86400000;","return(int)((day2+3)/7-(day1+3)/7);","}caseSQLTokenizer.SQL_TSI_MONTH:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["return10;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:","return19;","caseSQLTokenizer.REAL:","return13;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["byte[]temp=newbyte[newSize];","System.arraycopy(puffer,0,temp,0,offset);","puffer=temp;","voidskip(intcount){","offset+=count;","intreadByte(){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returnfileOffset;","if(lockType==TableView.LOCK_READ)","returnfileOffset;","returnsuper.commit();","finalvoidfreeLock(){","table.freeLock(this);"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["generatedKeys=null;","try{","con.log.println(sql);","SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);","if(maxRows!=0&&(cmd.getMaxRows()==-1||cmd.getMaxRows()\>maxRows))"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["this.type=type;","protectedObjectclone()throwsCloneNotSupportedException{","returnsuper.clone();","finalStringgetName(){","returnname;","finalvoidsetName(Stringname){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["intfactor=1;","if(newScale\>scale){","for(;newScale\>scale;scale++){","factor*=10;","if(factor==1000000000){","mul(factor);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["booleanisFirst(){","returnrowIdx==0&&rowList.size()\>0;","booleanfirst()throwsException{","rowIdx=-1;","returnnext();","booleanprevious()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["for(inti=0;types!=null&&i\<types.length;i++){","if(\"TABLE\".equalsIgnoreCase(types[i]))isTypeTable=true;","if(\"VIEW\".equalsIgnoreCase(types[i]))isTypeView=true;","if(database!=null){","Stringstables=database.getTables(tableNamePattern);","for(inti=0;i\<tables.size();i++){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["doublegetDouble()throwsException{","returnExpressionValue.getDouble(getObject(),getDataType());","longgetMoney()throwsException{","returnExpressionValue.getMoney(getObject(),getDataType());","MutableNumericgetNumeric()throwsException{","returnExpressionValue.getNumeric(getObject(),getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["importjava.util.Set;","publicclassLanguage{","publicstaticfinalStringCUSTOM_MESSAGE=\"SS-0000\";","publicstaticfinalStringUNSUPPORTED_OPERATION=\"SS-0001\";","publicstaticfinalStringCANT_LOCK_FILE=\"SS-0003\";","publicstaticfinalStringDB_EXISTENT=\"SS-0030\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returngetLong(getObject(),dataType);","staticlonggetLong(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(storePageWrite==null)","throwSmallSQLException.create(Language.ROW_LOCKED);","storePage=storePageWrite;","voidupdateFinsh(SSConnectioncon,StoreImplnewData)throwsSQLException{","type=SQLTokenizer.UPDATE;","if(newData.offset\<=sizePhysical||filePos==-1){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["case13:","case113://default+millis;ddmonyyyyhh:mm:ss:mmm(24h)","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return\"owner\";","publicStringgetProcedureTerm(){","return\"procedure\";","publicStringgetCatalogTerm(){","return\"database\";","publicbooleanisCatalogAtStart(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(lock.con==con)","inserts.add(lock.getLink());","returninserts;","finalTableStorePagerequestLock(SSConnectioncon,intpageOperation,longpage)throwsException{","synchronized(locks){","if(raFile==null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(endTime==0)","endTime=System.currentTimeMillis()+5000;","longwaitTime=endTime-System.currentTimeMillis();","if(waitTime\<=0)","throwSmallSQLException.create(Language.TABLE_DEADLOCK,name);","locks.wait(waitTime);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["this.column=column;","DataSourcegetDataSource(){","returnfromEntry;","StringgetTableAlias(){returntableAlias;}","finalTableViewgetTable(){","returntable;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["expr.setEnd();","returnexpr;","default:","thrownewError();","token=nextToken(MISSING_WHEN_ELSE_END);","privateExpressionfunction(Commandcmd,SQLTokentoken,booleanisEscape)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["compileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionParams(Expressionexpr)throwsException{","Expression[]expParams=expr.getParams();","isAggregateFunction=isAggregateFunction||expr.getType()\>=Expression.GROUP_BEGIN;","if(expParams!=null){","for(intk=0;k\<expParams.length;k++){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["return38;","returndefaultValue;","caseSQLTokenizer.TIMESTAMP:","return23;","caseSQLTokenizer.TIME:","return8;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicstaticfinalStringPK_ONLYONE=\"SS-0221\";","publicstaticfinalStringKEY_DUPLICATE=\"SS-0222\";","publicstaticfinalStringMONTH_TOOLARGE=\"SS-0251\";","publicstaticfinalStringDAYS_TOOLARGE=\"SS-0252\";","publicstaticfinalStringHOURS_TOOLARGE=\"SS-0253\";","publicstaticfinalStringMINUTES_TOOLARGE=\"SS-0254\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().intValue();","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"TAN\",TAN);","addKeyWord(\"TRUNCATE\",TRUNCATE);","staticfinalintASCII=1100;//firststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","staticfinalintBITLEN=1101;","staticfinalintCHARLEN=1102;","staticfinalintCHARACTLEN=1103;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);","returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,String[]columnNames)throwsSQLException{","setNeedGeneratedKeys(columnNames);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intstart=Math.min(Math.max(0,param2.getInt()-1),bytes.length);","intlength=Math.min(param3.getInt(),bytes.length);","ByteArrayOutputStreambuffer=newByteArrayOutputStream();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["returnreadInt();","caseSQLTokenizer.BIGINT:","return(int)readLong();","caseSQLTokenizer.REAL:","return(int)readFloat();","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intdataTypeIdx=Math.min(Utils.indexOf(typeLeft,DatatypeRange),Utils.indexOf(typeRight,DatatypeRange));","if(dataTypeIdx\<0)thrownewError(\"getDataType():\"+typeLeft+\",\"+typeRight);","returnDatatypeRange[dataTypeIdx];","staticfinalintOR=11;//OR","staticfinalintAND=21;//AND","staticfinalintNOT=31;//NOT"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","inserts.add(lock.getLink());","}else{","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con==con)"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["booleanisLastValues=(i==count-1);","if(expr.isNull()){","page=addNull(page,rowOffset,isLastValues);","}else{","switch(expr.getDataType()){","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(cmdSel.compile(con)){","cmdSel.from.execute();","if(cmdSel.columnExpressions.size()!=1)","throwSmallSQLException.create(Language.SUBQUERY_COL_COUNT,newInteger(cmdSel.columnExpressions.size()));","index.clear();","while(cmdSel.next()){"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["SQLExceptioncreateUnspportedDataType(intdataType){","Object[]params={","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())","};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC,params);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["finalintgetColumnIdx(intcolumn)throwsSQLException{","if(column\<1||column\>columns.size())","throwSmallSQLException.create(Language.COL_IDX_OUT_RANGE,String.valueOf(column));","returncolumn-1;","finalExpressiongetColumnExpression(intcolumn)throwsSQLException{","returncolumns.get(getColumnIdx(column));"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["super(joinType,left,right,null);","this.leftEx=leftEx;","this.rightEx=rightEx;","this.compare=compare;","createIndex(rightEx);","privatevoidcreateIndex(ExpressionsrightEx)throwsException{"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["value=node.value;","node=node.nextLetter;","}else{","value=0;","node=null;","}else{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["catalogs.add(catalog);","Object[][]result=newObject[catalogs.size()][];","catalogs.toArray(result);","returnresult;","StringsgetTables(StringtablePattern){","Stringslist=newStrings();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(value[i]!=0){","count=2*(value.length-i)+1;","break;","char[]puffer=newchar[count];","puffer[0]=(char)count;","for(intc=1;c\<count;){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(level\<2){","startOffset=offset;","correctPointers(pointer,oldOffset,diff,level+1);","offset=startOffset;","firstNode=false;","}else{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnSQLTokenizer.RTRIM;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["throwSmallSQLException.create(Language.COL_MISSING,columnName);","finalvoidsetDistinct(booleandistinct){","this.isDistinct=distinct;","finalvoidsetSource(RowSourcejoin){","this.from=join;","finalvoidsetTables(DataSourcesfrom){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.DECIMAL:","MutableNumericnumeric=expr.getNumeric();","numeric.setScale(column.getScale());","writeNumeric(numeric);","break;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(expr.getDataType()){","caseSQLTokenizer.UNIQUEIDENTIFIER:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rowIdx=(int)rowPosition;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","voidnullRow(){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["finalStringget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(Stringdescr){","if(size\>=data.length){"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["publicintgetMaxTableNameLength(){","return255;","publicintgetMaxTablesInSelect(){","return0;","publicintgetMaxUserNameLength(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["voidsaveRef(StoreImploutput)throwsSQLException{","IndexNodeloadRef(longoffset)throwsSQLException{","thrownewError();","voidload(StoreImplinput)throwsSQLException{","intlength=input.readInt();","remainderKey=(length\>0)?input.readChars(length):null;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["remainderKey=null;","finalvoidclearValue(){","value=null;","finalObjectgetValue(){","returnvalue;","finalIndexNode[]getChildNodes(){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Expressionparam=expParams[k];","intparamType=param.getType();","isAggregateFunction=isAggregateFunction||paramType\>=Expression.GROUP_BEGIN;","if(paramType==Expression.NAME)","compileLinkExpressionName((ExpressionName)param);","elsecompileLinkExpressionParams(param);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["((page[5]&0xFF)\<\<16)|","((page[6]&0xFF)\<\<8)|","((page[7]&0xFF));","this.raFile=raFile;","this.filePos=filePos;","privateStorePagecreateStorePage(){"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["importsmallsql.database.language.Language;","finalclassSQLParser{","SSConnectioncon;","privatechar[]sql;","privateListtokens;","privateinttokenIdx;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Columns(){","data=newColumn[16];","finalintsize(){","returnsize;","finalColumnget(intidx){","if(idx\>=size)"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["buffer.append(param4.getString());","if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));","buffer.append(str.substring(start+length));","returnbuffer.toString();","intgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["ForeignKeyforeignKey=references.get(i);","IndexDescriptionpk=foreignKey.pk;","IndexDescriptionfk=foreignKey.fk;","if((pkTable==null||pkTable.equals(foreignKey.pkTable))&&","(fkTable==null||fkTable.equals(foreignKey.fkTable))){","StringscolumnsPk=pk.getColumns();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["switch(operation){","caseOR:returnleft.getBoolean()||right.getBoolean();","caseAND:returnleft.getBoolean()&&right.getBoolean();","caseNOT:return!left.getBoolean();","caseLIKE:returnUtils.like(left.getString(),right.getString());","caseISNULL:returnleft.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalvoidclear(){","Entrytab[]=table;","for(inti=0;i\<tab.length;i++)","tab[i]=null;","size=0;","finalbooleancontainsValue(TableStorePagevalue){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseSQLTokenizer.CLOB:{","finalStringleftStr=left.getString();","finalStringrightStr=right.getString();","intcomp=String.CASE_INSENSITIVE_ORDER.compare(leftStr,rightStr);","switch(operation){","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{TABLE_DEADLOCK,\"01000\"},","{TABLE_OR_VIEW_MISSING,\"01000\"},","{TABLE_FILE_INVALID,\"01000\"},","{TABLE_OR_VIEW_FILE_INVALID,\"01000\"},","{TABLE_EXISTENT,\"01000\"},","{FK_NOT_TABLE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["fromSource=join(cmd,tables,fromSource,Join.RIGHT_JOIN);","break;","caseSQLTokenizer.FULL:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["set(expr.getObject(),expr.getDataType());","break;","caseCOUNT:","if(!expr.isNull())((MutableInteger)value).value++;","break;","caseSUM:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalbooleanisLast()throwsException{","if(row==0){","returnfalse;","if(row\>getRowCount()){","returnfalse;","booleanisNext=next();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["for(inti=0;i\>places;i--){","factor*=10;","value/=factor;","value-=value%1;//moduloalsoworkwithvalueslargerlong","if(places\>0){","value/=factor;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["voidsetCurrentOffsetInPage(intnewOffset){","this.offset=newOffset;","voidwriteByte(intvalue){","intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnbuffer.toByteArray();","returnstr1;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr1=param1.getString();","Stringstr2=param2.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["buffer.position(0);","raFile.write(buffer);","StoreImplgetStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","TableStorePagestorePage=requestLock(con,pageOperation,filePos);","returnStoreImpl.createStore(this,storePage,pageOperation,filePos);","StoreImplgetStore(TableStorePagestorePage,intpageOperation)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["row=0;","booleanisExpressionsFromThisRowSource(Expressionscolumns){","returnrowSource.isExpressionsFromThisRowSource(columns);","privatefinalintgetRowCount(){","returnsortedRowCount+insertedRows.size();","privatefinalintcurrentInsertedRow(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["staticlongcalcMillis(intyear,intmonth,finalintday,finalinthour,finalintminute,finalintsecond,finalintmillis){","longresult=millis;","result+=second*1000;","result+=minute*60000;","result+=hour*3600000;","result+=(day-1)*86400000L;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionCeilingextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.CEILING;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.ceil(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCeiling.java|"],
"["StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","CommandTablecmdCreate=newCommandTable(con.log,catalog,tableName,SQLTokenizer.CREATE);","SQLTokentoken=nextToken(MISSING_PARENTHESIS_L);","nextCol:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["isFullNotValid=temp;","if(!result){","if(fullRowCount==0){","returnfalse;","if(fullReturnCounter\<0){","fullReturnCounter=0;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["privateintsortedRowCount;","privatelonglastRowOffset;","SortedResult(RowSourcerowSource,ExpressionsorderBy){","this.rowSource=rowSource;","this.orderBy=orderBy;","finalbooleanisScrollable(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["currentGroup=(currentGroup==null)?","expr:","newExpressionArithmetic(currentGroup,expr,ExpressionArithmetic.AND);","expressions=internalExpressions;","for(intc=0;c\<expressions.size();c++){","addColumn(newColumnExpression(expressions.get(c)));"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["staticfinalintLOCK_TAB=4;//lockthetotaltable","TableView(Stringname,Columnscolumns){","this.name=name;","this.columns=columns;","staticTableViewload(SSConnectioncon,Databasedatabase,Stringname)throwsSQLException{","FileChannelraFile=null;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["while(isCurrentRow&&!isValidRow()){","isCurrentRow=rowSource.next();","row=1;","returnisCurrentRow;","finalbooleanprevious()throwsException{","booleanoldIsCurrentRow=isCurrentRow;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["intnextColCount=ds.getTableView().columns.size();","if(colCount==-1)","colCount=nextColCount;","else","if(colCount!=nextColCount)","throwSmallSQLException.create(Language.UNION_DIFFERENT_COLS,newObject[]{newInteger(colCount),newInteger(nextColCount)});"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["factor=1;","mul(factor);","}else{","for(;newScale\<scale;scale--){","factor*=10;","if(factor==1000000000){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{BYTEARR_INVALID_SIZE,\"01000\"},","{LOB_DELETED,\"01000\"},","{PARAM_CLASS_UNKNOWN,\"01000\"},","{PARAM_EMPTY,\"01000\"},","{PARAM_IDX_OUT_RANGE,\"01000\"},","{COL_DUPLICATE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["importsmallsql.database.language.Language;","publicclassSSCallableStatementextendsSSPreparedStatementimplementsCallableStatement{","privatebooleanwasNull;","SSCallableStatement(SSConnectioncon,Stringsql)throwsSQLException{","super(con,sql);","SSCallableStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["for(inti=0;i\<size;i++){","Columncolumn=data[i];","if(name.equalsIgnoreCase(column.getName())){","returncolumn;","returnnull;","finalvoidadd(Columncolumn){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["while(from.next()){","beforeFirst();","while(next()){","if(currentGroup==null||currentGroup.getBoolean()){","accumulateRow();","continueNextRow;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["for(intp=0;p\<cases.size();p++){","cases.set(p,params[i++]);","results.set(p,params[i++]);","if(i\<params.length)","elseResult=params[i];","voidsetParamAt(Expressionparam,intidx){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["Object[]params=newObject[]{","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(type),","getKeywordFromOperation(operation)","};","returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER,params);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnLong.parseLong(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalprivateCommandSelectselect()throwsSQLException{","CommandSelectselCmd=singleSelect();","SQLTokentoken=nextToken();","UnionAllunion=null;","while(token!=null&&token.value==SQLTokenizer.UNION){","if(union==null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleangetBoolean(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnfalse;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["daten[12]=hex2byte(chars,28);","daten[13]=hex2byte(chars,30);","daten[14]=hex2byte(chars,32);","daten[15]=hex2byte(chars,34);","returndaten;","privatestaticbytehex2byte(char[]hex,intoffset)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{STXADD_ADDITIONAL_TOK,\"Tokenaggiuntivodopolafinedell\'\'istruzioneSQL.\"},","{STXADD_IDENT_EXPECT,\"Identificatoreatteso.\"},","{STXADD_IDENT_EMPTY,\"Identificatorevuoto.\"},","{STXADD_IDENT_WRONG,\"Identificatoreerrato\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"Operatore\'\'meno\'\'nonvalidoperiltipodidatovarbinary.\"},","{STXADD_FUNC_UNKNOWN,\"Funzionesconosciuta.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returngetMoneyImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatelonggetMoneyImpl()throwsjava.lang.Exception{","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["params[idx]=param;","finalExpression[]getParams(){returnparams;}","voidoptimize()throwsSQLException{","if(params!=null){","for(intp=0;p\<params.length;p++){","params[p].optimize();"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["}else{","if(value.length==1&&(value[0]\>0)){","returnUtils.double2long(value[0]/scaleDoubleFactor[scale]*signum);","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["importjava.math.*;","publicclassMoneyextendsNumberimplementsMutable{","privatestaticfinallongserialVersionUID=-620300937494609089L;","longvalue;","privateMoney(){/*shouldbeempty*/}","publicMoney(doublevalue){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["{DELETE_WO_FROM,\"01000\"},","{INSERT_WO_FROM,\"01000\"},","{TABLE_CANT_RENAME,\"01000\"},","{TABLE_CANT_DROP,\"01000\"},","{TABLE_CANT_DROP_LOCKED,\"01000\"},","{TABLE_CORRUPT_PAGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicstaticfinalStringINSERT_WO_FROM=\"SS-0164\";","publicstaticfinalStringTABLE_CANT_RENAME=\"SS-0190\";","publicstaticfinalStringTABLE_CANT_DROP=\"SS-0191\";","publicstaticfinalStringTABLE_CANT_DROP_LOCKED=\"SS-0192\";","publicstaticfinalStringTABLE_CORRUPT_PAGE=\"SS-0193\";","publicstaticfinalStringTABLE_MODIFIED=\"SS-0194\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["}else{","columns.add(newColumnExpression(expr));","staticvoiddrop(Databasedatabase,Stringname)throwsException{","Filefile=newFile(Utils.createTableViewFileName(database,name));","booleanok=file.delete();","if(!ok)throwSmallSQLException.create(Language.VIEW_CANTDROP,name);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["intgetInt()throwsException{","if(isNull())return0;","switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","return(int)(param2.getLong()-param1.getLong());","caseSQLTokenizer.SQL_TSI_SECOND:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["returnnum;","}else{","MutableNumericnum=left.getNumeric();","num.mul(right.getNumeric());","returnnum;","caseDIV:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Distinct(RowSourcerowSource,Expressionscolumns){","this.rowSource=rowSource;","this.distinctColumns=columns;","finalvoidexecute()throwsException{","rowSource.execute();","index=newIndex(true);"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["while(right.next()){","fullRightRowCounter++;","fullRowCount=fullRightRowCounter;","}else{","result=right.next();","if(!result){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["checkStatement();","returnqueryTimeout;","finalpublicvoidsetQueryTimeout(intseconds)throwsSQLException{","checkStatement();","queryTimeout=seconds;","finalpublicvoidcancel()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["comp=leftBytes[i]\<rightBytes[i]?-1:1;","break;","if(comp==0&&leftBytes.length!=rightBytes.length){","comp=leftBytes.length\<rightBytes.length?-1:1;","returncomp;","staticCommandSelectcreateMemoryCommandSelect(SSConnectioncon,String[]colNames,Object[][]data)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{STXADD_IDENT_WRONG,\"Identificatoreerrato\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"Operatore\'\'meno\'\'nonvalidoperiltipodidatovarbinary.\"},","{STXADD_FUNC_UNKNOWN,\"Funzionesconosciuta.\"},","{STXADD_PARAM_INVALID_COUNT,\"Totaleparametrinonvalido.\"},","{STXADD_JOIN_INVALID,\"Sintassidellajoinnonvalida.\"},","{STXADD_FROM_PAR_CLOSE,\"Parentesichiusanonattesanellaclausolafrom.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case10://USAmm-dd-yy","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returntrue;","publicbooleansupportsCatalogsInTableDefinitions(){","returntrue;","publicbooleansupportsCatalogsInIndexDefinitions(){","returntrue;","publicbooleansupportsCatalogsInPrivilegeDefinitions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{UNSUPPORTED_CONVERSION_OPER,\"Conversionenonsupportataversoiltipodidato\'\'{0}\'\'daltipo\'\'{1}\'\'perl\'\'operazione\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Tipodidato\'\'{0}\'\'nonsupportatoperl\'\'operazione\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Tipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Conversioneversoiltipodidato\'\'{0}\'\'nonsupportatoperlafunzione\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"TipononsupportatoperlafunzioneCONVERT:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"TipononsupportatoperlafunzioneSUM:\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2float(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionDayOfYearextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.DAYOFYEAR;","finalintgetInt()throwsException{","if(param1.isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfYear.java|"],
"["caseSQLTokenizer.CLUSTERED:","continue;","default:","throwcreateSyntaxError(token,COMMANDS_CREATE);","privateCommandCreateDatabasecreateDatabase()throwsSQLException{","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this(complement);","this.scale=scale;","MutableNumeric(doubleval){","this(newBigDecimal(String.valueOf(val)));","MutableNumeric(floatval){","this(newBigDecimal(String.valueOf(val)));"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["MutableNumericnewValue=expr.getNumeric();","if(newValue!=null)","((MutableNumeric)value).add(newValue);","break;","caseSQLTokenizer.MONEY:","((Money)value).value+=expr.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Expression[]newParams=newExpression[3];","newParams[0]=newExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","newParams[1]=params[1];","newParams[2]=params[0];","params=newParams;","paramCount=3;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.math.BigDecimal;","importjava.sql.*;","importsmallsql.database.language.Language;","publicclassExpressionValueextendsExpression{","privateObjectvalue;","privateintdataType;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalintSQL_BIGINT=1350;","staticfinalintSQL_BINARY=1351;","staticfinalintSQL_BIT=1352;","staticfinalintSQL_CHAR=1353;","staticfinalintSQL_DATE=1354;","staticfinalintSQL_DECIMAL=1355;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.LEFT_JOIN);","break;","caseSQLTokenizer.RIGHT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnbytes;","}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID,String.valueOf(offset));/*,offset*/","privatestaticinthexDigit2int(chardigit){","if(digit\>=\'0\'&&digit\<=\'9\')returndigit-\'0\';","digit|=0x20;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject().toString();","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2hex(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringSUBQUERY_COL_COUNT=\"SS-0160\";","publicstaticfinalStringJOIN_DELETE=\"SS-0161\";","publicstaticfinalStringJOIN_INSERT=\"SS-0162\";","publicstaticfinalStringDELETE_WO_FROM=\"SS-0163\";","publicstaticfinalStringINSERT_WO_FROM=\"SS-0164\";","publicstaticfinalStringTABLE_CANT_RENAME=\"SS-0190\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalbooleanisEmpty(){","returnsize==0;","finalTableStorePageget(longkey){","inti=(int)(key%table.length);","Entrye=table[i];","while(true){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["doublegetDouble()throwsException{","returnMath.floor(param1.getDouble());","StringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;","returnobj.toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionFloor.java|"],
"["caseADD:","caseSUB:","returnMath.max(left.getScale(),right.getScale());","caseMUL:","returnleft.getScale()+right.getScale();","caseDIV:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["MutableNumericgetNumeric(intcolIdx)throwsException{","returnget(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{","returnget(colIdx).getObject();","StringgetString(intcolIdx)throwsException{","returnget(colIdx).getString();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["try{","iterator.remove();","database.close();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","privatefinalvoidclose()throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["MutableNumericnum=param1.getNumeric();","num.floor();","returnnum;","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDouble());","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["importjava.sql.PreparedStatement;","importjava.sql.SQLException;","importjava.sql.SQLWarning;","importjava.sql.Savepoint;","importjava.sql.Statement;","importjava.util.ArrayList;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["finalbooleanisAfterLast(){","introwCount=getRowCount();","returnrow\>rowCount||rowCount==0;","voidafterLast()throwsException{","useSetRowPosition=false;","if(sortedRowCount\>0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["Stringkey=keyValue.substring(0,idx1).toLowerCase().trim();","Stringvalue=keyValue.substring(idx1+1).trim();","props.put(key,value);","}else{","throwSmallSQLException.create(Language.CUSTOM_MESSAGE,\"Missingequalinproperty:\"+keyValue);","returnprops;"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;","caseSQLTokenizer.COMMA:","continuenextCol;","token=addColumn(token,cmdCreate);","if(token==null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatebooleannullable=true;","privateintscale;","privateintprecision;","privateintdataType;","privateIdentitycounter;//counterforidentityvalues","voidsetName(Stringname){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returncommandSelect.from.getRowPosition();","voidsetRowPosition(longrowPosition)throwsException{","commandSelect.from.setRowPosition(rowPosition);","finalbooleanrowInserted(){","returncommandSelect.from.rowInserted();","finalbooleanrowDeleted(){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["Object[][]data=newObject[rows.size()][];","rows.toArray(data);","CommandSelectcmdSelect=Utils.createMemoryCommandSelect(con,colNames,data);","Expressionsorder=newExpressions();","order.add(newExpressionName(\"TABLE_TYPE\"));","order.add(newExpressionName(\"TABLE_NAME\"));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returndelete();","caseSQLTokenizer.INSERT:","returninsert();","caseSQLTokenizer.UPDATE:","returnupdate();","caseSQLTokenizer.CREATE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["removeNodeLastLevel();//theend0ofanode","if(shift\>=3)","break;","offset=offset1;","offset1=offset2;","offset2=offset3;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(longValue\>0)","return1;","return0;","caseSQLTokenizer.MONEY:","longValue=param1.getMoney();","if(longValue\<0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["if(token==null)returnfromSource;","switch(token.value){","caseSQLTokenizer.ON:","previousToken();","returnfromSource;","caseSQLTokenizer.CROSS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(isNull())returnnull;","returnnewDouble(getDouble());","finalStringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;","returnobj.toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);","intgetScale(){","returngetScale(getDataType());","finalstaticintgetScale(intdataType){","switch(dataType){","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["default:","throwcreateSyntaxError(tokenType,COMMANDS_DROP);","privateCommandalter()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_ALTER);","Stringcatalog;","StringtableName=catalog=nextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["patchExpressions(cmd.columnExpressions);","if(having!=null)having=patchExpression(having);","patchExpressions(orderBy);","finalprivateintaddInternalExpressionFromGroupBy(Expressionexpr)throwsSQLException{","inttype=expr.getType();","if(type\>=Expression.GROUP_BEGIN){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnbuf.toString();","case107://Mondd,yyyy","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\',\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return(dValue\<0)?newDouble(-dValue):para1;","caseSQLTokenizer.REAL:","doublefValue=((Float)para1).floatValue();","return(fValue\<0)?newFloat(-fValue):para1;","caseSQLTokenizer.BIGINT:","longlValue=((Number)para1).longValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["buf.append(\'/\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case2://ANSIyy.mm.dd","formatNumber(details.year%100,2,buf);","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticSQLExceptioncreateFromException(Throwablee){","if(einstanceofSQLException){","return(SQLException)e;","else{","Stringmessage=stripMsg(e);","StringsqlState=language.getSqlState(Language.CUSTOM_MESSAGE);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["returntrue;","returnfalse;","@Override","finalvoidnullRow(){","row=0;","store=Store.NULL;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["rootPage.clear();","finalstaticprivateintfloatToBinarySortOrder(floatvalue){","intintValue=Float.floatToIntBits(value);","return(intValue\<0)?","~intValue:","intValue^0x80000000;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["Object[]param={\"CreateProcedure\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommanddrop()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_DROP);","Stringcatalog;","Stringname=catalog=nextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["abstractclassTableView{","staticfinalintMAGIC_TABLE=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'T\';","staticfinalintMAGIC_VIEW=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'V\';","staticfinalintTABLE_VIEW_VERSION=2;","staticfinalintTABLE_VIEW_OLD_VERSION=1;","finalStringname;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","privatevoidgroup(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);","cmd.setGroup(expressionTokenList(cmd,SQLTokenizer.GROUP));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalRowSourceright;","privatebooleanisBeforeFirst=true;","privatebooleanisOuterValid=true;","privateboolean[]isFullNotValid;","privateintfullRightRowCounter;","privateintfullRowCount;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["switch(operation){","caseADD:returnlVal+rVal;","throwcreateUnspportedConversion(SQLTokenizer.VARCHAR);","intgetDataType(){","switch(operation){","caseNEGATIVE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TIMESTAMPDIFF:","token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);","nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampDiff(token.value,expr,expression(cmd,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["data[size2]=value1;","data[size2+1]=value2;","size++;","finalvoidclear(){","size=0;","privatefinalvoidresize(intnewSize){"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["finalintgetRow(){","returnrowPos==1?1:0;","finallonggetRowPosition(){","returnrowPos;","finalvoidsetRowPosition(longrowPosition){","rowPos=(int)rowPosition;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["publicvoidupdateDouble(StringcolumnName,doublex)throwsSQLException{","updateDouble(findColumn(columnName),x);","publicvoidupdateBigDecimal(StringcolumnName,BigDecimalx)throwsSQLException{","updateBigDecimal(findColumn(columnName),x);","publicvoidupdateString(StringcolumnName,Stringx)throwsSQLException{","updateString(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["Indexindex=newIndex(false);","lastRowOffset=-1;","while(rowSource.next()){","lastRowOffset=rowSource.getRowPosition();","index.addValues(lastRowOffset,orderBy);","sortedRowCount++;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returntemp/scaleDoubleFactor[scale]*signum;","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleDoubleFactor[scale]*signum;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(!status.asc^scroll){","intidx=++status.idx;","if(idx==-1){","if(status.nodeValue!=null){","if(status.nodeValueinstanceofIndexNode){","level++;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["returngetIntImpl()*10000;","caseSQLTokenizer.BIGINT:","returngetLongImpl()*10000;","caseSQLTokenizer.REAL:","returnUtils.doubleToMoney(getFloatImpl());","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{TABLE_CANT_DROP,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'.\"},","{TABLE_CANT_DROP_LOCKED,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'perchÃ©Ã¨inLOCK.\"},","{TABLE_CORRUPT_PAGE,\"Paginadellatabellacorrottaallaposizione:{0}.\"},","{TABLE_MODIFIED,\"Latabella\'\'{0}\'\'Ã¨statamodificata.\"},","{TABLE_DEADLOCK,\"Deadlock:nonsipuÃ²mettereunlocksullatabella\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"Latabella/view\'\'{0}\'\'nonesiste.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;","caseSQLTokenizer.COMMA:","continuenextCol;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finaldoublegetDouble()throwsException{","if(isNull())return0;","finalintplaces=param2.getInt();","doublevalue=param1.getDouble();","longfactor=1;","if(places\>0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["buf.append(SQLTokenizer.getKeyWord(i));","returnbuf.toString();","publicStringgetNumericFunctions(){","returngetFunctions(SQLTokenizer.ABS,SQLTokenizer.TRUNCATE);","publicStringgetStringFunctions(){","returngetFunctions(SQLTokenizer.ASCII,SQLTokenizer.UCASE);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{RSET_ON_INSERT_ROW,\"DerCursorzeigtaktuellaufdieEinfÃ¼geposition(insertrow).\"},","{ROWSOURCE_READONLY,\"DieRowsourceistschreibgeschÃ¼tzt.\"},","{STMT_IS_CLOSED,\"DasStatementistbereitsgeschlossen.\"},","{SUBQUERY_COL_COUNT,\"DieAnzahlderSpalteninderSubquerymuss1seinundnicht{0}.\"},","{JOIN_DELETE,\"DieMethodedeleteRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{JOIN_INSERT,\"DieMethodeinsertRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnexecuteUpdate(sql);","finalpublicbooleanexecute(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);","returnexecute(sql);","finalpublicbooleanexecute(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["returnfalse;//Booleanoperationsreturneveraresult???,butatleastISNULLandISNOTNULL","caseNEGATIVE:","caseBIT_NOT:","returnleft.isNull();","default:returnleft.isNull()||right.isNull();","byte[]getBytes()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["SQLTokentoken=nextToken(MISSING_SELECT);","CommandCreateViewcmd=newCommandCreateView(con.log,viewName);","cmd.sql=newString(sql,token.offset,sql.length-token.offset);","select();//Parsetocheckforvalid","returncmd;","privateCommandTablecreateIndex(booleanunique)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intlength=nodes.length-1;","IndexNode[]temp=newIndexNode[length];","System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos+1,temp,pos,length-pos);","nodes=temp;","finalvoidaddNode(chardigit,longrowOffset)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["for(inti=1;i\<=count;i++){","System.out.print(md.getColumnLabel(i));","System.out.print(\'\\t\');","System.out.println();","while(rs.next()){","for(inti=1;i\<=count;i++){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["intnewsize=data.length\<\<1;","if(newsize\>0xFFFFFF){//seepointerSize","newsize=0xFFFFFF;","if(newsize==data.length)throwSmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);","byte[]temp=newbyte[newsize];","System.arraycopy(data,0,temp,0,data.length);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["break;","caseSQLTokenizer.DATE:","writeDate(expr.getLong());","break;","caseSQLTokenizer.SMALLDATETIME:","writeSmallDateTime(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalchargetDigit(){","returndigit;","finalbooleangetUnique(){","returnunique;","finalbooleanisEmpty(){","returnnodes==EMPTY_NODES&&value==null;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["try{","returngetFromLocaleTree(localeStr);","catch(IllegalArgumentExceptione){","returngetDefaultLanguage();","publicstaticLanguagegetDefaultLanguage(){","StringdfltLocaleStr=Locale.getDefault().toString();"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if((chr1\>=\'0\'&&\'9\'\>=chr1)||chr1==\'.\'){","previousToken();","if(token.length\>1&&(sql[token.offset+1]|0x20)==\'x\'){","if(isMinus){","throwcreateSyntaxError(token,Language.STXADD_OPER_MINUS);","returnnewExpressionValue(Utils.hex2bytes(sql,token.offset+2,token.length-2),SQLTokenizer.VARBINARY);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["packagesmallsql.database;","finalclassIndexNodeScrollStatus{","finalbooleanasc;","finalIndexNode[]nodes;","intidx;","finalObjectnodeValue;"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getDouble()==right.getDouble();","caseGREATER:returnleft.getDouble()\>right.getDouble();","caseGRE_EQU:returnleft.getDouble()\>=right.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicvoidsetString(StringparameterName,Stringx)throwsSQLException{","setString(findParameter(parameterName),x);","publicvoidsetBytes(StringparameterName,byte[]x)throwsSQLException{","setBytes(findParameter(parameterName),x);","publicvoidsetDate(StringparameterName,Datex)throwsSQLException{","setDate(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["}else{","if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleFloatFactor[scale]*signum;","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalvoidafterLast(){","filePos=-1;","noRow();","@Override","finalintgetRow(){","returnrow;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnnext();","booleanprevious()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()==0){","scrollStatus.afterLast();","row--;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["packagesmallsql.database.language;","publicclassLanguage_deextendsLanguage{","protectedLanguage_de(){","addMessages(ENTRIES);","publicString[][]getEntries(){","returnENTRIES;"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["}else{","previousToken();","Expressionslist=expressionParenthesisList(cmd);","leftExpr=newExpressionArithmetic(leftExpr,list,operation);","break;","caseSQLTokenizer.IS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["divImpl(quotient);","finalprivatevoiddivImpl(intquotient){","if(quotient==1)return;","if(quotient\<0){","quotient=-quotient;","signum=-signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["classScrollableextendsRowSource{","privateintrowIdx;","Scrollable(RowSourcerowSource){","this.rowSource=rowSource;","finalbooleanisScrollable(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["}else","if(num.scale\>scale){","setScale(num.scale);","add(num.signum,num.value);","privatevoidadd(intsig2,int[]val2){","if(val2.length\>value.length){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["privateintsize;","privateExpression[]data;","Expressions(){","data=newExpression[16];","Expressions(intinitSize){","data=newExpression[initSize];"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["src[j]=null;","do{","Entrynext=e.next;","e.next=null;","inti=(int)(e.key%newCapacity);","if(newTable[i]==null){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["return(intValue\<0)?","~intValue:","intValue^0x8000000000000000L;","finalstaticprivateintshortToBinarySortOrder(intvalue){","returnvalue^0x8000;","finalstaticprivateintintToBinarySortOrder(intvalue){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["addKeyWord(\"DD\",SQL_TSI_DAY);","addKeyWord(\"SQL_TSI_DAY\",SQL_TSI_DAY);","addKeyWord(\"WK\",SQL_TSI_WEEK);","addKeyWord(\"WW\",SQL_TSI_WEEK);","addKeyWord(\"SQL_TSI_WEEK\",SQL_TSI_WEEK);","addKeyWord(\"M\",SQL_TSI_MONTH);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.sql.Savepoint;","importjava.sql.Statement;","importjava.util.ArrayList;","importjava.util.List;","importjava.util.Map;","importjava.util.Properties;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["testClosedConnection();","returncommitPages.size();//thecallisatomic,thatitneednotbesynchronized","publicSavepointsetSavepoint()throwsSQLException{","returnnewSSSavepoint(getSavepoint(),null,transactionTime);","publicSavepointsetSavepoint(Stringname)throwsSQLException{","returnnewSSSavepoint(getSavepoint(),name,transactionTime);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["TableStorePagestorePage=newTableStorePage(con,this,LOCK_NONE,-2);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-2);","StoreImplgetLobStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","if(lobs==null){","lobs=newLobs(this);","returnlobs.getStore(con,filePos,pageOperation);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary())!=0;","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp()!=0;","caseSQLTokenizer.TIME:","returnreadTime()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.CHARLEN:","caseSQLTokenizer.CHARACTLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCharLen();","break;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["daten[7]=hex2byte(chars,14);","daten[6]=hex2byte(chars,16);","daten[8]=hex2byte(chars,19);","daten[9]=hex2byte(chars,21);","daten[10]=hex2byte(chars,24);","daten[11]=hex2byte(chars,26);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicstaticfinalStringGROUP_AGGR_INVALID=\"SS-0430\";","publicstaticfinalStringGROUP_AGGR_NOTPART=\"SS-0431\";","publicstaticfinalStringORDERBY_INTERNAL=\"SS-0432\";","publicstaticfinalStringUNION_DIFFERENT_COLS=\"SS-0433\";","publicstaticfinalStringINDEX_EXISTS=\"SS-0460\";","publicstaticfinalStringINDEX_MISSING=\"SS-0461\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Columncol=newColumn();","if(dataType==SQLTokenizer.LONG){","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.RAW){","dataType=SQLTokenizer.LONGVARBINARY;","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["fromSource=newJoin(Join.CROSS_JOIN,fromSource,rowSource(cmd,tables,0),null);","break;","caseSQLTokenizer.INNER:","nextToken(MISSING_JOIN);","caseSQLTokenizer.JOIN:","fromSource=join(cmd,tables,fromSource,Join.INNER_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intstart=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,newFloat(x),SQLTokenizer.REAL);","publicvoidsetDouble(intparameterIndex,doublex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newDouble(x),SQLTokenizer.DOUBLE);","publicvoidsetBigDecimal(intparameterIndex,BigDecimalx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["returnnewMutableNumeric(signum,value,scale);","voidwriteTimestamp(longts){","writeLong(ts);","longreadTimestamp(){","returnreadLong();","voidwriteTime(longtime){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return_left\>=right.getLong()&&right2.getLong()\>=_left;","default:","returngetLong()!=0;","caseSQLTokenizer.REAL:","switch(operation){","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatefinalbooleanreadonly;","privatefinalFiledirectory;","privatefinalFileChannelmaster;","privatefinalWeakHashMapconnections=newWeakHashMap();","staticDatabasegetDatabase(Stringname,SSConnectioncon,booleancreate)throwsSQLException{","if(name==null){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","return(long)(Utils.bytes2double(readLongBinary())*10000L);","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidwriteLongString(Stringdaten)throwsException{","char[]chars=daten.toCharArray();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,chars.length*2L+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(chars.length);","store.writeChars(chars);","writeLong(store.writeFinsh(null));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["locks.remove(pageKey);","}else{","locks.put(pageKey,lock.nextLock);","}else{","prev.nextLock=lock.nextLock;","return;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["importjava.sql.*;","importjava.text.DateFormatSymbols;","importjava.util.Calendar;","importjava.util.TimeZone;","importsmallsql.database.language.Language;","publicfinalclassDateTimeimplementsMutable{"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["expr=exprName=newExpressionName(expr.getAlias());","Columncolumn=exprName.getColumn();","if(column==null){","column=newColumn();","exprName.setFrom(this,idx,column);","switch(exprName.getType()){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["do{","Entrynext=e.next;","e.next=null;","inti=(int)(e.key%newCapacity);","if(newTable[i]==null){","newTable[i]=e;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["{JOIN_DELETE,\"01000\"},","{JOIN_INSERT,\"01000\"},","{DELETE_WO_FROM,\"01000\"},","{INSERT_WO_FROM,\"01000\"},","{TABLE_CANT_RENAME,\"01000\"},","{TABLE_CANT_DROP,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["staticfinalintLOCK_INSERT=1;//preventonlyLOCK_TAB","staticfinalintLOCK_READ=2;//occuronreadandpreventawriteofdata,itcanoccurmoreasoneLOCK_READperpage","staticfinalintLOCK_WRITE=3;//occuronwriteandpreventeveryotheraccesstothedata,itisonlyoneLOCK_WRITEperpagepossible","staticfinalintLOCK_TAB=4;//lockthetotaltable","TableView(Stringname,Columnscolumns){","this.name=name;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseSQLTokenizer.SQL_TSI_WEEK:{","returnparam2.getLong()+param1.getLong()*604800000;","}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong();","returnDateTime.calcMillis(details2);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["caseSQLTokenizer.BIT:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getInt()==right.getInt();","caseGREATER:returnleft.getInt()\>right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returncolumn;","finalpublicStringtoString(){","if(tableAlias==null)returnString.valueOf(getAlias());","returntableAlias+\".\"+getAlias();","StringgetTableName(){","if(table!=null){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returndatatype.getPrecision();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returngetFunctions(SQLTokenizer.ABS,SQLTokenizer.TRUNCATE);","publicStringgetStringFunctions(){","returngetFunctions(SQLTokenizer.ASCII,SQLTokenizer.UCASE);","publicStringgetSystemFunctions(){","returngetFunctions(SQLTokenizer.IFNULL,SQLTokenizer.IIF);","publicStringgetTimeDateFunctions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.MONEY:","longlongValue=readLong()/10000;","returnUtils.money2int(longValue);","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["result[3]=(byte)(value\>\>32);","result[4]=(byte)(value\>\>24);","result[5]=(byte)(value\>\>16);","result[6]=(byte)(value\>\>8);","result[7]=(byte)(value);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnnewMutableNumeric(readDouble());","caseSQLTokenizer.MONEY:","returnnewMutableNumeric(readLong(),4);","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(readInt(),4);","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["StringlangClassName=Language.class.getName()+\'_\'+part;","try{","return(Language)Class.forName(langClassName).newInstance();","catch(IllegalAccessExceptione){","assert(false):\"Internalerror:mustneverhappen.\";","catch(ClassNotFoundExceptione){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(!(objinstanceofDateTime))returnfalse;","DateTimevalue=(DateTime)obj;","returnvalue.time==time&&value.dataType==dataType;","StringtoString(intstyle){","if(style\<0)","returntoString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){","return(float)value;","publicintintValue(){"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["intseconds=(int)(time%60000);","if(seconds\<0){","seconds+=60000;","time-=seconds;","break;","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicvoidupdateShort(StringcolumnName,shortx)throwsSQLException{","updateShort(findColumn(columnName),x);","publicvoidupdateInt(StringcolumnName,intx)throwsSQLException{","updateInt(findColumn(columnName),x);","publicvoidupdateLong(StringcolumnName,longx)throwsSQLException{","updateLong(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalprivatebooleanmove(){","if(rowIdx\<rowList.size()&&rowIdx\>=0){","currentRow=(ExpressionValue[])rowList.get(rowIdx);","returntrue;","currentRow=null;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["default:","throwcreateSyntaxError(token,Language.STXADD_FUNC_UNKNOWN);","if(invalidParamCount){","throwcreateSyntaxError(token,Language.STXADD_PARAM_INVALID_COUNT);","expr.setParams(params);","returnexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case3:","value=loadRef(input.readLong());","break;","default:","throwSmallSQLException.create(Language.INDEX_CORRUPT,String.valueOf(valueType));","nodes=newIndexNode[input.readShort()];"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnnextIdentifier();","}else{","previousToken();","returnname;","finalprivatebooleanisKeyword(SQLTokentoken){","if(token==null)returnfalse;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["leftExpr=expression(cmd,0);","token=nextToken(MISSING_PARENTHESIS_R);","break;","default:","leftExpr=expressionSingle(cmd,token);","booleanisNot=false;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["sIdx++;","break;","default:","if(range){//%wildcardisactive","for(;sIdx\<value.length();sIdx++){","if(Character.toUpperCase(value.charAt(sIdx))==m)break;//Countermustn\'tincrementbeforebreak"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.VARCHAR:{","Stringstr=convertToString();","intlength=datatype.getDisplaySize();","if(length\>str.length())","returnstr;","returnstr.substring(0,length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(!oldFile.renameTo(tmpFile)){","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","if(!newFile.renameTo(oldFile)){","tmpFile.renameTo(oldFile);//restoretheoldtable","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","tmpFile.delete();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["intlength=complement.length;","if(length==0){","value=EMPTY_INTS;","signum=0;","return;","value=newint[(length+3)/4];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicStringgetSchemaTerm(){","return\"owner\";","publicStringgetProcedureTerm(){","return\"procedure\";","publicStringgetCatalogTerm(){","return\"database\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.REPLACE:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionReplace();","break;","caseSQLTokenizer.RIGHT:","invalidParamCount=(paramCount!=2);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["((SSSavepoint)savepoint).transactionTime=0;","return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,newObject[]{savepoint});","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicvoidupdateDate(StringcolumnName,Datex)throwsSQLException{","updateDate(findColumn(columnName),x);","publicvoidupdateTime(StringcolumnName,Timex)throwsSQLException{","updateTime(findColumn(columnName),x);","publicvoidupdateTimestamp(StringcolumnName,Timestampx)throwsSQLException{","updateTimestamp(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","publicclassExpressionArithmeticextendsExpression{","privateExpressionleft;","privateExpressionright;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{TABLE_CORRUPT_PAGE,\"Corrupttablepageatposition:{0}.\"},","{TABLE_MODIFIED,\"Table\'\'{0}\'\'wasmodified.\"},","{TABLE_DEADLOCK,\"Deadlock,cannotcreatealockontable\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TableorView\'\'{0}\'\'doesnotexist.\"},","{TABLE_FILE_INVALID,\"File\'\'{0}\'\'doesnotincludeavalidSmallSQLTable.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidTableorViewstore.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(raFile!=null){","raFile.close();","raFile=null;","privatefinalvoidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_INDEX);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returngetResult().getLong();","finalfloatgetFloat()throwsException{","returngetResult().getFloat();","finaldoublegetDouble()throwsException{","returngetResult().getDouble();","finallonggetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["returnexpr;","finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){","case0:","left=param;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnstr1;","byte[]str3=param3.getBytes();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","intidx1=0;","intidx2=Utils.indexOf(str2,str1,idx1);","while(idx2\>0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["setNeedGeneratedKeys(columnIndexes);","returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,String[]columnNames)throwsSQLException{","setNeedGeneratedKeys(columnNames);","returnexecuteUpdate(sql);","finalpublicbooleanexecute(Stringsql,intautoGeneratedKeys)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["expr=newExpressionFunctionTimestampAdd(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);","returnexpr;","ExpressionsparamList=expressionParenthesisList(cmd);","intparamCount=paramList.size();","Expression[]params=paramList.toArray();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetObject(findColumn(columnName));","publicintfindColumn(StringcolumnName)throwsSQLException{","returngetCmd().findColumn(columnName)+1;","publicReadergetCharacterStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Readerobject\");","publicvoidupdateObject(intcolumnIndex,Objectx,intscale)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.VARBINARY:","writeBinary(expr.getBytes(),column.getPrecision(),dataType!=SQLTokenizer.BINARY);","break;","caseSQLTokenizer.TINYINT:","writeByte(expr.getInt());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["createStorePage().commit();","@Override","publicfloatfloatValue(){","returnvalue;","@Override","publicdoubledoubleValue(){"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["returnnull;","publicvoidclearWarnings(){","publicStringgetCursorName(){","returnnull;","publicResultSetMetaDatagetMetaData(){","returnmetaData;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalbooleanisAfterLast(){","returnrow\>0&&!isCurrentRow;","finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();","row=0;","finalbooleanfirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["files[i].delete();","dir.delete();","break;","caseSQLTokenizer.TABLE:","Database.dropTable(con,catalog,name);","break;"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","finalvoiddeleteRow(SSConnectioncon)throwsSQLException{","intsavepoint=con.getSavepoint();","try{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["}else{","if(Character.toUpperCase(value.charAt(sIdx))!=m)returnfalse;","sIdx++;","break;","while(pattern.length()\>mIdx){","if(Character.toUpperCase(pattern.charAt(mIdx++))!=\'%\')returnfalse;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalvoidsaveValue(longrowOffset)throwsSQLException{","if(unique){","if(value!=null)throwSmallSQLException.create(Language.KEY_DUPLICATE);","value=newLong(rowOffset);","}else{","LongTreeListlist=(LongTreeList)value;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,validValues);","if(validValues==MISSING_EXPRESSION){","returntoken;//anexpressioncanbecontainedineverytoken.","if(validValues==MISSING_IDENTIFIER){","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintNVARCHAR=355;","staticfinalintSYSNAME=357;","staticfinalintLONGVARCHAR=359;","staticfinalintLONGNVARCHAR=360;","staticfinalintLONG=361;","staticfinalintCLOB=362;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseExpression.MIN:","caseExpression.FIRST:","caseExpression.LAST:","caseExpression.SUM:","ExpressionbaseExpression=exprName.getParams()[0];","column.setPrecision(baseExpression.getPrecision());"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["if(tableName==catalog)catalog=null;","CommandTablecmd=newCommandTable(con.log,catalog,tableName,SQLTokenizer.INDEX);","Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();","expressionDefList(cmd,expressions,columns);","IndexDescriptionindexDesc=newIndexDescription("]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","classExpressionFunctionFloorextendsExpressionFunctionReturnP1Number{","intgetFunction(){returnSQLTokenizer.FLOOR;}","doublegetDouble()throwsException{","returnMath.floor(param1.getDouble());","StringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionFloor.java|"],
"["cmd.addColumnExpression(list.get(i));","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","}elsecmd.noColumns=true;","Switch:while(true)","switch(token.value){","caseSQLTokenizer.VALUES:{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));","}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR,newObject[]{newInteger(offset),newString(hex)});","staticStringbytes2unique(byte[]daten,intoffset){","if(daten.length-offset\<16){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"ELSE\",ELSE);","addKeyWord(\"END\",END);","addKeyWord(\"SWITCH\",SWITCH);","staticfinalintBIT=300;","staticfinalintBOOLEAN=301;","staticfinalintBINARY=310;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseResultSet.TYPE_FORWARD_ONLY:","caseResultSet.TYPE_SCROLL_INSENSITIVE:","caseResultSet.TYPE_SCROLL_SENSITIVE:","returntrue;","returnfalse;","publicbooleansupportsResultSetConcurrency(inttype,intconcurrency){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"REAL\"});","@Override","doublegetDouble(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=columns.get(c);//COLUMN_NAME","row[4]=Utils.getShort(c+1);//KEY_SEQ","row[5]=index.getName();//PK_NAME","rows.add(row);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnpage[offset++];","intreadUnsignedByte(){","returnpage[offset++]&0xFF;","voidwriteBoolean(booleanvalue){","intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintDEGREES=1008;","staticfinalintEXP=1009;","staticfinalintFLOOR=1010;","staticfinalintLOG=1011;","staticfinalintLOG10=1012;","staticfinalintMOD=1013;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["tables.add(viewResult);","returnviewResult;","Stringcatalog=null;","Stringname=getIdentifier(token);","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["daten[i]=(char)((page[offset++]&0xFF)|(page[offset++]\<\<8));","returndaten;","voidwriteLongString(Stringdaten)throwsException{","char[]chars=daten.toCharArray();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,chars.length*2L+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(chars.length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnparam1.getNumeric().getSignum();","caseSQLTokenizer.DOUBLE:","doubledoubleValue=param1.getDouble();","if(doubleValue\<0)","return-1;","if(doubleValue\>0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["intlength=key.length;","inti=-1;","while(true){","chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);","node=node.getChildNode(digit);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticfinalintSQL_REAL=1361;","staticfinalintSQL_SMALLINT=1362;","staticfinalintSQL_TIME=1363;","staticfinalintSQL_TIMESTAMP=1364;","staticfinalintSQL_TINYINT=1365;","staticfinalintSQL_VARBINARY=1366;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["thrownewError(\"Compareoperationnotsupported:\"+compare);","privatebooleannextEquals()throwsException{","if(rowList!=null){","longrowPosition=rowList.getNext(longListEnum);","if(rowPosition!=-1){","right.setRowPosition(rowPosition);"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCos();","break;","caseSQLTokenizer.COT:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCot();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalvoidupdateRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;","intcount=tableColumns.size();","StoreImplnewStore=table.getStoreTemp(con);","synchronized(con.getMonitor()){","((StoreImpl)this.store).createWriteLock();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["Object[]row=data[r];","ExpressionValue[]rowValues=newExpressionValue[row.length];","addRow(rowValues);","for(intc=0;c\<colCount;c++){","ExpressionValueexpr=rowValues[c]=newExpressionValue();","expr.set(row[c],-1);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.INT:","returnnewMutableNumeric(getIntImpl());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLongImpl());","caseSQLTokenizer.REAL:","returnnewMutableNumeric(getFloatImpl());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["expr=newExpressionFunctionRepeat();","break;","caseSQLTokenizer.REPLACE:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionReplace();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["inti=(int)(key%table.length);","Entryprev=table[i];","Entrye=prev;","while(e!=null){","Entrynext=e.next;","if(e.key==key){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["return(int)value;","@Override","publiclonglongValue(){","returnvalue;","@Override","publicStringtoString(){"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["throwsIllegalArgumentException{","Stringpart=localeStr;","while(true){","StringlangClassName=Language.class.getName()+\'_\'+part;","try{","return(Language)Class.forName(langClassName).newInstance();"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["synchronized(locks){","if(tabLockConnection!=null&&tabLockConnection!=con)returnnull;","switch(con.isolationLevel){","caseConnection.TRANSACTION_SERIALIZABLE:","serializeConnections.put(con,con);","break;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returngetResult().isNull();","finalbooleangetBoolean()throwsException{","returngetResult().getBoolean();","finalintgetInt()throwsException{","returngetResult().getInt();","finallonggetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.TAN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionTan();","break;","caseSQLTokenizer.TRUNCATE:","invalidParamCount=(paramCount!=2);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Expressionexpr;","switch(token.value){","caseSQLTokenizer.CONVERT:{","Columncol;","Expressionstyle=null;","if(isEscape){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getBoolean();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbytegetByte(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(token==null)break;","switch(token.value){","caseSQLTokenizer.WHERE:","where(cmd);","returncmd;","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticLanguagegetFromLocaleTree(StringlocaleStr)","throwsIllegalArgumentException{","Stringpart=localeStr;","while(true){","StringlangClassName=Language.class.getName()+\'_\'+part;","try{"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["break;","caseSQLTokenizer.LOG:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog();","break;","caseSQLTokenizer.LOG10:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.createFromException(e);","publicObjectgetObject(StringcolumnName)throwsSQLException{","returngetObject(findColumn(columnName));","publicintfindColumn(StringcolumnName)throwsSQLException{","returngetCmd().findColumn(columnName)+1;","publicReadergetCharacterStream(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privateRowSourcetableSource(Commandcmd,DataSourcestables)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_L://(","returnrowSource(cmd,tables,SQLTokenizer.PARENTHESIS_R);","caseSQLTokenizer.ESCAPE_L://{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(longvalue){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=value;"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["Filefile=newFile(directory,Utils.MASTER_FILENAME);","if(!file.exists())","throwSmallSQLException.create(Language.DB_NOT_DIRECTORY,name);","master=Utils.openRaFile(file,readonly);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(num.scale\>scale){","setScale(num.scale);","add(num.signum,num.value);","privatevoidadd(intsig2,int[]val2){","if(val2.length\>value.length){","int[]temp=val2;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(longvalue){","if(size\>=data.length){","resize(size\<\<1);"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.TIMESTAMP:","offset+=8;","break;","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returntrue;","publicbooleansupportsCatalogsInPrivilegeDefinitions(){","returntrue;","publicbooleansupportsPositionedDelete(){","returntrue;","publicbooleansupportsPositionedUpdate(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}else{","result=right.next();","if(!result){","switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["newTable[i]=e;","}else{","Entryentry=newTable[i];","while(entry.next!=null)entry=entry.next;","entry.next=e;","e=next;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["formatNumber(details.second,2,buf);","switch(dataType){","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","buf.append(\'.\');","formatMillis(details.millis,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=left.getNumeric();","num.mul(right.getInt());","returnnum;","}else","if(getDataType(left.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.SMALLINT:","page=add(page,rowOffset,shortToBinarySortOrder(expr.getInt()),isLastValues,1);","break;","caseSQLTokenizer.INT:","page=add(page,rowOffset,intToBinarySortOrder(expr.getInt()),isLastValues,2);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(Character.toUpperCase(value.charAt(sIdx))==m)break;//Countermustn\'tincrementbeforebreak","if(sIdx\>=value.length())returnfalse;","intlastmIdx=mIdx-1;","sIdx++;","while(pattern.length()\>mIdx&&value.length()\>sIdx){","m=Character.toUpperCase(pattern.charAt(mIdx++));"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["super(\"UNION\",newColumns());","this.sql=null;","this.commandSelect=commandSelect;","createColumns(con);","privatevoidcreateColumns(SSConnectioncon)throwsException{","commandSelect.compile(con);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["returnfromEntry.getLong(colIdx);","floatgetFloat()throwsException{","returnfromEntry.getFloat(colIdx);","doublegetDouble()throwsException{","returnfromEntry.getDouble(colIdx);","longgetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["Expressionsrc=updateValues[i];","if(src!=null){","newStore.writeExpression(src,tableColumns.get(i));","}else{","copyValueInto(i,newStore);","((StoreImpl)this.store).updateFinsh(con,newStore);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["return0;","publicintgetMaxCharLiteralLength(){","return0;","publicintgetMaxColumnNameLength(){","return255;","publicintgetMaxColumnsInGroupBy(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["longgetMoney(intoffset,intdataType)throwsException{","thrownoCurrentRow();","MutableNumericgetNumeric(intoffset,intdataType)throwsException{","thrownoCurrentRow();","ObjectgetObject(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["this.signum=signum;","this.value=value;","this.scale=scale;","MutableNumeric(MutableNumericnumeric){","this.signum=numeric.signum;","this.value=newint[numeric.value.length];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["lock.lockType=LOCK_WRITE;","returnlock;","prevLock=lock;","lock=lock.nextLock;","lock=newTableStorePage(con,this,LOCK_WRITE,readlock.fileOffset);","if(prevLock!=null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["cases.set(p,param);","finalintgetFunction(){","returnSQLTokenizer.CASE;","finalbooleanisNull()throwsException{","returngetResult().isNull();","finalbooleangetBoolean()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSUM:","caseFIRST:","caseLAST:","clear();","break;","caseMIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(expr.getType()==Expression.NAME)","compileLinkExpressionName((ExpressionName)expr);","elsecompileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionName(ExpressionNameexpr)throwsException{","StringtableAlias=expr.getTableAlias();","if(tableAlias!=null){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(fullReturnCounter\>=fullRowCount){","returnfalse;","right.next();","returntrue;","}else","isFullNotValid[fullRightRowCounter-1]=result;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnrow;","@Override","finallonggetRowPosition(){","returnfilePos;","@Override","finalvoidsetRowPosition(longrowPosition)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.TINYINT:","offset++;","break;","caseSQLTokenizer.SMALLINT:","offset+=2;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return(int)Double.parseDouble(str);","longgetLong()throwsException{","returngetLong(getObject(),dataType);","staticlonggetLong(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(params[0].getType()==Expression.NAME){","ExpressionNameparam=(ExpressionName)params[0];","if(\"*\".equals(param.getName())&&param.getTableAlias()==null){","params[0]=newExpressionValue(\"*\",SQLTokenizer.VARCHAR);","expr=newExpressionName(Expression.COUNT);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","default:","thrownewError(String.valueOf(expr.getDataType()));","returnpage;","finalvoidaddValues(longrowOffset,Expressionsexpressions)throwsException{","IndexNodepage=this.rootPage;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));","buffer.write(bytes,start+length,bytes.length-start-length);","returnbuffer.toByteArray();","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["finalprivateCommandSelectcommandSelect;","ViewResult(Viewview){","this.view=view;","this.columnExpressions=view.commandSelect.columnExpressions;","this.commandSelect=view.commandSelect;","ViewResult(SSConnectioncon,CommandSelectcommandSelect)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["{TABLE_CANT_RENAME,\"Latabella\'\'{0}\'\'nonpuÃ²essererinominata.\"},","{TABLE_CANT_DROP,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'.\"},","{TABLE_CANT_DROP_LOCKED,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'perchÃ©Ã¨inLOCK.\"},","{TABLE_CORRUPT_PAGE,\"Paginadellatabellacorrottaallaposizione:{0}.\"},","{TABLE_MODIFIED,\"Latabella\'\'{0}\'\'Ã¨statamodificata.\"},","{TABLE_DEADLOCK,\"Deadlock:nonsipuÃ²mettereunlocksullatabella\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["case113://default+millis;ddmonyyyyhh:mm:ss:mmm(24h)","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","}while(token.value==SQLTokenizer.MINUS||token.value==SQLTokenizer.PLUS);","default:","SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.PARENTHESIS_L){","if(isMinus)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["scrollStatus=index.createScrollStatus(orderBy);","useSetRowPosition=false;","finalbooleanisBeforeFirst(){","returnrow==0;","finalbooleanisFirst(){","returnrow==1;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returnstorePage.commit();","}else{","return0;","finalvoidcreateWriteLock()throwsSQLException{","TableStorePagestorePageWrite=table.requestWriteLock(((TableStorePage)storePage).con,(TableStorePage)storePage);","if(storePageWrite==null)"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.WHEN:","Expressioncondition=expression(cmd,0);","if(input!=null){","condition=newExpressionArithmetic(input,condition,ExpressionArithmetic.EQUALS);","nextToken(MISSING_THEN);","Expressionresult=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","FileLocklock=channel.tryLock();","if(lock==null){","throwSmallSQLException.create(Language.CANT_LOCK_FILE,file);","}catch(SQLExceptionsqlex){","throwsqlex;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseNEGATIVE:return-rVal;","caseMOD:returnlVal%rVal;","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","floatgetFloat()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["abstractclassExpressionFunctionReturnP1NumberextendsExpressionFunctionReturnP1{","finalbooleangetBoolean()throwsException{","returngetDouble()!=0;","finalintgetInt()throwsException{","returnUtils.long2int(getLong());","finallonggetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["returnmove();","finalbooleanlast(){","rowIdx=rowList.size()-1;","returnmove();","finalbooleanisLast(){","returnrowIdx==rowList.size()-1&&currentRow!=null;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["return3;","caseSQLTokenizer.SMALLINT:","return5;","caseSQLTokenizer.INT:","caseSQLTokenizer.SMALLMONEY:","return10;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{PARAM_IDX_OUT_RANGE,\"L\'\'indice{0}perilparametroÃ¨fuoridall\'\'intervalloconsentito(1\<=n\<={1}).\"},","{COL_DUPLICATE,\"Nomedicolonnaduplicato:\'\'{0}\'\'.\"},","{COL_MISSING,\"Colonna\'\'{0}\'\'nontrovata.\"},","{COL_VAL_UNMATCH,\"IlconteggiodicolonneevalorinonÃ¨identico.\"},","{COL_INVALID_SIZE,\"Lunghezzanonvalida({0})perlacolonna\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Ilprefissodicolonna\'\'{0}\'\'noncoincideconunaliasonomeditabellausatonellaquery.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["addKeyWord(\"SQRT\",SQRT);","addKeyWord(\"TAN\",TAN);","addKeyWord(\"TRUNCATE\",TRUNCATE);","staticfinalintASCII=1100;//firststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","staticfinalintBITLEN=1101;","staticfinalintCHARLEN=1102;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(scale\>0){","while(buf.length()\<=scale)buf.insert(0,\'0\');","buf.insert(buf.length()-scale,\'.\');","if(signum\<0)buf.insert(0,\'-\');","returnbuf.toString();","publicintcompareTo(MutableNumericnumeric){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["}else{","filePos=-1;","noRow();","returnfalse;","finalprivatebooleanmoveToValidRow()throwsException{","while(filePos\>=0){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["Columncolumn=newColumn();","column.setDataType(SQLTokenizer.NULL);","columns.add(column);","for(intr=0;r\<data.length;r++){","Object[]row=data[r];","ExpressionValue[]rowValues=newExpressionValue[row.length];"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["MutableNumericobj=getValue(columnIndex).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal(scale);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["case130://Kuwaitiddmonyyyyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalintgetInt()throwsException{","return(int)getDouble();","finallonggetLong()throwsException{","return(long)getDouble();","finalfloatgetFloat()throwsException{","return(float)getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["((long)(page[offset++]&0xFF)\<\<24)|","((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));","voidwriteDouble(doublevalue){","writeLong(Double.doubleToLongBits(value));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidwriteChars(char[]daten){","intlength=daten.length;","intnewSize=offset+2*length;","if(newSize\>page.length)resizePage(newSize);","for(inti=0;i\<length;i++){","charc=daten[i];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["StringBufferbuf=newStringBuffer(bytes.length\<\<1);","for(inti=0;i\<bytes.length;i++){","buf.append(digits[(bytes[i]\>\>4)&0x0F]);","buf.append(digits[(bytes[i])&0x0F]);","returnbuf.toString();","staticbyte[]hex2bytes(char[]hex,intoffset,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(rowSource.next()){","row++;","lastRowOffset=rowSource.getRowPosition();","insertedRows.add(lastRowOffset);","returntrue;","rowSource.noRow();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["row=1;","returnisCurrentRow;","finalbooleanprevious()throwsException{","booleanoldIsCurrentRow=isCurrentRow;","do{","isCurrentRow=rowSource.previous();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","if(!readBoolean()){","Stringdef=readString();","column.setDefaultValue(newSQLParser().parseExpression(def),def);","returncolumn;","voidcopyValueFrom(StoreImplstore,intvalueOffset,intlength){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringINDEX_TOOMANY_EQUALS=\"SS-0464\";","publicstaticfinalStringFILE_TOONEW=\"SS-0490\";","publicstaticfinalStringFILE_TOOOLD=\"SS-0491\";","publicstaticfinalStringFILE_CANT_DELETE=\"SS-0492\";","publicstaticfinalStringROW_0_ABSOLUTE=\"SS-0520\";","publicstaticfinalStringROW_NOCURRENT=\"SS-0521\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicvoidsetTimestamp(StringparameterName,Timestampx,Calendarcal)throwsSQLException{","setTimestamp(findParameter(parameterName),x,cal);","publicvoidsetNull(StringparameterName,intsqlType,StringtypeName)throwsSQLException{","setNull(findParameter(parameterName),sqlType,typeName);","publicStringgetString(StringparameterName)throwsSQLException{","returngetString(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnnewExpressionValue(newInteger(tok),SQLTokenizer.INT);","}catch(NumberFormatExceptione){","returnnewExpressionValue(newLong(tok),SQLTokenizer.BIGINT);","}else{","checkValidIdentifier(tok,token);","ExpressionNameexpr=newExpressionName(tok);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<valueLength;i++){","longv=(value[i]&0xFFFFFFFFL)+carryover;","value[i]=(int)(v/quotient);","carryover=((v%quotient)\<\<32);","carryover/=quotient;","if(carryover\>2147483648L||//2147483648L==Integer.MAX_VALUE+1"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["beforeFirst();","returnnext();","booleannext()throwsException{","if(isAfterLast)returnfalse;","row++;","booleanresult=scroll.next();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(isUpdatable){","isInsertRow=true;","clearRowBuffer();","}else{","throwSmallSQLException.create(Language.RSET_READONLY);","publicvoidmoveToCurrentRow()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privatestaticfinalint[]COMMANDS_CREATE_UNIQUE={SQLTokenizer.INDEX,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]MISSING_TABLE={SQLTokenizer.TABLE};","privatestaticfinalint[]ESCAPE_MISSING_CLOSE={SQLTokenizer.ESCAPE_R};","privatestaticfinalint[]MISSING_EXPRESSION={SQLTokenizer.VALUE};","privatestaticfinalint[]MISSING_IDENTIFIER={SQLTokenizer.IDENTIFIER};","privatestaticfinalint[]MISSING_BY={SQLTokenizer.BY};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetNumeric().getSignum()!=0;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["nextToken(MISSING_PARENTHESIS_R);","}else{","previousToken();","Expressionslist=expressionParenthesisList(cmd);","leftExpr=newExpressionArithmetic(leftExpr,list,operation);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["inttype;","while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();","switch(type){","caseINDEX:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){","expr.setFrom(fromEntry,colIdx,table);","break;","}else","throwSmallSQLException.create(Language.COL_INVALID_NAME,newObject[]{expr.getName()});"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["throwSmallSQLException.createFromException(e);","publicDategetDate(StringcolumnName,Calendarcal)throwsSQLException{","returngetDate(findColumn(columnName),cal);","publicTimegetTime(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(StringcolumnName,Calendarcal)throwsSQLException{","returngetDate(findColumn(columnName),cal);","publicTimegetTime(intcolumnIndex,Calendarcal)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.BIT_OR:returnBIT_OR;","caseSQLTokenizer.BIT_AND:returnBIT_AND;","caseSQLTokenizer.BIT_XOR:returnBIT_XOR;","caseSQLTokenizer.TILDE:returnBIT_NOT;","default:return0;","staticintgetDataType(Expressionleft,Expressionright){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["condition=newExpressionArithmetic(input,condition,ExpressionArithmetic.EQUALS);","nextToken(MISSING_THEN);","Expressionresult=expression(cmd,0);","expr.addCase(condition,result);","break;","caseSQLTokenizer.ELSE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["CommandTablecmdCreate=newCommandTable(con.log,catalog,tableName,SQLTokenizer.CREATE);","SQLTokentoken=nextToken(MISSING_PARENTHESIS_L);","nextCol:","while(true){","token=nextToken(MISSING_EXPRESSION);","StringconstraintName;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnfromEntry;","StringgetTableAlias(){returntableAlias;}","finalTableViewgetTable(){","returntable;","finalintgetColumnIndex(){","returncolIdx;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["throwSmallSQLException.create(Language.ROW_LOCKED);","storePage=storePageWrite;","voidupdateFinsh(SSConnectioncon,StoreImplnewData)throwsSQLException{","type=SQLTokenizer.UPDATE;","if(newData.offset\<=sizePhysical||filePos==-1){","page=newData.page;//newDataisonlyatempStoreImpl"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalprivateCommandparse(char[]sql)throwsSQLException{","this.sql=sql;","this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;","SQLTokentoken=nextToken(COMMANDS);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.io.PrintStream;","importjava.io.PrintWriter;","importjava.sql.DriverManager;","importjava.sql.SQLException;","importjava.text.MessageFormat;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewTimestamp(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.DECIMAL:","returngetDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatedoublegetDoubleImpl()throwsjava.lang.Exception{","if(operation==NEGATIVE)","returngetDoubleImpl(0,left.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Stringstr=obj.toString().trim();","try{","returnInteger.parseInt(str);","}catch(Throwableth){/*ANumberFormatExceptioncanoccurifitafloatingpointnumber*/}","return(int)Double.parseDouble(str);","longgetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["importjava.util.ArrayList;","importsmallsql.database.language.Language;","classSSStatementimplementsStatement{","finalSSConnectioncon;","Commandcmd;","privatebooleanisClosed;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["}else{","LongTreeListlist=(LongTreeList)value;","if(list==null){","value=list=newLongTreeList();","list.add(rowOffset);","finalvoidaddRemainderKey(longrowOffset,longremainderValue,intcharCount)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["if(dataTypeIdx\>=INT_IDX)","returnSQLTokenizer.INT;","if(dataTypeIdx\>=BIGINT_IDX)","returnSQLTokenizer.BIGINT;","if(dataTypeIdx\>=MONEY_IDX)","returnSQLTokenizer.MONEY;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateExpressionssources=newExpressions();","privateExpression[]newRowSources;","CommandUpdate(Loggerlog){","super(log);","voidaddSetting(Expressiondest,Expressionsource){","columnExpressions.add(dest);"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};","Databasedatabase;","if(catalog==null){","database=con.getDatabase(true);","if(database!=null)","catalog=database.getName();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["raFile.close();","commandSelect=(CommandSelect)newSQLParser().parse(con,sql);","createColumns(con);","View(Databasedatabase,SSConnectioncon,Stringname,Stringsql)throwsException{","super(name,newColumns());","this.sql=sql;"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","tmpFile.delete();","staticvoiddropView(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropView(tableName);","voiddropView(StringviewName)throwsException{","synchronized(tableViews){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnsql;","publicvoidsetAutoCommit(booleanautoCommit)throwsSQLException{","if(log.isLogging())log.println(\"AutoCommit:\"+autoCommit);","if(this.autoCommit!=autoCommit){","commit();","this.autoCommit=autoCommit;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["if(!acceptsURL(url)){","returnnull;","returnnewSSConnection(parse(url,info));","privatePropertiesparse(Stringurl,Propertiesinfo)throwsSQLException{","Propertiesprops=(Properties)info.clone();","if(!acceptsURL(url)){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["returngetFloat(findParameter(parameterName));","publicdoublegetDouble(StringparameterName)throwsSQLException{","returngetDouble(findParameter(parameterName));","publicbyte[]getBytes(StringparameterName)throwsSQLException{","returngetBytes(findParameter(parameterName));","publicDategetDate(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=con.getDatabase(false).getBestRowIdentifier(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetVersionColumns(Stringcatalog,Stringschema,Stringtable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnUtils.bytes2hex(readBinary());","caseSQLTokenizer.TINYINT:","returnString.valueOf(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnString.valueOf(readShort());","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(style\<0)","returntoString();","Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();","switch(style){","case0:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{ALIAS_UNSUPPORTED,\"Aliasnonsupportatoperquestotipodisorgenterighe.\"},","{ISOLATION_UNKNOWN,\"LivellodiIsolamentotransazionesconosciuto:{0}.\"},","{FLAGVALUE_INVALID,\"Flagnonvalidanelmetodo\'\'getMoreResults\'\':{0}.\"},","{ARGUMENT_INVALID,\"Argomentononvalidonelmetodo\'\'setNeedGenratedKeys\'\':{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnonrichieste.\"},","{SEQUENCE_HEX_INVALID,\"Sequenzaesadecimalenonvalidoallaposizione{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["privatevoidwrite(Databasedatabase,SSConnectioncon)throwsException{","FileChannelraFile=createFile(con,database);","StorePagestorePage=newStorePage(null,-1,raFile,8);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.CREATE,8);","store.writeString(sql);","store.writeInt(0);//nomoreadditinalinformations"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:","returnreadTime();","caseSQLTokenizer.DATE:","returnreadDate();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatelonggetMoneyImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getMoney()+right.getMoney();","caseSUB:returnleft.getMoney()-right.getMoney();","caseMUL:returnleft.getMoney()*right.getMoney()/10000;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["output.writeInt(length);","if(length\>0)output.writeChars(remainderKey);","if(value==null){","output.writeByte(0);","}else","if(valueinstanceofLong){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{PARAM_IDX_OUT_RANGE,\"ParameterIndex{0}liegtauÃŸerhalbdesGÃ¼ltigkeitsbereiches.DerWertmusszwischen1und{1}liegen.\"},","{COL_DUPLICATE,\"EsgibteinendoppeltenSpaltennamen:\'\'{0}\'\'.\"},","{COL_MISSING,\"Spalte\'\'{0}\'\'wurdenichtgefunden.\"},","{COL_VAL_UNMATCH,\"DieSpaltenanzahlundWerteanzahlistnichtidentisch.\"},","{COL_INVALID_SIZE,\"UngÃ¼ltigeSpaltengrÃ¶ÃŸe{0}fÃ¼rSpalte\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"DerSpaltenprefix\'\'{0}\'\'passtzukeinemTabellennamenoderAliasnamenindieserAbfrage.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["this.view=view;","this.columnExpressions=view.commandSelect.columnExpressions;","this.commandSelect=view.commandSelect;","ViewResult(SSConnectioncon,CommandSelectcommandSelect)throwsSQLException{","try{","this.view=newView(con,commandSelect);"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["if(i\<validValues.length-2)","msgBuf.append(\",\");","else","if(i==validValues.length-2)","msgBuf.append(\"or\");","Stringmessage=getErrorString("]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.FULL_JOIN);","break;","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.ESCAPE_R:","if(parenthesis==token.value)returnfromSource;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.JOIN:","fromSource=join(cmd,tables,fromSource,Join.INNER_JOIN);","break;","caseSQLTokenizer.LEFT:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["classStorePageMap{","privateEntry[]table;","privateintsize;","privateintthreshold;","StorePageMap(){","threshold=12;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.SOUNDEX;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["staticfinalintEXP=1009;","staticfinalintFLOOR=1010;","staticfinalintLOG=1011;","staticfinalintLOG10=1012;","staticfinalintMOD=1013;","staticfinalintPI=1014;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.PROCEDURE:","returnnewCommandDrop(con.log,catalog,name,tokenType.value);","default:","throwcreateSyntaxError(tokenType,COMMANDS_DROP);","privateCommandalter()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_ALTER);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintLESSER=55;//\<","staticfinalintLES_EQU=56;//\<=","staticfinalintUNEQUALS=57;//\<\>","staticfinalintIN=61;//IN","staticfinalintBETWEEN=62;//BETWEEN","staticfinalintLIKE=63;//LIKE"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintLONGNVARCHAR=360;","staticfinalintLONG=361;","staticfinalintCLOB=362;","staticfinalintNCLOB=363;","staticfinalintUNIQUEIDENTIFIER=370;","staticfinalintJAVA_OBJECT=371;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;}","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","caseSQLTokenizer.MOD:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionMod();","break;","caseSQLTokenizer.PI:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(param1.getBoolean())","returnparam2.getMoney();","returnparam3.getMoney();","MutableNumericgetNumeric()throwsException{","if(param1.getBoolean())","returnparam2.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["returnrowSource.rowDeleted();","voidnullRow(){","rowSource.nullRow();","rowIdx=-1;","voidnoRow(){","rowSource.noRow();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returnSQLTokenizer.SPACE;","booleanisNull()throwsException{","returnparam1.isNull()||param1.getInt()\<0;","finalStringgetString()throwsException{","if(isNull())returnnull;","intsize=param1.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["switch(token.value){","caseSQLTokenizer.TOP:","token=nextToken(MISSING_EXPRESSION);","try{","intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(readDouble());","caseSQLTokenizer.MONEY:","returnnewMutableNumeric(readLong(),4);","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["try{","Filefile=getFile(database,name);","if(!file.exists())","throwSmallSQLException.create(Language.INDEX_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());","ByteBufferbuffer=ByteBuffer.allocate(8);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["inttype=expr.getType();","if(type==Expression.NAME){","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","throwSmallSQLException.create(Language.GROUP_AGGR_NOTPART,expr);","}else"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["synchronized(raFile){","if(fileOffset\<0){","fileOffset=raFile.size();","raFile.position(fileOffset);","raFile.write(buffer);","returnfileOffset;"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["data[size2+1]=value2;","size++;","finalvoidclear(){","size=0;","privatefinalvoidresize(intnewSize){","long[]dataNew=newlong[newSize\<\<1];"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["publicstaticfinalStringSTXADD_FROM_PAR_CLOSE=\"SS-0620\";","publicstaticfinalStringSTXADD_KEYS_REQUIRED=\"SS-0621\";","publicstaticfinalStringSTXADD_NOT_NUMBER=\"SS-0622\";","publicstaticfinalStringSTXADD_COMMENT_OPEN=\"SS-0623\";","privateMapmessages;","privateMapsqlStates;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicBlobgetBlob(StringcolumnName)throwsSQLException{","returngetBlob(findColumn(columnName));","publicClobgetClob(StringcolumnName)throwsSQLException{","returngetClob(findColumn(columnName));","publicArraygetArray(StringcolumnName)throwsSQLException{","returngetArray(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["floatgetFloat()throwsException{","returngetInt();","doublegetDouble()throwsException{","returngetInt();","longgetMoney()throwsException{","returngetInt()*10000L;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["addKeyWord(\"DATE\",DATE);","addKeyWord(\"TIME\",TIME);","addKeyWord(\"DATETIME\",TIMESTAMP);//aliasforMSSQLServerdatatypeDATETIME","addKeyWord(\"TIMESTAMP\",TIMESTAMP);","addKeyWord(\"SMALLDATETIME\",SMALLDATETIME);","addKeyWord(\"CHARACTER\",CHAR);//aliasforCHAR"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StringBufferbuffer=newStringBuffer();","buffer.append(str.substring(0,start));","buffer.append(param4.getString());","if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));","buffer.append(str.substring(start+length));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["if(digit\>=\'a\'&&digit\<=\'f\')returndigit-\'W\';//-\'W\'==-\'a\'+10","thrownewRuntimeException();","staticbyte[]unique2bytes(Stringunique)throwsSQLException{","char[]chars=unique.toCharArray();","byte[]daten=newbyte[16];","daten[3]=hex2byte(chars,0);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-1);","StoreImplgetStoreTemp(SSConnectioncon)throwsException{","TableStorePagestorePage=newTableStorePage(con,this,LOCK_NONE,-2);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-2);","StoreImplgetLobStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","if(lobs==null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["packagesmallsql.database;","publicclassCommandSetextendsCommand{","intisolationLevel;","CommandSet(Loggerlog,inttype){","super(log);","this.type=type;"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionTimestampDiffextendsExpressionFunction{","finalprivateintinterval;","staticfinalintmapIntervalType(intintervalType){","switch(intervalType){","caseSQLTokenizer.MILLISECOND:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["Stringname;","SQLToken(intvalue,inttokenStart,inttokenEnd){","this.value=value;","this.offset=tokenStart;","this.length=tokenEnd-tokenStart;","SQLToken(Stringname,intvalue,inttokenStart,inttokenEnd){"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["Stringvalue=param2.getString();","if(suchstr==null||value==null||suchstr.length()==0||value.length()==0)return0;","intstart=0;","if(param3!=null){","start=param3.getInt()-1;","returnvalue.toUpperCase().indexOf(suchstr.toUpperCase(),start)+1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|"],
"["MemoryResult(){/*shouldbeempty*/}","MemoryResult(Object[][]data,intcolCount)throwsSQLException{","for(intc=0;c\<colCount;c++){","Columncolumn=newColumn();","column.setDataType(SQLTokenizer.NULL);","columns.add(column);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["daten=temp;","char[]chars=newchar[36];","chars[8]=chars[13]=chars[18]=chars[23]=\'-\';","chars[0]=digits[(daten[offset+3]\>\>4)&0x0F];","chars[1]=digits[(daten[offset+3])&0x0F];","chars[2]=digits[(daten[offset+2]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.UNEQUALS:","caseSQLTokenizer.LIKE:","caseSQLTokenizer.OR:","caseSQLTokenizer.AND:","caseSQLTokenizer.BIT_AND:","caseSQLTokenizer.BIT_OR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti)throwsSQLException{","try{","Objectobj=getValue(i).getObject();","wasNull=obj==null;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["publicdoublegetDouble(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["intgetInt(intoffset,intdataType)throwsException{","thrownoCurrentRow();","longgetLong(intoffset,intdataType)throwsException{","thrownoCurrentRow();","longgetMoney(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["caseSQLTokenizer.TINYINT:","page=add(page,rowOffset,expr.getInt(),isLastValues,1);","break;","caseSQLTokenizer.SMALLINT:","page=add(page,rowOffset,shortToBinarySortOrder(expr.getInt()),isLastValues,1);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["formatNumber(details.year,4,buf);","formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);","returnbuf.toString();","case13:","case113://default+millis;ddmonyyyyhh:mm:ss:mmm(24h)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewTime(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(StringcolumnName,Calendarcal)throwsSQLException{","returngetTime(findColumn(columnName),cal);","publicTimestampgetTimestamp(intcolumnIndex,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getFloat();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicdoublegetDouble(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["publiclonggetLong(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["where(cmd);","break;","caseSQLTokenizer.GROUP:","group(cmd);","break;","caseSQLTokenizer.HAVING:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return38;","default:return0;","intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(getDataType(),getPrecision(),getScale());"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["}catch(Exceptionex){","try{","database.dropTable(con,newName);","}catch(Exceptionex1){/*ignoreit*/}","try{","indexes.drop(database);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["{COL_DUPLICATE,\"01000\"},","{COL_MISSING,\"01000\"},","{COL_VAL_UNMATCH,\"01000\"},","{COL_INVALID_SIZE,\"01000\"},","{COL_WRONG_PREFIX,\"01000\"},","{COL_READONLY,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["expr=newExpressionFunctionASin();","break;","caseSQLTokenizer.ATAN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionATan();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intnewSize=offset+2+2*lengthColumn;","if(newSize\>page.length)resizePage(newSize);","writeShort(lengthColumn);","writeChars(daten);","for(inti=length;i\<lengthColumn;i++){","page[offset++]=\'\';"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicbooleansupportsFullOuterJoins(){","returntrue;","publicbooleansupportsLimitedOuterJoins(){","returntrue;","publicStringgetSchemaTerm(){","return\"owner\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{COL_AMBIGUOUS,\"01000\"},","{GROUP_AGGR_INVALID,\"01000\"},","{GROUP_AGGR_NOTPART,\"01000\"},","{ORDERBY_INTERNAL,\"01000\"},","{UNION_DIFFERENT_COLS,\"01000\"},","{INDEX_EXISTS,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicvoidsetTimestamp(intparameterIndex,Timestampx,Calendarcal)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetNull()notyetimplemented.\");","publicvoidsetURL(intparameterIndex,URLx)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodgetParameterMetaData()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["while(next()){/*scrollaftertheend*/}","finalintgetRow()throwsException{","returnisCurrentRow?row:0;","finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),false),isLastValues);","break;","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),true),isLastValues);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["expr=newExpressionFunctionCos();","break;","caseSQLTokenizer.COT:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCot();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(isNull())returnnull;","returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{","if(isNull())returnnull;","returnUtils.getInteger(getInt());","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["addKeyWord(\"CALL\",CALL);","addKeyWord(\"OJ\",OJ);","staticfinalintOR=500;","staticfinalintAND=501;","staticfinalintIS=502;","staticfinalintNOT=503;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["MutableNumericgetNumeric(intoffset,intdataType)throwsException{","thrownoCurrentRow();","ObjectgetObject(intoffset,intdataType)throwsException{","thrownoCurrentRow();","StringgetString(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["case106://ddmonyyyy","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.TIME:","time%=86400000;","break;","caseSQLTokenizer.DATE:","intmillis=(int)(time%86400000);","if(millis\<0)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","importjava.nio.channels.FileChannel;","importjava.sql.CallableStatement;","importjava.sql.Connection;","importjava.sql.DatabaseMetaData;","importjava.sql.PreparedStatement;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returntrue;","publicStringgetURL()throwsSQLException{","Databasedatabase=con.getDatabase(true);","if(database==null)","returnSSDriver.URL_PREFIX;","returnSSDriver.URL_PREFIX+\':\'+database.getName();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["expr=newExpressionFunctionSign();","break;","caseSQLTokenizer.SQRT:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSqrt();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnull;","publicintgetPrecision(intcolumn)throwsSQLException{","returngetColumnExpression(column).getPrecision();","publicintgetScale(intcolumn)throwsSQLException{","returngetColumnExpression(column).getScale();","publicStringgetTableName(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicStringgetIdentifierQuoteString(){","return\"\\\"\";","publicStringgetSQLKeywords(){","return\"database,use\";","privateStringgetFunctions(intfrom,intto){","StringBufferbuf=newStringBuffer();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseMUL:returnleft.getInt()*right.getInt();","caseDIV:returnleft.getInt()/right.getInt();","caseNEGATIVE:return-left.getInt();","caseMOD:returnleft.getInt()%right.getInt();","caseBIT_NOT:return~left.getInt();","throwcreateUnspportedConversion(SQLTokenizer.INT);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewDate(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["}else","returnnewShort((short)value);","staticfinalFileChannelopenRaFile(Filefile,booleanreadonly)throwsFileNotFoundException,SQLException{","RandomAccessFileraFile=newRandomAccessFile(file,readonly?\"r\":\"rw\");","FileChannelchannel=raFile.getChannel();","if(!readonly){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["expr=newExpressionFunctionTan();","break;","caseSQLTokenizer.TRUNCATE:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionTruncate();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.RIGHT_JOIN);","break;","caseSQLTokenizer.FULL:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalIndexNodeaddRootValue(longremainderValue,intdigitCount)throwsSQLException{","saveRemainderValue(remainderValue,digitCount);","returnaddRoot();","privatefinalvoidmoveRemainderValue()throwsSQLException{","ObjectrowOffset=value;","char[]puffer=remainderKey;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["return0;","publicintgetMaxConnections(){","return0;","publicintgetMaxCursorNameLength(){","return0;","publicintgetMaxIndexLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["synchronized(tableViews){","Iteratoriterator=tableViews.values().iterator();","while(iterator.hasNext()){","TableViewtableView=(TableView)iterator.next();","tableView.close();","iterator.remove();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["addKeyWord(\"LEVEL\",LEVEL);","addKeyWord(\"READ\",READ);","addKeyWord(\"COMMITTED\",COMMITTED);","addKeyWord(\"UNCOMMITTED\",UNCOMMITTED);","addKeyWord(\"REPEATABLE\",REPEATABLE);","addKeyWord(\"SERIALIZABLE\",SERIALIZABLE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(localeObj==null){","language=Language.getDefaultLanguage();","else{","language=Language.getLanguage(localeObj.toString());","publicvoidprintStackTrace(){","if(!isInit)return;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["expr=newExpressionFunctionRand();","break;","caseSQLTokenizer.ROUND:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRound();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;","returnbytes;","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(listEnum.stack\<3)","offset+=pointerSize;","}while(nextEntry!=0);","offset=nextOffset2;","finalprivateintinsertNode(intoctet)throwsSQLException{","intoldOffset=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleansupportsResultSetType(inttype){","switch(type){","caseResultSet.TYPE_FORWARD_ONLY:"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returngetDate(findColumn(columnName));","publicTimegetTime(StringcolumnName)throwsSQLException{","returngetTime(findColumn(columnName));","publicTimestampgetTimestamp(StringcolumnName)throwsSQLException{","returngetTimestamp(findColumn(columnName));","publicInputStreamgetAsciiStream(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["publicstaticfinalStringALIAS_UNSUPPORTED=\"SS-0580\";","publicstaticfinalStringISOLATION_UNKNOWN=\"SS-0581\";","publicstaticfinalStringFLAGVALUE_INVALID=\"SS-0582\";","publicstaticfinalStringARGUMENT_INVALID=\"SS-0583\";","publicstaticfinalStringGENER_KEYS_UNREQUIRED=\"SS-0584\";","publicstaticfinalStringSEQUENCE_HEX_INVALID=\"SS-0585\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["rowSource.setRowPosition(rowPosition);","useSetRowPosition=true;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["SQLTokenizer.MONEY,","SQLTokenizer.SMALLMONEY,","SQLTokenizer.BIGINT,","SQLTokenizer.INT,","SQLTokenizer.SMALLINT,","SQLTokenizer.TINYINT,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalprivateintconstraintType;//PRIMARY,UNIQUE,FOREIGIN,INDEX","finalprivateStringscolumns;","privateint[]matrix;","finalprivateExpressionsexpressions;","privateIndexindex;","privateFileChannelraFile;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returntrue;","publicbooleanallTablesAreSelectable(){","returntrue;","publicStringgetURL()throwsSQLException{","Databasedatabase=con.getDatabase(true);","if(database==null)"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["voidclose()throwsException{","if(indexes!=null)","indexes.close();","raFile.close();","raFile=null;","if(lobs!=null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseUNEQUALS:returnleft.getLong()!=right.getLong();","caseBETWEEN:","long_left=left.getLong();","return_left\>=right.getLong()&&right2.getLong()\>=_left;","default:","returngetLong()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["switch(dataTypes[i]){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.TINYINT:","offset++;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"UNION\",UNION);","addKeyWord(\"ALL\",ALL);","addKeyWord(\"DISTINCT\",DISTINCT);","addKeyWord(\"CASE\",CASE);","addKeyWord(\"WHEN\",WHEN);","addKeyWord(\"THEN\",THEN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["chars[14]=digits[(daten[offset+7]\>\>4)&0x0F];","chars[15]=digits[(daten[offset+7])&0x0F];","chars[16]=digits[(daten[offset+6]\>\>4)&0x0F];","chars[17]=digits[(daten[offset+6])&0x0F];","chars[19]=digits[(daten[offset+8]\>\>4)&0x0F];","chars[20]=digits[(daten[offset+8])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnbuffer;","returnbytes;","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.BIT:","returnparam1.getBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["finalvoidclear(){","nodes=EMPTY_NODES;","value=null;","remainderKey=null;","finalvoidclearValue(){","value=null;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["switch(dataType){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(pattern.length()==0)returntrue;","intmIdx=0;//indexinmaskArray","intsIdx=0;//indexinsearchArray","booleanrange=false;","weiter:","while(pattern.length()\>mIdx&&value.length()\>sIdx){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(indexes!=null)","indexes.close();","raFile.close();","raFile=null;","if(lobs!=null){","lobs.close();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.NUMERIC:","if(objinstanceofMutableNumeric)","return(MutableNumeric)obj;","returnnewMutableNumeric((BigDecimal)obj);","default:returnnewMutableNumeric(obj.toString());","ObjectgetObject(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["filePos++;","if((filePos&0x3FFFFFFFFFFFFFFFL)\>=insertStorePages.size()){","filePos=-1;","noRow();","}else","filePos=store.getNextPagePos();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["classIndex{","finalIndexNoderootPage;","Index(booleanunique){","rootPage=newIndexNode(unique,(char)-1);","Index(IndexNoderootPage){","this.rootPage=rootPage;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["doublevalue=getDouble();","if(Double.isInfinite(value)||Double.isNaN(value))","returnnull;","returnnewMutableNumeric(value);","finalObjectgetObject()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["raFile.write(buffer);","returnfileOffset;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","@Override","finalvoidrollback(){"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_R){","returnlist;","previousToken();","while(true){","list.add(expression(cmd,0));","SQLTokentoken=nextToken(MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnname;","booleanisReadOnly(){","returnreadonly;","staticfinalvoidcloseConnection(SSConnectioncon)throwsSQLException{","synchronized(databases){","Iteratoriterator=databases.values().iterator();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["buffer.append(str1.substring(idx1,idx2));","buffer.append(str3);","idx1=idx2+length;","idx2=str1.indexOf(str2,idx1);","if(idx1\>0){","buffer.append(str1.substring(idx1));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetTypeInfo()throwsSQLException{","String[]colNames={\"TYPE_NAME\",\"DATA_TYPE\",\"PRECISION\",\"LITERAL_PREFIX\",\"LITERAL_SUFFIX\",\"CREATE_PARAMS\",\"NULLABLE\",\"CASE_SENSITIVE\",\"SEARCHABLE\",\"UNSIGNED_ATTRIBUTE\",\"FIXED_PREC_SCALE\",\"AUTO_INCREMENT\",\"LOCAL_TYPE_NAME\",\"MINIMUM_SCALE\",\"MAXIMUM_SCALE\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"NUM_PREC_RADIX\"};","Object[][]data={","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.UNIQUEIDENTIFIER)),Utils.getInteger(36),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finallonggetMoney()throwsException{","if(isNull())return0;","returnMoney.parseMoney(getString().trim());","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getString().trim());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["value|=0x20;","for(intend=offset+length;offset\<end;offset++){","if((str[offset]|0x20)==value)returnoffset;","return-1;","staticintindexOf(intvalue,int[]list){","intoffset=0;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["abstractbooleanfirst()throwsException;","booleanprevious()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleannext()throwsException;","booleanlast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["staticfinalintTINYINT=321;","staticfinalintSMALLINT=322;","staticfinalintINT=323;","staticfinalintCOUNTER=324;//aliasforINTIDENTITY,isusedfromMSACCESS","staticfinalintBIGINT=325;","staticfinalintSMALLMONEY=330;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRound();","break;","caseSQLTokenizer.SIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSin();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["inttoken=0;","for(inti=1;i\<1000;i++){","if(getOperationFromToken(i)==operation){","token=i;","break;","if(operation==NEGATIVE)token=SQLTokenizer.MINUS;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returngetBoolean(findParameter(parameterName));","publicbytegetByte(StringparameterName)throwsSQLException{","returngetByte(findParameter(parameterName));","publicshortgetShort(StringparameterName)throwsSQLException{","returngetShort(findParameter(parameterName));","publicintgetInt(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandSetset()throwsSQLException{","SQLTokentoken=nextToken(COMMANDS_SET);","switch(token.value){","caseSQLTokenizer.TRANSACTION:","returnsetTransaction();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.INDEX_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());","ByteBufferbuffer=ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","intmagic=buffer.getInt();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["intlength=last.offset+last.length-offset;","columns.add(newString(sql,offset,length));","token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","breakLoop;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!newFile.renameTo(oldFile)){","tmpFile.renameTo(oldFile);//restoretheoldtable","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","tmpFile.delete();","staticvoiddropView(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropView(tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionASin();","break;","caseSQLTokenizer.ATAN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionATan();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(con.getAutoCommit())con.commit();","abstractvoidexecuteImpl(SSConnectioncon,SSStatementst)throwsException;","SSResultSetgetQueryResult()throwsSQLException{","if(rs==null)","throwSmallSQLException.create(Language.RSET_NOT_PRODUCED);","returnrs;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["ForeignKeyforeignKey=foreignKeys.get(i);","TablepkTable=(Table)database.getTableView(con,foreignKey.pkTable);","pkTable.references.add(foreignKey);","Table(Databasedatabase,Stringname){","super(name,null);","this.database=database;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSign();","break;","caseSQLTokenizer.SQRT:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSqrt();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowSource.noRow();","row=0;","finalbooleanrowInserted(){","returnrowSource.rowInserted();","finalbooleanrowDeleted(){","returnrowSource.rowDeleted();"]": ["|project://smallsql/src/smallsql/database/Where.java|","|project://smallsql/src/smallsql/database/Distinct.java|"],
"["intsavepoint=con.getSavepoint();","try{","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(0));","TableViewtable=result.getTableView();","ColumnstabColumns=table.columns;","intcount=tabColumns.size();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalpublicintgetMaxFieldSize(){","returnmaxFieldSize;","finalpublicvoidsetMaxFieldSize(intmax){","maxFieldSize=max;","finalpublicintgetMaxRows(){","returnmaxRows;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["data[size++]=column;","Columnscopy(){","Columnscopy=newColumns();","Column[]cols=copy.data=(Column[])data.clone();","for(inti=0;i\<size;i++){","cols[i]=cols[i].copy();"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["privateLongTreeListrowList;","privatefinalLongTreeListEnumlongListEnum=newLongTreeListEnum();","JoinScrollIndex(intjoinType,RowSourceleft,RowSourceright,ExpressionsleftEx,ExpressionsrightEx,intcompare)","throwsException{","super(joinType,left,right,null);","this.leftEx=leftEx;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["store.writeInt(0);//nomoreadditinalinformations","store.writeFinsh(null);","raFile.close();","@Override","voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["store.writeExpression(valueExpress,column);","for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeExpression(c,valueExpress);","store.writeFinsh(con);","for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeFinish(con);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["output[idx++]=input.charAt(0);","charlast=\'0\';","for(inti=1;idx\<4&&i\<input.length();i++){","charc=input.charAt(i);","switch(c){","case\'B\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["returngetArray(findParameter(parameterName));","publicDategetDate(StringparameterName,Calendarcal)throwsSQLException{","returngetDate(findParameter(parameterName),cal);","publicTimegetTime(StringparameterName,Calendarcal)throwsSQLException{","returngetTime(findParameter(parameterName),cal);","publicTimestampgetTimestamp(StringparameterName,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["packagesmallsql.database;","importjava.util.Arrays;","importsmallsql.database.language.Language;","publicclassExpressionFunctionConvertextendsExpressionFunction{","finalprivateColumndatatype;","publicExpressionFunctionConvert(Columndatatype,Expressionvalue,Expressionstyle){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(rowIdx\>=rowList.size())return0;","returnrowIdx+1;","longgetRowPosition(){","returnrowIdx;","voidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["signum=sig2;","sig2=tempi;","if(signum!=sig2)","sub(val2);","else","add(val2);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["columns.add(column);","}else{","columns.add(newColumnExpression(expr));","staticvoiddrop(Databasedatabase,Stringname)throwsException{","Filefile=newFile(Utils.createTableViewFileName(database,name));","booleanok=file.delete();"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["value=EMPTY_INTS;","signum=0;","return;","value=newint[(length+3)/4];","if(complement[0]\<0){","negate(complement);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returndata[idx];","finalvoidadd(Expressionexpr){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=expr;","finalvoidadd(intidx,Expressionexpr){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["returnStoreImpl.createStore(this,storePage,pageOperation,filePos);","StoreImplgetStore(TableStorePagestorePage,intpageOperation)throwsException{","returnStoreImpl.recreateStore(this,storePage,pageOperation);","StoreImplgetStoreInsert(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.INSERT,-1);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-1);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["FileLocklock=channel.tryLock();","if(lock==null){","throwSmallSQLException.create(Language.CANT_LOCK_FILE,file);","}catch(SQLExceptionsqlex){","throwsqlex;","}catch(Throwableth){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"CHARACTER\",CHAR);//aliasforCHAR","addKeyWord(\"CHAR\",CHAR);","addKeyWord(\"NCHAR\",NCHAR);","addKeyWord(\"VARCHAR2\",VARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"VARCHAR\",VARCHAR);","addKeyWord(\"NVARCHAR2\",NVARCHAR);//aliasforOracleVARCHAR2"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database);","booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.TABLE_EXISTENT,name);","FileChannelraFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,raFile,con,database));"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["finalCommandSelectcommand=getCmd();","command.updateRow(st.con,values);","command.relative(0);//refreshtherow","clearRowBuffer();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintCAST=1304;","staticfinalintIIF=1305;//lastsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","static{","addKeyWord(\"ISNULL\",IFNULL);//aliasforIFNULL,usedfromMSSQLServerwith2parameter,fromMSAccesswith1parameter","addKeyWord(\"IFNULL\",IFNULL);","addKeyWord(\"USER\",USER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{UNSUPPORTED_CONVERSION_OPER,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'vonDatentyp\'\'{1}\'\'fÃ¼rdieOperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rOperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"NichtunterstÃ¼tzterTypfÃ¼rCONVERTFunktion:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rSUMFunktion.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["chars[15]=digits[(daten[offset+7])&0x0F];","chars[16]=digits[(daten[offset+6]\>\>4)&0x0F];","chars[17]=digits[(daten[offset+6])&0x0F];","chars[19]=digits[(daten[offset+8]\>\>4)&0x0F];","chars[20]=digits[(daten[offset+8])&0x0F];","chars[21]=digits[(daten[offset+9]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["StringsqlState=(String)sqlStates.get(key);","assert(sqlState!=null):\"SQLStatecodenotfound:\"+key;","returnsqlState;","publicString[][]getEntries(){","returnMESSAGES;","privatefinalString[][]MESSAGES={"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalIndexNodeaddRoot(chardigit)throwsSQLException{","IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();","returnnode.addRoot();","finalIndexNodeaddRootValue(char[]remainderValue,intoffset)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:","if(other.getPrecision()\>expr.getPrecision()){","returnnewExpressionFunctionConvert(newColumnExpression(other),expr,null);","break;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionSqrtextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.SQRT;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.sqrt(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSqrt.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["expr=newExpressionFunctionRound();","break;","caseSQLTokenizer.SIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSin();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","page=find(page,doubleToBinarySortOrder(expr.getDouble()),4,nodeList);","break;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["SSStatementst;","privatebooleanisUpdatable;","privatebooleanisInsertRow;","privateExpressionValue[]values;","privateintfetchDirection;","privateintfetchSize;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(chr1==\'$\'){","previousToken();","Stringtok=newString(sql,token.offset+1,token.length-1);","if(isMinus)tok=\"-\"+tok;","returnnewExpressionValue(newMoney(Double.parseDouble(tok)),SQLTokenizer.MONEY);","Stringtok=newString(sql,token.offset,token.length);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(int)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.INT);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(newSize\>page.length)resizePage(newSize);","for(inti=0;i\<length;i++){","charc=daten[i];","page[offset++]=(byte)(c);","page[offset++]=(byte)(c\>\>8);","char[]readChars(intlength){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["default:returnUtils.string2boolean(obj.toString());","intgetInt()throwsException{","returngetInt(getObject(),dataType);","staticintgetInt(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{DB_NOTCONNECTED,\"SiesindnichtmiteinerDatenbankverbunden.\"},","{CONNECTION_CLOSED,\"DieVerbindungistbereitsgeschlossen.\"},","{VIEW_INSERT,\"INSERTwirdnichtunterstÃ¼tztfÃ¼reineView.\"},","{VIEWDROP_NOT_VIEW,\"DROPVIEWkannnichtmit\'\'{0}\'\'verwendetwerden,weileskeineViewist.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{RSET_NOT_PRODUCED,\"EswurdekeinResultSeterzeugt.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:","if(other.getPrecision()\>expr.getPrecision()){","returnnewExpressionFunctionConvert(newColumnExpression(other),expr,null);","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateResultSetgeneratedKeys;","privateint[]generatedKeyIndexes;","privateString[]generatedKeyNames;","SSStatement(SSConnectioncon)throwsSQLException{","this(con,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSStatement(SSConnectioncon,intrsType,intrsConcurrency)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["throwSmallSQLException.createFromException(e);","voiddrop(Databasedatabase)throwsException{","close();","booleanok=getFile(database,name).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voidclose()throwsException{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["valueExpress=column.getDefaultValue(con);","if(needGeneratedKeys&&generatedKeysType==0&&valueExpress!=Expression.NULL){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","if(needGeneratedKeys&&generatedKeysType==1){","String[]keyNames=st.getGeneratedKeyNames();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["finalprivatevoidsetNextFilePos(){","if(filePos\<0)return;//endofrows","if(store==Store.NOROW)","filePos=table.getFirstPage();//canpointattheendoffile","else","if(filePos\>=0x4000000000000000L){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["addKeyWord(\"NOW\",NOW);","addKeyWord(\"QUARTER\",QUARTER);","addKeyWord(\"SECOND\",SECOND);","addKeyWord(\"DATEADD\",TIMESTAMPADD);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPADD\",TIMESTAMPADD);","addKeyWord(\"DATEDIFF\",TIMESTAMPDIFF);//aliasforMSSQLServer"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.TINYINT:","offset++;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnreadUnsignedByte()!=0;","caseSQLTokenizer.SMALLINT:","returnreadShort()!=0;","caseSQLTokenizer.INT:","returnreadInt()!=0;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=0;i\<entries.length;i++){","Stringkey=entries[i][0];","if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{","Stringvalue=entries[i][1];"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["store=store.loadUpdatedStore();","break;","default:thrownewError();","store.offset=PAGE_CONTROL_SIZE;","returnstore;","}catch(Throwableth){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintTIMESTAMPADD=1216;","staticfinalintTIMESTAMPDIFF=1217;","staticfinalintWEEK=1218;","staticfinalintYEAR=1219;//lasttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","static{","addKeyWord(\"CURDATE\",CURDATE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnrs;","intgetUpdateCount(){","returnupdateCount;","booleangetMoreResults(){","rs=null;","updateCount=-1;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["switch(pageOperation){","caseSQLTokenizer.CREATE:{","if(locks.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalStringsql;","finalCommandSelectcommandSelect;","View(SSConnectioncon,Stringname,FileChannelraFile,longoffset)throwsException{","super(name,newColumns());","StorePagestorePage=newStorePage(null,-1,raFile,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["caseSQLTokenizer.TIME:","returnreadTime();","caseSQLTokenizer.DATE:","returnreadDate();","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetInt();","finalfloatgetFloat()throwsException{","returngetInt();","finaldoublegetDouble()throwsException{","returngetInt();","finallonggetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["n=currentDS.next();","if(n)returntrue;","row=0;","returnfalse;","finalvoidafterLast()throwsException{","dataSourceIdx=dataSources.size()-1;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["continueloop1;","returnoffset;","return-1;","staticintcompareBytes(byte[]leftBytes,byte[]rightBytes){","intlength=Math.min(leftBytes.length,rightBytes.length);","intcomp=0;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(idx1\>0){","Stringkey=keyValue.substring(0,idx1).toLowerCase().trim();","Stringvalue=keyValue.substring(idx1+1).trim();","props.put(key,value);","}else{","throwSmallSQLException.create(Language.CUSTOM_MESSAGE,\"Missingequalinproperty:\"+keyValue);"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["SSCallableStatement(SSConnectioncon,Stringsql)throwsSQLException{","super(con,sql);","SSCallableStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,sql,rsType,rsConcurrency);","privateExpressiongetValue(inti)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodfindParameter()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con==con)","inserts.add(lock.getLink());","returninserts;","finalTableStorePagerequestLock(SSConnectioncon,intpageOperation,longpage)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintSQL_TSI_MINUTE=1252;","staticfinalintSQL_TSI_HOUR=1253;","staticfinalintSQL_TSI_DAY=1254;","staticfinalintSQL_TSI_WEEK=1255;","staticfinalintSQL_TSI_MONTH=1256;","staticfinalintSQL_TSI_QUARTER=1257;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intgetFunction(){returnSQLTokenizer.ABS;}","booleangetBoolean()throwsException{","returngetDouble()!=0;","intgetInt()throwsException{","returnMath.abs(param1.getInt());","longgetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["store.offset=PAGE_CONTROL_SIZE;","returnstore;","privatefinalvoidreadPageHeader()throwsSQLException{","if(readInt()!=PAGE_MAGIC){","throwSmallSQLException.create(Language.TABLE_CORRUPT_PAGE,newObject[]{newLong(filePos)});","status=readInt();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(intcolumnIndex)throwsSQLException{","try{","byte[]obj=getValue(columnIndex).getBytes();","wasNull=obj==null;","returnobj;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["this.type=type;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsjava.sql.SQLException{","switch(type){","caseSQLTokenizer.LEVEL:","con.isolationLevel=isolationLevel;","break;"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.TIMESTAMP:","bytes=newbyte[8];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["IndexNodeparent=(IndexNode)nodeList.get(i);","parent.removeNode(node.getDigit());","node=parent;","finalprivateIndexNodefindNull(IndexNodepage){","returnpage.getChildNode((char)0);","finalprivateIndexNodeaddNull(IndexNodepage,longrowOffset,booleanisLastValue)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnnum;","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDouble());","default:","thrownewError();","longgetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["if(tablePattern==null)tablePattern=\"%\";","tablePattern+=Utils.TABLE_VIEW_EXTENTION;","for(inti=0;i\<dirs.length;i++){","Stringname=dirs[i].getName();","if(Utils.like(name,tablePattern)){","list.add(name.substring(0,name.length()-Utils.TABLE_VIEW_EXTENTION.length()));"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(exprs==null)return;","for(inti=0;i\<exprs.size();i++){","exprs.set(i,patchExpression(exprs.get(i)));","finalprivatevoidpatchExpressions(Expressionexpression)throwsSQLException{","Expression[]params=expression.getParams();","if(params==null)return;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["if(varchar)lengthColumn=length;","intnewSize=offset+2+2*lengthColumn;","if(newSize\>page.length)resizePage(newSize);","writeShort(lengthColumn);","writeChars(daten);","for(inti=length;i\<lengthColumn;i++){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnExpressionValue.getInt(getObject(),getDataType());","longgetLong()throwsException{","returnExpressionValue.getLong(getObject(),getDataType());","floatgetFloat()throwsException{","returnExpressionValue.getFloat(getObject(),getDataType());","doublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(token!=null&&token.value==SQLTokenizer.POINT){","returnnextIdentifier();","}else{","previousToken();","returnname;","finalprivatebooleanisKeyword(SQLTokentoken){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(colName.equalsIgnoreCase(strings.get(s)))","continuenextColumn;","returnInteger.MAX_VALUE;//NoStrinfoundforcolName","returnstrings.size()-columns.size();","finalvoidinit(Databasedatabase,TableViewtableView)/*throwsException*/{","intsize=tableView.columns.size();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["setScale(num.scale);","add(-num.signum,num.value);","privatevoidsub(int[]val2){","longtemp=0;","intv1=value.length;","for(intv2=val2.length;v2\>0;){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["staticfinalintUNIQUEIDENTIFIER=370;","staticfinalintJAVA_OBJECT=371;","static{","addKeyWord(\"BIT\",BIT);","addKeyWord(\"BOOLEAN\",BOOLEAN);","addKeyWord(\"BINARY\",BINARY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(columnName.equalsIgnoreCase(columns.get(i).getAlias()))","returni;","throwSmallSQLException.create(Language.COL_MISSING,columnName);","finalvoidsetDistinct(booleandistinct){","this.isDistinct=distinct;","finalvoidsetSource(RowSourcejoin){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionATanextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.ATAN;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.atan(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionATan.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","returnInteger.MAX_VALUE;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["byte[]bytes=param1.getBytes();","intstart=Math.min(Math.max(0,param2.getInt()-1),bytes.length);","intlength=Math.min(param3.getInt(),bytes.length);","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","buffer.write(bytes,0,start);","buffer.write(param4.getBytes());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["catalog[0]=dirs[i].getPath();","catalogs.add(catalog);","Object[][]result=newObject[catalogs.size()][];","catalogs.toArray(result);","returnresult;","StringsgetTables(StringtablePattern){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["privateDataSourcefromEntry;","privateintcolIdx;","privateTableViewtable;","privateColumncolumn;","ExpressionName(Stringname){","super(NAME);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnMoney.createFromUnscaledValue(readLong()).toString();","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt()).toString();","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().toString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.value=val.value;","this.dataType=val.dataType;","this.length=val.length;","booleanisNull(){","returngetObject()==null;","booleangetBoolean()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["expr2.setParams(params);","expr=newExpressionArithmetic(expr,expr2,ExpressionArithmetic.DIV);","returnexpr;","default:","throwcreateSyntaxError(token,Language.STXADD_FUNC_UNKNOWN);","if(invalidParamCount){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalclassNoFromResultextendsRowSource{","privateintrowPos;//0-before;1-onrow;2-afterlast","finalbooleanisScrollable(){","returntrue;","finalvoidbeforeFirst(){","rowPos=0;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["intt=0;","for(;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);","if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){","TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["intrsConcurrency;","privateintfetchDirection;","privateintfetchSize;","privateintqueryTimeout;","privateintmaxRows;","privateintmaxFieldSize;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["seconds+=60000;","time-=seconds;","break;","caseSQLTokenizer.TIME:","time%=86400000;","break;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalstaticprivateintfloatToBinarySortOrder(floatvalue){","intintValue=Float.floatToIntBits(value);","return(intValue\<0)?","~intValue:","intValue^0x80000000;","finalstaticprivatelongdoubleToBinarySortOrder(doublevalue){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.COMMA:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;","break;","caseSQLTokenizer.FROM:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticfinalint[]MISSING_COMMA_PARENTHESIS={SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_PARENTHESIS_VALUES_SELECT={SQLTokenizer.PARENTHESIS_L,SQLTokenizer.VALUES,SQLTokenizer.SELECT};","privatestaticfinalint[]MISSING_TOKEN_LIST={SQLTokenizer.COMMA,SQLTokenizer.FROM,SQLTokenizer.GROUP,SQLTokenizer.HAVING,SQLTokenizer.ORDER};","privatestaticfinalint[]MISSING_FROM={SQLTokenizer.FROM};","privatestaticfinalint[]MISSING_SET={SQLTokenizer.SET};","privatestaticfinalint[]MISSING_EQUALS={SQLTokenizer.EQUALS};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(lock.con==con||","con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","usableLock=lock;","}else{","if(lock.lockType==LOCK_WRITE){","returnnull;//writelockofanotherConnection"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(seconds\<0){","seconds+=60000;","time-=seconds;","break;","caseSQLTokenizer.TIME:","time%=86400000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["booleanisAutoIncrement(){","returnexpr.isAutoIncrement();","booleanisCaseSensitive(){","returnexpr.isCaseSensitive();","booleanisNullable(){","returnexpr.isNullable();"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["ExpressionFunctionCasecaseExpr(finalCommandcmd)throwsSQLException{","ExpressionFunctionCaseexpr=newExpressionFunctionCase();","SQLTokentoken=nextToken(MISSING_EXPRESSION);","Expressioninput=null;","if(token.value!=SQLTokenizer.WHEN){","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnobj;","abstractStringgetString()throwsException;","abstractbyte[]getBytes()throwsException;","abstractintgetDataType();","finalintgetType(){returntype;}","StringgetTableName(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["voidsetAlias(Stringalias){","this.alias=alias;","StringgetAlias(){","return(alias!=null)?alias:getTableView().name;","booleanhasAlias(){","returnalias!=null;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["throwSmallSQLException.create(Language.TABLE_OR_VIEW_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());","ByteBufferbuffer=ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","intmagic=buffer.getInt();"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["SQLToken(Stringname,intvalue,inttokenStart,inttokenEnd){","this.value=value;","this.offset=tokenStart;","this.length=tokenEnd-tokenStart;","this.name=name;","StringgetName(char[]sql){"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["MutableNumericnum=param1.getNumeric();","if(num.getSignum()\<0)num.setSignum(1);","returnnum;","ObjectgetObject()throwsException{","if(param1.isNull())returnnull;","Objectpara1=param1.getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returntrue;","returnfalse;","publicintisNullable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isNullable()?columnNullable:columnNoNulls;","publicbooleanisSigned(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["removeNodeLastLevel();","while(firstNode&&getUnsignedShort()==0){","offset-=2;","removeNodeLastLevel();//theend0ofanode","if(shift\>=3)","break;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["super(FUNCTION);","this.left=left;","this.right=right;","this.right2=right2;","this.operation=operation;","super.setParams(newExpression[]{left,right,right2});"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["tab[i]=null;","size=0;","finalbooleancontainsValue(TableStorePagevalue){","Entrytab[]=table;","for(inti=0;i\<tab.length;i++)","for(Entrye=tab[i];e!=null;e=e.next)"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){","return(float)value;","publicintintValue(){","return(int)value;"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRepeat();","break;","caseSQLTokenizer.REPLACE:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionReplace();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["SSConnectioncon;","TableStorePagenextLock;","TableStorePage(SSConnectioncon,Tabletable,intlockType,longfileOffset){","super(null,0,table.raFile,fileOffset);","this.con=con;","this.table=table;"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["classLongList{","privateintsize;","privatelong[]data;","LongList(){","this(16);","LongList(intinitialSize){"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary())!=0;","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp()!=0;","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["((long)(page[offset++]&0xFF)\<\<48)|","((long)(page[offset++]&0xFF)\<\<40)|","((long)(page[offset++]&0xFF)\<\<32)|","((long)(page[offset++]&0xFF)\<\<24)|","((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["store=newStoreNull(store.getNextPagePos());","@Override","finalvoidupdateRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;","intcount=tableColumns.size();","StoreImplnewStore=table.getStoreTemp(con);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","intreadInt(){","return((page[offset++])\<\<24)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["dataSources.add(ds);","currentDS=dataSources.get(0);","booleaninit(SSConnectioncon)throwsException{","booleanresult=false;","intcolCount=-1;","for(inti=0;i\<dataSources.size();i++){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\',\');","buf.append(\'\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractvoidafterLast()throwsException;","booleanabsolute(introw)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanrelative(introws)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["publicvoidsetBinaryStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setBinaryStream(findParameter(parameterName),x,length);","publicvoidsetObject(StringparameterName,Objectx,intsqlType,intscale)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType,scale);","publicvoidsetObject(StringparameterName,Objectx,intsqlType)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(conditioninstanceofExpressionArithmetic){","ExpressionArithmeticcond=(ExpressionArithmetic)condition;","ExpressionsleftEx=newExpressions();","ExpressionsrightEx=newExpressions();","intoperation=createJoinScrollIndex(cond,leftEx,rightEx,0);","if(operation!=0){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(validValues==MISSING_IDENTIFIER){","switch(token.value){","caseSQLTokenizer.PARENTHESIS_L:","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:","throwcreateSyntaxError(token,validValues);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return0;","finallonggetNextPagePos(){","returnnextPagePos;","finalvoiddeleteRow(SSConnectioncon)throwsSQLException{","if(nextPagePos\>=0){","throwSmallSQLException.create(Language.ROW_DELETED);"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["{ROWS_WRONG_MAX,\"Wrongmaxrowsvalue:{0}.\"},","{ROW_LOCKED,\"RowislockedfromanotherConnection.\"},","{ROW_DELETED,\"Rowalreadydeleted.\"},","{SAVEPT_INVALID_TRANS,\"Savepointisnotvalidforthistransaction.\"},","{SAVEPT_INVALID_DRIVER,\"Savepointisnotvalidforthisdriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnotsupportedforthistypeofrowsource.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(!isInit)return;","super.printStackTrace(ps);","publicvoidprintStackTrace(PrintWriterpw){","if(!isInit)return;","super.printStackTrace(pw);","staticSQLExceptioncreate(StringmessageCode){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleDoubleFactor[scale]*signum;","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).doubleValue();","publicStringtoString(){","StringBufferbuf=newStringBuffer();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnnewBigDecimal(newBigInteger(toByteArray()),scale);","publicBigDecimaltoBigDecimal(intnewScale){","if(newScale==this.scale)returntoBigDecimal();","returntoBigDecimal().setScale(newScale,BigDecimal.ROUND_HALF_EVEN);","publicObjectgetImmutableObject(){","returntoBigDecimal();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseCOUNT:","if(!expr.isNull())((MutableInteger)value).value++;","break;","caseSUM:","if(isEmpty()){","initValue(expr);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["booleanisNull(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getInt();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseSQLTokenizer.NCHAR:","returnTypes.CHAR;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnTypes.VARCHAR;","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Stringmessage=getErrorString(token,addMessageCode,null);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode,","Objectparam0){","Stringmessage=getErrorString(token,addMessageCode,param0);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalstaticprivateintshortToBinarySortOrder(intvalue){","returnvalue^0x8000;","finalstaticprivateintintToBinarySortOrder(intvalue){","returnvalue^0x80000000;","finalstaticprivatelonglongToBinarySortOrder(longvalue){","returnvalue^0x8000000000000000L;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["value=EMPTY_INTS;","}else{","value=newint[2];","if(complement\<0){","value[0]=(int)(~(complement\>\>32));","value[1]=(int)(-complement);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseMUL:","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=left.getNumeric();","num.mul(right.getInt());","returnnum;","}else"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["StringgetTableName(){","if(table!=null){","returntable.getName();","returnnull;","intgetPrecision(){","returncolumn.getPrecision();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnpuffer;","privatefinalbooleanequals(char[]src1,char[]src2,intoffset2){","if(src1==null)returnfalse;","intlength=src1.length;","if(length!=src2.length-offset2)returnfalse;","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal(scale);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["chars[7]=digits[(daten[offset+0])&0x0F];","chars[9]=digits[(daten[offset+5]\>\>4)&0x0F];","chars[10]=digits[(daten[offset+5])&0x0F];","chars[11]=digits[(daten[offset+4]\>\>4)&0x0F];","chars[12]=digits[(daten[offset+4])&0x0F];","chars[14]=digits[(daten[offset+7]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["privateintfullReturnCounter=-1;","JoinScroll(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;","this.condition=condition;","this.left=left;","this.right=right;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnnewExpressionFunctionConvert(col,expr,style);","caseSQLTokenizer.CAST:","expr=expression(cmd,0);","nextToken(MISSING_AS);","Columncol=datatype(false);","nextToken(MISSING_PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"CHAR\",CHAR);","addKeyWord(\"NCHAR\",NCHAR);","addKeyWord(\"VARCHAR2\",VARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"VARCHAR\",VARCHAR);","addKeyWord(\"NVARCHAR2\",NVARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"NVARCHAR\",NVARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){","returnnextIdentifier();","}else{","previousToken();","returnname;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["con.add(newCreateFile(file,raFile,con,database));","writeMagic(raFile);","returnraFile;","abstractvoidwriteMagic(FileChannelraFile)throwsException;","StringgetName(){","returnname;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),false),isLastValues);","break;","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),true),isLastValues);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["MutableNumericnum=left.getNumeric();","num.sub(right.getNumeric());","returnnum;","caseMUL:","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=left.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(magic==MAGIC_TABLE)","returnnewTable(database,con,name,raFile,raFile.position(),version);","returnnewView(con,name,raFile,raFile.position());","}catch(Throwablee){","if(raFile!=null)","try{"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["Object[]row=newObject[13];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=Boolean.valueOf(!index.isUnique());//NON_UNIQUE","row[5]=index.getName();//INDEX_NAME","row[6]=type;//TYPE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["node=parent;","finalprivateIndexNodefindNull(IndexNodepage){","returnpage.getChildNode((char)0);","finalprivateIndexNodeaddNull(IndexNodepage,longrowOffset,booleanisLastValue)throwsSQLException{","if(isLastValue){","page.addNode((char)0,rowOffset);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["indexes.drop(database);","}catch(Exceptionex1){/*ignoreit*/}","throwex;","}finally{","tableLock.freeLock();","break;"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["intnextEntry=getUnsignedShort();","if(nextEntry==octet){","if(shift==0)return;//valueexistalready,thiscaseshouldnotoccur","offset=getPointer();","firstNode=true;","break;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["addKeyWord(\"IN\",IN);","staticfinalintABS=1000;//firstnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","staticfinalintACOS=1001;","staticfinalintASIN=1002;","staticfinalintATAN=1003;","staticfinalintATAN2=1004;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.text.DateFormatSymbols;","importjava.util.Calendar;","importjava.util.TimeZone;","importsmallsql.database.language.Language;","publicfinalclassDateTimeimplementsMutable{","longtime;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalbooleanlast(){","rowPos=1;","returntrue;","finalbooleanisLast(){","returnrowPos==1;","finalbooleanisAfterLast(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["caseMOD:returnleft.getInt()%right.getInt();","caseBIT_NOT:return~left.getInt();","throwcreateUnspportedConversion(SQLTokenizer.INT);","longgetLong()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{UNSUPPORTED_CONVERSION_FUNC,\"01000\"},","{UNSUPPORTED_TYPE_CONV,\"01000\"},","{UNSUPPORTED_TYPE_SUM,\"01000\"},","{UNSUPPORTED_TYPE_MAX,\"01000\"},","{UNSUPPORTED_CONVERSION,\"01000\"},","{INSERT_INVALID_LEN,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;","from(selCmd);","returnselCmd;","default:","if(!isKeyword(token))"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DOUBLE:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getDouble()==right.getDouble();","caseGREATER:returnleft.getDouble()\>right.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.expr=expr;","StringgetName(){","returnexpr.getAlias();","booleanisAutoIncrement(){","returnexpr.isAutoIncrement();","booleanisCaseSensitive(){"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_INSERT);","if(tables.size()==0)","throwSmallSQLException.create(Language.INSERT_WO_FROM);","intsavepoint=con.getSavepoint();","try{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["addKeyWord(\"LOG10\",LOG10);","addKeyWord(\"MOD\",MOD);","addKeyWord(\"PI\",PI);","addKeyWord(\"POWER\",POWER);","addKeyWord(\"RADIANS\",RADIANS);","addKeyWord(\"RAND\",RAND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnstr;","returnstr.substring(0,length);","caseSQLTokenizer.CHAR:{","Stringstr=convertToString();","intlength=datatype.getDisplaySize();","if(length\>str.length()){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["offset3=offset2;","offset2=offset1;","offset1=offset-2;","offset=getPointer();","firstNode3=firstNode2;","firstNode2=firstNode1;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["booleanfirst()throwsException{","beforeFirst();","returnnext();","booleannext()throwsException{","if(isAfterLast)returnfalse;","row++;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["booleangetBoolean(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getInt();","longgetLong(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getLong();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["finalDataSourceget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(DataSourcetable){","if(size\>=data.length){"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","Stringstr=param1.getString();","returnstr.length()*BYTES_PER_CHAR;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|"],
"["caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["CommandSetset=newCommandSet(con.log,SQLTokenizer.USE);","set.name=name;","returnset;","caseSQLTokenizer.EXECUTE:","returnexecute();","caseSQLTokenizer.TRUNCATE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicclassCommandCreateDatabaseextendsCommand{","CommandCreateDatabase(Loggerlog,Stringname){","super(log);","this.type=SQLTokenizer.DATABASE;","if(name.startsWith(\"file:\"))","name=name.substring(5);"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["if(values!=null){","ExpressionValuevalue=values[metaData.getColumnIdx(columnIndex)];","if(!value.isEmpty()||isInsertRow){","returnvalue;","returnmetaData.getColumnExpression(columnIndex);","finalprivateExpressionValuegetUpdateValue(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["Expressionslist=expressionParenthesisList(cmd);","leftExpr=newExpressionArithmetic(leftExpr,list,operation);","break;","caseSQLTokenizer.IS:","token=nextToken(MISSING_NOT_NULL);","if(token.value==SQLTokenizer.NOT){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["month=Integer.parseInt(datetime.substring(idx1,idx2).trim())-1;","idx1=idx2+1;","idx2=datetime.indexOf(\'\',idx1);","if(idx2\<0)idx2=datetime.length();","day=Integer.parseInt(datetime.substring(idx1,idx2).trim());","}else{"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnUtils.double2bytes(((Number)obj).doubleValue());","caseSQLTokenizer.REAL:","returnUtils.float2bytes(((Number)obj).floatValue());","default:throwcreateUnsupportedConversion(dataType,obj,SQLTokenizer.VARBINARY);","finalintgetDataType(){","returndataType;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateintlength;","ExpressionValue(){","super(VALUE);","clear();","ExpressionValue(inttype){","super(type);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(signum==0)returnnewBigDecimal(BigInteger.ZERO,scale);","returnnewBigDecimal(newBigInteger(toByteArray()),scale);","publicBigDecimaltoBigDecimal(intnewScale){","if(newScale==this.scale)returntoBigDecimal();","returntoBigDecimal().setScale(newScale,BigDecimal.ROUND_HALF_EVEN);","publicObjectgetImmutableObject(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","publicclassStoreNoCurrentRowextendsStore{","privateSQLExceptionnoCurrentRow(){","returnSmallSQLException.create(Language.ROW_NOCURRENT);","booleanisNull(intoffset)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["for(inti=from;i\<=to;i++){","if(i!=from)buf.append(\',\');","buf.append(SQLTokenizer.getKeyWord(i));","returnbuf.toString();","publicStringgetNumericFunctions(){","returngetFunctions(SQLTokenizer.ABS,SQLTokenizer.TRUNCATE);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintmillis;","intidx1=0;","intidx2=datetime.indexOf(\'-\');","if(idx2\>0){","year=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["expr.setElseResult(expression(cmd,0));","break;","caseSQLTokenizer.END:","expr.setEnd();","returnexpr;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(params==null)return;","for(inti=0;i\<params.length;i++){","expression.setParamAt(patchExpression(params[i]),i);","finalprivateExpressionpatchExpression(Expressionexpr)throwsSQLException{","intidx=addInternalExpressionFromSelect(expr);","if(idx\>=0){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intlength=str.length();","while(length\>0&&str.charAt(length-1)==\'\'){","length--;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["{TABLE_OR_VIEW_MISSING,\"TabelleoderView\'\'{0}\'\'existiertnicht.\"},","{TABLE_FILE_INVALID,\"DieDatei\'\'{0}\'\'enthÃ¤ltkeinegÃ¼ltigeSmallSQLTabelle.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeinegÃ¼ltigerTabellenoderViewSpeicher.\"},","{TABLE_EXISTENT,\"DieTabelleoderView\'\'{0}\'\'existiertbereits.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'istkeineTabelle.\"},","{PK_ONLYONE,\"EineTabellekannnureinenPrimÃ¤rschlÃ¼sselhaben.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["do{","isLeap=false;","dayofyear=day=d-((year-1970)*365+(year/4)-(year/100)+(year/400)-477);","if(isLeapYear(year)){","if(day\<59){","day++;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["}else","returngetReturnValue(status.nodeValue);","idx=++status.idx;","if(idx\>=status.nodes.length){","if(nodeStack.size()\>1){","nodeStack.pop();"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["booleanabsolute(introw)throwsException{","returncommandSelect.absolute(row);","booleanrelative(introws)throwsException{","returncommandSelect.relative(rows);","intgetRow()throwsException{","returncommandSelect.getRow();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","if(index.isUnique()){","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalStringgetName(){","returnname;","finalvoidsetName(Stringname){","this.alias=this.name=name;","finalStringgetAlias(){","returnalias;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.MONEY:","return19;","caseSQLTokenizer.REAL:","return13;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnlobs.getStore(con,filePos,pageOperation);","finallonggetFirstPage(){","returnfirstPage;","ListgetInserts(SSConnectioncon){","synchronized(locks){","ArrayListinserts=newArrayList();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionSoundexextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.SOUNDEX;","finalbooleanisNull()throwsException{","returnparam1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["wasWhiteSpace=false;","break;","if(comment==MULTI_COMMENT){","throwSmallSQLException.create(Language.STXADD_COMMENT_OPEN);","if(!wasWhiteSpace){","tokens.add(newSQLToken(value,tokenStart,sql.length));"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return-1;","@Override","voidrollback()throwsSQLException{","FileChannelcurrentRaFile=raFile;","if(raFile==null){","return;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["catch(InstantiationExceptione){","assert(false):\"ErrorduringLanguageinstantiation:\"+e.getMessage();","intlastUndsc=part.lastIndexOf(\"_\");","if(lastUndsc\>-1)part=part.substring(0,lastUndsc);","elsebreak;","thrownewIllegalArgumentException(\"Localenotfoundinthetree:\"+localeStr);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["{VIEWDROP_NOT_VIEW,\"NonÃ¨possibileeffettuareDROPVIEWcon\'\'{0}\'\'perchÃ©nonÃ¨unaview.\"},","{VIEW_CANTDROP,\"NonsipuÃ²effettuaredropsullaview\'\'{0}\'\'.\"},","{RSET_NOT_PRODUCED,\"NessunResultSetÃ¨statoprodotto.\"},","{RSET_READONLY,\"IlResultSetÃ¨disolalettura.\"},","{RSET_FWDONLY,\"IlResultSetÃ¨forwardonly.\"},//norealtranslation","{RSET_CLOSED,\"IlResultSetÃ¨chiuso.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returncolumn;","returnnull;","finalvoidadd(Columncolumn){","if(column==null){","thrownewNullPointerException(\"Columnisnull.\");","if(size\>=data.length){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicObjectgetObject(StringcolumnName,Mapmap)throwsSQLException{","returngetObject(columnName);","publicRefgetRef(StringcolumnName)throwsSQLException{","returngetRef(findColumn(columnName));","publicBlobgetBlob(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["}else{","rowSource.beforeFirst();","row=sortedRowCount;","while(next()){","booleanabsolute(intnewRow)throwsException{","if(newRow==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["{VALUE_STR_TOOLARGE,\"Stringatroppolungaperlacolonna.\"},","{VALUE_BIN_TOOLARGE,\"Valorebinariodilunghezza{0}eccessivaperlacolonnadilunghezza{1}.\"},","{VALUE_NULL_INVALID,\"Valorinullinonvalidiperlacolonna\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Impossibleconvertireunvalore{0}inunvalore{1}.\"},","{BYTEARR_INVALID_SIZE,\"Lunghezzanonvalidaperunarraydibytes:{0}.\"},","{LOB_DELETED,\"L\'\'oggettoLOBÃ¨statocancellato.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnConnection.TRANSACTION_READ_COMMITTED;","publicbooleansupportsTransactions(){","returntrue;","publicbooleansupportsTransactionIsolationLevel(intlevel){","switch(level){","caseConnection.TRANSACTION_NONE:"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","((DateTime)value).time=Math.max(((DateTime)value).time,expr.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["writeLong(filePosUpdated);//Pointerofanupdatedpage","storePage.setPageData(page,sizeUsed);//TODOpagesollteeigentlichbeimeinlesengesetztsein","if(con==null){","returnstorePage.commit();","}else{","return0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","if(index.isPrimary()){","Stringscolumns=index.getColumns();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["{UNSUPPORTED_OPERATION,\"Operazionenonsupportata:{0}.\"},","{CANT_LOCK_FILE,\"Impossibilebloccareilfile\'\'{0}\'\'.UndatabaseSmallSQLDatabasepuÃ²essereapertodaununicoprocesso.\"},","{DB_EXISTENT,\"Ildatabase\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{DB_NONEXISTENT,\"Ildatabase\'\'{0}\'\'Nonesiste.\"},","{DB_NOT_DIRECTORY,\"Ladirectory\'\'{0}\'\'nonÃ¨undatabaseSmallSQL.\"},","{DB_NOTCONNECTED,\"L\'\'utentenonÃ¨connessoaundatabase.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(isMinus)","returnnewExpressionArithmetic(function(cmd,token,false),ExpressionArithmetic.NEGATIVE);","returnfunction(cmd,token,false);","}else{","charchr1=sql[token.offset];","if(chr1==\'$\'){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","return((Money)obj).value;","default:returnMoney.parseMoney(obj.toString());","MutableNumericgetNumeric(){","returngetNumeric(getObject(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicvoidsetNull(StringparameterName,intsqlType,StringtypeName)throwsSQLException{","setNull(findParameter(parameterName),sqlType,typeName);","publicStringgetString(StringparameterName)throwsSQLException{","returngetString(findParameter(parameterName));","publicbooleangetBoolean(StringparameterName)throwsSQLException{","returngetBoolean(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(needTrim){","while(length\>0&&value.charAt(length-1)==\'\')length--;","char[]puffer=newchar[length];","for(inti=0;i\<length;i++){","puffer[i]=Character.toLowerCase(Character.toUpperCase(value.charAt(i)));","returnpuffer;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con!=con)returnnull;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType);","if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType);","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType,intlength)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType,length);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["newFile(\".\");","Filedirs[]=baseDir.listFiles();","if(dirs!=null)","for(inti=0;i\<dirs.length;i++){","if(dirs[i].isDirectory()){","if(newFile(dirs[i],Utils.MASTER_FILENAME).exists()){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["return(SQLToken)tokens.get(tokenIdx-1);","privatevoidpreviousToken(){","tokenIdx--;","privateSQLTokennextToken(){","if(tokenIdx\>=tokens.size()){","tokenIdx++;//mustbeeverincrementthatthemethodpreviousToken()isworking"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StorePage(byte[]page,intpageSize,FileChannelraFile,longfileOffset){","super(raFile);","this.page=page;","this.pageSize=pageSize;","this.fileOffset=fileOffset;","finalvoidsetPageData(byte[]data,intsize){"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["size--;","if(prev==e)","table[i]=next;","else","prev.next=next;","returne.value;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["case108:","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["while(start\<length&&bytes[start]==0){","start++;","length-=start;","byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);","returnb;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["importjava.util.Calendar;","importjava.util.TimeZone;","importsmallsql.database.language.Language;","publicfinalclassDateTimeimplementsMutable{","longtime;","privateintdataType=SQLTokenizer.TIMESTAMP;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));","if(start==0&&byteLen==length)returnbytes;","if(byteLen\>length+start){","byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);","returnb;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.TINYINT:","offset++;","break;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{STXADD_IDENT_EXPECT,\"01000\"},","{STXADD_IDENT_EMPTY,\"01000\"},","{STXADD_IDENT_WRONG,\"01000\"},","{STXADD_OPER_MINUS,\"01000\"},","{STXADD_FUNC_UNKNOWN,\"01000\"},","{STXADD_PARAM_INVALID_COUNT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["StoreImplgetStore(Tabletable,SSConnectioncon,intlock)throwsException{","TableStorePagepage=this.page;","if(page==null)","returntable.getStore(con,filePos,lock);","while(page.nextLock!=null)page=page.nextLock;","returntable.getStore(page,lock);"]": ["|project://smallsql/src/smallsql/database/StorePageLink.java|"],
"["if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","ExpressionrsColumn=columnExpressions.get(i);//ColumnoftheResultSet","if(!rsColumn.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)rsColumn;","if(table==exp.getTable()){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["return;","offset3=offset2;","offset2=offset1;","offset1=offset-2;","offset=getPointer();","firstNode3=firstNode2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["packagesmallsql.database;","importjava.sql.*;","publicclassTableStorePageextendsStorePage{","finalTabletable;","intlockType;","SSConnectioncon;"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["finalvoidexecute()throwsException{","rowSource.execute();","index=newIndex(true);","finalbooleanisScrollable(){","returnfalse;","finalvoidbeforeFirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["row[1]=columnName;//COLUMN_NAME","finalintdataType=column.getDataType();","row[2]=Utils.getInteger(dataType);//DATA_TYPE","row[3]=SQLTokenizer.getKeyWord(dataType);//TYPE_NAME","row[4]=Utils.getInteger(column.getPrecision());//COLUMN_SIZE","row[6]=Utils.getShort(column.getScale());//DECIMAL_DIGITS"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["idx2=str1.indexOf(str2,idx1);","if(idx1\>0){","buffer.append(str1.substring(idx1));","returnbuffer.toString();","returnstr1;","intgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["publicstaticfinalStringCOL_WRONG_PREFIX=\"SS-0404\";","publicstaticfinalStringCOL_READONLY=\"SS-0405\";","publicstaticfinalStringCOL_INVALID_NAME=\"SS-0406\";","publicstaticfinalStringCOL_IDX_OUT_RANGE=\"SS-0407\";","publicstaticfinalStringCOL_AMBIGUOUS=\"SS-0408\";","publicstaticfinalStringGROUP_AGGR_INVALID=\"SS-0430\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","internalExpressions.add(expr);","returninternalExpressions.size()-1;","finalprivateintaddInternalExpressionFromSelect(Expressionexpr)throwsSQLException{","inttype=expr.getType();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["formatNumber(details.day,2,buf);","returnbuf.toString();","case112://ISOyyyymmdd","formatNumber(details.year,4,buf);","formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["searchTree=newSearchNode();","searchTree.letter=(char)(letters[0]|0x20);","SearchNodeprev=null;","SearchNodenode=searchTree;","booleanwasNextEntry=true;","for(inti=0;i\<letters.length;i++){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["inttype=getType();","if(type!=GROUP_BY)expr=expr.getParams()[0];","switch(type){","caseGROUP_BY:","caseFIRST:","if(isEmpty())set(expr.getObject(),expr.getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.INT:","returnUtils.getInteger(param1.getInt());","caseSQLTokenizer.BIGINT:","returnnewLong(param1.getLong());","caseSQLTokenizer.REAL:","returnnewFloat(param1.getFloat());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["finalbyte[]getBytes(intoffset,intdataType)throwsException{","returnnull;","finaldoublegetDouble(intoffset,intdataType)throwsException{","return0;","finalfloatgetFloat(intoffset,intdataType)throwsException{","return0;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["expr=exprCase;","break;","caseSQLTokenizer.IFNULL:","switch(paramCount){","case1:","returnnewExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["cmd.setParamValue(parameterIndex,newLong(x),SQLTokenizer.BIGINT);","publicvoidsetFloat(intparameterIndex,floatx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newFloat(x),SQLTokenizer.REAL);","publicvoidsetDouble(intparameterIndex,doublex)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["if(size==0){","writeShort((int)(value\>\>48));","writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value\>\>32));","writePointer(offset+pointerSize+2);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnnewMutableNumeric(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnnewMutableNumeric(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","Expression[]params=expr.getParams();","if(params!=null){","for(intp=0;p\<params.length;p++){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["buf.append(\',\');","buf.append(\'\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case107://Mondd,yyyy","buf.append(SHORT_MONTHS[details.month]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["}else","throwSmallSQLException.create(Language.COL_INVALID_NAME,newObject[]{expr.getName()});","if(t==tables.size())","throwSmallSQLException.create(Language.COL_WRONG_PREFIX,tableAlias);","}else{","booleanisSetFrom=false;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["{ROW_0_ABSOLUTE,\"Ilnumerodiriga0nonÃ¨validoperilmetodo\'\'absolute()\'\'.\"},","{ROW_NOCURRENT,\"Nessunarigacorrente.\"},","{ROWS_WRONG_MAX,\"Numeromassimodirighenonvalido({0}).\"},","{ROW_LOCKED,\"LarigaÃ¨bloccatadaun\'\'altraconnessione.\"},","{ROW_DELETED,\"RigagiÃ\u00a0cancellata.\"},","{SAVEPT_INVALID_TRANS,\"SAVEPOINTnonvalidoperquestatransazione.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnfromEntry.getNumeric(colIdx);","ObjectgetObject()throwsException{","returnfromEntry.getObject(colIdx);","StringgetString()throwsException{","returnfromEntry.getString(colIdx);","byte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["SSDatabaseMetaData(SSConnectioncon)throwsSQLException{","this.con=con;","st=newSSStatement(con);","publicbooleanallProceduresAreCallable(){","returntrue;","publicbooleanallTablesAreSelectable(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["command.execute(con,null);","db=newDatabase(name,file,con.isReadOnly());","databases.put(dbKey,db);","db.connections.put(con,null);","returndb;","privatestaticDatabasegetDatabase(SSConnectioncon,Stringname)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalclassDatabase{","staticprivateHashMapdatabases=newHashMap();","privatefinalTableViewMaptableViews=newTableViewMap();","privatefinalStringname;","privatefinalbooleanreadonly;","privatefinalFiledirectory;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["@Override","finalbooleangetBoolean(intcolIdx)throwsException{","returnstore.getBoolean(offsets[colIdx],dataTypes[colIdx]);","@Override","finalintgetInt(intcolIdx)throwsException{","returnstore.getInt(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["privateStringgetErrorString(SQLTokentoken,StringmiddleMsgCode,","ObjectmiddleMsgParam){","StringBufferbuffer=newStringBuffer(1024);","Stringmiddle=SmallSQLException.translateMsg(","middleMsgCode,newObject[]{middleMsgParam});","buffer.append(middle);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassTableView{","staticfinalintMAGIC_TABLE=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'T\';","staticfinalintMAGIC_VIEW=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'V\';"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["intcomp=0;","for(inti=0;i\<length;i++){","if(leftBytes[i]!=rightBytes[i]){","comp=leftBytes[i]\<rightBytes[i]?-1:1;","break;","if(comp==0&&leftBytes.length!=rightBytes.length){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.PARENTHESIS_L){","if(isMinus)","returnnewExpressionArithmetic(function(cmd,token,false),ExpressionArithmetic.NEGATIVE);","returnfunction(cmd,token,false);","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!isNull)offset+=count\<\<1;//notuse+=directlybecausereadShortchangetheoffset","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;","break;","default:thrownewError(String.valueOf(dataTypes[i]));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncomplement;","publicintintValue(){","returnUtils.long2int(longValue());","publiclonglongValue(){","if(value.length==0||signum==0){","return0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["bytes=newbyte[16];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","default:thrownewError();","@Override","voidscanObjectOffsets(int[]offsets,intdataTypes[]){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ExpressionValue(Objectvalue,intdataType){","super(VALUE);","this.value=value;","this.dataType=dataType;","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(day\>=32){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==31){","switch(month){","case1:","case3:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnpuffer;","finalstaticprivatechar[]bytesToBinarySortOrder(byte[]value){","intlength=value.length;","char[]puffer=newchar[length];","for(inti=0;i\<length;i++){","puffer[i]=(char)(value[i]&0xFF);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["useSetRowPosition=false;","booleanfirst()throwsException{","beforeFirst();","returnnext();","booleanprevious()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.SQL_TSI_WEEK:{","longday2=param2.getLong()/86400000;","longday1=param1.getLong()/86400000;","return(int)((day2+3)/7-(day1+3)/7);","}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["returntrue;","publicbooleansupportsOrderByUnrelated(){","returntrue;","publicbooleansupportsGroupBy(){","returntrue;","publicbooleansupportsGroupByUnrelated(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["store=Store.NOROW;","row=0;","@Override","finalbooleanfirst()throwsException{","filePos=table.getFirstPage();","row=1;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnSQLTokenizer.ASCII;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param1.getString().length()==0;","finalintgetInt()throwsException{","Stringstr=param1.getString();","if(str==null||str.length()==0)return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|"],
"["throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","break;","caseSQLTokenizer.ALL:","selCmd.setDistinct(false);","break;","caseSQLTokenizer.DISTINCT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(idx\<0){","if(nodeStack.size()\>1){","nodeStack.pop();","continue;","}else{","return-1;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["returndataSourceIdx|currentDS.getRowPosition()\<\<bitCount;","finalvoidsetRowPosition(longrowPosition)throwsException{","intbitCount=getBitCount();","intmask=0xFFFFFFFF\>\>\>(32-bitCount);","dataSourceIdx=(int)rowPosition&mask;","currentDS=dataSources.get(dataSourceIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseLESSER:returnleft.getMoney()\<right.getMoney();","caseLES_EQU:returnleft.getMoney()\<=right.getMoney();","caseUNEQUALS:returnleft.getMoney()!=right.getMoney();","caseBETWEEN:","long_left=left.getMoney();","return_left\>=right.getMoney()&&right2.getMoney()\>=_left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["SSConnectioncon;","privateStringalias;","privatelongtableTimestamp;","intlock=SQLTokenizer.SELECT;","staticTableViewResultcreateResult(TableViewtableView){","if(tableViewinstanceofTable)"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["caseTypes.CHAR:","caseTypes.VARCHAR:","caseTypes.LONGVARCHAR:","case-11://uniqueidentifier","return\"java.lang.String\";","caseTypes.CLOB:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["staticfinalintCHARACTLEN=1103;","staticfinalint_CHAR=1104;","staticfinalintCONCAT=1105;","staticfinalintDIFFERENCE=1106;","staticfinalintINSERT=1107;","staticfinalintLCASE=1108;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicintgetInt(StringparameterName)throwsSQLException{","returngetInt(findParameter(parameterName));","publiclonggetLong(StringparameterName)throwsSQLException{","returngetLong(findParameter(parameterName));","publicfloatgetFloat(StringparameterName)throwsSQLException{","returngetFloat(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["staticDatabasegetDatabase(Stringname,SSConnectioncon,booleancreate)throwsSQLException{","if(name==null){","returnnull;","if(name.startsWith(\"file:\")){","name=name.substring(5);","Filefile;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["return(int)getLong();","longgetLong()throwsException{","if(isNull())return0;","switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","returnparam2.getLong()+param1.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","returnTypes.LONGVARBINARY;","caseSQLTokenizer.BLOB:","returnTypes.BLOB;","caseSQLTokenizer.TINYINT:","returnTypes.TINYINT;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(token!=null){","switch(token.value){","caseSQLTokenizer.CLUSTERED:","caseSQLTokenizer.NONCLUSTERED:","break;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["executeImpl(sql);","returncmd.getQueryResult();","finalpublicintexecuteUpdate(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getUpdateCount();","finalpublicbooleanexecute(Stringsql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["returncmd;","caseSQLTokenizer.SELECT:","cmd.addValues(select());","while(parthesisCount--\>0){","nextToken(MISSING_PARENTHESIS_R);","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowSource.beforeFirst();","row=0;","finalbooleanfirst()throwsException{","beforeFirst();","returnnext();","finalbooleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["@Override","finalObjectgetObject(intcolIdx)throwsException{","returnstore.getObject(offsets[colIdx],dataTypes[colIdx]);","@Override","finalStringgetString(intcolIdx)throwsException{","returnstore.getString(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["longList=null;","}else{","returnrowOffset;","while(true){","IndexNodeScrollStatusstatus=(IndexNodeScrollStatus)nodeStack.peek();","intlevel=status.level;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["returnprecision;","finalintgetScale(){","intprecision=0;","for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getScale());","returnprecision;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["publicRefgetRef(StringcolumnName)throwsSQLException{","returngetRef(findColumn(columnName));","publicBlobgetBlob(StringcolumnName)throwsSQLException{","returngetBlob(findColumn(columnName));","publicClobgetClob(StringcolumnName)throwsSQLException{","returngetClob(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnUtils.getInteger(readShort());","caseSQLTokenizer.INT:","returnUtils.getInteger(readInt());","caseSQLTokenizer.BIGINT:","returnnewLong(readLong());","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row++;","returnisCurrentRow;","finalbooleanlast()throwsException{","while(next()){/*scrollaftertheend*/}","returnprevious();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["writeBinary(expr.getBytes(),column.getPrecision(),dataType!=SQLTokenizer.BINARY);","break;","caseSQLTokenizer.TINYINT:","writeByte(expr.getInt());","break;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buf.append(\'/\');","formatNumber(details.year%100,2,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicstaticfinalStringJOIN_INSERT=\"SS-0162\";","publicstaticfinalStringDELETE_WO_FROM=\"SS-0163\";","publicstaticfinalStringINSERT_WO_FROM=\"SS-0164\";","publicstaticfinalStringTABLE_CANT_RENAME=\"SS-0190\";","publicstaticfinalStringTABLE_CANT_DROP=\"SS-0191\";","publicstaticfinalStringTABLE_CANT_DROP_LOCKED=\"SS-0192\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.createFromException(e);","publicfloatgetFloat(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getFloat();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.SQL_TSI_HOUR:","returnparam2.getLong()+param1.getLong()*3600000;","caseSQLTokenizer.SQL_TSI_DAY:","returnparam2.getLong()+param1.getLong()*86400000;","caseSQLTokenizer.SQL_TSI_WEEK:{","returnparam2.getLong()+param1.getLong()*604800000;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["IndexNode[]temp=newIndexNode[length];","System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos+1,temp,pos,length-pos);","nodes=temp;","finalvoidaddNode(chardigit,longrowOffset)throwsSQLException{","IndexNodenode=addNode(digit);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returntrue;","publicbooleansupportsNonNullableColumns(){","returntrue;","publicbooleansupportsMinimumSQLGrammar(){","returntrue;","publicbooleansupportsCoreSQLGrammar(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnInteger.parseInt(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"VARBINARY\",VARBINARY);","addKeyWord(\"RAW\",RAW);//aliasforOracleRAWandLONGRAW","addKeyWord(\"IMAGE\",LONGVARBINARY);//aliasforMSSQLServerdatatypeIMAGE","addKeyWord(\"LONGVARBINARY\",LONGVARBINARY);","addKeyWord(\"BLOB\",BLOB);","addKeyWord(\"BYTE\",TINYINT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["voidsave(StoreImploutput)throwsSQLException{","output.writeShort(digit);","intlength=remainderKey==null?0:remainderKey.length;","output.writeInt(length);","if(length\>0)output.writeChars(remainderKey);","if(value==null){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["charchr1=sql[token.offset];","if(chr1==\'$\'){","previousToken();","Stringtok=newString(sql,token.offset+1,token.length-1);","if(isMinus)tok=\"-\"+tok;","returnnewExpressionValue(newMoney(Double.parseDouble(tok)),SQLTokenizer.MONEY);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatefinalintfindNodePos(chardigit){","returnfindNodePos(digit,0,nodes.length);","privatefinalintfindNodePos(chardigit,intstart,intend){","if(start==nodes.length)return-1;","intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnSQLTokenizer.LOCATE;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","intgetInt()throwsException{","Stringsuchstr=param1.getString();","Stringvalue=param2.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|"],
"["returnexpr;","caseSQLTokenizer.QUESTION:","ExpressionValueparam=newExpressionValue();","cmd.addParameter(param);","returnparam;","caseSQLTokenizer.CASE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["floatreadFloat(){","returnFloat.intBitsToFloat(readInt());","voidwriteNumeric(MutableNumericnum){","writeByte(num.getInternalValue().length);","writeByte(num.getScale());","writeByte(num.getSignum());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractintgetRow()throwsException;","abstractlonggetRowPosition();","abstractvoidsetRowPosition(longrowPosition)throwsException;","abstractvoidnullRow();","abstractvoidnoRow();"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["ExpressionparseExpression(Stringexpr)throwsSQLException{","this.sql=expr.toCharArray();","this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;","returnexpression(null,0);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["puffer=newbyte[256];","voidwriteTo(FileChannelfile)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(puffer,0,offset);","file.write(buffer);","voidwriteByte(intvalue){","verifyFreePufferSize(1);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["@Override","finalvoidexecute()throwsException{","insertStorePages=table.getInserts(con);","firstOwnInsert=0x4000000000000000L|insertStorePages.size();","maxFileOffset=table.raFile.size();","beforeFirst();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["packagesmallsql.database;","importjava.sql.SQLException;","abstractclassExpressionimplementsCloneable{","staticfinalExpressionNULL=newExpressionValue(null,SQLTokenizer.NULL);","finalprivateinttype;","privateStringname;//thenameoftheoriginalcolumninthetable"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returngetScale(dataType);","booleanisNull()throwsException{","switch(operation){","caseOR:","caseAND:","caseNOT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.sql.SQLException;","abstractclassExpressionimplementsCloneable{","staticfinalExpressionNULL=newExpressionValue(null,SQLTokenizer.NULL);","finalprivateinttype;","privateStringname;//thenameoftheoriginalcolumninthetable","privateStringalias;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["nextToken(MISSING_JOIN);","caseSQLTokenizer.COMMA:","fromSource=newJoin(Join.CROSS_JOIN,fromSource,rowSource(cmd,tables,0),null);","break;","caseSQLTokenizer.INNER:","nextToken(MISSING_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returndata[idx];","finalColumnget(Stringname){","for(inti=0;i\<size;i++){","Columncolumn=data[i];","if(name.equalsIgnoreCase(column.getName())){","returncolumn;"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["byte[]leftBytes=left.getBytes();","byte[]rightBytes=right.getBytes();","intcomp=Utils.compareBytes(leftBytes,rightBytes);","switch(operation){","caseIN:","caseEQUALS_NULL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.util.Map;","importjava.util.Set;","publicclassLanguage{","publicstaticfinalStringCUSTOM_MESSAGE=\"SS-0000\";","publicstaticfinalStringUNSUPPORTED_OPERATION=\"SS-0001\";","publicstaticfinalStringCANT_LOCK_FILE=\"SS-0003\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["col.setPrecision(value);","token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){","token=nextToken(MISSING_EXPRESSION);","try{","value=Integer.parseInt(token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case114://hh:mi:ss:mmm(24h)","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privateColumncolumn;","ExpressionName(Stringname){","super(NAME);","setName(name);","ExpressionName(inttype){","super(type);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["longgetRowPosition(){","returnrowIdx;","voidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;","finalbooleanrowInserted(){","returnrowSource.rowInserted();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["StringcolName=columns.get(c);","for(ints=0;s\<strings.size();s++){","if(colName.equalsIgnoreCase(strings.get(s)))","continuenextColumn;","returnInteger.MAX_VALUE;//NoStrinfoundforcolName","returnstrings.size()-columns.size();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["@Override","finallonggetRowPosition(){","returnfilePos;","@Override","finalvoidsetRowPosition(longrowPosition)throwsException{","filePos=rowPosition;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["buf.append(\'T\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["addGroupRow();","accumulateRow();","if(getRowCount()==0&&groupBy==null){","addGroupRow();","beforeFirst();","finalprivatevoidaddGroupRow(){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["continue;","}else","returngetReturnValue(status.nodeValue);","if(idx\<0){","if(nodeStack.size()\>1){","nodeStack.pop();"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["publicvoidsetAutoCommit(booleanautoCommit)throwsSQLException{","if(log.isLogging())log.println(\"AutoCommit:\"+autoCommit);","if(this.autoCommit!=autoCommit){","commit();","this.autoCommit=autoCommit;","publicbooleangetAutoCommit(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["finalIndexNodegetChildNode(chardigit){","intpos=findNodePos(digit);","if(pos\>=0)returnnodes[pos];","returnnull;","finalchar[]getRemainderValue(){","returnremainderKey;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseMUL:","returnleft.getScale()+right.getScale();","caseDIV:","returnMath.max(left.getScale()+5,right.getScale()+4);","caseNEGATIVE:","returnleft.getScale();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return(details2.year*12+details2.month)-(details1.year*12+details1.month);","caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*4+details2.month/3)-(details1.year*4+details1.month/3);","caseSQLTokenizer.SQL_TSI_YEAR:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["raFile.write(buffer);","StoreImplgetStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","TableStorePagestorePage=requestLock(con,pageOperation,filePos);","returnStoreImpl.createStore(this,storePage,pageOperation,filePos);","StoreImplgetStore(TableStorePagestorePage,intpageOperation)throwsException{","returnStoreImpl.recreateStore(this,storePage,pageOperation);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnnull;","finalvoidclear(){","Entrytab[]=table;","for(inti=0;i\<tab.length;i++)","tab[i]=null;","size=0;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returndriverInfos;","publicintgetMajorVersion(){","return0;","publicintgetMinorVersion(){","return21;","publicbooleanjdbcCompliant(){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["staticfinalintSQL_TSI_WEEK=1255;","staticfinalintSQL_TSI_MONTH=1256;","staticfinalintSQL_TSI_QUARTER=1257;","staticfinalintSQL_TSI_YEAR=1258;","static{","addKeyWord(\"MS\",SQL_TSI_FRAC_SECOND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["ExpressionrsColumn=columnExpressions.get(i);//ColumnoftheResultSet","if(!rsColumn.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)rsColumn;","if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnbuf.toString();","case8://hh:mm:ss","case108:","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnstr.substring(0,length);","caseSQLTokenizer.CHAR:{","Stringstr=convertToString();","intlength=datatype.getDisplaySize();","if(length\>str.length()){","char[]buffer=newchar[length-str.length()];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicbooleansupportsResultSetType(inttype){","switch(type){","caseResultSet.TYPE_FORWARD_ONLY:","caseResultSet.TYPE_SCROLL_INSENSITIVE:","caseResultSet.TYPE_SCROLL_SENSITIVE:","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.datatype=datatype;","Expression[]params=(style==null)?newExpression[]{value}:newExpression[]{value,style};","setParams(params);","intgetFunction(){","returnSQLTokenizer.CONVERT;","booleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicvoidsetDouble(intparameterIndex,doublex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newDouble(x),SQLTokenizer.DOUBLE);","publicvoidsetBigDecimal(intparameterIndex,BigDecimalx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.DECIMAL);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["return(int)(param2.getLong()/1000-param1.getLong()/1000);","caseSQLTokenizer.SQL_TSI_MINUTE:","return(int)(param2.getLong()/60000-param1.getLong()/60000);","caseSQLTokenizer.SQL_TSI_HOUR:","return(int)(param2.getLong()/3600000-param1.getLong()/3600000);","caseSQLTokenizer.SQL_TSI_DAY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:{","byte[]leftBytes=left.getBytes();","byte[]rightBytes=right.getBytes();","intcomp=Utils.compareBytes(leftBytes,rightBytes);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(buf.length()\>0)buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnois.readObject();","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnreadLongBinary();","caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returntemp/scaleFloatFactor[scale]*signum;","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).floatValue();","publicdoubledoubleValue(){","if(value.length==0||signum==0){","return0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnqueryTimeout;","finalpublicvoidsetQueryTimeout(intseconds)throwsSQLException{","checkStatement();","queryTimeout=seconds;","finalpublicvoidcancel()throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","StringgetName(){","returnname;","booleanisReadOnly(){","returnreadonly;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicbooleansupportsTransactions(){","returntrue;","publicbooleansupportsTransactionIsolationLevel(intlevel){","switch(level){","caseConnection.TRANSACTION_NONE:","caseConnection.TRANSACTION_READ_UNCOMMITTED:"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicstaticfinalStringSAVEPT_INVALID_DRIVER=\"SS-0551\";","publicstaticfinalStringALIAS_UNSUPPORTED=\"SS-0580\";","publicstaticfinalStringISOLATION_UNKNOWN=\"SS-0581\";","publicstaticfinalStringFLAGVALUE_INVALID=\"SS-0582\";","publicstaticfinalStringARGUMENT_INVALID=\"SS-0583\";","publicstaticfinalStringGENER_KEYS_UNREQUIRED=\"SS-0584\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(constraintType!=SQLTokenizer.UNIQUE)nextToken(MISSING_KEY);","SQLTokentoken=nextToken();","if(token!=null){","switch(token.value){","caseSQLTokenizer.CLUSTERED:","caseSQLTokenizer.NONCLUSTERED:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidnullRow(){","rowSource.nullRow();","rowIdx=-1;","voidnoRow(){","rowSource.noRow();","rowIdx=-1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["if(value\<0)","return(long)(value*10000-0.5);","return(long)(value*10000+0.5);","staticintindexOf(charvalue,char[]str,intoffset,intlength){","value|=0x20;","for(intend=offset+length;offset\<end;offset++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"MAX\",MAX);","addKeyWord(\"SUM\",SUM);","addKeyWord(\"FIRST\",FIRST);","addKeyWord(\"LAST\",LAST);","addKeyWord(\"AVG\",AVG);","classSearchNode{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["default:","value=expr.getObject();","privatestaticfinalObjectEMPTY=newObject();","finalbooleanisEmpty(){","returnvalue==EMPTY;","finalvoidclear(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["cmdSel.compile(con);","intcount=table.columns.size();","matrix=newint[count];","if(noColumns){","columnExpressions.clear();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["publicStringgetSchemaName(intcolumn)throwsSQLException{","returnnull;","publicintgetPrecision(intcolumn)throwsSQLException{","returngetColumnExpression(column).getPrecision();","publicintgetScale(intcolumn)throwsSQLException{","returngetColumnExpression(column).getScale();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.BIT:","returnTypes.BIT;","caseSQLTokenizer.BOOLEAN:","returnTypes.BOOLEAN;","caseSQLTokenizer.BINARY:","returnTypes.BINARY;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else{","afterLast();","while(newRow++\<0){","if(!previous()){","returnfalse;","returntrue;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["longresult=super.commit();","link.filePos=fileOffset;","link.page=null;","returnresult;","finalStorePageLinkgetLink(){","returnlink;"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["intoldOffset=offset;","correctPointers(0,oldOffset,-2,0);","size-=2;","System.arraycopy(data,oldOffset+2,data,oldOffset,size-oldOffset);","offset=oldOffset;","finalprivatevoidcorrectPointers(intstartOffset,intoldOffset,intdiff,intlevel){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["privateintsize;","privateDataSource[]data=newDataSource[4];","finalintsize(){","returnsize;","finalDataSourceget(intidx){","if(idx\>=size)"]": ["|project://smallsql/src/smallsql/database/DataSources.java|"],
"["while(true){","if(e==null)","returnnull;","if(e.key==key)","returne.value;","e=e.next;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["break;","caseSQLTokenizer.TINYINT:","page=find(page,expr.getInt(),1,nodeList);","break;","caseSQLTokenizer.SMALLINT:","page=find(page,shortToBinarySortOrder(expr.getInt()),1,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnInteger.MAX_VALUE;//doesnotmap","nextColumn:","for(intc=0;c\<columns.size();c++){","StringcolName=columns.get(c);","for(ints=0;s\<strings.size();s++){","if(colName.equalsIgnoreCase(strings.get(s)))"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>56);","page[offset++]=(byte)(value\>\>48);","page[offset++]=(byte)(value\>\>40);","page[offset++]=(byte)(value\>\>32);","page[offset++]=(byte)(value\>\>24);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","cases.set(p,param);","finalintgetFunction(){","returnSQLTokenizer.CASE;","finalbooleanisNull()throwsException{","returngetResult().isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["page.rollback();","page.freeLock();","voidrollback(intsavepoint)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=savepoint;i--){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["super(con,sql,rsType,rsConcurrency);","privateExpressiongetValue(inti)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodfindParameter()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodregisterOutParameter()notyetimplemented.\");","publicbooleanwasNull(){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.TIME:","((DateTime)value).time=Math.min(((DateTime)value).time,expr.getLong());","break;","default:thrownewError(\"\"+dataType);","break;","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnreadDate()!=0;","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime()!=0;","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnfalse;","default:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["MutableNumeric(MutableNumericnumeric){","this.signum=numeric.signum;","this.value=newint[numeric.value.length];","System.arraycopy(numeric.value,0,value,0,value.length);","this.scale=numeric.scale;","int[]getInternalValue(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["privatebooleannextEquals()throwsException{","if(rowList!=null){","longrowPosition=rowList.getNext(longListEnum);","if(rowPosition!=-1){","right.setRowPosition(rowPosition);","returntrue;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["returnmove();","finalbooleannext(){","rowIdx++;","returnmove();","finalbooleanlast(){","rowIdx=rowList.size()-1;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["indexDesc.save(store);","intoffsetEnd=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart);","store.writeInt(offsetEnd-offsetStart);","store.setCurrentOffsetInPage(offsetEnd);","store.writeInt(0);//nomoreadditionalinformations"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["database=con.database;","metadata=con.metadata;","log=con.log;","DatabasegetDatabase(booleanreturnNull)throwsSQLException{","testClosedConnection();","if(!returnNull&&database==null)throwSmallSQLException.create(Language.DB_NOTCONNECTED);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionASinextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.ASIN;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.asin(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionASin.java|"],
"["publicvoidupdateCharacterStream(StringcolumnName,Readerx,intlength)throwsSQLException{","updateCharacterStream(findColumn(columnName),x,length);","publicvoidupdateObject(StringcolumnName,Objectx,intscale)throwsSQLException{","updateObject(findColumn(columnName),x,scale);","publicvoidupdateObject(StringcolumnName,Objectx)throwsSQLException{","updateObject(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["Expressionsexpressions=newExpressions();","SQLParsersqlParser=newSQLParser();","for(intc=0;c\<count;c++){","Stringcolumn=store.readString();","columns.add(column);","expressions.add(sqlParser.parseExpression(column));"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["publicStringgetColumnName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getAlias();","publicStringgetSchemaName(intcolumn)throwsSQLException{","returnnull;","publicintgetPrecision(intcolumn)throwsSQLException{","returngetColumnExpression(column).getPrecision();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["default:","column.setPrecision(origExpression.getPrecision());","column.setScale(origExpression.getScale());","column.setDataType(exprName.getDataType());","}else{","exprName.setFrom(this,idx,column);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["finalintday;","finalinthour;","finalintminute;","finalintsecond;","finalintmillis;","intidx1=0;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalMutableNumericgetNumeric()throwsException{","returngetResult().getNumeric();","finalObjectgetObject()throwsException{","returngetResult().getObject();","finalStringgetString()throwsException{","returngetResult().getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["signum=1;","MutableNumeric(longcomplement,intscale){","this(complement);","this.scale=scale;","MutableNumeric(doubleval){","this(newBigDecimal(String.valueOf(val)));"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["buf.append(\'\');","formatHour12(details.hour,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case3://britshdd/mm/yy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returngetDoubleImpl(left.getDouble(),right.getDouble());","privatedoublegetDoubleImpl(doublelVal,doublerVal)throwsjava.lang.Exception{","switch(operation){","caseADD:returnlVal+rVal;","caseSUB:returnlVal-rVal;","caseMUL:returnlVal*rVal;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","caseSQLTokenizer.DELETE:","sizeUsed=PAGE_CONTROL_SIZE;","break;","default:thrownewError(\"\"+type);","offset=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intval=(signum\>0)?value[v]:(v==last)?-value[v]:~value[v];","complement[offset++]=(byte)(val\>\>24);","complement[offset++]=(byte)(val\>\>16);","complement[offset++]=(byte)(val\>\>8);","complement[offset++]=(byte)(val);","returncomplement;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["@Override","voiddeleteRow(SSConnectioncon)throwsSQLException{","status=DELETED;","type=SQLTokenizer.DELETE;","createWriteLock();","writeFinsh(con);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfindNodePos(digit,start,mid-1);","voidsave(StoreImploutput)throwsSQLException{","output.writeShort(digit);","intlength=remainderKey==null?0:remainderKey.length;","output.writeInt(length);","if(length\>0)output.writeChars(remainderKey);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["buffer.put(rootPage.getUnique()?(byte)1:(byte)0);","buffer.position(0);","raFile.write(buffer);","((FileIndexNode)rootPage).save();","voidclose()throwsIOException{","raFile.close();"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["bytes[offset++]=(byte)(value\>\>8);","bytes[offset++]=(byte)(value);","returnbytes;","publicBigDecimaltoBigDecimal(){","if(value==0)returnZERO;","returnnewBigDecimal(newBigInteger(toByteArray()),4);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["con.add(lock);","returnlock;","LongpageKey=newLong(readlock.fileOffset);//TODOperformance","TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);","while(lock!=null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["switch(dataType){","caseSQLTokenizer.SMALLDATETIME:","intseconds=(int)(time%60000);","if(seconds\<0){","seconds+=60000;","time-=seconds;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["shift++;","return;","offset3=offset2;","offset2=offset1;","offset1=offset-2;","offset=getPointer();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["privateExpressionright;","privateExpressionright2;","privateExpression[]inList;","finalprivateintoperation;","ExpressionArithmetic(Expressionleft,intoperation){","super(FUNCTION);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(complement\<0){","value[0]=(int)(~(complement\>\>32));","value[1]=(int)(-complement);","signum=-1;","}else{","value[0]=(int)(complement\>\>32);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["}else{","store=(filePos\<maxFileOffset)?table.getStore(con,filePos,lock):null;","if(store==null){","if(insertStorePages.size()\>0){","filePos=0x4000000000000000L;","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["return0;","}else{","if(value.length==1&&(value[0]\>0)){","returnUtils.double2long(value[0]/scaleDoubleFactor[scale]*signum);","}else","if(value.length==1){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(length==0){","value=EMPTY_INTS;","signum=0;","return;","value=newint[(length+3)/4];","if(complement[0]\<0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["puffer[offset++]=(byte)(c);","voidwriteBytes(byte[]value,intoff,intlength){","verifyFreePufferSize(length);","System.arraycopy(value,off,puffer,offset,length);","offset+=length;","privatevoidverifyFreePufferSize(intfreeSize){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["TableStorePagelock=newTableStorePage(con,this,LOCK_INSERT,-1);","readlock.nextLock=lock;","con.add(lock);","returnlock;","LongpageKey=newLong(readlock.fileOffset);//TODOperformance","TableStorePageprevLock=null;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.ATAN2:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionATan2();","break;","caseSQLTokenizer.CEILING:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{DELETE_WO_FROM,\"DieMethodedeleteRowbenÃ¶tigteinenFROMAusdruck.\"},","{INSERT_WO_FROM,\"DieMethodeinsertRowbenÃ¶tigteinenFROMAusdruck.\"},","{TABLE_CANT_RENAME,\"DieTabelle\'\'{0}\'\'kannnichtumbenanntwerden.\"},","{TABLE_CANT_DROP,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{TABLE_CANT_DROP_LOCKED,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden,weilsiegelocktist.\"},","{TABLE_CORRUPT_PAGE,\"BeschÃ¤digteTabellenseitebeiPosition:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["switch(param1.getDataType()){","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","doubledValue=((Double)para1).doubleValue();","return(dValue\<0)?newDouble(-dValue):para1;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["cmdCreate.addColumn(col);","returnnull;","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:","cmdCreate.addColumn(col);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.REAL:","returnnewFloat(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(readDouble());","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.right=right;","finalbooleanisScrollable(){","returnfalse;//TODOperformance,ifleftandrightarescrollablethenthisshouldalsoscrollable","voidbeforeFirst()throwsException{","scroll.beforeFirst();","isAfterLast=false;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetProcedureColumns(Stringcatalog,StringschemaPattern,StringprocedureNamePattern,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"COLUMN_NAME\",\"COLUMN_TYPE\",\"DATA_TYPE\",\"TYPE_NAME\",\"PRECISION\",\"LENGTH\",\"SCALE\",\"RADIX\",\"NULLABLE\",\"REMARKS\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTables(Stringcatalog,StringschemaPattern,StringtableNamePattern,String[]types)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["scale=num.scale;","signum=num.signum;","intgetScale(){","returnscale;","voidsetScale(intnewScale){","if(newScale==scale)return;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["cmd.setMaxRows(getMaxRows());","cmd.execute(con,this);","publicvoidsetNull(intparameterIndex,intsqlType)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,null,SQLTokenizer.NULL);","publicvoidsetBoolean(intparameterIndex,booleanx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["transactionTime=System.currentTimeMillis();","publicvoidclose()throwsSQLException{","rollback();","database=null;","commitPages=null;","Database.closeConnection(this);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["importjava.sql.SQLException;","importjava.util.ArrayList;","importsmallsql.database.language.Language;","publicclassCommandInsertextendsCommand{","booleannoColumns;//afterthetablenamewasnocolumnExpressions;allcolumnExpressionsindefaultorder","privateCommandSelectcmdSel;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["while(value.length()\>sIdx&&!range)returnfalse;","returntrue;","staticintlong2int(longvalue){","if(value\>Integer.MAX_VALUE)","returnInteger.MAX_VALUE;","if(value\<Integer.MIN_VALUE)"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.SMALLINT);","publicvoidsetInt(intparameterIndex,intx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.INT);","publicvoidsetLong(intparameterIndex,longx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["returnfindNodePos(digit,0,nodes.length);","privatefinalintfindNodePos(chardigit,intstart,intend){","if(start==nodes.length)return-1;","intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["if(status!=UPDATE_POINTER)returnthis;","StoreImplstoreTemp=table.getStore(((TableStorePage)storePage).con,filePosUpdated,type);","storeTemp.updatePointer=this;","returnstoreTemp;","privatevoidresizePage(intminNewSize){","intnewSize=Math.max(minNewSize,page.length*2);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["SQLTokenizer.CHAR,","SQLTokenizer.LONGVARCHAR,","SQLTokenizer.CLOB,","SQLTokenizer.VARBINARY,","SQLTokenizer.BINARY,","SQLTokenizer.LONGVARBINARY,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","page=find(page,numericToBinarySortOrder(expr.getNumeric()),nodeList);","break;","default:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["command.setLength(0);","command.append(line).append(\'\\n\');","}catch(Exceptione){","command.setLength(0);","e.printStackTrace();","privatestaticvoidprintRS(ResultSetrs)throwsSQLException{"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["returnsizeUsed;","@Override","longgetNextPagePos(){","if(updatePointer!=null)returnupdatePointer.getNextPagePos();","if(nextPageOffset\<=0){","nextPageOffset=sizePhysical;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringSEQUENCE_HEX_INVALID_STR=\"SS-0586\";","publicstaticfinalStringSYNTAX_BASE_OFS=\"SS-0610\";","publicstaticfinalStringSYNTAX_BASE_END=\"SS-0611\";","publicstaticfinalStringSTXADD_ADDITIONAL_TOK=\"SS-0612\";","publicstaticfinalStringSTXADD_IDENT_EXPECT=\"SS-0613\";","publicstaticfinalStringSTXADD_IDENT_EMPTY=\"SS-0614\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicTimestampgetTimestamp(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["name=name.substring(5);","Filefile;","try{","file=newFile(name).getCanonicalFile();","}catch(Throwableth){","throwSmallSQLException.createFromException(th);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["this.value=value;","this.scale=scale;","MutableNumeric(MutableNumericnumeric){","this.signum=numeric.signum;","this.value=newint[numeric.value.length];","System.arraycopy(numeric.value,0,value,0,value.length);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["case-11://uniqueidentifier","return\"java.lang.String\";","caseTypes.CLOB:","return\"java.sql.Clob\";","default:return\"java.lang.Object\";","finalintgetColumnIdx(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["for(inti=0;i\<tables.size();i++){","StringtableName=tables.get(i);","try{","TableViewtab=getTableView(con,tableName);","Columnscols=tab.columns;","for(intc=0;c\<cols.size();c++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["return255;","publicintgetMaxRowSize(){","return0;","publicbooleandoesMaxRowSizeIncludeBlobs(){","returnfalse;","publicintgetMaxStatementLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returngetLong()!=0;","intgetInt()throwsException{","return(int)getLong();","longgetLong()throwsException{","if(isNull())return0;","switch(interval){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["returntable;","privateJoinjoin(Commandcmd,DataSourcestables,RowSourceleft,inttype)throwsSQLException{","RowSourceright=rowSource(cmd,tables,0);","SQLTokentoken=nextToken();","while(true){","if(token==null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE).toString();","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["millis=t%1000;","t/=1000;","second=t%60;","t/=60;","minute=t%60;","t/=60;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnparam2.getBoolean();","returnparam3.getBoolean();","intgetInt()throwsException{","if(param1.getBoolean())","returnparam2.getInt();","returnparam3.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["publicclassExpressionFunctionRTrimextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.RTRIM;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),false),isLastValues);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["{DAYS_TOOLARGE,\"DaysaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"HoursaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"MinutesaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"SecondsaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"MillisecondsaretoolargeinTIMESTAMPvalue\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isaninvalidDATE,TIMEorTIMESTAMP.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(storePage!=null)","returnstorePage;//thenormalcaseshouldbethefasted","if(endTime==0)","endTime=System.currentTimeMillis()+5000;","longwaitTime=endTime-System.currentTimeMillis();","if(waitTime\<=0)"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["StringmsgStr=SmallSQLException.translateMsg(","Language.STXADD_KEYS_REQUIRED,newObject[]{});","StringBuffermsgBuf=newStringBuffer(msgStr);","for(inti=0;i\<validValues.length;i++){","Stringname=SQLTokenizer.getKeyWord(validValues[i]);","if(name==null)name=String.valueOf((char)validValues[i]);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicResultSetgetProcedureColumns(Stringcatalog,StringschemaPattern,StringprocedureNamePattern,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"COLUMN_NAME\",\"COLUMN_TYPE\",\"DATA_TYPE\",\"TYPE_NAME\",\"PRECISION\",\"LENGTH\",\"SCALE\",\"RADIX\",\"NULLABLE\",\"REMARKS\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTables(Stringcatalog,StringschemaPattern,StringtableNamePattern,String[]types)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["SearchNodenode=searchTree;","booleanwasNextEntry=true;","for(inti=0;i\<letters.length;i++){","charc=(char)(letters[i]|0x20);","while(node!=null&&node.letter!=c){","prev=node;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatefinalinttop;//valueofanoptionaltopexpression","SSPreparedStatement(SSConnectioncon,Stringsql)throwsSQLException{","this(con,sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSPreparedStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,rsType,rsConcurrency);","con.log.println(sql);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["publicStringgetString(StringparameterName)throwsSQLException{","returngetString(findParameter(parameterName));","publicbooleangetBoolean(StringparameterName)throwsSQLException{","returngetBoolean(findParameter(parameterName));","publicbytegetByte(StringparameterName)throwsSQLException{","returngetByte(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["voidaddValues(CommandSelectcmdSel){","this.cmdSel=cmdSel;","privatevoidcompile(SSConnectioncon)throwsException{","TableViewtableView=con.getDatabase(false).getTableView(con,name);","if(!(tableViewinstanceofTable))","throwSmallSQLException.create(Language.VIEW_INSERT);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["rowIdx=rowList.size()-1;","returnmove();","finalbooleanisLast(){","returnrowIdx==rowList.size()-1&&currentRow!=null;","finalbooleanisAfterLast(){","returnrowIdx\>=rowList.size()||rowList.size()==0;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["buf.append(\'/\');","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case2://ANSIyy.mm.dd"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{COL_INVALID_SIZE,\"Invalidcolumnsize{0}forcolumn\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Thecolumnprefix\'\'{0}\'\'doesnotmatchwithatablenameoraliasnameusedinthisquery.\"},","{COL_READONLY,\"Column{0}isreadonly.\"},","{COL_INVALID_NAME,\"Invalidcolumnname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Columnindexoutofrange:{0}.\"},","{COL_AMBIGUOUS,\"Column\'\'{0}\'\'isambiguous.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["return0;","staticfinalintCROSS_JOIN=1;","staticfinalintINNER_JOIN=2;","staticfinalintLEFT_JOIN=3;","staticfinalintFULL_JOIN=4;","staticfinalintRIGHT_JOIN=5;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["finalclassCommandTableextendsCommand{","finalprivateColumnscolumns=newColumns();","finalprivateIndexDescriptionsindexes=newIndexDescriptions();","finalprivateForeignKeysforeignKeys=newForeignKeys();","finalprivateinttableCommandType;","CommandTable(Loggerlog,Stringcatalog,Stringname,inttableCommandType){"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:","IndexDescriptionindex=index(cmdCreate,token.value,cmdCreate.name,null,colName);","cmdCreate.addIndex(index);","break;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["do{","if(isBeforeFirst){","result=left.next();","if(result){","result=right.first();","if(!result){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["packagesmallsql.database;","importjava.io.PrintStream;","importjava.io.PrintWriter;","importjava.sql.DriverManager;","importjava.sql.SQLException;","importjava.text.MessageFormat;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["long_left=left.getMoney();","return_left\>=right.getMoney()&&right2.getMoney()\>=_left;","default:","returngetMoney()!=0;","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(line==null){","return;//endofprogram","if(line.length()==0&&command.length()\>0){","booleanisRS=st.execute(command.toString());","if(isRS){","printRS(st.getResultSet());"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["if(((Expression)expr).type==type){","Expression[]p1=((Expression)expr).params;","Expression[]p2=params;","if(p1!=null&&p2!=null){","if(p1==null)returnfalse;","for(inti=0;i\<p1.length;i++){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["{CANT_LOCK_FILE,\"Impossibilebloccareilfile\'\'{0}\'\'.UndatabaseSmallSQLDatabasepuÃ²essereapertodaununicoprocesso.\"},","{DB_EXISTENT,\"Ildatabase\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{DB_NONEXISTENT,\"Ildatabase\'\'{0}\'\'Nonesiste.\"},","{DB_NOT_DIRECTORY,\"Ladirectory\'\'{0}\'\'nonÃ¨undatabaseSmallSQL.\"},","{DB_NOTCONNECTED,\"L\'\'utentenonÃ¨connessoaundatabase.\"},","{CONNECTION_CLOSED,\"LaconnessioneÃ¨giÃ\u00a0chiusa.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["Entryentry=newTable[i];","while(entry.next!=null)entry=entry.next;","entry.next=e;","e=next;","}while(e!=null);","finalTableStorePageremove(longkey){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["default:","c=\'0\';","break;","if(c\>\'0\'&&last!=c){","output[idx++]=c;","last=c;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["num.add(right.getNumeric());","returnnum;","caseSUB:","MutableNumericnum=left.getNumeric();","num.sub(right.getNumeric());","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnMessageFormat.format(localized,params);","privatestaticStringstripMsg(Throwablethrowable){","Stringmsg=throwable.getMessage();","if(msg==null||msg.length()\<30){","Stringmsg2=throwable.getClass().getName();","msg2=msg2.substring(msg2.lastIndexOf(\'.\')+1);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["System.arraycopy(value,off,puffer,offset,length);","offset+=length;","privatevoidverifyFreePufferSize(intfreeSize){","intminSize=offset+freeSize;","if(minSize\<puffer.length){","intnewSize=puffer.length\<\<1;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["booleanprevious()throwsException{","returncommandSelect.previous();","booleannext()throwsException{","returncommandSelect.next();","booleanlast()throwsException{","returncommandSelect.last();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returnnewIndexScrollStatus(rootPage,expressions);","finalObjectfindRows(Expressionsexpressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;","intcount=expressions.size();","for(inti=0;i\<count;i++){","page=findRows(page,expressions.get(i),searchNullValues,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicintgetMaxSchemaNameLength(){","return255;","publicintgetMaxProcedureNameLength(){","return255;","publicintgetMaxCatalogNameLength(){","return255;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["switch(token.value){","caseSQLTokenizer.SQL_BIGINT:dataType=SQLTokenizer.BIGINT;break;","caseSQLTokenizer.SQL_BINARY:dataType=SQLTokenizer.BINARY;break;","caseSQLTokenizer.SQL_BIT:dataType=SQLTokenizer.BIT;break;","caseSQLTokenizer.SQL_CHAR:dataType=SQLTokenizer.CHAR;break;","caseSQLTokenizer.SQL_DATE:dataType=SQLTokenizer.DATE;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intgetScale(){","returnscale;","voidsetScale(intnewScale){","if(newScale==scale)return;","intfactor=1;","if(newScale\>scale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["writeShort((int)(value\>\>32));","writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value\>\>16));","writePointer(offset+pointerSize+2);","writeShort(0);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["System.arraycopy(bytes,start,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intstart=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["Index(booleanunique){","rootPage=newIndexNode(unique,(char)-1);","Index(IndexNoderootPage){","this.rootPage=rootPage;","IndexScrollStatuscreateScrollStatus(Expressionsexpressions){","returnnewIndexScrollStatus(rootPage,expressions);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["MutableNumeric(doubleval){","this(newBigDecimal(String.valueOf(val)));","MutableNumeric(floatval){","this(newBigDecimal(String.valueOf(val)));","MutableNumeric(Stringval){","this(newBigDecimal(val));"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["DataSourcesfrom=newDataSources();","from.add(union);","selCmd.setTables(from);","selCmd.addColumnExpression(newExpressionName(\"*\"));","nextToken(MISSING_ALL);","nextToken(MISSING_SELECT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intgetFunction(){","returnSQLTokenizer.IIF;","booleanisNull()throwsException{","if(param1.getBoolean())","returnparam2.isNull();","returnparam3.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["ObjectInputStreamois=newObjectInputStream(bais);","returnMoney.parseMoney(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","return(long)(Utils.bytes2double(readLongBinary())*10000L);","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["isAggregateFunction=isAggregateFunction||paramType\>=Expression.GROUP_BEGIN;","if(paramType==Expression.NAME)","compileLinkExpressionName((ExpressionName)param);","elsecompileLinkExpressionParams(param);","expr.optimize();","privatefinalintcompileAdd_All_Table_Columns(DataSourcefromEntry,TableViewtable,intposition){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnUtils.string2boolean(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return(int)((time/86400000+3)%7);","staticlongparse(java.util.Datedate){","longt=date.getTime();","returnremoveDateTimeOffset(t);","staticDateTimevalueOf(java.util.Datedate){","if(date==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return;//endofprogram","if(line.length()==0&&command.length()\>0){","booleanisRS=st.execute(command.toString());","if(isRS){","printRS(st.getResultSet());","command.setLength(0);"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["if(dataTypeIdx\>=NVARCHAR_IDX)","returnSQLTokenizer.DOUBLE;","if(dataTypeIdx\>=INT_IDX)","returnSQLTokenizer.INT;","if(dataTypeIdx\>=BIGINT_IDX)","returnSQLTokenizer.BIGINT;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["loopToEndOfNode(listEnum);","}else{","setPreviousOffset(listEnum);","longresult=listEnum.resultStack[listEnum.stack];","while(true){","intnextEntry=(offset\<0)?-1:getUnsignedShort();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["staticfinalintIS=502;","staticfinalintNOT=503;","staticfinalintNULL=504;","staticfinalintTRUE=505;","staticfinalintFALSE=506;","staticfinalintBETWEEN=507;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["writeLong(store.writeFinsh(null));","StringreadLongString()throwsException{","longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","if(store==null)throwSmallSQLException.create(Language.LOB_DELETED);","returnnewString(store.readChars(store.readInt()));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalbooleanfirst()throwsException{","dataSourceIdx=0;","currentDS=dataSources.get(0);","booleanb=currentDS.first();","row=b?1:0;","returnb;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["TableViewtable=result.getTableView();","ColumnstabColumns=table.columns;","intcount=tabColumns.size();","Expression[]updateValues=newExpression[count];","if(newRowSources!=null){","for(inti=0;i\<columnExpressions.size();i++){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returntrue;","publicbooleansupportsUnionAll(){","returntrue;","publicbooleansupportsOpenCursorsAcrossCommit(){","returntrue;","publicbooleansupportsOpenCursorsAcrossRollback(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnLong.parseLong(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getLong(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidrollback(intsavepoint)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=savepoint;i--){","TransactionSteppage=(TransactionStep)commitPages.remove(i);","page.rollback();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["return0;","finallonggetMoney(intoffset,intdataType)throwsException{","return0;","finalMutableNumericgetNumeric(intoffset,intdataType)throwsException{","returnnull;","finalObjectgetObject(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["privatestaticfinalInteger[]integerCache=newInteger[260];","privatestaticfinalShort[]shortCache=newShort[260];","static{","for(inti=-4;i\<256;i++){","integerCache[i+4]=newInteger(i);","shortCache[i+4]=newShort((short)i);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["super(log);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);","TableViewResultresult=TableViewResult.getTableViewResult(from);","updateCount=0;","from.execute();"]": ["|project://smallsql/src/smallsql/database/CommandDelete.java|"],
"["privateCommanddelete()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_FROM);","from(cmd);","SQLTokentoken=nextToken();","if(token!=null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetArray(findColumn(columnName));","publicDategetDate(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){","returngetDate(columnIndex);","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(raFile==null){","throwSmallSQLException.create(Language.TABLE_MODIFIED,name);","longendTime=0;","while(true){","TableStorePagestorePage=requestLockImpl(con,pageOperation,page);","if(storePage!=null)"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["for(intc=0;c\<colCount;c++){","Columncolumn=newColumn();","column.setDataType(SQLTokenizer.NULL);","columns.add(column);","for(intr=0;r\<data.length;r++){","Object[]row=data[r];"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["row=b?1:0;","returnb;","finalbooleannext()throwsException{","booleann=currentDS.next();","row++;","if(n)returntrue;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();","num.floor();","returnnum;","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["packagesmallsql.database;","finalclassDistinctextendsRowSource{","finalprivateExpressionsdistinctColumns;","finalprivateRowSourcerowSource;","privateIndexindex;","privateintrow;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["staticfinalintSQL_TSI_DAY=1254;","staticfinalintSQL_TSI_WEEK=1255;","staticfinalintSQL_TSI_MONTH=1256;","staticfinalintSQL_TSI_QUARTER=1257;","staticfinalintSQL_TSI_YEAR=1258;","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnisCurrentRow;","finalbooleanprevious()throwsException{","booleanoldIsCurrentRow=isCurrentRow;","do{","isCurrentRow=rowSource.previous();","}while(isCurrentRow&&!isValidRow());"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["data=newString[16];","finalintsize(){","returnsize;","finalStringget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["Stringstr=param1.getString();","intstart=Math.min(Math.max(0,param2.getInt()-1),str.length());","intlength=Math.min(param3.getInt(),str.length());","StringBufferbuffer=newStringBuffer();","buffer.append(str.substring(0,start));","buffer.append(param4.getString());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["((ExpressionValue)params.get(p)).clear();","privateExpressionValuegetParam(intidx)throwsSQLException{","if(idx\<1||idx\>params.size())","throwSmallSQLException.create(Language.PARAM_IDX_OUT_RANGE,newObject[]{newInteger(idx),newInteger(params.size())});","return((ExpressionValue)params.get(idx-1));","voidsetParamValue(intidx,Objectvalue,intdataType)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();","row=0;","finalbooleanfirst()throwsException{","beforeFirst();","returnnext();"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["importsmallsql.database.language.Language;","publicclassCommandCreateDatabaseextendsCommand{","CommandCreateDatabase(Loggerlog,Stringname){","super(log);","this.type=SQLTokenizer.DATABASE;","if(name.startsWith(\"file:\"))"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["privateSQLTokennextToken(){","if(tokenIdx\>=tokens.size()){","tokenIdx++;//mustbeeverincrementthatthemethodpreviousToken()isworking","returnnull;","return(SQLToken)tokens.get(tokenIdx++);","privateSQLTokennextToken(int[]validValues)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnUtils.doubleToMoney(getDoubleImpl());","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voiddeleteRow()throwsSQLException{","commandSelect.deleteRow(con);","voidupdateRow(Expression[]updateValues)throwsException{","commandSelect.updateRow(con,updateValues);","voidinsertRow(Expression[]updateValues)throwsException{","commandSelect.insertRow(con,updateValues);"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["if(lock.lockType\<LOCK_WRITE){","lock.lockType=LOCK_WRITE;","returnlock;","prevLock=lock;","lock=lock.nextLock;","lock=newTableStorePage(con,this,LOCK_WRITE,readlock.fileOffset);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["booleanisFirst()throwsSQLException{","returnfrom.isFirst();","booleanfirst()throwsException{","returnfrom.first();","booleanprevious()throwsException{","returnfrom.previous();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["t/=60;","minute=t%60;","t/=60;","hour=t%24;","year=1970-(int)(t/365.2425);","booleanisLeap;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return((String)value).length();","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","return((byte[])value).length;","default:","returnsuper.getPrecision();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["store=newStoreNull(store.getNextPagePos());","@Override","finalbooleanrowInserted(){","returnfilePos\>=firstOwnInsert;","@Override","finalbooleanrowDeleted(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["return255;","publicintgetMaxColumnsInGroupBy(){","return0;","publicintgetMaxColumnsInIndex(){","return0;","publicintgetMaxColumnsInOrderBy(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["packagesmallsql.database;","finalclassColumns{","privateintsize;","privateColumn[]data;//commenthere2","Columns(){","data=newColumn[16];"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["break;","expr=newExpressionName(Expression.SUM);","expr.setParams(params);","Expressionexpr2=newExpressionName(Expression.COUNT);","expr2.setParams(params);","expr=newExpressionArithmetic(expr,expr2,ExpressionArithmetic.DIV);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){","quote=c;","}elseif(quote==c){","if(i+1\<sql.length&&sql[i+1]==quote){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intgetFunction(){","returnSQLTokenizer.LOCATE;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","intgetInt()throwsException{","Stringsuchstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|"],
"["publicbooleansupportsLikeEscapeClause(){","returntrue;","publicbooleansupportsMultipleResultSets(){","returntrue;","publicbooleansupportsMultipleTransactions(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalintmatchFactor(Stringsstrings){","if(strings.size()\<columns.size())","returnInteger.MAX_VALUE;//doesnotmap","nextColumn:","for(intc=0;c\<columns.size();c++){","StringcolName=columns.get(c);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["break;","default:","c=\'0\';","break;","if(c\>\'0\'&&last!=c){","output[idx++]=c;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["Expression[]params=newExpression[cases.size()*2+(elseResult!=null?1:0)];","inti=0;","for(intp=0;p\<cases.size();p++){","params[i++]=cases.get(p);","params[i++]=results.get(p);","if(i\<params.length)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["addKeyWord(\"THEN\",THEN);","addKeyWord(\"ELSE\",ELSE);","addKeyWord(\"END\",END);","addKeyWord(\"SWITCH\",SWITCH);","staticfinalintBIT=300;","staticfinalintBOOLEAN=301;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["System.out.println(\"============================\");","privatefinalFileChannelraFile;","FileIndex(booleanunique,FileChannelraFile){","this(newFileIndexNode(unique,(char)-1,raFile),raFile);","FileIndex(FileIndexNoderoot,FileChannelraFile){","super(root);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["cmd.setParamValue(parameterIndex,newFloat(x),SQLTokenizer.REAL);","publicvoidsetDouble(intparameterIndex,doublex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newDouble(x),SQLTokenizer.DOUBLE);","publicvoidsetBigDecimal(intparameterIndex,BigDecimalx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["Stringname=dirs[i].getName();","if(Utils.like(name,tablePattern)){","list.add(name.substring(0,name.length()-Utils.TABLE_VIEW_EXTENTION.length()));","returnlist;","Object[][]getColumns(SSConnectioncon,StringtablePattern,StringcolPattern)throwsException{","Listrows=newArrayList();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["break;","caseSQLTokenizer.ATAN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionATan();","break;","caseSQLTokenizer.ATAN2:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,x?Boolean.TRUE:Boolean.FALSE,SQLTokenizer.BOOLEAN);","publicvoidsetByte(intparameterIndex,bytex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.TINYINT);","publicvoidsetShort(intparameterIndex,shortx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["uebertrag=(value[--v1]=value[v1]+1)==0;","if(uebertrag){","resizeValue(1);","privatevoidresizeValue(inthighBits){","intval[]=newint[value.length+1];","val[0]=highBits;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalbooleanprevious(){","if(rowIdx--\<0)rowIdx=-1;","returnmove();","finalbooleannext(){","rowIdx++;","returnmove();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["finalprivateStringscolumns;","privateint[]matrix;","finalprivateExpressionsexpressions;","privateIndexindex;","privateFileChannelraFile;","IndexDescription(Stringname,StringtableName,intconstraintType,Expressionsexpressions,Stringscolumns){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["importjava.io.*;","importjava.util.ArrayList;","importjava.util.Calendar;","importjava.net.URL;","classSSPreparedStatementextendsSSStatementimplementsPreparedStatement{","privateArrayListbatches;"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["publicbooleansupportsMultipleTransactions(){","returntrue;","publicbooleansupportsNonNullableColumns(){","returntrue;","publicbooleansupportsMinimumSQLGrammar(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["writeShort(0);","writeShort((int)(value\>\>16));","writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value));","writeShort(0);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["return0;","publicintgetMaxColumnsInTable(){","return0;","publicintgetMaxConnections(){","return0;","publicintgetMaxCursorNameLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["try{","ColumnsoldColumns=oldTable.columns;","ColumnsnewColumns=oldColumns.copy();","for(inti=0;i\<columns.size();i++){","addColumn(newColumns,columns.get(i));","TablenewTable=database.createTable(con,newName,newColumns,oldTable.indexes,indexes,foreignKeys);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["d--;","millis=t%1000;","t/=1000;","second=t%60;","t/=60;","minute=t%60;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnum;","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(param1.getMoney());","caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(param1.getDataType()){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnrow==0;","finalbooleanisFirst(){","returnrow==1&&isCurrentRow;","finalbooleanisLast()throwsException{","if(!isCurrentRow)returnfalse;","longrowPos=rowSource.getRowPosition();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["dataSourceIdx=0;","currentDS=dataSources.get(0);","booleanb=currentDS.first();","row=b?1:0;","returnb;","finalbooleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["switch(operation){","caseADD:","caseSUB:","returnMath.max(left.getScale(),right.getScale());","caseMUL:","returnleft.getScale()+right.getScale();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["firstNode1=firstNode;","firstNode=true;","break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){","return;","firstNode=false;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalbooleanisBeforeFirst(){","returnrowPos\<=0;","finalbooleanisFirst(){","returnrowPos==1;","finalbooleanfirst(){","rowPos=1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["nextToken(MISSING_AS);","Columncol=datatype(false);","nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,null);","caseSQLTokenizer.TIMESTAMPDIFF:","token=nextToken(MISSING_INTERVALS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","ExpressionrsColumn=columnExpressions.get(i);//ColumnoftheResultSet","if(!rsColumn.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)rsColumn;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnDouble.parseDouble(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnDouble.parseDouble(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicbooleangetBoolean(StringparameterName)throwsSQLException{","returngetBoolean(findParameter(parameterName));","publicbytegetByte(StringparameterName)throwsSQLException{","returngetByte(findParameter(parameterName));","publicshortgetShort(StringparameterName)throwsSQLException{","returngetShort(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(param1.getBoolean())","returnparam2.getLong();","returnparam3.getLong();","floatgetFloat()throwsException{","if(param1.getBoolean())","returnparam2.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["nodes=temp;","privatefinalintfindNodeInsertPos(chardigit,intstart,intend){","if(start==end)returnstart;","intmid=start+(end-start)/2;","charnodeDigit=nodes[mid].digit;","if(nodeDigit==digit)returnmid;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","longreadLong(){","return((long)(page[offset++])\<\<56)|","((long)(page[offset++]&0xFF)\<\<48)|","((long)(page[offset++]&0xFF)\<\<40)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["num.mul(right.getNumeric());","returnnum;","caseDIV:","MutableNumericnum=left.getNumeric();","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","num.div(right.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["StringgetDefaultDefinition(){","returndefaultDefinition;","StringgetName(){","returnname;","booleanisAutoIncrement(){","returnidentity;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["voidscanObjectOffsets(int[]offsets,int[]dataTypes){","intgetUsedSize(){","return0;","longgetNextPagePos(){","return-1;","voiddeleteRow(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["publicbooleansupportsCatalogsInPrivilegeDefinitions(){","returntrue;","publicbooleansupportsPositionedDelete(){","returntrue;","publicbooleansupportsPositionedUpdate(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["save();","output.writeLong(fileOffset);","@Override","IndexNodeloadRef(longoffset)throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["{RSET_FWDONLY,\"DasResultSetistforwardonly.\"},","{RSET_CLOSED,\"DasResultSetistgeschlossen.\"},","{RSET_NOT_INSERT_ROW,\"DerCursorzeigtaktuellnichtaufdieEinfÃ¼geposition(insertrow).\"},","{RSET_ON_INSERT_ROW,\"DerCursorzeigtaktuellaufdieEinfÃ¼geposition(insertrow).\"},","{ROWSOURCE_READONLY,\"DieRowsourceistschreibgeschÃ¼tzt.\"},","{STMT_IS_CLOSED,\"DasStatementistbereitsgeschlossen.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["else","if(dateinstanceofjava.sql.Time)","type=SQLTokenizer.TIME;","else","type=SQLTokenizer.TIMESTAMP;","returnnewDateTime(parse(date),type);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:","switch(other.getDataType()){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnbuf.toString();","staticbyte[]hex2bytes(char[]hex,intoffset,intlength)throwsSQLException{","try{","byte[]bytes=newbyte[length/2];","for(inti=0;i\<bytes.length;i++){","bytes[i]=(byte)((hexDigit2int(hex[offset++])\<\<4)"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["row[6]=Utils.getInteger(col.getColumnSize());//COLUMN_SIZE","row[8]=Utils.getInteger(col.getScale());//DECIMAL_DIGITS","row[9]=Utils.getInteger(10);//NUM_PREC_RADIX","row[10]=Utils.getInteger(col.isNullable()?DatabaseMetaData.columnNullable:DatabaseMetaData.columnNoNulls);//NULLABLE","row[12]=col.getDefaultDefinition();//COLUMN_DEF","row[15]=row[6];//CHAR_OCTET_LENGTH"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["{TABLE_OR_VIEW_FILE_INVALID,\"01000\"},","{TABLE_EXISTENT,\"01000\"},","{FK_NOT_TABLE,\"01000\"},","{PK_ONLYONE,\"01000\"},","{KEY_DUPLICATE,\"01000\"},","{MONTH_TOOLARGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseLIKE:","caseISNULL:","caseISNOTNULL:","returnSQLTokenizer.BOOLEAN;","default:","returngetDataType(left,right);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["database=null;","commitPages=null;","Database.closeConnection(this);","finalvoidtestClosedConnection()throwsSQLException{","if(isClosed())throwSmallSQLException.create(Language.CONNECTION_CLOSED);","publicbooleanisClosed(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicclassExpressionFunctionLCaseextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.LCASE;","finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|"],
"["if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_DELETE);","if(tables.size()==0)","throwSmallSQLException.create(Language.DELETE_WO_FROM);","TableViewResult.getTableViewResult(tables.get(0)).deleteRow();","}catch(Throwablee){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.SMALLMONEY:","writeInt((int)expr.getMoney());","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnumeric=expr.getNumeric();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row=0;","finalbooleanfirst()throwsException{","isCurrentRow=rowSource.first();","while(isCurrentRow&&!isValidRow()){","isCurrentRow=rowSource.next();","row=1;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["publicstaticfinalStringSTXADD_COMMENT_OPEN=\"SS-0623\";","privateMapmessages;","privateMapsqlStates;","publicstaticLanguagegetLanguage(StringlocaleStr){","try{","returngetFromLocaleTree(localeStr);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["importsmallsql.database.language.Language;","classSmallSQLExceptionextendsSQLException{","privatestaticfinallongserialVersionUID=-1683756623665114L;","privatebooleanisInit;","privatestaticLanguagelanguage;","privateSmallSQLException(Stringmessage,StringvendorCode){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["for(inti=0;i\<columns.size();i++){","dataTypes[i]=columns.get(i).getDataType();","returntrue;","returnfalse;","@Override","finalvoidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["publicclassIdentityextendsNumberimplementsMutable{","finalprivatelongfilePos;","finalprivateFileChannelraFile;","finalprivatebyte[]page=newbyte[8];","privatelongvalue;","publicIdentity(FileChannelraFile,longfilePos)throwsIOException{"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["ByteBufferbuffer=ByteBuffer.allocate(8);","raFile.read(buffer);","buffer.position(0);","intmagic=buffer.getInt();","intversion=buffer.getInt();","switch(magic){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["returntrue;","staticfinalintVALUE=1;","staticfinalintNAME=2;","staticfinalintFUNCTION=3;","staticfinalintGROUP_BY=11;","staticfinalintCOUNT=12;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnnewTableResult((Table)tableView);","returnnewViewResult((View)tableView);","staticTableViewResultgetTableViewResult(RowSourcefrom)throwsSQLException{","if(frominstanceofWhere){","from=((Where)from).getFrom();","if(frominstanceofTableViewResult){"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["staticfinalintBETWEEN=507;","staticfinalintLIKE=508;","staticfinalintIN=509;","static{","addKeyWord(\"OR\",OR);","addKeyWord(\"AND\",AND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnSQLTokenizer.OCTETLEN;","booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|"],
"["default:thrownewError();","@Override","voidscanObjectOffsets(int[]offsets,intdataTypes[]){","offset=PAGE_CONTROL_SIZE;","for(inti=0;i\<offsets.length;i++){","offsets[i]=offset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["setNextFilePos();","row++;","returnmoveToValidRow();","@Override","finalvoidafterLast(){","filePos=-1;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["writeMagic(raFile);","returnraFile;","abstractvoidwriteMagic(FileChannelraFile)throwsException;","StringgetName(){","returnname;","longgetTimestamp(){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["filePos=table.getFirstPage();//canpointattheendoffile","else","if(filePos\>=0x4000000000000000L){","filePos++;","if((filePos&0x3FFFFFFFFFFFFFFFL)\>=insertStorePages.size()){","filePos=-1;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["chars[i]=(char)readShort();","returnchars;","byte[]readBytes(intlength){","byte[]bytes=newbyte[length];","System.arraycopy(puffer,offset,bytes,0,length);","offset+=length;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["break;","caseSQLTokenizer.SMALLDATETIME:","writeSmallDateTime(expr.getLong());","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(expr.getDataType()){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());","}else{","previousToken();","if(isMinus)","returnnewExpressionArithmetic(expr,ExpressionArithmetic.NEGATIVE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["size=offset;","return;","intshift=48;","booleanfirstNode=(size\>2);//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.VARBINARY:","returnreadBinary();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","byte[]bytes=newbyte[1];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"SET\",SET);","addKeyWord(\"EXEC\",EXECUTE);//aliasforEXECUTE;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"EXECUTE\",EXECUTE);","addKeyWord(\"FROM\",FROM);","addKeyWord(\"WHERE\",WHERE);","addKeyWord(\"GROUP\",GROUP);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["exprName.setFrom(this,idx,column);","switch(exprName.getType()){","caseExpression.MAX:","caseExpression.MIN:","caseExpression.FIRST:","caseExpression.LAST:"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["finalvoidbeforeFirst(){","rowIdx=-1;","currentRow=null;","finalbooleanisBeforeFirst(){","returnrowIdx\<0||rowList.size()==0;","finalbooleanisFirst(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["this.tableCommandType=tableCommandType;","voidaddColumn(Columncolumn)throwsSQLException{","addColumn(columns,column);","voidaddIndex(IndexDescriptionindexDescription)throwsSQLException{","indexes.add(indexDescription);","voidaddForeingnKey(ForeignKeykey){"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["returnbuf.toString();","case110://USAmm-dd-yyyy","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["rowPos=1;","returntrue;","finalbooleanisLast(){","returnrowPos==1;","finalbooleanisAfterLast(){","returnrowPos\>1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["packagesmallsql.database;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","classIndexDescriptions{","privateintsize;","privateIndexDescription[]data;"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["publicbytegetByte(StringparameterName)throwsSQLException{","returngetByte(findParameter(parameterName));","publicshortgetShort(StringparameterName)throwsSQLException{","returngetShort(findParameter(parameterName));","publicintgetInt(StringparameterName)throwsSQLException{","returngetInt(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["MutableFloat(floatvalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["intcount=store.readInt();","Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();","SQLParsersqlParser=newSQLParser();","for(intc=0;c\<count;c++){","Stringcolumn=store.readString();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnreadBinary();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intisolationLevel;","CommandSet(Loggerlog,inttype){","super(log);","this.type=type;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsjava.sql.SQLException{","switch(type){"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intlength=param2.getInt();","length=Math.min(length,str.length());","returnstr.substring(0,length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["addKeyWord(\"MINUTE\",MINUTE);","addKeyWord(\"MONTH\",MONTH);","addKeyWord(\"MONTHNAME\",MONTHNAME);","addKeyWord(\"GETDATE\",NOW);//aliasforMSSQLServer","addKeyWord(\"NOW\",NOW);","addKeyWord(\"QUARTER\",QUARTER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","if(index.isPrimary()){","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","Object[]row=newObject[6];"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["addKeyWord(\"LEFT\",LEFT);","addKeyWord(\"DATALENGTH\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LEN\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LENGTH\",LENGTH);","addKeyWord(\"CHARINDEX\",LOCATE);//aliasforMSSQLServer","addKeyWord(\"LOCATE\",LOCATE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.isDistinct=distinct;","finalvoidsetSource(RowSourcejoin){","this.from=join;","finalvoidsetTables(DataSourcesfrom){","this.tables=from;","finalvoidsetWhere(Expressionwhere){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["}else{","finalbooleanrightIsNull=right.isNull();","if(operation==EQUALS_NULL&&leftIsNull&&rightIsNull)returntrue;","if(leftIsNull||rightIsNull)returnfalse;","dataType=getDataType(left,right);","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return!isNext;","finalbooleanisAfterLast(){","returnrow\>0&&!isCurrentRow;","finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();","row=0;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returnnull;","ExpressionFunctionCasecaseExpr(finalCommandcmd)throwsSQLException{","ExpressionFunctionCaseexpr=newExpressionFunctionCase();","SQLTokentoken=nextToken(MISSING_EXPRESSION);","Expressioninput=null;","if(token.value!=SQLTokenizer.WHEN){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","if(cal==null){","returngetTime(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.DECIMAL:","returnreadNumeric().longValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatebooleanisInsertRow;","privateExpressionValue[]values;","privateintfetchDirection;","privateintfetchSize;","SSResultSet(SSStatementst,CommandSelectcmd){","this.st=st;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnFloat.parseFloat(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnMoney.parseMoney(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleangetMoreResults(){","rs=null;","updateCount=-1;","returnfalse;","voidsetMaxRows(intmax){/*EmptybecausenotsupportedforthemostCommands*/}","intgetMaxRows(){return-1;}"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["addKeyWord(\"VARCHAR\",VARCHAR);","addKeyWord(\"NVARCHAR2\",NVARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"NVARCHAR\",NVARCHAR);","addKeyWord(\"SYSNAME\",SYSNAME);","addKeyWord(\"TEXT\",LONGVARCHAR);","addKeyWord(\"LONGVARCHAR\",LONGVARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","page=find(page,longToBinarySortOrder(expr.getLong()),4,nodeList);","break;","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["for(inti=0;i\<length;i++){","charc=daten[i];","page[offset++]=(byte)(c);","page[offset++]=(byte)(c\>\>8);","char[]readChars(intlength){","char[]daten=newchar[length];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["col=datatype(isEscape);","nextToken(MISSING_COMMA);","expr=expression(cmd,0);","token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){","style=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"INT\"});","@Override","longgetLong(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicvoidupdateRow()throwsSQLException{","try{","if(values==null){","return;","st.con.log.println(\"updateRow()\");","testNotInsertRow();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(byteLen\>length+start){","byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);","returnb;","}else{","byte[]b=newbyte[byteLen-start];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["publicTimegetTime(StringcolumnName)throwsSQLException{","returngetTime(findColumn(columnName));","publicTimestampgetTimestamp(StringcolumnName)throwsSQLException{","returngetTimestamp(findColumn(columnName));","publicInputStreamgetAsciiStream(StringcolumnName)throwsSQLException{","returngetAsciiStream(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;","classColumnimplementsCloneable{"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["break;","caseSQLTokenizer.UNCOMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_UNCOMMITTED;","break;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!previous()){","returnfalse;","returntrue;","booleanrelative(introws)throwsException{","if(rows==0)return(row!=0);","if(rows\>0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["staticTimestampgetTimestamp(longtime){","returnnewTimestamp(DateTime.addDateTimeOffset(time));","staticTimegetTime(longtime){","returnnewTime(DateTime.addDateTimeOffset(time));","staticDategetDate(longtime){","returnnewDate(DateTime.addDateTimeOffset(time));"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["offsets[i]=offset;","booleanisNull=readBoolean();//forisNull","switch(dataTypes[i]){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["having(cmd);","break;","default:","previousToken();","return;","privatevoidorder(CommandSelectcmd)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleangetBoolean()throwsException{","returngetBoolean(getObject(),dataType);","staticbooleangetBoolean(Objectobj,intdataType)throwsException{","if(obj==null)returnfalse;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);","useSetRowPosition=true;","finalbooleanrowInserted(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["publicstaticfinalStringVIEW_CANTDROP=\"SS-0102\";","publicstaticfinalStringRSET_NOT_PRODUCED=\"SS-0130\";","publicstaticfinalStringRSET_READONLY=\"SS-0131\";","publicstaticfinalStringRSET_FWDONLY=\"SS-0132\";","publicstaticfinalStringRSET_CLOSED=\"SS-0133\";","publicstaticfinalStringRSET_NOT_INSERT_ROW=\"SS-0134\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["importjava.sql.SQLException;","importjava.util.ArrayList;","classIndex{","finalIndexNoderootPage;","Index(booleanunique){","rootPage=newIndexNode(unique,(char)-1);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicvoidsetInt(intparameterIndex,intx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.INT);","publicvoidsetLong(intparameterIndex,longx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newLong(x),SQLTokenizer.BIGINT);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();","publicbooleanequals(Objectobj){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intlength=param2.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));","node=node.getChildNode(digit);","if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);","if(equals(node.getRemainderValue(),key,i)){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["Stringslist=newStrings();","Filedirs[]=directory.listFiles();","if(dirs!=null)","if(tablePattern==null)tablePattern=\"%\";","tablePattern+=Utils.TABLE_VIEW_EXTENTION;","for(inti=0;i\<dirs.length;i++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["double_left=left.getDouble();","return_left\>=right.getDouble()&&right2.getDouble()\>=_left;","default:","returngetDouble()!=0;","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnewJoin(Join.LEFT_JOIN,right,left,expression(cmd,0));","returnnewJoin(type,left,right,expression(cmd,0));","default:","if(!right.hasAlias()){","right.setAlias(token.getName(sql));","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["abstractclassStore{","staticfinalStoreNULL=newStoreNull();","staticfinalStoreNOROW=newStoreNoCurrentRow();","abstractbooleanisNull(intoffset)throwsException;","abstractbooleangetBoolean(intoffset,intdataType)throwsException;","abstractbyte[]getBytes(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["voidadd(MutableNumericnum){","if(num.scale\<scale){","num.setScale(scale);","}else","if(num.scale\>scale){","setScale(num.scale);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(con.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filedir=newFile(name);","dir.mkdirs();","if(!newFile(dir,Utils.MASTER_FILENAME).createNewFile()){","throwSmallSQLException.create(Language.DB_EXISTENT,name);"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["caseSQLTokenizer.ELSE:","expr.setElseResult(expression(cmd,0));","break;","caseSQLTokenizer.END:","expr.setEnd();","returnexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.unique2bytes((String)obj);","caseSQLTokenizer.INT:","returnUtils.int2bytes(((Number)obj).intValue());","caseSQLTokenizer.DOUBLE:","returnUtils.double2bytes(((Number)obj).doubleValue());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){","if(isSetFrom){","throwSmallSQLException.create(Language.COL_AMBIGUOUS,expr.getName());","isSetFrom=true;","expr.setFrom(fromEntry,colIdx,table);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["puffer[offset++]=(byte)(value\>\>48);","puffer[offset++]=(byte)(value\>\>40);","puffer[offset++]=(byte)(value\>\>32);","puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["addKeyWord(\"DAY\",DAY);","addKeyWord(\"HOUR\",HOUR);","addKeyWord(\"MILLISECOND\",MILLISECOND);","addKeyWord(\"MINUTE\",MINUTE);","addKeyWord(\"MONTH\",MONTH);","addKeyWord(\"MONTHNAME\",MONTHNAME);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{TABLE_FILE_INVALID,\"01000\"},","{TABLE_OR_VIEW_FILE_INVALID,\"01000\"},","{TABLE_EXISTENT,\"01000\"},","{FK_NOT_TABLE,\"01000\"},","{PK_ONLYONE,\"01000\"},","{KEY_DUPLICATE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.CASE;","finalbooleanisNull()throwsException{","returngetResult().isNull();","finalbooleangetBoolean()throwsException{","returngetResult().getBoolean();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["params=newParams;","paramCount=3;","break;","default:","invalidParamCount=true;","expr=null;//onlyforCompiler"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionPower();","break;","caseSQLTokenizer.RADIANS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRadians();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"LEN\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LENGTH\",LENGTH);","addKeyWord(\"CHARINDEX\",LOCATE);//aliasforMSSQLServer","addKeyWord(\"LOCATE\",LOCATE);","addKeyWord(\"LTRIM\",LTRIM);","addKeyWord(\"OCTET_LENGTH\",OCTETLEN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.CREATE:","store.page=newbyte[DEFAULT_PAGE_SIZE];","break;","caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:","caseSQLTokenizer.DELETE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setPrecision(value);","token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){","token=nextToken(MISSING_EXPRESSION);","try{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["page[0]=(byte)(value\>\>56);","page[1]=(byte)(value\>\>48);","page[2]=(byte)(value\>\>40);","page[3]=(byte)(value\>\>32);","page[4]=(byte)(value\>\>24);","page[5]=(byte)(value\>\>16);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["returngetDouble()!=0;","finalintgetInt()throwsException{","return(int)getDouble();","finallonggetLong()throwsException{","return(long)getDouble();","finalfloatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["interval=mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});","intgetFunction(){","returnSQLTokenizer.TIMESTAMPDIFF;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{","Stringvalue=SQL_STATES[i][1];","sqlStates.put(key,value);","publicStringgetMessage(Stringkey){","Stringmessage=(String)messages.get(key);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["result.updateRow(updateValues);","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["addKeyWord(\"AS\",AS);","addKeyWord(\"DEFAULT\",DEFAULT);","addKeyWord(\"AUTO_INCREMENT\",IDENTITY);//aliasforIDENTITY;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"IDENTITY\",IDENTITY);","addKeyWord(\"INNER\",INNER);","addKeyWord(\"JOIN\",JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatestaticfinalint[]MISSING_PARENTHESIS_R={SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_DATATYPE={SQLTokenizer.BIT,SQLTokenizer.BOOLEAN,SQLTokenizer.BINARY,SQLTokenizer.VARBINARY,SQLTokenizer.RAW,SQLTokenizer.LONGVARBINARY,SQLTokenizer.BLOB,SQLTokenizer.TINYINT,SQLTokenizer.SMALLINT,SQLTokenizer.INT,SQLTokenizer.COUNTER,SQLTokenizer.BIGINT,SQLTokenizer.SMALLMONEY,SQLTokenizer.MONEY,SQLTokenizer.DECIMAL,SQLTokenizer.NUMERIC,SQLTokenizer.REAL,SQLTokenizer.FLOAT,SQLTokenizer.DOUBLE,SQLTokenizer.DATE,SQLTokenizer.TIME,SQLTokenizer.TIMESTAMP,SQLTokenizer.SMALLDATETIME,SQLTokenizer.CHAR,SQLTokenizer.NCHAR,SQLTokenizer.VARCHAR,SQLTokenizer.NVARCHAR,SQLTokenizer.LONG,SQLTokenizer.LONGNVARCHAR,SQLTokenizer.LONGVARCHAR,SQLTokenizer.CLOB,SQLTokenizer.NCLOB,SQLTokenizer.UNIQUEIDENTIFIER,SQLTokenizer.JAVA_OBJECT,SQLTokenizer.SYSNAME};","privatestaticfinalint[]MISSING_SQL_DATATYPE={SQLTokenizer.SQL_BIGINT,SQLTokenizer.SQL_BINARY,SQLTokenizer.SQL_BIT,SQLTokenizer.SQL_CHAR,SQLTokenizer.SQL_DATE,SQLTokenizer.SQL_DECIMAL,SQLTokenizer.SQL_DOUBLE,SQLTokenizer.SQL_FLOAT,SQLTokenizer.SQL_INTEGER,SQLTokenizer.SQL_LONGVARBINARY,SQLTokenizer.SQL_LONGVARCHAR,SQLTokenizer.SQL_REAL,SQLTokenizer.SQL_SMALLINT,SQLTokenizer.SQL_TIME,SQLTokenizer.SQL_TIMESTAMP,SQLTokenizer.SQL_TINYINT,SQLTokenizer.SQL_VARBINARY,SQLTokenizer.SQL_VARCHAR};","privatestaticfinalint[]MISSING_INTO={SQLTokenizer.INTO};","privatestaticfinalint[]MISSING_BETWEEN_IN={SQLTokenizer.BETWEEN,SQLTokenizer.IN};","privatestaticfinalint[]MISSING_NOT_NULL={SQLTokenizer.NOT,SQLTokenizer.NULL};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case1:","param2=param;","break;","case2:","param3=param;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["privatefinallonggetReturnValue(Objectvalue){","if(rootPage.getUnique()){","return((Long)value).longValue();","}else{","longList=(LongTreeList)value;","longListEnum.reset();"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["privatefinalStringname;","longtransactionTime;","SSSavepoint(intid,Stringname,longtransactionTime){","this.id=id;","this.name=name;","this.transactionTime=transactionTime;"]": ["|project://smallsql/src/smallsql/database/SSSavepoint.java|"],
"["staticfinalintIN=509;","static{","addKeyWord(\"OR\",OR);","addKeyWord(\"AND\",AND);","addKeyWord(\"IS\",IS);","addKeyWord(\"NOT\",NOT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return(long)getFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["rowIdx=-1;","currentRow=null;","finalbooleanisBeforeFirst(){","returnrowIdx\<0||rowList.size()==0;","finalbooleanisFirst(){","returnrowIdx==0&&currentRow!=null;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["publicvoidregisterOutParameter(inti,intsqlType)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodregisterOutParameter()notyetimplemented.\");","publicbooleanwasNull(){","returnwasNull;","publicStringgetString(inti)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","((DateTime)value).time=Math.max(((DateTime)value).time,expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["byte[]bytes=param1.getBytes();","intbyteLen=bytes.length;","intstart=Math.min(Math.max(0,param2.getInt()-1),byteLen);","intlength=param3.getInt();","if(length\<0)","throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["offset-=2;","while(true){","if(shift!=0){","offset=insertNode(octet);","}else{","insertNodeLastLevel(octet);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(offset==oldOffset){","intabsDiff=Math.abs(diff);","if(absDiff==2)return;","offset+=absDiff;","firstNode=false;","continue;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["voidsub(MutableNumericnum){","if(num.scale\<scale){","num.setScale(scale);","}else","if(num.scale\>scale){","setScale(num.scale);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos+1,temp,pos,length-pos);","nodes=temp;","finalvoidaddNode(chardigit,longrowOffset)throwsSQLException{","IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseBETWEEN:","long_left=left.getMoney();","return_left\>=right.getMoney()&&right2.getMoney()\>=_left;","default:","returngetMoney()!=0;","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["rowPos--;","returnrowPos==1;","finalbooleannext(){","rowPos++;","returnrowPos==1;","finalbooleanlast(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["{UNSUPPORTED_TYPE_CONV,\"TipononsupportatoperlafunzioneCONVERT:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"TipononsupportatoperlafunzioneSUM:\'\'{0}\'\'.\"},","{UNSUPPORTED_TYPE_MAX,\"TipononsupportatoperlafunzioneMAX:\'\'{0}\'\'.\"},","{UNSUPPORTED_CONVERSION,\"NonÃ¨possibleconvertire\'\'{0}\'\'[{1}]in\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneINSERT.\"},","{SUBSTR_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneSUBSTRING.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["addKeyWord(\"NOT\",NOT);","addKeyWord(\"NULL\",NULL);","addKeyWord(\"YES\",TRUE);//aliasforTRUE","addKeyWord(\"TRUE\",TRUE);","addKeyWord(\"NO\",FALSE);//aliasforFALSE","addKeyWord(\"FALSE\",FALSE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"SOUNDEX\",SOUNDEX);","addKeyWord(\"SPACE\",SPACE);","addKeyWord(\"SUBSTRING\",SUBSTRING);","addKeyWord(\"TRIM\",TRIM);","addKeyWord(\"UCASE\",UCASE);","staticfinalintCURDATE=1200;//firsttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","caseSQLTokenizer.UPDATE:","if(status!=UPDATE_POINTER){","sizeUsed=offset;","break;","caseSQLTokenizer.DELETE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).toString();","if(scale\>0){","while(buf.length()\<=scale)buf.insert(0,\'0\');","buf.insert(buf.length()-scale,\'.\');","if(signum\<0)buf.insert(0,\'-\');"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["this.cmdSel=cmdSel;","privatevoidcompile(SSConnectioncon)throwsException{","TableViewtableView=con.getDatabase(false).getTableView(con,name);","if(!(tableViewinstanceofTable))","throwSmallSQLException.create(Language.VIEW_INSERT);","table=(Table)tableView;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["if(idx\>=status.nodes.length){","if(nodeStack.size()\>1){","nodeStack.pop();","continue;","}else{","status.idx=status.nodes.length;//topreventproblemswithscrollbackaftermultiplecallsaftertheend."]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["list.add(tree);","Expression[]params=tree.getParams();","if(params!=null){","for(inti=0;i\<params.length;i++){","getExpressionNameFromTree(list,tree);","finalstaticchar[]digits={\'0\',\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\',\'A\',\'B\',\'C\',\'D\',\'E\',\'F\'};"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["intsignum=readByte();","for(inti=0;i\<value.length;i++){","value[i]=readInt();","returnnewMutableNumeric(signum,value,scale);","voidwriteTimestamp(longts){","writeLong(ts);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["SSStatement(SSConnectioncon,intrsType,intrsConcurrency)throwsSQLException{","this.con=con;","this.rsType=rsType;","this.rsConcurrency=rsConcurrency;","con.testClosedConnection();","finalpublicResultSetexecuteQuery(Stringsql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.DECIMAL:","returnreadNumeric().floatValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetDataType(left,right);","intgetScale(){","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.HAVING:","caseSQLTokenizer.ORDER:","caseSQLTokenizer.COMMA:","caseSQLTokenizer.SET:","caseSQLTokenizer.JOIN:","caseSQLTokenizer.LIMIT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NOT:returnNOT;","caseSQLTokenizer.BIT_OR:returnBIT_OR;","caseSQLTokenizer.BIT_AND:returnBIT_AND;","caseSQLTokenizer.BIT_XOR:returnBIT_XOR;","caseSQLTokenizer.TILDE:returnBIT_NOT;","default:return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["raFile.close();","}catch(Exceptione2){","DriverManager.println(e2.toString());","throwSmallSQLException.createFromException(e);","FilegetFile(Databasedatabase){","returnnewFile(Utils.createTableViewFileName(database,name));"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(float)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicstaticLanguagegetLanguage(StringlocaleStr){","try{","returngetFromLocaleTree(localeStr);","catch(IllegalArgumentExceptione){","returngetDefaultLanguage();","publicstaticLanguagegetDefaultLanguage(){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returncmd;","privateCommandcreate()throwsSQLException{","while(true){","SQLTokentoken=nextToken(COMMANDS_CREATE);","switch(token.value){","caseSQLTokenizer.DATABASE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["classGroupResultextendsMemoryResult{","privateExpressioncurrentGroup;//Validateifthecurrentrowofcmdispartofthecurrentgroup","privateRowSourcefrom;","privateExpressionsgroupBy;//thelistofExpressionsintheGROUPBYclause","privateExpressionsexpressions=newExpressions();//ListofExpression","privateExpressionsinternalExpressions=newExpressions();//alistofAggregateFunctionandColNamesfromSELECT,GROUPBYandHAVING"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["caseEQUALS:returnleft.getDouble()==right.getDouble();","caseGREATER:returnleft.getDouble()\>right.getDouble();","caseGRE_EQU:returnleft.getDouble()\>=right.getDouble();","caseLESSER:returnleft.getDouble()\<right.getDouble();","caseLES_EQU:returnleft.getDouble()\<=right.getDouble();","caseUNEQUALS:returnleft.getDouble()!=right.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return(obj==Boolean.TRUE)?1:0;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicbooleansupportsDataDefinitionAndDataManipulationTransactions(){","returntrue;","publicbooleansupportsDataManipulationTransactionsOnly(){","returnfalse;","publicbooleandataDefinitionCausesTransactionCommit(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:","page=find(page,stringToBinarySortOrder(expr.getString(),false),nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;","columns.add(newString(sql,offset,length));","token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"UNIQUE\",UNIQUE);","addKeyWord(\"CLUSTERED\",CLUSTERED);","addKeyWord(\"NONCLUSTERED\",NONCLUSTERED);","addKeyWord(\"REFERENCES\",REFERENCES);","addKeyWord(\"UNION\",UNION);","addKeyWord(\"ALL\",ALL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["};","returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER,params);","voidoptimize()throwsSQLException{","super.optimize();","Expression[]params=getParams();","if(params.length==1){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.DECIMAL:","return(long)(readNumeric().doubleValue()*10000L);","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSUM:","if(isEmpty()){","initValue(expr);","}else","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["return0;","publicintgetMaxStatements(){","return0;","publicintgetMaxTableNameLength(){","return255;","publicintgetMaxTablesInSelect(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["StringskeyColumnNames=null;","ArrayListkeys=null;","booleanneedGeneratedKeys=st.needGeneratedKeys();","intgeneratedKeysType=0;","while(cmdSel.next()){","if(needGeneratedKeys){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["privatefinalintcompileAdd_All_Table_Columns(DataSourcefromEntry,TableViewtable,intposition){","for(intk=0;k\<table.columns.size();k++){","ExpressionNameexpr=newExpressionName(table.columns.get(k).getName());","expr.setFrom(fromEntry,k,table);","columnExpressions.add(position++,expr);","returnposition;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["accumulateRow();","continueNextRow;","addGroupRow();","accumulateRow();","if(getRowCount()==0&&groupBy==null){","addGroupRow();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["firstNode=true;","}else{","shift+=16;","listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["inttype=expr.getType();","if(type\>=Expression.GROUP_BEGIN){","throwSmallSQLException.create(Language.GROUP_AGGR_INVALID,expr);","}else{","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["complement[offset++]=(byte)(val\>\>16);","complement[offset++]=(byte)(val\>\>8);","complement[offset++]=(byte)(val);","returncomplement;","publicintintValue(){","returnUtils.long2int(longValue());"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intsize2=size\<\<1;","if(size2\>=data.length){","resize(size2);","data[size2]=value1;","data[size2+1]=value2;","size++;"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["intlength=datatype.getPrecision();","if(length\<bytes.length){","byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;","returnbytes;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BIGINT\"});","@Override","floatgetFloat(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(rowPosition\>=0){","rowSource.setRowPosition(rowPosition);","returntrue;","}else{","rowSource.noRow();","row=0;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returngetDatabase(con,catalog).getTableView(con,tableName);","TableViewgetTableView(SSConnectioncon,StringtableName)throwsSQLException{","synchronized(tableViews){","TableViewtableView=tableViews.get(tableName);","if(tableView==null){","tableView=TableView.load(con,this,tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnfalse;","abstractvoiddeleteRow()throwsSQLException;","abstractvoidupdateRow(Expression[]updateValues)throwsException;","abstractvoidinsertRow(Expression[]updateValues)throwsException;","finalbooleanisScrollable(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["finalExpression[]getParams(){returnparams;}","voidoptimize()throwsSQLException{","if(params!=null){","for(intp=0;p\<params.length;p++){","params[p].optimize();","publicbooleanequals(Objectexpr){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","intseconds=(int)(time%60000);","if(seconds\<0){","seconds+=60000;","time-=seconds;","break;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.NCHAR:","return((String)obj).getBytes();","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.unique2bytes((String)obj);","caseSQLTokenizer.INT:","returnUtils.int2bytes(((Number)obj).intValue());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"OR\",OR);","addKeyWord(\"AND\",AND);","addKeyWord(\"IS\",IS);","addKeyWord(\"NOT\",NOT);","addKeyWord(\"NULL\",NULL);","addKeyWord(\"YES\",TRUE);//aliasforTRUE"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseGROUP_BY:","caseSUM:","caseFIRST:","caseLAST:","clear();","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatefinalvoidmoveRemainderValue()throwsSQLException{","ObjectrowOffset=value;","char[]puffer=remainderKey;","value=null;","remainderKey=null;","IndexNodenewNode=addNode(puffer[0]);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{PK_ONLYONE,\"01000\"},","{KEY_DUPLICATE,\"01000\"},","{MONTH_TOOLARGE,\"01000\"},","{DAYS_TOOLARGE,\"01000\"},","{HOURS_TOOLARGE,\"01000\"},","{MINUTES_TOOLARGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnSQLTokenizer.CONVERT;","booleanisNull()throwsException{","returnparam1.isNull();","booleangetBoolean()throwsException{","returnExpressionValue.getBoolean(getObject(),getDataType());","intgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(lock.lockType==LOCK_WRITE){","returnnull;//writelockofanotherConnection","prevLock=lock;","lock=lock.nextLock;","if(usableLock!=null){","returnusableLock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["addKeyWord(\"ON\",ON);","addKeyWord(\"OUTER\",OUTER);","addKeyWord(\"FULL\",FULL);","addKeyWord(\"CROSS\",CROSS);","addKeyWord(\"USE\",USE);","addKeyWord(\"TOP\",TOP);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicintfindColumn(StringcolumnName)throwsSQLException{","Expressionscolumns=columnExpressions;","for(inti=0;i\<columns.size();i++){","if(columnName.equalsIgnoreCase(columns.get(i).getAlias()))","returni;","throwSmallSQLException.create(Language.COL_MISSING,columnName);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["for(intc=0;c\<columns.size();c++){","StringcolName=columns.get(c);","for(ints=0;s\<strings.size();s++){","if(colName.equalsIgnoreCase(strings.get(s)))","continuenextColumn;","returnInteger.MAX_VALUE;//NoStrinfoundforcolName"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returnfilePos;","@Override","finalvoidsetRowPosition(longrowPosition)throwsException{","filePos=rowPosition;","if(filePos\<0||!moveToRow()){","store=newStoreNull(store.getNextPagePos());"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["staticfinalintUNCOMMITTED=245;","staticfinalintREPEATABLE=246;","staticfinalintSERIALIZABLE=247;","staticfinalintCONSTRAINT=250;","staticfinalintPRIMARY=251;","staticfinalintFOREIGN=252;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","returnstore.readBytes(store.readInt());","voidwriteChars(char[]daten){","intlength=daten.length;","intnewSize=offset+2*length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnget(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{","returnget(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{","returnget(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),false),isLastValues);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["this.columns=columns;","staticTableViewload(SSConnectioncon,Databasedatabase,Stringname)throwsSQLException{","FileChannelraFile=null;","try{","StringfileName=Utils.createTableViewFileName(database,name);","Filefile=newFile(fileName);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseGREATER:returnleft.getInt()\>right.getInt();","caseGRE_EQU:returnleft.getInt()\>=right.getInt();","caseLESSER:returnleft.getInt()\<right.getInt();","caseLES_EQU:returnleft.getInt()\<=right.getInt();","caseUNEQUALS:returnleft.getInt()!=right.getInt();","caseBETWEEN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnget(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{","returnget(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{","returnget(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["SSResultSetgetQueryResult()throwsSQLException{","if(rs==null)","throwSmallSQLException.create(Language.RSET_NOT_PRODUCED);","returnrs;","SSResultSetgetResultSet(){","returnrs;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseTypes.FLOAT:","caseTypes.DOUBLE:","return\"java.lang.Double\";","caseTypes.DATE:","return\"java.sql.Date\";","caseTypes.TIME:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.min(((MutableInteger)value).value,expr.getInt());","break;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateTableViewtable;","privateColumncolumn;","ExpressionName(Stringname){","super(NAME);","setName(name);","ExpressionName(inttype){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["if(!acceptsURL(url)){","returnprops;","intidx1=url.indexOf(\':\',5);//searchafter\"jdbc:\"","intidx2=url.indexOf(\'?\');","if(idx1\>0){","StringdbPath=(idx2\>0)?url.substring(idx1+1,idx2):url.substring(idx1+1);"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["finalObjectgetObject(intcolIdx)throwsException{","returncurrentDS.getObject(colIdx);","finalStringgetString(intcolIdx)throwsException{","returncurrentDS.getString(colIdx);","finalbyte[]getBytes(intcolIdx)throwsException{","returncurrentDS.getBytes(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnnull;","if(i+1==count)","returnpage.getValue();","else","page=(IndexNode)page.getValue();","thrownewError();"]": ["|project://smallsql/src/smallsql/database/Index.java|","|project://smallsql/src/smallsql/database/Index.java|"],
"["SSPreparedStatement(SSConnectioncon,Stringsql)throwsSQLException{","this(con,sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSPreparedStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,rsType,rsConcurrency);","con.log.println(sql);","SQLParserparser=newSQLParser();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["caseEQUALS:returnleft.getBoolean()==right.getBoolean();","caseUNEQUALS:returnleft.getBoolean()!=right.getBoolean();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnname;","privateStringnextIdentifier()throwsSQLException{","returngetIdentifier(nextToken(MISSING_IDENTIFIER));","privateStringnextIdentiferPart(Stringname)throwsSQLException{","SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnresult;","Object[][]getIndexInfo(SSConnectioncon,Stringtable,booleanunique)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);","Shorttype=Utils.getShort(DatabaseMetaData.tableIndexOther);","for(intt=0;t\<tables.size();t++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["privateintdataType;","privateintlength;","ExpressionValue(){","super(VALUE);","clear();","ExpressionValue(inttype){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["shift-=16;","finallonggetNext(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64)return-1;//apreviouscallhasreturn-1","offset=listEnum.offsetStack[listEnum.stack];","longresult=listEnum.resultStack[listEnum.stack];"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.max(((MutableDouble)value).value,expr.getDouble());","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["page=(IndexNode)page.getValue();","thrownewError();","finalprivateIndexNodefindRows(IndexNodepage,Expressionexpr,booleansearchNullValues,ArrayListnodeList)throwsException{","if(expr.isNull()){","if(!searchNullValues){","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["voidfreeLock(TableStorePagestorePage){","finalintlockType=storePage.lockType;","finallongfileOffset=storePage.fileOffset;","synchronized(locks){","try{","TableStorePagelock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["abstractintgetInt()throwsException;","abstractlonggetLong()throwsException;","abstractfloatgetFloat()throwsException;","abstractdoublegetDouble()throwsException;","abstractlonggetMoney()throwsException;","abstractMutableNumericgetNumeric()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["nodeStack.push(","newIndexNodeScrollStatus((IndexNode)status.nodeValue,","(expressions.get(level).getAlias()!=SQLTokenizer.DESC_STR),","scroll,level));","continue;","}else"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|","|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["staticStringgetString(Stringinput){","char[]output=newchar[4];","intidx=0;","input=input.toUpperCase();","if(input.length()\>0){","output[idx++]=input.charAt(0);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseSQLTokenizer.CURDATE:","caseSQLTokenizer.CURRENTDATE:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;","caseSQLTokenizer.CURTIME:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnnewMutableNumeric(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["MemoryResultsource=newMemoryResult(data,colNames.length);","CommandSelectcmd=newCommandSelect(con.log);","for(inti=0;i\<colNames.length;i++){","ExpressionNameexpr=newExpressionName(colNames[i]);","cmd.addColumnExpression(expr);","expr.setFrom(source,i,source.getColumn(i));"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.BOOLEAN:","returngetBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returngetBytes();","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnDouble.parseDouble(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","@Override","longgetMoney(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalclassIndexNodeScrollStatus{","finalbooleanasc;","finalIndexNode[]nodes;","intidx;","finalObjectnodeValue;","finalintlevel;"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["if(obj==null)returnfalse;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return(obj.equals(Boolean.TRUE));","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"REPEATABLE\",REPEATABLE);","addKeyWord(\"SERIALIZABLE\",SERIALIZABLE);","addKeyWord(\"CONSTRAINT\",CONSTRAINT);","addKeyWord(\"PRIMARY\",PRIMARY);","addKeyWord(\"FOREIGN\",FOREIGN);","addKeyWord(\"KEY\",KEY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatebooleanautoCommit=true;","intisolationLevel=TRANSACTION_READ_COMMITTED;//seealsogetDefaultTransactionIsolation","privateListcommitPages=newArrayList();","SSConnection(SSConnectioncon){","readonly=con.readonly;","database=con.database;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["System.arraycopy(data,idx+1,data,idx,(--size)-idx);","finalvoidset(intidx,Expressionexpr){","data[idx]=expr;","finalintindexOf(Expressionexpr){","if(expr==null){","for(inti=0;i\<size;i++)"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["booleanrelative(introws)throwsException{","returncommandSelect.relative(rows);","intgetRow()throwsException{","returncommandSelect.getRow();","longgetRowPosition(){","returncommandSelect.from.getRowPosition();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["finalfloatgetFloat(intcolIdx)throwsException{","returnstore.getFloat(offsets[colIdx],dataTypes[colIdx]);","@Override","finaldoublegetDouble(intcolIdx)throwsException{","returnstore.getDouble(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returngetLong(findColumn(columnName));","publicfloatgetFloat(StringcolumnName)throwsSQLException{","returngetFloat(findColumn(columnName));","publicdoublegetDouble(StringcolumnName)throwsSQLException{","returngetDouble(findColumn(columnName));","publicBigDecimalgetBigDecimal(StringcolumnName,intscale)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["StringgetName(){","returnname;","booleanisReadOnly(){","returnreadonly;","staticfinalvoidcloseConnection(SSConnectioncon)throwsSQLException{","synchronized(databases){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.BIGINT:","returnreadLong()*10000L;","caseSQLTokenizer.REAL:","return(long)(readFloat()*10000L);","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["expr=newExpressionFunctionTimestampDiff(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);","returnexpr;","caseSQLTokenizer.TIMESTAMPADD:","token=nextToken(MISSING_INTERVALS);","nextToken(MISSING_COMMA);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return(obj==Boolean.TRUE)?\"1\":\"0\";","returnobj.toString();","byte[]getBytes()throwsException{","returngetBytes(getObject(),dataType);","staticbyte[]getBytes(Objectobj,intdataType)throwsException{","if(obj==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.SMALLINT:","returnnewMutableNumeric(readShort());","caseSQLTokenizer.INT:","returnnewMutableNumeric(readInt());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(readLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"SQL_LONGVARCHAR\",SQL_LONGVARCHAR);","addKeyWord(\"SQL_REAL\",SQL_REAL);","addKeyWord(\"SQL_SMALLINT\",SQL_SMALLINT);","addKeyWord(\"SQL_TIME\",SQL_TIME);","addKeyWord(\"SQL_TIMESTAMP\",SQL_TIMESTAMP);","addKeyWord(\"SQL_TINYINT\",SQL_TINYINT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["ExpressionFunctionRTrimtrim=newExpressionFunctionRTrim();","trim.setParams(newExpression[]{expr});","returntrim;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicMapgetTypeMap(){","returnnull;","publicvoidsetTypeMap(Mapmap){","publicvoidsetHoldability(intholdability){","this.holdability=holdability;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["throwcreateSyntaxError(token,Language.STXADD_ADDITIONAL_TOK);","returncmd;","finalprivateCommandparse(char[]sql)throwsSQLException{","this.sql=sql;","this.tokens=SQLTokenizer.parseSQL(sql);","tokenIdx=0;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseDIV:returnleft.getLong()/right.getLong();","caseNEGATIVE:return-left.getLong();","caseMOD:returnleft.getLong()%right.getLong();","caseBIT_NOT:return~right.getInt();","throwcreateUnspportedConversion(SQLTokenizer.LONG);","doublegetDouble()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnparam3.getMoney();","MutableNumericgetNumeric()throwsException{","if(param1.getBoolean())","returnparam2.getNumeric();","returnparam3.getNumeric();","ObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","returndetails2.year-details1.year;","default:thrownewError();","longgetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["isInsertRow=true;","clearRowBuffer();","}else{","throwSmallSQLException.create(Language.RSET_READONLY);","publicvoidmoveToCurrentRow()throwsSQLException{","isInsertRow=false;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return0;","caseSQLTokenizer.DECIMAL:","returnparam1.getNumeric().getSignum();","caseSQLTokenizer.DOUBLE:","doubledoubleValue=param1.getDouble();","if(doubleValue\<0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["}else{","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","updatePointer.filePosUpdated=newData.writeFinsh(null);","updatePointer.status=UPDATE_POINTER;","updatePointer.type=SQLTokenizer.UPDATE;","updatePointer.createWriteLock();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicURLgetURL(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewURL(expr.getString());"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(colCount!=nextColCount)","throwSmallSQLException.create(Language.UNION_DIFFERENT_COLS,newObject[]{newInteger(colCount),newInteger(nextColCount)});","returnresult;","finalbooleanisNull(intcolIdx)throwsException{","returncurrentDS.isNull(colIdx);","finalbooleangetBoolean(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intiValue=((Number)para1).intValue();","return(iValue\<0)?newInteger(-iValue):para1;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnValue=(MutableNumeric)para1;","if(nValue.getSignum()\<0)nValue.setSignum(1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["Stringvalue=SQL_STATES[i][1];","sqlStates.put(key,value);","publicStringgetMessage(Stringkey){","Stringmessage=(String)messages.get(key);","assert(message!=null):\"Messagecodenotfound:\"+key;","returnmessage;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["SQLTokenizer.DATE,","SQLTokenizer.TIME,","SQLTokenizer.DOUBLE,","SQLTokenizer.FLOAT,","SQLTokenizer.REAL,","SQLTokenizer.DECIMAL,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{CONNECTION_CLOSED,\"01000\"},","{VIEW_INSERT,\"01000\"},","{VIEWDROP_NOT_VIEW,\"01000\"},","{VIEW_CANTDROP,\"01000\"},","{RSET_NOT_PRODUCED,\"01000\"},","{RSET_READONLY,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.DOUBLE:","return15;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["writeBytes(daten);","if(!varBinary){","for(inti=length;i\<lengthColumn;i++){","page[offset++]=0;","byte[]readBinary(){","intlength=readShort()&0xFFFF;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finallonggetLong(intcolIdx)throwsException{","returncurrentDS.getLong(colIdx);","finalfloatgetFloat(intcolIdx)throwsException{","returncurrentDS.getFloat(colIdx);","finaldoublegetDouble(intcolIdx)throwsException{","returncurrentDS.getDouble(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseSQLTokenizer.DECIMAL:","returngetNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intlength=datatype.getPrecision();","if(length!=bytes.length){","byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;","returnbytes;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["this.table=table;","this.storePage=storePage;","this.filePos=filePos;","this.type=type;","staticStoreImplcreateStore(Tabletable,StorePagestorePage,inttype,longfilePos)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DECIMAL:","returnUtils.doubleToMoney(getDoubleImpl());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returngetMoneyImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalColumngetColumn(){","returncolumn;","finalpublicStringtoString(){","if(tableAlias==null)returnString.valueOf(getAlias());","returntableAlias+\".\"+getAlias();","StringgetTableName(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["setBytes(findParameter(parameterName),x);","publicvoidsetDate(StringparameterName,Datex)throwsSQLException{","setDate(findParameter(parameterName),x);","publicvoidsetTime(StringparameterName,Timex)throwsSQLException{","setTime(findParameter(parameterName),x);","publicvoidsetTimestamp(StringparameterName,Timestampx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["tables.add(table);","if(token!=null&&token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);","table.setAlias(token.getName(sql));","}else{","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["mul(100000);","scale+=5;","divImpl(quotient);","finalprivatevoiddivImpl(intquotient){","if(quotient==1)return;","if(quotient\<0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.MONEY)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLMONEY)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.INT)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLINT)),Utils.getInteger(5),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.FLOAT)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.REAL)),Utils.getInteger(7),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}else{","tokens.add(newSQLToken(quoteBuffer.toString(),(quote==\'\\\'\')?STRING:IDENTIFIER,tokenStart,i+1));","quoteBuffer.setLength(0);","quote=0;","tokenStart=i+1;","wasWhiteSpace=true;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case2://ANSIyy.mm.dd","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(type!=GROUP_BY)expr=expr.getParams()[0];","switch(type){","caseGROUP_BY:","caseFIRST:","if(isEmpty())set(expr.getObject(),expr.getDataType());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["loopToEndOfNode(listEnum);","}else{","shift+=16;","listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","returnstore.readBytes(store.readInt());","voidwriteChars(char[]daten){","intlength=daten.length;","intnewSize=offset+2*length;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["MutableNumeric(longcomplement){","if(complement==0){","signum=0;","value=EMPTY_INTS;","}else{","value=newint[2];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnalias!=null;","booleaninit(SSConnectioncon)throwsException{","TableViewtableView=getTableView();","if(tableTimestamp!=tableView.getTimestamp()){","this.con=con;","tableTimestamp=tableView.getTimestamp();"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["synchronized(tableViews){","TableViewtableView=tableViews.get(tableName);","if(tableView==null){","tableView=TableView.load(con,this,tableName);","tableViews.put(tableName,tableView);","returntableView;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal(scale);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["SQLTokentoken=nextToken();","if(token!=null){","switch(token.value){","caseSQLTokenizer.CLUSTERED:","caseSQLTokenizer.NONCLUSTERED:","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnfalse;","booleanisNull(intcolIdx)throwsException{","returnget(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{","returnget(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["publicfloatfloatValue(){","returnvalue;","publicintintValue(){","returnvalue;","publiclonglongValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["MutableNumeric(floatval){","this(newBigDecimal(String.valueOf(val)));","MutableNumeric(Stringval){","this(newBigDecimal(val));","MutableNumeric(BigDecimalbig){","this(big.unscaledValue().toByteArray());"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["abstractfloatgetFloat()throwsException;","abstractdoublegetDouble()throwsException;","abstractlonggetMoney()throwsException;","abstractMutableNumericgetNumeric()throwsException;","abstractObjectgetObject()throwsException;","finalObjectgetApiObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["charc=(char)(letters[i]|0x20);","while(node!=null&&node.letter!=c){","prev=node;","node=node.nextEntry;","wasNextEntry=true;","if(node==null){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalintgetInt()throwsException{","if(param1.isNull())return0;","switch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){","caseSQLTokenizer.INT:","intintValue=param1.getInt();","if(intValue\<0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["MutableNumericgetNumeric(){","returngetNumeric(getObject(),dataType);","staticMutableNumericgetNumeric(Objectobj,intdataType){","if(obj==null)returnnull;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Expressionexpr=expression(cmdCreate,0);","SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;","Stringdef=newString(sql,offset,length);","col.setDefaultValue(expr,def);","defaultWasSet=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam2.getLong()+param1.getLong()*60000;","caseSQLTokenizer.SQL_TSI_HOUR:","returnparam2.getLong()+param1.getLong()*3600000;","caseSQLTokenizer.SQL_TSI_DAY:","returnparam2.getLong()+param1.getLong()*86400000;","caseSQLTokenizer.SQL_TSI_WEEK:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["{TABLE_EXISTENT,\"TableorView\'\'{0}\'\'alreadyexists.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'isnotatable.\"},","{PK_ONLYONE,\"Atablecanhaveonlyoneprimarykey.\"},","{KEY_DUPLICATE,\"DuplicateKey.\"},","{MONTH_TOOLARGE,\"MonthsaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DaysaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["default:thrownewError(\"DataType:\"+type);","staticSearchNodesearchTree;","staticHashtablekeywords=newHashtable(337);","staticfinalintVALUE=0;","staticfinalintSTRING=3;","staticfinalintIDENTIFIER=4;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["classTableextendsTableView{","privatestaticfinalintINDEX=1;","finalDatabasedatabase;","FileChannelraFile;//filehandleofthetable","privateLobslobs;//filehandleoflobdataforthistable","longfirstPage;//offsetofthefirstpage"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSpace();","break;","caseSQLTokenizer.SOUNDEX:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSoundex();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"AND\",AND);","addKeyWord(\"IS\",IS);","addKeyWord(\"NOT\",NOT);","addKeyWord(\"NULL\",NULL);","addKeyWord(\"YES\",TRUE);//aliasforTRUE","addKeyWord(\"TRUE\",TRUE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["booleanwasWhiteSpace=true;","intcomment=NOT_COMMENT;","charquote=0;","StringBufferquoteBuffer=newStringBuffer();","for(inti=0;i\<sql.length;i++){","charc=sql[i];"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["listEnum.offsetStack[listEnum.stack]=offset;","returnresult;","listEnum.offsetStack[listEnum.stack]=offset+pointerSize;","offset=getPointer();","shift-=16;","listEnum.stack++;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|","|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["abstractfloatgetFloat(intcolIdx)throwsException;","abstractdoublegetDouble(intcolIdx)throwsException;","abstractlonggetMoney(intcolIdx)throwsException;","abstractMutableNumericgetNumeric(intcolIdx)throwsException;","abstractObjectgetObject(intcolIdx)throwsException;","abstractStringgetString(intcolIdx)throwsException;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).longValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.DECIMAL:","returnreadNumeric().getSignum()!=0;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnSQLTokenizer.CHARLEN;","booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCharLen.java|"],
"["SQLExceptioncreateUnspportedConversion(intdataType){","inttype=left==null?right.getDataType():getDataType(left,right);","Object[]params=newObject[]{","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(type),","getKeywordFromOperation(operation)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnscale;","default:","returnExpression.getScale(dataType);","voidsetPrecision(intprecision)throwsSQLException{","if(precision\<0)throwSmallSQLException.create(Language.COL_INVALID_SIZE,newObject[]{newInteger(precision),name});","this.precision=precision;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicintgetMaxCatalogNameLength(){","return255;","publicintgetMaxRowSize(){","return0;","publicbooleandoesMaxRowSizeIncludeBlobs(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["addKeyWord(\"LTRIM\",LTRIM);","addKeyWord(\"OCTET_LENGTH\",OCTETLEN);","addKeyWord(\"REPEAT\",REPEAT);","addKeyWord(\"REPLACE\",REPLACE);","addKeyWord(\"RIGHT\",RIGHT);","addKeyWord(\"RTRIM\",RTRIM);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["generatedKeys=rs;","finalpublicResultSetgetGeneratedKeys()throwsSQLException{","if(generatedKeys==null)","throwSmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);","returngeneratedKeys;","finalpublicintexecuteUpdate(Stringsql,intautoGeneratedKeys)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["privateintfullRightRowCounter;","privateintfullRowCount;","privateintfullReturnCounter=-1;","JoinScroll(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;","this.condition=condition;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnMath.abs(param1.getInt());","longgetLong()throwsException{","returnMath.abs(param1.getLong());","floatgetFloat()throwsException{","returnMath.abs(param1.getFloat());","doublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["returnname;","finalprivatebooleanisKeyword(SQLTokentoken){","if(token==null)returnfalse;","switch(token.value){","caseSQLTokenizer.SELECT:","caseSQLTokenizer.INSERT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.util.List;","importjava.sql.*;","importsmallsql.database.language.Language;","finalclassSQLParser{","SSConnectioncon;","privatechar[]sql;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"CURRENT_DATE\",CURRENTDATE);","addKeyWord(\"DAYNAME\",DAYNAME);","addKeyWord(\"DAYOFMONTH\",DAYOFMONTH);","addKeyWord(\"DAYOFWEEK\",DAYOFWEEK);","addKeyWord(\"DAYOFYEAR\",DAYOFYEAR);","addKeyWord(\"DAY\",DAY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StringBufferbuffer=newStringBuffer();","intidx1=0;","intidx2=str1.indexOf(str2,idx1);","while(idx2\>=0){","buffer.append(str1.substring(idx1,idx2));","buffer.append(str3);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["if(node.isEmpty()){","if(isLastValue){","node.addRemainderKey(rowOffset,key,i);","returnnull;","returnnode.addRootValue(key,i);","}else"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["scroll=newJoinScroll(type,left,right,condition);","booleanisExpressionsFromThisRowSource(Expressionscolumns){","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","returntrue;","if(columns.size()==1){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(p1==null)returnfalse;","for(inti=0;i\<p1.length;i++){","if(!p2[i].equals(p1[i]))returnfalse;","Stringname1=((Expression)expr).name;","Stringname2=name;","if(name1==name2)returntrue;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleDoubleFactor[scale]*signum;","}else","if(value.length==2&&(value[0]\>0)){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["addKeyWord(\"ROUND\",ROUND);","addKeyWord(\"SIGN\",SIGN);","addKeyWord(\"SIN\",SIN);","addKeyWord(\"SQRT\",SQRT);","addKeyWord(\"TAN\",TAN);","addKeyWord(\"TRUNCATE\",TRUNCATE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.YEAR:","returnSQLTokenizer.SQL_TSI_YEAR;","default:","returnintervalType;","ExpressionFunctionTimestampDiff(intintervalType,Expressionp1,Expressionp2){","interval=mapIntervalType(intervalType);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["staticfinalintTOP=229;","staticfinalintADD=230;","staticfinalintLIMIT=231;","staticfinalintDATABASE=235;","staticfinalintTABLE=236;","staticfinalintVIEW=237;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(intcolumnIndex,intscale)throwsSQLException{","try{","MutableNumericobj=getValue(columnIndex).getNumeric();","wasNull=obj==null;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["publicResultSetMetaDatagetMetaData(){","returnmetaData;","publicObjectgetObject(intcolumnIndex)throwsSQLException{","try{","Objectobj=getValue(columnIndex).getApiObject();","wasNull=obj==null;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["longvalue;","MutableLong(longvalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|"],
"["privatefinalvoidreadPageHeader()throwsSQLException{","if(readInt()!=PAGE_MAGIC){","throwSmallSQLException.create(Language.TABLE_CORRUPT_PAGE,newObject[]{newLong(filePos)});","status=readInt();","sizeUsed=readInt();","sizePhysical=readInt();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{RSET_ON_INSERT_ROW,\"Cursoriscurrentlyontheinsertrow.\"},","{ROWSOURCE_READONLY,\"Rowsourceisreadonly.\"},","{STMT_IS_CLOSED,\"Statementisalreadyclosed.\"},","{SUBQUERY_COL_COUNT,\"Countofcolumnsinsubquerymustbe1andnot{0}.\"},","{JOIN_DELETE,\"ThemethoddeleteRownotsupportedonjoins.\"},","{JOIN_INSERT,\"ThemethodinsertRownotsupportedonjoins.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returncmd;","caseSQLTokenizer.COMMA:","continue;","default:throwcreateSyntaxError(token,MISSING_WHERE_COMMA);","returncmd;","privateCommandcreate()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{STXADD_NOT_NUMBER,\"Numbervaluerequired(passed=\'\'{0}\'\').\"},","{STXADD_COMMENT_OPEN,\"Missingendcommentmark(\'\'*/\'\').\"},","};","privatefinalString[][]SQL_STATES={","{CUSTOM_MESSAGE,\"01000\"},","{UNSUPPORTED_OPERATION,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnnode.addRoot();","finalvoidclear(){","rootPage.clear();","finalstaticprivateintfloatToBinarySortOrder(floatvalue){","intintValue=Float.floatToIntBits(value);","return(intValue\<0)?"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(exprinstanceofExpressionName){","Columncolumn=((ExpressionName)expr).getColumn().copy();","column.setName(expr.getAlias());","columns.add(column);","}else{","columns.add(newColumnExpression(expr));"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["temp[0]=node;","}else{","intpos=findNodeInsertPos(node.digit,0,length);","System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos,temp,pos+1,length-pos);","temp[pos]=node;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleanfirst()throwsException;","booleanprevious()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleannext()throwsException;","booleanlast()throwsException{"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["SQLTokentoken=nextToken();","while(true){","if(token==null){","throwcreateSyntaxError(token,Language.STXADD_JOIN_INVALID);","switch(token.value){","caseSQLTokenizer.ON:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticfinalStringLOB_EXTENTION=\".lob\";","staticfinalStringIDX_EXTENTION=\".idx\";","privatestaticfinalInteger[]integerCache=newInteger[260];","privatestaticfinalShort[]shortCache=newShort[260];","static{","for(inti=-4;i\<256;i++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["StringBufferbuffer=newStringBuffer(256);","buffer.append(\"INSERTINTO\").append(newName).append(\'(\');","for(intc=0;c\<oldColumns.size();c++){","if(c!=0){","buffer.append(\',\');","buffer.append(oldColumns.get(c).getName());"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["finalintdataType=getDataType();","switch(dataType){","caseSQLTokenizer.LONGVARCHAR:","returnconvertToString();","caseSQLTokenizer.VARCHAR:{","Stringstr=convertToString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["Stringtok=newString(sql,token.offset+1,token.length-1);","if(isMinus)tok=\"-\"+tok;","returnnewExpressionValue(newMoney(Double.parseDouble(tok)),SQLTokenizer.MONEY);","Stringtok=newString(sql,token.offset,token.length);","if((chr1\>=\'0\'&&\'9\'\>=chr1)||chr1==\'.\'){","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"S\",SQL_TSI_SECOND);","addKeyWord(\"SS\",SQL_TSI_SECOND);","addKeyWord(\"SQL_TSI_SECOND\",SQL_TSI_SECOND);","addKeyWord(\"MI\",SQL_TSI_MINUTE);","addKeyWord(\"N\",SQL_TSI_MINUTE);","addKeyWord(\"SQL_TSI_MINUTE\",SQL_TSI_MINUTE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returngetColumnExpression(column).isDefinitelyWritable();","publicbooleanisDefinitelyWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();","publicStringgetColumnClassName(intcolumn)throwsSQLException{","switch(getColumnType(column)){","caseTypes.TINYINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["executeImpl(con,st);","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["rows.add(row);","}else{","if(isTypeTable){","row[3]=\"TABLE\";","rows.add(row);","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnupdateCount;","booleangetMoreResults(){","rs=null;","updateCount=-1;","returnfalse;","voidsetMaxRows(intmax){/*EmptybecausenotsupportedforthemostCommands*/}"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["{RSET_CLOSED,\"ResultSetisclosed.\"},","{RSET_NOT_INSERT_ROW,\"Cursoriscurrentlynotontheinsertrow.\"},","{RSET_ON_INSERT_ROW,\"Cursoriscurrentlyontheinsertrow.\"},","{ROWSOURCE_READONLY,\"Rowsourceisreadonly.\"},","{STMT_IS_CLOSED,\"Statementisalreadyclosed.\"},","{SUBQUERY_COL_COUNT,\"Countofcolumnsinsubquerymustbe1andnot{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnLong.parseLong(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.TRUNCATE:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionTruncate();","break;","caseSQLTokenizer.ASCII:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","index.addValues(0,cmdSel.columnExpressions);","}catch(Exceptione){","booleanisInList()throwsException{","loadInList();","returnindex.findRows(getParams(),false,null)!=null;"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["finalvoidclear(){","rootPage.clear();","finalstaticprivateintfloatToBinarySortOrder(floatvalue){","intintValue=Float.floatToIntBits(value);","return(intValue\<0)?","~intValue:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["super.setParams(params);","intgetOperation(){","returnoperation;","privateExpressionconvertExpressionIfNeeded(Expressionexpr,Expressionother){","if(expr==null||other==null){","returnexpr;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{VALUE_STR_TOOLARGE,\"01000\"},","{VALUE_BIN_TOOLARGE,\"01000\"},","{VALUE_NULL_INVALID,\"01000\"},","{VALUE_CANT_CONVERT,\"01000\"},","{BYTEARR_INVALID_SIZE,\"01000\"},","{LOB_DELETED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["isCurrentRow=rowSource.next();","row=1;","returnisCurrentRow;","finalbooleanprevious()throwsException{","booleanoldIsCurrentRow=isCurrentRow;","do{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returnname==null?","con.getDatabase(false):","getDatabase(name,con,false);","privateDatabase(Stringname,FilecanonicalFile,booleanreadonly)throwsSQLException{","try{","this.name=name;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["return0;","publicintgetMaxSchemaNameLength(){","return255;","publicintgetMaxProcedureNameLength(){","return255;","publicintgetMaxCatalogNameLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["signum=-1;","}else{","signum=0;","for(inti=0;i\<complement.length;i++)","if(complement[i]!=0){","signum=1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{VIEW_INSERT,\"INSERTisnotsupportedforaview.\"},","{VIEWDROP_NOT_VIEW,\"CannotuseDROPVIEWwith\'\'{0}\'\'becauseitdoesnotisaview.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'can\'\'tbedropped.\"},","{RSET_NOT_PRODUCED,\"NoResultSetwasproduced.\"},","{RSET_READONLY,\"ResultSetisreadonly.\"},","{RSET_FWDONLY,\"ResultSetisforwardonly.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.min(((MutableDouble)value).value,expr.getDouble());","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["setNeedGeneratedKeys(columnNames);","returnexecuteUpdate(sql);","finalpublicbooleanexecute(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);","returnexecute(sql);","finalpublicbooleanexecute(Stringsql,int[]columnIndexes)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["addMessages(MESSAGES);","setSqlStates();","protectedfinalvoidaddMessages(String[][]entries)","throwsIllegalArgumentException{","Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<entries.length;i++){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["voidsetParamValue(intidx,Objectvalue,intdataType,intlength)throwsSQLException{","getParam(idx).set(value,dataType,length);","if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType+\";length=\"+length);","finalvoidexecute(SSConnectioncon,SSStatementst)throwsSQLException{","intsavepoint=con.getSavepoint();"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["importsmallsql.database.language.Language;","finalclassLongTreeList{","privatebyte[]data;","privateintsize;","privateintoffset;","staticfinalprivateintpointerSize=3;//ifchangethenalsoinresize()"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["sizeUsed=PAGE_CONTROL_SIZE;","break;","default:thrownewError(\"\"+type);","offset=0;","writeInt(PAGE_MAGIC);//forrepair","writeInt(status);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(lock.con!=con)returnnull;//thereisalreadyanylockfromanotherconnection,wecannotstartwrite","if(lock.lockType\<LOCK_WRITE){","lock.lockType=LOCK_WRITE;","returnlock;","prevLock=lock;","lock=lock.nextLock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticStoreImplcreateStore(Tabletable,StorePagestorePage,inttype,longfilePos)throwsSQLException{","try{","StoreImplstore=newStoreImpl(table,storePage,type,filePos);","switch(type){","caseSQLTokenizer.LONGVARBINARY:","store.page=newbyte[(int)filePos+PAGE_CONTROL_SIZE];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["setTimestamp(findParameter(parameterName),x);","publicvoidsetAsciiStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setAsciiStream(findParameter(parameterName),x,length);","publicvoidsetBinaryStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setBinaryStream(findParameter(parameterName),x,length);","publicvoidsetObject(StringparameterName,Objectx,intsqlType,intscale)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returncolumnExpressions.get(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getInt();","longgetLong(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returnreadFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnreadDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/10000.0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{PARAM_EMPTY,\"Parameter{0}istleer.\"},","{PARAM_IDX_OUT_RANGE,\"ParameterIndex{0}liegtauÃŸerhalbdesGÃ¼ltigkeitsbereiches.DerWertmusszwischen1und{1}liegen.\"},","{COL_DUPLICATE,\"EsgibteinendoppeltenSpaltennamen:\'\'{0}\'\'.\"},","{COL_MISSING,\"Spalte\'\'{0}\'\'wurdenichtgefunden.\"},","{COL_VAL_UNMATCH,\"DieSpaltenanzahlundWerteanzahlistnichtidentisch.\"},","{COL_INVALID_SIZE,\"UngÃ¼ltigeSpaltengrÃ¶ÃŸe{0}fÃ¼rSpalte\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["booleanisAfterLast()throwsSQLException,Exception{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractvoidafterLast()throwsException;","booleanabsolute(introw)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanrelative(introws)throwsException{"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["result.insertRow(updateValues);","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(i+1\<sql.length&&sql[i+1]==quote){","quoteBuffer.append(quote);","i++;","}else{","tokens.add(newSQLToken(quoteBuffer.toString(),(quote==\'\\\'\')?STRING:IDENTIFIER,tokenStart,i+1));","quoteBuffer.setLength(0);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["setNeedGeneratedKeys(columnIndexes);","returnexecute(sql);","finalpublicbooleanexecute(Stringsql,String[]columnNames)throwsSQLException{","setNeedGeneratedKeys(columnNames);","returnexecute(sql);","finalpublicintgetResultSetHoldability()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["intcount=expressions.length;","for(inti=0;i\<count;i++){","page=findRows(page,expressions[i],searchNullValues,nodeList);","if(page==null)","returnnull;","if(i+1==count)"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["longlongValue=readLong()/10000;","returnUtils.money2int(longValue);","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncolumns.size();","publicbooleanisAutoIncrement(intcolumn)throwsSQLException{","returngetColumnExpression(column).isAutoIncrement();","publicbooleanisCaseSensitive(intcolumn)throwsSQLException{","returngetColumnExpression(column).isCaseSensitive();","publicbooleanisSearchable(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{","returngetLong()!=0;","intgetInt()throwsException{","return(int)getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["publicvoidregisterOutParameter(inti,intsqlType,StringtypeName)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetURL()notyetimplemented.\");","publicvoidsetURL(StringparameterName,URLx)throwsSQLException{","setURL(findParameter(parameterName),x);","publicvoidsetNull(StringparameterName,intsqlType)throwsSQLException{","setNull(findParameter(parameterName),sqlType);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["break;","finalbooleanleftIsNull=left.isNull();","intdataType;","if(operation==NEGATIVE||operation==BIT_NOT){","if(leftIsNull)returnfalse;","dataType=left.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicintgetScale(intcolumn)throwsSQLException{","returngetColumnExpression(column).getScale();","publicStringgetTableName(intcolumn)throwsSQLException{","returngetColumnExpression(column).getTableName();","publicStringgetCatalogName(intcolumn)throwsSQLException{","returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnconvertToString();","caseSQLTokenizer.VARCHAR:{","Stringstr=convertToString();","intlength=datatype.getDisplaySize();","if(length\>str.length())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["ColumnstableColumns=table.columns;","intcount=tableColumns.size();","StoreImplstore=table.getStoreInsert(con);","for(inti=0;i\<count;i++){","ColumntableColumn=tableColumns.get(i);","Expressionsrc=updateValues[i];"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["intlength=value.length();","if(needTrim){","while(length\>0&&value.charAt(length-1)==\'\')length--;","char[]puffer=newchar[length];","for(inti=0;i\<length;i++){","puffer[i]=Character.toLowerCase(Character.toUpperCase(value.charAt(i)));"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(nodeStack.size()\>1){","nodeStack.pop();","continue;","}else{","return-1;","IndexNodenode=status.nodes[idx];"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["returntrue;","publicbooleansupportsMultipleOpenResults(){","returntrue;","publicbooleansupportsGetGeneratedKeys(){","returntrue;","publicResultSetgetSuperTypes(Stringcatalog,StringschemaPattern,StringtypeNamePattern)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);","node=node.getChildNode(digit);","if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);","if(++i==length){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["TableViewResult.getTableViewResult(tables.get(0)).deleteRow();","}catch(Throwablee){","con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["for(intc=0;c\<matrix.length;c++){","Columncolumn=table.columns.get(c);","intidx=matrix[c];","ExpressionvalueExpress;","if(idx\>=0){","valueExpress=cmdSel.columnExpressions.get(idx);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["listEnum.offsetStack[listEnum.stack]=offset+pointerSize;","offset=getPointer();","shift-=16;","listEnum.stack++;","listEnum.resultStack[listEnum.stack]=result;","firstNode=true;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalintgetRow(){","returnrow;","@Override","finallonggetRowPosition(){","returnfilePos;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["addKeyWord(\"DATABASE\",DATABASE);","addKeyWord(\"TABLE\",TABLE);","addKeyWord(\"VIEW\",VIEW);","addKeyWord(\"INDEX\",INDEX);","addKeyWord(\"PROCEDURE\",PROCEDURE);","addKeyWord(\"TRANSACTION\",TRANSACTION);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnparam2.getLong();","returnparam3.getLong();","floatgetFloat()throwsException{","if(param1.getBoolean())","returnparam2.getFloat();","returnparam3.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["intidx1=url.indexOf(\':\',5);//searchafter\"jdbc:\"","intidx2=url.indexOf(\'?\');","if(idx1\>0){","StringdbPath=(idx2\>0)?url.substring(idx1+1,idx2):url.substring(idx1+1);","props.setProperty(\"dbpath\",dbPath);","if(idx2\>0){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["setString(findParameter(parameterName),x);","publicvoidsetBytes(StringparameterName,byte[]x)throwsSQLException{","setBytes(findParameter(parameterName),x);","publicvoidsetDate(StringparameterName,Datex)throwsSQLException{","setDate(findParameter(parameterName),x);","publicvoidsetTime(StringparameterName,Timex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["return3;","caseSQLTokenizer.SMALLINT:","return6;","caseSQLTokenizer.INT:","return10;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{TABLE_CORRUPT_PAGE,\"BeschÃ¤digteTabellenseitebeiPosition:{0}.\"},","{TABLE_MODIFIED,\"DieTabelle\'\'{0}\'\'wurdemodifiziert.\"},","{TABLE_DEADLOCK,\"Deadlock,eskannkeinLockerzeugtwerdenfÃ¼rTabelle\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TabelleoderView\'\'{0}\'\'existiertnicht.\"},","{TABLE_FILE_INVALID,\"DieDatei\'\'{0}\'\'enthÃ¤ltkeinegÃ¼ltigeSmallSQLTabelle.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeinegÃ¼ltigerTabellenoderViewSpeicher.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnreadString();","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["super.printStackTrace();","publicvoidprintStackTrace(PrintStreamps){","if(!isInit)return;","super.printStackTrace(ps);","publicvoidprintStackTrace(PrintWriterpw){","if(!isInit)return;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["while(iterator.hasNext()){","TableViewtableView=(TableView)iterator.next();","tableView.close();","iterator.remove();","master.close();","staticTableViewgetTableView(SSConnectioncon,Stringcatalog,StringtableName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,int[]validValues){","StringmsgStr=SmallSQLException.translateMsg(","Language.STXADD_KEYS_REQUIRED,newObject[]{});","StringBuffermsgBuf=newStringBuffer(msgStr);","for(inti=0;i\<validValues.length;i++){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{CANT_LOCK_FILE,\"01000\"},","{DB_EXISTENT,\"01000\"},","{DB_NONEXISTENT,\"01000\"},","{DB_NOT_DIRECTORY,\"01000\"},","{DB_NOTCONNECTED,\"01000\"},","{CONNECTION_CLOSED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["staticfinalintKEY=253;","staticfinalintUNIQUE=254;","staticfinalintCLUSTERED=255;","staticfinalintNONCLUSTERED=256;","staticfinalintREFERENCES=257;","staticfinalintUNION=260;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnfalse;","publicbooleanownUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanownDeletesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanownInsertsAreVisible(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.INSERT:{","if(serializeConnections.size()\>1)returnnull;","if(serializeConnections.size()==1&&serializeConnections.get(con)==null)returnnull;","TableStorePageInsertlock=newTableStorePageInsert(con,this,LOCK_INSERT);","locksInsert.add(lock);","con.add(lock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["database.replaceTable(oldTable,newTable);","}catch(Exceptionex){","try{","database.dropTable(con,newName);","}catch(Exceptionex1){/*ignoreit*/}","try{"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["returnpage[offset++]&0xFF;","voidwriteBoolean(booleanvalue){","intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value?1:0);","booleanreadBoolean(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Expression[]params=paramList.toArray();","booleaninvalidParamCount;","switch(token.value){","caseSQLTokenizer.ABS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAbs();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row--;","returnisCurrentRow;","finalbooleannext()throwsException{","booleanoldIsCurrentRow=isCurrentRow;","do{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["byte[]page;//dataofonepage","intpageSize;","longfileOffset;//positioninfile","StorePage(byte[]page,intpageSize,FileChannelraFile,longfileOffset){","super(raFile);","this.page=page;"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["publicintintValue(){","return(int)(value/10000.0);","publicfloatfloatValue(){","returnvalue/10000.0F;","publicdoubledoubleValue(){","returnvalue/10000.0;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["returnconvertToString();","caseSQLTokenizer.VARCHAR:{","Stringstr=convertToString();","intlength=datatype.getDisplaySize();","if(length\>str.length())","returnstr;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["longresult=0;","intlength=Math.min(8,bytes.length);","for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;","staticintbytes2int(byte[]bytes){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.OCTETLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionOctetLen();","break;","caseSQLTokenizer.REPEAT:","invalidParamCount=(paramCount!=2);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.value=newint[numeric.value.length];","System.arraycopy(numeric.value,0,value,0,value.length);","this.scale=numeric.scale;","int[]getInternalValue(){","returnvalue;","voidadd(MutableNumericnum){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalbooleanabsolute(introw)throwsException{","returnfrom.absolute(row);","finalbooleanrelative(introws)throwsException{","returnfrom.relative(rows);","finalintgetRow()throwsException{","introw=from.getRow();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["privatebooleanisClosed;","intrsType;","intrsConcurrency;","privateintfetchDirection;","privateintfetchSize;","privateintqueryTimeout;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["Expressionexpr;","switch(token.value){","caseSQLTokenizer.D://dateescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;","caseSQLTokenizer.T://timeescapesequence"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(idx\>=0)returnidx;","throwSmallSQLException.create(Language.GROUP_AGGR_NOTPART,expr);","}else","if(type\>=Expression.GROUP_BEGIN){","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["MutableLong(longvalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|"],
"["finalvoidsetSource(RowSourcejoin){","this.from=join;","finalvoidsetTables(DataSourcesfrom){","this.tables=from;","finalvoidsetWhere(Expressionwhere){","this.where=where;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["ExpressionNameexpr=newExpressionName(name);","SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());","}else{","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicdoublegetDouble(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getDouble();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintSQL_TSI_YEAR=1258;","static{","addKeyWord(\"MS\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"SQL_TSI_FRAC_SECOND\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"S\",SQL_TSI_SECOND);","addKeyWord(\"SS\",SQL_TSI_SECOND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getFloat()==right.getFloat();","caseGREATER:returnleft.getFloat()\>right.getFloat();","caseGRE_EQU:returnleft.getFloat()\>=right.getFloat();","caseLESSER:returnleft.getFloat()\<right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleannoColumns;//afterthetablenamewasnocolumnExpressions;allcolumnExpressionsindefaultorder","privateCommandSelectcmdSel;","privateTabletable;","privatelongtableTimestamp;","privateint[]matrix;//mappingofthecolumnsfromINSERTtothecolumnsintheTable;-1defaultValue","CommandInsert(Loggerlog,Stringname){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returnselect();","caseSQLTokenizer.DELETE:","returndelete();","caseSQLTokenizer.INSERT:","returninsert();","caseSQLTokenizer.UPDATE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!rootPage.getUnique()){","LongTreeListlist=(LongTreeList)obj;","list.remove(rowOffset);","if(list.getSize()\>0)return;","IndexNodenode=(IndexNode)nodeList.get(nodeList.size()-1);","node.clearValue();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["break;","caseSQLTokenizer.PI:","invalidParamCount=(paramCount!=0);","expr=newExpressionFunctionPI();","break;","caseSQLTokenizer.POWER:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","classJoinScroll{","privatefinalExpressioncondition;//thejoincondition,thepartaftertheON","finalinttype;","finalRowSourceleft;//thelefttable,vieworrowsourceofthejoin","finalRowSourceright;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["lock=lock.nextLock;","lock=newTableStorePage(con,this,LOCK_WRITE,readlock.fileOffset);","if(prevLock!=null){","prevLock.nextLock=lock;","}else{","locks.put(pageKey,lock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returngetNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnmoveToValidRow();","@Override","finalvoidafterLast(){","filePos=-1;","noRow();","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnget(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{","returnget(colIdx).getBytes();","intgetDataType(intcolIdx){","returncolumns.get(colIdx).getDataType();","finalTableViewgetTableView(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["return(int)getFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["switch(magic){","caseMAGIC_TABLE:","caseMAGIC_VIEW:","break;","default:","throwSmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID,fileName);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["addKeyWord(\"RTRIM\",RTRIM);","addKeyWord(\"SOUNDEX\",SOUNDEX);","addKeyWord(\"SPACE\",SPACE);","addKeyWord(\"SUBSTRING\",SUBSTRING);","addKeyWord(\"TRIM\",TRIM);","addKeyWord(\"UCASE\",UCASE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.BIGINT:","returngetLongImpl();","caseSQLTokenizer.REAL:","return(long)getFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["nodeStack.pop();","continue;","}else{","return-1;","IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["return(int)((day2+3)/7-(day1+3)/7);","}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*12+details2.month)-(details1.year*12+details1.month);","caseSQLTokenizer.SQL_TSI_QUARTER:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["MutableNumericreadNumeric(){","int[]value=newint[readByte()];","intscale=readByte();","intsignum=readByte();","for(inti=0;i\<value.length;i++){","value[i]=readInt();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["updateArray(findColumn(columnName),x);","finalprivateExpressiongetValue(intcolumnIndex)throwsSQLException{","if(values!=null){","ExpressionValuevalue=values[metaData.getColumnIdx(columnIndex)];","if(!value.isEmpty()||isInsertRow){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["{RSET_NOT_INSERT_ROW,\"Cursoriscurrentlynotontheinsertrow.\"},","{RSET_ON_INSERT_ROW,\"Cursoriscurrentlyontheinsertrow.\"},","{ROWSOURCE_READONLY,\"Rowsourceisreadonly.\"},","{STMT_IS_CLOSED,\"Statementisalreadyclosed.\"},","{SUBQUERY_COL_COUNT,\"Countofcolumnsinsubquerymustbe1andnot{0}.\"},","{JOIN_DELETE,\"ThemethoddeleteRownotsupportedonjoins.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["driverInfos[0]=newDriverPropertyInfo(\"dbpath\",props.getProperty(\"dbpath\"));","returndriverInfos;","publicintgetMajorVersion(){","return0;","publicintgetMinorVersion(){","return21;"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["if(value\<Long.MIN_VALUE)","returnLong.MIN_VALUE;","return(long)value;","staticfloatbytes2float(byte[]bytes){","returnFloat.intBitsToFloat(bytes2int(bytes));","staticdoublebytes2double(byte[]bytes){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticfinalintSWITCH=268;","staticfinalStringDESC_STR=\"DESC\";","static{","addKeyWord(\"SELECT\",SELECT);","addKeyWord(\"DELETE\",DELETE);","addKeyWord(\"INTO\",INTO);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.create(Language.MILLIS_TOOLARGE,datetime);","returncalcMillis(year,month,day,hour,minute,second,millis);","}catch(SQLExceptionex){","throwex;","}catch(Throwableex){","throwSmallSQLException.createFromException(Language.DATETIME_INVALID,datetime,ex);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["for(inti=0;i\<columns.size();i++){","addColumn(newColumns,columns.get(i));","TablenewTable=database.createTable(con,newName,newColumns,oldTable.indexes,indexes,foreignKeys);","StringBufferbuffer=newStringBuffer(256);","buffer.append(\"INSERTINTO\").append(newName).append(\'(\');","for(intc=0;c\<oldColumns.size();c++){"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["MutableInteger(intvalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["this.groupBy=groupBy;","if(groupBy!=null){","for(inti=0;i\<groupBy.size();i++){","Expressionleft=groupBy.get(i);","intidx=addInternalExpressionFromGroupBy(left);","ExpressionNameright=newExpressionName(null);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnExpressionValue.getDouble(getObject(),getDataType());","longgetMoney()throwsException{","returnExpressionValue.getMoney(getObject(),getDataType());","MutableNumericgetNumeric()throwsException{","returnExpressionValue.getNumeric(getObject(),getDataType());","StringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnresult;","staticintbytes2int(byte[]bytes){","intresult=0;","intlength=Math.min(4,bytes.length);","for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnSSResultSetMetaData.getDisplaySize(getDataType(),getPrecision(),getScale());","booleanisDefinitelyWritable(){","returnfalse;","booleanisAutoIncrement(){","returnfalse;","booleanisCaseSensitive(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnresult;","staticintmoney2int(longvalue){","if(value\<Integer.MIN_VALUE)returnInteger.MIN_VALUE;","elseif(value\>Integer.MAX_VALUE)returnInteger.MAX_VALUE;","elsereturn(int)value;","staticbyte[]int2bytes(intvalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticfinalintAVG=1406;","static{","addKeyWord(\"COUNT\",COUNT);","addKeyWord(\"MIN\",MIN);","addKeyWord(\"MAX\",MAX);","addKeyWord(\"SUM\",SUM);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateString[]generatedKeyNames;","SSStatement(SSConnectioncon)throwsSQLException{","this(con,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSStatement(SSConnectioncon,intrsType,intrsConcurrency)throwsSQLException{","this.con=con;","this.rsType=rsType;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["publicstaticfinalStringGROUP_AGGR_NOTPART=\"SS-0431\";","publicstaticfinalStringORDERBY_INTERNAL=\"SS-0432\";","publicstaticfinalStringUNION_DIFFERENT_COLS=\"SS-0433\";","publicstaticfinalStringINDEX_EXISTS=\"SS-0460\";","publicstaticfinalStringINDEX_MISSING=\"SS-0461\";","publicstaticfinalStringINDEX_FILE_INVALID=\"SS-0462\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["intdayofyear;","intday;","inthour;","intminute;","intsecond;","intmillis;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privatePropertiesparse(Stringurl,Propertiesinfo)throwsSQLException{","Propertiesprops=(Properties)info.clone();","if(!acceptsURL(url)){","returnprops;","intidx1=url.indexOf(\':\',5);//searchafter\"jdbc:\"","intidx2=url.indexOf(\'?\');"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["caseSQLTokenizer.EQUALS:returnEQUALS;","caseSQLTokenizer.GREATER:returnGREATER;","caseSQLTokenizer.GREATER_EQU:returnGRE_EQU;","caseSQLTokenizer.LESSER:returnLESSER;","caseSQLTokenizer.LESSER_EQU:returnLES_EQU;","caseSQLTokenizer.UNEQUALS:returnUNEQUALS;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalpublicintgetQueryTimeout()throwsSQLException{","checkStatement();","returnqueryTimeout;","finalpublicvoidsetQueryTimeout(intseconds)throwsSQLException{","checkStatement();","queryTimeout=seconds;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["{INDEX_CORRUPT,\"ErrorinloadingIndex.Indexfileiscorrupt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ToomanyequalsentryinIndex.\"},","{FILE_TOONEW,\"Fileversion({0})offile\'\'{1}\'\'istoonewforthisruntime.\"},","{FILE_TOOOLD,\"Fileversion({0})offile\'\'{1}\'\'istoooldforthisruntime.\"},","{FILE_CANT_DELETE,\"File\'\'{0}\'\'can\'tbedeleted.\"},","{ROW_0_ABSOLUTE,\"Row0isinvalidformethodabsolute().\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["rowPos++;","returnrowPos==1;","finalbooleanlast(){","rowPos=1;","returntrue;","finalbooleanisLast(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["returnstrings.size()-columns.size();","finalvoidinit(Databasedatabase,TableViewtableView)/*throwsException*/{","intsize=tableView.columns.size();","matrix=newint[size];","for(inti=0;i\<matrix.length;i++){","matrix[i]=-1;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["addKeyWord(\"ATAN\",ATAN);","addKeyWord(\"ATN2\",ATAN2);//aliasforMSSQLServer","addKeyWord(\"ATAN2\",ATAN2);","addKeyWord(\"CEILING\",CEILING);","addKeyWord(\"COS\",COS);","addKeyWord(\"COT\",COT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicResultSetgetCrossReference(StringprimaryCatalog,StringprimarySchema,StringprimaryTable,StringforeignCatalog,StringforeignSchema,StringforeignTable)throwsSQLException{","try{","String[]colNames={\"PKTABLE_CAT\",\"PKTABLE_SCHEM\",\"PKTABLE_NAME\",\"PKCOLUMN_NAME\",\"FKTABLE_CAT\",\"FKTABLE_SCHEM\",\"FKTABLE_NAME\",\"FKCOLUMN_NAME\",\"KEY_SEQ\",\"UPDATE_RULE\",\"DELETE_RULE\",\"FK_NAME\",\"PK_NAME\",\"DEFERRABILITY\"};","Object[][]data=con.getDatabase(false).getReferenceKeys(con,primaryTable,foreignTable);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{INSERT_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionINSERT.\"},","{SUBSTR_INVALID_LEN,\"Invalidlength\'\'{0}\'\'infunctionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringvaluetoolargeforcolumn.\"},","{VALUE_BIN_TOOLARGE,\"Binaryvaluewithlength{0}tolargeforcolumnwithsize{1}.\"},","{VALUE_NULL_INVALID,\"Nullvaluesarenotvalidforcolumn\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Cannotconverta{0}valuetoa{1}value.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intstrLen=str.length();","intstart=Math.min(Math.max(0,param2.getInt()-1),strLen);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["break;","default:","thrownewError();","privatevoidaddColumn(Columnscols,Columncolumn)throwsSQLException{","if(cols.get(column.getName())!=null){","throwSmallSQLException.create(Language.COL_DUPLICATE,column.getName());"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["publicstaticLanguagegetDefaultLanguage(){","StringdfltLocaleStr=Locale.getDefault().toString();","try{","returngetFromLocaleTree(dfltLocaleStr);","catch(IllegalArgumentExceptione){","returnnewLanguage();//defaulttoEnglish"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["cmdCreate.addForeingnKey(foreignKey);","}else{","cmdCreate.addIndex(index);","token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"REAL\"});","@Override","doublegetDouble(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(defaultValue==-1)","return0xFFFF;","returndefaultValue;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","if(defaultValue==-1)"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["rowSource.nullRow();","row=0;","finalvoidnoRow(){","rowSource.noRow();","row=0;","finalbooleanrowInserted(){"]": ["|project://smallsql/src/smallsql/database/Where.java|","|project://smallsql/src/smallsql/database/Distinct.java|"],
"["returngetFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["floatvalue;","MutableFloat(floatvalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){"]": ["|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["returnparam1.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intlength=bytes.length;","while(length\>0&&bytes[length-1]==0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["cmd.addColumnExpression(expr);","expr.setFrom(source,i,source.getColumn(i));","cmd.setSource(source);","returncmd;","staticfinalIntegergetInteger(intvalue){","if(value\>=-4&&value\<256){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NUMERIC)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DECIMAL)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.MONEY)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLMONEY)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.INT)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLINT)),Utils.getInteger(5),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnSQLTokenizer.TIMESTAMPADD;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{","returngetLong()!=0;","intgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["super.addColumnExpression(column);","voidaddValues(Expressionsvalues){","this.cmdSel=newCommandSelect(log,values);","voidaddValues(CommandSelectcmdSel){","this.cmdSel=cmdSel;","privatevoidcompile(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["staticfinalprivateIndexNode[]EMPTY_NODES=newIndexNode[0];","privateIndexNode[]nodes=EMPTY_NODES;","privatechar[]remainderKey;","privateObjectvalue;","protectedIndexNode(booleanunique,chardigit){","this.unique=unique;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.DECIMAL:","returnreadNumeric();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoidsetEnd(){","Expression[]params=newExpression[cases.size()*2+(elseResult!=null?1:0)];","inti=0;","for(intp=0;p\<cases.size();p++){","params[i++]=cases.get(p);","params[i++]=results.get(p);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["page=find(page,expr.getBoolean()?2:1,1,nodeList);","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","page=find(page,numericToBinarySortOrder(expr.getNumeric()),nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["privateEntry[]table;","privateintsize;","privateintthreshold;","StorePageMap(){","threshold=12;","table=newEntry[17];"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["addKeyWord(\"CONVERT\",CONVERT);","addKeyWord(\"CAST\",CAST);","addKeyWord(\"IIF\",IIF);","staticfinalintSQL_BIGINT=1350;","staticfinalintSQL_BINARY=1351;","staticfinalintSQL_BIT=1352;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{STXADD_KEYS_REQUIRED,\"Requiredkeywordsare:\"},","{STXADD_NOT_NUMBER,\"Numbervaluerequired(passed=\'\'{0}\'\').\"},","{STXADD_COMMENT_OPEN,\"Missingendcommentmark(\'\'*/\'\').\"},","};","privatefinalString[][]SQL_STATES={","{CUSTOM_MESSAGE,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnSQLTokenizer.BITLEN;","booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|"],
"["Index(IndexNoderootPage){","this.rootPage=rootPage;","IndexScrollStatuscreateScrollStatus(Expressionsexpressions){","returnnewIndexScrollStatus(rootPage,expressions);","finalObjectfindRows(Expressionsexpressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.NVARCHAR:","returnreadString().getBytes();","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(isNull())returnnull;","returngetObject().toString();","finalprivateStringgetString(StringlVal,StringrVal)throwsjava.lang.Exception{","switch(operation){","caseADD:returnlVal+rVal;","throwcreateUnspportedConversion(SQLTokenizer.VARCHAR);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["inttype;","while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();","switch(type){","store.setCurrentOffsetInPage(offsetInPage+size);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["con.rollbackFile(raFile);","close();","if(lobs!=null)","lobs.drop(con);","if(indexes!=null)","indexes.drop(database);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.DESC:","expr.setAlias(SQLTokenizer.DESC_STR);","caseSQLTokenizer.ASC:","token=nextToken();","if(token==null){","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MONEY:","returnnewMutableNumeric(readLong(),4);","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(readInt(),4);","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return0;","returnoperation;","return0;","staticfinalintCROSS_JOIN=1;","staticfinalintINNER_JOIN=2;","staticfinalintLEFT_JOIN=3;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["caseSQLTokenizer.TINYINT:","page=find(page,expr.getInt(),1,nodeList);","break;","caseSQLTokenizer.SMALLINT:","page=find(page,shortToBinarySortOrder(expr.getInt()),1,nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["nullableWasSet=true;","break;","caseSQLTokenizer.NOT:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","token=nextToken(MISSING_NULL);","col.setNullable(false);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["defaultWasSet=true;","break;","caseSQLTokenizer.IDENTITY:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","col.setAutoIncrement(true);","defaultWasSet=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicStringgetTimeDateFunctions(){","returngetFunctions(SQLTokenizer.CURDATE,SQLTokenizer.YEAR);","publicStringgetSearchStringEscape(){","return\"\\\\\";","publicStringgetExtraNameCharacters(){","return\"#$Ã€Ã\ufffdÃ‚ÃƒÃ„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹ÃŒÃ\ufffdÃŽÃ\ufffdÃ\ufffdÃ‘Ã’Ã“Ã”Ã•Ã–Ã˜Ã™ÃšÃ›ÃœÃ\ufffdÃžÃŸÃ\u00a0Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["columns.add(column);","finalbooleanisScrollable(){","returntrue;","finalvoidbeforeFirst(){","rowIdx=-1;","currentRow=null;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["doublevalue;","MutableDouble(doublevalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["publicclassExpressionNameextendsExpression{","privateStringtableAlias;","privateDataSourcefromEntry;","privateintcolIdx;","privateTableViewtable;","privateColumncolumn;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["signum=0;","value=EMPTY_INTS;","}else{","value=newint[2];","if(complement\<0){","value[0]=(int)(~(complement\>\>32));"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(isNull())return0;","returnInteger.parseInt(getString().trim());","finallonggetLong()throwsException{","if(isNull())return0;","returnLong.parseLong(getString().trim());","finalfloatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["this.left=left;","this.right=right;","this.right2=right2;","this.operation=operation;","super.setParams(newExpression[]{left,right,right2});","ExpressionArithmetic(Expressionleft,ExpressionsinList,intoperation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.SQL_TSI_HOUR:","return(int)(param2.getLong()/3600000-param1.getLong()/3600000);","caseSQLTokenizer.SQL_TSI_DAY:","return(int)(param2.getLong()/86400000-param1.getLong()/86400000);","caseSQLTokenizer.SQL_TSI_WEEK:{","longday2=param2.getLong()/86400000;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["con.add(newCreateFile(file,randomFile,con,database));","writeMagic(randomFile);","returnrandomFile;","privatevoidload(Databasedatabase)throwsSQLException{","try{","Filefile=getFile(database,name);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.SMALLINT:","bytes=newbyte[2];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}catch(Exceptione2){","DriverManager.println(e2.toString());","throwSmallSQLException.createFromException(e);","FilegetFile(Databasedatabase){","returnnewFile(Utils.createTableViewFileName(database,name));","FileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?10000:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","returnparam2.getLong()+param1.getLong();","caseSQLTokenizer.SQL_TSI_SECOND:","returnparam2.getLong()+param1.getLong()*1000;","caseSQLTokenizer.SQL_TSI_MINUTE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["ArrayListinserts=newArrayList();","if(con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","inserts.add(lock.getLink());","}else{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["(nullable?4:0);","voidsetFlag(intflag){","identity=(flag&1)\>0;","caseSensitive=(flag&2)\>0;","nullable=(flag&4)\>0;","Columncopy(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["buf.append(Long.toString(temp));","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).toString();","if(scale\>0){","while(buf.length()\<=scale)buf.insert(0,\'0\');","buf.insert(buf.length()-scale,\'.\');"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnvalues[metaData.getColumnIdx(columnIndex)];","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType);","if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType);","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["row[3]=\"TABLE\";","rows.add(row);","}catch(Exceptione){","Object[][]data=newObject[rows.size()][];","rows.toArray(data);","CommandSelectcmdSelect=Utils.createMemoryCommandSelect(con,colNames,data);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["wasNull=expr.isNull();","returnexpr.getBoolean();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbytegetByte(inti)throwsSQLException{","return(byte)getInt(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(rs==null)","throwSmallSQLException.create(Language.RSET_NOT_PRODUCED);","returnrs;","SSResultSetgetResultSet(){","returnrs;","intgetUpdateCount(){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["longresult=listEnum.resultStack[listEnum.stack];","booleanfirstNode=(offset==0);//trueifitthefirstentryinalevel","while(true){","intnextEntry=getUnsignedShort();","if(nextEntry!=0||firstNode){","result|=(((long)nextEntry)\<\<shift);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.VIEW:","Database.dropView(con,catalog,name);","break;","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","thrownewjava.lang.UnsupportedOperationException();"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["cal.setTimeZone(TimeZone.getDefault());","cal.setTimeInMillis(datetime);","returndatetime+cal.get(Calendar.ZONE_OFFSET)+cal.get(Calendar.DST_OFFSET);","staticTimestampgetTimestamp(longtime){","returnnewTimestamp(DateTime.addDateTimeOffset(time));","staticTimegetTime(longtime){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicbooleansupportsUnionAll(){","returntrue;","publicbooleansupportsOpenCursorsAcrossCommit(){","returntrue;","publicbooleansupportsOpenCursorsAcrossRollback(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintROUND=1018;","staticfinalintSIGN=1019;","staticfinalintSIN=1020;","staticfinalintSQRT=1021;","staticfinalintTAN=1022;","staticfinalintTRUNCATE=1023;//lastnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.sql.SQLException;","publicclassFileIndexNodeextendsIndexNode{","privatefinalFileChannelfile;","privatelongfileOffset;","FileIndexNode(booleanunique,chardigit,FileChannelfile){","super(unique,digit);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["returnparam1.isNull()||param2.isNull()||param3.isNull()||param4.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intstart=Math.min(Math.max(0,param2.getInt()-1),bytes.length);","intlength=Math.min(param3.getInt(),bytes.length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["db=newDatabase(name,file,con.isReadOnly());","databases.put(dbKey,db);","db.connections.put(con,null);","returndb;","privatestaticDatabasegetDatabase(SSConnectioncon,Stringname)throwsSQLException{","returnname==null?"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["super(con,rsType,rsConcurrency);","con.log.println(sql);","SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);","top=cmd.getMaxRows();","publicResultSetexecuteQuery()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["privatelongtableTimestamp;","privateint[]matrix;//mappingofthecolumnsfromINSERTtothecolumnsintheTable;-1defaultValue","CommandInsert(Loggerlog,Stringname){","super(log);","this.name=name;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["this.con=con;","Commandcmd=parse(sqlString.toCharArray());","SQLTokentoken=nextToken();","if(token!=null){","throwcreateSyntaxError(token,Language.STXADD_ADDITIONAL_TOK);","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();","if(columnName!=null){","columns.add(columnName);","expressions.add(newExpressionName(columnName));","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return(int)(param2.getLong()-param1.getLong());","caseSQLTokenizer.SQL_TSI_SECOND:","return(int)(param2.getLong()/1000-param1.getLong()/1000);","caseSQLTokenizer.SQL_TSI_MINUTE:","return(int)(param2.getLong()/60000-param1.getLong()/60000);","caseSQLTokenizer.SQL_TSI_HOUR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["SQLTokentoken=nextToken();","if(token!=null){","if(token.value!=SQLTokenizer.WHERE)","throwthis.createSyntaxError(token,MISSING_WHERE);","where(cmd);","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case111://Japanyy/mm/dd"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privatestaticLanguagelanguage;","privateSmallSQLException(Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);","init();","privateSmallSQLException(Throwablethrowable,Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;","caseSQLTokenizer.DAYOFMONTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfMonth();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=left.getNumeric().compareTo(right2.getNumeric());","default:","returngetNumeric().getSignum()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnSQLTokenizer.BIGINT;","if(dataTypeIdx\>=MONEY_IDX)","returnSQLTokenizer.MONEY;","if(dataTypeIdx\>=DECIMAL_IDX)","returnSQLTokenizer.DECIMAL;","returnSQLTokenizer.DOUBLE;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticStoreImplrecreateStore(Tabletable,StorePagestorePage,inttype)throwsException{","StoreImplstore=newStoreImpl(table,storePage,type,-1);","store.page=storePage.page;","store.sharedPageData=true;","store.readPageHeader();","store=store.loadUpdatedStore();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnewDateTime(readDate(),SQLTokenizer.DATE);","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=newObject[0][0];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetPrimaryKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["break;","caseSQLTokenizer.MONEY:","((Money)value).value=Math.min(((Money)value).value,expr.getMoney());","break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicbooleansupportsOrderByUnrelated(){","returntrue;","publicbooleansupportsGroupBy(){","returntrue;","publicbooleansupportsGroupByUnrelated(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","needGeneratedKeys=false;","generatedKeyIndexes=null;","generatedKeyNames=null;","finalpublicvoidclose(){"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(isEmpty())set(expr.getObject(),expr.getDataType());","break;","caseLAST:","set(expr.getObject(),expr.getDataType());","break;","caseCOUNT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(lobs!=null)","lobs.drop(con);","if(indexes!=null)","indexes.drop(database);","booleanok=getFile(database).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["column.setFlag(readByte());","column.setName(readString());","column.setDataType(readShort());","intprecision;","if(tableFormatVersion==TableView.TABLE_VIEW_OLD_VERSION)","precision=readByte();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalintgetDataType(intcolIdx){","returndataTypes[colIdx];","finalprivatevoidcopyValueInto(intcolIdx,StoreImpldst){","intoffset=offsets[colIdx++];","intlength=(colIdx\<offsets.length?offsets[colIdx]:store.getUsedSize())-offset;","dst.copyValueFrom((StoreImpl)store,offset,length);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["do{","if(fullReturnCounter\>=fullRowCount){","returnfalse;","right.next();","}while(isFullNotValid[fullReturnCounter++]);","returntrue;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.TINYINT:","returnString.valueOf(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnString.valueOf(readShort());","caseSQLTokenizer.INT:","returnString.valueOf(readInt());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnfromEntry.getDataType(colIdx);","caseFIRST:","caseLAST:","caseMAX:","caseMIN:","caseSUM:"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["finalvoidsetSize(intnewSize){","for(inti=newSize;i\<size;i++)data[i]=null;","size=newSize;","if(size\>data.length)resize(newSize);","finalExpressionget(intidx){","if(idx\>=size)"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["if(magic!=MAGIC_INDEX){","throwSmallSQLException.create(Language.INDEX_FILE_INVALID,file.getName());","if(version\>INDEX_VERSION){","Object[]params={newInteger(version),file.getName()};","throwSmallSQLException.create(Language.FILE_TOONEW,params);","}catch(Throwablee){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["publicStringgetColumnClassName(intcolumn)throwsSQLException{","switch(getColumnType(column)){","caseTypes.TINYINT:","caseTypes.SMALLINT:","caseTypes.INTEGER:","return\"java.lang.Integer\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["store.page=page_control;","store.readPageHeader();","store.page=newbyte[store.sizeUsed];","raFile.position(filePos);","ByteBufferbuffer=ByteBuffer.wrap(store.page);","raFile.read(buffer);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(param1.isNull())returnnull;","finalintdataType=getDataType();","switch(dataType){","caseSQLTokenizer.LONGVARCHAR:","returnconvertToString();","caseSQLTokenizer.VARCHAR:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["data=newlong[initialSize*2];","finalintsize(){","returnsize;","finallongget1(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["break;","default:","column.setPrecision(origExpression.getPrecision());","column.setScale(origExpression.getScale());","column.setDataType(exprName.getDataType());","}else{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["synchronized(databases){","Iteratoriterator=databases.values().iterator();","while(iterator.hasNext()){","Databasedatabase=(Database)iterator.next();","WeakHashMapconnections=database.connections;","connections.remove(con);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["e.printStackTrace();","privatestaticvoidprintRS(ResultSetrs)throwsSQLException{","ResultSetMetaDatamd=rs.getMetaData();","intcount=md.getColumnCount();","for(inti=1;i\<=count;i++){","System.out.print(md.getColumnLabel(i));"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["con.testClosedConnection();","finalpublicResultSetexecuteQuery(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getQueryResult();","finalpublicintexecuteUpdate(Stringsql)throwsSQLException{","executeImpl(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["while(cmdSel.next()){","try{","index.addValues(0,cmdSel.columnExpressions);","}catch(Exceptione){","booleanisInList()throwsException{","loadInList();"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["value=newMutableInteger(expr.getInt());","break;","caseSQLTokenizer.BIGINT:","value=newMutableLong(expr.getLong());","break;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnsuper.clone();","finalStringgetName(){","returnname;","finalvoidsetName(Stringname){","this.alias=this.name=name;","finalStringgetAlias(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["if(equals(node.getRemainderValue(),key,i)){","returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,char[]key,booleanisLast)throwsSQLException{","intlength=key.length;","inti=-1;","while(true){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["node.saveValue(rowOffset);","finalvoidsaveValue(longrowOffset)throwsSQLException{","if(unique){","if(value!=null)throwSmallSQLException.create(Language.KEY_DUPLICATE);","value=newLong(rowOffset);","}else{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnUtils.getInteger(getInt());","finalStringgetString()throwsException{","if(isNull())returnnull;","returnString.valueOf(getInt());","finalintgetDataType(){","returnSQLTokenizer.INT;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["booleanisLast()throwsException{","returnfrom.isLast();","booleanisAfterLast()throwsException{","returnfrom.isAfterLast();","finalbooleanabsolute(introw)throwsException{","returnfrom.absolute(row);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["cal.set(Calendar.MILLISECOND,millis);","returncal.getTimeInMillis();","privatestaticlongremoveDateTimeOffset(longdatetime){","synchronized(cal){","cal.setTimeZone(TimeZone.getDefault());","cal.setTimeInMillis(datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnMath.abs(param1.getDouble());","longgetMoney()throwsException{","returnMath.abs(param1.getMoney());","MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;","MutableNumericnum=param1.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["returnDouble.parseDouble(val)!=0;","}catch(NumberFormatExceptione){/*ignoreitifitnotanumber*/}","return\"true\".equalsIgnoreCase(val)||\"yes\".equalsIgnoreCase(val)||\"t\".equalsIgnoreCase(val);","staticlongdoubleToMoney(doublevalue){","if(value\<0)","return(long)(value*10000-0.5);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnMoney.createFromUnscaledValue(readLong());","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(signum\<0)","complement[0]=complement[1]=complement[2]=complement[3]=-1;","offset=4;","}else{","complement=newbyte[(value.length-v)*4];","offset=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{TABLE_OR_VIEW_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoditabella/view.\"},","{TABLE_EXISTENT,\"Latabella/vista\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'nonÃ¨unatabella.\"},","{PK_ONLYONE,\"UnatabellapuÃ²averesolounaprimarykey.\"},","{KEY_DUPLICATE,\"Chiaveduplicata.\"},","{MONTH_TOOLARGE,\"ValoredelmesetroppoaltodelinDATEoTIMESTAMP\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returngetString(left.getString(),right.getString());","caseSQLTokenizer.JAVA_OBJECT:","ObjectlObj=left.getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["ColumnstableColumns=table.columns;","intcount=tableColumns.size();","Expression[]updateValues=newExpression[count];","booleanisUpdateNeeded=false;","for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["page[offset++]=(byte)(c);","page[offset++]=(byte)(c\>\>8);","char[]readChars(intlength){","char[]daten=newchar[length];","for(inti=0;i\<length;i++){","daten[i]=(char)((page[offset++]&0xFF)|(page[offset++]\<\<8));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["page=(IndexNode)page.getValue();","thrownewError();","finalObjectfindRows(Expression[]expressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;","intcount=expressions.length;","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicbooleansupportsNonNullableColumns(){","returntrue;","publicbooleansupportsMinimumSQLGrammar(){","returntrue;","publicbooleansupportsCoreSQLGrammar(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Tabletable=newTable(this,con,tableName,columns,oldIndexes,newIndexes,foreignKeys);","synchronized(tableViews){","tableViews.put(tableName,table);","returntable;","voidcreateView(SSConnectioncon,StringviewName,Stringsql)throwsException{","newView(this,con,viewName,sql);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["}else{","return;","finalprivateintgetPointer(){","intvalue=0;","for(inti=0;i\<pointerSize;i++){","value\<\<=8;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnInteger.parseInt(str);","}catch(Throwableth){/*ANumberFormatExceptioncanoccurifitafloatingpointnumber*/}","return(int)Double.parseDouble(str);","longgetLong()throwsException{","returngetLong(getObject(),dataType);","staticlonggetLong(Objectobj,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["((StoreImpl)this.store).createWriteLock();","for(inti=0;i\<count;i++){","Expressionsrc=updateValues[i];","if(src!=null){","newStore.writeExpression(src,tableColumns.get(i));","}else{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));","buffer.append(str.substring(start+length));","returnbuffer.toString();","intgetPrecision(){","returnparam1.getPrecision()+param2.getPrecision();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["staticDateTimevalueOf(java.sql.Datedate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.DATE);","staticDateTimevalueOf(java.sql.Timedate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIME);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["StringgetString(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBytes();","intgetDataType(intcolIdx){","returncolumnExpressions.get(colIdx).getDataType();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARBINARY:","ExpressionFunctionRTrimtrim=newExpressionFunctionRTrim();","trim.setParams(newExpression[]{expr});","returntrim;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["do{","isCurrentRow=rowSource.previous();","}while(isCurrentRow&&!isValidRow());","if(oldIsCurrentRow||isCurrentRow)row--;","returnisCurrentRow;","finalbooleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returnSQLTokenizer.DIFFERENCE;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","Stringstr1=ExpressionFunctionSoundex.getString(param1.getString());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["returnparam1.isNull()||param2.isNull();","intgetInt()throwsException{","Stringsuchstr=param1.getString();","Stringvalue=param2.getString();","if(suchstr==null||value==null||suchstr.length()==0||value.length()==0)return0;","intstart=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLocate.java|"],
"["finalintlevel;","IndexNodeScrollStatus(IndexNodenode,booleanasc,booleanscroll,intlevel){","this.nodes=node.getChildNodes();","nodeValue=node.getValue();","this.asc=asc;","this.idx=(asc^scroll)?nodes.length:-2;"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["privatevoidloadInList()throwsException{","if(cmdSel.compile(con)){","cmdSel.from.execute();","if(cmdSel.columnExpressions.size()!=1)","throwSmallSQLException.create(Language.SUBQUERY_COL_COUNT,newInteger(cmdSel.columnExpressions.size()));","index.clear();"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["break;","}while(true);","if(isLeap&&day==59){","month=1;","day=29;","}else{"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGNVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NUMERIC)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DECIMAL)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.MONEY)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnnewFile(Utils.createTableViewFileName(database,name));","FileChannelcreateFile(SSConnectioncon,Databasedatabase)throwsException{","if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database);","booleanok=file.createNewFile();"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["Stringmessage=getErrorString(token,addMessageCode,param0);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,int[]validValues){","StringmsgStr=SmallSQLException.translateMsg(","Language.STXADD_KEYS_REQUIRED,newObject[]{});","StringBuffermsgBuf=newStringBuffer(msgStr);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(type==Join.RIGHT_JOIN)","returnnewJoin(Join.LEFT_JOIN,right,left,expression(cmd,0));","returnnewJoin(type,left,right,expression(cmd,0));","default:","if(!right.hasAlias()){","right.setAlias(token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}elseif(quote==0){","intk=tokenStart;","if(k==i){//pointisfirstcharacter","if(sql.length\>k+1){","charcc=sql[k+1];","if((cc\>=\'0\')&&cc\<=\'9\')break;//isanumber--\>break"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatestaticfinalint[]MISSING_BETWEEN_IN={SQLTokenizer.BETWEEN,SQLTokenizer.IN};","privatestaticfinalint[]MISSING_NOT_NULL={SQLTokenizer.NOT,SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_NULL={SQLTokenizer.NULL};","privatestaticfinalint[]MISSING_COMMA={SQLTokenizer.COMMA};","privatestaticfinalint[]MISSING_COMMA_PARENTHESIS={SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_PARENTHESIS_VALUES_SELECT={SQLTokenizer.PARENTHESIS_L,SQLTokenizer.VALUES,SQLTokenizer.SELECT};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleandeletesAreDetected(inttype){","returnsupportsResultSetType(type);","publicbooleaninsertsAreDetected(inttype){","returnsupportsResultSetType(type);","publicbooleansupportsBatchUpdates(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["intsIdx=0;//indexinsearchArray","booleanrange=false;","weiter:","while(pattern.length()\>mIdx&&value.length()\>sIdx){","charm=Character.toUpperCase(pattern.charAt(mIdx++));","switch(m){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returngetDataType(typeLeft,typeRight);","staticintgetBestNumberDataType(intparamDataType){","intdataTypeIdx=Utils.indexOf(paramDataType,DatatypeRange);","if(dataTypeIdx\>=NVARCHAR_IDX)","returnSQLTokenizer.DOUBLE;","if(dataTypeIdx\>=INT_IDX)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalStringMASTER_FILENAME=\"smallsql.master\";","staticfinalStringTABLE_VIEW_EXTENTION=\".sdb\";","privatestaticfinalStringLOB_EXTENTION=\".lob\";","staticfinalStringIDX_EXTENTION=\".idx\";","privatestaticfinalInteger[]integerCache=newInteger[260];","privatestaticfinalShort[]shortCache=newShort[260];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicvoidrollback()throwsSQLException{","log.println(\"Rollback\");","testClosedConnection();","synchronized(getMonitor()){","intcount=commitPages.size();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returndatatype.getPrecision();","default:","returnsuper.getPrecision();","finalintgetScale(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["default:","returnprecision;","staticintgetDataTypePrecision(intdataType,intdefaultValue){","switch(dataType){","caseSQLTokenizer.NULL:","return0;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["st=newSSStatement(con);","publicbooleanallProceduresAreCallable(){","returntrue;","publicbooleanallTablesAreSelectable(){","returntrue;","publicStringgetURL()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["thrownewError();","finalprivateIndexNodefindRows(IndexNodepage,Expressionexpr,booleansearchNullValues,ArrayListnodeList)throwsException{","if(expr.isNull()){","if(!searchNullValues){","returnnull;","page=findNull(page);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["((MutableLong)value).value=Math.max(((MutableLong)value).value,expr.getLong());","break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.max(((MutableFloat)value).value,expr.getFloat());","break;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(intValue\>0)","return1;","return0;","caseSQLTokenizer.BIGINT:","longlongValue=param1.getLong();","if(longValue\<0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","returnbuf.toString();","case21:","case121://ODBCkannonish+millis;yyyy-mm-ddhh:mi:ss.mmm(24h)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalprivateExpressiongetValue(intcolumnIndex)throwsSQLException{","if(values!=null){","ExpressionValuevalue=values[metaData.getColumnIdx(columnIndex)];","if(!value.isEmpty()||isInsertRow){","returnvalue;","returnmetaData.getColumnExpression(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["node.saveValue(rowOffset);","returnnull;","returnnode.addRoot();","finalvoidclear(){","rootPage.clear();","finalstaticprivateintfloatToBinarySortOrder(floatvalue){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["finalbooleangetBoolean(intcolIdx)throwsException{","returncurrentDS.getBoolean(colIdx);","finalintgetInt(intcolIdx)throwsException{","returncurrentDS.getInt(colIdx);","finallonggetLong(intcolIdx)throwsException{","returncurrentDS.getLong(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["longrowOffset=scroll?","longList.getNext(longListEnum):","longList.getPrevious(longListEnum);","if(rowOffset\<0){","longList=null;","}else{"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["column.setName(readString());","column.setDataType(readShort());","intprecision;","if(tableFormatVersion==TableView.TABLE_VIEW_OLD_VERSION)","precision=readByte();","else"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnode.addRoot();","thrownewError();","finalprivateIndexNodefind(IndexNodenode,char[]key,ArrayListnodeList){","intlength=key.length;","inti=-1;","while(true){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.DOUBLE:","return(long)readDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/10000;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["lastRowOffset=rowSource.getRowPosition();","index.addValues(lastRowOffset,orderBy);","sortedRowCount++;","scrollStatus=index.createScrollStatus(orderBy);","useSetRowPosition=false;","finalbooleanisBeforeFirst(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["intcount=commitPages.size();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.commit();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.INT:","returnUtils.getInteger(readInt());","caseSQLTokenizer.BIGINT:","returnnewLong(readLong());","caseSQLTokenizer.REAL:","returnnewFloat(readFloat());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intsavepoint=con.getSavepoint();","try{","if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_DELETE);","if(tables.size()==0)","throwSmallSQLException.create(Language.DELETE_WO_FROM);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["privatevoidcreateColumns(SSConnectioncon)throwsException{","commandSelect.compile(con);","Expressionsexprs=commandSelect.columnExpressions;","for(intc=0;c\<exprs.size();c++){","Expressionexpr=exprs.get(c);","if(exprinstanceofExpressionName){"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["this.dataType=SQLTokenizer.MONEY;","else","throwSmallSQLException.create(Language.PARAM_CLASS_UNKNOWN,newValue.getClass().getName());","finalvoidset(ExpressionValueval){","this.value=val.value;","this.dataType=val.dataType;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticbooleanisNumberDataType(intdataType){","returnisSignedDataType(dataType)||dataType==SQLTokenizer.TINYINT;","staticbooleanisBinaryDataType(intdataType){","switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["num=newMutableNumeric(doubleValue()%num.doubleValue());","value=num.value;","scale=num.scale;","signum=num.signum;","intgetScale(){","returnscale;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(!varBinary){","for(inti=length;i\<lengthColumn;i++){","page[offset++]=0;","byte[]readBinary(){","intlength=readShort()&0xFFFF;","returnreadBytes(length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SET:","returnset();","caseSQLTokenizer.USE:","token=nextToken(MISSING_EXPRESSION);","Stringname=token.getName(sql);","checkValidIdentifier(name,token);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicstaticfinalStringROW_0_ABSOLUTE=\"SS-0520\";","publicstaticfinalStringROW_NOCURRENT=\"SS-0521\";","publicstaticfinalStringROWS_WRONG_MAX=\"SS-0522\";","publicstaticfinalStringROW_LOCKED=\"SS-0523\";","publicstaticfinalStringROW_DELETED=\"SS-0524\";","publicstaticfinalStringSAVEPT_INVALID_TRANS=\"SS-0550\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["right=inList[i];","if(getBoolean())returntrue;","}finally{","right=null;","returnfalse;","SQLExceptioncreateUnspportedDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(idx\<1||idx\>params.size())","throwSmallSQLException.create(Language.PARAM_IDX_OUT_RANGE,newObject[]{newInteger(idx),newInteger(params.size())});","return((ExpressionValue)params.get(idx-1));","voidsetParamValue(intidx,Objectvalue,intdataType)throwsSQLException{","getParam(idx).set(value,dataType);","if(log.isLogging()){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["default:","returngetDouble()!=0;","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","switch(operation){","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["isBeforeFirst=false;","right.nullRow();","returntrue;","}elsefullRightRowCounter++;","}else{","if(type==Join.FULL_JOIN){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["filePos=-1;","noRow();","}else","filePos=store.getNextPagePos();","@Override","finalbooleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["Listrows=newArrayList();","Stringstables=getTables(table);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;"]": ["|project://smallsql/src/smallsql/database/Database.java|","|project://smallsql/src/smallsql/database/Database.java|"],
"["intp=idx/2;","if(p\>=cases.size()){","elseResult=param;","return;","if(idx%2\>0){","results.set(p,param);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["puffer[i]=(char)(value[i]&0xFF);","returnpuffer;","finalstaticprivatechar[]numericToBinarySortOrder(MutableNumericnumeric){","int[]value=numeric.getInternalValue();","intcount=1;","inti;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionArithmetic))returnfalse;","if(((ExpressionArithmetic)expr).operation!=operation)returnfalse;","returntrue;","intgetInt()throwsjava.lang.Exception{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalclassExpressionFunctionModextendsExpressionFunctionReturnInt{","finalintgetFunction(){returnSQLTokenizer.MOD;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalintgetInt()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionMod.java|"],
"["token=nextToken();","if(token!=null)offset=token.offset;","previousToken();","Expressionexpr=expression(cmdCreate,0);","SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SMALLINT:","returnUtils.getInteger((short)param1.getInt());","caseSQLTokenizer.INT:","returnUtils.getInteger(param1.getInt());","caseSQLTokenizer.BIGINT:","returnnewLong(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["for(inti=0;i\<sql.length;i++){","charc=sql[i];","switch(c){","case\'\\\"\':","case\'\\\'\':","if(comment!=NOT_COMMENT){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID,String.valueOf(offset));/*,offset*/","privatestaticinthexDigit2int(chardigit){","if(digit\>=\'0\'&&digit\<=\'9\')returndigit-\'0\';","digit|=0x20;","if(digit\>=\'a\'&&digit\<=\'f\')returndigit-\'W\';//-\'W\'==-\'a\'+10","thrownewRuntimeException();"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","buf.append(Long.toString(temp));","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).toString();","if(scale\>0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["privateCommandCreateDatabasecreateDatabase()throwsSQLException{","SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","returnnewCommandCreateDatabase(con.log,token.getName(sql));","privateCommandTablecreateTable()throwsSQLException{","Stringcatalog;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finallongget1(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx\<\<1];","finallongget2(intidx){","if(idx\>=size)"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.VARCHAR);","publicvoidsetBytes(intparameterIndex,byte[]x)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.BINARY);","publicvoidsetDate(intparameterIndex,Datex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["offset+=8;","break;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","intcount=readShort()&0xFFFF;","if(!isNull)offset+=count;//notuse+=directlybecausereadShortchangetheoffset"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnewDateTime(readTime(),SQLTokenizer.TIME).toString();","caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE).toString();","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Filefile=newFile(Utils.createTableViewFileName(database,name));","booleanok=file.delete();","if(!ok)throwSmallSQLException.create(Language.VIEW_CANTDROP,name);","privatevoidwrite(Databasedatabase,SSConnectioncon)throwsException{","FileChannelraFile=createFile(con,database);","StorePagestorePage=newStorePage(null,-1,raFile,8);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["value+=(data[offset++]&0xFF);","returnvalue;","finalprivatevoidwritePointer(intvalue){","for(inti=pointerSize-1;i\>=0;i--){","data[offset++]=(byte)(value\>\>(i*8));","finalprivateintgetUnsignedShort(){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(!store.isValidPage()){","returnfalse;","store.scanObjectOffsets(offsets,dataTypes);","afterLastValidFilePos=store.getNextPagePos();","returntrue;","}else{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["puffer[0]=(char)count;","for(intc=1;c\<count;){","puffer[c++]=(char)(value[i]\>\>16);","puffer[c++]=(char)value[i++];","returnpuffer;","privatefinalbooleanequals(char[]src1,char[]src2,intoffset2){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intlength=param2.getInt();","length=Math.min(length,str.length());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["break;","}else","throwSmallSQLException.create(Language.COL_INVALID_NAME,newObject[]{expr.getName()});","if(t==tables.size())","throwSmallSQLException.create(Language.COL_WRONG_PREFIX,tableAlias);","}else{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NOT/10),ExpressionArithmetic.NOT);","break;","caseSQLTokenizer.MINUS:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NEGATIVE/10),ExpressionArithmetic.NEGATIVE);","break;","caseSQLTokenizer.TILDE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintSQL_TSI_SECOND=1251;","staticfinalintSQL_TSI_MINUTE=1252;","staticfinalintSQL_TSI_HOUR=1253;","staticfinalintSQL_TSI_DAY=1254;","staticfinalintSQL_TSI_WEEK=1255;","staticfinalintSQL_TSI_MONTH=1256;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Listrows=newArrayList();","Stringstables=(pkTable!=null)?getTables(pkTable):getTables(fkTable);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(einstanceofSQLException){","return(SQLException)e;","else{","Stringmessage=stripMsg(e);","StringsqlState=language.getSqlState(Language.CUSTOM_MESSAGE);","returnnewSmallSQLException(e,message,sqlState);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["finallonggetRowPosition(){","if(rowPositions==null)rowPositions=newLongLongList();","rowPositions.add(left.getRowPosition(),right.getRowPosition());","returnrowPositions.size()-1;","finalvoidsetRowPosition(longrowPosition)throwsException{","left.setRowPosition(rowPositions.get1((int)rowPosition));"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong()*3;","returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.year+=param1.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["publicstaticfinalStringCOL_VAL_UNMATCH=\"SS-0402\";","publicstaticfinalStringCOL_INVALID_SIZE=\"SS-0403\";","publicstaticfinalStringCOL_WRONG_PREFIX=\"SS-0404\";","publicstaticfinalStringCOL_READONLY=\"SS-0405\";","publicstaticfinalStringCOL_INVALID_NAME=\"SS-0406\";","publicstaticfinalStringCOL_IDX_OUT_RANGE=\"SS-0407\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["String[]colNames={\"TABLE_SCHEM\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetCatalogs()throwsSQLException{","String[]colNames={\"TABLE_CAT\"};","Object[][]data=Database.getCatalogs(con.getDatabase(true));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","returnTypes.CHAR;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnTypes.VARCHAR;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["value=newDateTime(expr.getLong(),dataType);","break;","default:","value=expr.getObject();","privatestaticfinalObjectEMPTY=newObject();","finalbooleanisEmpty(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["name=name.substring(5);","this.name=name;","@Override","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(con.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["intoldOffset=offset;","correctPointers(0,oldOffset,-(2+pointerSize),0);","size-=2+pointerSize;","System.arraycopy(data,oldOffset+2+pointerSize,data,oldOffset,size-oldOffset);","offset=oldOffset;","finalprivatevoidremoveNodeLastLevel()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["abstractintgetDataType();","finalintgetType(){returntype;}","StringgetTableName(){","returnnull;","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importjava.math.*;","importjava.io.ByteArrayInputStream;","importjava.io.InputStream;","importjava.io.Reader;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["{RSET_ON_INSERT_ROW,\"IlcursoreÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{ROWSOURCE_READONLY,\"IlRowsourceÃ¨disolalettura.\"},","{STMT_IS_CLOSED,\"LoStatementÃ¨instatochiuso.\"},","{SUBQUERY_COL_COUNT,\"Ilconteggiodellecolonnenellasubquerydeveessere1enon{0}.\"},","{JOIN_DELETE,\"DeleteRownonsupportatonellejoin.\"},","{JOIN_INSERT,\"InsertRownonsupportatonellejoin.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["return((DateTime)obj).getTimeMillis();","default:returnDouble.parseDouble(obj.toString());","longgetMoney()throwsException{","returngetMoney(getObject(),dataType);","staticlonggetMoney(Objectobj,intdataType)throwsException{","if(obj==null)return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["intgetUsedSize(){","returnsizeUsed;","@Override","longgetNextPagePos(){","if(updatePointer!=null)returnupdatePointer.getNextPagePos();","if(nextPageOffset\<=0){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintSERIALIZABLE=247;","staticfinalintCONSTRAINT=250;","staticfinalintPRIMARY=251;","staticfinalintFOREIGN=252;","staticfinalintKEY=253;","staticfinalintUNIQUE=254;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanisNull()throwsException{","returngetResult().isNull();","finalbooleangetBoolean()throwsException{","returngetResult().getBoolean();","finalintgetInt()throwsException{","returngetResult().getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["publicDategetDate(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){","returngetDate(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.RIGHT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRight();","break;","caseSQLTokenizer.RTRIM:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnUtils.string2boolean(getString().trim());","finalintgetInt()throwsException{","if(isNull())return0;","returnInteger.parseInt(getString().trim());","finallonggetLong()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","return(int)(param2.getLong()-param1.getLong());","caseSQLTokenizer.SQL_TSI_SECOND:","return(int)(param2.getLong()/1000-param1.getLong()/1000);","caseSQLTokenizer.SQL_TSI_MINUTE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["returngetFunctions(SQLTokenizer.IFNULL,SQLTokenizer.IIF);","publicStringgetTimeDateFunctions(){","returngetFunctions(SQLTokenizer.CURDATE,SQLTokenizer.YEAR);","publicStringgetSearchStringEscape(){","return\"\\\\\";","publicStringgetExtraNameCharacters(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["buf.append(\'\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case106://ddmonyyyy","formatNumber(details.day,2,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","offset+=16;","break;","default:thrownewError(String.valueOf(dataTypes[i]));","@Override","voiddeleteRow(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intvalue;","try{","value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setPrecision(value);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","if(index.isUnique()){","Stringscolumns=index.getColumns();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["default:","throwSmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID,fileName);","if(version\>TABLE_VIEW_VERSION)","throwSmallSQLException.create(Language.FILE_TOONEW,newObject[]{newInteger(version),fileName});","if(version\<TABLE_VIEW_OLD_VERSION)","throwSmallSQLException.create(Language.FILE_TOOOLD,newObject[]{newInteger(version),fileName});"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["day=1;","idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);","if(idx2\>0){","hour=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.STRING:","returnnewExpressionValue(token.getName(null),SQLTokenizer.VARCHAR);","caseSQLTokenizer.IDENTIFIER:","Stringname=getIdentifier(token);","ExpressionNameexpr=newExpressionName(name);","SQLTokentoken2=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalIndexNodeaddNode(chardigit)throwsSQLException{","if(remainderKey!=null)moveRemainderValue();","intpos=findNodePos(digit);","if(pos==-1){","IndexNodenode=createIndexNode(unique,digit);","saveNode(node);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.UPDATE:","returnupdate();","caseSQLTokenizer.CREATE:","returncreate();","caseSQLTokenizer.DROP:","returndrop();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnurl.startsWith(URL_PREFIX);","publicDriverPropertyInfo[]getPropertyInfo(Stringurl,Propertiesinfo)","throwsSQLException{","Propertiesprops=parse(url,info);","DriverPropertyInfo[]driverInfos=newDriverPropertyInfo[1];","driverInfos[0]=newDriverPropertyInfo(\"dbpath\",props.getProperty(\"dbpath\"));"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["StringkeyValue=tok.nextToken().trim();","if(keyValue.length()\>0){","idx1=keyValue.indexOf(\'=\');","if(idx1\>0){","Stringkey=keyValue.substring(0,idx1).toLowerCase().trim();","Stringvalue=keyValue.substring(idx1+1).trim();"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["SQLTokenizer.NCHAR,","SQLTokenizer.VARCHAR,","SQLTokenizer.CHAR,","SQLTokenizer.LONGVARCHAR,","SQLTokenizer.CLOB,","SQLTokenizer.VARBINARY,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicintgetMajorVersion(){","return0;","publicintgetMinorVersion(){","return21;","publicbooleanjdbcCompliant(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["staticfinalintREFERENCES=257;","staticfinalintUNION=260;","staticfinalintALL=261;","staticfinalintDISTINCT=262;","staticfinalintCASE=263;","staticfinalintWHEN=264;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnfalse;","voidafterLast()throwsException{","if(rowIdx+1\<rowList.size()){","rowIdx=rowList.size()-1;","rowSource.setRowPosition(rowList.get(rowIdx));","while(next()){/*scrollaftertheend*/}"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["@Override","voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_TABLE);","buffer.putInt(TABLE_VIEW_VERSION);","buffer.position(0);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicConnectionconnect(Stringurl,Propertiesinfo)throwsSQLException{","if(!acceptsURL(url)){","returnnull;","returnnewSSConnection(parse(url,info));","privatePropertiesparse(Stringurl,Propertiesinfo)throwsSQLException{","Propertiesprops=(Properties)info.clone();"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["finalclassExpressionFunctionDayOfWeekextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.DAYOFWEEK;","finalintgetInt()throwsException{","if(param1.isNull())return0;","returnDateTime.dayOfWeek(param1.getLong())+1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfWeek.java|"],
"["longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","buf.append(Long.toString(temp));","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).toString();","if(scale\>0){","while(buf.length()\<=scale)buf.insert(0,\'0\');"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalvoidaddColumn(Columncolumn){","columns.add(column);","finalbooleanisScrollable(){","returntrue;","finalvoidbeforeFirst(){","rowIdx=-1;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["ExpressionsrightEx;","privateIndexindex;","privateLongTreeListrowList;","privatefinalLongTreeListEnumlongListEnum=newLongTreeListEnum();","JoinScrollIndex(intjoinType,RowSourceleft,RowSourceright,ExpressionsleftEx,ExpressionsrightEx,intcompare)","throwsException{"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["publicclassStoreNoCurrentRowextendsStore{","privateSQLExceptionnoCurrentRow(){","returnSmallSQLException.create(Language.ROW_NOCURRENT);","booleanisNull(intoffset)throwsSQLException{","thrownoCurrentRow();","booleangetBoolean(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["protectedIndexNode(booleanunique,chardigit){","this.unique=unique;","this.digit=digit;","protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewIndexNode(unique,digit);","finalchargetDigit(){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["throwSmallSQLException.create(Language.CUSTOM_MESSAGE,\"Missingequalinproperty:\"+keyValue);","returnprops;","publicbooleanacceptsURL(Stringurl){","returnurl.startsWith(URL_PREFIX);","publicDriverPropertyInfo[]getPropertyInfo(Stringurl,Propertiesinfo)","throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["publicBigDecimalgetBigDecimal(StringcolumnName,intscale)throwsSQLException{","returngetBigDecimal(findColumn(columnName),scale);","publicbyte[]getBytes(StringcolumnName)throwsSQLException{","returngetBytes(findColumn(columnName));","publicDategetDate(StringcolumnName)throwsSQLException{","returngetDate(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["break;","caseSQLTokenizer.FN://functionescapesequence","nextToken(MISSING_PARENTHESIS_L);","expr=function(cmd,para,true);","break;","caseSQLTokenizer.CALL://callescapesequence"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BLOB:","returnUtils.bytes2float(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:","returnreadTime();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateExpressionsexpressionTokenList(Commandcmd,intlistType)throwsSQLException{","Expressionslist=newExpressions();","while(true){","Expressionexpr=expression(cmd,0);","list.add(expr);","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}else{","if(type==Join.FULL_JOIN){","while(right.next()){","fullRightRowCounter++;","fullRowCount=fullRightRowCounter;","}else{"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["privatelonggetMoneyImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getMoney()+right.getMoney();","caseSUB:returnleft.getMoney()-right.getMoney();","caseMUL:returnleft.getMoney()*right.getMoney()/10000;","caseDIV:returnleft.getMoney()*10000/right.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["longrowPos=rowSource.getRowPosition();","booleanisNext=next();","rowSource.setRowPosition(rowPos);","return!isNext;","finalbooleanisAfterLast(){","returnrow\>0&&!isCurrentRow;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["abstractlonggetLong(intoffset,intdataType)throwsException;","abstractlonggetMoney(intoffset,intdataType)throwsException;","abstractMutableNumericgetNumeric(intoffset,intdataType)throwsException;","abstractObjectgetObject(intoffset,intdataType)throwsException;","abstractStringgetString(intoffset,intdataType)throwsException;","booleanisValidPage(){"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionOctetLenextendsExpressionFunctionReturnInt{","privatestaticfinalintBYTES_PER_CHAR=2;","finalintgetFunction(){","returnSQLTokenizer.OCTETLEN;","booleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|"],
"["buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case106://ddmonyyyy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["voidcreateNextValue(SSConnectioncon)throwsSQLException{","value++;","con.add(createStorePage());","voidsetNextValue(Expressionexpr)throwsException{","longnewValue=expr.getLong();","if(newValue\>value){"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIT:","switch(operation){","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","Stringstr1=ExpressionFunctionSoundex.getString(param1.getString());","Stringstr2=ExpressionFunctionSoundex.getString(param2.getString());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=0;i\<num.getInternalValue().length;i++){","writeInt(num.getInternalValue()[i]);","MutableNumericreadNumeric(){","int[]value=newint[readByte()];","intscale=readByte();","intsignum=readByte();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(getDouble());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(getMoney());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["System.arraycopy(store.page,valueOffset,this.page,this.offset,length);","this.offset+=length;","voidwriteExpression(Expressionexpr,Columncolumn)throwsException{","booleanisNull=expr.isNull();","if(isNull&&!column.isNullable()){","throwSmallSQLException.create(Language.VALUE_NULL_INVALID,column.getName());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTables(Stringcatalog,StringschemaPattern,StringtableNamePattern,String[]types)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};","Databasedatabase;","if(catalog==null){","database=con.getDatabase(true);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.con=con;","st=newSSStatement(con);","publicbooleanallProceduresAreCallable(){","returntrue;","publicbooleanallTablesAreSelectable(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["protectedObjectclone()throwsCloneNotSupportedException{","returnsuper.clone();","finalStringgetName(){","returnname;","finalvoidsetName(Stringname){","this.alias=this.name=name;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["finalbooleanrowDeleted(){","returnrowSource.rowDeleted();","voidnullRow(){","rowSource.nullRow();","rowIdx=-1;","voidnoRow(){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.FIRST:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.FIRST);","break;","caseSQLTokenizer.LAST:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnmove();","finalbooleanrelative(introws){","if(rows==0)return(currentRow!=null);","rowIdx=Math.min(Math.max(rowIdx+rows,-1),rowList.size());","returnmove();","finalintgetRow(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["returntrue;","publicbooleansupportsFullOuterJoins(){","returntrue;","publicbooleansupportsLimitedOuterJoins(){","returntrue;","publicStringgetSchemaTerm(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean();","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["longList.getPrevious(longListEnum);","if(rowOffset\<0){","longList=null;","}else{","returnrowOffset;","while(true){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["staticfinalintNCHAR=352;","staticfinalintVARCHAR=353;","staticfinalintNVARCHAR=355;","staticfinalintSYSNAME=357;","staticfinalintLONGVARCHAR=359;","staticfinalintLONGNVARCHAR=360;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicvoidsetCatalog(Stringcatalog)throwsSQLException{","testClosedConnection();","database=Database.getDatabase(catalog,this,false);","publicStringgetCatalog(){","if(database==null)","return\"\";"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MIN);","break;","caseSQLTokenizer.FIRST:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.FIRST);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatedoublegetDoubleImpl()throwsjava.lang.Exception{","if(operation==NEGATIVE)","returngetDoubleImpl(0,left.getDouble());","returngetDoubleImpl(left.getDouble(),right.getDouble());","privatedoublegetDoubleImpl(doublelVal,doublerVal)throwsjava.lang.Exception{","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Databasedatabase=catalog==null?","con.getDatabase(false):","Database.getDatabase(catalog,con,false);","switch(tableCommandType){","caseSQLTokenizer.CREATE:","database.createTable(con,name,columns,indexes,foreignKeys);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["Database.dropView(con,catalog,name);","break;","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","thrownewjava.lang.UnsupportedOperationException();","default:"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["String[]colNames={\"TABLE_CAT\"};","Object[][]data=Database.getCatalogs(con.getDatabase(true));","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTableTypes()throwsSQLException{","String[]colNames={\"TABLE_TYPE\"};","Object[][]data={{\"SYSTEMTABLE\"},{\"TABLE\"},{\"VIEW\"}};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLCase();","break;","caseSQLTokenizer.LEFT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionLeft();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","TableStorePagelock;","TableStorePageprev;","switch(lockType){","caseLOCK_INSERT:","for(inti=0;i\<locksInsert.size();i++){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintNOT=503;","staticfinalintNULL=504;","staticfinalintTRUE=505;","staticfinalintFALSE=506;","staticfinalintBETWEEN=507;","staticfinalintLIKE=508;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else{","col.setPrecision(18);//defaultPrecisionfordecimalandnumeric","previousToken();","break;","col.setDataType(dataType);","returncol;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["synchronized(getMonitor()){","for(inti=commitPages.size()-1;i\>=savepoint;i--){","TransactionSteppage=(TransactionStep)commitPages.remove(i);","page.rollback();","page.freeLock();","publicvoidrollback()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["}else{","intpos=findNodeInsertPos(node.digit,0,length);","System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos,temp,pos+1,length-pos);","temp[pos]=node;","nodes=temp;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.min(((MutableDouble)value).value,expr.getDouble());","break;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnull;","char[]buffer=newchar[size];","for(inti=0;i\<size;i++){","buffer[i]=\'\';","returnnewString(buffer);","finalintgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnreadString();","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","parthesisCount++;","continueSwitch;","default:","thrownewError();","privateCommandupdate()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicstaticfinalStringVIEW_INSERT=\"SS-0100\";","publicstaticfinalStringVIEWDROP_NOT_VIEW=\"SS-0101\";","publicstaticfinalStringVIEW_CANTDROP=\"SS-0102\";","publicstaticfinalStringRSET_NOT_PRODUCED=\"SS-0130\";","publicstaticfinalStringRSET_READONLY=\"SS-0131\";","publicstaticfinalStringRSET_FWDONLY=\"SS-0132\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["importsmallsql.database.language.Language;","abstractclassCommand{","inttype;","Stringcatalog;","Stringname;","SSResultSetrs;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["if(!directory.isDirectory()){","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefile=newFile(directory,Utils.MASTER_FILENAME);","if(!file.exists())","throwSmallSQLException.create(Language.DB_NOT_DIRECTORY,name);","master=Utils.openRaFile(file,readonly);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["factor*=10;","if(factor==1000000000){","mul(factor);","factor=1;","mul(factor);","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["try{","raFile.close();","}catch(Exceptione2){","DriverManager.println(e2.toString());","throwSmallSQLException.createFromException(e);","voiddrop(Databasedatabase)throwsException{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.BLOB:","returnUtils.bytes2long(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:","returnreadTime();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["chars[28]=digits[(daten[offset+12]\>\>4)&0x0F];","chars[29]=digits[(daten[offset+12])&0x0F];","chars[30]=digits[(daten[offset+13]\>\>4)&0x0F];","chars[31]=digits[(daten[offset+13])&0x0F];","chars[32]=digits[(daten[offset+14]\>\>4)&0x0F];","chars[33]=digits[(daten[offset+14])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["intcount=param2.getInt();","StringBufferbuffer=newStringBuffer();","for(inti=0;i\<count;i++){","buffer.append(str);","returnbuffer.toString();","intgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["publicDategetDate(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["finalbooleanisFirst(){","returnrowIdx==0&&currentRow!=null;","finalbooleanfirst(){","rowIdx=0;","returnmove();","finalbooleanprevious(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;","continue;","updateValues[i]=null;","result.insertRow(updateValues);","}catch(Throwablee){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["privateintsizePhysical;","privateintnextPageOffset;","privatelongfilePosUpdated;","privateinttype;","privateStoreImplupdatePointer;","privateStoreImpl(Tabletable,StorePagestorePage,inttype,longfilePos){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnTypes.LONGVARBINARY;","caseSQLTokenizer.BLOB:","returnTypes.BLOB;","caseSQLTokenizer.TINYINT:","returnTypes.TINYINT;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voiddrop(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.CREATE,-1);","if(storePage==null){","throwSmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED,name);","con.rollbackFile(raFile);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnnewExpressionValue(Boolean.TRUE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.FALSE:","returnnewExpressionValue(Boolean.FALSE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.ESCAPE_L:{","token=nextToken(COMMANDS_ESCAPE);","SQLTokenpara=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longgetLong()throwsException{","if(param1.getBoolean())","returnparam2.getLong();","returnparam3.getLong();","floatgetFloat()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["staticfinalintRAND=1017;","staticfinalintROUND=1018;","staticfinalintSIGN=1019;","staticfinalintSIN=1020;","staticfinalintSQRT=1021;","staticfinalintTAN=1022;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateForeignKey[]data;","ForeignKeys(){","data=newForeignKey[16];","finalintsize(){","returnsize;","finalForeignKeyget(intidx){"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["if(isInsertRow){","throwSmallSQLException.create(Language.RSET_ON_INSERT_ROW);","publicvoidupdateRow()throwsSQLException{","try{","if(values==null){","return;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnfalse;","}else{","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","if(row\<=rowList.size()){","rowIdx=row-1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000.0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().doubleValue();","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.TIME:","returnTypes.TIME;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnTypes.TIMESTAMP;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull()||param4.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intstart=Math.min(Math.max(0,param2.getInt()-1),bytes.length);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["View(Databasedatabase,SSConnectioncon,Stringname,Stringsql)throwsException{","super(name,newColumns());","this.sql=sql;","this.commandSelect=null;","write(database,con);","View(SSConnectioncon,CommandSelectcommandSelect)throwsException{"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["{TABLE_CANT_DROP_LOCKED,\"Table\'\'{0}\'\'can\'\'tdropbecauseislocked.\"},","{TABLE_CORRUPT_PAGE,\"Corrupttablepageatposition:{0}.\"},","{TABLE_MODIFIED,\"Table\'\'{0}\'\'wasmodified.\"},","{TABLE_DEADLOCK,\"Deadlock,cannotcreatealockontable\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TableorView\'\'{0}\'\'doesnotexist.\"},","{TABLE_FILE_INVALID,\"File\'\'{0}\'\'doesnotincludeavalidSmallSQLTable.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["thrownoCurrentRow();","voidscanObjectOffsets(int[]offsets,int[]dataTypes){","intgetUsedSize(){","return0;","longgetNextPagePos(){","return-1;"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["updatePointer.status=UPDATE_POINTER;","updatePointer.type=SQLTokenizer.UPDATE;","updatePointer.createWriteLock();","if(updatePointer.sharedPageData){","updatePointer.page=newbyte[PAGE_CONTROL_SIZE];","updatePointer.writeFinsh(con);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicvoidupdateLong(StringcolumnName,longx)throwsSQLException{","updateLong(findColumn(columnName),x);","publicvoidupdateFloat(StringcolumnName,floatx)throwsSQLException{","updateFloat(findColumn(columnName),x);","publicvoidupdateDouble(StringcolumnName,doublex)throwsSQLException{","updateDouble(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnreadLongString();","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject();","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.initCause(throwable);","init();","privatevoidinit(){","this.isInit=true;","PrintWriterpw=DriverManager.getLogWriter();","if(pw!=null)this.printStackTrace(pw);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["staticfinalintMONTHNAME=1212;","staticfinalintNOW=1213;","staticfinalintQUARTER=1214;","staticfinalintSECOND=1215;","staticfinalintTIMESTAMPADD=1216;","staticfinalintTIMESTAMPDIFF=1217;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]+1)==0;","if(uebertrag){","resizeValue(1);","privatevoidresizeValue(inthighBits){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\',\');","buf.append(\'\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["throwex;","}catch(Throwableex){","throwSmallSQLException.createFromException(Language.DATETIME_INVALID,datetime,ex);","longgetTimeMillis(){","returntime;","intgetDataType(){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{SECS_TOOLARGE,\"DieSekundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"DieMillisekundensindzugroÃŸimTIMESTAMPWert\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isteinungÃ¼ltigesDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'vonDatentyp\'\'{1}\'\'fÃ¼rdieOperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rOperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return(int)((DateTime)obj).getTimeMillis();","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.SUM:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.SUM);","break;","caseSQLTokenizer.MAX:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","classSQLToken{","intvalue;","intoffset;//thestartoffsetthetokenintheSQLstring","intlength;//thelengthofthetoken","Stringname;"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["abstractclassExpressionFunctionReturnStringextendsExpressionFunction{","booleanisNull()throwsException{","returnparam1.isNull();","finalbooleangetBoolean()throwsException{","if(isNull())returnfalse;","returnUtils.string2boolean(getString().trim());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|"],
"["returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicInputStreamgetAsciiStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"getUnicodeStream\");","publicInputStreamgetBinaryStream(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["for(inti=0;i\<keyIndexes.length;i++){","if(c+1==keyIndexes[i]){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;","store.writeExpression(valueExpress,column);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["chars[35]=digits[(daten[offset+15])&0x0F];","returnnewString(chars);","staticbooleanstring2boolean(Stringval){","try{","returnDouble.parseDouble(val)!=0;","}catch(NumberFormatExceptione){/*ignoreitifitnotanumber*/}"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticfinalintAND=501;","staticfinalintIS=502;","staticfinalintNOT=503;","staticfinalintNULL=504;","staticfinalintTRUE=505;","staticfinalintFALSE=506;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intprecision=0;","for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getPrecision());","returnprecision;","finalintgetScale(){","intprecision=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["publicSQLWarninggetWarnings(){","returnnull;","publicvoidclearWarnings(){","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnleftExpr;","if(isNot){","isNot=false;","leftExpr=newExpressionArithmetic(leftExpr,ExpressionArithmetic.NOT);","previousToken();","returnleftExpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","doubledValue=((Double)para1).doubleValue();","return(dValue\<0)?newDouble(-dValue):para1;","caseSQLTokenizer.REAL:","doublefValue=((Float)para1).floatValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["token=nextToken();","if(token==null)break;","switch(token.value){","caseSQLTokenizer.WHERE:","where(cmd);","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleanisSearchable(intcolumn)throwsSQLException{","inttype=getColumnExpression(column).getType();","returntype==Expression.NAME||type==Expression.FUNCTION;","publicbooleanisCurrency(intcolumn)throwsSQLException{","switch(getColumnExpression(column).getDataType()){","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["output.writeBytes(data,0,size);","finalvoidadd(longvalue)throwsSQLException{","offset=0;","if(size==0){","writeShort((int)(value\>\>48));","writePointer(offset+pointerSize+2);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","writeLongBinary(expr.getBytes());","break;","caseSQLTokenizer.TIMESTAMP:","writeTimestamp(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{COL_READONLY,\"DieSpalte{0}istschreibgeschÃ¼tzt.\"},","{COL_INVALID_NAME,\"UngÃ¼ltigerSpaltenname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"SpaltenindexauÃŸerhalbdesGÃ¼ltigkeitsbereiches:{0}.\"},","{COL_AMBIGUOUS,\"DieSpalte\'\'{0}\'\'istmehrdeutig.\"},","{GROUP_AGGR_INVALID,\"AggregatfunktionsindnichterlaubtimGROUPBYKlausel:({0}).\"},","{GROUP_AGGR_NOTPART,\"DerAusdruck\'\'{0}\'\'istnichtTeileinerAggregatfunktionoderGROUPBYKlausel.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ExpressionsqlCol=columnExpressions.get(c);","StringsqlColName=sqlCol.getName();","intidx=table.findColumnIdx(sqlColName);","if(idx\>=0){","matrix[idx]=c;","}else{"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseSQLTokenizer.UNIQUE:","caseSQLTokenizer.FOREIGN:","IndexDescriptionindex=index(cmdCreate,token.value,tableName,constraintName,null);","if(token.value==SQLTokenizer.FOREIGN){","nextToken(MISSING_REFERENCES);","Stringpk=nextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidbeforeFirst()throwsException{","commandSelect.beforeFirst();","booleanisBeforeFirst()throwsSQLException{","returncommandSelect.isBeforeFirst();","booleanisFirst()throwsSQLException{","returncommandSelect.isFirst();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["Stringkeyword=SQLTokenizer.getKeyWord(dataType);","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX,keyword);","break;","caseMIN:","if(value==null){","if(expr.isNull())"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalintTHEN=265;","staticfinalintELSE=266;","staticfinalintEND=267;","staticfinalintSWITCH=268;","staticfinalStringDESC_STR=\"DESC\";","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.COS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCos();","break;","caseSQLTokenizer.COT:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:{","finalStringleftStr=left.getString();","finalStringrightStr=right.getString();","intcomp=String.CASE_INSENSITIVE_ORDER.compare(leftStr,rightStr);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","returnnewDateTime(param1.getLong(),type).toString(param2.getInt());","default:","returnparam1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.LEFT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionLeft();","break;","caseSQLTokenizer.LENGTH:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleFloatFactor[scale]*signum;","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).floatValue();","publicdoubledoubleValue(){","if(value.length==0||signum==0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{COL_VAL_UNMATCH,\"ColumnsandValuescountisnotidentical.\"},","{COL_INVALID_SIZE,\"Invalidcolumnsize{0}forcolumn\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Thecolumnprefix\'\'{0}\'\'doesnotmatchwithatablenameoraliasnameusedinthisquery.\"},","{COL_READONLY,\"Column{0}isreadonly.\"},","{COL_INVALID_NAME,\"Invalidcolumnname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Columnindexoutofrange:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["table=newTable;","threshold=(int)(newCapacity*0.75f);","finalprivatevoidtransfer(Entry[]newTable){","Entry[]src=table;","intnewCapacity=newTable.length;","for(intj=0;j\<src.length;j++){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returnupdate();","caseSQLTokenizer.CREATE:","returncreate();","caseSQLTokenizer.DROP:","returndrop();","caseSQLTokenizer.ALTER:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalStringgetKeyWord(intkey){","return(String)keywords.get(Utils.getInteger(key));","staticfinalintgetSQLDataType(inttype){","switch(type){","caseSQLTokenizer.BIT:","returnTypes.BIT;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["System.arraycopy(page,offset,daten,0,length);","offset+=length;","returndaten;","voidwriteBinary(byte[]daten,intlengthColumn,booleanvarBinary)throwsSQLException{","intlength=daten.length;","if(lengthColumn\<length){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();","case130://Kuwaitiddmonyyyyhh:mi:ss:mmmAM"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{STMT_IS_CLOSED,\"Statementisalreadyclosed.\"},","{SUBQUERY_COL_COUNT,\"Countofcolumnsinsubquerymustbe1andnot{0}.\"},","{JOIN_DELETE,\"ThemethoddeleteRownotsupportedonjoins.\"},","{JOIN_INSERT,\"ThemethodinsertRownotsupportedonjoins.\"},","{DELETE_WO_FROM,\"ThemethoddeleteRowneedaFROMexpression.\"},","{INSERT_WO_FROM,\"ThemethodinsertRowneedaFROMexpression.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","classCommandSelectextendsCommand{","privateDataSourcestables;//ListofTableResult(TablesandViews)","privateExpressionwhere;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseTypes.LONGVARBINARY:","return\"[B\";","caseTypes.BLOB:","return\"java.sql.Blob\";","caseTypes.BIGINT:","return\"java.lang.Long\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{ROWS_WRONG_MAX,\"FehlerhafterWertfÃ¼rMaximaleDatensatzanzahl:{0}.\"},","{ROW_LOCKED,\"DerDatensatzistgelockedvoneineranderenVerbindung.\"},","{ROW_DELETED,\"DerDatensatzistbereitsgelÃ¶scht.\"},","{SAVEPT_INVALID_TRANS,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdieaktuelleTransaction.\"},","{SAVEPT_INVALID_DRIVER,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdiesenTreiber{0}.\"},","{ALIAS_UNSUPPORTED,\"EinAliasistnichterlaubtfÃ¼rdiesenTypvonRowsource.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["abstractbyte[]getBytes(intoffset,intdataType)throwsException;","abstractdoublegetDouble(intoffset,intdataType)throwsException;","abstractfloatgetFloat(intoffset,intdataType)throwsException;","abstractintgetInt(intoffset,intdataType)throwsException;","abstractlonggetLong(intoffset,intdataType)throwsException;","abstractlonggetMoney(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["{ROW_DELETED,\"RigagiÃ\u00a0cancellata.\"},","{SAVEPT_INVALID_TRANS,\"SAVEPOINTnonvalidoperquestatransazione.\"},","{SAVEPT_INVALID_DRIVER,\"SAVEPOINTnonvalidoperquestodriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnonsupportatoperquestotipodisorgenterighe.\"},","{ISOLATION_UNKNOWN,\"LivellodiIsolamentotransazionesconosciuto:{0}.\"},","{FLAGVALUE_INVALID,\"Flagnonvalidanelmetodo\'\'getMoreResults\'\':{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["intValue^0x80000000;","finalstaticprivatelongdoubleToBinarySortOrder(doublevalue){","longintValue=Double.doubleToLongBits(value);","return(intValue\<0)?","~intValue:","intValue^0x8000000000000000L;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["importjava.util.Properties;","importjava.util.StringTokenizer;","importsmallsql.database.language.Language;","publicclassSSDriverimplementsDriver{","staticfinalStringURL_PREFIX=\"jdbc:smallsql\";","staticSSDriverdrv;"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["booleanok=newFile(Utils.createTableViewFileName(database,name)).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","voiddrop(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.CREATE,-1);","if(storePage==null){","throwSmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED,name);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["afterLast();","returnprevious();","booleanisLast()throwsException{","if(rowIdx+1!=rowList.size()){","returnfalse;","booleanisNext=next();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returnpage.addRoot((char)0);","finalprivateIndexNodefind(IndexNodenode,longkey,intdigitCount,ArrayListnodeList){","for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));","node=node.getChildNode(digit);","if(node==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnnull;","if(name.startsWith(\"file:\")){","name=name.substring(5);","Filefile;","try{","file=newFile(name).getCanonicalFile();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicMoney(floatvalue){","this.value=(long)(value*10000);","publicstaticMoneycreateFromUnscaledValue(longvalue){","Moneymoney=newMoney();","money.value=value;","returnmoney;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["Stringscolumns=newStrings();","expressionDefList(cmdCreate,expressions,columns);","IndexDescriptionpkIndex=newIndexDescription(null,pk,SQLTokenizer.UNIQUE,expressions,columns);","ForeignKeyforeignKey=newForeignKey(pk,pkIndex,tableName,index);","cmdCreate.addForeingnKey(foreignKey);","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.year,4,buf);","returnbuf.toString();","case2://ANSIyy.mm.dd","formatNumber(details.year%100,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["compileJoin((Join)singleJoin.left);","if(singleJoin.rightinstanceofJoin){","compileJoin((Join)singleJoin.right);","privatevoidcompileLinkExpression(Expressionexpr)throwsException{","if(expr.getType()==Expression.NAME)","compileLinkExpressionName((ExpressionName)expr);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["@Override","finalbooleanrowInserted(){","returnfilePos\>=firstOwnInsert;","@Override","finalbooleanrowDeleted(){","if(storeinstanceofStoreNull&&store!=Store.NULL){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSin();","break;","caseSQLTokenizer.SIGN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSign();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","returngetBytes();","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["t/=60;","hour=t%24;","year=1970-(int)(t/365.2425);","booleanisLeap;","do{","isLeap=false;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(params.length\>2)param3=params[2];","if(params.length\>3)param4=params[3];","finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){","case0:","param1=param;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["publicstaticfinalStringJOIN_DELETE=\"SS-0161\";","publicstaticfinalStringJOIN_INSERT=\"SS-0162\";","publicstaticfinalStringDELETE_WO_FROM=\"SS-0163\";","publicstaticfinalStringINSERT_WO_FROM=\"SS-0164\";","publicstaticfinalStringTABLE_CANT_RENAME=\"SS-0190\";","publicstaticfinalStringTABLE_CANT_DROP=\"SS-0191\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalclassExpressionFunctionLengthextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.LENGTH;","finalintgetInt()throwsException{","Stringstr=param1.getString();","if(str==null)return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLength.java|"],
"["returnInteger.parseInt(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getInt(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncomp;","staticCommandSelectcreateMemoryCommandSelect(SSConnectioncon,String[]colNames,Object[][]data)throwsSQLException{","MemoryResultsource=newMemoryResult(data,colNames.length);","CommandSelectcmd=newCommandSelect(con.log);","for(inti=0;i\<colNames.length;i++){","ExpressionNameexpr=newExpressionName(colNames[i]);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["int[]value=newint[readByte()];","intscale=readByte();","intsignum=readByte();","for(inti=0;i\<value.length;i++){","value[i]=readInt();","returnnewMutableNumeric(signum,value,scale);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}catch(NumberFormatExceptione){","return(long)Double.parseDouble(str);","floatgetFloat()throwsException{","returngetFloat(getObject(),dataType);","staticfloatgetFloat(Objectobj,intdataType)throwsException{","if(obj==null)return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["isCurrentRow=rowSource.first();","while(isCurrentRow&&!isValidRow()){","isCurrentRow=rowSource.next();","row=1;","returnisCurrentRow;","finalbooleanprevious()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["prevLock=lock;","lock=lock.nextLock;","lock=newTableStorePage(con,this,LOCK_WRITE,readlock.fileOffset);","if(prevLock!=null){","prevLock.nextLock=lock;","}else{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(token.value==SQLTokenizer.FOREIGN){","nextToken(MISSING_REFERENCES);","Stringpk=nextIdentifier();","Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();","expressionDefList(cmdCreate,expressions,columns);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case\'F\':","case\'P\':","case\'V\':","c=\'1\';","break;","case\'C\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["if(shift\>=3)","break;","offset=offset1;","offset1=offset2;","offset2=offset3;","firstNode=firstNode1;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["privatebooleancaseSensitive;","privatebooleannullable=true;","privateintscale;","privateintprecision;","privateintdataType;","privateIdentitycounter;//counterforidentityvalues"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["importjava.util.ArrayList;","importjava.util.HashMap;","importjava.util.Iterator;","importjava.util.List;","importsmallsql.database.language.Language;","classTableextendsTableView{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType);","voidsetParamValue(intidx,Objectvalue,intdataType,intlength)throwsSQLException{","getParam(idx).set(value,dataType,length);","if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType+\";length=\"+length);","finalvoidexecute(SSConnectioncon,SSStatementst)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.year,4,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["switch(getDataType()){","caseSQLTokenizer.INT:","returnnewMutableNumeric(getInt());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLong());","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["previousToken();","Stringtok=newString(sql,token.offset+1,token.length-1);","if(isMinus)tok=\"-\"+tok;","returnnewExpressionValue(newMoney(Double.parseDouble(tok)),SQLTokenizer.MONEY);","Stringtok=newString(sql,token.offset,token.length);","if((chr1\>=\'0\'&&\'9\'\>=chr1)||chr1==\'.\'){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicvoidupdateByte(StringcolumnName,bytex)throwsSQLException{","updateByte(findColumn(columnName),x);","publicvoidupdateShort(StringcolumnName,shortx)throwsSQLException{","updateShort(findColumn(columnName),x);","publicvoidupdateInt(StringcolumnName,intx)throwsSQLException{","updateInt(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return\"java.sql.Clob\";","default:return\"java.lang.Object\";","finalintgetColumnIdx(intcolumn)throwsSQLException{","if(column\<1||column\>columns.size())","throwSmallSQLException.create(Language.COL_IDX_OUT_RANGE,String.valueOf(column));","returncolumn-1;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnsqlState;","publicString[][]getEntries(){","returnMESSAGES;","privatefinalString[][]MESSAGES={","{CUSTOM_MESSAGE,\"{0}\"},","{UNSUPPORTED_OPERATION,\"UnsupportedOperation{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnreadLong();","caseSQLTokenizer.REAL:","returnreadFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnreadDouble();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.TILDE:returnBIT_NOT;","default:return0;","staticintgetDataType(Expressionleft,Expressionright){","inttypeLeft=left.getDataType();","inttypeRight=right.getDataType();","returngetDataType(typeLeft,typeRight);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.EQUALS:","caseSQLTokenizer.LESSER:","caseSQLTokenizer.LESSER_EQU:","caseSQLTokenizer.GREATER:","caseSQLTokenizer.GREATER_EQU:","caseSQLTokenizer.UNEQUALS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSPreparedStatement(this,sql,resultSetType,resultSetConcurrency);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicMapgetTypeMap(){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["formatNumber(details.year%100,2,buf);","returnbuf.toString();","case101://USAmm/dd/yyyy","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseUNEQUALS:returnleft.getInt()!=right.getInt();","caseBETWEEN:","int_left=left.getInt();","return_left\>=right.getInt()&&right2.getInt()\>=_left;","default:","returngetInt()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Stringscolumns=newStrings();","expressionDefList(cmd,expressions,columns);","IndexDescriptionindexDesc=newIndexDescription(","indexName,","tableName,","unique?SQLTokenizer.UNIQUE:SQLTokenizer.INDEX,"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["elseResult=params[i];","voidsetParamAt(Expressionparam,intidx){","super.setParamAt(param,idx);","intp=idx/2;","if(p\>=cases.size()){","elseResult=param;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["break;","caseSQLTokenizer.MINUTE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMinute();","break;","caseSQLTokenizer.MONTH:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["synchronized(tableViews){","Tabletable=(Table)tableViews.get(tableName);","if(table!=null){","tableViews.remove(tableName);","table.drop(con);","}else{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["dataType=elseResult.getDataType();","for(inti=0;i\<results.size();i++){","dataType=ExpressionArithmetic.getDataType(dataType,results.get(i).getDataType());","returndataType;","finalintgetPrecision(){","intprecision=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["minute=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\'.\',idx1);","if(idx2\<0)idx2=datetime.length();","second=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.CHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),true),isLastValues);","break;","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["tableViews.remove(oldTable.name);","tableViews.remove(newTable.name);","oldTable.close();","newTable.close();","FileoldFile=oldTable.getFile(this);","FilenewFile=newTable.getFile(this);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(token!=null){","switch(token.value){","caseSQLTokenizer.NULL:","returnnewExpressionValue(null,SQLTokenizer.NULL);","caseSQLTokenizer.STRING:","returnnewExpressionValue(token.getName(null),SQLTokenizer.VARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{RSET_NOT_INSERT_ROW,\"IlcursorenonÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{RSET_ON_INSERT_ROW,\"IlcursoreÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{ROWSOURCE_READONLY,\"IlRowsourceÃ¨disolalettura.\"},","{STMT_IS_CLOSED,\"LoStatementÃ¨instatochiuso.\"},","{SUBQUERY_COL_COUNT,\"Ilconteggiodellecolonnenellasubquerydeveessere1enon{0}.\"},","{JOIN_DELETE,\"DeleteRownonsupportatonellejoin.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["staticfinalintFUNCTION=3;","staticfinalintGROUP_BY=11;","staticfinalintCOUNT=12;","staticfinalintSUM=13;","staticfinalintFIRST=14;","staticfinalintLAST=15;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getString().trim());","finalObjectgetObject()throwsException{","if(SSResultSetMetaData.isBinaryDataType(param1.getDataType()))","returngetBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["if(idx\>=0){","ExpressionorigExpression=expr;","ExpressionNameexprName;","if(exprinstanceofExpressionName){","exprName=(ExpressionName)expr;","}else{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["constraintName=null;","switch(token.value){","caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:","caseSQLTokenizer.FOREIGN:","IndexDescriptionindex=index(cmdCreate,token.value,tableName,constraintName,null);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);","TableViewResultresult=TableViewResult.getTableViewResult(from);","updateCount=0;","from.execute();","while(next()){"]": ["|project://smallsql/src/smallsql/database/CommandDelete.java|"],
"["for(inti=0;i\<pointerSize;i++){","value\<\<=8;","value+=(data[offset++]&0xFF);","returnvalue;","finalprivatevoidwritePointer(intvalue){","for(inti=pointerSize-1;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicintgetMaxStatements(){","return0;","publicintgetMaxTableNameLength(){","return255;","publicintgetMaxTablesInSelect(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returncaseSensitive;","voidsetNullable(booleannullable){","this.nullable=nullable;","booleanisNullable(){","returnnullable;","voidsetDataType(intdataType){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["switch(compare){","caseExpressionArithmetic.EQUALS:","returnnextEquals();","default:","thrownewError(\"Compareoperationnotsupported:\"+compare);","privatebooleannextEquals()throwsException{"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["this.inList=inList.toArray();","params=newExpression[this.inList.length+1];","params[0]=left;","System.arraycopy(this.inList,0,params,1,this.inList.length);","}else{","params=newExpression[]{left};"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["updatePointer.writeFinsh(con);","status=DELETED;","if(sharedPageData){","page=newbyte[PAGE_CONTROL_SIZE];","writeFinsh(con);","privateintoffset;//aktuelleread/writePositioninderPage"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","value=newMutableDouble(expr.getDouble());","break;","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalclassSSDatabaseMetaDataimplementsDatabaseMetaData{","finalprivateSSConnectioncon;","finalprivateSSStatementst;","SSDatabaseMetaData(SSConnectioncon)throwsSQLException{","this.con=con;","st=newSSStatement(con);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseEQUALS_NULL:","caseEQUALS:returnleft.getInt()==right.getInt();","caseGREATER:returnleft.getInt()\>right.getInt();","caseGRE_EQU:returnleft.getInt()\>=right.getInt();","caseLESSER:returnleft.getInt()\<right.getInt();","caseLES_EQU:returnleft.getInt()\<=right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicbooleanothersUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersDeletesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersInsertsAreVisible(inttype){","returnsupportsResultSetType(type);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["importjava.util.Arrays;","importsmallsql.database.language.Language;","publicclassExpressionFunctionConvertextendsExpressionFunction{","finalprivateColumndatatype;","publicExpressionFunctionConvert(Columndatatype,Expressionvalue,Expressionstyle){","super();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["finalprivatebooleanisValidRow()throwsException{","returnwhere==null||rowSource.rowInserted()||where.getBoolean();","finalbooleanisScrollable(){","returnrowSource.isScrollable();","finalbooleanisBeforeFirst(){","returnrow==0;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["column.setDataType(SQLTokenizer.NULL);","columns.add(column);","for(intr=0;r\<data.length;r++){","Object[]row=data[r];","ExpressionValue[]rowValues=newExpressionValue[row.length];","addRow(rowValues);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();","case130://Kuwaitiddmonyyyyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","writeBoolean(expr.getBoolean());","break;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TableResulttableResult=(TableResult)ds;","tableResult.lock=SQLTokenizer.UPDATE;","while(true){","synchronized(con.getMonitor()){","if(!next()){","return;"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["abstractbooleangetBoolean(intoffset,intdataType)throwsException;","abstractbyte[]getBytes(intoffset,intdataType)throwsException;","abstractdoublegetDouble(intoffset,intdataType)throwsException;","abstractfloatgetFloat(intoffset,intdataType)throwsException;","abstractintgetInt(intoffset,intdataType)throwsException;","abstractlonggetLong(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["caseSQLTokenizer.BIT:","returnreadBoolean()?\"1\":\"0\";","caseSQLTokenizer.BOOLEAN:","returnString.valueOf(readBoolean());","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returntokens;","staticprivatevoidaddKeyWord(Stringkeyword,intvalue){","keywords.put(Utils.getInteger(value),keyword);","char[]letters=keyword.toCharArray();","if(searchTree==null){","searchTree=newSearchNode();"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatestaticfinallongserialVersionUID=-750525164208565056L;","privateint[]value;","privateintscale;","privateintsignum;","MutableNumeric(byte[]complement){","setValue(complement);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseTypes.DATE:","return\"java.sql.Date\";","caseTypes.TIME:","return\"java.sql.Time\";","caseTypes.TIMESTAMP:","return\"java.sql.Timestamp\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{","returnnewSSCallableStatement(this,sql,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intautoGeneratedKeys)throwsSQLException{","SSPreparedStatementpr=newSSPreparedStatement(this,sql);","pr.setNeedGeneratedKeys(autoGeneratedKeys);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["scale=big.scale();","MutableNumeric(intsignum,int[]value,intscale){","this.signum=signum;","this.value=value;","this.scale=scale;","MutableNumeric(MutableNumericnumeric){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["daten[9]=hex2byte(chars,21);","daten[10]=hex2byte(chars,24);","daten[11]=hex2byte(chars,26);","daten[12]=hex2byte(chars,28);","daten[13]=hex2byte(chars,30);","daten[14]=hex2byte(chars,32);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["filePos=store.getNextPagePos();","@Override","finalbooleannext()throwsException{","if(filePos\<0)returnfalse;","setNextFilePos();","row++;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["while(true){","synchronized(con.getMonitor()){","if(!next()){","return;","updateRow(con,newRowSources);","updateCount++;"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["finalintgetPrecision(){","intprecision=0;","for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getPrecision());","returnprecision;","finalintgetScale(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["((page[offset++]&0xFF));","voidwriteLong(longvalue){","intnewSize=offset+8;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>56);","page[offset++]=(byte)(value\>\>48);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnrowPos\<=0;","finalbooleanisFirst(){","returnrowPos==1;","finalbooleanfirst(){","rowPos=1;","returntrue;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["publicstaticfinalStringSTXADD_OPER_MINUS=\"SS-0616\";","publicstaticfinalStringSTXADD_FUNC_UNKNOWN=\"SS-0617\";","publicstaticfinalStringSTXADD_PARAM_INVALID_COUNT=\"SS-0618\";","publicstaticfinalStringSTXADD_JOIN_INVALID=\"SS-0619\";","publicstaticfinalStringSTXADD_FROM_PAR_CLOSE=\"SS-0620\";","publicstaticfinalStringSTXADD_KEYS_REQUIRED=\"SS-0621\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["break;","this.time=time;","this.dataType=dataType;","staticlongcalcMillis(Detailsdetails){","returncalcMillis(details.year,details.month,details.day,details.hour,details.minute,details.second,details.millis);","staticlongcalcMillis(intyear,intmonth,finalintday,finalinthour,finalintminute,finalintsecond,finalintmillis){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnselCmd;","finalprivateCommandSelectselect()throwsSQLException{","CommandSelectselCmd=singleSelect();","SQLTokentoken=nextToken();","UnionAllunion=null;","while(token!=null&&token.value==SQLTokenizer.UNION){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetBytes(getObject(),dataType);","staticbyte[]getBytes(Objectobj,intdataType)throwsException{","if(obj==null)returnnull;","switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["TableViewResulttable=TableViewResult.createResult(tableView);","tables.add(table);","if(token!=null&&token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);","table.setAlias(token.getName(sql));","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.SMALLINT:","offset+=2;","break;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intidx;","finalObjectnodeValue;","finalintlevel;","IndexNodeScrollStatus(IndexNodenode,booleanasc,booleanscroll,intlevel){","this.nodes=node.getChildNodes();","nodeValue=node.getValue();"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["caseSQLTokenizer.DOUBLE:","returnnewDouble(param1.getDouble());","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["addKeyWord(\"CROSS\",CROSS);","addKeyWord(\"USE\",USE);","addKeyWord(\"TOP\",TOP);","addKeyWord(\"ADD\",ADD);","addKeyWord(\"LIMIT\",LIMIT);","addKeyWord(\"DATABASE\",DATABASE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["else","type=SQLTokenizer.TIMESTAMP;","returnnewDateTime(parse(date),type);","staticDateTimevalueOf(java.sql.Datedate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.DATE);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(!right.hasAlias()){","right.setAlias(token.getName(sql));","token=nextToken();","continue;","throwcreateSyntaxError(token,MISSING_ON);","privateRowSourcerowSource(Commandcmd,DataSourcestables,intparenthesis)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buffer.append(str3);","idx1=idx2+length;","idx2=str1.indexOf(str2,idx1);","if(idx1\>0){","buffer.append(str1.substring(idx1));","returnbuffer.toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["invalidParamCount=(paramCount!=4);","expr=newExpressionFunctionInsert();","break;","caseSQLTokenizer.LCASE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLCase();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnull;","publicintgetColumnType(intcolumn)throwsSQLException{","returnSQLTokenizer.getSQLDataType(getColumnExpression(column).getDataType());","publicStringgetColumnTypeName(intcolumn)throwsSQLException{","returnSQLTokenizer.getKeyWord(getColumnExpression(column).getDataType());","publicbooleanisReadOnly(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["default:","if(isKeyword(token)){","previousToken();","returnlist;","throwcreateSyntaxError(token,MISSING_TOKEN_LIST);","privatevoidexpressionDefList(Commandcmd,Expressionsexpressions,Stringscolumns)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(size\>=data.length){","resize(size\<\<1);","data[size++]=descr;","privatefinalvoidresize(intnewSize){","String[]dataNew=newString[newSize];","System.arraycopy(data,0,dataNew,0,size);"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["result[1]=(byte)(value\>\>16);","result[2]=(byte)(value\>\>8);","result[3]=(byte)(value);","returnresult;","staticStringbytes2hex(byte[]bytes){","StringBufferbuf=newStringBuffer(bytes.length\<\<1);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privatestaticfinalintLINE_COMMENT=1;","privatestaticfinalintMULTI_COMMENT=2;","publicstaticListparseSQL(char[]sql)throwsSQLException{","SearchNodenode=searchTree;","ArrayListtokens=newArrayList();","intvalue=0;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnString.valueOf(readDouble());","caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong()).toString();","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(readInt()).toString();","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(rowIdx--\<0)rowIdx=-1;","returnmove();","finalbooleannext(){","rowIdx++;","returnmove();","finalbooleanlast(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["buffer.append(longValue()).append(\'.\');","finallongv=Math.abs(value);","buffer.append((char)((v%10000)/1000+\'0\'));","buffer.append((char)((v%1000)/100+\'0\'));","buffer.append((char)((v%100)/10+\'0\'));","buffer.append((char)((v%10)+\'0\'));"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["privatebooleansharedPageData;","privateStorePagestorePage;","privatelongfilePos;//Positioninthefile","privateintsizeUsed;","privateintsizePhysical;","privateintnextPageOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.io.*;","importsmallsql.database.language.Language;","publicclassCommandDropextendsCommand{","CommandDrop(Loggerlog,Stringcatalog,Stringname,inttype){","super(log);","this.type=type;"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["finalclassExpressionFunctionDayOfYearextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.DAYOFYEAR;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfYear.java|"],
"["returnmove();","finalbooleanisLast(){","returnrowIdx==rowList.size()-1&&currentRow!=null;","finalbooleanisAfterLast(){","returnrowIdx\>=rowList.size()||rowList.size()==0;","finalvoidafterLast(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["database.dropTable(con,newName);","}catch(Exceptionex1){/*ignoreit*/}","try{","indexes.drop(database);","}catch(Exceptionex1){/*ignoreit*/}","throwex;"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["caseSQLTokenizer.BETWEEN:","rightExpr=expression(cmd,ExpressionArithmetic.AND);","nextToken(MISSING_AND);","ExpressionrightExpr2=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,rightExpr2,operation);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(lock!=null){","if(lock.con==con||","con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","usableLock=lock;","}else{","if(lock.lockType==LOCK_WRITE){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["booleanfirst()throwsException{","rowIdx=-1;","returnnext();","booleanprevious()throwsException{","if(rowIdx\>-1){","rowIdx--;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["rowIdx--;","if(rowIdx\>-1&&rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","rowSource.beforeFirst();","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["intlength=param2.getInt();","if(bytes.length\<=length)returnbytes;","byte[]b=newbyte[length];","System.arraycopy(bytes,0,b,0,length);","returnb;","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["return1;","caseSQLTokenizer.TINYINT:","return3;","caseSQLTokenizer.SMALLINT:","return5;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalvoidclear(){","size=0;","privatefinalvoidresize(intnewSize){","long[]dataNew=newlong[newSize];","System.arraycopy(data,0,dataNew,0,size);","data=dataNew;"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["correctPointers(0,oldOffset,-(2+pointerSize),0);","size-=2+pointerSize;","System.arraycopy(data,oldOffset+2+pointerSize,data,oldOffset,size-oldOffset);","offset=oldOffset;","finalprivatevoidremoveNodeLastLevel()throwsSQLException{","intoldOffset=offset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["importsmallsql.database.language.Language;","publicclassStoreNoCurrentRowextendsStore{","privateSQLExceptionnoCurrentRow(){","returnSmallSQLException.create(Language.ROW_NOCURRENT);","booleanisNull(intoffset)throwsSQLException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["if(!next()){","returnfalse;","}else{","while(rows++\<0){","if(!previous()){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["for(inti=0;i\<count;i++){","columns.add(store.readColumn(tableFormatVersion));","indexes=newIndexDescriptions();","references=newForeignKeys();","inttype;","while((type=store.readInt())!=0){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["token=nextToken();","if(token!=null&&token.value==SQLTokenizer.RAW){","dataType=SQLTokenizer.LONGVARBINARY;","}else{","dataType=SQLTokenizer.LONGVARCHAR;","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["firstNode=false;","if(shift!=0)offset+=pointerSize;","shift-=16;","finallonggetNext(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64)return-1;//apreviouscallhasreturn-1"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["puffer[offset++]=(byte)(value);","voidwriteShort(intvalue){","verifyFreePufferSize(2);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteInt(intvalue){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["expr=null;//onlyforcompiler","break;","invalidParamCount=false;","expr=newExpressionArithmetic(params[0],params[1],ExpressionArithmetic.ADD);","break;","caseSQLTokenizer.DIFFERENCE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Tabletable=(Table)tableViews.get(tableName);","if(table!=null){","tableViews.remove(tableName);","table.drop(con);","}else{","Table.drop(this,tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["offset=listEnum.offsetStack[listEnum.stack];","longresult=listEnum.resultStack[listEnum.stack];","booleanfirstNode=(offset==0);//trueifitthefirstentryinalevel","while(true){","intnextEntry=getUnsignedShort();","if(nextEntry!=0||firstNode){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleFloatFactor[scale]*signum;","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleFloatFactor[scale]*signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["num.setSignum(-num.getSignum());","returnnum;","caseMOD:","if(getDataType(getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","returnnewMutableNumeric(getInt());","MutableNumericnum=left.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["ByteBufferbuffer=ByteBuffer.allocate(1);","buffer.put(rootPage.getUnique()?(byte)1:(byte)0);","buffer.position(0);","raFile.write(buffer);","((FileIndexNode)rootPage).save();","voidclose()throwsIOException{"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intlength=param2.getInt();","if(bytes.length\<=length)returnbytes;","byte[]b=newbyte[length];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionLeft.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.ASCII;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param1.getString().length()==0;","finalintgetInt()throwsException{","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|"],
"["staticfinalintJOIN=223;","staticfinalintON=224;","staticfinalintOUTER=225;","staticfinalintFULL=226;","staticfinalintCROSS=227;","staticfinalintUSE=228;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["longresult=listEnum.resultStack[listEnum.stack];","while(true){","intnextEntry=(offset\<0)?-1:getUnsignedShort();","if(nextEntry\>=0){","result|=(((long)nextEntry)\<\<shift);","if(listEnum.stack\>=3){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["RowSourceright=rowSource(cmd,tables,0);","SQLTokentoken=nextToken();","while(true){","if(token==null){","throwcreateSyntaxError(token,Language.STXADD_JOIN_INVALID);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.ALL:","selCmd.setDistinct(false);","break;","caseSQLTokenizer.DISTINCT:","selCmd.setDistinct(true);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.second,2,buf);","returnbuf.toString();","case21:","case121://ODBCkannonish+millis;yyyy-mm-ddhh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicbooleanequals(Objectobj){","return(objinstanceofMoney&&((Money)obj).value==value);","publicinthashCode(){","return(int)(value^(value\>\>\>32));","publiclongunscaledValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","StringcolumnName=columns.get(c);","Columncolumn=tab.findColumn(columnName);","Object[]row=newObject[8];","row[0]=Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["expr=newExpressionFunctionAbs();","break;","caseSQLTokenizer.ACOS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionACos();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnull;","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:","cmdCreate.addColumn(col);","returntoken;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnpage;","longcommit()throwsSQLException{","if(nextLock!=null){","fileOffset=nextLock.commit();","nextLock=null;","rollback();"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["caseSQLTokenizer.INT:","value=newMutableInteger(expr.getInt());","break;","caseSQLTokenizer.BIGINT:","value=newMutableLong(expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["voiddropView(StringviewName)throwsException{","synchronized(tableViews){","Objectview=tableViews.remove(viewName);","if(view!=null&&!(viewinstanceofView))","throwSmallSQLException.create(Language.VIEWDROP_NOT_VIEW,viewName);","View.drop(this,viewName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["finalprivateIndexindex=newIndex(true);","finalprivateSSConnectioncon;","ExpressionInSelect(SSConnectioncon,Expressionleft,CommandSelectcmdSel,intoperation){","super(left,(Expressions)null,operation);","this.cmdSel=cmdSel;","this.con=con;"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["page[6]=(byte)(value\>\>8);","page[7]=(byte)(value);","returnnewStorePage(page,8,raFile,filePos);","voidcreateNextValue(SSConnectioncon)throwsSQLException{","value++;","con.add(createStorePage());"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["if((cc\>=\'0\')&&cc\<=\'9\')break;//isanumber--\>break","}else{","for(;k\<i;k++){","charcc=sql[k];","if((cc!=\'-\'&&cc!=\'$\'&&cc\<\'0\')||cc\>\'9\')break;//isidentifier--\>break","if(k\>=i)break;//precedingtokensareonlydigitsthatitisnotanidentifierelseafloatingnumber"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateExpression[]params;","Expression(inttype){","this.type=type;","protectedObjectclone()throwsCloneNotSupportedException{","returnsuper.clone();","finalStringgetName(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["booleanisNullable(){","returntrue;","staticfinalintVALUE=1;","staticfinalintNAME=2;","staticfinalintFUNCTION=3;","staticfinalintGROUP_BY=11;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnpage;","finalvoidaddValues(longrowOffset,Expressionsexpressions)throwsException{","IndexNodepage=this.rootPage;","intcount=expressions.size();","for(inti=0;i\<count;i++){","Expressionexpr=expressions.get(i);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnreadDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/10000.0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000.0;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","finalclassLongTreeList{","privatebyte[]data;","privateintsize;","privateintoffset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["{SAVEPT_INVALID_TRANS,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdieaktuelleTransaction.\"},","{SAVEPT_INVALID_DRIVER,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdiesenTreiber{0}.\"},","{ALIAS_UNSUPPORTED,\"EinAliasistnichterlaubtfÃ¼rdiesenTypvonRowsource.\"},","{ISOLATION_UNKNOWN,\"UnbekantesTransaktionIsolationLevel:{0}.\"},","{FLAGVALUE_INVALID,\"UngÃ¼ltigerWertdesFlagsinMethodegetMoreResults:{0}.\"},","{ARGUMENT_INVALID,\"UngÃ¼ltigesArgumentinMethodesetNeedGenratedKeys:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,longkey,booleanisLastValue,intdigitCount)throwsSQLException{","for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));","if(i==0){","if(isLastValue){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["default:return0;","staticintgetDataType(Expressionleft,Expressionright){","inttypeLeft=left.getDataType();","inttypeRight=right.getDataType();","returngetDataType(typeLeft,typeRight);","staticintgetBestNumberDataType(intparamDataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}else{","switch(expr.getDataType()){","caseSQLTokenizer.REAL:","page=find(page,floatToBinarySortOrder(expr.getFloat()),2,nodeList);","break;","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionValue))returnfalse;","Objectv=((ExpressionValue)expr).value;","if(v==value)returntrue;","if(value==null)returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","returnnewDateTime(param1.getLong(),type).toString(param2.getInt());","default:","returnparam1.getString();","}else"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["buffer.append(str.substring(0,start));","buffer.append(param4.getString());","if(length\<0)","throwSmallSQLException.create(Language.INSERT_INVALID_LEN,newInteger(length));","buffer.append(str.substring(start+length));","returnbuffer.toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["expr.set(row[c],-1);","Columncolumn=columns.get(c);","if(expr.getDataType()!=SQLTokenizer.NULL){","column.setDataType(expr.getDataType());","if(expr.getPrecision()\>column.getPrecision()){","column.setPrecision(expr.getPrecision());"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["temp=(value[--v1]&0xFFFFFFFFL)+(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>32);","value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)","uebertrag=(value[--v1]=value[v1]+1)==0;","if(uebertrag){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["left.execute();","right.execute();","if(!createJoinScrollIndex()){","scroll=newJoinScroll(type,left,right,condition);","booleanisExpressionsFromThisRowSource(Expressionscolumns){","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["value=newMutableFloat(expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","value=newMutableDouble(expr.getDouble());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalintASTERISK=\'*\';//42","staticfinalintPLUS=\'+\';//43","staticfinalintCOMMA=\',\';//44","staticfinalintMINUS=\'-\';//45","staticfinalintPOINT=\'.\';//46","staticfinalintSLACH=\'/\';//47"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["static{","addKeyWord(\"CURDATE\",CURDATE);","addKeyWord(\"CURTIME\",CURTIME);","addKeyWord(\"CURRENT_DATE\",CURRENTDATE);","addKeyWord(\"DAYNAME\",DAYNAME);","addKeyWord(\"DAYOFMONTH\",DAYOFMONTH);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.sql.DriverManager;","importjava.sql.SQLException;","importjava.text.MessageFormat;","importsmallsql.database.language.Language;","classSmallSQLExceptionextendsSQLException{","privatestaticfinallongserialVersionUID=-1683756623665114L;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["finalintgetInt()throwsException{","if(isNull())return0;","returnInteger.parseInt(getString().trim());","finallonggetLong()throwsException{","if(isNull())return0;","returnLong.parseLong(getString().trim());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","writeBoolean(expr.getBoolean());","break;","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnrowSource.rowDeleted();","voidnullRow(){","rowSource.nullRow();","row=0;","voidnoRow(){","rowSource.noRow();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(version\>TABLE_VIEW_VERSION)","throwSmallSQLException.create(Language.FILE_TOONEW,newObject[]{newInteger(version),fileName});","if(version\<TABLE_VIEW_OLD_VERSION)","throwSmallSQLException.create(Language.FILE_TOOOLD,newObject[]{newInteger(version),fileName});","if(magic==MAGIC_TABLE)","returnnewTable(database,con,name,raFile,raFile.position(),version);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database,name);","booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.INDEX_EXISTS,name);","FileChannelrandomFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,randomFile,con,database));"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["millis=Integer.parseInt(strMillis.substring(0,3));","}else","millis=0;","}else{","hour=0;","minute=0;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","returnreadBoolean()?\"1\":\"0\";","caseSQLTokenizer.BOOLEAN:","returnString.valueOf(readBoolean());","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["result[0]=(byte)(value\>\>56);","result[1]=(byte)(value\>\>48);","result[2]=(byte)(value\>\>40);","result[3]=(byte)(value\>\>32);","result[4]=(byte)(value\>\>24);","result[5]=(byte)(value\>\>16);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["for(intp=0;p\<params.length;p++){","addInternalExpressionFromSelect(params[p]);","return-1;","finalprivatevoidpatchExpressions(Expressionsexprs)throwsSQLException{","if(exprs==null)return;","for(inti=0;i\<exprs.size();i++){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["wasNull=expr.isNull();","returnexpr.getInt();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publiclonggetLong(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalTableStorePageget(longkey){","inti=(int)(key%table.length);","Entrye=table[i];","while(true){","if(e==null)","returnnull;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["throwSmallSQLException.createFromException(e);","publicResultSetgetColumnPrivileges(Stringcatalog,Stringschema,Stringtable,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"GRANTOR\",\"GRANTEE\",\"PRIVILEGE\",\"IS_GRANTABLE\"};","thrownewjava.lang.UnsupportedOperationException(\"MethodgetTablePrivileges()notyetimplemented.\");","publicResultSetgetBestRowIdentifier(Stringcatalog,Stringschema,Stringtable,intscope,booleannullable)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.value=value;","this.offset=tokenStart;","this.length=tokenEnd-tokenStart;","this.name=name;","StringgetName(char[]sql){","if(name!=null)returnname;"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["expr=newExpressionFunctionCharLen();","break;","caseSQLTokenizer.CHAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionChar();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["value[0]=(int)(complement\>\>32);","value[1]=(int)complement;","signum=1;","MutableNumeric(longcomplement,intscale){","this(complement);","this.scale=scale;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2long(readBinary());","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();","publicbooleanequals(Objectobj){","if(!(objinstanceofDateTime))returnfalse;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privatestaticfinalint[]COMMANDS={SQLTokenizer.SELECT,SQLTokenizer.DELETE,SQLTokenizer.INSERT,SQLTokenizer.UPDATE,SQLTokenizer.CREATE,SQLTokenizer.DROP,SQLTokenizer.ALTER,SQLTokenizer.SET,SQLTokenizer.USE,SQLTokenizer.EXECUTE,SQLTokenizer.TRUNCATE};","privatestaticfinalint[]COMMANDS_ESCAPE={SQLTokenizer.D,SQLTokenizer.T,SQLTokenizer.TS,SQLTokenizer.FN,SQLTokenizer.CALL};","privatestaticfinalint[]COMMANDS_ALTER={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.PROCEDURE,};","privatestaticfinalint[]COMMANDS_CREATE={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE,SQLTokenizer.UNIQUE,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]COMMANDS_DROP={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE};","privatestaticfinalint[]COMMANDS_SET={SQLTokenizer.TRANSACTION};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{SUBSTR_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringatroppolungaperlacolonna.\"},","{VALUE_BIN_TOOLARGE,\"Valorebinariodilunghezza{0}eccessivaperlacolonnadilunghezza{1}.\"},","{VALUE_NULL_INVALID,\"Valorinullinonvalidiperlacolonna\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Impossibleconvertireunvalore{0}inunvalore{1}.\"},","{BYTEARR_INVALID_SIZE,\"Lunghezzanonvalidaperunarraydibytes:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["intgetUsedSize(){","return0;","longgetNextPagePos(){","return-1;","voiddeleteRow(SSConnectioncon)throwsSQLException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["caseSQLTokenizer.AVG:","if(paramCount!=1){","invalidParamCount=true;","expr=null;//Onlyforthecompiler","break;","expr=newExpressionName(Expression.SUM);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["IndexNode[]temp=newIndexNode[length+1];","if(length==0){","temp[0]=node;","}else{","intpos=findNodeInsertPos(node.digit,0,length);","System.arraycopy(nodes,0,temp,0,pos);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["setBinaryStream(findParameter(parameterName),x,length);","publicvoidsetObject(StringparameterName,Objectx,intsqlType,intscale)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType,scale);","publicvoidsetObject(StringparameterName,Objectx,intsqlType)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType);","publicvoidsetObject(StringparameterName,Objectx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseADD:returnlVal+rVal;","caseSUB:returnlVal-rVal;","caseMUL:returnlVal*rVal;","caseDIV:returnlVal/rVal;","caseNEGATIVE:return-rVal;","caseMOD:returnlVal%rVal;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["complement[offset++]=(byte)(val\>\>24);","complement[offset++]=(byte)(val\>\>16);","complement[offset++]=(byte)(val\>\>8);","complement[offset++]=(byte)(val);","returncomplement;","publicintintValue(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalIndexDescriptionpk;","finalIndexDescriptionfk;","finalintupdateRule=DatabaseMetaData.importedKeyNoAction;","finalintdeleteRule=DatabaseMetaData.importedKeyNoAction;","ForeignKey(StringpkTable,IndexDescriptionpk,StringfkTable,IndexDescriptionfk){","this.pkTable=pkTable;"]": ["|project://smallsql/src/smallsql/database/ForeignKey.java|"],
"["privateRowSourcerowSource(Commandcmd,DataSourcestables,intparenthesis)throwsSQLException{","RowSourcefromSource=null;","fromSource=tableSource(cmd,tables);","while(true){","SQLTokentoken=nextToken();","if(token==null)returnfromSource;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncreateProcedure();","caseSQLTokenizer.UNIQUE:","do{","token=nextToken(COMMANDS_CREATE_UNIQUE);","}while(token.value==SQLTokenizer.INDEX);","returncreateIndex(true);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["quoteBuffer.append(c);","wasWhiteSpace=false;","break;","if(comment==MULTI_COMMENT){","throwSmallSQLException.create(Language.STXADD_COMMENT_OPEN);","if(!wasWhiteSpace){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["voidwriteByte(intvalue){","verifyFreePufferSize(1);","puffer[offset++]=(byte)(value);","voidwriteShort(intvalue){","verifyFreePufferSize(2);","puffer[offset++]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["if(leftBytes[i]!=rightBytes[i]){","comp=leftBytes[i]\<rightBytes[i]?-1:1;","break;","if(comp==0&&leftBytes.length!=rightBytes.length){","comp=leftBytes.length\<rightBytes.length?-1:1;","returncomp;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticvoiddrop(Databasedatabase,Stringname)throwsException{","Filefile=newFile(Utils.createTableViewFileName(database,name));","booleanok=file.delete();","if(!ok)throwSmallSQLException.create(Language.VIEW_CANTDROP,name);","privatevoidwrite(Databasedatabase,SSConnectioncon)throwsException{","FileChannelraFile=createFile(con,database);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","save(store);","fileOffset=store.writeFinsh(null);","@Override","voidsaveRef(StoreImploutput)throwsSQLException{","if(fileOffset\<0){"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["cols[i]=cols[i].copy();","copy.size=size;","returncopy;","privatefinalvoidresize(intnewSize){","Column[]dataNew=newColumn[newSize];","System.arraycopy(data,0,dataNew,0,size);"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["leftExpr=newExpressionArithmetic(leftExpr,rightExpr,rightExpr2,operation);","break;","caseSQLTokenizer.IN:","nextToken(MISSING_PARENTHESIS_L);","token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["switch(tokenType.value){","caseSQLTokenizer.ADD:","SQLTokentoken;","do{","token=nextToken(MISSING_IDENTIFIER);","token=addColumn(token,cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"ALL\",ALL);","addKeyWord(\"DISTINCT\",DISTINCT);","addKeyWord(\"CASE\",CASE);","addKeyWord(\"WHEN\",WHEN);","addKeyWord(\"THEN\",THEN);","addKeyWord(\"ELSE\",ELSE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["case2:","millis=Integer.parseInt(strMillis)*10;","break;","case3:","millis=Integer.parseInt(strMillis);","break;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value+=expr.getInt();","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["classStorePageLink{","longfilePos;","TableStorePagepage;","StoreImplgetStore(Tabletable,SSConnectioncon,intlock)throwsException{","TableStorePagepage=this.page;","if(page==null)"]": ["|project://smallsql/src/smallsql/database/StorePageLink.java|"],
"["publicvoidsetShort(intparameterIndex,shortx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.SMALLINT);","publicvoidsetInt(intparameterIndex,intx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.INT);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["row=0;","voidnoRow(){","isAfterLast=true;","left.noRow();","right.noRow();","row=0;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["this(16);","LongList(intinitialSize){","data=newlong[initialSize];","finalintsize(){","returnsize;","finallongget(intidx){"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["staticfinalintABS=1000;//firstnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","staticfinalintACOS=1001;","staticfinalintASIN=1002;","staticfinalintATAN=1003;","staticfinalintATAN2=1004;","staticfinalintCEILING=1005;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["setTimestamp(findParameter(parameterName),x,cal);","publicvoidsetNull(StringparameterName,intsqlType,StringtypeName)throwsSQLException{","setNull(findParameter(parameterName),sqlType,typeName);","publicStringgetString(StringparameterName)throwsSQLException{","returngetString(findParameter(parameterName));","publicbooleangetBoolean(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["IndexDescriptionindex=indexes.get(i);","if(index.isUnique()){","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","StringcolumnName=columns.get(c);","Columncolumn=tab.findColumn(columnName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["MutableNumericgetNumeric(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getObject();","StringgetString(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getString();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseMIN:","caseMAX:","break;","caseCOUNT:","value=newMutableInteger(0);","dataType=SQLTokenizer.INT;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.BINARY:{","byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();","if(length!=bytes.length){","byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["value=0;","wasWhiteSpace=false;","break;","c|=0x20;//caseinsensitive","while(node!=null&&node.letter!=c)node=node.nextEntry;","if(node!=null){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["expr=newExpressionFunctionLeft();","break;","caseSQLTokenizer.LENGTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLength();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","if(defaultValue==-1)","return0xFFFF;","returndefaultValue;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["Stringstables=database.getTables(tableNamePattern);","for(inti=0;i\<tables.size();i++){","Stringtable=tables.get(i);","Object[]row=newObject[10];","row[0]=catalog;","row[2]=table;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(oldRowOffset==null){","index.addValues(newRowOffset,distinctColumns);","row++;","returntrue;","}else","if(oldRowOffset.longValue()==newRowOffset){"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["fileOffset=raFile.size();","raFile.position(fileOffset);","raFile.write(buffer);","returnfileOffset;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["((MutableFloat)value).value=Math.max(((MutableFloat)value).value,expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.max(((MutableDouble)value).value,expr.getDouble());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["this.commandSelect=null;","write(database,con);","View(SSConnectioncon,CommandSelectcommandSelect)throwsException{","super(\"UNION\",newColumns());","this.sql=null;","this.commandSelect=commandSelect;"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["break;","case1:","value=newLong(input.readLong());","break;","case2:","value=newLongTreeList(input);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intstart=0;","intlength=bytes.length;","while(start\<length&&bytes[start]==0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"\",\"\",\"\",\"REMARKS\",\"PROCEDURE_TYPE\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetProcedureColumns(Stringcatalog,StringschemaPattern,StringprocedureNamePattern,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"COLUMN_NAME\",\"COLUMN_TYPE\",\"DATA_TYPE\",\"TYPE_NAME\",\"PRECISION\",\"LENGTH\",\"SCALE\",\"RADIX\",\"NULLABLE\",\"REMARKS\"};","Object[][]data=newObject[0][];"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){","token=nextToken(MISSING_EXPRESSION);","try{","value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetParams()[0].getDataType();","caseCOUNT:","returnSQLTokenizer.INT;","default:thrownewError();","voidsetFrom(DataSourcefromEntry,intcolIdx,TableViewtable){","this.fromEntry=fromEntry;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["if(columnExpressions.size()!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(table==null||tableTimestamp!=table.getTimestamp())compile(con);","finalIndexDescriptionsindexes=table.indexes;","updateCount=0;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["@Override","publicdoubledoubleValue(){","returnvalue;","@Override","publicintintValue(){","return(int)value;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(param1.getMoney());","caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(param1.getDataType()){","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnvalue;","publicintintValue(){","returnvalue;","publiclonglongValue(){","returnvalue;","publicStringtoString(){"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["returntrue;","do{","if(isBeforeFirst){","result=left.next();","if(result){","result=right.first();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["}while(token!=null&&token.value==SQLTokenizer.COMMA);","returncmd;","default:","Object[]param={\"ALTERTABLE\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandSetset()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticlongparse(java.util.Datedate){","longt=date.getTime();","returnremoveDateTimeOffset(t);","staticDateTimevalueOf(java.util.Datedate){","if(date==null)returnnull;","inttype;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["longtime;","privateintdataType=SQLTokenizer.TIMESTAMP;","staticfinalint[]MONTH_DAYS={0,31,59,90,120,151,181,212,243,273,304,334};","privatestaticfinalString[]SHORT_MONTHS=newDateFormatSymbols().getShortMonths();","DateTime(longtime,intdataType){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticSQLExceptioncreate(StringmessageCode,Objectparam0){","Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Object[]params){","Stringmessage=translateMsg(messageCode,params);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["for(inti=0;i\<length;i++){","if(list[offset+i]!=value[i]){","continueloop1;","returnoffset;","return-1;","staticintcompareBytes(byte[]leftBytes,byte[]rightBytes){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticfinalintDAY=1207;","staticfinalintHOUR=1208;","staticfinalintMILLISECOND=1209;","staticfinalintMINUTE=1210;","staticfinalintMONTH=1211;","staticfinalintMONTHNAME=1212;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["try{","byte[]obj=getValue(columnIndex).getBytes();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(lock.con!=con)returnnull;","tabLockConnection=con;","tabLockCount++;","TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","con.add(lock);","returnlock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["intoffsetInPage=store.getCurrentOffsetInPage();","intsize=store.readInt();","switch(type){","caseINDEX:","indexes.add(IndexDescription.load(database,this,store));","break;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["default:returnnewMutableNumeric(obj.toString());","ObjectgetObject(){","if(isEmpty()){","returnnull;","returnvalue;","StringgetString(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["default:","SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.PARENTHESIS_L){","if(isMinus)","returnnewExpressionArithmetic(function(cmd,token,false),ExpressionArithmetic.NEGATIVE);","returnfunction(cmd,token,false);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case11://Japanyy/mm/dd","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privateintrow;","privatefinalLongListinsertedRows=newLongList();","privatebooleanuseSetRowPosition;","privateintsortedRowCount;","privatelonglastRowOffset;","SortedResult(RowSourcerowSource,ExpressionsorderBy){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["break;","}elseif(quote==0){","quote=c;","}elseif(quote==c){","if(i+1\<sql.length&&sql[i+1]==quote){","quoteBuffer.append(quote);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","count=readShort()&0xFFFF;","if(!isNull)offset+=count\<\<1;//notuse+=directlybecausereadShortchangetheoffset","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatebooleancreateJoinScrollIndex()throwsException{","if(type==CROSS_JOIN){","returnfalse;","if(type!=INNER_JOIN){","returnfalse;","if(conditioninstanceofExpressionArithmetic){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["left.setRowPosition(rowPositions.get1((int)rowPosition));","right.setRowPosition(rowPositions.get2((int)rowPosition));","finalbooleanrowInserted(){","returnleft.rowInserted()||right.rowInserted();","finalbooleanrowDeleted(){","returnleft.rowDeleted()||right.rowDeleted();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["voidsetNextValue(Expressionexpr)throwsException{","longnewValue=expr.getLong();","if(newValue\>value){","value=newValue;","createStorePage().commit();","@Override"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["addKeyWord(\"LENGTH\",LENGTH);","addKeyWord(\"CHARINDEX\",LOCATE);//aliasforMSSQLServer","addKeyWord(\"LOCATE\",LOCATE);","addKeyWord(\"LTRIM\",LTRIM);","addKeyWord(\"OCTET_LENGTH\",OCTETLEN);","addKeyWord(\"REPEAT\",REPEAT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["setLong(findParameter(parameterName),x);","publicvoidsetFloat(StringparameterName,floatx)throwsSQLException{","setFloat(findParameter(parameterName),x);","publicvoidsetDouble(StringparameterName,doublex)throwsSQLException{","setDouble(findParameter(parameterName),x);","publicvoidsetBigDecimal(StringparameterName,BigDecimalx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["output.writeByte(2);","((LongTreeList)value).save(output);","}else","if(valueinstanceofIndexNode){","output.writeByte(3);","((IndexNode)value).saveRef(output);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2float(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnewTimestamp(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(StringcolumnName,Calendarcal)throwsSQLException{","returngetTimestamp(findColumn(columnName),cal);","publicURLgetURL(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","returnnewString((byte[])obj);","returnobj.toString();","ObjectgetObject()throwsException{","if(param1.isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["{RSET_NOT_PRODUCED,\"01000\"},","{RSET_READONLY,\"01000\"},","{RSET_FWDONLY,\"01000\"},","{RSET_CLOSED,\"01000\"},","{RSET_NOT_INSERT_ROW,\"01000\"},","{RSET_ON_INSERT_ROW,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["return(obj.equals(Boolean.TRUE))?1:0;","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["keys.add(valueExpress.getObject());","break;","store.writeExpression(valueExpress,column);","for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeExpression(c,valueExpress);","store.writeFinsh(con);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["break;","caseSQLTokenizer.IN:","nextToken(MISSING_PARENTHESIS_L);","token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){","CommandSelectcmdSel=select();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseBETWEEN:","int_left=left.getInt();","return_left\>=right.getInt()&&right2.getInt()\>=_left;","default:","returngetInt()!=0;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseResultSet.TYPE_SCROLL_SENSITIVE:","returntrue;","returnfalse;","publicbooleansupportsResultSetConcurrency(inttype,intconcurrency){","if(type\>=ResultSet.TYPE_FORWARD_ONLY&&type\<=ResultSet.TYPE_SCROLL_SENSITIVE&&","concurrency\>=ResultSet.CONCUR_READ_ONLY&&concurrency\<=ResultSet.CONCUR_UPDATABLE)"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.BIGINT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatestaticfinalint[]MISSING_COMM_UNCOMM={SQLTokenizer.COMMITTED,SQLTokenizer.UNCOMMITTED};","privatestaticfinalint[]MISSING_OPTIONS_DATATYPE={SQLTokenizer.DEFAULT,SQLTokenizer.IDENTITY,SQLTokenizer.NOT,SQLTokenizer.NULL,SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_NUMBERVALUE={SQLTokenizer.NUMBERVALUE};","privatestaticfinalint[]MISSING_AND={SQLTokenizer.AND};","privatestaticfinalint[]MISSING_JOIN={SQLTokenizer.JOIN};","privatestaticfinalint[]MISSING_OUTER_JOIN={SQLTokenizer.OUTER,SQLTokenizer.JOIN};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary())!=0;","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()!=0;","caseSQLTokenizer.SMALLINT:","returnreadShort()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["result=left.next();","if(result){","result=right.first();","if(!result){","switch(type){","caseJoin.LEFT_JOIN:"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|","|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["writeByte(expr.getInt());","break;","caseSQLTokenizer.SMALLINT:","writeShort(expr.getInt());","break;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","if(objinstanceofMutableNumeric)","return(MutableNumeric)obj;","returnnewMutableNumeric((BigDecimal)obj);","default:returnnewMutableNumeric(obj.toString());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"SQL_VARCHAR\",SQL_VARCHAR);","staticfinalintCOUNT=1400;","staticfinalintMIN=1401;","staticfinalintMAX=1402;","staticfinalintSUM=1403;","staticfinalintFIRST=1404;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["buffer.write(str1,idx1,idx2-idx1);","buffer.write(str3);","idx1=idx2+length;","idx2=Utils.indexOf(str2,str1,idx1);","if(idx1\>0){","buffer.write(str1,idx1,str1.length-idx1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["value=Money.createFromUnscaledValue(expr.getMoney());","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","value=newMutableNumeric(expr.getNumeric());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicstaticfinalStringSYNTAX_BASE_END=\"SS-0611\";","publicstaticfinalStringSTXADD_ADDITIONAL_TOK=\"SS-0612\";","publicstaticfinalStringSTXADD_IDENT_EXPECT=\"SS-0613\";","publicstaticfinalStringSTXADD_IDENT_EMPTY=\"SS-0614\";","publicstaticfinalStringSTXADD_IDENT_WRONG=\"SS-0615\";","publicstaticfinalStringSTXADD_OPER_MINUS=\"SS-0616\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM","booleanas=false;","if(token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);","as=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(expr.isNull())","dataType=expr.getDataType();","else","initValue(expr);","}elseif(!expr.isNull()){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleDoubleFactor[scale]*signum;","}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).doubleValue();","publicStringtoString(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().toString();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatelongafterLastValidFilePos;","finalprivatebooleanmoveToRow()throwsException{","if(filePos\>=0x4000000000000000L){","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","}else{","store=(filePos\<maxFileOffset)?table.getStore(con,filePos,lock):null;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["default:","thrownewError(\"pageOperation:\"+pageOperation);","TableStorePagerequestWriteLock(SSConnectioncon,TableStorePagereadlock)throwsSQLException{","if(readlock.lockType==LOCK_INSERT){","TableStorePagelock=newTableStorePage(con,this,LOCK_INSERT,-1);","readlock.nextLock=lock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintELSE=266;","staticfinalintEND=267;","staticfinalintSWITCH=268;","staticfinalStringDESC_STR=\"DESC\";","static{","addKeyWord(\"SELECT\",SELECT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return((String)obj).getBytes();","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.unique2bytes((String)obj);","caseSQLTokenizer.INT:","returnUtils.int2bytes(((Number)obj).intValue());","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["importjava.sql.SQLWarning;","importjava.sql.Savepoint;","importjava.sql.Statement;","importjava.util.ArrayList;","importjava.util.List;","importjava.util.Map;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["buffer.putInt(INDEX_VERSION);","buffer.position(0);","raFile.write(buffer);","finalvoidwriteExpression(intcolumnIdx,ExpressionvalueExpression){","intidx=matrix[columnIdx];","if(idx\>=0)//setonlyifthecolumnpartofthisindex"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(columnExpressions.indexOf(column)\>=0){","throwSmallSQLException.create(Language.COL_DUPLICATE,column);","super.addColumnExpression(column);","voidaddValues(Expressionsvalues){","this.cmdSel=newCommandSelect(log,values);","voidaddValues(CommandSelectcmdSel){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["buffer.append((char)((v%10)+\'0\'));","returnbuffer.toString();","publicbooleanequals(Objectobj){","return(objinstanceofMoney&&((Money)obj).value==value);","publicinthashCode(){","return(int)(value^(value\>\>\>32));"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnString.valueOf(readDouble());","caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong()).toString();","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicclassCommandLine{","publicstaticvoidmain(String[]args)throwsException{","System.out.println(\"SmallSQLDatabasecommandlinetool\\n\");","Connectioncon=newSSDriver().connect(\"jdbc:smallsql\",newProperties());","Statementst=con.createStatement();","if(args.length\>0){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["}elseif(!expr.isNull()){","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.max(((MutableInteger)value).value,expr.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnresult;","Object[][]getBestRowIdentifier(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);","as=true;","if(as||(!isKeyword(token))){","Stringalias=getIdentifier(token);","column.setAlias(alias);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(isAfterLast)returnfalse;","row++;","booleanresult=scroll.next();","if(!result){","noRow();","returnresult;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["updatePointer.filePosUpdated=newData.writeFinsh(null);","updatePointer.status=UPDATE_POINTER;","updatePointer.type=SQLTokenizer.UPDATE;","updatePointer.createWriteLock();","if(updatePointer.sharedPageData){","updatePointer.page=newbyte[PAGE_CONTROL_SIZE];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["char[]letters=keyword.toCharArray();","if(searchTree==null){","searchTree=newSearchNode();","searchTree.letter=(char)(letters[0]|0x20);","SearchNodeprev=null;","SearchNodenode=searchTree;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicResultSetexecuteQuery()throwsSQLException{","executeImp();","returncmd.getQueryResult();","publicintexecuteUpdate()throwsSQLException{","executeImp();","returncmd.getUpdateCount();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicURLgetURL(StringcolumnName)throwsSQLException{","returngetURL(findColumn(columnName));","publicvoidupdateRef(intcolumnIndex,Refx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blob\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{INSERT_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionINSERT.\"},","{SUBSTR_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"DerStringWertistzugroÃŸfÃ¼rdieSpalte.\"},","{VALUE_BIN_TOOLARGE,\"EinBinÃ¤reWertmitLÃ¤nge{0}istzugroÃŸfÃ¼reineSpaltemitderGrÃ¶ÃŸe{1}.\"},","{VALUE_NULL_INVALID,\"NullWertesindungÃ¼ltigfÃ¼rdieSpalte\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Kannnichtkonvertierenein{0}Wertzueinem{1}Wert.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["{JOIN_DELETE,\"ThemethoddeleteRownotsupportedonjoins.\"},","{JOIN_INSERT,\"ThemethodinsertRownotsupportedonjoins.\"},","{DELETE_WO_FROM,\"ThemethoddeleteRowneedaFROMexpression.\"},","{INSERT_WO_FROM,\"ThemethodinsertRowneedaFROMexpression.\"},","{TABLE_CANT_RENAME,\"Table\'\'{0}\'\'can\'\'tberenamed.\"},","{TABLE_CANT_DROP,\"Table\'\'{0}\'\'can\'\'tbedropped.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionHour();","break;","caseSQLTokenizer.MINUTE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMinute();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseTypes.BOOLEAN:","return\"java.lang.Boolean\";","caseTypes.BINARY:","caseTypes.VARBINARY:","caseTypes.LONGVARBINARY:","return\"[B\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.UPDATE:","caseSQLTokenizer.UNION:","caseSQLTokenizer.FROM:","caseSQLTokenizer.WHERE:","caseSQLTokenizer.GROUP:","caseSQLTokenizer.HAVING:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.IFNULL:","switch(paramCount){","case1:","returnnewExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","case2:","invalidParamCount=false;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwcreateSyntaxError(token,validValues);","returntoken;","for(inti=validValues.length-1;i\>=0;i--){","if(token.value==validValues[i])returntoken;","throwcreateSyntaxError(token,validValues);","privateCommandSelectsingleSelect()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateSQLExceptioncreateSyntaxError(SQLTokentoken,int[]validValues){","StringmsgStr=SmallSQLException.translateMsg(","Language.STXADD_KEYS_REQUIRED,newObject[]{});","StringBuffermsgBuf=newStringBuffer(msgStr);","for(inti=0;i\<validValues.length;i++){","Stringname=SQLTokenizer.getKeyWord(validValues[i]);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_DATATYPE);","dataType=token.value;","Columncol=newColumn();","if(dataType==SQLTokenizer.LONG){","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.RAW){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.REAL:","returnnewMutableNumeric(getFloatImpl());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(getDoubleImpl());","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return(long)(value/10000.0);","publicStringtoString(){","StringBufferbuffer=newStringBuffer();","buffer.append(longValue()).append(\'.\');","finallongv=Math.abs(value);","buffer.append((char)((v%10000)/1000+\'0\'));"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["try{","Stringobj=getValue(i).getString();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["try{","Objectobj=getValue(i).getObject();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["staticintgetOperationFromToken(intvalue){","switch(value){","caseSQLTokenizer.PLUS:returnADD;","caseSQLTokenizer.MINUS:returnSUB;","caseSQLTokenizer.ASTERISK:returnMUL;","caseSQLTokenizer.SLACH:returnDIV;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","buf.append(Long.toString(temp));","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["for(inti=1;idx\<4&&i\<input.length();i++){","charc=input.charAt(i);","switch(c){","case\'B\':","case\'F\':","case\'P\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["returnfunction(cmd,token,false);","}else{","charchr1=sql[token.offset];","if(chr1==\'$\'){","previousToken();","Stringtok=newString(sql,token.offset+1,token.length-1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(row\<=rowList.size()){","rowIdx=row-1;","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","rowIdx=rowList.size()-1;","if(rowIdx\>=0)"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["staticfinalintCALL=404;","staticfinalintOJ=405;","static{","addKeyWord(\"D\",D);","addKeyWord(\"T\",T);","addKeyWord(\"TS\",TS);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else{","if(scale!=0){","MutableNumericnumeric=newMutableNumeric(this);","numeric.setScale(0);","returnnumeric.longValue();","return(signum\>0)?Long.MAX_VALUE:Long.MIN_VALUE;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["System.arraycopy(nodes,pos,temp,pos+1,length-pos);","temp[pos]=node;","nodes=temp;","privatefinalintfindNodeInsertPos(chardigit,intstart,intend){","if(start==end)returnstart;","intmid=start+(end-start)/2;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnrowIdx;","finalvoidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;","move();","finalbooleanrowInserted(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["}else{","booleanisSetFrom=false;","for(intt=0;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);","TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnfalse;","publicbooleansupportsSchemasInProcedureCalls(){","returnfalse;","publicbooleansupportsSchemasInTableDefinitions(){","returnfalse;","publicbooleansupportsSchemasInIndexDefinitions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(readBoolean())returnfalse;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean();","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.RAND:","invalidParamCount=(paramCount!=0)&&(paramCount!=1);","expr=newExpressionFunctionRand();","break;","caseSQLTokenizer.ROUND:","invalidParamCount=(paramCount!=2);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["dataType=ExpressionArithmetic.getDataType(dataType,results.get(i).getDataType());","returndataType;","finalintgetPrecision(){","intprecision=0;","for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getPrecision());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.RADIANS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRadians();","break;","caseSQLTokenizer.RAND:","invalidParamCount=(paramCount!=0)&&(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncommandSelect.isLast();","booleanisAfterLast()throwsException{","returncommandSelect.isAfterLast();","voidafterLast()throwsException{","commandSelect.afterLast();","booleanabsolute(introw)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["importsmallsql.database.language.Language;","publicclassSSConnectionimplementsConnection{","privatefinalbooleanreadonly;","privateDatabasedatabase;","privatebooleanautoCommit=true;","intisolationLevel=TRANSACTION_READ_COMMITTED;//seealsogetDefaultTransactionIsolation"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["Expression[]array=newExpression[size];","System.arraycopy(data,0,array,0,size);","returnarray;","privatefinalvoidresize(intnewSize){","Expression[]dataNew=newExpression[newSize];","System.arraycopy(data,0,dataNew,0,size);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["setBigDecimal(findParameter(parameterName),x);","publicvoidsetString(StringparameterName,Stringx)throwsSQLException{","setString(findParameter(parameterName),x);","publicvoidsetBytes(StringparameterName,byte[]x)throwsSQLException{","setBytes(findParameter(parameterName),x);","publicvoidsetDate(StringparameterName,Datex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.LEVEL:","con.isolationLevel=isolationLevel;","break;","caseSQLTokenizer.USE:","con.setCatalog(name);","break;"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["if(type!=INNER_JOIN){","returnfalse;","if(conditioninstanceofExpressionArithmetic){","ExpressionArithmeticcond=(ExpressionArithmetic)condition;","ExpressionsleftEx=newExpressions();","ExpressionsrightEx=newExpressions();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionAsciiextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.ASCII;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param1.getString().length()==0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|"],
"["from.beforeFirst();","returnfalse;","returnfrom.absolute(maxRows);","returnfrom.last();","finalvoidafterLast()throwsException{","from.afterLast();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["privatestaticfinalint[]MISSING_READ={SQLTokenizer.READ};","privatestaticfinalint[]MISSING_COMM_UNCOMM={SQLTokenizer.COMMITTED,SQLTokenizer.UNCOMMITTED};","privatestaticfinalint[]MISSING_OPTIONS_DATATYPE={SQLTokenizer.DEFAULT,SQLTokenizer.IDENTITY,SQLTokenizer.NOT,SQLTokenizer.NULL,SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_NUMBERVALUE={SQLTokenizer.NUMBERVALUE};","privatestaticfinalint[]MISSING_AND={SQLTokenizer.AND};","privatestaticfinalint[]MISSING_JOIN={SQLTokenizer.JOIN};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["~intValue:","intValue^0x8000000000000000L;","finalstaticprivateintshortToBinarySortOrder(intvalue){","returnvalue^0x8000;","finalstaticprivateintintToBinarySortOrder(intvalue){","returnvalue^0x80000000;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(value.length==0||signum==0){","return0;","}else{","if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleFloatFactor[scale]*signum;","}else"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalvoidcreateWriteLock()throwsSQLException{","TableStorePagestorePageWrite=table.requestWriteLock(((TableStorePage)storePage).con,(TableStorePage)storePage);","if(storePageWrite==null)","throwSmallSQLException.create(Language.ROW_LOCKED);","storePage=storePageWrite;","voidupdateFinsh(SSConnectioncon,StoreImplnewData)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["expr=newExpressionFunctionLTrim();","break;","caseSQLTokenizer.OCTETLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionOctetLen();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["raFile.close();","raFile=null;","if(lobs!=null){","lobs.close();","lobs=null;","privatevoidwrite(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["expression.setParamAt(patchExpression(params[i]),i);","finalprivateExpressionpatchExpression(Expressionexpr)throwsSQLException{","intidx=addInternalExpressionFromSelect(expr);","if(idx\>=0){","ExpressionorigExpression=expr;","ExpressionNameexprName;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnbytes;","caseSQLTokenizer.SMALLINT:","bytes=newbyte[2];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["ExpressionValue(inttype){","super(type);","switch(type){","caseGROUP_BY:","caseSUM:","caseFIRST:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(isNull())returnfalse;","returnUtils.string2boolean(getString().trim());","finalintgetInt()throwsException{","if(isNull())return0;","returnInteger.parseInt(getString().trim());","finallonggetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["for(inti=pointerSize-1;i\>=0;i--){","data[offset++]=(byte)(value\>\>(i*8));","finalprivateintgetUnsignedShort(){","return((data[offset++]&0xFF)\<\<8)|(data[offset++]&0xFF);","finalprivatevoidwriteShort(intvalue){","data[offset++]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["value=newMutableDouble(expr.getDouble());","break;","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","value=Money.createFromUnscaledValue(expr.getMoney());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(row==0)","throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(row\<0){","afterLast();","rowIdx=rowList.size()+row;","if(rowIdx\<0){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["privatelonggetLongImpl()throwsjava.lang.Exception{","if(isNull())return0;","switch(operation){","caseADD:returnleft.getLong()+right.getLong();","caseSUB:returnleft.getLong()-right.getLong();","caseMUL:returnleft.getLong()*right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returngetBlob(findParameter(parameterName));","publicClobgetClob(StringparameterName)throwsSQLException{","returngetClob(findParameter(parameterName));","publicArraygetArray(StringparameterName)throwsSQLException{","returngetArray(findParameter(parameterName));","publicDategetDate(StringparameterName,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["{FILE_CANT_DELETE,\"Datei\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{ROW_0_ABSOLUTE,\"Datensatz0istungÃ¼ltigfÃ¼rdieMethodeabsolute().\"},","{ROW_NOCURRENT,\"KeinaktuellerDatensatz.\"},","{ROWS_WRONG_MAX,\"FehlerhafterWertfÃ¼rMaximaleDatensatzanzahl:{0}.\"},","{ROW_LOCKED,\"DerDatensatzistgelockedvoneineranderenVerbindung.\"},","{ROW_DELETED,\"DerDatensatzistbereitsgelÃ¶scht.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["voidaddDataSource(DataSourceds){","dataSources.add(ds);","currentDS=dataSources.get(0);","booleaninit(SSConnectioncon)throwsException{","booleanresult=false;","intcolCount=-1;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","classStorePageextendsTransactionStep{","byte[]page;//dataofonepage","intpageSize;"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["caseSQLTokenizer.FROM:","caseSQLTokenizer.WHERE:","caseSQLTokenizer.GROUP:","caseSQLTokenizer.HAVING:","caseSQLTokenizer.ORDER:","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{HOURS_TOOLARGE,\"DieStundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"DieMinutensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"DieSekundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"DieMillisekundensindzugroÃŸimTIMESTAMPWert\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isteinungÃ¼ltigesDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'vonDatentyp\'\'{1}\'\'fÃ¼rdieOperation\'\'{2}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["longwriteFinsh(SSConnectioncon)throwsSQLException{","switch(type){","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:","sizeUsed=sizePhysical=offset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["fileOffset=nextLock.commit();","nextLock=null;","rollback();","returnfileOffset;","if(lockType==TableView.LOCK_READ)","returnfileOffset;"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["caseSQLTokenizer.REAL:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getFloat()==right.getFloat();","caseGREATER:returnleft.getFloat()\>right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalintgetRow(){","returncurrentRow==null?0:rowIdx+1;","finallonggetRowPosition(){","returnrowIdx;","finalvoidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["{TABLE_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonincludeunatabellaSmallSQLvalida.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoditabella/view.\"},","{TABLE_EXISTENT,\"Latabella/vista\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'nonÃ¨unatabella.\"},","{PK_ONLYONE,\"UnatabellapuÃ²averesolounaprimarykey.\"},","{KEY_DUPLICATE,\"Chiaveduplicata.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else{","if(scale!=0){","MutableNumericnumeric=newMutableNumeric(this);","numeric.setScale(0);","returnnumeric.longValue();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importjava.util.ArrayList;","importjava.util.HashMap;","importjava.util.Iterator;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(longValue\<0)","return-1;","if(longValue\>0)","return1;","return0;","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["tabLockCount++;","TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","lock.rollback();","returnlock;","caseSQLTokenizer.INSERT:{","if(serializeConnections.size()\>1)returnnull;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalbooleanisPrimary(){","returnconstraintType==SQLTokenizer.PRIMARY;","finalbooleanisUnique(){","returnconstraintType==SQLTokenizer.PRIMARY||constraintType==SQLTokenizer.UNIQUE;","finalStringsgetColumns(){","returncolumns;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["addKeyWord(\"TRIM\",TRIM);","addKeyWord(\"UCASE\",UCASE);","staticfinalintCURDATE=1200;//firsttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","staticfinalintCURRENTDATE=1201;","staticfinalintCURTIME=1202;","staticfinalintDAYNAME=1203;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return(int)(param2.getLong()/60000-param1.getLong()/60000);","caseSQLTokenizer.SQL_TSI_HOUR:","return(int)(param2.getLong()/3600000-param1.getLong()/3600000);","caseSQLTokenizer.SQL_TSI_DAY:","return(int)(param2.getLong()/86400000-param1.getLong()/86400000);","caseSQLTokenizer.SQL_TSI_WEEK:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","privateSQLTokenaddColumn(SQLTokentoken,CommandTablecmdCreate)throwsSQLException{","StringcolName=getIdentifier(token);","Columncol=datatype(false);","col.setName(colName);","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleangetBoolean(intcolIdx)throwsException{","returnget(colIdx).getBoolean();","intgetInt(intcolIdx)throwsException{","returnget(colIdx).getInt();","longgetLong(intcolIdx)throwsException{","returnget(colIdx).getLong();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["expressions.add(expression(cmd,0));","SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;","columns.add(newString(sql,offset,length));","token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnfalse;","publicbooleansupportsSchemasInPrivilegeDefinitions(){","returnfalse;","publicbooleansupportsCatalogsInDataManipulation(){","returntrue;","publicbooleansupportsCatalogsInProcedureCalls(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["longfilePos;","TableStorePagepage;","StoreImplgetStore(Tabletable,SSConnectioncon,intlock)throwsException{","TableStorePagepage=this.page;","if(page==null)","returntable.getStore(con,filePos,lock);"]": ["|project://smallsql/src/smallsql/database/StorePageLink.java|"],
"["booleanfirst()throwsException{","returnfrom.first();","booleanprevious()throwsException{","returnfrom.previous();","booleannext()throwsException{","if(maxRows\>=0&&from.getRow()\>=maxRows){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["previousToken();","Expressionslist=expressionParenthesisList(cmd);","for(inti=0;i\<list.size();i++){","cmd.addColumnExpression(list.get(i));","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","}elsecmd.noColumns=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["classStrings{","privateintsize;","privateString[]data;","Strings(){","data=newString[16];","finalintsize(){"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["caseSQLTokenizer.INT:","returnnewMutableNumeric(getInt());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLong());","caseSQLTokenizer.MONEY:","returnnewMutableNumeric(getMoney(),4);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["returnString.valueOf(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnString.valueOf(readShort());","caseSQLTokenizer.INT:","returnString.valueOf(readInt());","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicbooleansupportsSchemasInProcedureCalls(){","returnfalse;","publicbooleansupportsSchemasInTableDefinitions(){","returnfalse;","publicbooleansupportsSchemasInIndexDefinitions(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["token=nextToken();","privateIndexDescriptionindex(Commandcmd,intconstraintType,StringtableName,StringcontrainName,StringcolumnName)throwsSQLException{","if(constraintType!=SQLTokenizer.UNIQUE)nextToken(MISSING_KEY);","SQLTokentoken=nextToken();","if(token!=null){","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["beforeFirst();","while(next()){","if(currentGroup==null||currentGroup.getBoolean()){","accumulateRow();","continueNextRow;","addGroupRow();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetVersionColumns(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=newObject[0][0];"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returngetString(left.getString(),right.getString());","caseSQLTokenizer.JAVA_OBJECT:","ObjectlObj=left.getObject();","ObjectrObj=right.getObject();","if(lObjinstanceofNumber&&rObjinstanceofNumber)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.ON:","previousToken();","returnfromSource;","caseSQLTokenizer.CROSS:","nextToken(MISSING_JOIN);","caseSQLTokenizer.COMMA:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnget(colIdx).getInt();","longgetLong(intcolIdx)throwsException{","returnget(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{","returnget(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.INT:","returnreadInt()!=0;","caseSQLTokenizer.BIGINT:","returnreadLong()!=0;","caseSQLTokenizer.REAL:","returnreadFloat()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(true){","TableStorePagestorePage=requestLockImpl(con,pageOperation,page);","if(storePage!=null)","returnstorePage;//thenormalcaseshouldbethefasted","if(endTime==0)","endTime=System.currentTimeMillis()+5000;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["IndexScrollStatusscroll=index.createScrollStatus(expressions);","longl;","while((l=scroll.getRowOffset(true))\>=0){","System.out.println(l);","System.out.println(\"============================\");","privatefinalFileChannelraFile;"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["length-=start;","byte[]b=newbyte[length];","System.arraycopy(bytes,start,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2long(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.ESCAPE_L://{","token=nextToken(MISSING_OJ);","returnrowSource(cmd,tables,SQLTokenizer.ESCAPE_R);","caseSQLTokenizer.SELECT:","ViewResultviewResult=newViewResult(con,select());","tables.add(viewResult);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnresult;","Object[][]getReferenceKeys(SSConnectioncon,StringpkTable,StringfkTable)throwsSQLException{","Listrows=newArrayList();","Stringstables=(pkTable!=null)?getTables(pkTable):getTables(fkTable);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:returnDouble.parseDouble(obj.toString());","longgetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["maxRows=max;","finalpublicvoidsetEscapeProcessing(booleanenable)throwsSQLException{","checkStatement();","finalpublicintgetQueryTimeout()throwsSQLException{","checkStatement();","returnqueryTimeout;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["publicstaticfinalStringTABLE_CORRUPT_PAGE=\"SS-0193\";","publicstaticfinalStringTABLE_MODIFIED=\"SS-0194\";","publicstaticfinalStringTABLE_DEADLOCK=\"SS-0195\";","publicstaticfinalStringTABLE_OR_VIEW_MISSING=\"SS-0196\";","publicstaticfinalStringTABLE_FILE_INVALID=\"SS-0197\";","publicstaticfinalStringTABLE_OR_VIEW_FILE_INVALID=\"SS-0198\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalbooleanrowInserted(){","returnleft.rowInserted()||right.rowInserted();","finalbooleanrowDeleted(){","returnleft.rowDeleted()||right.rowDeleted();","voidnullRow(){","left.nullRow();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["entry.next=e;","e=next;","}while(e!=null);","finalTableStorePageremove(longkey){","inti=(int)(key%table.length);","Entryprev=table[i];"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["node=node.addNode(digit);","if(node.isEmpty()){","if(isLast){","node.addRemainderKey(rowOffset,key,i);","returnnull;","returnnode.addRootValue(key,i);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["static{","addKeyWord(\"BIT\",BIT);","addKeyWord(\"BOOLEAN\",BOOLEAN);","addKeyWord(\"BINARY\",BINARY);","addKeyWord(\"VARBINARY\",VARBINARY);","addKeyWord(\"RAW\",RAW);//aliasforOracleRAWandLONGRAW"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnremoveDateTimeOffset(System.currentTimeMillis());","staticintdayOfWeek(longtime){","return(int)((time/86400000+3)%7);","staticlongparse(java.util.Datedate){","longt=date.getTime();","returnremoveDateTimeOffset(t);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returncmd;","caseSQLTokenizer.REPEATABLE:","token=nextToken(MISSING_READ);","cmd.isolationLevel=Connection.TRANSACTION_REPEATABLE_READ;","returncmd;","caseSQLTokenizer.SERIALIZABLE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalpublicbooleanexecute(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getResultSet()!=null;","finalprivatevoidexecuteImpl(Stringsql)throwsSQLException{","checkStatement();","generatedKeys=null;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["}else{","byte[]b=newbyte[byteLen-start];","System.arraycopy(bytes,start,b,0,b.length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["finalbooleanisNull(intcolIdx)throwsException{","returnstore.isNull(offsets[colIdx]);","@Override","finalbooleangetBoolean(intcolIdx)throwsException{","returnstore.getBoolean(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["Expressioncondition=expression(cmd,0);","if(input!=null){","condition=newExpressionArithmetic(input,condition,ExpressionArithmetic.EQUALS);","nextToken(MISSING_THEN);","Expressionresult=expression(cmd,0);","expr.addCase(condition,result);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().doubleValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalprivateintpointerSize=3;//ifchangethenalsoinresize()","LongTreeList(){","data=newbyte[25];","LongTreeList(longvalue)throwsSQLException{","this();","add(value);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["offset1=offset-2;","offset=getPointer();","firstNode3=firstNode2;","firstNode2=firstNode1;","firstNode1=firstNode;","firstNode=true;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnlock;","caseSQLTokenizer.LONGVARBINARY:","returnnewTableStorePage(con,this,LOCK_INSERT,-1);","default:","thrownewError(\"pageOperation:\"+pageOperation);","TableStorePagerequestWriteLock(SSConnectioncon,TableStorePagereadlock)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["importsmallsql.database.language.Language;","classViewextendsTableView{","finalStringsql;","finalCommandSelectcommandSelect;","View(SSConnectioncon,Stringname,FileChannelraFile,longoffset)throwsException{","super(name,newColumns());"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["while(rows--\>0){","if(!next()){","returnfalse;","}else{","while(rows++\<0){","if(!previous()){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["intgetDataType(intcolIdx){","returncolumnExpressions.get(colIdx).getDataType();","voidbeforeFirst()throwsException{","commandSelect.beforeFirst();","booleanisBeforeFirst()throwsSQLException{","returncommandSelect.isBeforeFirst();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["page=addNull(page,rowOffset,isLastValues);","}else{","switch(expr.getDataType()){","caseSQLTokenizer.REAL:","page=add(page,rowOffset,floatToBinarySortOrder(expr.getFloat()),isLastValues,2);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(param1.isNull())returnnull;","MutableNumericnum=param1.getNumeric();","if(num.getSignum()\<0)num.setSignum(1);","returnnum;","ObjectgetObject()throwsException{","if(param1.isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["setParams(newExpression[]{p1,p2});","intgetFunction(){","returnSQLTokenizer.TIMESTAMPDIFF;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalprivatevoidpatchExpressions(Expressionexpression)throwsSQLException{","Expression[]params=expression.getParams();","if(params==null)return;","for(inti=0;i\<params.length;i++){","expression.setParamAt(patchExpression(params[i]),i);","finalprivateExpressionpatchExpression(Expressionexpr)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["caseNEGATIVE:","caseBIT_NOT:","returnleft.isNull();","default:returnleft.isNull()||right.isNull();","byte[]getBytes()throwsjava.lang.Exception{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["doublefValue=((Float)para1).floatValue();","return(fValue\<0)?newFloat(-fValue):para1;","caseSQLTokenizer.BIGINT:","longlValue=((Number)para1).longValue();","return(lValue\<0)?newLong(-lValue):para1;","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["intv1=value.length;","for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)-(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>=32);","value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;","while(v1\>0&&uebertrag)"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"GRANTOR\",\"GRANTEE\",\"PRIVILEGE\",\"IS_GRANTABLE\"};","thrownewjava.lang.UnsupportedOperationException(\"MethodgetTablePrivileges()notyetimplemented.\");","publicResultSetgetBestRowIdentifier(Stringcatalog,Stringschema,Stringtable,intscope,booleannullable)throwsSQLException{","try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=con.getDatabase(false).getBestRowIdentifier(con,table);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseGRE_EQU:returnleft.getMoney()\>=right.getMoney();","caseLESSER:returnleft.getMoney()\<right.getMoney();","caseLES_EQU:returnleft.getMoney()\<=right.getMoney();","caseUNEQUALS:returnleft.getMoney()!=right.getMoney();","caseBETWEEN:","long_left=left.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.TIMESTAMP:","offset+=8;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","offset+=2;","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","ForeignKeysreferences=((Table)tab).references;","for(inti=0;i\<references.size();i++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["break;","caseSQLTokenizer.BITLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionBitLen();","break;","caseSQLTokenizer.CHARLEN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["writeByte(num.getScale());","writeByte(num.getSignum());","for(inti=0;i\<num.getInternalValue().length;i++){","writeInt(num.getInternalValue()[i]);","MutableNumericreadNumeric(){","int[]value=newint[readByte()];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicfloatfloatValue(){","returnvalue/10000.0F;","publicdoubledoubleValue(){","returnvalue/10000.0;","publiclonglongValue(){","return(long)(value/10000.0);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["intgetDataType(){","switch(getType()){","caseNAME:","caseGROUP_BY:","returnfromEntry.getDataType(colIdx);","caseFIRST:"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,savepoint);","publicvoidreleaseSavepoint(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){","((SSSavepoint)savepoint).transactionTime=0;","return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,newObject[]{savepoint});"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["privatevoidinit(){","this.isInit=true;","PrintWriterpw=DriverManager.getLogWriter();","if(pw!=null)this.printStackTrace(pw);","staticvoidsetLanguage(ObjectlocaleObj)throwsSQLException{","if(language!=null&&localeObj==null)return;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["throwSmallSQLException.createFromException(e);","publicResultSetgetTypeInfo()throwsSQLException{","String[]colNames={\"TYPE_NAME\",\"DATA_TYPE\",\"PRECISION\",\"LITERAL_PREFIX\",\"LITERAL_SUFFIX\",\"CREATE_PARAMS\",\"NULLABLE\",\"CASE_SENSITIVE\",\"SEARCHABLE\",\"UNSIGNED_ATTRIBUTE\",\"FIXED_PREC_SCALE\",\"AUTO_INCREMENT\",\"LOCAL_TYPE_NAME\",\"MINIMUM_SCALE\",\"MAXIMUM_SCALE\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"NUM_PREC_RADIX\"};","Object[][]data={","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.UNIQUEIDENTIFIER)),Utils.getInteger(36),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIT)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privateintdataType;","privateIdentitycounter;//counterforidentityvalues","voidsetName(Stringname){","this.name=name;","voidsetDefaultValue(ExpressiondefaultValue,StringdefaultDefinition){","this.defaultValue=defaultValue;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["if(prevLock!=null){","prevLock.nextLock=lock.nextLock;","}else{","locks.put(pageKey,lock);","con.add(lock);","returnlock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["classCommandUpdateextendsCommandSelect{","privateExpressionssources=newExpressions();","privateExpression[]newRowSources;","CommandUpdate(Loggerlog){","super(log);","voidaddSetting(Expressiondest,Expressionsource){"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["this.id=id;","this.name=name;","this.transactionTime=transactionTime;","publicintgetSavepointId(){","returnid;","publicStringgetSavepointName(){"]": ["|project://smallsql/src/smallsql/database/SSSavepoint.java|"],
"["caseSQLTokenizer.BIT_XOR:returnBIT_XOR;","caseSQLTokenizer.TILDE:returnBIT_NOT;","default:return0;","staticintgetDataType(Expressionleft,Expressionright){","inttypeLeft=left.getDataType();","inttypeRight=right.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicfloatgetFloat(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getFloat();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnrowPos==1;","finalbooleanlast(){","rowPos=1;","returntrue;","finalbooleanisLast(){","returnrowPos==1;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["expr=newExpressionFunctionLocate();","break;","caseSQLTokenizer.LTRIM:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLTrim();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam1.isNull();","finalbooleangetBoolean()throwsException{","returngetDouble()!=0;","finalintgetInt()throwsException{","return(int)getDouble();","finallonggetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["doublegetDouble()throwsException{","returngetInt();","longgetMoney()throwsException{","returngetInt()*10000L;","MutableNumericgetNumeric()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["classViewextendsTableView{","finalStringsql;","finalCommandSelectcommandSelect;","View(SSConnectioncon,Stringname,FileChannelraFile,longoffset)throwsException{","super(name,newColumns());","StorePagestorePage=newStorePage(null,-1,raFile,offset);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["importjava.util.HashMap;","importjava.util.HashSet;","importjava.util.Locale;","importjava.util.Map;","importjava.util.Set;","publicclassLanguage{"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicdoublegetDouble(StringcolumnName)throwsSQLException{","returngetDouble(findColumn(columnName));","publicBigDecimalgetBigDecimal(StringcolumnName,intscale)throwsSQLException{","returngetBigDecimal(findColumn(columnName),scale);","publicbyte[]getBytes(StringcolumnName)throwsSQLException{","returngetBytes(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["invalidParamCount=true;","expr=null;//onlyforcompiler","break;","invalidParamCount=false;","expr=newExpressionArithmetic(params[0],params[1],ExpressionArithmetic.ADD);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BOOLEAN:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getBoolean()==right.getBoolean();","caseUNEQUALS:returnleft.getBoolean()!=right.getBoolean();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["clearRowBuffer();","publicvoidrefreshRow()throwsSQLException{","testNotInsertRow();","relative(0);","publicvoidcancelRowUpdates()throwsSQLException{","testNotInsertRow();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["filePos=0x4000000000000000L;","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","if(store!=null){","if(!store.isValidPage()){","returnfalse;","store.scanObjectOffsets(offsets,dataTypes);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["booleangetBoolean()throwsException{","returnExpressionValue.getBoolean(getObject(),getDataType());","intgetInt()throwsException{","returnExpressionValue.getInt(getObject(),getDataType());","longgetLong()throwsException{","returnExpressionValue.getLong(getObject(),getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["}else{","prev=node;","node=node.nextLetter;","wasNextEntry=false;","prev.value=value;","staticfinalStringgetKeyWord(intkey){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["chars[19]=digits[(daten[offset+8]\>\>4)&0x0F];","chars[20]=digits[(daten[offset+8])&0x0F];","chars[21]=digits[(daten[offset+9]\>\>4)&0x0F];","chars[22]=digits[(daten[offset+9])&0x0F];","chars[24]=digits[(daten[offset+10]\>\>4)&0x0F];","chars[25]=digits[(daten[offset+10])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"D\",D);","addKeyWord(\"T\",T);","addKeyWord(\"TS\",TS);","addKeyWord(\"FN\",FN);","addKeyWord(\"CALL\",CALL);","addKeyWord(\"OJ\",OJ);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(intcolumnIndex)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["this.operation=operation;","super.setParams(newExpression[]{left,right});","ExpressionArithmetic(Expressionleft,Expressionright,Expressionright2,intoperation){","super(FUNCTION);","this.left=left;","this.right=right;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["switch(type){","caseGROUP_BY:","caseFIRST:","if(isEmpty())set(expr.getObject(),expr.getDataType());","break;","caseLAST:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnfalse;","returntrue;","booleanrelative(introws)throwsException{","if(rows==0)return(row!=0);","if(rows\>0){","while(rows--\>0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleFloatFactor[scale]*signum;","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalbooleangetBoolean()throwsException{","returngetDouble()!=0;","finalintgetInt()throwsException{","return(int)getDouble();","finallonggetLong()throwsException{","return(long)getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","if(store==null)throwSmallSQLException.create(Language.LOB_DELETED);","returnnewString(store.readChars(store.readInt()));","voidwriteColumn(Columncolumn)throwsException{","intnewSize=offset+25;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncurrentDS.getInt(colIdx);","finallonggetLong(intcolIdx)throwsException{","returncurrentDS.getLong(colIdx);","finalfloatgetFloat(intcolIdx)throwsException{","returncurrentDS.getFloat(colIdx);","finaldoublegetDouble(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(bytes.length\<=length)returnbytes;","byte[]b=newbyte[length];","System.arraycopy(bytes,bytes.length-length,b,0,length);","returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["this.operation=operation;","super.setParams(newExpression[]{left});","ExpressionArithmetic(Expressionleft,Expressionright,intoperation){","super(FUNCTION);","this.left=left;","this.right=right;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["chars[27]=digits[(daten[offset+11])&0x0F];","chars[28]=digits[(daten[offset+12]\>\>4)&0x0F];","chars[29]=digits[(daten[offset+12])&0x0F];","chars[30]=digits[(daten[offset+13]\>\>4)&0x0F];","chars[31]=digits[(daten[offset+13])&0x0F];","chars[32]=digits[(daten[offset+14]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnnewJoin(type,left,right,expression(cmd,0));","default:","if(!right.hasAlias()){","right.setAlias(token.getName(sql));","token=nextToken();","continue;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["static{","addKeyWord(\"ISNULL\",IFNULL);//aliasforIFNULL,usedfromMSSQLServerwith2parameter,fromMSAccesswith1parameter","addKeyWord(\"IFNULL\",IFNULL);","addKeyWord(\"USER\",USER);","addKeyWord(\"CONVERT\",CONVERT);","addKeyWord(\"CAST\",CAST);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","default:thrownewError();","@Override","voidscanObjectOffsets(int[]offsets,intdataTypes[]){","offset=PAGE_CONTROL_SIZE;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(params.length\>1)param2=params[1];","if(params.length\>2)param3=params[2];","if(params.length\>3)param4=params[3];","finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){","case0:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["voidnullRow(){","commandSelect.from.nullRow();","voidnoRow(){","commandSelect.from.noRow();","finalvoidexecute()throwsException{","commandSelect.from.execute();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["if(tableName==catalog)catalog=null;","switch(tokenType.value){","caseSQLTokenizer.TABLE:","returnalterTable(catalog,tableName);","default:","Object[]param={\"ALTER\"+tokenType.getName(sql)};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.sql.Statement;","importjava.util.ArrayList;","importjava.util.List;","importjava.util.Map;","importjava.util.Properties;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returntrue;","finalvoidbeforeFirst(){","rowIdx=-1;","currentRow=null;","finalbooleanisBeforeFirst(){","returnrowIdx\<0||rowList.size()==0;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(precision\<0)throwSmallSQLException.create(Language.COL_INVALID_SIZE,newObject[]{newInteger(precision),name});","this.precision=precision;","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(dataType,precision);","intgetColumnSize(){","if(SSResultSetMetaData.isNumberDataType(dataType))"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["if(pos\>=0)returnnodes[pos];","returnnull;","finalchar[]getRemainderValue(){","returnremainderKey;","finalIndexNodeaddNode(chardigit)throwsSQLException{","if(remainderKey!=null)moveRemainderValue();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["intmonth;","intdayofyear;","intday;","inthour;","intminute;","intsecond;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privatebooleanisAfterLast;","privateLongLongListrowPositions;//neededforgetRowPosition()andsetRowPosition()","privateintrow;//currentrownumber","JoinScrollscroll;","Join(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["{FILE_TOONEW,\"Laversione({0})delfile\'\'{1}\'\'Ã¨tropporecenteperquestoruntime.\"},","{FILE_TOOOLD,\"Laversione({0})delfile\'\'{1}\'\'Ã¨troppovecchiaperquestoruntime.\"},","{FILE_CANT_DELETE,\"File\'\'(0)\'\'nonpossonoessereeliminati.\"},","{ROW_0_ABSOLUTE,\"Ilnumerodiriga0nonÃ¨validoperilmetodo\'\'absolute()\'\'.\"},","{ROW_NOCURRENT,\"Nessunarigacorrente.\"},","{ROWS_WRONG_MAX,\"Numeromassimodirighenonvalido({0}).\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(token!=null&&token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);","intvalue;","try{","value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintRTRIM=1117;","staticfinalintSOUNDEX=1118;","staticfinalintSPACE=1119;","staticfinalintSUBSTRING=1120;","staticfinalintTRIM=1121;","staticfinalintUCASE=1122;//laststringfunction--\>seeSSDatabaseMetaData.getStringFunctions"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnotrequested.\"},","{SEQUENCE_HEX_INVALID,\"Invalidhexsequenceat{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Invalidhexsequenceatposition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Syntaxerroratoffset{0}on\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Syntaxerror,unexpectedendofSQLstring.\"},","{STXADD_ADDITIONAL_TOK,\"AdditionaltokenafterendofSQLstatement.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["nextToken(MISSING_ALL);","nextToken(MISSING_SELECT);","union.addDataSource(newViewResult(con,singleSelect()));","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.ORDER){","order(selCmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.rowSource=rowSource;","this.orderBy=orderBy;","finalbooleanisScrollable(){","returntrue;","finalvoidexecute()throwsException{","rowSource.execute();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","col.setScale(value);","nextToken(MISSING_PARENTHESIS_R);","}else{","col.setPrecision(18);//defaultPrecisionfordecimalandnumeric","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetBlob(findColumn(columnName));","publicClobgetClob(StringcolumnName)throwsSQLException{","returngetClob(findColumn(columnName));","publicArraygetArray(StringcolumnName)throwsSQLException{","returngetArray(findColumn(columnName));","publicDategetDate(intcolumnIndex,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalclassExpressionFunctionMonthextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.MONTH;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionMonth.java|"],
"["tokenStart=i+1;","break;","case\'/\':","if((i+1\<sql.length)&&(sql[i+1]==\'*\')){","i++;","tokenStart=i+1;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["result[0]=(byte)(value\>\>24);","result[1]=(byte)(value\>\>16);","result[2]=(byte)(value\>\>8);","result[3]=(byte)(value);","returnresult;","staticStringbytes2hex(byte[]bytes){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(prevLock!=null){","prevLock.nextLock=lock;","}else{","locks.put(pageKey,lock);","con.add(lock);","returnlock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","intoffset=token.offset+token.length;","token=nextToken();","if(token!=null)offset=token.offset;","previousToken();","Expressionexpr=expression(cmdCreate,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(token.value!=SQLTokenizer.WHEN){","previousToken();","input=expression(cmd,0);","token=nextToken(MISSING_WHEN_ELSE_END);","while(true){","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidsetNewAutoIncrementValue(Expressionobj)throwsException{","if(identity){","counter.setNextValue(obj);","booleanisCaseSensitive(){","returncaseSensitive;","voidsetNullable(booleannullable){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returnfalse;","staticbooleanisNumberDataType(intdataType){","returnisSignedDataType(dataType)||dataType==SQLTokenizer.TINYINT;","staticbooleanisBinaryDataType(intdataType){","switch(dataType){","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["@Override","finalTableViewgetTableView(){","returntable;","@Override","finalvoiddeleteRow()throwsSQLException{","store.deleteRow(con);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["System.arraycopy(data,oldOffset+2+pointerSize,data,oldOffset,size-oldOffset);","offset=oldOffset;","finalprivatevoidremoveNodeLastLevel()throwsSQLException{","intoldOffset=offset;","correctPointers(0,oldOffset,-2,0);","size-=2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["row=0;","returnfalse;","finalvoidafterLast()throwsException{","dataSourceIdx=dataSources.size()-1;","currentDS=dataSources.get(dataSourceIdx);","currentDS.afterLast();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["break;","caseSQLTokenizer.CALL://callescapesequence","thrownewjava.lang.UnsupportedOperationException(\"callescapesequence\");","default:thrownewError();","token=nextToken(ESCAPE_MISSING_CLOSE);","returnexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["columns);","Object[]param={\"CreateIndex\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandCreateDatabasecreateProcedure()throwsSQLException{","Object[]param={\"CreateProcedure\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case2:","param3=param;","break;","case3:","param4=param;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["break;","case\'D\':","case\'T\':","c=\'3\';","break;","case\'L\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["details2.year+=param1.getLong();","returnDateTime.calcMillis(details2);","default:thrownewError();","floatgetFloat()throwsException{","returngetLong();","doublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["expr=newExpressionArithmetic(expr,expr2,ExpressionArithmetic.DIV);","returnexpr;","default:","throwcreateSyntaxError(token,Language.STXADD_FUNC_UNKNOWN);","if(invalidParamCount){","throwcreateSyntaxError(token,Language.STXADD_PARAM_INVALID_COUNT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnreadFloat()!=0;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnreadDouble()!=0;","caseSQLTokenizer.MONEY:","returnreadLong()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return-1;","finalprivatevoidpatchExpressions(Expressionsexprs)throwsSQLException{","if(exprs==null)return;","for(inti=0;i\<exprs.size();i++){","exprs.set(i,patchExpression(exprs.get(i)));","finalprivatevoidpatchExpressions(Expressionexpression)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["token=i;","break;","if(operation==NEGATIVE)token=SQLTokenizer.MINUS;","if(operation==ISNOTNULL)token=SQLTokenizer.IS;","Stringkeyword=SQLTokenizer.getKeyWord(token);","if(keyword==null)keyword=\"\"+(char)token;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["newsize=0xFFFFFF;","if(newsize==data.length)throwSmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);","byte[]temp=newbyte[newsize];","System.arraycopy(data,0,temp,0,data.length);","data=temp;","finalintgetSize(){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.SQL_TSI_DAY:","return(int)(param2.getLong()/86400000-param1.getLong()/86400000);","caseSQLTokenizer.SQL_TSI_WEEK:{","longday2=param2.getLong()/86400000;","longday1=param1.getLong()/86400000;","return(int)((day2+3)/7-(day1+3)/7);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalvoidafterLast(){","longList=null;","nodeStack.setSize(1);","((IndexNodeScrollStatus)nodeStack.peek()).afterLast();","privatefinallonggetReturnValue(Objectvalue){","if(rootPage.getUnique()){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["if(columns.size()==1){","returnfalse;","Expressionssingle=newExpressions();","for(inti=0;i\<columns.size();i++){","single.clear();","single.add(columns.get(i));"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["}else{","returnrowOffset;","while(true){","IndexNodeScrollStatusstatus=(IndexNodeScrollStatus)nodeStack.peek();","intlevel=status.level;","if(!status.asc^scroll){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["caseUNEQUALS:returnleft.getFloat()!=right.getFloat();","caseBETWEEN:","float_left=left.getFloat();","return_left\>=right.getFloat()&&right2.getFloat()\>=_left;","default:","returngetFloat()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"BYTE\",TINYINT);","addKeyWord(\"TINYINT\",TINYINT);","addKeyWord(\"SMALLINT\",SMALLINT);","addKeyWord(\"INTEGER\",INT);","addKeyWord(\"INT\",INT);","addKeyWord(\"SERIAL\",COUNTER);//aliasforMySQLandPostgreSQL"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["String[]keyNames=st.getGeneratedKeyNames();","for(inti=0;i\<keyNames.length;i++){","if(column.getName().equalsIgnoreCase(keyNames[i])){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["publicstaticfinalStringSYNTAX_BASE_OFS=\"SS-0610\";","publicstaticfinalStringSYNTAX_BASE_END=\"SS-0611\";","publicstaticfinalStringSTXADD_ADDITIONAL_TOK=\"SS-0612\";","publicstaticfinalStringSTXADD_IDENT_EXPECT=\"SS-0613\";","publicstaticfinalStringSTXADD_IDENT_EMPTY=\"SS-0614\";","publicstaticfinalStringSTXADD_IDENT_WRONG=\"SS-0615\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["voidsetAutoIncrement(booleanidentity){","this.identity=identity;","intinitAutoIncrement(FileChannelraFile,longfilePos)throwsIOException{","if(identity){","counter=newIdentity(raFile,filePos);","defaultValue=newExpressionValue(counter,SQLTokenizer.BIGINT);"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["finalvoidset(Objectvalue,int_dataType,intlength)throwsSQLException{","set(value,_dataType);","this.length=length;","finalvoidset(ObjectnewValue,intnewDataType)throwsSQLException{","this.value=newValue;","this.dataType=newDataType;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"SQL_TSI_MINUTE\",SQL_TSI_MINUTE);","addKeyWord(\"HH\",SQL_TSI_HOUR);","addKeyWord(\"SQL_TSI_HOUR\",SQL_TSI_HOUR);","addKeyWord(\"DD\",SQL_TSI_DAY);","addKeyWord(\"SQL_TSI_DAY\",SQL_TSI_DAY);","addKeyWord(\"WK\",SQL_TSI_WEEK);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intminute;","intsecond;","intmillis;","Details(longtime){","intt=(int)(time%86400000);","intd=(int)(time/86400000);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnmetaData;","publicObjectgetObject(intcolumnIndex)throwsSQLException{","try{","Objectobj=getValue(columnIndex).getApiObject();","wasNull=obj==null;","returnobj;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(params!=null){","for(intp=0;p\<params.length;p++){","params[p].optimize();","publicbooleanequals(Objectexpr){","if(!(exprinstanceofExpression))returnfalse;","if(((Expression)expr).type==type){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["if(isLast){","node.saveValue(rowOffset);","returnnull;","returnnode.addRoot();","finalvoidclear(){","rootPage.clear();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.ASC:","token=nextToken();","if(token==null){","previousToken();","returnlist;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){","style=expression(cmd,0);","}else","previousToken();","nextToken(MISSING_PARENTHESIS_R);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["inti=valueLength-1;","booleanisCarryOver=true;","while(i\>=0&&isCarryOver)","isCarryOver=(value[i--]+=1)==0;","if(valueLength\>1&&value[0]==0){","int[]temp=newint[valueLength-1];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnfalse;","publicintgetMaxStatementLength(){","return0;","publicintgetMaxStatements(){","return0;","publicintgetMaxTableNameLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){","intnextEntry=getUnsignedShort();","if(nextEntry==octet){","if(shift==0){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["booleanisBeforeFirst()throwsSQLException{","returncommandSelect.isBeforeFirst();","booleanisFirst()throwsSQLException{","returncommandSelect.isFirst();","booleanfirst()throwsException{","returncommandSelect.first();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["finalintgetType(){returntype;}","StringgetTableName(){","returnnull;","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);","intgetScale(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","switch(dataType){","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intlength=bytes.length;","while(length\>0&&bytes[length-1]==0){","length--;","byte[]b=newbyte[length];","System.arraycopy(bytes,0,b,0,length);","returnb;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["buffer.append((char)((v%100)/10+\'0\'));","buffer.append((char)((v%10)+\'0\'));","returnbuffer.toString();","publicbooleanequals(Objectobj){","return(objinstanceofMoney&&((Money)obj).value==value);","publicinthashCode(){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["else","if(newValueinstanceofBoolean)","this.dataType=SQLTokenizer.BOOLEAN;","else","if(newValueinstanceofMoney)","this.dataType=SQLTokenizer.MONEY;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["return19;","caseSQLTokenizer.REAL:","return13;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return17;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["longday2=param2.getLong()/86400000;","longday1=param1.getLong()/86400000;","return(int)((day2+3)/7-(day1+3)/7);","}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["if(database==null)","returnSSDriver.URL_PREFIX;","returnSSDriver.URL_PREFIX+\':\'+database.getName();","publicStringgetUserName(){","return\"\";","publicbooleanisReadOnly(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["previousToken();","return;","privatevoidorder(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);","cmd.setOrder(expressionTokenList(cmd,SQLTokenizer.ORDER));","privatevoidlimit(CommandSelectselCmd)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["right.first();","left.nullRow();","while(isFullNotValid[fullReturnCounter++]){","if(fullReturnCounter\>=fullRowCount){","returnfalse;","right.next();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnbuf.toString();","case20:","case120://ODBCkannonish;yyyy-mm-ddhh:mi:ss(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionCotextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.COT;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","return1/Math.tan(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCot.java|"],
"["break;","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetFromLocaleTree(dfltLocaleStr);","catch(IllegalArgumentExceptione){","returnnewLanguage();//defaulttoEnglish","privatestaticLanguagegetFromLocaleTree(StringlocaleStr)","throwsIllegalArgumentException{","Stringpart=localeStr;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["ObjectrObj=right.getObject();","if(lObjinstanceofNumber&&rObjinstanceofNumber)","returnnewDouble(getDoubleImpl(((Number)lObj).doubleValue(),((Number)rObj).doubleValue()));","else","returngetString(lObj.toString(),rObj.toString());","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["buf.append(\',\');","buf.append(\'\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case8://hh:mm:ss","case108:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{MONTH_TOOLARGE,\"MonthsaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DaysaretoolargeinDATEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"HoursaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"MinutesaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"SecondsaretoolargeinTIMEorTIMESTAMPvalue\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"MillisecondsaretoolargeinTIMESTAMPvalue\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["intnewScale=Math.max(scale+5,num.scale+4);","BigDecimalbig=toBigDecimal().divide(num.toBigDecimal(),newScale,BigDecimal.ROUND_HALF_EVEN);","setValue(big.unscaledValue().toByteArray());","scale=big.scale();","signum=big.signum();","finalvoiddiv(intquotient){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{UNSUPPORTED_CONVERSION_OPER,\"Unsupportedconversiontodatatype\'\'{0}\'\'fromdatatype\'\'{1}\'\'foroperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"Unsupporteddatatype\'\'{0}\'\'foroperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"Unsupporteddatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Unsupportedconversiontodatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"UnsupportedtypeforCONVERTfunction:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"Unsupporteddatatype\'\'{0}\'\'forSUMfunction.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["index=newIndex(false);","right.beforeFirst();","while(right.next()){","index.addValues(right.getRowPosition(),rightEx);","booleannext()throwsException{","switch(compare){"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["updatePointer.page=newbyte[PAGE_CONTROL_SIZE];","updatePointer.writeFinsh(con);","status=DELETED;","if(sharedPageData){","page=newbyte[PAGE_CONTROL_SIZE];","writeFinsh(con);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnUtils.bytes2double(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:","returnreadTime();","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;","move();","finalbooleanrowInserted(){","returnfalse;","finalbooleanrowDeleted(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["returnbuf.toString();","case4://germandd.mm.yy","formatNumber(details.day,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalvoidadd(longvalue){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=value;","finalvoidclear(){","size=0;"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["returnfilePos\>=firstOwnInsert;","@Override","finalbooleanrowDeleted(){","if(storeinstanceofStoreNull&&store!=Store.NULL){","returntrue;","if(storeinstanceofStoreImpl&&"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseConnection.TRANSACTION_SERIALIZABLE:","returntrue;","returnfalse;","publicbooleansupportsDataDefinitionAndDataManipulationTransactions(){","returntrue;","publicbooleansupportsDataManipulationTransactionsOnly(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:returnFloat.parseFloat(obj.toString());","doublegetDouble()throwsException{","returngetDouble(getObject(),dataType);","staticdoublegetDouble(Objectobj,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnfalse;","finalprivatebooleanmoveToValidRow()throwsException{","while(filePos\>=0){","if(moveToRow())","returntrue;","setNextFilePos();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["return(Language)Class.forName(langClassName).newInstance();","catch(IllegalAccessExceptione){","assert(false):\"Internalerror:mustneverhappen.\";","catch(ClassNotFoundExceptione){","catch(InstantiationExceptione){","assert(false):\"ErrorduringLanguageinstantiation:\"+e.getMessage();"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["value=newint[1];","if(complement\<0){","value[0]=-complement;","signum=-1;","}else{","value[0]=complement;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["privateIndexindex;","privateintrow;","Distinct(RowSourcerowSource,Expressionscolumns){","this.rowSource=rowSource;","this.distinctColumns=columns;","finalvoidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.TINYINT);","publicvoidsetShort(intparameterIndex,shortx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.SMALLINT);","publicvoidsetInt(intparameterIndex,intx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["expressions.add(newExpressionName(columnName));","}else{","expressionDefList(cmd,expressions,columns);","returnnewIndexDescription(contrainName,tableName,constraintType,expressions,columns);","privateColumndatatype(booleanisEscape)throwsSQLException{","SQLTokentoken;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.year%100,2,buf);","returnbuf.toString();","case107://Mondd,yyyy","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["voidwriteBoolean(booleanvalue){","intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value?1:0);","booleanreadBoolean(){","returnpage[offset++]!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoiddeleteRow(SSConnectioncon)throwsSQLException{","intsavepoint=con.getSavepoint();","try{","if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_DELETE);","if(tables.size()==0)"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["formatNumber(details.day,2,buf);","returnbuf.toString();","case3://britshdd/mm/yy","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalint[]MONTH_DAYS={0,31,59,90,120,151,181,212,243,273,304,334};","privatestaticfinalString[]SHORT_MONTHS=newDateFormatSymbols().getShortMonths();","DateTime(longtime,intdataType){","switch(dataType){","caseSQLTokenizer.SMALLDATETIME:","intseconds=(int)(time%60000);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["}else{","status.idx=status.nodes.length;//topreventproblemswithscrollbackaftermultiplecallsaftertheend.","return-1;","IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","}else{"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["lock.rollback();","returnlock;","caseSQLTokenizer.INSERT:{","if(serializeConnections.size()\>1)returnnull;","if(serializeConnections.size()==1&&serializeConnections.get(con)==null)returnnull;","TableStorePageInsertlock=newTableStorePageInsert(con,this,LOCK_INSERT);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(isNull())returnnull;","byte[]str1=param1.getBytes();","byte[]str2=param2.getBytes();","intlength=str2.length;","if(length==0){","returnstr1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returnfrom.isAfterLast();","finalbooleanabsolute(introw)throwsException{","returnfrom.absolute(row);","finalbooleanrelative(introws)throwsException{","returnfrom.relative(rows);","finalintgetRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","Object[]row=newObject[13];","row[0]=getName();//TABLE_CAT"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["voidwriteSmallDateTime(longdatetime){","writeInt((int)(datetime/60000));","longreadSmallDateTime(){","returnreadInt()*60000L;","voidwriteString(StringstrDaten)throwsSQLException{","writeString(strDaten,Short.MAX_VALUE,true);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.SMALLINT);","publicvoidsetInt(intparameterIndex,intx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.INT);","publicvoidsetLong(intparameterIndex,longx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["cmd.execute(con,this);","publicvoidsetNull(intparameterIndex,intsqlType)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,null,SQLTokenizer.NULL);","publicvoidsetBoolean(intparameterIndex,booleanx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["finalprivateFileChannelraFile;","finalprivatebyte[]page=newbyte[8];","privatelongvalue;","publicIdentity(FileChannelraFile,longfilePos)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(page);","synchronized(raFile){"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["second=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","if(idx1\<length){","StringstrMillis=datetime.substring(idx1).trim();","switch(strMillis.length()){","case1:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["checkStatement();","if(cmdinstanceofCommandSelect){","try{","((CommandSelect)cmd).compile(con);","SSResultSetMetaDatametaData=newSSResultSetMetaData();","metaData.columns=cmd.columnExpressions;"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["throwSmallSQLException.createFromException(e);","publicfloatgetFloat(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getFloat();"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["return7;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return15;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalvoidadd(longvalue)throwsSQLException{","offset=0;","if(size==0){","writeShort((int)(value\>\>48));","writePointer(offset+pointerSize+2);","writeShort(0);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returncreate();","caseSQLTokenizer.DROP:","returndrop();","caseSQLTokenizer.ALTER:","returnalter();","caseSQLTokenizer.SET:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}elsefullRightRowCounter++;","}else{","if(type==Join.FULL_JOIN){","while(right.next()){","fullRightRowCounter++;","fullRowCount=fullRightRowCounter;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.TABLE:","caseSQLTokenizer.VIEW:","caseSQLTokenizer.INDEX:","caseSQLTokenizer.PROCEDURE:","returnnewCommandDrop(con.log,catalog,name,tokenType.value);","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Object[]params){","Stringmessage=translateMsg(messageCode,params);","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreateFromException(Throwablee){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["returndaten;","voidwriteBinary(byte[]daten,intlengthColumn,booleanvarBinary)throwsSQLException{","intlength=daten.length;","if(lengthColumn\<length){","Objectparams=newObject[]{newInteger(length),newInteger(lengthColumn)};","throwSmallSQLException.create(Language.VALUE_BIN_TOOLARGE,params);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["System.arraycopy(data,oldOffset+2,data,oldOffset,size-oldOffset);","offset=oldOffset;","finalprivatevoidcorrectPointers(intstartOffset,intoldOffset,intdiff,intlevel){","offset=startOffset;","booleanfirstNode=true;","while(offset\<size){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicbooleanstoresMixedCaseQuotedIdentifiers(){","returntrue;","publicStringgetIdentifierQuoteString(){","return\"\\\"\";","publicStringgetSQLKeywords(){","return\"database,use\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["protectedfinalvoidaddMessages(String[][]entries)","throwsIllegalArgumentException{","Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<entries.length;i++){","Stringkey=entries[i][0];","if(!inserted.add(key)){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privateintmaxRows;","privateintmaxFieldSize;","privateArrayListbatches;","privatebooleanneedGeneratedKeys;","privateResultSetgeneratedKeys;","privateint[]generatedKeyIndexes;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["Filefile=newFile(fileName);","if(!file.exists())","throwSmallSQLException.create(Language.TABLE_OR_VIEW_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());","ByteBufferbuffer=ByteBuffer.allocate(8);","raFile.read(buffer);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["previousToken();","returntable;","privateJoinjoin(Commandcmd,DataSourcestables,RowSourceleft,inttype)throwsSQLException{","RowSourceright=rowSource(cmd,tables,0);","SQLTokentoken=nextToken();","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["super(log);","voidaddSetting(Expressiondest,Expressionsource){","columnExpressions.add(dest);","sources.add(source);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","intcount=columnExpressions.size();"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","publicclassStoreImplextendsStore{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintPERCENT=\'%\';//37","staticfinalintBIT_AND=\'&\';//38","staticfinalintPARENTHESIS_L=\'(\';//40","staticfinalintPARENTHESIS_R=\')\';//41","staticfinalintASTERISK=\'*\';//42","staticfinalintPLUS=\'+\';//43"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return((Number)obj).doubleValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnUtils.doubleToMoney(((Number)obj).doubleValue());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","return((Money)obj).value;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicbooleansupportsUnion(){","returntrue;","publicbooleansupportsUnionAll(){","returntrue;","publicbooleansupportsOpenCursorsAcrossCommit(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP).toString();","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnUtils.bytes2unique(page,this.offset);","default:thrownewError();","@Override","byte[]getBytes(intvalueOffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getInt();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publiclonggetLong(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["finalprivateStorePageLinklink=newStorePageLink();","TableStorePageInsert(SSConnectioncon,Tabletable,intlockType){","super(con,table,lockType,-1);","link.page=this;","link.filePos=fileOffset;","finallongcommit()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["executeImpl(sql);","returncmd.getUpdateCount();","finalpublicbooleanexecute(Stringsql)throwsSQLException{","executeImpl(sql);","returncmd.getResultSet()!=null;","finalprivatevoidexecuteImpl(Stringsql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","breakLoop;","caseSQLTokenizer.COMMA:","continue;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["isOuterValid=false;","right.nullRow();","returntrue;","fullRowCount=Math.max(fullRowCount,fullRightRowCounter);","fullRightRowCounter=0;","isOuterValid=true;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["if(dataTypeIdx\<0)thrownewError(\"getDataType():\"+typeLeft+\",\"+typeRight);","returnDatatypeRange[dataTypeIdx];","staticfinalintOR=11;//OR","staticfinalintAND=21;//AND","staticfinalintNOT=31;//NOT","staticfinalintBIT_OR=41;//|"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["FileChannelchannel=raFile.getChannel();","if(!readonly){","try{","FileLocklock=channel.tryLock();","if(lock==null){","throwSmallSQLException.create(Language.CANT_LOCK_FILE,file);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["for(inti=0;i\<keyNames.length;i++){","if(column.getName().equalsIgnoreCase(keyNames[i])){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;","if(needGeneratedKeys&&generatedKeysType==2){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["formatNumber(details.year%100,2,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicvoidsetBoolean(StringparameterName,booleanx)throwsSQLException{","setBoolean(findParameter(parameterName),x);","publicvoidsetByte(StringparameterName,bytex)throwsSQLException{","setByte(findParameter(parameterName),x);","publicvoidsetShort(StringparameterName,shortx)throwsSQLException{","setShort(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseNOT:","caseLIKE:","caseISNULL:","caseISNOTNULL:","returnSQLTokenizer.BOOLEAN;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatHour12(details.hour,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{VALUE_NULL_INVALID,\"Nullvaluesarenotvalidforcolumn\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Cannotconverta{0}valuetoa{1}value.\"},","{BYTEARR_INVALID_SIZE,\"Invalidbytearraysize{0}forUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjectwasdeleted.\"},","{PARAM_CLASS_UNKNOWN,\"Unknownparameterclass:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}isempty.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["ObjectgetObject()throwsException{","if(isNull())returnnull;","returnUtils.getInteger(getInt());","finalStringgetString()throwsException{","if(isNull())returnnull;","returnString.valueOf(getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["scale+=5;","divImpl(quotient);","finalprivatevoiddivImpl(intquotient){","if(quotient==1)return;","if(quotient\<0){","quotient=-quotient;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.min(((MutableInteger)value).value,expr.getInt());","break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.min(((MutableLong)value).value,expr.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnexpr;","returnnull;","ExpressionFunctionCasecaseExpr(finalCommandcmd)throwsSQLException{","ExpressionFunctionCaseexpr=newExpressionFunctionCase();","SQLTokentoken=nextToken(MISSING_EXPRESSION);","Expressioninput=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(intc=0;c\<columnExpressions.size();c++){","ExpressionsqlCol=columnExpressions.get(c);","StringsqlColName=sqlCol.getName();","intidx=table.findColumnIdx(sqlColName);","if(idx\>=0){","matrix[idx]=c;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["DateTimedateTime;","this.value=dateTime=DateTime.valueOf((java.util.Date)newValue);","this.dataType=dateTime.getDataType();","}else","if(newValueinstanceofbyte[])","this.dataType=SQLTokenizer.VARBINARY;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,char[]key,booleanisLast)throwsSQLException{","intlength=key.length;","inti=-1;","while(true){","chardigit=(i\<0)?(length==0?(char)1:2)"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["previousToken();","Stringscolumns=newStrings();","Expressionsexpressions=newExpressions();","if(columnName!=null){","columns.add(columnName);","expressions.add(newExpressionName(columnName));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return-1;","staticintindexOf(intvalue,int[]list){","intoffset=0;","for(intend=list.length;offset\<end;offset++){","if((list[offset])==value)returnoffset;","return-1;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseMUL:returnleft.getLong()*right.getLong();","caseDIV:returnleft.getLong()/right.getLong();","caseNEGATIVE:return-left.getLong();","caseMOD:returnleft.getLong()%right.getLong();","caseBIT_NOT:return~right.getInt();","throwcreateUnspportedConversion(SQLTokenizer.LONG);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.MONEY:","((Money)value).value=Math.max(((Money)value).value,expr.getMoney());","break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnreadInt()/(float)10000.0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().floatValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{INDEX_CORRUPT,\"ErrorbeimLadendesIndex.DieIndexDateiistbeschÃ¤digt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ZuvieleidentischeEintrÃ¤geimIndex.\"},","{FILE_TOONEW,\"Dateiversion({0})derDatei\'\'{1}\'\'istzuneufÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_TOOOLD,\"Dateiversion({0})derDatei\'\'{1}\'\'istzualtfÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_CANT_DELETE,\"Datei\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{ROW_0_ABSOLUTE,\"Datensatz0istungÃ¼ltigfÃ¼rdieMethodeabsolute().\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["break;","caseSQLTokenizer.ASIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionASin();","break;","caseSQLTokenizer.ATAN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intvalue=0;","for(inti=0;i\<pointerSize;i++){","value\<\<=8;","value+=(data[offset++]&0xFF);","returnvalue;","finalprivatevoidwritePointer(intvalue){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["importjava.util.*;","importjava.sql.SQLException;","importjava.sql.Types;","importsmallsql.database.language.Language;","publicclassSQLTokenizer{","privatestaticfinalintNOT_COMMENT=0;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","default:thrownewError();","store.offset=PAGE_CONTROL_SIZE;","returnstore;","}catch(Throwableth){","throwSmallSQLException.createFromException(th);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnscale;","voidsetScale(intnewScale){","if(newScale==scale)return;","intfactor=1;","if(newScale\>scale){","for(;newScale\>scale;scale++){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["staticfinalintFOREIGN=252;","staticfinalintKEY=253;","staticfinalintUNIQUE=254;","staticfinalintCLUSTERED=255;","staticfinalintNONCLUSTERED=256;","staticfinalintREFERENCES=257;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(month\<2&&year%4==0&&(year%100!=0||year%400==0))","result-=86400000L;","returnresult;","staticlongnow(){","returnremoveDateTimeOffset(System.currentTimeMillis());","staticintdayOfWeek(longtime){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["ColumntableColumn=tableColumns.get(i);","Expressionsrc=updateValues[i];","if(src==null)src=tableColumn.getDefaultValue(con);","store.writeExpression(src,tableColumn);","store.writeFinsh(con);","insertStorePages.add(store.getLink());"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnreadNumeric().longValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnLong.parseLong(readString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","for(;k\<i;k++){","charcc=sql[k];","if((cc!=\'-\'&&cc!=\'$\'&&cc\<\'0\')||cc\>\'9\')break;//isidentifier--\>break","if(k\>=i)break;//precedingtokensareonlydigitsthatitisnotanidentifierelseafloatingnumber","case\'-\':"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["list.add(expr);","SQLTokentoken=nextToken();","if(listType==SQLTokenizer.ORDER&&token!=null){","switch(token.value){","caseSQLTokenizer.DESC:","expr.setAlias(SQLTokenizer.DESC_STR);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:","returnreadShort();","caseSQLTokenizer.INT:","returnreadInt();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetReturnValue(status.nodeValue);","if(idx\<0){","if(nodeStack.size()\>1){","nodeStack.pop();","continue;","}else{"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnreadLongString().getBytes();","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["formatNumber(details.year,4,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returntype==Expression.NAME||type==Expression.FUNCTION;","publicbooleanisCurrency(intcolumn)throwsSQLException{","switch(getColumnExpression(column).getDataType()){","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:","page=find(page,stringToBinarySortOrder(expr.getString(),false),nodeList);","break;","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","returnbuf.toString();","case21:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["this.lockType=lockType;","byte[]getData(){","returnpage;","longcommit()throwsSQLException{","if(nextLock!=null){","fileOffset=nextLock.commit();"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","usableLock=lock;","}else{","if(lock.lockType==LOCK_WRITE){","returnnull;//writelockofanotherConnection","prevLock=lock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Object[]row=newObject[14];","row[0]=getName();//PKTABLE_CAT","row[2]=foreignKey.pkTable;//PKTABLE_NAME","row[3]=columnsPk.get(c);//PKCOLUMN_NAME","row[4]=getName();//FKTABLE_CAT","row[6]=foreignKey.fkTable;//FKTABLE_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["for(;newScale\>scale;scale++){","factor*=10;","if(factor==1000000000){","mul(factor);","factor=1;","mul(factor);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{ARGUMENT_INVALID,\"UngÃ¼ltigesArgumentinMethodesetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeyswurdennichtangefordert.\"},","{SEQUENCE_HEX_INVALID,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"SyntaxErrorbeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"SyntaxError,unerwartetesEndedesSQLStrings.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["if(value\<Integer.MIN_VALUE)","returnInteger.MIN_VALUE;","return(int)value;","staticlongdouble2long(doublevalue){","if(value\>Long.MAX_VALUE)","returnLong.MAX_VALUE;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["cmd.addParameter(param);","returnparam;","caseSQLTokenizer.CASE:","returncaseExpr(cmd);","caseSQLTokenizer.MINUS:","caseSQLTokenizer.PLUS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"OJ\",OJ);","staticfinalintOR=500;","staticfinalintAND=501;","staticfinalintIS=502;","staticfinalintNOT=503;","staticfinalintNULL=504;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["ArrayListnodeList=newArrayList();","Objectobj=findRows(expressions,true,nodeList);","if(!rootPage.getUnique()){","LongTreeListlist=(LongTreeList)obj;","list.remove(rowOffset);","if(list.getSize()\>0)return;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["privatelongvalue;","publicIdentity(FileChannelraFile,longfilePos)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(page);","synchronized(raFile){","raFile.position(filePos);","raFile.read(buffer);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["returnstorePage;//thenormalcaseshouldbethefasted","if(endTime==0)","endTime=System.currentTimeMillis()+5000;","longwaitTime=endTime-System.currentTimeMillis();","if(waitTime\<=0)","throwSmallSQLException.create(Language.TABLE_DEADLOCK,name);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returntemp/scaleFloatFactor[scale]*signum;","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returntemp/scaleFloatFactor[scale]*signum;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["rollback();","returnfileOffset;","if(lockType==TableView.LOCK_READ)","returnfileOffset;","returnsuper.commit();","finalvoidfreeLock(){"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["return!isNext;","finalbooleanisAfterLast(){","introwCount=getRowCount();","returnrow\>rowCount||rowCount==0;","voidafterLast()throwsException{","useSetRowPosition=false;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(value==null){","if(expr.isNull())","dataType=expr.getDataType();","else","initValue(expr);","}elseif(!expr.isNull()){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["switch(exprName.getType()){","caseExpression.MAX:","caseExpression.MIN:","caseExpression.FIRST:","caseExpression.LAST:","caseExpression.SUM:"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["intgetPrecision(){","returncolumn.getPrecision();","intgetScale(){","returncolumn.getScale();","intgetDisplaySize(){","returncolumn.getDisplaySize();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["caseSQLTokenizer.REAL:","returnreadFloat()!=0;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnreadDouble()!=0;","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(maxRows\>=0&&from.getRow()\>=maxRows){","from.afterLast();","returnfalse;","returnfrom.next();","finalbooleanlast()throwsException{","if(maxRows\>=0){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"REAL\"});","@Override","doublegetDouble(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.right=right;","this.right2=right2;","this.operation=operation;","super.setParams(newExpression[]{left,right,right2});","ExpressionArithmetic(Expressionleft,ExpressionsinList,intoperation){","super(FUNCTION);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["SQLTokenizer.BIT,","SQLTokenizer.BOOLEAN,","SQLTokenizer.LONGNVARCHAR,","SQLTokenizer.UNIQUEIDENTIFIER,","SQLTokenizer.NVARCHAR,","SQLTokenizer.NCHAR,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicstaticfinalStringLOB_DELETED=\"SS-0341\";","publicstaticfinalStringPARAM_CLASS_UNKNOWN=\"SS-0370\";","publicstaticfinalStringPARAM_EMPTY=\"SS-0371\";","publicstaticfinalStringPARAM_IDX_OUT_RANGE=\"SS-0372\";","publicstaticfinalStringCOL_DUPLICATE=\"SS-0400\";","publicstaticfinalStringCOL_MISSING=\"SS-0401\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["for(inti=0;i\<size;i++){","cols[i]=cols[i].copy();","copy.size=size;","returncopy;","privatefinalvoidresize(intnewSize){","Column[]dataNew=newColumn[newSize];"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["publicvoidreleaseSavepoint(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){","((SSSavepoint)savepoint).transactionTime=0;","return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,newObject[]{savepoint});","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency,intresultSetHoldability)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["this.value=newValue;","this.dataType=newDataType;","if(dataType\<0){","if(newValue==null)","this.dataType=SQLTokenizer.NULL;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{VIEW_CANTDROP,\"View\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{RSET_NOT_PRODUCED,\"EswurdekeinResultSeterzeugt.\"},","{RSET_READONLY,\"DasResultSetistschreibgeschÃ¼tzt.\"},","{RSET_FWDONLY,\"DasResultSetistforwardonly.\"},","{RSET_CLOSED,\"DasResultSetistgeschlossen.\"},","{RSET_NOT_INSERT_ROW,\"DerCursorzeigtaktuellnichtaufdieEinfÃ¼geposition(insertrow).\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["voiddiv(MutableNumericnum){","intnewScale=Math.max(scale+5,num.scale+4);","BigDecimalbig=toBigDecimal().divide(num.toBigDecimal(),newScale,BigDecimal.ROUND_HALF_EVEN);","setValue(big.unscaledValue().toByteArray());","scale=big.scale();","signum=big.signum();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["break;","caseSQLTokenizer.TIME:","writeTime(expr.getLong());","break;","caseSQLTokenizer.DATE:","writeDate(expr.getLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(paramType==Expression.NAME)","compileLinkExpressionName((ExpressionName)param);","elsecompileLinkExpressionParams(param);","expr.optimize();","privatefinalintcompileAdd_All_Table_Columns(DataSourcefromEntry,TableViewtable,intposition){","for(intk=0;k\<table.columns.size();k++){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value?1:0);","booleanreadBoolean(){","returnpage[offset++]!=0;","voidwriteShort(intvalue){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DAYOFMONTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfMonth();","break;","caseSQLTokenizer.DAYOFWEEK:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{TABLE_DEADLOCK,\"Deadlock,eskannkeinLockerzeugtwerdenfÃ¼rTabelle\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TabelleoderView\'\'{0}\'\'existiertnicht.\"},","{TABLE_FILE_INVALID,\"DieDatei\'\'{0}\'\'enthÃ¤ltkeinegÃ¼ltigeSmallSQLTabelle.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeinegÃ¼ltigerTabellenoderViewSpeicher.\"},","{TABLE_EXISTENT,\"DieTabelleoderView\'\'{0}\'\'existiertbereits.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'istkeineTabelle.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["ExpressionArithmetic(Expressionleft,intoperation){","super(FUNCTION);","this.left=left;","this.operation=operation;","super.setParams(newExpression[]{left});","ExpressionArithmetic(Expressionleft,Expressionright,intoperation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","return(obj==Boolean.TRUE)?10000:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intlength=bytes.length;","while(length\>0&&bytes[length-1]==0){","length--;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["packagesmallsql.database;","importjava.math.*;","publicclassMoneyextendsNumberimplementsMutable{","privatestaticfinallongserialVersionUID=-620300937494609089L;","longvalue;","privateMoney(){/*shouldbeempty*/}"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCot();","break;","caseSQLTokenizer.DEGREES:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDegrees();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ExpressionValue[]currentRow;","privatefinalColumnscolumns=newColumns();","privateintrowIdx=-1;","privateListrowList=newArrayList();//ListofExpressionGroup[]","MemoryResult(){/*shouldbeempty*/}","MemoryResult(Object[][]data,intcolCount)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["publicbooleansupportsCatalogsInIndexDefinitions(){","returntrue;","publicbooleansupportsCatalogsInPrivilegeDefinitions(){","returntrue;","publicbooleansupportsPositionedDelete(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["thrownewError();","privateCommandexecute()throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Execute\");","privateExpressionsexpressionParenthesisList(Commandcmd)throwsSQLException{","Expressionslist=newExpressions();","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["prev=node;","node=node.nextLetter;","wasNextEntry=false;","prev.value=value;","staticfinalStringgetKeyWord(intkey){","return(String)keywords.get(Utils.getInteger(key));"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.REAL:","((MutableFloat)value).value+=expr.getFloat();","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value+=expr.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(uebertrag){","signum=-signum;","intlast=value.length-1;","for(inti=0;i\<=last;i++){","value[i]=(i==last)?-value[i]:~value[i];","voidmul(MutableNumericnum){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["this.database=database;","indexes=null;","references=null;","staticvoiddrop(Databasedatabase,Stringname)throwsException{","booleanok=newFile(Utils.createTableViewFileName(database,name)).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionBitLen();","break;","caseSQLTokenizer.CHARLEN:","caseSQLTokenizer.CHARACTLEN:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importsmallsql.database.language.Language;","classCommandSelectextendsCommand{","privateDataSourcestables;//ListofTableResult(TablesandViews)","privateExpressionwhere;","RowSourcefrom;","privateExpressionsgroupBy;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnalias;","finalvoidsetAlias(Stringalias){","this.alias=alias;","voidsetParams(Expression[]params){","this.params=params;","voidsetParamAt(Expressionparam,intidx){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["importjava.io.PrintWriter;","importjava.sql.DriverManager;","importjava.sql.SQLException;","importjava.text.MessageFormat;","importsmallsql.database.language.Language;","classSmallSQLExceptionextendsSQLException{"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["returnUtils.getInteger(param1.getInt());","caseSQLTokenizer.BIGINT:","returnnewLong(param1.getLong());","caseSQLTokenizer.REAL:","returnnewFloat(param1.getFloat());","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["privateStringdefaultDefinition;//StringrepresentationforDefaultValue","privateStringname;","privatebooleanidentity;","privatebooleancaseSensitive;","privatebooleannullable=true;","privateintscale;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returntoString();","Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();","switch(style){","case0:","case100://monddyyyyhh:miAM(oderPM)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnexpr.getAlias();","booleanisAutoIncrement(){","returnexpr.isAutoIncrement();","booleanisCaseSensitive(){","returnexpr.isCaseSensitive();","booleanisNullable(){"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["publicfinalclassDateTimeimplementsMutable{","longtime;","privateintdataType=SQLTokenizer.TIMESTAMP;","staticfinalint[]MONTH_DAYS={0,31,59,90,120,151,181,212,243,273,304,334};","privatestaticfinalString[]SHORT_MONTHS=newDateFormatSymbols().getShortMonths();","DateTime(longtime,intdataType){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnUtils.bytes2float(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:","returnreadTime();","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(tableFormatVersion==TableView.TABLE_VIEW_OLD_VERSION)","precision=readByte();","else","precision=readInt();","column.setPrecision(precision);","column.setScale(readByte());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnbuf.toString();","case26:","case126://ISO8601;yyyy-mm-ddThh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["columns.add(column);","for(intr=0;r\<data.length;r++){","Object[]row=data[r];","ExpressionValue[]rowValues=newExpressionValue[row.length];","addRow(rowValues);","for(intc=0;c\<colCount;c++){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["super(FUNCTION);","this.left=left;","this.right=right;","this.operation=operation;","super.setParams(newExpression[]{left,right});","ExpressionArithmetic(Expressionleft,Expressionright,Expressionright2,intoperation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["nextOffset1=offset;","offset+=2;","if(listEnum.stack\<3)","offset+=pointerSize;","do{","nextOffset2=nextOffset1;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["ExpressionsleftEx=newExpressions();","ExpressionsrightEx=newExpressions();","intoperation=createJoinScrollIndex(cond,leftEx,rightEx,0);","if(operation!=0){","scroll=newJoinScrollIndex(type,left,right,leftEx,rightEx,operation);","returntrue;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnrowPos==1;","finalbooleanrelative(introws){","if(rows==0)returnrowPos==1;","rowPos=Math.min(Math.max(rowPos+rows,-1),1);","returnrowPos==1;","finalintgetRow(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["caseSQLTokenizer.NOW:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;","caseSQLTokenizer.YEAR:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(dataType!=SQLTokenizer.DATE){","if(buf.length()\>0)buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","updatePointer.filePosUpdated=newData.writeFinsh(null);","updatePointer.status=UPDATE_POINTER;","updatePointer.type=SQLTokenizer.UPDATE;","updatePointer.createWriteLock();","if(updatePointer.sharedPageData){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return(byte)getInt(columnIndex);","publicshortgetShort(intcolumnIndex)throwsSQLException{","return(short)getInt(columnIndex);","publicintgetInt(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]str1=param1.getBytes();","byte[]str2=param2.getBytes();","intlength=str2.length;","if(length==0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["publicbooleansupportsExtendedSQLGrammar(){","returntrue;","publicbooleansupportsANSI92EntryLevelSQL(){","returntrue;","publicbooleansupportsANSI92IntermediateSQL(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["for(inti=0;i\<dataSources.size();i++){","DataSourceds=dataSources.get(i);","result|=ds.init(con);","intnextColCount=ds.getTableView().columns.size();","if(colCount==-1)","colCount=nextColCount;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["{COL_WRONG_PREFIX,\"Thecolumnprefix\'\'{0}\'\'doesnotmatchwithatablenameoraliasnameusedinthisquery.\"},","{COL_READONLY,\"Column{0}isreadonly.\"},","{COL_INVALID_NAME,\"Invalidcolumnname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Columnindexoutofrange:{0}.\"},","{COL_AMBIGUOUS,\"Column\'\'{0}\'\'isambiguous.\"},","{GROUP_AGGR_INVALID,\"AggregatefunctionarenotvalidintheGROUPBYclause({0}).\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["return;","firstNode=false;","if(shift!=0)offset+=pointerSize;","shift-=16;","finallonggetNext(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(newValueinstanceofInteger)","this.dataType=SQLTokenizer.INT;","else","if(newValueinstanceofLong||newValueinstanceofIdentity)","this.dataType=SQLTokenizer.BIGINT;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"AVG\",AVG);","classSearchNode{","intvalue;","charletter;","SearchNodenextLetter;//nextcharacterofakeyword","SearchNodenextEntry;//nextEntryofacharacterthathasthesamestartsequence"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intgetDataType(){","switch(operation){","caseNEGATIVE:","caseBIT_NOT:","returnleft.getDataType();","caseEQUALS:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetPrimaryKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"KEY_SEQ\",\"PK_NAME\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(row\<0){","afterLast();","rowIdx=rowList.size()+row;","if(rowIdx\<0){","beforeFirst();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["if(previousOperationLevel\>=level){","previousToken();","returnleftExpr;","switch(token.value){","caseSQLTokenizer.PLUS:","caseSQLTokenizer.MINUS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","default:","throwSmallSQLException.create(Language.INDEX_CORRUPT,String.valueOf(valueType));","nodes=newIndexNode[input.readShort()];","for(inti=0;i\<nodes.length;i++){","nodes[i]=loadRef(input.readLong());"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()\<0){","longrowPosition=scrollStatus.getRowOffset(true);","if(rowPosition\>=0){","row++;","rowSource.setRowPosition(rowPosition);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else","if(oldRowOffset.longValue()==newRowOffset){","row++;","returntrue;","finalvoidafterLast()throwsException{","rowSource.afterLast();"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["staticfinalintUPDATE=204;","staticfinalintCREATE=205;","staticfinalintDROP=206;","staticfinalintALTER=207;","staticfinalintSET=208;","staticfinalintEXECUTE=209;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicbooleansupportsMultipleResultSets(){","returntrue;","publicbooleansupportsMultipleTransactions(){","returntrue;","publicbooleansupportsNonNullableColumns(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseNOT:return!left.getBoolean();","caseLIKE:returnUtils.like(left.getString(),right.getString());","caseISNULL:returnleft.isNull();","caseISNOTNULL:return!left.isNull();","caseIN:if(right==null)","returnisInList();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returncolumnExpressions.get(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBytes();","intgetDataType(intcolIdx){","returncolumnExpressions.get(colIdx).getDataType();","voidbeforeFirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["staticTableViewgetTableView(SSConnectioncon,Stringcatalog,StringtableName)throwsSQLException{","returngetDatabase(con,catalog).getTableView(con,tableName);","TableViewgetTableView(SSConnectioncon,StringtableName)throwsSQLException{","synchronized(tableViews){","TableViewtableView=tableViews.get(tableName);","if(tableView==null){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIMESTAMP);","publicvoidsetAsciiStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.LONGVARCHAR,length);","publicvoidsetUnicodeStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["if(currentRow==null)throwSmallSQLException.create(Language.ROW_NOCURRENT);","returncurrentRow[colIdx];","intgetRowCount(){","returnrowList.size();","voidexecute()throwsException{","rowList.clear();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["returncurrentRow==null?0:rowIdx+1;","finallonggetRowPosition(){","returnrowIdx;","finalvoidsetRowPosition(longrowPosition)throwsException{","rowIdx=(int)rowPosition;","move();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["importsmallsql.database.language.Language;","finalclassSortedResultextendsRowSource{","finalprivateExpressionsorderBy;","finalprivateRowSourcerowSource;","privateIndexScrollStatusscrollStatus;","privateintrow;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["inti=-1;","while(true){","chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);","if(++i==length){","if(isLast){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.BINARY);","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringinput=param1.getString();","returngetString(input);","staticStringgetString(Stringinput){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["TableViewtableView=Database.getTableView(con,catalog,name);","TableViewResulttable=TableViewResult.createResult(tableView);","tables.add(table);","if(token!=null&&token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);","table.setAlias(token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncurrentDS.getBytes(colIdx);","finalintgetDataType(intcolIdx){","returncurrentDS.getDataType(colIdx);","TableViewgetTableView(){","returncurrentDS.getTableView();","finalbooleanisScrollable(){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*4+details2.month/3)-(details1.year*4+details1.month/3);","caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["if(token.value==SQLTokenizer.COMMA){","token=nextToken(MISSING_EXPRESSION);","try{","value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<bytes.length;i++){","bytes[i]=(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));","returnbytes;","}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID,String.valueOf(offset));/*,offset*/"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returntrue;","publicbooleansupportsOpenStatementsAcrossRollback(){","returntrue;","publicintgetMaxBinaryLiteralLength(){","return0;","publicintgetMaxCharLiteralLength(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.CEILING:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCeiling();","break;","caseSQLTokenizer.COS:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ForeignKeys(){","data=newForeignKey[16];","finalintsize(){","returnsize;","finalForeignKeyget(intidx){","if(idx\>=size)"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["booleanisNullable(){","returnnullable;","voidsetDataType(intdataType){","this.dataType=dataType;","intgetDataType(){","returndataType;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64)return-1;//apreviouscallhasreturn-1","offset=listEnum.offsetStack[listEnum.stack];","longresult=listEnum.resultStack[listEnum.stack];","booleanfirstNode=(offset==0);//trueifitthefirstentryinalevel","while(true){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.YEAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionYear();","break;","caseSQLTokenizer.IIF:","invalidParamCount=(paramCount!=3);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalbooleanisLast(){","returnrowIdx==rowList.size()-1&&currentRow!=null;","finalbooleanisAfterLast(){","returnrowIdx\>=rowList.size()||rowList.size()==0;","finalvoidafterLast(){","rowIdx=rowList.size();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["returnnewMutableNumeric((obj==Boolean.TRUE)?1:0);","caseSQLTokenizer.INT:","returnnewMutableNumeric(((Number)obj).intValue());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(((Number)obj).longValue());","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Entrynext=e.next;","if(e.key==key){","size--;","if(prev==e)","table[i]=next;","else"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["voidcopyValueFrom(StoreImplstore,intvalueOffset,intlength){","System.arraycopy(store.page,valueOffset,this.page,this.offset,length);","this.offset+=length;","voidwriteExpression(Expressionexpr,Columncolumn)throwsException{","booleanisNull=expr.isNull();","if(isNull&&!column.isNullable()){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleanisNull()throwsException{","switch(operation){","caseOR:","caseAND:","caseNOT:","caseLIKE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseLESSER:returnleft.getDouble()\<right.getDouble();","caseLES_EQU:returnleft.getDouble()\<=right.getDouble();","caseUNEQUALS:returnleft.getDouble()!=right.getDouble();","caseBETWEEN:","double_left=left.getDouble();","return_left\>=right.getDouble()&&right2.getDouble()\>=_left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return((Number)obj).longValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'T\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["token=nextToken(MISSING_EXPRESSION);","intvalue;","try{","value=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnsize;","finalForeignKeyget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(ForeignKeyforeignKey){"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["ExpressionValueparam=newExpressionValue();","cmd.addParameter(param);","returnparam;","caseSQLTokenizer.CASE:","returncaseExpr(cmd);","caseSQLTokenizer.MINUS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewFloat(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(readDouble());","caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{FILE_TOONEW,\"Dateiversion({0})derDatei\'\'{1}\'\'istzuneufÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_TOOOLD,\"Dateiversion({0})derDatei\'\'{1}\'\'istzualtfÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_CANT_DELETE,\"Datei\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{ROW_0_ABSOLUTE,\"Datensatz0istungÃ¼ltigfÃ¼rdieMethodeabsolute().\"},","{ROW_NOCURRENT,\"KeinaktuellerDatensatz.\"},","{ROWS_WRONG_MAX,\"FehlerhafterWertfÃ¼rMaximaleDatensatzanzahl:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["TableViewgetTableView(){","returnview;","voiddeleteRow()throwsSQLException{","commandSelect.deleteRow(con);","voidupdateRow(Expression[]updateValues)throwsException{","commandSelect.updateRow(con,updateValues);"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["token=nextToken(MISSING_OJ);","returnrowSource(cmd,tables,SQLTokenizer.ESCAPE_R);","caseSQLTokenizer.SELECT:","ViewResultviewResult=newViewResult(con,select());","tables.add(viewResult);","returnviewResult;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["prev=node;","node=null;","}else{","prev=node;","node=node.nextLetter;","wasNextEntry=false;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["voiddropTable(SSConnectioncon,StringtableName)throwsException{","synchronized(tableViews){","Tabletable=(Table)tableViews.get(tableName);","if(table!=null){","tableViews.remove(tableName);","table.drop(con);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicbooleansupportsStoredProcedures(){","returnfalse;","publicbooleansupportsSubqueriesInComparisons(){","returntrue;","publicbooleansupportsSubqueriesInExists(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["nodeStack.setSize(1);","((IndexNodeScrollStatus)nodeStack.peek()).afterLast();","privatefinallonggetReturnValue(Objectvalue){","if(rootPage.getUnique()){","return((Long)value).longValue();","}else{"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["StoreImplstore=table.getStoreInsert(con);","for(intc=0;c\<matrix.length;c++){","Columncolumn=table.columns.get(c);","intidx=matrix[c];","ExpressionvalueExpress;","if(idx\>=0){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseSQLTokenizer.TINYINT:","returnUtils.getInteger(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnUtils.getInteger(readShort());","caseSQLTokenizer.INT:","returnUtils.getInteger(readInt());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(files!=null)","for(inti=0;i\<files.length;i++){","files[i].delete();","dir.delete();","break;","caseSQLTokenizer.TABLE:"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","offset+=3;","break;","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rowSource.setRowPosition(rowPosition);","returntrue;","if(currentInsertedRow()\<insertedRows.size()-1){","row++;","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["previous();","return!isNext&&(rowIdx+1==rowList.size()&&rowList.size()\>0);","booleanisAfterLast()throwsException{","if(rowIdx\>=rowList.size())returntrue;","if(isBeforeFirst()&&rowList.size()==0){","next();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["default:","throwcreateSyntaxError(token,MISSING_OPTIONS_DATATYPE);","token=nextToken();","privateIndexDescriptionindex(Commandcmd,intconstraintType,StringtableName,StringcontrainName,StringcolumnName)throwsSQLException{","if(constraintType!=SQLTokenizer.UNIQUE)nextToken(MISSING_KEY);","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this(database,con,name,columns,null,indexes,foreignKeys);","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsexistIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","super(name,columns);","this.database=database;","this.references=foreignKeys;","newIndexes.create(con,database,this);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.SQL_DOUBLE:dataType=SQLTokenizer.DOUBLE;break;","caseSQLTokenizer.SQL_FLOAT:dataType=SQLTokenizer.FLOAT;break;","caseSQLTokenizer.SQL_INTEGER:dataType=SQLTokenizer.INT;break;","caseSQLTokenizer.SQL_LONGVARBINARY:dataType=SQLTokenizer.LONGVARBINARY;break;","caseSQLTokenizer.SQL_LONGVARCHAR:dataType=SQLTokenizer.LONGVARCHAR;break;","caseSQLTokenizer.SQL_REAL:dataType=SQLTokenizer.REAL;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"YEAR\",YEAR);","staticfinalintSQL_TSI_FRAC_SECOND=1250;","staticfinalintSQL_TSI_SECOND=1251;","staticfinalintSQL_TSI_MINUTE=1252;","staticfinalintSQL_TSI_HOUR=1253;","staticfinalintSQL_TSI_DAY=1254;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["case8://hh:mm:ss","case108:","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicclassExpressionFunctionTimestampAddextendsExpressionFunction{","finalprivateintinterval;","ExpressionFunctionTimestampAdd(intintervalType,Expressionp1,Expressionp2){","interval=ExpressionFunctionTimestampDiff.mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});","intgetFunction(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["Expressionscolumns1=Utils.getExpressionNameFromTree(param1);","if(left.isExpressionsFromThisRowSource(columns0)&&right.isExpressionsFromThisRowSource(columns1)){","leftEx.add(param0);","rightEx.add(param1);","}else{","if(left.isExpressionsFromThisRowSource(columns1)&&right.isExpressionsFromThisRowSource(columns0)){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["staticfinalintCEILING=1005;","staticfinalintCOS=1006;","staticfinalintCOT=1007;","staticfinalintDEGREES=1008;","staticfinalintEXP=1009;","staticfinalintFLOOR=1010;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.CHAR:","returnDateTime.parse(param1.getString());","returnparam1.getLong();","finalintgetDataType(){","returndatatype.getDataType();","finalintgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returnnull;","returnnode.addRoot();","finalvoidclear(){","rootPage.clear();","finalstaticprivateintfloatToBinarySortOrder(floatvalue){","intintValue=Float.floatToIntBits(value);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["writeBoolean(def==null);","if(def!=null)","writeString(column.getDefaultDefinition());","ColumnreadColumn(inttableFormatVersion)throwsException{","Columncolumn=newColumn();","column.setFlag(readByte());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{PARAM_CLASS_UNKNOWN,\"UnbekanteParameterKlasse:\'\'{0}\'\'.\"},","{PARAM_EMPTY,\"Parameter{0}istleer.\"},","{PARAM_IDX_OUT_RANGE,\"ParameterIndex{0}liegtauÃŸerhalbdesGÃ¼ltigkeitsbereiches.DerWertmusszwischen1und{1}liegen.\"},","{COL_DUPLICATE,\"EsgibteinendoppeltenSpaltennamen:\'\'{0}\'\'.\"},","{COL_MISSING,\"Spalte\'\'{0}\'\'wurdenichtgefunden.\"},","{COL_VAL_UNMATCH,\"DieSpaltenanzahlundWerteanzahlistnichtidentisch.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["return255;","publicintgetMaxProcedureNameLength(){","return255;","publicintgetMaxCatalogNameLength(){","return255;","publicintgetMaxRowSize(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["buf.append(\'/\');","formatNumber(details.year,4,buf);","returnbuf.toString();","case4://germandd.mm.yy","formatNumber(details.day,2,buf);","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["value=newLongTreeList(input);","break;","case3:","value=loadRef(input.readLong());","break;","default:"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["offset++;","break;","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Expressioncol=columnExpressions.get(i);","if(!col.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)col;","if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalbooleanlast()throwsException{","while(next()){/*scrollaftertheend*/}","returnprevious();","finalvoidafterLast()throwsException{","while(next()){/*scrollaftertheend*/}","finalintgetRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returnnewDouble(getDoubleImpl(((Number)lObj).doubleValue(),((Number)rObj).doubleValue()));","else","returngetString(lObj.toString(),rObj.toString());","caseSQLTokenizer.LONGVARBINARY:","returngetBytes();","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","offset+=3;","break;","default:thrownewError();","return;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["status.idx=status.nodes.length;//topreventproblemswithscrollbackaftermultiplecallsaftertheend.","return-1;","IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","}else{","intidx=--status.idx;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnreadInt()/(float)10000.0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().floatValue();","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnUtils.bytes2long(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp();","caseSQLTokenizer.TIME:","returnreadTime();","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseLOCK_TAB:","assertstorePage.con==tabLockConnection:\"InternalErrorwithTabLock\";","if(--tabLockCount==0)tabLockConnection=null;","break;","default:"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["intbitCount=0;","while(size\>0){","bitCount++;","size\>\>=1;","returnbitCount;","finallonggetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["}else{","dataType=SQLTokenizer.LONGVARCHAR;","previousToken();","switch(dataType){","caseSQLTokenizer.RAW:","dataType=SQLTokenizer.VARBINARY;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","abstractclassExpressionFunctionReturnIntextendsExpressionFunction{","booleanisNull()throwsException{","returnparam1.isNull();","finalbooleangetBoolean()throwsException{","returngetInt()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["finalTableViewgetTableView(){","returnnull;","finalvoiddeleteRow()throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidupdateRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","intreadInt(){","return((page[offset++])\<\<24)|","((page[offset++]&0xFF)\<\<16)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();","if(num!=null&&(dataType==SQLTokenizer.NUMERIC||dataType==SQLTokenizer.DECIMAL))","num.setScale(getScale());","returnnum;","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(\"*\".equals(param.getName())&&param.getTableAlias()==null){","params[0]=newExpressionValue(\"*\",SQLTokenizer.VARCHAR);","expr=newExpressionName(Expression.COUNT);","break;","caseSQLTokenizer.SUM:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(isLastValue){","page.addNode((char)0,rowOffset);","returnnull;","}else","returnpage.addRoot((char)0);","finalprivateIndexNodefind(IndexNodenode,longkey,intdigitCount,ArrayListnodeList){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.CURTIME:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;","caseSQLTokenizer.DAYOFMONTH:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(intc=0;c\<columns.size();c++){","Object[]row=newObject[13];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=Boolean.valueOf(!index.isUnique());//NON_UNIQUE","row[5]=index.getName();//INDEX_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["break;","caseSQLTokenizer.LAST:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.LAST);","break;","caseSQLTokenizer.AVG:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importsmallsql.database.language.Language;","classSSStatementimplementsStatement{","finalSSConnectioncon;","Commandcmd;","privatebooleanisClosed;","intrsType;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["ColumnExpression(Expressionexpr){","this.expr=expr;","StringgetName(){","returnexpr.getAlias();","booleanisAutoIncrement(){","returnexpr.isAutoIncrement();"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["store.scanObjectOffsets(offsets,dataTypes);","afterLastValidFilePos=store.getNextPagePos();","returntrue;","}else{","filePos=-1;","noRow();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["this(con,sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);","SSPreparedStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,rsType,rsConcurrency);","con.log.println(sql);","SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["column.setScale(readByte());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","if(!readBoolean()){","Stringdef=readString();","column.setDefaultValue(newSQLParser().parseExpression(def),def);","returncolumn;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["packagesmallsql.database;","importjava.util.Random;","finalclassExpressionFunctionRandextendsExpressionFunctionReturnFloat{","finalstaticprivateRandomrandom=newRandom();","finalintgetFunction(){returnSQLTokenizer.RAND;}","booleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|"],
"["|((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);","char[]readChars(intlength){","char[]chars=newchar[length];"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returngetResult().getString();","finalbyte[]getBytes()throwsException{","returngetResult().getBytes();","finalintgetDataType(){","if(dataType\<0){","dataType=elseResult.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["if(isLeap&&day==59){","month=1;","day=29;","}else{","for(intm=11;m\>=0;m--){","if(MONTH_DAYS[m]\<=day){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["TableStorePagestorePage=requestLockImpl(con,pageOperation,page);","if(storePage!=null)","returnstorePage;//thenormalcaseshouldbethefasted","if(endTime==0)","endTime=System.currentTimeMillis()+5000;","longwaitTime=endTime-System.currentTimeMillis();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicIdentity(FileChannelraFile,longfilePos)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(page);","synchronized(raFile){","raFile.position(filePos);","raFile.read(buffer);","value=((long)(page[0])\<\<56)|"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["returnraFile;","abstractvoidwriteMagic(FileChannelraFile)throwsException;","StringgetName(){","returnname;","longgetTimestamp(){","returntimestamp;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["publicvoidsetDate(intparameterIndex,Datex,Calendarcal)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetTime()notyetimplemented.\");","publicvoidsetTimestamp(intparameterIndex,Timestampx,Calendarcal)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetNull()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["finalprivateRowSourcerowSource;","privateIndexScrollStatusscrollStatus;","privateintrow;","privatefinalLongListinsertedRows=newLongList();","privatebooleanuseSetRowPosition;","privateintsortedRowCount;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["}catch(IOExceptionex){","ex.printStackTrace();","JOptionPane.showMessageDialog(null,\"Youneedtostartthecommandlineofthe\\nSmallSQLDatabasewithaconsolewindow:\\n\\njava-jarsmallsql.jar\\n\\n\"+ex,\"FatalError\",JOptionPane.OK_OPTION);","return;","if(line==null){","return;//endofprogram"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["booleanfirstNode3=true;","while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){","intnextEntry=getUnsignedShort();","if(nextEntry==octet){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicclassExpressionFunctionInsertextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.INSERT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull()||param4.isNull();","finalbyte[]getBytes()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["beforeFirst();","returnfalse;","}else{","returnabsolute(newRow);","intgetRow()throwsException{","if(rowIdx\>=rowList.size())return0;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["intt=(int)(datetime%86400000);","intd=(int)(datetime/86400000);","if(t\<0){","t+=86400000;","d--;","intmillis=t%1000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["tmpFile.delete();","staticvoiddropView(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropView(tableName);","voiddropView(StringviewName)throwsException{","synchronized(tableViews){","Objectview=tableViews.remove(viewName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["privateArrayListbatches;","privatebooleanneedGeneratedKeys;","privateResultSetgeneratedKeys;","privateint[]generatedKeyIndexes;","privateString[]generatedKeyNames;","SSStatement(SSConnectioncon)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["publicbooleanstoresLowerCaseIdentifiers(){","returnfalse;","publicbooleanstoresMixedCaseIdentifiers(){","returntrue;","publicbooleansupportsMixedCaseQuotedIdentifiers(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["inttemp=0;","for(inti=0;i\<4&&0\<length;i++){","temp|=(complement[--length]&0xFF)\<\<(i*8);","value[v]=temp;","MutableNumeric(intcomplement){","if(complement==0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionCosextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.COS;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.cos(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCos.java|"],
"["}else{","params=newExpression[]{left};","super.setParams(params);","intgetOperation(){","returnoperation;","privateExpressionconvertExpressionIfNeeded(Expressionexpr,Expressionother){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicvoidsetInt(StringparameterName,intx)throwsSQLException{","setInt(findParameter(parameterName),x);","publicvoidsetLong(StringparameterName,longx)throwsSQLException{","setLong(findParameter(parameterName),x);","publicvoidsetFloat(StringparameterName,floatx)throwsSQLException{","setFloat(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["buffer.append(\"INSERTINTO\").append(newName).append(\'(\');","for(intc=0;c\<oldColumns.size();c++){","if(c!=0){","buffer.append(\',\');","buffer.append(oldColumns.get(c).getName());","buffer.append(\")SELECT*FROM\").append(name);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindex=indexes.get(i);","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicPreparedStatementprepareStatement(Stringsql)throwsSQLException{","returnnewSSPreparedStatement(this,sql);","publicCallableStatementprepareCall(Stringsql)throwsSQLException{","returnnewSSCallableStatement(this,sql);","publicStringnativeSQL(Stringsql){","returnsql;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["previousToken();","returnlist;","switch(token.value){","caseSQLTokenizer.COMMA:","continue;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-2);","StoreImplgetLobStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","if(lobs==null){","lobs=newLobs(this);","returnlobs.getStore(con,filePos,pageOperation);","finallonggetFirstPage(){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(rowPositions==null)rowPositions=newLongLongList();","rowPositions.add(left.getRowPosition(),right.getRowPosition());","returnrowPositions.size()-1;","finalvoidsetRowPosition(longrowPosition)throwsException{","left.setRowPosition(rowPositions.get1((int)rowPosition));","right.setRowPosition(rowPositions.get2((int)rowPosition));"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["store.deleteRow(con);","store=newStoreNull(store.getNextPagePos());","@Override","finalvoidupdateRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;","intcount=tableColumns.size();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnreadInt();","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(long)(readNumeric().doubleValue()*10000L);","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringVIEWDROP_NOT_VIEW=\"SS-0101\";","publicstaticfinalStringVIEW_CANTDROP=\"SS-0102\";","publicstaticfinalStringRSET_NOT_PRODUCED=\"SS-0130\";","publicstaticfinalStringRSET_READONLY=\"SS-0131\";","publicstaticfinalStringRSET_FWDONLY=\"SS-0132\";","publicstaticfinalStringRSET_CLOSED=\"SS-0133\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalclassExpressionFunctionBitLenextendsExpressionFunctionReturnInt{","privatestaticfinalintBYTES_PER_CHAR=2;","finalintgetFunction(){","returnSQLTokenizer.BITLEN;","booleanisNull()throwsException{","returnparam1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|"],
"["finalTableStorePageremove(longkey){","inti=(int)(key%table.length);","Entryprev=table[i];","Entrye=prev;","while(e!=null){","Entrynext=e.next;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["booleanfirstNode=(size\>2);//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){","intnextEntry=getUnsignedShort();","if(nextEntry==octet){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["switch(dataType){","caseSQLTokenizer.DATE:","returngetDate(time);","caseSQLTokenizer.TIME:","returngetTime(time);","default:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["offset=0;","intlast=value.length-1;","for(;v\<=last;v++){","intval=(signum\>0)?value[v]:(v==last)?-value[v]:~value[v];","complement[offset++]=(byte)(val\>\>24);","complement[offset++]=(byte)(val\>\>16);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalbooleanisScrollable(){","returnrowSource.isScrollable();","finalbooleanisBeforeFirst(){","returnrow==0;","finalbooleanisFirst(){","returnrow==1&&isCurrentRow;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["bytes[offset++]=(byte)(value\>\>48);","bytes[offset++]=(byte)(value\>\>40);","bytes[offset++]=(byte)(value\>\>32);","bytes[offset++]=(byte)(value\>\>24);","bytes[offset++]=(byte)(value\>\>16);","bytes[offset++]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["return((Number)obj).floatValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["throwSmallSQLException.createFromException(th);","staticStoreImplrecreateStore(Tabletable,StorePagestorePage,inttype)throwsException{","StoreImplstore=newStoreImpl(table,storePage,type,-1);","store.page=storePage.page;","store.sharedPageData=true;","store.readPageHeader();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateintsize;","privatelong[]data;","LongList(){","this(16);","LongList(intinitialSize){","data=newlong[initialSize];"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["LongLongList(intinitialSize){","data=newlong[initialSize*2];","finalintsize(){","returnsize;","finallongget1(intidx){","if(idx\>=size)"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["break;","caseSQLTokenizer.TILDE:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.BIT_NOT/10),ExpressionArithmetic.BIT_NOT);","break;","caseSQLTokenizer.PARENTHESIS_L:","leftExpr=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleanstoresUpperCaseQuotedIdentifiers(){","returnfalse;","publicbooleanstoresLowerCaseQuotedIdentifiers(){","returnfalse;","publicbooleanstoresMixedCaseQuotedIdentifiers(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["month=1;","day=29;","}else{","for(intm=11;m\>=0;m--){","if(MONTH_DAYS[m]\<=day){","month=m;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["quotient=-quotient;","signum=-signum;","intvalueLength=value.length;","longcarryover=0;","for(inti=0;i\<valueLength;i++){","longv=(value[i]&0xFFFFFFFFL)+carryover;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicstaticfinalStringSUBSTR_INVALID_LEN=\"SS-0289\";","publicstaticfinalStringVALUE_STR_TOOLARGE=\"SS-0310\";","publicstaticfinalStringVALUE_BIN_TOOLARGE=\"SS-0311\";","publicstaticfinalStringVALUE_NULL_INVALID=\"SS-0312\";","publicstaticfinalStringVALUE_CANT_CONVERT=\"SS-0313\";","publicstaticfinalStringBYTEARR_INVALID_SIZE=\"SS-0340\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["addKeyWord(\"FIRST\",FIRST);","addKeyWord(\"LAST\",LAST);","addKeyWord(\"AVG\",AVG);","classSearchNode{","intvalue;","charletter;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["cmd.setParamValue(parameterIndex,x?Boolean.TRUE:Boolean.FALSE,SQLTokenizer.BOOLEAN);","publicvoidsetByte(intparameterIndex,bytex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newInteger(x),SQLTokenizer.TINYINT);","publicvoidsetShort(intparameterIndex,shortx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["packagesmallsql.database;","importjava.io.ByteArrayOutputStream;","publicclassExpressionFunctionReplaceextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.REPLACE;","finalbooleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["caseSQLTokenizer.NULL:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","nullableWasSet=true;","break;","caseSQLTokenizer.NOT:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["thrownewError();","finalprivateIndexNodefind(IndexNodenode,char[]key,ArrayListnodeList){","intlength=key.length;","inti=-1;","while(true){","chardigit=(i\<0)?(length==0?(char)1:2)"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["param4=param;","break;","super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionFunction))returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["privatevoidverifyFreePufferSize(intfreeSize){","intminSize=offset+freeSize;","if(minSize\<puffer.length){","intnewSize=puffer.length\<\<1;","if(newSize\<minSize)newSize=minSize;","byte[]temp=newbyte[newSize];"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["publicbooleansupportsGroupBy(){","returntrue;","publicbooleansupportsGroupByUnrelated(){","returntrue;","publicbooleansupportsGroupByBeyondSelect(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.LAST);","break;","caseSQLTokenizer.AVG:","if(paramCount!=1){","invalidParamCount=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken();","if(token!=null&&token.value==SQLTokenizer.ORDER){","order(selCmd);","token=nextToken();","if(token!=null&&token.value==SQLTokenizer.LIMIT){","limit(selCmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(param1.getBoolean())","returnparam2.isNull();","returnparam3.isNull();","booleangetBoolean()throwsException{","if(param1.getBoolean())","returnparam2.getBoolean();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["if(waitTime\<=0)","throwSmallSQLException.create(Language.TABLE_DEADLOCK,name);","locks.wait(waitTime);","finalprivateTableStorePagerequestLockImpl(SSConnectioncon,intpageOperation,longpage)throwsSQLException{","synchronized(locks){","if(tabLockConnection!=null&&tabLockConnection!=con)returnnull;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returntrue;","publicStringgetSchemaTerm(){","return\"owner\";","publicStringgetProcedureTerm(){","return\"procedure\";","publicStringgetCatalogTerm(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicintgetMaxIndexLength(){","return0;","publicintgetMaxSchemaNameLength(){","return255;","publicintgetMaxProcedureNameLength(){","return255;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["last=c;","for(;idx\<4;){","output[idx++]=\'0\';","returnnewString(output);","intgetPrecision(){","return4;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["finalvoidinit(Databasedatabase,TableViewtableView)/*throwsException*/{","intsize=tableView.columns.size();","matrix=newint[size];","for(inti=0;i\<matrix.length;i++){","matrix[i]=-1;","for(inti=0;i\<columns.size();i++){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["publicstaticfinalStringSTMT_IS_CLOSED=\"SS-0140\";","publicstaticfinalStringSUBQUERY_COL_COUNT=\"SS-0160\";","publicstaticfinalStringJOIN_DELETE=\"SS-0161\";","publicstaticfinalStringJOIN_INSERT=\"SS-0162\";","publicstaticfinalStringDELETE_WO_FROM=\"SS-0163\";","publicstaticfinalStringINSERT_WO_FROM=\"SS-0164\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.INT:","returnreadInt()*10000L;","caseSQLTokenizer.BIGINT:","returnreadLong()*10000L;","caseSQLTokenizer.REAL:","return(long)(readFloat()*10000L);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(fullRightRowCounter\>=isFullNotValid.length){","boolean[]temp=newboolean[fullRightRowCounter\<\<1];","System.arraycopy(isFullNotValid,0,temp,0,fullRightRowCounter);","isFullNotValid=temp;","if(!result){","if(fullRowCount==0){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["store.writeExpression(src,tableColumn);","store.writeFinsh(con);","insertStorePages.add(store.getLink());","privateStorestore=Store.NOROW;","privatelongafterLastValidFilePos;","finalprivatebooleanmoveToRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.CHAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionChar();","break;","caseSQLTokenizer.CONCAT:","if(paramCount!=2){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return(float)getDouble();","MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;","switch(getDataType()){","caseSQLTokenizer.INT:","returnnewMutableNumeric(getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["if(operation==ISNOTNULL)token=SQLTokenizer.IS;","Stringkeyword=SQLTokenizer.getKeyWord(token);","if(keyword==null)keyword=\"\"+(char)token;","returnkeyword;","staticintgetOperationFromToken(intvalue){","switch(value){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,savepoint);","publicvoidreleaseSavepoint(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){","((SSSavepoint)savepoint).transactionTime=0;","return;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["Objectpara1=param1.getObject();","switch(param1.getDataType()){","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","doubledValue=((Double)para1).doubleValue();","return(dValue\<0)?newDouble(-dValue):para1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["returnprops;","intidx1=url.indexOf(\':\',5);//searchafter\"jdbc:\"","intidx2=url.indexOf(\'?\');","if(idx1\>0){","StringdbPath=(idx2\>0)?url.substring(idx1+1,idx2):url.substring(idx1+1);","props.setProperty(\"dbpath\",dbPath);"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["caseLESSER:returncomp\<0;","caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=Utils.compareBytes(leftBytes,right2.getBytes());","break;}"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintTIMESTAMP=342;","staticfinalintSMALLDATETIME=343;","staticfinalintCHAR=350;","staticfinalintNCHAR=352;","staticfinalintVARCHAR=353;","staticfinalintNVARCHAR=355;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'\');","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicclassExpressionFunctionTimestampDiffextendsExpressionFunction{","finalprivateintinterval;","staticfinalintmapIntervalType(intintervalType){","switch(intervalType){","caseSQLTokenizer.MILLISECOND:","returnSQLTokenizer.SQL_TSI_FRAC_SECOND;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["finalbooleangetBoolean()throwsException{","returngetInt()!=0;","finallonggetLong()throwsException{","returngetInt();","finalfloatgetFloat()throwsException{","returngetInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["break;","caseSQLTokenizer.PARENTHESIS_L:","leftExpr=expression(cmd,0);","token=nextToken(MISSING_PARENTHESIS_R);","break;","default:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["copyValueInto(i,newStore);","((StoreImpl)this.store).updateFinsh(con,newStore);","@Override","finalvoidinsertRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;","intcount=tableColumns.size();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["default:return\"java.lang.Object\";","finalintgetColumnIdx(intcolumn)throwsSQLException{","if(column\<1||column\>columns.size())","throwSmallSQLException.create(Language.COL_IDX_OUT_RANGE,String.valueOf(column));","returncolumn-1;","finalExpressiongetColumnExpression(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["case3:","param4=param;","break;","super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["addKeyWord(\"LIKE\",LIKE);","addKeyWord(\"IN\",IN);","staticfinalintABS=1000;//firstnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","staticfinalintACOS=1001;","staticfinalintASIN=1002;","staticfinalintATAN=1003;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnfalse;","booleanisNext=next();","previous();","return!isNext&&(rowIdx+1==rowList.size()&&rowList.size()\>0);","booleanisAfterLast()throwsException{","if(rowIdx\>=rowList.size())returntrue;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["booleanisAutoIncrement(){","returnidentity;","voidsetAutoIncrement(booleanidentity){","this.identity=identity;","intinitAutoIncrement(FileChannelraFile,longfilePos)throwsIOException{","if(identity){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["finalvoidadd(Expressionexpr){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=expr;","finalvoidadd(intidx,Expressionexpr){","if(size\>=data.length){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["publicbooleansupportsGroupByUnrelated(){","returntrue;","publicbooleansupportsGroupByBeyondSelect(){","returntrue;","publicbooleansupportsLikeEscapeClause(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["beforeFirst();","returnnext();","booleanprevious()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()==0){","scrollStatus.afterLast();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["break;","case3:","value=loadRef(input.readLong());","break;","default:","throwSmallSQLException.create(Language.INDEX_CORRUPT,String.valueOf(valueType));"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseADD:returnleft.getMoney()+right.getMoney();","caseSUB:returnleft.getMoney()-right.getMoney();","caseMUL:returnleft.getMoney()*right.getMoney()/10000;","caseDIV:returnleft.getMoney()*10000/right.getMoney();","caseNEGATIVE:return-left.getMoney();","throwcreateUnspportedConversion(SQLTokenizer.MONEY);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","break;","caseSQLTokenizer.ALL:","selCmd.setDistinct(false);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["indexes.add(indexDescription);","voidaddForeingnKey(ForeignKeykey){","foreignKeys.add(key);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","Databasedatabase=catalog==null?","con.getDatabase(false):"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["idx=++status.idx;","if(idx\>=status.nodes.length){","if(nodeStack.size()\>1){","nodeStack.pop();","continue;","}else{"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["privatelongtableTimestamp;","intlock=SQLTokenizer.SELECT;","staticTableViewResultcreateResult(TableViewtableView){","if(tableViewinstanceofTable)","returnnewTableResult((Table)tableView);","returnnewViewResult((View)tableView);"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["finalintgetDataType(){","returnExpressionArithmetic.getDataType(param2,param3);","finalintgetPrecision(){","returnMath.max(param2.getPrecision(),param3.getPrecision());","finalintgetScale(){","returnMath.max(param2.getScale(),param3.getScale());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["publicintgetMaxTablesInSelect(){","return0;","publicintgetMaxUserNameLength(){","return0;","publicintgetDefaultTransactionIsolation(){","returnConnection.TRANSACTION_READ_COMMITTED;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(node.remainderKey!=null)node.moveRemainderValue();","node.saveValue(rowOffset);","finalvoidsaveValue(longrowOffset)throwsSQLException{","if(unique){","if(value!=null)throwSmallSQLException.create(Language.KEY_DUPLICATE);","value=newLong(rowOffset);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["right.setRowPosition(((Long)rows).longValue());","}else{","rowList=(LongTreeList)rows;","longListEnum.reset();","right.setRowPosition(rowList.getNext(longListEnum));","returntrue;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["returnget(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{","returnget(colIdx).getObject();","StringgetString(intcolIdx)throwsException{","returnget(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["longtemp=0;","intv1=value.length;","for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)-(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>=32);","value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(updatePointer==null){","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","filePosUpdated=newData.writeFinsh(null);","status=UPDATE_POINTER;","}else{","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{TABLE_MODIFIED,\"Latabella\'\'{0}\'\'Ã¨statamodificata.\"},","{TABLE_DEADLOCK,\"Deadlock:nonsipuÃ²mettereunlocksullatabella\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"Latabella/view\'\'{0}\'\'nonesiste.\"},","{TABLE_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonincludeunatabellaSmallSQLvalida.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoditabella/view.\"},","{TABLE_EXISTENT,\"Latabella/vista\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["rightEx.add(param0);","}else{","return0;","returnoperation;","return0;","staticfinalintCROSS_JOIN=1;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["voidaddSetting(Expressiondest,Expressionsource){","columnExpressions.add(dest);","sources.add(source);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","intcount=columnExpressions.size();","columnExpressions.addAll(sources);"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["formatNumber(details.year,4,buf);","returnbuf.toString();","case8://hh:mm:ss","case108:","formatNumber(details.hour,2,buf);","buf.append(\':\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BIGINT\"});","@Override","floatgetFloat(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(store!=null){","if(!store.isValidPage()){","returnfalse;","store.scanObjectOffsets(offsets,dataTypes);","afterLastValidFilePos=store.getNextPagePos();","returntrue;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["else","page=(IndexNode)page.getValue();","thrownewError();","finalprivateIndexNodefindRows(IndexNodepage,Expressionexpr,booleansearchNullValues,ArrayListnodeList)throwsException{","if(expr.isNull()){","if(!searchNullValues){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["store.writeColumn(columns.get(i));","for(inti=0;i\<indexes.size();i++){","IndexDescriptionindexDesc=indexes.get(i);","store.writeInt(INDEX);","intoffsetStart=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart+4);//placeholderforlength"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}else{","cmdCreate.addIndex(index);","token=nextToken(MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","returncmdCreate;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","importjava.io.*;","importsmallsql.database.language.Language;","publicclassCommandCreateDatabaseextendsCommand{","CommandCreateDatabase(Loggerlog,Stringname){","super(log);"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["caseSQLTokenizer.MONEY:","((Money)value).value=Math.min(((Money)value).value,expr.getMoney());","break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["break;","store.setCurrentOffsetInPage(offsetInPage+size);","firstPage=store.getNextPagePos();","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","this(database,con,name,columns,null,indexes,foreignKeys);","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsexistIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTables(Stringcatalog,StringschemaPattern,StringtableNamePattern,String[]types)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};","Databasedatabase;","if(catalog==null){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returne.value;","e=e.next;","finalbooleancontainsKey(longkey){","return(get(key)!=null);","finalTableStorePageadd(longkey,TableStorePagevalue){","inti=(int)(key%table.length);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["expr.setFrom(fromEntry,colIdx,table);","break;","}else","throwSmallSQLException.create(Language.COL_INVALID_NAME,newObject[]{expr.getName()});","if(t==tables.size())","throwSmallSQLException.create(Language.COL_WRONG_PREFIX,tableAlias);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.LEFT_JOIN);","break;","caseSQLTokenizer.RIGHT:","token=nextToken(MISSING_OUTER_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatefinallongnextPagePos;","StoreNull(){","this(-1);","StoreNull(longnextPos){","nextPagePos=nextPos;","finalbooleanisNull(intoffset){"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal(scale);","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbyte[]getBytes(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return\"database,use\";","privateStringgetFunctions(intfrom,intto){","StringBufferbuf=newStringBuffer();","for(inti=from;i\<=to;i++){","if(i!=from)buf.append(\',\');","buf.append(SQLTokenizer.getKeyWord(i));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintIFNULL=1301;//firstsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","staticfinalintUSER=1302;","staticfinalintCONVERT=1303;","staticfinalintCAST=1304;","staticfinalintIIF=1305;//lastsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["longgetLong()throwsException{","returnExpressionValue.getLong(getObject(),getDataType());","floatgetFloat()throwsException{","returnExpressionValue.getFloat(getObject(),getDataType());","doublegetDouble()throwsException{","returnExpressionValue.getDouble(getObject(),getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["finalprivateIndexDescriptionsindexes=newIndexDescriptions();","finalprivateForeignKeysforeignKeys=newForeignKeys();","finalprivateinttableCommandType;","CommandTable(Loggerlog,Stringcatalog,Stringname,inttableCommandType){","super(log);","this.type=SQLTokenizer.TABLE;"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["if(token!=null){","throwcreateSyntaxError(token,Language.STXADD_ADDITIONAL_TOK);","returncmd;","finalprivateCommandparse(char[]sql)throwsSQLException{","this.sql=sql;","this.tokens=SQLTokenizer.parseSQL(sql);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["previousToken();","break;","col.setDataType(dataType);","returncol;","privateCommandCreateViewcreateView()throwsSQLException{","StringviewName=nextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["value=newMutableInteger(0);","dataType=SQLTokenizer.INT;","break;","default:thrownewError();","ExpressionValue(Objectvalue,intdataType){","super(VALUE);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["booleanok=getFile(database).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","@Override","voidclose()throwsException{","if(indexes!=null)","indexes.close();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["privatestaticfinalint[]MISSING_PARENTHESIS_L={SQLTokenizer.PARENTHESIS_L};","privatestaticfinalint[]MISSING_PARENTHESIS_R={SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_DATATYPE={SQLTokenizer.BIT,SQLTokenizer.BOOLEAN,SQLTokenizer.BINARY,SQLTokenizer.VARBINARY,SQLTokenizer.RAW,SQLTokenizer.LONGVARBINARY,SQLTokenizer.BLOB,SQLTokenizer.TINYINT,SQLTokenizer.SMALLINT,SQLTokenizer.INT,SQLTokenizer.COUNTER,SQLTokenizer.BIGINT,SQLTokenizer.SMALLMONEY,SQLTokenizer.MONEY,SQLTokenizer.DECIMAL,SQLTokenizer.NUMERIC,SQLTokenizer.REAL,SQLTokenizer.FLOAT,SQLTokenizer.DOUBLE,SQLTokenizer.DATE,SQLTokenizer.TIME,SQLTokenizer.TIMESTAMP,SQLTokenizer.SMALLDATETIME,SQLTokenizer.CHAR,SQLTokenizer.NCHAR,SQLTokenizer.VARCHAR,SQLTokenizer.NVARCHAR,SQLTokenizer.LONG,SQLTokenizer.LONGNVARCHAR,SQLTokenizer.LONGVARCHAR,SQLTokenizer.CLOB,SQLTokenizer.NCLOB,SQLTokenizer.UNIQUEIDENTIFIER,SQLTokenizer.JAVA_OBJECT,SQLTokenizer.SYSNAME};","privatestaticfinalint[]MISSING_SQL_DATATYPE={SQLTokenizer.SQL_BIGINT,SQLTokenizer.SQL_BINARY,SQLTokenizer.SQL_BIT,SQLTokenizer.SQL_CHAR,SQLTokenizer.SQL_DATE,SQLTokenizer.SQL_DECIMAL,SQLTokenizer.SQL_DOUBLE,SQLTokenizer.SQL_FLOAT,SQLTokenizer.SQL_INTEGER,SQLTokenizer.SQL_LONGVARBINARY,SQLTokenizer.SQL_LONGVARCHAR,SQLTokenizer.SQL_REAL,SQLTokenizer.SQL_SMALLINT,SQLTokenizer.SQL_TIME,SQLTokenizer.SQL_TIMESTAMP,SQLTokenizer.SQL_TINYINT,SQLTokenizer.SQL_VARBINARY,SQLTokenizer.SQL_VARCHAR};","privatestaticfinalint[]MISSING_INTO={SQLTokenizer.INTO};","privatestaticfinalint[]MISSING_BETWEEN_IN={SQLTokenizer.BETWEEN,SQLTokenizer.IN};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return-1;","IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","}else{","intidx=--status.idx;","if(idx==-1){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","((DateTime)value).time=Math.max(((DateTime)value).time,expr.getLong());","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","StringuuidStr=expr.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["longtemp=value[0]&0xFFFFFFFFL;","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","returnUtils.double2long(temp/scaleDoubleFactor[scale]*signum);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["break;","caseSQLTokenizer.BIGINT:","value=newMutableLong(expr.getLong());","break;","caseSQLTokenizer.REAL:","value=newMutableFloat(expr.getFloat());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["default:","if(isKeyword(token)){","previousToken();","returnfromSource;","if(!fromSource.hasAlias()){","fromSource.setAlias(token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam3.getBoolean();","intgetInt()throwsException{","if(param1.getBoolean())","returnparam2.getInt();","returnparam3.getInt();","longgetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["cmd.sql=newString(sql,token.offset,sql.length-token.offset);","select();//Parsetocheckforvalid","returncmd;","privateCommandTablecreateIndex(booleanunique)throwsSQLException{","StringindexName=nextIdentifier();","nextToken(MISSING_ON);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["afterLastValidFilePos=store.getNextPagePos();","returntrue;","}else{","filePos=-1;","noRow();","returnfalse;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnENTRIES;","privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"Operazionenonsupportata:{0}.\"},","{CANT_LOCK_FILE,\"Impossibilebloccareilfile\'\'{0}\'\'.UndatabaseSmallSQLDatabasepuÃ²essereapertodaununicoprocesso.\"},","{DB_EXISTENT,\"Ildatabase\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{DB_NONEXISTENT,\"Ildatabase\'\'{0}\'\'Nonesiste.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(!result){","if(fullRowCount==0){","returnfalse;","if(fullReturnCounter\<0){","fullReturnCounter=0;","right.first();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["node.saveValue(rowOffset);","returnnull;","returnnode.addRoot();","thrownewError();","finalprivateIndexNodefind(IndexNodenode,char[]key,ArrayListnodeList){","intlength=key.length;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["return(float)readDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/(float)10000.0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/(float)10000.0;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"CLUSTERED\",CLUSTERED);","addKeyWord(\"NONCLUSTERED\",NONCLUSTERED);","addKeyWord(\"REFERENCES\",REFERENCES);","addKeyWord(\"UNION\",UNION);","addKeyWord(\"ALL\",ALL);","addKeyWord(\"DISTINCT\",DISTINCT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["switch(token.value){","caseSQLTokenizer.PARENTHESIS_L:","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:","throwcreateSyntaxError(token,validValues);","returntoken;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["correctPointers(0,oldOffset,-2,0);","size-=2;","System.arraycopy(data,oldOffset+2,data,oldOffset,size-oldOffset);","offset=oldOffset;","finalprivatevoidcorrectPointers(intstartOffset,intoldOffset,intdiff,intlevel){","offset=startOffset;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["addKeyWord(\"HOUR\",HOUR);","addKeyWord(\"MILLISECOND\",MILLISECOND);","addKeyWord(\"MINUTE\",MINUTE);","addKeyWord(\"MONTH\",MONTH);","addKeyWord(\"MONTHNAME\",MONTHNAME);","addKeyWord(\"GETDATE\",NOW);//aliasforMSSQLServer"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(!readonly){","try{","FileLocklock=channel.tryLock();","if(lock==null){","throwSmallSQLException.create(Language.CANT_LOCK_FILE,file);","}catch(SQLExceptionsqlex){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["case10:","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(month==1){","if(day==30){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==29){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","page=find(page,longToBinarySortOrder(expr.getLong()),4,nodeList);","break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["booleanlast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisLast()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisAfterLast()throwsSQLException,Exception{","throwSmallSQLException.create(Language.RSET_FWDONLY);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["importjava.io.*;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;","finalclassDatabase{","staticprivateHashMapdatabases=newHashMap();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["break;","caseSQLTokenizer.OCTETLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionOctetLen();","break;","caseSQLTokenizer.REPEAT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{STMT_IS_CLOSED,\"HY010\"},","{SUBQUERY_COL_COUNT,\"01000\"},","{JOIN_DELETE,\"01000\"},","{JOIN_INSERT,\"01000\"},","{DELETE_WO_FROM,\"01000\"},","{INSERT_WO_FROM,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["return(page[offset++]\<\<8)|(page[offset++]&0xFF);","voidwriteInt(intvalue){","intnewSize=offset+4;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","value=newMutableInteger(expr.getInt());","break;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["updateBigDecimal(findColumn(columnName),x);","publicvoidupdateString(StringcolumnName,Stringx)throwsSQLException{","updateString(findColumn(columnName),x);","publicvoidupdateBytes(StringcolumnName,byte[]x)throwsSQLException{","updateBytes(findColumn(columnName),x);","publicvoidupdateDate(StringcolumnName,Datex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnfalse;","voidnullRow(){","thrownewError();","voidnoRow(){","currentRow=null;","finalprivatebooleanmove(){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["addKeyWord(\"DAYOFWEEK\",DAYOFWEEK);","addKeyWord(\"DAYOFYEAR\",DAYOFYEAR);","addKeyWord(\"DAY\",DAY);","addKeyWord(\"HOUR\",HOUR);","addKeyWord(\"MILLISECOND\",MILLISECOND);","addKeyWord(\"MINUTE\",MINUTE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["inttype;","if(dateinstanceofjava.sql.Date)","type=SQLTokenizer.DATE;","else","if(dateinstanceofjava.sql.Time)","type=SQLTokenizer.TIME;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintIDENTITY=221;","staticfinalintINNER=222;","staticfinalintJOIN=223;","staticfinalintON=224;","staticfinalintOUTER=225;","staticfinalintFULL=226;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.createFromException(e);","publicURLgetURL(StringcolumnName)throwsSQLException{","returngetURL(findColumn(columnName));","publicvoidupdateRef(intcolumnIndex,Refx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blob\");","publicvoidupdateBlob(StringcolumnName,Blobx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnstore.getDouble(offsets[colIdx],dataTypes[colIdx]);","@Override","finallonggetMoney(intcolIdx)throwsException{","returnstore.getMoney(offsets[colIdx],dataTypes[colIdx]);","@Override","finalMutableNumericgetNumeric(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["{INDEX_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeingÃ¼ltigerIndexspeicher.\"},","{INDEX_CORRUPT,\"ErrorbeimLadendesIndex.DieIndexDateiistbeschÃ¤digt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ZuvieleidentischeEintrÃ¤geimIndex.\"},","{FILE_TOONEW,\"Dateiversion({0})derDatei\'\'{1}\'\'istzuneufÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_TOOOLD,\"Dateiversion({0})derDatei\'\'{1}\'\'istzualtfÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_CANT_DELETE,\"Datei\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["Shorttype=Utils.getShort(DatabaseMetaData.tableIndexOther);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["voidwriteChars(char[]value){","verifyFreePufferSize(2*value.length);","for(inti=0;i\<value.length;i++){","charc=value[i];","puffer[offset++]=(byte)(c\>\>8);","puffer[offset++]=(byte)(c);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["expr=newExpressionName(Expression.SUM);","break;","caseSQLTokenizer.MAX:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MAX);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetLong();","doublegetDouble()throwsException{","returngetLong();","longgetMoney()throwsException{","returngetLong()*10000;","MutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["this.dataType=val.dataType;","this.length=val.length;","booleanisNull(){","returngetObject()==null;","booleangetBoolean()throwsException{","returngetBoolean(getObject(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["setTime(findParameter(parameterName),x);","publicvoidsetTimestamp(StringparameterName,Timestampx)throwsSQLException{","setTimestamp(findParameter(parameterName),x);","publicvoidsetAsciiStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setAsciiStream(findParameter(parameterName),x,length);","publicvoidsetBinaryStream(StringparameterName,InputStreamx,intlength)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["privateintsize;","privateString[]data;","Strings(){","data=newString[16];","finalintsize(){","returnsize;"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["tokens.add(newSQLToken(c,i,i+1));","wasWhiteSpace=true;","tokenStart=i+1;","}else{","quoteBuffer.append(c);","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{FILE_TOOOLD,\"Fileversion({0})offile\'\'{1}\'\'istoooldforthisruntime.\"},","{FILE_CANT_DELETE,\"File\'\'{0}\'\'can\'tbedeleted.\"},","{ROW_0_ABSOLUTE,\"Row0isinvalidformethodabsolute().\"},","{ROW_NOCURRENT,\"Nocurrentrow.\"},","{ROWS_WRONG_MAX,\"Wrongmaxrowsvalue:{0}.\"},","{ROW_LOCKED,\"RowislockedfromanotherConnection.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["staticfinalintCONSTRAINT=250;","staticfinalintPRIMARY=251;","staticfinalintFOREIGN=252;","staticfinalintKEY=253;","staticfinalintUNIQUE=254;","staticfinalintCLUSTERED=255;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return\"\";","publicbooleanisReadOnly(){","returnfalse;","publicbooleannullsAreSortedHigh(){","returnfalse;","publicbooleannullsAreSortedLow(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(rowIdx\>=0)","rowSource.setRowPosition(rowList.get(rowIdx));","booleanresult;","while((result=next())&&row-1\>rowIdx){/*scrollforward*/}","returnresult;","booleanrelative(introws)throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnDouble.parseDouble(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalpublicvoidcancel()throwsSQLException{","checkStatement();","finalpublicSQLWarninggetWarnings(){","returnnull;","finalpublicvoidclearWarnings(){","finalpublicvoidsetCursorName(Stringname)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["privatestaticStringstripMsg(Throwablethrowable){","Stringmsg=throwable.getMessage();","if(msg==null||msg.length()\<30){","Stringmsg2=throwable.getClass().getName();","msg2=msg2.substring(msg2.lastIndexOf(\'.\')+1);","if(msg!=null)"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["privateCommandSetsetTransaction()throwsSQLException{","SQLTokentoken=nextToken(MISSING_ISOLATION);","token=nextToken(MISSING_LEVEL);","token=nextToken(COMMANDS_TRANS_LEVEL);","CommandSetcmd=newCommandSet(con.log,SQLTokenizer.LEVEL);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["nextToken(MISSING_COMMA);","expr=expression(cmd,0);","nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampAdd(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);","returnexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"ISNULL\",IFNULL);//aliasforIFNULL,usedfromMSSQLServerwith2parameter,fromMSAccesswith1parameter","addKeyWord(\"IFNULL\",IFNULL);","addKeyWord(\"USER\",USER);","addKeyWord(\"CONVERT\",CONVERT);","addKeyWord(\"CAST\",CAST);","addKeyWord(\"IIF\",IIF);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.CHAR:","page=add(page,rowOffset,stringToBinarySortOrder(expr.getString(),true),isLastValues);","break;","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["if(storePage.page==null){","FileChannelraFile=storePage.raFile;","synchronized(raFile){","if(filePos\>=raFile.size()-PAGE_CONTROL_SIZE){","returnnull;","raFile.position(filePos);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoidsetRowPosition(longrowPosition){","rowPos=(int)rowPosition;","finalbooleanrowInserted(){","returnfalse;","finalbooleanrowDeleted(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["staticCommandSelectcreateMemoryCommandSelect(SSConnectioncon,String[]colNames,Object[][]data)throwsSQLException{","MemoryResultsource=newMemoryResult(data,colNames.length);","CommandSelectcmd=newCommandSelect(con.log);","for(inti=0;i\<colNames.length;i++){","ExpressionNameexpr=newExpressionName(colNames[i]);","cmd.addColumnExpression(expr);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["minute=t%60;","t/=60;","hour=t%24;","year=1970-(int)(t/365.2425);","booleanisLeap;","do{"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.BOOLEAN:","page=add(page,rowOffset,expr.getBoolean()?2:1,isLastValues,1);","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","page=add(page,rowOffset,numericToBinarySortOrder(expr.getNumeric()),isLastValues);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returngetClob(findParameter(parameterName));","publicArraygetArray(StringparameterName)throwsSQLException{","returngetArray(findParameter(parameterName));","publicDategetDate(StringparameterName,Calendarcal)throwsSQLException{","returngetDate(findParameter(parameterName),cal);","publicTimegetTime(StringparameterName,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetVersionColumns(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["writeShort(0);","size=offset;","return;","intshift=48;","booleanfirstNode=(size\>2);//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","while(shift\>=0){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(expr==null){","for(inti=0;i\<size;i++)","if(data[i]==null)","returni;","}else{","for(inti=0;i\<size;i++)"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["caseSQLTokenizer.DECIMAL:","returngetNumericImpl();","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(getMoneyImpl(),4);","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["rows.toArray(data);","CommandSelectcmdSelect=Utils.createMemoryCommandSelect(con,colNames,data);","Expressionsorder=newExpressions();","order.add(newExpressionName(\"TABLE_TYPE\"));","order.add(newExpressionName(\"TABLE_NAME\"));","cmdSelect.setOrder(order);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["switch(token.value){","caseSQLTokenizer.SELECT:","returnselect();","caseSQLTokenizer.DELETE:","returndelete();","caseSQLTokenizer.INSERT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["initValue(expr);","}elseif(!expr.isNull()){","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,daten.length+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(daten.length);","store.writeBytes(daten);","writeLong(store.writeFinsh(null));","byte[]readLongBinary()throwsException{","longlobFilePos=readLong();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intgetFunction(){","returnSQLTokenizer.CONVERT;","booleanisNull()throwsException{","returnparam1.isNull();","booleangetBoolean()throwsException{","returnExpressionValue.getBoolean(getObject(),getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["intmask=0xFFFFFFFF\>\>\>(32-bitCount);","dataSourceIdx=(int)rowPosition&mask;","currentDS=dataSources.get(dataSourceIdx);","currentDS.setRowPosition(rowPosition\>\>bitCount);","finalbooleanrowInserted(){","returncurrentDS.rowInserted();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["database=Database.getDatabase(catalog,con,false);","ArrayListrows=newArrayList();","booleanisTypeTable=types==null;","booleanisTypeView=types==null;","for(inti=0;types!=null&&i\<types.length;i++){","if(\"TABLE\".equalsIgnoreCase(types[i]))isTypeTable=true;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["addKeyWord(\"INNER\",INNER);","addKeyWord(\"JOIN\",JOIN);","addKeyWord(\"ON\",ON);","addKeyWord(\"OUTER\",OUTER);","addKeyWord(\"FULL\",FULL);","addKeyWord(\"CROSS\",CROSS);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","ForeignKeysreferences=((Table)tab).references;","for(inti=0;i\<references.size();i++){","ForeignKeyforeignKey=references.get(i);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\<0)//castneededforCompiler1.5","value=str;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Stringstr2=ExpressionFunctionSoundex.getString(param2.getString());","intdiff=0;","for(inti=0;i\<4;i++){","if(str1.charAt(i)==str2.charAt(i)){","diff++;","returndiff;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["Setinserted=newHashSet();//forduplicateschecking","for(inti=0;i\<SQL_STATES.length;i++){","Stringkey=SQL_STATES[i][0];","if(!inserted.add(key)){","thrownewIllegalArgumentException(\"Duplicatekey:\"+key);","else{"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicstaticfinalStringPARAM_CLASS_UNKNOWN=\"SS-0370\";","publicstaticfinalStringPARAM_EMPTY=\"SS-0371\";","publicstaticfinalStringPARAM_IDX_OUT_RANGE=\"SS-0372\";","publicstaticfinalStringCOL_DUPLICATE=\"SS-0400\";","publicstaticfinalStringCOL_MISSING=\"SS-0401\";","publicstaticfinalStringCOL_VAL_UNMATCH=\"SS-0402\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["formatMillis(details.millis,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case10://USAmm-dd-yy","formatNumber(details.month+1,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalvoidsetRowPosition(longrowPosition)throwsException{","filePos=rowPosition;","if(filePos\<0||!moveToRow()){","store=newStoreNull(store.getNextPagePos());","@Override","finalbooleanrowInserted(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["intgetDataType(){","returndataType;","intgetDisplaySize(){","returnSSResultSetMetaData.getDisplaySize(dataType,precision,scale);","voidsetScale(intscale){","this.scale=scale;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["caseSQLTokenizer.SMALLMONEY:","page=find(page,longToBinarySortOrder(expr.getLong()),4,nodeList);","break;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["voidwriteTo(FileChannelfile)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(puffer,0,offset);","file.write(buffer);","voidwriteByte(intvalue){","verifyFreePufferSize(1);","puffer[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["SQLTokenizer.TINYINT,","SQLTokenizer.BIT,","SQLTokenizer.BOOLEAN,","SQLTokenizer.LONGNVARCHAR,","SQLTokenizer.UNIQUEIDENTIFIER,","SQLTokenizer.NVARCHAR,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["getUpdateValue(columnIndex).set(x,dataType);","if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType);","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType,intlength)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType,length);","if(st.con.log.isLogging()){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["booleanisCarryOver=true;","while(i\>=0&&isCarryOver)","isCarryOver=(value[i--]+=1)==0;","if(valueLength\>1&&value[0]==0){","int[]temp=newint[valueLength-1];","System.arraycopy(value,1,temp,0,valueLength-1);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["Stringstr=expr.getString();","if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\>0)//castneededforCompiler1.5","value=str;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","returnnewString((byte[])obj);","returnobj.toString();","ObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["publicintgetDriverMinorVersion(){","returnSSDriver.drv.getMinorVersion();","publicbooleanusesLocalFiles(){","returnfalse;","publicbooleanusesLocalFilePerTable(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["addKeyWord(\"TINYINT\",TINYINT);","addKeyWord(\"SMALLINT\",SMALLINT);","addKeyWord(\"INTEGER\",INT);","addKeyWord(\"INT\",INT);","addKeyWord(\"SERIAL\",COUNTER);//aliasforMySQLandPostgreSQL","addKeyWord(\"COUNTER\",COUNTER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnnewExpressionValue(Boolean.FALSE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.ESCAPE_L:{","token=nextToken(COMMANDS_ESCAPE);","SQLTokenpara=nextToken(MISSING_EXPRESSION);","Expressionexpr;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?newMutableNumeric(1):newMutableNumeric(0);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalStringgetAlias(){","returnalias;","finalvoidsetAlias(Stringalias){","this.alias=alias;","voidsetParams(Expression[]params){","this.params=params;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["if(indexes!=null)","indexes.drop(database);","booleanok=getFile(database).delete();","if(!ok)throwSmallSQLException.create(Language.TABLE_CANT_DROP,name);","@Override","voidclose()throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}catch(SQLExceptionsqlex){","throwsqlex;","}catch(Throwableth){","throwSmallSQLException.createFromException(Language.CANT_LOCK_FILE,file,th);","returnchannel;","staticfinalExpressionsgetExpressionNameFromTree(Expressiontree){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returntrue;","publicbooleansupportsPositionedUpdate(){","returntrue;","publicbooleansupportsSelectForUpdate(){","returntrue;","publicbooleansupportsStoredProcedures(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{UNSUPPORTED_CONVERSION_FUNC,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"NichtunterstÃ¼tzterTypfÃ¼rCONVERTFunktion:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rSUMFunktion.\"},","{UNSUPPORTED_TYPE_MAX,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rMAXFunktion.\"},","{UNSUPPORTED_CONVERSION,\"Kannnichtkonvertieren\'\'{0}\'\'[{1}]zu\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionINSERT.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["publiclonglongValue(){","return(long)value;","publicStringtoString(){","returnString.valueOf(value);","publicObjectgetImmutableObject(){","returnnewDouble(value);"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["returnTypes.JAVA_OBJECT;","caseSQLTokenizer.UNIQUEIDENTIFIER:","return-11;","caseSQLTokenizer.NULL:","returnTypes.NULL;","default:thrownewError(\"DataType:\"+type);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{DAYS_TOOLARGE,\"DieTagesindzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"DieStundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"DieMinutensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"DieSekundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"DieMillisekundensindzugroÃŸimTIMESTAMPWert\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'isteinungÃ¼ltigesDATE,TIMEorTIMESTAMP.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.CLOB:","returnUtils.bytes2unique(Utils.unique2bytes(param1.getString()),0);","returnUtils.bytes2unique(param1.getBytes(),0);","Object[]param={SQLTokenizer.getKeyWord(dataType)};","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV,param);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(status.nodeValue!=null){","if(status.nodeValueinstanceofIndexNode){","level++;","nodeStack.push(","newIndexNodeScrollStatus((IndexNode)status.nodeValue,","(expressions.get(level).getAlias()!=SQLTokenizer.DESC_STR),"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|","|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));","if(i==0){","if(isLastValue){","node.addNode(digit,rowOffset);","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["for(inti=0;i\<value.length;i++){","value[i]=readInt();","returnnewMutableNumeric(signum,value,scale);","voidwriteTimestamp(longts){","writeLong(ts);","longreadTimestamp(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleanfirst()throwsException;","booleanprevious()throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["this.raFile=raFile;","staticFileIndexload(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);","raFile.read(buffer);","buffer.position(0);","booleanunique=buffer.get()!=0;"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["caseSQLTokenizer.ESCAPE_R:","if(parenthesis==token.value)returnfromSource;","if(parenthesis==0){","previousToken();","returnfromSource;","throwcreateSyntaxError(token,Language.STXADD_FROM_PAR_CLOSE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["do{","if(!left.next()){","returnfalse;","rows=index.findRows(leftEx,false,null);","}while(rows==null);","if(rowsinstanceofLong){"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["@Override","finalbooleanisNull(intcolIdx)throwsException{","returnstore.isNull(offsets[colIdx]);","@Override","finalbooleangetBoolean(intcolIdx)throwsException{","returnstore.getBoolean(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnInteger.parseInt(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getInt(ois.readObject().toString(),SQLTokenizer.VARCHAR);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(column==null){","column=newColumn();","exprName.setFrom(this,idx,column);","switch(exprName.getType()){","caseExpression.MAX:","caseExpression.MIN:"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returntrue;","finalbooleanresult=rowSource.next();","if(result){","rowList.add(rowSource.getRowPosition());","returntrue;","rowIdx=rowList.size();//rowIdxshouldbeneverlargerasrowcount"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returnnewInteger(value);","staticfinalShortgetShort(intvalue){","if(value\>=-4&&value\<256){","returnshortCache[value+4];","}else","returnnewShort((short)value);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnUtils.doubleToMoney(((Number)obj).doubleValue());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["System.out.println(l);","System.out.println(\"============================\");","privatefinalFileChannelraFile;","FileIndex(booleanunique,FileChannelraFile){","this(newFileIndexNode(unique,(char)-1,raFile),raFile);","FileIndex(FileIndexNoderoot,FileChannelraFile){"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["expr=expression(cmd,0);","nextToken(MISSING_AS);","Columncol=datatype(false);","nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,null);","caseSQLTokenizer.TIMESTAMPDIFF:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateListrowList=newArrayList();//ListofExpressionGroup[]","MemoryResult(){/*shouldbeempty*/}","MemoryResult(Object[][]data,intcolCount)throwsSQLException{","for(intc=0;c\<colCount;c++){","Columncolumn=newColumn();","column.setDataType(SQLTokenizer.NULL);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["returnbuf.toString();","case5://italianodd-mm-yy","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returntrue;","publicbooleansupportsConvert(intfromType,inttoType){","returntrue;","publicbooleansupportsTableCorrelationNames(){","returntrue;","publicbooleansupportsDifferentTableCorrelationNames(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.alias=this.name=name;","finalStringgetAlias(){","returnalias;","finalvoidsetAlias(Stringalias){","this.alias=alias;","voidsetParams(Expression[]params){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["Expressionexpr2=newExpressionName(Expression.COUNT);","expr2.setParams(params);","expr=newExpressionArithmetic(expr,expr2,ExpressionArithmetic.DIV);","returnexpr;","default:","throwcreateSyntaxError(token,Language.STXADD_FUNC_UNKNOWN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Stringstables=getTables(table);","for(intt=0;t\<tables.size();t++){","StringtableName=tables.get(t);","TableViewtab=getTableView(con,tableName);","if(!(tabinstanceofTable))continue;","IndexDescriptionsindexes=((Table)tab).indexes;"]": ["|project://smallsql/src/smallsql/database/Database.java|","|project://smallsql/src/smallsql/database/Database.java|"],
"["{UNSUPPORTED_TYPE_MAX,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rMAXFunktion.\"},","{UNSUPPORTED_CONVERSION,\"Kannnichtkonvertieren\'\'{0}\'\'[{1}]zu\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionINSERT.\"},","{SUBSTR_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"DerStringWertistzugroÃŸfÃ¼rdieSpalte.\"},","{VALUE_BIN_TOOLARGE,\"EinBinÃ¤reWertmitLÃ¤nge{0}istzugroÃŸfÃ¼reineSpaltemitderGrÃ¶ÃŸe{1}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["thrownewIllegalArgumentException(\"Localenotfoundinthetree:\"+localeStr);","protectedLanguage(){","messages=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","sqlStates=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","addMessages(MESSAGES);","setSqlStates();"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["staticfinalintHOUR=1208;","staticfinalintMILLISECOND=1209;","staticfinalintMINUTE=1210;","staticfinalintMONTH=1211;","staticfinalintMONTHNAME=1212;","staticfinalintNOW=1213;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{UNSUPPORTED_TYPE_CONV,\"01000\"},","{UNSUPPORTED_TYPE_SUM,\"01000\"},","{UNSUPPORTED_TYPE_MAX,\"01000\"},","{UNSUPPORTED_CONVERSION,\"01000\"},","{INSERT_INVALID_LEN,\"01000\"},","{SUBSTR_INVALID_LEN,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnreadBoolean()?10000:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","return(long)(Utils.bytes2double(readBinary())*10000L);","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()*10000L;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["isAfterLast=true;","left.noRow();","right.noRow();","row=0;","voidexecute()throwsException{","left.execute();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["caseSQLTokenizer.CREATE:","returncreate();","caseSQLTokenizer.DROP:","returndrop();","caseSQLTokenizer.ALTER:","returnalter();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnexpr.getFloat();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicdoublegetDouble(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returncurrentDS.getDouble(colIdx);","finallonggetMoney(intcolIdx)throwsException{","returncurrentDS.getMoney(colIdx);","finalMutableNumericgetNumeric(intcolIdx)throwsException{","returncurrentDS.getNumeric(colIdx);","finalObjectgetObject(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["addKeyWord(\"RADIANS\",RADIANS);","addKeyWord(\"RAND\",RAND);","addKeyWord(\"ROUND\",ROUND);","addKeyWord(\"SIGN\",SIGN);","addKeyWord(\"SIN\",SIN);","addKeyWord(\"SQRT\",SQRT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["millis=Integer.parseInt(strMillis);","break;","default:","millis=Integer.parseInt(strMillis.substring(0,3));","}else","millis=0;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returngetCrossReference(null,null,null,null,null,table);","publicResultSetgetExportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,table,null,null,null);","publicResultSetgetCrossReference(StringprimaryCatalog,StringprimarySchema,StringprimaryTable,StringforeignCatalog,StringforeignSchema,StringforeignTable)throwsSQLException{","try{","String[]colNames={\"PKTABLE_CAT\",\"PKTABLE_SCHEM\",\"PKTABLE_NAME\",\"PKCOLUMN_NAME\",\"FKTABLE_CAT\",\"FKTABLE_SCHEM\",\"FKTABLE_NAME\",\"FKCOLUMN_NAME\",\"KEY_SEQ\",\"UPDATE_RULE\",\"DELETE_RULE\",\"FK_NAME\",\"PK_NAME\",\"DEFERRABILITY\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalprivateHashMaplocks=newHashMap();","privateSSConnectiontabLockConnection;//ifsetthenitistheConnectionwithaLOCK_TAB","privateinttabLockCount;","Table(Databasedatabase,SSConnectioncon,Stringname,FileChannelraFile,longoffset,inttableFormatVersion)throwsException{","super(name,newColumns());","this.database=database;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["intgetRow()throwsException{","if(rowIdx\>=rowList.size())return0;","returnrowIdx+1;","longgetRowPosition(){","returnrowIdx;","voidsetRowPosition(longrowPosition)throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["{HOURS_TOOLARGE,\"ValoredelleoretroppoaltoininTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"ValoredeiminutitroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"ValoredeiseconditroppoaltoinTIMEoTIMESTAMP\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"VAloredeimilliseconditroppoaltoinTIMESTAMP\'\'{0}\'\'.\"},","{DATETIME_INVALID,\"\'\'{0}\'\'Ã¨unDATE,TIMEorTIMESTAMPnonvalido.\"},","{UNSUPPORTED_CONVERSION_OPER,\"Conversionenonsupportataversoiltipodidato\'\'{0}\'\'daltipo\'\'{1}\'\'perl\'\'operazione\'\'{2}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["intnewSize=offset+length;","if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,off,page,offset,length);","offset+=length;","byte[]readBytes(intlength){","byte[]daten=newbyte[length];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TableViewget(Stringname){","return(TableView)map.get(getUniqueKey(name));","voidput(Stringname,TableViewtableView){","map.put(getUniqueKey(name),tableView);","TableViewremove(Stringname){","return(TableView)map.remove(getUniqueKey(name));"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["ObjectgetObject(){","if(isEmpty()){","returnnull;","returnvalue;","StringgetString(){","Objectobj=getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.TOP:","token=nextToken(MISSING_EXPRESSION);","try{","intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(pattern.length()\>mIdx&&value.length()\>sIdx){","charm=Character.toUpperCase(pattern.charAt(mIdx++));","switch(m){","case\'%\':","range=true;","break;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["if(fileOffset\<0){","fileOffset=raFile.size();","raFile.position(fileOffset);","raFile.write(buffer);","returnfileOffset;","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["offset=4;","}else{","complement=newbyte[(value.length-v)*4];","offset=0;","intlast=value.length-1;","for(;v\<=last;v++){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(newValue!=null)","((MutableNumeric)value).add(newValue);","break;","caseSQLTokenizer.MONEY:","((Money)value).value+=expr.getMoney();","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["addKeyWord(\"USE\",USE);","addKeyWord(\"TOP\",TOP);","addKeyWord(\"ADD\",ADD);","addKeyWord(\"LIMIT\",LIMIT);","addKeyWord(\"DATABASE\",DATABASE);","addKeyWord(\"TABLE\",TABLE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["LongpageKey=newLong(readlock.fileOffset);//TODOperformance","TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);","while(lock!=null){","if(lock.con!=con)returnnull;//thereisalreadyanylockfromanotherconnection,wecannotstartwrite","if(lock.lockType\<LOCK_WRITE){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicbooleanisCurrency(intcolumn)throwsSQLException{","switch(getColumnExpression(column).getDataType()){","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalMutableNumericgetNumeric(intcolIdx)throwsException{","returnstore.getNumeric(offsets[colIdx],dataTypes[colIdx]);","@Override","finalObjectgetObject(intcolIdx)throwsException{","returnstore.getObject(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnnewExpressionValue(newDouble(tok),SQLTokenizer.DOUBLE);","}else{","try{","returnnewExpressionValue(newInteger(tok),SQLTokenizer.INT);","}catch(NumberFormatExceptione){","returnnewExpressionValue(newLong(tok),SQLTokenizer.BIGINT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","return((String)value).length();","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","return((byte[])value).length;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["this.type=type;","this.condition=condition;","this.left=left;","this.right=right;","finalbooleanisScrollable(){","returnfalse;//TODOperformance,ifleftandrightarescrollablethenthisshouldalsoscrollable"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["exprName.setFrom(this,idx,column);","}else{","patchExpressions(expr);","returnexpr;","finalvoidexecute()throwsException{","super.execute();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["{UNSUPPORTED_TYPE_CONV,\"NichtunterstÃ¼tzterTypfÃ¼rCONVERTFunktion:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rSUMFunktion.\"},","{UNSUPPORTED_TYPE_MAX,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rMAXFunktion.\"},","{UNSUPPORTED_CONVERSION,\"Kannnichtkonvertieren\'\'{0}\'\'[{1}]zu\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionINSERT.\"},","{SUBSTR_INVALID_LEN,\"UngÃ¼ltigeLÃ¤nge\'\'{0}\'\'inFunktionSUBSTRING.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnStoreImpl.recreateStore(this,storePage,pageOperation);","StoreImplgetStoreInsert(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.INSERT,-1);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-1);","StoreImplgetStoreTemp(SSConnectioncon)throwsException{","TableStorePagestorePage=newTableStorePage(con,this,LOCK_NONE,-2);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["longfirstPage;//offsetofthefirstpage","finalprivateHashMaplocks=newHashMap();","privateSSConnectiontabLockConnection;//ifsetthenitistheConnectionwithaLOCK_TAB","privateinttabLockCount;","Table(Databasedatabase,SSConnectioncon,Stringname,FileChannelraFile,longoffset,inttableFormatVersion)throwsException{","super(name,newColumns());"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnpuffer[offset++];","intreadShort(){","return((puffer[offset++]&0xFF)\<\<8)|(puffer[offset++]&0xFF);","intreadInt(){","return((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["finalbooleangetBoolean()throwsException{","returngetResult().getBoolean();","finalintgetInt()throwsException{","returngetResult().getInt();","finallonggetLong()throwsException{","returngetResult().getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["addKeyWord(\"N\",SQL_TSI_MINUTE);","addKeyWord(\"SQL_TSI_MINUTE\",SQL_TSI_MINUTE);","addKeyWord(\"HH\",SQL_TSI_HOUR);","addKeyWord(\"SQL_TSI_HOUR\",SQL_TSI_HOUR);","addKeyWord(\"DD\",SQL_TSI_DAY);","addKeyWord(\"SQL_TSI_DAY\",SQL_TSI_DAY);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["default:returnleft.isNull()||right.isNull();","byte[]getBytes()throwsjava.lang.Exception{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);","booleanisInList()throwsException{","if(left.isNull())returnfalse;","try{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["details2.month+=param1.getLong();","returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong()*3;","returnDateTime.calcMillis(details2);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["returntrue;","currentRow=null;","returnfalse;","booleanisNull(intcolIdx)throwsException{","returnget(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["while(tok.hasMoreTokens()){","StringkeyValue=tok.nextToken().trim();","if(keyValue.length()\>0){","idx1=keyValue.indexOf(\'=\');","if(idx1\>0){","Stringkey=keyValue.substring(0,idx1).toLowerCase().trim();"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["writeShort(expr.getInt());","break;","caseSQLTokenizer.INT:","writeInt(expr.getInt());","break;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{DB_EXISTENT,\"Database\'\'{0}\'\'alreadyexists.\"},","{DB_NONEXISTENT,\"Database\'\'{0}\'\'doesnotexist.\"},","{DB_NOT_DIRECTORY,\"Directory\'\'{0}\'\'isnotaSmallSQLdatabase.\"},","{DB_NOTCONNECTED,\"YouarenotconnectedwithaDatabase.\"},","{CONNECTION_CLOSED,\"Connectionisalreadyclosed.\"},","{VIEW_INSERT,\"INSERTisnotsupportedforaview.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicResultSetgetImportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,null,null,null,table);","publicResultSetgetExportedKeys(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","returngetCrossReference(null,null,table,null,null,null);","publicResultSetgetCrossReference(StringprimaryCatalog,StringprimarySchema,StringprimaryTable,StringforeignCatalog,StringforeignSchema,StringforeignTable)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["@Override","booleangetBoolean(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnfalse;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["Switch:while(true){","token=nextToken(MISSING_EXPRESSION);","switch(token.value){","caseSQLTokenizer.TOP:","token=nextToken(MISSING_EXPRESSION);","try{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}elsecmd.noColumns=true;","Switch:while(true)","switch(token.value){","caseSQLTokenizer.VALUES:{","token=nextToken(MISSING_PARENTHESIS_L);","cmd.addValues(expressionParenthesisList(cmd));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.INSERT:","caseSQLTokenizer.CREATE:","sizeUsed=sizePhysical=offset;","break;","caseSQLTokenizer.UPDATE:","if(status!=UPDATE_POINTER){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnreadLongString().getBytes();","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalclassMutableIntegerextendsNumberimplementsMutable{","intvalue;","MutableInteger(intvalue){","this.value=value;","publicdoubledoubleValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["staticfinalintASC=216;","staticfinalintDESC=217;","staticfinalintVALUES=218;","staticfinalintAS=219;","staticfinalintDEFAULT=220;","staticfinalintIDENTITY=221;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Stringtok=newString(sql,token.offset,token.length);","if((chr1\>=\'0\'&&\'9\'\>=chr1)||chr1==\'.\'){","previousToken();","if(token.length\>1&&(sql[token.offset+1]|0x20)==\'x\'){","if(isMinus){","throwcreateSyntaxError(token,Language.STXADD_OPER_MINUS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["command.append(line).append(\'\\n\');","}catch(Exceptione){","command.setLength(0);","e.printStackTrace();","privatestaticvoidprintRS(ResultSetrs)throwsSQLException{","ResultSetMetaDatamd=rs.getMetaData();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["returnDateTime.parse(str);","try{","returnLong.parseLong(str);","}catch(NumberFormatExceptione){","return(long)Double.parseDouble(str);","floatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.BIGINT:","longlValue=((Number)para1).longValue();","return(lValue\<0)?newLong(-lValue):para1;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetProcedureColumns(Stringcatalog,StringschemaPattern,StringprocedureNamePattern,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"COLUMN_NAME\",\"COLUMN_TYPE\",\"DATA_TYPE\",\"TYPE_NAME\",\"PRECISION\",\"LENGTH\",\"SCALE\",\"RADIX\",\"NULLABLE\",\"REMARKS\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["expr.setNameAfterTableAlias(nextIdentifier());","}else{","previousToken();","if(isMinus)","returnnewExpressionArithmetic(expr,ExpressionArithmetic.NEGATIVE);","returnexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncolumns.get(colIdx).getDataType();","finalTableViewgetTableView(){","returnnull;","finalvoiddeleteRow()throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidupdateRow(Expression[]updateValues)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["intnextEntry=(offset\<0)?-1:getUnsignedShort();","if(nextEntry\>=0){","result|=(((long)nextEntry)\<\<shift);","if(listEnum.stack\>=3){","listEnum.offsetStack[listEnum.stack]=offset;","returnresult;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnreadDate();","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringUNSUPPORTED_TYPE_SUM=\"SS-0285\";","publicstaticfinalStringUNSUPPORTED_TYPE_MAX=\"SS-0286\";","publicstaticfinalStringUNSUPPORTED_CONVERSION=\"SS-0287\";","publicstaticfinalStringINSERT_INVALID_LEN=\"SS-0288\";","publicstaticfinalStringSUBSTR_INVALID_LEN=\"SS-0289\";","publicstaticfinalStringVALUE_STR_TOOLARGE=\"SS-0310\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["buf.append(\'-\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case105://italianodd-mm-yyyy","formatNumber(details.day,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnstore.getMoney(offsets[colIdx],dataTypes[colIdx]);","@Override","finalMutableNumericgetNumeric(intcolIdx)throwsException{","returnstore.getNumeric(offsets[colIdx],dataTypes[colIdx]);","@Override","finalObjectgetObject(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["try{","TableViewResultresult=TableViewResult.getTableViewResult(tables.get(0));","TableViewtable=result.getTableView();","ColumnstabColumns=table.columns;","intcount=tabColumns.size();","Expression[]updateValues=newExpression[count];"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["addKeyWord(\"CURDATE\",CURDATE);","addKeyWord(\"CURTIME\",CURTIME);","addKeyWord(\"CURRENT_DATE\",CURRENTDATE);","addKeyWord(\"DAYNAME\",DAYNAME);","addKeyWord(\"DAYOFMONTH\",DAYOFMONTH);","addKeyWord(\"DAYOFWEEK\",DAYOFWEEK);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["longtemp=value[0]&0xFFFFFFFFL;","buf.append(Long.toString(temp));","}else","if(value.length==2&&(value[0]\>0)){","longtemp=(((long)value[0])\<\<32)|(value[1]&0xFFFFFFFFL);","buf.append(Long.toString(temp));"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicintcompareTo(MutableNumericnumeric){","returntoBigDecimal().compareTo(numeric.toBigDecimal());","publicbooleanequals(Objectobj){","if(!(objinstanceofMutableNumeric))returnfalse;","returncompareTo((MutableNumeric)obj)==0;","publicBigDecimaltoBigDecimal(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getLong(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2long(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.table=table;","@Override","finalbooleaninit(SSConnectioncon)throwsException{","if(super.init(con)){","Columnscolumns=table.columns;","offsets=newint[columns.size()];"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["}else{","expressionDefList(cmd,expressions,columns);","returnnewIndexDescription(contrainName,tableName,constraintType,expressions,columns);","privateColumndatatype(booleanisEscape)throwsSQLException{","SQLTokentoken;","intdataType;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncommandSelect.last();","booleanisLast()throwsException{","returncommandSelect.isLast();","booleanisAfterLast()throwsException{","returncommandSelect.isAfterLast();","voidafterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returngetDouble(findParameter(parameterName));","publicbyte[]getBytes(StringparameterName)throwsSQLException{","returngetBytes(findParameter(parameterName));","publicDategetDate(StringparameterName)throwsSQLException{","returngetDate(findParameter(parameterName));","publicTimegetTime(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["floatgetFloat()throwsException{","returnExpressionValue.getFloat(getObject(),getDataType());","doublegetDouble()throwsException{","returnExpressionValue.getDouble(getObject(),getDataType());","longgetMoney()throwsException{","returnExpressionValue.getMoney(getObject(),getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["staticfinalFileChannelopenRaFile(Filefile,booleanreadonly)throwsFileNotFoundException,SQLException{","RandomAccessFileraFile=newRandomAccessFile(file,readonly?\"r\":\"rw\");","FileChannelchannel=raFile.getChannel();","if(!readonly){","try{","FileLocklock=channel.tryLock();"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalvoidremoveNode(chardigit){","intpos=findNodePos(digit);","if(pos!=-1){","intlength=nodes.length-1;","IndexNode[]temp=newIndexNode[length];","System.arraycopy(nodes,0,temp,0,pos);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["quoteBuffer.setLength(0);","quote=0;","tokenStart=i+1;","wasWhiteSpace=true;","}elsequoteBuffer.append(c);","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["super(name,newColumns());","this.sql=sql;","this.commandSelect=null;","write(database,con);","View(SSConnectioncon,CommandSelectcommandSelect)throwsException{","super(\"UNION\",newColumns());"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["this(newBigDecimal(val));","MutableNumeric(BigDecimalbig){","this(big.unscaledValue().toByteArray());","scale=big.scale();","MutableNumeric(intsignum,int[]value,intscale){","this.signum=signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["break;","default:thrownewError(\"\"+dataType);","break;","default:thrownewError();","privatevoidinitValue(Expressionexpr)throwsException{","dataType=expr.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatestaticfinalintINDEX=1;","finalDatabasedatabase;","FileChannelraFile;//filehandleofthetable","privateLobslobs;//filehandleoflobdataforthistable","longfirstPage;//offsetofthefirstpage","finalprivateHashMaplocks=newHashMap();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.BLOB:","returntrue;","returnfalse;","staticintgetDisplaySize(intdataType,intprecision,intscale){","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["FileChannelraFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,raFile,con,database));","writeMagic(raFile);","returnraFile;","abstractvoidwriteMagic(FileChannelraFile)throwsException;","StringgetName(){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["displaySize=Integer.parseInt(token.getName(sql));","}catch(Exceptione){","throwcreateSyntaxError(token,MISSING_NUMBERVALUE);","nextToken(MISSING_PARENTHESIS_R);","col.setPrecision(displaySize);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["TransactionSteppage=(TransactionStep)commitPages.get(i);","page.commit();","for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.freeLock();","commitPages.clear();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["column=null;","break;","caseSQLTokenizer.FROM:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;","from(selCmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowSource.beforeFirst();","booleanisBeforeFirst(){","returnrowIdx==-1||rowList.size()==0;","booleanisFirst(){","returnrowIdx==0&&rowList.size()\>0;","booleanfirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.REAL:","returngetFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{STXADD_FUNC_UNKNOWN,\"Funzionesconosciuta.\"},","{STXADD_PARAM_INVALID_COUNT,\"Totaleparametrinonvalido.\"},","{STXADD_JOIN_INVALID,\"Sintassidellajoinnonvalida.\"},","{STXADD_FROM_PAR_CLOSE,\"Parentesichiusanonattesanellaclausolafrom.\"},","{STXADD_KEYS_REQUIRED,\"Leparolechiaverichiestesono:\"},","{STXADD_NOT_NUMBER,\"Richiestovalorenumerico(passato=\'\'{0}\'\').\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["privateRowSourcefrom;","privateExpressionsgroupBy;//thelistofExpressionsintheGROUPBYclause","privateExpressionsexpressions=newExpressions();//ListofExpression","privateExpressionsinternalExpressions=newExpressions();//alistofAggregateFunctionandColNamesfromSELECT,GROUPBYandHAVING","GroupResult(CommandSelectcmd,RowSourcefrom,ExpressionsgroupBy,Expressionhaving,ExpressionsorderBy)throwsSQLException{","this.from=from;"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["idx2=datetime.indexOf(\'.\',idx1);","if(idx2\<0)idx2=datetime.length();","second=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","if(idx1\<length){","StringstrMillis=datetime.substring(idx1).trim();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["newParams[0]=newExpressionArithmetic(params[0],ExpressionArithmetic.ISNULL);","newParams[1]=params[1];","newParams[2]=params[0];","params=newParams;","paramCount=3;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["right.noRow();","row=0;","voidexecute()throwsException{","left.execute();","right.execute();","if(!createJoinScrollIndex()){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnnewLanguage();//defaulttoEnglish","privatestaticLanguagegetFromLocaleTree(StringlocaleStr)","throwsIllegalArgumentException{","Stringpart=localeStr;","while(true){","StringlangClassName=Language.class.getName()+\'_\'+part;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicvoidupdateRef(intcolumnIndex,Refx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blob\");","publicvoidupdateBlob(StringcolumnName,Blobx)throwsSQLException{","updateBlob(findColumn(columnName),x);","publicvoidupdateClob(intcolumnIndex,Clobx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["Stringstr=param1.getString();","intcount=param2.getInt();","StringBufferbuffer=newStringBuffer();","for(inti=0;i\<count;i++){","buffer.append(str);","returnbuffer.toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){","intk=tokenStart;","if(k==i){//pointisfirstcharacter","if(sql.length\>k+1){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finallonggetMoney()throwsException{","returngetInt()*10000;","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnInt.java|"],
"["protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewFileIndexNode(unique,digit,file);","voidsave()throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,fileOffset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","save(store);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnparam2.getDouble();","returnparam3.getDouble();","longgetMoney()throwsException{","if(param1.getBoolean())","returnparam2.getMoney();","returnparam3.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["packagesmallsql.database;","classColumnExpressionextendsColumn{","finalprivateExpressionexpr;","ColumnExpression(Expressionexpr){","this.expr=expr;","StringgetName(){"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["caseEQUALS:returnleft.getInt()==right.getInt();","caseGREATER:returnleft.getInt()\>right.getInt();","caseGRE_EQU:returnleft.getInt()\>=right.getInt();","caseLESSER:returnleft.getInt()\<right.getInt();","caseLES_EQU:returnleft.getInt()\<=right.getInt();","caseUNEQUALS:returnleft.getInt()!=right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(dirs!=null)","for(inti=0;i\<dirs.length;i++){","if(dirs[i].isDirectory()){","if(newFile(dirs[i],Utils.MASTER_FILENAME).exists()){","Object[]catalog=newObject[1];","catalog[0]=dirs[i].getPath();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["addKeyWord(\"DISTINCT\",DISTINCT);","addKeyWord(\"CASE\",CASE);","addKeyWord(\"WHEN\",WHEN);","addKeyWord(\"THEN\",THEN);","addKeyWord(\"ELSE\",ELSE);","addKeyWord(\"END\",END);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalvoidaddRow(ExpressionValue[]row){","rowList.add(row);","finalColumngetColumn(intcolIdx){","returncolumns.get(colIdx);","finalvoidaddColumn(Columncolumn){","columns.add(column);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["offset-=pointerSize;","writePointer(pointer+diff);","if(diff\>0)pointer+=diff;","if(level\<2){","startOffset=offset;","correctPointers(pointer,oldOffset,diff,level+1);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(isEmpty()){","returnnull;","returnvalue;","StringgetString(){","Objectobj=getObject();","if(obj==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["importjava.sql.*;","importjava.util.ArrayList;","importsmallsql.database.language.Language;","classSSStatementimplementsStatement{","finalSSConnectioncon;","Commandcmd;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();","case20:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["relative(0);","publicvoidcancelRowUpdates()throwsSQLException{","testNotInsertRow();","clearRowBuffer();","privatevoidclearRowBuffer(){","if(values!=null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnreadLongString();","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intgetFunction(){","returnSQLTokenizer.TIMESTAMPADD;","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{","returngetLong()!=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","publicclassSSResultSetMetaDataimplementsResultSetMetaData{","Expressionscolumns;","publicintgetColumnCount()throwsSQLException{","returncolumns.size();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["if(!isNull)offset+=count;//notuse+=directlybecausereadShortchangetheoffset","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","count=readByte();","offset+=2;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intgetInt()throwsException{","return(int)getLong();","longgetLong()throwsException{","if(isNull())return0;","switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["addGroupRow();","beforeFirst();","finalprivatevoidaddGroupRow(){","ExpressionValue[]newRow=currentRow=newExpressionValue[expressions.size()];","for(inti=0;i\<newRow.length;i++){","Expressionexpr=expressions.get(i);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["addKeyWord(\"FLOAT\",FLOAT);","addKeyWord(\"DOUBLE\",DOUBLE);","addKeyWord(\"DATE\",DATE);","addKeyWord(\"TIME\",TIME);","addKeyWord(\"DATETIME\",TIMESTAMP);//aliasforMSSQLServerdatatypeDATETIME","addKeyWord(\"TIMESTAMP\",TIMESTAMP);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["store=Store.NULL;","@Override","finalvoidnoRow(){","row=0;","store=Store.NOROW;","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,style);","caseSQLTokenizer.CAST:","expr=expression(cmd,0);","nextToken(MISSING_AS);","Columncol=datatype(false);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleanisSigned(intcolumn)throwsSQLException{","returnisSignedDataType(getColumnExpression(column).getDataType());","staticbooleanisSignedDataType(intdataType){","switch(dataType){","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["importjava.sql.*;","importjava.math.*;","importjava.util.Map;","importjava.util.Calendar;","importjava.net.URL;","importjava.io.*;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["page[offset++]=(byte)(value);","intreadShort(){","return(page[offset++]\<\<8)|(page[offset++]&0xFF);","voidwriteInt(intvalue){","intnewSize=offset+4;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getLong()==right.getLong();","caseGREATER:returnleft.getLong()\>right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["ex.printStackTrace();","JOptionPane.showMessageDialog(null,\"Youneedtostartthecommandlineofthe\\nSmallSQLDatabasewithaconsolewindow:\\n\\njava-jarsmallsql.jar\\n\\n\"+ex,\"FatalError\",JOptionPane.OK_OPTION);","return;","if(line==null){","return;//endofprogram","if(line.length()==0&&command.length()\>0){"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["finalprivatevoidinsertNodeLastLevel(intoctet)throwsSQLException{","intoldOffset=offset;","if(data.length\<size+2)resize();","System.arraycopy(data,offset,data,offset+2,size-offset);","size+=2;","writeShort(octet);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.INDEX_EXISTS,name);","FileChannelrandomFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,randomFile,con,database));","writeMagic(randomFile);","returnrandomFile;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returngetTimestamp(time);","staticclassDetails{","intyear;","intmonth;","intdayofyear;","intday;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.T://timeescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIME),SQLTokenizer.TIME);","break;","caseSQLTokenizer.TS://timestampescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalfloatgetFloat()throwsException{","if(isNull())return0;","returnFloat.parseFloat(getString().trim());","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnDouble.parseDouble(getString().trim());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["boolean[]temp=newboolean[fullRightRowCounter\<\<1];","System.arraycopy(isFullNotValid,0,temp,0,fullRightRowCounter);","isFullNotValid=temp;","if(!result){","if(fullRowCount==0){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["packagesmallsql.database;","abstractclassDataSourceextendsRowSource{","abstractbooleanisNull(intcolIdx)throwsException;","abstractbooleangetBoolean(intcolIdx)throwsException;","abstractintgetInt(intcolIdx)throwsException;","abstractlonggetLong(intcolIdx)throwsException;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["wasWhiteSpace=false;","break;","c|=0x20;//caseinsensitive","while(node!=null&&node.letter!=c)node=node.nextEntry;","if(node!=null){","value=node.value;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["rowIdx=(int)rowPosition;","move();","finalbooleanrowInserted(){","returnfalse;","finalbooleanrowDeleted(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.BIGINT:","returngetLongImpl();","caseSQLTokenizer.REAL:","returngetFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnreadBinary();","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["money.value=value;","returnmoney;","publicintintValue(){","return(int)(value/10000.0);","publicfloatfloatValue(){","returnvalue/10000.0F;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["ExpressionsrightEx=newExpressions();","intoperation=createJoinScrollIndex(cond,leftEx,rightEx,0);","if(operation!=0){","scroll=newJoinScrollIndex(type,left,right,leftEx,rightEx,operation);","returntrue;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["classColumnimplementsCloneable{","privateExpressiondefaultValue=Expression.NULL;//DefaultvalueforINSERT","privateStringdefaultDefinition;//StringrepresentationforDefaultValue","privateStringname;","privatebooleanidentity;","privatebooleancaseSensitive;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["TableStorePagelock=(TableStorePage)locks.get(pageKey);","TableStorePageusableLock=null;","while(lock!=null){","if(lock.con==con||","con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","usableLock=lock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintINDEX_VERSION=1;","privatefinalStringname;","finalprivateintconstraintType;//PRIMARY,UNIQUE,FOREIGIN,INDEX","finalprivateStringscolumns;","privateint[]matrix;","finalprivateExpressionsexpressions;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.DROP:","returndrop();","caseSQLTokenizer.ALTER:","returnalter();","caseSQLTokenizer.SET:","returnset();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseEQUALS_NULL:","caseEQUALS:returnleft.getBoolean()==right.getBoolean();","caseUNEQUALS:returnleft.getBoolean()!=right.getBoolean();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnreadLongString();","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicvoidsetCharacterStream(StringparameterName,Readerx,intlength)throwsSQLException{","setCharacterStream(findParameter(parameterName),x,length);","publicvoidsetDate(StringparameterName,Datex,Calendarcal)throwsSQLException{","setDate(findParameter(parameterName),x,cal);","publicvoidsetTime(StringparameterName,Timex,Calendarcal)throwsSQLException{","setTime(findParameter(parameterName),x,cal);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["System.out.println();","while(rs.next()){","for(inti=1;i\<=count;i++){","System.out.print(rs.getObject(i));","System.out.print(\'\\t\');","System.out.println();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["ArrayListrows=newArrayList();","booleanisTypeTable=types==null;","booleanisTypeView=types==null;","for(inti=0;types!=null&&i\<types.length;i++){","if(\"TABLE\".equalsIgnoreCase(types[i]))isTypeTable=true;","if(\"VIEW\".equalsIgnoreCase(types[i]))isTypeView=true;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["return(intValue\<0)?","~intValue:","intValue^0x80000000;","finalstaticprivatelongdoubleToBinarySortOrder(doublevalue){","longintValue=Double.doubleToLongBits(value);","return(intValue\<0)?"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["intcount=tabColumns.size();","Expression[]updateValues=newExpression[count];","if(newRowSources!=null){","for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnnewMutableNumeric(getInt());","MutableNumericnum=left.getNumeric();","num.mod(right.getNumeric());","returnnum;","default:throwcreateUnspportedConversion(SQLTokenizer.NUMERIC);","ObjectgetObject()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["packagesmallsql.database;","importjava.util.*;","importjava.io.*;","importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["staticlongcalcMillis(Detailsdetails){","returncalcMillis(details.year,details.month,details.day,details.hour,details.minute,details.second,details.millis);","staticlongcalcMillis(intyear,intmonth,finalintday,finalinthour,finalintminute,finalintsecond,finalintmillis){","longresult=millis;","result+=second*1000;","result+=minute*60000;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["case112://ISOyyyymmdd","formatNumber(details.year,4,buf);","formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);","returnbuf.toString();","case13:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.max(((MutableFloat)value).value,expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["next();","previous();","if(rowList.size()==0)returntrue;","returnfalse;","voidafterLast()throwsException{","if(rowIdx+1\<rowList.size()){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returntrue;","returnfalse;","staticbooleanisNumberDataType(intdataType){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalbooleanasc;","finalIndexNode[]nodes;","intidx;","finalObjectnodeValue;","finalintlevel;","IndexNodeScrollStatus(IndexNodenode,booleanasc,booleanscroll,intlevel){"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicInputStreamgetAsciiStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"getUnicodeStream\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(super.init(con)){","commandSelect.compile(con);","returntrue;","returnfalse;","TableViewgetTableView(){","returnview;"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["metadata=con.metadata;","log=con.log;","DatabasegetDatabase(booleanreturnNull)throwsSQLException{","testClosedConnection();","if(!returnNull&&database==null)throwSmallSQLException.create(Language.DB_NOTCONNECTED);","returndatabase;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getInt()==right.getInt();","caseGREATER:returnleft.getInt()\>right.getInt();","caseGRE_EQU:returnleft.getInt()\>=right.getInt();","caseLESSER:returnleft.getInt()\<right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnobj.toString();","ObjectgetObject()throwsException{","if(param1.isNull())returnnull;","finalintdataType=getDataType();","switch(dataType){","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","value=Money.createFromUnscaledValue(expr.getMoney());","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnewMutableNumeric(fValue);","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","doubledValue=((Number)obj).doubleValue();","if(Double.isInfinite(dValue)||Double.isNaN(dValue))","returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","default:thrownewError();","@Override"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.BINARY:","returnTypes.BINARY;","caseSQLTokenizer.VARBINARY:","returnTypes.VARBINARY;","caseSQLTokenizer.LONGVARBINARY:","returnTypes.LONGVARBINARY;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["columns.add(columnName);","expressions.add(newExpressionName(columnName));","}else{","expressionDefList(cmd,expressions,columns);","returnnewIndexDescription(contrainName,tableName,constraintType,expressions,columns);","privateColumndatatype(booleanisEscape)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticfinalint[]COMMANDS_SET={SQLTokenizer.TRANSACTION};","privatestaticfinalint[]COMMANDS_CREATE_UNIQUE={SQLTokenizer.INDEX,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]MISSING_TABLE={SQLTokenizer.TABLE};","privatestaticfinalint[]ESCAPE_MISSING_CLOSE={SQLTokenizer.ESCAPE_R};","privatestaticfinalint[]MISSING_EXPRESSION={SQLTokenizer.VALUE};","privatestaticfinalint[]MISSING_IDENTIFIER={SQLTokenizer.IDENTIFIER};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalpublicvoidclose(){","con.log.println(\"Statement.close\");","isClosed=true;","cmd=null;","finalpublicintgetMaxFieldSize(){","returnmaxFieldSize;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(src==null)src=tableColumn.getDefaultValue(con);","store.writeExpression(src,tableColumn);","store.writeFinsh(con);","insertStorePages.add(store.getLink());","privateStorestore=Store.NOROW;","privatelongafterLastValidFilePos;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(hour\>=24){","throwSmallSQLException.create(Language.HOURS_TOOLARGE,datetime);","if(minute\>=60){","throwSmallSQLException.create(Language.MINUTES_TOOLARGE,datetime);","if(second\>=60){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","page=add(page,rowOffset,longToBinarySortOrder(expr.getLong()),isLastValues,4);","break;","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnexpression(null,0);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode){","Stringmessage=getErrorString(token,addMessageCode,null);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);","privateSQLExceptioncreateSyntaxError(SQLTokentoken,StringaddMessageCode,","Objectparam0){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(token!=null&&token.value==SQLTokenizer.RAW){","dataType=SQLTokenizer.LONGVARBINARY;","}else{","dataType=SQLTokenizer.LONGVARCHAR;","previousToken();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnnewMutableNumeric(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateStringnextIdentiferPart(Stringname)throwsSQLException{","SQLTokentoken=nextToken();","if(token!=null&&token.value==SQLTokenizer.POINT){","returnnextIdentifier();","}else{","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["page[offset++]=\'\';","page[offset++]=0;","StringreadString(){","intlength=readShort()&0xFFFF;","returnnewString(readChars(length));","voidwriteBytes(byte[]daten){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleanisNull()throwsException{","returnparam1.isNull()||param1.getInt()\<0;","finalStringgetString()throwsException{","if(isNull())returnnull;","intsize=param1.getInt();","if(size\<0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["returnfalse;","publicbooleandataDefinitionIgnoredInTransactions(){","returnfalse;","publicResultSetgetProcedures(Stringcatalog,StringschemaPattern,StringprocedureNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"\",\"\",\"\",\"REMARKS\",\"PROCEDURE_TYPE\"};","Object[][]data=newObject[0][];"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["importjava.util.HashMap;","importjava.util.Locale;","finalclassTableViewMap{","privatefinalHashMapmap=newHashMap();","privateObjectgetUniqueKey(Stringname){","returnname.toUpperCase(Locale.US);//usethesamelocaleforall"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["this.filePos=filePos;","privateStorePagecreateStorePage(){","page[0]=(byte)(value\>\>56);","page[1]=(byte)(value\>\>48);","page[2]=(byte)(value\>\>40);","page[3]=(byte)(value\>\>32);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["Columncol=cols.get(c);","Object[]row=newObject[18];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME","row[3]=col.getName();//COLUMN_NAME","row[4]=Utils.getShort(SQLTokenizer.getSQLDataType(col.getDataType()));//DATA_TYPE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnreadLong();","caseSQLTokenizer.REAL:","returnreadFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(float)readDouble();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.createFromException(e);","publicResultSetgetVersionColumns(Stringcatalog,Stringschema,Stringtable)throwsSQLException{","try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=newObject[0][0];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["((page[offset++]&0xFF)\<\<16)|","((page[offset++]&0xFF)\<\<8)|","((page[offset++]&0xFF));","voidwriteLong(longvalue){","intnewSize=offset+8;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["nextToken(MISSING_COMMA);","expr=expression(cmd,0);","nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampDiff(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);","returnexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr.optimize();","privatefinalintcompileAdd_All_Table_Columns(DataSourcefromEntry,TableViewtable,intposition){","for(intk=0;k\<table.columns.size();k++){","ExpressionNameexpr=newExpressionName(table.columns.get(k).getName());","expr.setFrom(fromEntry,k,table);","columnExpressions.add(position++,expr);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["loop1:","for(intend=list.length-length;offset\<=end;offset++){","for(inti=0;i\<length;i++){","if(list[offset+i]!=value[i]){","continueloop1;","returnoffset;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatedoublegetDoubleImpl()throwsjava.lang.Exception{","if(operation==NEGATIVE)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"TEXT\",LONGVARCHAR);","addKeyWord(\"LONGVARCHAR\",LONGVARCHAR);","addKeyWord(\"NTEXT\",LONGNVARCHAR);","addKeyWord(\"LONGNVARCHAR\",LONGNVARCHAR);","addKeyWord(\"LONG\",LONG);//aliasforOracleLONGandLONGRAW","addKeyWord(\"CLOB\",CLOB);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnDateTime.getDate(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["doublegetDouble(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getNumeric();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionACosextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.ACOS;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.acos(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionACos.java|"],
"["publicResultSetgetColumnPrivileges(Stringcatalog,Stringschema,Stringtable,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"COLUMN_NAME\",\"GRANTOR\",\"GRANTEE\",\"PRIVILEGE\",\"IS_GRANTABLE\"};","thrownewjava.lang.UnsupportedOperationException(\"MethodgetTablePrivileges()notyetimplemented.\");","publicResultSetgetBestRowIdentifier(Stringcatalog,Stringschema,Stringtable,intscope,booleannullable)throwsSQLException{","try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeFinish(con);","updateCount++;","if(needGeneratedKeys){","Object[][]data=newObject[1][keys.size()];","keys.toArray(data[0]);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["isOuterValid=false;","right.nullRow();","returntrue;","}elsefullRightRowCounter++;","}elsefullRightRowCounter++;","isBeforeFirst=false;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["finalvoidsetPageData(byte[]data,intsize){","page=data;","pageSize=size;","@Override","longcommit()throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["if(fullRowCount==0){","returnfalse;","if(fullReturnCounter\<0){","fullReturnCounter=0;","right.first();","left.nullRow();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["row[12]=pk.getName();//PK_NAME","row[13]=Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable);//DEFERRABILITY","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["addKeyWord(\"SQL_TSI_YEAR\",SQL_TSI_YEAR);","staticfinalintIFNULL=1301;//firstsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","staticfinalintUSER=1302;","staticfinalintCONVERT=1303;","staticfinalintCAST=1304;","staticfinalintIIF=1305;//lastsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicstaticfinalStringTABLE_OR_VIEW_MISSING=\"SS-0196\";","publicstaticfinalStringTABLE_FILE_INVALID=\"SS-0197\";","publicstaticfinalStringTABLE_OR_VIEW_FILE_INVALID=\"SS-0198\";","publicstaticfinalStringTABLE_EXISTENT=\"SS-0199\";","publicstaticfinalStringFK_NOT_TABLE=\"SS-0220\";","publicstaticfinalStringPK_ONLYONE=\"SS-0221\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwSmallSQLException.create(Language.TABLE_DEADLOCK,name);","locks.wait(waitTime);","finalprivateTableStorePagerequestLockImpl(SSConnectioncon,intpageOperation,longpage)throwsSQLException{","synchronized(locks){","if(tabLockConnection!=null&&tabLockConnection!=con)returnnull;","switch(con.isolationLevel){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finallonggetRowPosition(){","intbitCount=getBitCount();","returndataSourceIdx|currentDS.getRowPosition()\<\<bitCount;","finalvoidsetRowPosition(longrowPosition)throwsException{","intbitCount=getBitCount();","intmask=0xFFFFFFFF\>\>\>(32-bitCount);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["sIdx++;","range=false;","}else{","if(Character.toUpperCase(value.charAt(sIdx))!=m)returnfalse;","sIdx++;","break;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticfinalintGREATER=53;//\>","staticfinalintGRE_EQU=54;//\>=","staticfinalintLESSER=55;//\<","staticfinalintLES_EQU=56;//\<=","staticfinalintUNEQUALS=57;//\<\>","staticfinalintIN=61;//IN"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["nextToken(MISSING_COMMA);","expr=expression(cmd,0);","token=nextToken(MISSING_COMMA_PARENTHESIS);","if(token.value==SQLTokenizer.COMMA){","style=expression(cmd,0);","}else"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivateExpressionsexpressions;","privateIndexindex;","privateFileChannelraFile;","IndexDescription(Stringname,StringtableName,intconstraintType,Expressionsexpressions,Stringscolumns){","this.constraintType=constraintType;","this.expressions=expressions;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.BIGINT:","returnString.valueOf(readLong());","caseSQLTokenizer.REAL:","returnString.valueOf(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnpuffer;","finalstaticprivatechar[]numericToBinarySortOrder(MutableNumericnumeric){","int[]value=numeric.getInternalValue();","intcount=1;","inti;","for(i=0;i\<value.length;i++){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["classMemoryResultextendsDataSource{","ExpressionValue[]currentRow;","privatefinalColumnscolumns=newColumns();","privateintrowIdx=-1;","privateListrowList=newArrayList();//ListofExpressionGroup[]","MemoryResult(){/*shouldbeempty*/}"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnreadBinary();","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["classForeignKey{","finalStringpkTable;","finalStringfkTable;","finalIndexDescriptionpk;","finalIndexDescriptionfk;","finalintupdateRule=DatabaseMetaData.importedKeyNoAction;"]": ["|project://smallsql/src/smallsql/database/ForeignKey.java|"],
"["ObjectgetObject()throwsException{","if(isNull())returnnull;","returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP);","StringgetString()throwsException{","if(isNull())returnnull;","returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP).toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["returnfrom.next();","finalbooleanlast()throwsException{","if(maxRows\>=0){","if(maxRows==0){","from.beforeFirst();","returnfalse;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["addKeyWord(\"SQL_TSI_SECOND\",SQL_TSI_SECOND);","addKeyWord(\"MI\",SQL_TSI_MINUTE);","addKeyWord(\"N\",SQL_TSI_MINUTE);","addKeyWord(\"SQL_TSI_MINUTE\",SQL_TSI_MINUTE);","addKeyWord(\"HH\",SQL_TSI_HOUR);","addKeyWord(\"SQL_TSI_HOUR\",SQL_TSI_HOUR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.DOUBLE:","doubledValue=((Double)para1).doubleValue();","return(dValue\<0)?newDouble(-dValue):para1;","caseSQLTokenizer.REAL:","doublefValue=((Float)para1).floatValue();","return(fValue\<0)?newFloat(-fValue):para1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["if(maxRows==0){","from.beforeFirst();","returnfalse;","returnfrom.absolute(maxRows);","returnfrom.last();","finalvoidafterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(tableViewinstanceofTable)","returnnewTableResult((Table)tableView);","returnnewViewResult((View)tableView);","staticTableViewResultgetTableViewResult(RowSourcefrom)throwsSQLException{","if(frominstanceofWhere){","from=((Where)from).getFrom();"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["};","privatefinalString[][]SQL_STATES={","{CUSTOM_MESSAGE,\"01000\"},","{UNSUPPORTED_OPERATION,\"01000\"},","{CANT_LOCK_FILE,\"01000\"},","{DB_EXISTENT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalprivateViewview;","finalprivateExpressionscolumnExpressions;","finalprivateCommandSelectcommandSelect;","ViewResult(Viewview){","this.view=view;","this.columnExpressions=view.commandSelect.columnExpressions;"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["throwSmallSQLException.create(Language.FILE_TOOOLD,newObject[]{newInteger(version),fileName});","if(magic==MAGIC_TABLE)","returnnewTable(database,con,name,raFile,raFile.position(),version);","returnnewView(con,name,raFile,raFile.position());","}catch(Throwablee){","if(raFile!=null)"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["previous();","return!isNext;","finalbooleanisAfterLast(){","introwCount=getRowCount();","returnrow\>rowCount||rowCount==0;","voidafterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returnnewMutableNumeric(((Number)obj).longValue());","caseSQLTokenizer.REAL:","floatfValue=((Number)obj).floatValue();","if(Float.isInfinite(fValue)||Float.isNaN(fValue))","returnnull;","returnnewMutableNumeric(fValue);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returntrue;","returnfalse;","publicbooleansupportsDataDefinitionAndDataManipulationTransactions(){","returntrue;","publicbooleansupportsDataManipulationTransactionsOnly(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["rows.add(row);","}catch(Exceptione){","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getReferenceKeys(SSConnectioncon,StringpkTable,StringfkTable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["token=nextToken(MISSING_EXPRESSION);","table.setAlias(token.getName(sql));","}else{","previousToken();","returntable;","privateJoinjoin(Commandcmd,DataSourcestables,RowSourceleft,inttype)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["row[4]=Utils.getShort(c+1);//KEY_SEQ","row[5]=index.getName();//PK_NAME","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(idx2\>0){","StringpropsString=url.substring(idx2+1).replace(\'&\',\';\');","StringTokenizertok=newStringTokenizer(propsString,\";\");","while(tok.hasMoreTokens()){","StringkeyValue=tok.nextToken().trim();","if(keyValue.length()\>0){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());","}else{","previousToken();","returnexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleanisLogging(){","returnDriverManager.getLogWriter()!=null;","voidprintln(Stringmsg){","PrintWriterlog=DriverManager.getLogWriter();","if(log!=null){","synchronized(log){"]": ["|project://smallsql/src/smallsql/database/Logger.java|"],
"["returnrandomFile;","privatevoidload(Databasedatabase)throwsSQLException{","try{","Filefile=getFile(database,name);","if(!file.exists())","throwSmallSQLException.create(Language.INDEX_MISSING,name);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["case\'J\':","case\'K\':","case\'Q\':","case\'S\':","case\'X\':","case\'Z\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["returndaten;","voidwriteLongString(Stringdaten)throwsException{","char[]chars=daten.toCharArray();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,chars.length*2L+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(chars.length);","store.writeChars(chars);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.DECIMAL:","returnTypes.DECIMAL;","caseSQLTokenizer.NUMERIC:","returnTypes.NUMERIC;","caseSQLTokenizer.REAL:","returnTypes.REAL;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.TIMESTAMP:","bytes=newbyte[8];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{COL_WRONG_PREFIX,\"DerSpaltenprefix\'\'{0}\'\'passtzukeinemTabellennamenoderAliasnamenindieserAbfrage.\"},","{COL_READONLY,\"DieSpalte{0}istschreibgeschÃ¼tzt.\"},","{COL_INVALID_NAME,\"UngÃ¼ltigerSpaltenname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"SpaltenindexauÃŸerhalbdesGÃ¼ltigkeitsbereiches:{0}.\"},","{COL_AMBIGUOUS,\"DieSpalte\'\'{0}\'\'istmehrdeutig.\"},","{GROUP_AGGR_INVALID,\"AggregatfunktionsindnichterlaubtimGROUPBYKlausel:({0}).\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["returnexpr.getInt();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publiclonggetLong(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnDateTime.getTime(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["privateSSConnectiontabLockConnection;//ifsetthenitistheConnectionwithaLOCK_TAB","privateinttabLockCount;","Table(Databasedatabase,SSConnectioncon,Stringname,FileChannelraFile,longoffset,inttableFormatVersion)throwsException{","super(name,newColumns());","this.database=database;","this.raFile=raFile;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["case6://ddmonyy","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["MutableNumericgetNumeric()throwsException{","if(param1.isNull())returnnull;","MutableNumericnum=param1.getNumeric();","if(num.getSignum()\<0)num.setSignum(1);","returnnum;","ObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["StringBuffermsgBuf=newStringBuffer(msgStr);","for(inti=0;i\<validValues.length;i++){","Stringname=SQLTokenizer.getKeyWord(validValues[i]);","if(name==null)name=String.valueOf((char)validValues[i]);","msgBuf.append(name);","if(i\<validValues.length-2)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam1.isNull()||param2.isNull();","finalintgetInt()throwsException{","if(isNull())return0;","Stringstr1=ExpressionFunctionSoundex.getString(param1.getString());","Stringstr2=ExpressionFunctionSoundex.getString(param2.getString());","intdiff=0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDifference.java|"],
"["for(inti=0;i\<references.size();i++){","ForeignKeyforeignKey=references.get(i);","IndexDescriptionpk=foreignKey.pk;","IndexDescriptionfk=foreignKey.fk;","if((pkTable==null||pkTable.equals(foreignKey.pkTable))&&","(fkTable==null||fkTable.equals(foreignKey.fkTable))){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnnum;","caseMOD:","if(getDataType(getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","returnnewMutableNumeric(getInt());","MutableNumericnum=left.getNumeric();","num.mod(right.getNumeric());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalbooleanisNull()throwsException{","returnparam1.isNull()||param1.getString().length()==0;","finalintgetInt()throwsException{","Stringstr=param1.getString();","if(str==null||str.length()==0)return0;","returnstr.charAt(0);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\<0)","value=newValue;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnull;","return(SQLToken)tokens.get(tokenIdx-1);","privatevoidpreviousToken(){","tokenIdx--;","privateSQLTokennextToken(){","if(tokenIdx\>=tokens.size()){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(true){","if(token==null){","cmdCreate.addColumn(col);","returnnull;","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticvoidprintRS(ResultSetrs)throwsSQLException{","ResultSetMetaDatamd=rs.getMetaData();","intcount=md.getColumnCount();","for(inti=1;i\<=count;i++){","System.out.print(md.getColumnLabel(i));","System.out.print(\'\\t\');"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["returncompareTo((MutableNumeric)obj)==0;","publicBigDecimaltoBigDecimal(){","if(signum==0)returnnewBigDecimal(BigInteger.ZERO,scale);","returnnewBigDecimal(newBigInteger(toByteArray()),scale);","publicBigDecimaltoBigDecimal(intnewScale){","if(newScale==this.scale)returntoBigDecimal();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnnewFloat(param1.getFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(param1.getDouble());","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["intpreviousOffset=listEnum.offsetStack[listEnum.stack]-2*(2+(listEnum.stack\>=3?0:pointerSize));","if(listEnum.stack==0){","offset=previousOffset;","return;","offset=listEnum.offsetStack[listEnum.stack-1]-pointerSize;","intpointer=getPointer();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["staticfinalintCOMMA=\',\';//44","staticfinalintMINUS=\'-\';//45","staticfinalintPOINT=\'.\';//46","staticfinalintSLACH=\'/\';//47","staticfinalintLESSER=\'\<\';//60","staticfinalintEQUALS=\'=\';//61"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(--tabLockCount==0)tabLockConnection=null;","break;","default:","thrownewError();","}finally{","locks.notifyAll();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintAS=219;","staticfinalintDEFAULT=220;","staticfinalintIDENTITY=221;","staticfinalintINNER=222;","staticfinalintJOIN=223;","staticfinalintON=224;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnSmallSQLException.create(Language.ROW_NOCURRENT);","booleanisNull(intoffset)throwsSQLException{","thrownoCurrentRow();","booleangetBoolean(intoffset,intdataType)throwsException{","thrownoCurrentRow();","byte[]getBytes(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["staticfinalintVARBINARY=311;","staticfinalintRAW=312;","staticfinalintLONGVARBINARY=313;","staticfinalintBLOB=316;","staticfinalintTINYINT=321;","staticfinalintSMALLINT=322;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnnull;","returnnode.addRoot(digit);","node=node.addNode(digit);","if(node.isEmpty()){","if(isLastValue){","node.addRemainderKey(rowOffset,key,i);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["case0:","value=null;","break;","case1:","value=newLong(input.readLong());","break;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["SSResultSetgetResultSet(){","returnrs;","intgetUpdateCount(){","returnupdateCount;","booleangetMoreResults(){","rs=null;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["returngetTime(findColumn(columnName));","publicTimestampgetTimestamp(StringcolumnName)throwsSQLException{","returngetTimestamp(findColumn(columnName));","publicInputStreamgetAsciiStream(StringcolumnName)throwsSQLException{","returngetAsciiStream(findColumn(columnName));","publicInputStreamgetUnicodeStream(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["this.remainderKey=newchar[charCount];","for(inti=charCount-1,d=0;i\>=0;i--){","this.remainderKey[d++]=(char)(remainderValue\>\>(i\<\<4));","finalIndexNodeaddRoot()throwsSQLException{","IndexNoderoot=(IndexNode)value;","if(root==null){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["publicbyte[]getBytes(intcolumnIndex)throwsSQLException{","try{","byte[]obj=getValue(columnIndex).getBytes();","wasNull=obj==null;","returnobj;","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returngetObject()==null;","booleangetBoolean()throwsException{","returngetBoolean(getObject(),dataType);","staticbooleangetBoolean(Objectobj,intdataType)throwsException{","if(obj==null)returnfalse;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["nextToken(MISSING_AND);","ExpressionrightExpr2=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,rightExpr2,operation);","break;","caseSQLTokenizer.IN:","nextToken(MISSING_PARENTHESIS_L);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["switch(type){","caseSQLTokenizer.SMALLDATETIME:","type=SQLTokenizer.TIMESTAMP;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","((DateTime)value).time=Math.min(((DateTime)value).time,expr.getLong());","break;","default:thrownewError(\"\"+dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(factor\<0){","factor=-factor;","signum=-signum;","longcarryover=0;","for(inti=value.length-1;i\>=0;i--){","longv=(value[i]&0xFFFFFFFFL)*factor+carryover;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalstaticprivatelongdoubleToBinarySortOrder(doublevalue){","longintValue=Double.doubleToLongBits(value);","return(intValue\<0)?","~intValue:","intValue^0x8000000000000000L;","finalstaticprivateintshortToBinarySortOrder(intvalue){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["booleanisBeforeFirst()throwsSQLException{","returnfrom.isBeforeFirst();","booleanisFirst()throwsSQLException{","returnfrom.isFirst();","booleanfirst()throwsException{","returnfrom.first();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["staticStringbytes2unique(byte[]daten,intoffset){","if(daten.length-offset\<16){","byte[]temp=newbyte[16];","System.arraycopy(daten,offset,temp,0,daten.length-offset);","daten=temp;","char[]chars=newchar[36];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","abstractvoidexecuteImpl(SSConnectioncon,SSStatementst)throwsException;","SSResultSetgetQueryResult()throwsSQLException{","if(rs==null)"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["return(objinstanceofMoney&&((Money)obj).value==value);","publicinthashCode(){","return(int)(value^(value\>\>\>32));","publiclongunscaledValue(){","returnvalue;","publicstaticlongparseMoney(Stringstr){"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","if(token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){","parthesisCount++;","cmd.noColumns=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["while(true){","switch(token.value){","caseSQLTokenizer.WHEN:","Expressioncondition=expression(cmd,0);","if(input!=null){","condition=newExpressionArithmetic(input,condition,ExpressionArithmetic.EQUALS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"CHARINDEX\",LOCATE);//aliasforMSSQLServer","addKeyWord(\"LOCATE\",LOCATE);","addKeyWord(\"LTRIM\",LTRIM);","addKeyWord(\"OCTET_LENGTH\",OCTETLEN);","addKeyWord(\"REPEAT\",REPEAT);","addKeyWord(\"REPLACE\",REPLACE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["booleangetBoolean()throwsException{","returngetInt()!=0;","intgetInt()throwsException{","if(isNull())return0;","switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["this.remainderKey=newchar[length];","value=rowOffset;","System.arraycopy(remainderValue,1,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(char[]remainderValue,intoffset){","intlength=remainderValue.length-offset;","this.remainderKey=newchar[length];"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["staticfinalintSQL_BIT=1352;","staticfinalintSQL_CHAR=1353;","staticfinalintSQL_DATE=1354;","staticfinalintSQL_DECIMAL=1355;","staticfinalintSQL_DOUBLE=1356;","staticfinalintSQL_FLOAT=1357;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);","char[]readChars(intlength){","char[]chars=newchar[length];","for(inti=0;i\<length;i++){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\',\');","buf.append(\'\');","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintSQL_DATE=1354;","staticfinalintSQL_DECIMAL=1355;","staticfinalintSQL_DOUBLE=1356;","staticfinalintSQL_FLOAT=1357;","staticfinalintSQL_INTEGER=1358;","staticfinalintSQL_LONGVARBINARY=1359;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["for(intc=0;c\<columns.size();c++){","StringcolumnName=columns.get(c);","Columncolumn=tab.findColumn(columnName);","Object[]row=newObject[8];","row[0]=Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE","row[1]=columnName;//COLUMN_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Columncolumn=exprName.getColumn();","if(column==null){","column=newColumn();","exprName.setFrom(this,idx,column);","switch(exprName.getType()){","caseExpression.MAX:"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["if(newsize==data.length)throwSmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);","byte[]temp=newbyte[newsize];","System.arraycopy(data,0,temp,0,data.length);","data=temp;","finalintgetSize(){","returnsize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalvoidafterLast()throwsException{","from.afterLast();","booleanisLast()throwsException{","returnfrom.isLast();","booleanisAfterLast()throwsException{","returnfrom.isAfterLast();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicResultSetgetTableTypes()throwsSQLException{","String[]colNames={\"TABLE_TYPE\"};","Object[][]data={{\"SYSTEMTABLE\"},{\"TABLE\"},{\"VIEW\"}};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetColumns(Stringcatalog,StringschemaPattern,StringtableNamePattern,StringcolumnNamePattern)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["setNeedGeneratedKeys(autoGeneratedKeys);","returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);","returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,String[]columnNames)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["commitPages.clear();","transactionTime=System.currentTimeMillis();","}catch(Throwablee){","rollback();","throwSmallSQLException.createFromException(e);","voidrollbackFile(FileChannelraFile)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["synchronized(locks){","if(raFile==null){","throwSmallSQLException.create(Language.TABLE_MODIFIED,name);","longendTime=0;","while(true){","TableStorePagestorePage=requestLockImpl(con,pageOperation,page);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.SMALLINT:","page=find(page,shortToBinarySortOrder(expr.getInt()),1,nodeList);","break;","caseSQLTokenizer.INT:","page=find(page,intToBinarySortOrder(expr.getInt()),2,nodeList);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseJoin.FULL_JOIN:","isOuterValid=false;","right.nullRow();","returntrue;","}elsefullRightRowCounter++;","}elsefullRightRowCounter++;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["floatfValue=((Number)obj).floatValue();","if(Float.isInfinite(fValue)||Float.isNaN(fValue))","returnnull;","returnnewMutableNumeric(fValue);","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnparam2.getLong()+param1.getLong()*604800000;","}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong();","returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_QUARTER:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["intidx2=datetime.indexOf(\'-\');","if(idx2\>0){","year=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\'-\',idx1);","month=Integer.parseInt(datetime.substring(idx1,idx2).trim())-1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintADD=230;","staticfinalintLIMIT=231;","staticfinalintDATABASE=235;","staticfinalintTABLE=236;","staticfinalintVIEW=237;","staticfinalintINDEX=238;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["doublegetDouble()throwsException{","returngetDouble(getObject(),dataType);","staticdoublegetDouble(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.SLACH:returnDIV;","caseSQLTokenizer.PERCENT:returnMOD;","caseSQLTokenizer.EQUALS:returnEQUALS;","caseSQLTokenizer.GREATER:returnGREATER;","caseSQLTokenizer.GREATER_EQU:returnGRE_EQU;","caseSQLTokenizer.LESSER:returnLESSER;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Entry[]newTable=newEntry[newCapacity];","transfer(newTable);","table=newTable;","threshold=(int)(newCapacity*0.75f);","finalprivatevoidtransfer(Entry[]newTable){","Entry[]src=table;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseISNOTNULL:return!left.isNull();","caseIN:if(right==null)","returnisInList();","break;","finalbooleanleftIsNull=left.isNull();","intdataType;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicstaticfinalStringRSET_FWDONLY=\"SS-0132\";","publicstaticfinalStringRSET_CLOSED=\"SS-0133\";","publicstaticfinalStringRSET_NOT_INSERT_ROW=\"SS-0134\";","publicstaticfinalStringRSET_ON_INSERT_ROW=\"SS-0135\";","publicstaticfinalStringROWSOURCE_READONLY=\"SS-0136\";","publicstaticfinalStringSTMT_IS_CLOSED=\"SS-0140\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;","returnbytes;","caseSQLTokenizer.BOOLEAN:","caseSQLTokenizer.BIT:","returnparam1.getBoolean()?Boolean.TRUE:Boolean.FALSE;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["staticfinalintBIT_AND=\'&\';//38","staticfinalintPARENTHESIS_L=\'(\';//40","staticfinalintPARENTHESIS_R=\')\';//41","staticfinalintASTERISK=\'*\';//42","staticfinalintPLUS=\'+\';//43","staticfinalintCOMMA=\',\';//44"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"LCASE\",LCASE);","addKeyWord(\"LEFT\",LEFT);","addKeyWord(\"DATALENGTH\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LEN\",LENGTH);//aliasforMSSQLServer","addKeyWord(\"LENGTH\",LENGTH);","addKeyWord(\"CHARINDEX\",LOCATE);//aliasforMSSQLServer"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.DATE:","writeDate(expr.getLong());","break;","caseSQLTokenizer.SMALLDATETIME:","writeSmallDateTime(expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(isLast){","node.addRemainderKey(rowOffset,key,i);","returnnull;","returnnode.addRootValue(key,i);","}else","if(equals(node.getRemainderValue(),key,i)){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["SQLTokentoken;","while(null!=(token=nextToken())){","switch(token.value){","caseSQLTokenizer.WHERE:","where(cmd);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["packagesmallsql.database;","importsmallsql.database.language.Language;","finalclassSortedResultextendsRowSource{","finalprivateExpressionsorderBy;","finalprivateRowSourcerowSource;","privateIndexScrollStatusscrollStatus;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returnTypes.TIMESTAMP;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","returnTypes.CHAR;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateExpressionsorderBy;","privatebooleanisAggregateFunction;","privateintmaxRows=-1;","finalbooleanisGroupResult(){","returngroupBy!=null||having!=null||isAggregateFunction;","privatevoidcompileJoin(JoinsingleJoin)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["return(long)(Utils.bytes2double(readLongBinary())*10000L);","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"MONEY\"});"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.NONCLUSTERED:","break;","default:","previousToken();","}else{","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return(byte)getInt(i);","publicshortgetShort(inti)throwsSQLException{","return(byte)getInt(i);","publicintgetInt(inti)throwsSQLException{","try{","Expressionexpr=getValue(i);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.RIGHT_JOIN);","break;","caseSQLTokenizer.FULL:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnbitCount;","finallonggetRowPosition(){","intbitCount=getBitCount();","returndataSourceIdx|currentDS.getRowPosition()\<\<bitCount;","finalvoidsetRowPosition(longrowPosition)throwsException{","intbitCount=getBitCount();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(row\<0){","afterLast();","rowIdx=rowList.size()+row;","if(rowIdx\<0){","beforeFirst();","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["break;","caseSQLTokenizer.DATE:","intmillis=(int)(time%86400000);","if(millis\<0)","millis+=86400000;","time-=millis;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.BIGINT:","returnreadLong();","caseSQLTokenizer.REAL:","returnreadFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRTrim();","break;","caseSQLTokenizer.SPACE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSpace();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:","returngetTimestamp(time);","staticclassDetails{","intyear;","intmonth;","intdayofyear;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(db==null){","if(create&&!file.isDirectory()){","CommandCreateDatabasecommand=newCommandCreateDatabase(con.log,name);","command.execute(con,null);","db=newDatabase(name,file,con.isReadOnly());","databases.put(dbKey,db);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(listEnum.stack\>=3){","listEnum.offsetStack[listEnum.stack]=offset;","returnresult;","listEnum.offsetStack[listEnum.stack]=offset+pointerSize;","offset=getPointer();","shift-=16;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|","|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["this.table=table;","this.column=table.columns.get(colIdx);","voidsetFrom(DataSourcefromEntry,intcolIdx,Columncolumn){","this.fromEntry=fromEntry;","this.colIdx=colIdx;","this.column=column;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["intlength=Math.min(4,bytes.length);","for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;","staticbyte[]double2bytes(doublevalue){","returnlong2bytes(Double.doubleToLongBits(value));"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.SYSNAME:","col.setPrecision(255);","dataType=SQLTokenizer.VARCHAR;","break;","caseSQLTokenizer.COUNTER:","col.setAutoIncrement(true);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privateintstatus;//validvaluearefollow:","privatestaticfinalintNORMAL=0;","privatestaticfinalintDELETED=1;","privatestaticfinalintUPDATE_POINTER=2;","privatestaticfinalintUPDATED_PAGE=3;","finalprivateTabletable;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.io.RandomAccessFile;","importjava.nio.channels.FileChannel;","importjava.nio.channels.FileLock;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","classUtils{"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["Stringcatalog;","StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","CommandTablecmd=newCommandTable(con.log,catalog,tableName,SQLTokenizer.INDEX);","Expressionsexpressions=newExpressions();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassTableView{","staticfinalintMAGIC_TABLE=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'T\';","staticfinalintMAGIC_VIEW=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'V\';","staticfinalintTABLE_VIEW_VERSION=2;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["tableName,","unique?SQLTokenizer.UNIQUE:SQLTokenizer.INDEX,","expressions,","columns);","Object[]param={\"CreateIndex\"};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","intiValue=((Number)para1).intValue();","return(iValue\<0)?newInteger(-iValue):para1;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:","page=add(page,rowOffset,bytesToBinarySortOrder(expr.getBytes()),isLastValues);","break;","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["{TABLE_MODIFIED,\"DieTabelle\'\'{0}\'\'wurdemodifiziert.\"},","{TABLE_DEADLOCK,\"Deadlock,eskannkeinLockerzeugtwerdenfÃ¼rTabelle\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TabelleoderView\'\'{0}\'\'existiertnicht.\"},","{TABLE_FILE_INVALID,\"DieDatei\'\'{0}\'\'enthÃ¤ltkeinegÃ¼ltigeSmallSQLTabelle.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeinegÃ¼ltigerTabellenoderViewSpeicher.\"},","{TABLE_EXISTENT,\"DieTabelleoderView\'\'{0}\'\'existiertbereits.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Object[]params){","Stringmessage=translateMsg(messageCode,params);","StringsqlState=language.getSqlState(messageCode);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["addKeyWord(\"FROM\",FROM);","addKeyWord(\"WHERE\",WHERE);","addKeyWord(\"GROUP\",GROUP);","addKeyWord(\"BY\",BY);","addKeyWord(\"HAVING\",HAVING);","addKeyWord(\"ORDER\",ORDER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.constraintType=constraintType;","this.expressions=expressions;","this.columns=columns;","this.name=createName(name,tableName);","privatestaticStringcreateName(StringdefaultName,StringtableName){","if(defaultName==null){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["addKeyWord(\"SERIAL\",COUNTER);//aliasforMySQLandPostgreSQL","addKeyWord(\"COUNTER\",COUNTER);","addKeyWord(\"BIGINT\",BIGINT);","addKeyWord(\"SMALLMONEY\",SMALLMONEY);","addKeyWord(\"MONEY\",MONEY);","addKeyWord(\"NUMBER\",DECIMAL);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["longgetLong()throwsException{","returnfromEntry.getLong(colIdx);","floatgetFloat()throwsException{","returnfromEntry.getFloat(colIdx);","doublegetDouble()throwsException{","returnfromEntry.getDouble(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["staticfinalintFIRST=1404;","staticfinalintLAST=1405;","staticfinalintAVG=1406;","static{","addKeyWord(\"COUNT\",COUNT);","addKeyWord(\"MIN\",MIN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnSSDriver.URL_PREFIX;","returnSSDriver.URL_PREFIX+\':\'+database.getName();","publicStringgetUserName(){","return\"\";","publicbooleanisReadOnly(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnString.valueOf(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnString.valueOf(readDouble());","caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong()).toString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["switch(operation){","caseADD:returnleft.getInt()+right.getInt();","caseSUB:returnleft.getInt()-right.getInt();","caseMUL:returnleft.getInt()*right.getInt();","caseDIV:returnleft.getInt()/right.getInt();","caseNEGATIVE:return-left.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(isLastValue){","node.addRemainderKey(rowOffset,key,i);","returnnull;","returnnode.addRootValue(key,i);","}else","if(equals(node.getRemainderValue(),key,i)){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["finalbooleanisAfterLast(){","returnrowIdx\>=rowList.size()||rowList.size()==0;","finalvoidafterLast(){","rowIdx=rowList.size();","currentRow=null;","finalbooleanabsolute(introw)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.REAL:","return(int)getFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(complement[i]!=0){","signum=1;","break;","for(intv=value.length-1;v\>=0;v--){","inttemp=0;","for(inti=0;i\<4&&0\<length;i++){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnfalse;","SQLExceptioncreateUnspportedDataType(){","Object[]params={","SQLTokenizer.getKeyWord(getDataType(left,right)),","getKeywordFromOperation(operation)","};"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisFirst()throwsSQLException{","returncommandSelect.isFirst();","booleanfirst()throwsException{","returncommandSelect.first();","booleanprevious()throwsException{","returncommandSelect.previous();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnnewMutableNumeric(getBoolean()?1:0);","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{HOURS_TOOLARGE,\"01000\"},","{MINUTES_TOOLARGE,\"01000\"},","{SECS_TOOLARGE,\"01000\"},","{MILLIS_TOOLARGE,\"01000\"},","{DATETIME_INVALID,\"01000\"},","{UNSUPPORTED_CONVERSION_OPER,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["addKeyWord(\"SQL_INTEGER\",SQL_INTEGER);","addKeyWord(\"SQL_LONGVARBINARY\",SQL_LONGVARBINARY);","addKeyWord(\"SQL_LONGVARCHAR\",SQL_LONGVARCHAR);","addKeyWord(\"SQL_REAL\",SQL_REAL);","addKeyWord(\"SQL_SMALLINT\",SQL_SMALLINT);","addKeyWord(\"SQL_TIME\",SQL_TIME);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["for(ints=0;s\<strings.size();s++){","if(colName.equalsIgnoreCase(strings.get(s)))","continuenextColumn;","returnInteger.MAX_VALUE;//NoStrinfoundforcolName","returnstrings.size()-columns.size();","finalvoidinit(Databasedatabase,TableViewtableView)/*throwsException*/{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["publicbooleanisReadOnly(intcolumn)throwsSQLException{","return!getColumnExpression(column).isDefinitelyWritable();","publicbooleanisWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();","publicbooleanisDefinitelyWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["privateIndexindex;","privateFileChannelraFile;","IndexDescription(Stringname,StringtableName,intconstraintType,Expressionsexpressions,Stringscolumns){","this.constraintType=constraintType;","this.expressions=expressions;","this.columns=columns;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["try{","returnInteger.parseInt(str);","}catch(Throwableth){/*ANumberFormatExceptioncanoccurifitafloatingpointnumber*/}","return(int)Double.parseDouble(str);","longgetLong()throwsException{","returngetLong(getObject(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnDatatypeRange[dataTypeIdx];","staticfinalintOR=11;//OR","staticfinalintAND=21;//AND","staticfinalintNOT=31;//NOT","staticfinalintBIT_OR=41;//|","staticfinalintBIT_AND=42;//&"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["JoinScrollIndex(intjoinType,RowSourceleft,RowSourceright,ExpressionsleftEx,ExpressionsrightEx,intcompare)","throwsException{","super(joinType,left,right,null);","this.leftEx=leftEx;","this.rightEx=rightEx;","this.compare=compare;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["else","num.div(right.getNumeric());","returnnum;","caseNEGATIVE:","MutableNumericnum=left.getNumeric();","num.setSignum(-num.getSignum());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["thrownewjava.lang.UnsupportedOperationException(\"MethodgetTablePrivileges()notyetimplemented.\");","publicResultSetgetBestRowIdentifier(Stringcatalog,Stringschema,Stringtable,intscope,booleannullable)throwsSQLException{","try{","String[]colNames={\"SCOPE\",\"COLUMN_NAME\",\"DATA_TYPE\",\"TYPE_NAME\",\"COLUMN_SIZE\",\"BUFFER_LENGTH\",\"DECIMAL_DIGITS\",\"PSEUDO_COLUMN\"};","Object[][]data=con.getDatabase(false).getBestRowIdentifier(con,table);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalbooleanrowDeleted(){","returnfalse;","voidnullRow(){","thrownewError();","voidnoRow(){","currentRow=null;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(token==null){","throwcreateSyntaxError(token,Language.STXADD_JOIN_INVALID);","switch(token.value){","caseSQLTokenizer.ON:","if(type==Join.RIGHT_JOIN)","returnnewJoin(Join.LEFT_JOIN,right,left,expression(cmd,0));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){","parthesisCount++;","cmd.noColumns=true;","}else{","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["try{","if(tables.size()\>1)","throwSmallSQLException.create(Language.JOIN_DELETE);","if(tables.size()==0)","throwSmallSQLException.create(Language.DELETE_WO_FROM);","TableViewResult.getTableViewResult(tables.get(0)).deleteRow();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["break;","caseSQLTokenizer.INNER:","nextToken(MISSING_JOIN);","caseSQLTokenizer.JOIN:","fromSource=join(cmd,tables,fromSource,Join.INNER_JOIN);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","page=add(page,rowOffset,expr.getBoolean()?2:1,isLastValues,1);","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(st.con.log.isLogging()){","st.con.log.println(\"parameter\'\"+metaData.getColumnName(columnIndex)+\"\'=\"+x+\";type=\"+dataType+\";length=\"+length);","finalprivateCommandSelectgetCmd()throwsSQLException{","if(cmd==null){","throwSmallSQLException.create(Language.RSET_CLOSED);","st.con.testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privatefinalstaticlongaddDateTimeOffset(longdatetime){","returnaddDateTimeOffset(datetime,TimeZone.getDefault());","finalstaticlongaddDateTimeOffset(longdatetime,TimeZonetimezone){","intt=(int)(datetime%86400000);","intd=(int)(datetime/86400000);","if(t\<0){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["LongTreeList(){","data=newbyte[25];","LongTreeList(longvalue)throwsSQLException{","this();","add(value);","LongTreeList(StoreImplinput){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetCharacterStream()notyetimplemented.\");","publicvoidsetRef(inti,Refx)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetBlob()notyetimplemented.\");","publicvoidsetClob(inti,Clobx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["temp|=(complement[--length]&0xFF)\<\<(i*8);","value[v]=temp;","MutableNumeric(intcomplement){","if(complement==0){","signum=0;","value=EMPTY_INTS;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.REAL:","returnreadFloat();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(float)readDouble();","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["keys=newArrayList();","if(st.getGeneratedKeyNames()!=null)","generatedKeysType=1;","if(st.getGeneratedKeyIndexes()!=null)","generatedKeysType=2;","StoreImplstore=table.getStoreInsert(con);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["previousToken();","input=expression(cmd,0);","token=nextToken(MISSING_WHEN_ELSE_END);","while(true){","switch(token.value){","caseSQLTokenizer.WHEN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);","longreadLong(){","return(((long)(puffer[offset++]&0xFF))\<\<56)","|(((long)(puffer[offset++]&0xFF))\<\<48)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returnmaxFieldSize;","finalpublicvoidsetMaxFieldSize(intmax){","maxFieldSize=max;","finalpublicintgetMaxRows(){","returnmaxRows;","finalpublicvoidsetMaxRows(intmax)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","return(byte[])obj;","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NVARCHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(database.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filefile=getFile(database);","booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.TABLE_EXISTENT,name);","FileChannelraFile=Utils.openRaFile(file,database.isReadOnly());"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["returnUtils.doubleToMoney(Double.parseDouble(str));","privatebyte[]toByteArray(){","byte[]bytes=newbyte[8];","intoffset=0;","bytes[offset++]=(byte)(value\>\>56);","bytes[offset++]=(byte)(value\>\>48);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["caseNEGATIVE:","returnleft.getScale();","caseMOD:","return0;","returngetScale(dataType);","booleanisNull()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.DATE:","returnreadDate();","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalColumngetColumn(intcolIdx){","returncolumns.get(colIdx);","finalvoidaddColumn(Columncolumn){","columns.add(column);","finalbooleanisScrollable(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["voidinsertRow(Expression[]updateValues)throwsException{","commandSelect.insertRow(con,updateValues);","booleanisNull(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).isNull();","booleangetBoolean(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getBoolean();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["}else{","returnnewBigDecimal(newBigInteger(toByteArray()),scale).doubleValue();","publicStringtoString(){","StringBufferbuf=newStringBuffer();","if(value.length==0||signum==0){","buf.append(\'0\');"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["this.offset=valueOffset;","if(readBoolean())returnnull;","switch(dataType){","caseSQLTokenizer.BIT:","returnreadBoolean()?\"1\":\"0\";","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleangetBoolean()throwsException{","returnfromEntry.getBoolean(colIdx);","intgetInt()throwsException{","returnfromEntry.getInt(colIdx);","longgetLong()throwsException{","returnfromEntry.getLong(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["while(true){","StringlangClassName=Language.class.getName()+\'_\'+part;","try{","return(Language)Class.forName(langClassName).newInstance();","catch(IllegalAccessExceptione){","assert(false):\"Internalerror:mustneverhappen.\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["intmillis=t%1000;","t/=1000;","synchronized(cal){","cal.setTimeZone(timezone);","cal.set(1970,0,d+1,0,0,t);","cal.set(Calendar.MILLISECOND,millis);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(isSetFrom){","throwSmallSQLException.create(Language.COL_AMBIGUOUS,expr.getName());","isSetFrom=true;","expr.setFrom(fromEntry,colIdx,table);","if(!isSetFrom){","throwSmallSQLException.create(Language.COL_INVALID_NAME,expr.getName());"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["throwsException{","super(joinType,left,right,null);","this.leftEx=leftEx;","this.rightEx=rightEx;","this.compare=compare;","createIndex(rightEx);"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["{ORDERBY_INTERNAL,\"ErroreinternoperORDERBY.\"},","{UNION_DIFFERENT_COLS,\"SELECTappartenentiadunaUNIONconnumerodicolonnedifferenti:{0}e{1}.\"},","{INDEX_EXISTS,\"L\'\'indice\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{INDEX_MISSING,\"L\'\'indice\'\'{0}\'\'nonesiste.\"},","{INDEX_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoperunindice.\"},","{INDEX_CORRUPT,\"Erroreduranteilcaricamentodell\'\'indice.Filedell\'\'indicecorrotto:\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["counter.setNextValue(obj);","booleanisCaseSensitive(){","returncaseSensitive;","voidsetNullable(booleannullable){","this.nullable=nullable;","booleanisNullable(){"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["intgetRow(){","returnrow;","finallonggetRowPosition(){","if(rowPositions==null)rowPositions=newLongLongList();","rowPositions.add(left.getRowPosition(),right.getRowPosition());","returnrowPositions.size()-1;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["publicvoidupdateObject(intcolumnIndex,Objectx,intscale)throwsSQLException{","updateValue(columnIndex,x,-1);","publicvoidupdateObject(intcolumnIndex,Objectx)throwsSQLException{","updateValue(columnIndex,x,-1);","publicvoidupdateNull(StringcolumnName)throwsSQLException{","updateNull(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["importsmallsql.database.language.Language;","publicfinalclassDateTimeimplementsMutable{","longtime;","privateintdataType=SQLTokenizer.TIMESTAMP;","staticfinalint[]MONTH_DAYS={0,31,59,90,120,151,181,212,243,273,304,334};","privatestaticfinalString[]SHORT_MONTHS=newDateFormatSymbols().getShortMonths();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();","if(num!=null&&(dataType==SQLTokenizer.NUMERIC||dataType==SQLTokenizer.DECIMAL))","num.setScale(getScale());","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["String[]colNames={\"TYPE_NAME\",\"DATA_TYPE\",\"PRECISION\",\"LITERAL_PREFIX\",\"LITERAL_SUFFIX\",\"CREATE_PARAMS\",\"NULLABLE\",\"CASE_SENSITIVE\",\"SEARCHABLE\",\"UNSIGNED_ATTRIBUTE\",\"FIXED_PREC_SCALE\",\"AUTO_INCREMENT\",\"LOCAL_TYPE_NAME\",\"MINIMUM_SCALE\",\"MAXIMUM_SCALE\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"NUM_PREC_RADIX\"};","Object[][]data={","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.UNIQUEIDENTIFIER)),Utils.getInteger(36),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIT)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TINYINT)),Utils.getInteger(3),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIGINT)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["((MutableInteger)value).value+=expr.getInt();","break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value+=expr.getLong();","break;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicstaticfinalStringTABLE_CANT_DROP_LOCKED=\"SS-0192\";","publicstaticfinalStringTABLE_CORRUPT_PAGE=\"SS-0193\";","publicstaticfinalStringTABLE_MODIFIED=\"SS-0194\";","publicstaticfinalStringTABLE_DEADLOCK=\"SS-0195\";","publicstaticfinalStringTABLE_OR_VIEW_MISSING=\"SS-0196\";","publicstaticfinalStringTABLE_FILE_INVALID=\"SS-0197\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["currentDS=dataSources.get(0);","currentDS.beforeFirst();","row=0;","finalbooleanfirst()throwsException{","dataSourceIdx=0;","currentDS=dataSources.get(0);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(node.remainderKey!=null)node.moveRemainderValue();","returnnode.addRoot();","finalIndexNodeaddRootValue(char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);","returnaddRoot();","finalIndexNodeaddRootValue(longremainderValue,intdigitCount)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["staticfinalintINTO=203;","staticfinalintUPDATE=204;","staticfinalintCREATE=205;","staticfinalintDROP=206;","staticfinalintALTER=207;","staticfinalintSET=208;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.SPACE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSpace();","break;","caseSQLTokenizer.SOUNDEX:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(newValueinstanceofjava.util.Date){","DateTimedateTime;","this.value=dateTime=DateTime.valueOf((java.util.Date)newValue);","this.dataType=dateTime.getDataType();","}else","if(newValueinstanceofbyte[])"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnreadBoolean()?1:0;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2double(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticDateTimevalueOf(Stringdate,intdataType)throwsSQLException{","if(date==null)returnnull;","returnnewDateTime(parse(date),dataType);","staticlongparse(finalStringdatetime)throwsSQLException{","try{","finalintlength=datetime.length();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicstaticfinalStringINDEX_CORRUPT=\"SS-0463\";","publicstaticfinalStringINDEX_TOOMANY_EQUALS=\"SS-0464\";","publicstaticfinalStringFILE_TOONEW=\"SS-0490\";","publicstaticfinalStringFILE_TOOOLD=\"SS-0491\";","publicstaticfinalStringFILE_CANT_DELETE=\"SS-0492\";","publicstaticfinalStringROW_0_ABSOLUTE=\"SS-0520\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["importsmallsql.database.language.Language;","publicclassStoreImplextendsStore{","privatestaticfinalintDEFAULT_PAGE_SIZE=8192;//8Kb","privatestaticfinalintPAGE_MAGIC=0x12DD13DE;//areusedforrepairingatable","privatestaticfinalintPAGE_CONTROL_SIZE=28;","privatestaticfinalbyte[]page_control=newbyte[PAGE_CONTROL_SIZE];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["union.addDataSource(newViewResult(con,selCmd));","selCmd=newCommandSelect(con.log);","selCmd.setSource(union);","DataSourcesfrom=newDataSources();","from.add(union);","selCmd.setTables(from);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["floatgetFloat()throwsException{","returnMath.abs(param1.getFloat());","doublegetDouble()throwsException{","returnMath.abs(param1.getDouble());","longgetMoney()throwsException{","returnMath.abs(param1.getMoney());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["page[2]=(byte)(value\>\>40);","page[3]=(byte)(value\>\>32);","page[4]=(byte)(value\>\>24);","page[5]=(byte)(value\>\>16);","page[6]=(byte)(value\>\>8);","page[7]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["buffer.position(0);","intmagic=buffer.getInt();","intversion=buffer.getInt();","switch(magic){","caseMAGIC_TABLE:","caseMAGIC_VIEW:"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["publicdoublegetDouble(StringparameterName)throwsSQLException{","returngetDouble(findParameter(parameterName));","publicbyte[]getBytes(StringparameterName)throwsSQLException{","returngetBytes(findParameter(parameterName));","publicDategetDate(StringparameterName)throwsSQLException{","returngetDate(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.LESSER_EQU:returnLES_EQU;","caseSQLTokenizer.UNEQUALS:returnUNEQUALS;","caseSQLTokenizer.BETWEEN:returnBETWEEN;","caseSQLTokenizer.LIKE:returnLIKE;","caseSQLTokenizer.IN:returnIN;","caseSQLTokenizer.IS:returnISNULL;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnselCmd;","privateCommanddelete()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_FROM);","from(cmd);","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"ASC\",ASC);","addKeyWord(DESC_STR,DESC);","addKeyWord(\"VALUES\",VALUES);","addKeyWord(\"AS\",AS);","addKeyWord(\"DEFAULT\",DEFAULT);","addKeyWord(\"AUTO_INCREMENT\",IDENTITY);//aliasforIDENTITY;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{GROUP_AGGR_NOTPART,\"DerAusdruck\'\'{0}\'\'istnichtTeileinerAggregatfunktionoderGROUPBYKlausel.\"},","{ORDERBY_INTERNAL,\"InternerErrormitORDERBY.\"},","{UNION_DIFFERENT_COLS,\"DieSELECTTeiledesUNIONhabeneineunterschiedlicheSpaltenanzahl:{0}und{1}.\"},","{INDEX_EXISTS,\"Index\'\'{0}\'\'existiertbereits.\"},","{INDEX_MISSING,\"Index\'\'{0}\'\'existiertnicht.\"},","{INDEX_FILE_INVALID,\"DieDatei\'\'{0}\'\'istkeingÃ¼ltigerIndexspeicher.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["value=temp;","inttempi=signum;","signum=sig2;","sig2=tempi;","if(signum!=sig2)","sub(val2);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.MINUS:","caseSQLTokenizer.ASTERISK:","caseSQLTokenizer.SLACH:","caseSQLTokenizer.PERCENT:","caseSQLTokenizer.EQUALS:","caseSQLTokenizer.LESSER:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<columnExpressions.size();i++){","Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","ExpressionrsColumn=columnExpressions.get(i);//ColumnoftheResultSet","if(!rsColumn.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["staticbooleangetBoolean(Objectobj,intdataType)throwsException{","if(obj==null)returnfalse;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return(obj.equals(Boolean.TRUE));"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["return(commitPages==null);","publicDatabaseMetaDatagetMetaData(){","returnmetadata;","publicvoidsetReadOnly(booleanreadOnly){","publicbooleanisReadOnly(){","returnreadonly;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnreadLong()!=0;","caseSQLTokenizer.REAL:","returnreadFloat()!=0;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnreadDouble()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicintgetMaxColumnNameLength(){","return255;","publicintgetMaxColumnsInGroupBy(){","return0;","publicintgetMaxColumnsInIndex(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returngetNumericImpl();","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(getMoneyImpl(),4);","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privateMutableNumericgetNumericImpl()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.OCTETLEN;","booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionOctetLen.java|"],
"["@Override","finalintgetDataType(intcolIdx){","returndataTypes[colIdx];","finalprivatevoidcopyValueInto(intcolIdx,StoreImpldst){","intoffset=offsets[colIdx++];","intlength=(colIdx\<offsets.length?offsets[colIdx]:store.getUsedSize())-offset;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(listEnum.stack==0){","offset=previousOffset;","return;","offset=listEnum.offsetStack[listEnum.stack-1]-pointerSize;","intpointer=getPointer();","if(pointer\<=previousOffset){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getDouble()==right.getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["((MutableInteger)value).value=Math.min(((MutableInteger)value).value,expr.getInt());","break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.min(((MutableLong)value).value,expr.getLong());","break;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["this.name=name;","@Override","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(con.isReadOnly()){","throwSmallSQLException.create(Language.DB_READONLY);","Filedir=newFile(name);"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["staticfinalintPARENTHESIS_L=\'(\';//40","staticfinalintPARENTHESIS_R=\')\';//41","staticfinalintASTERISK=\'*\';//42","staticfinalintPLUS=\'+\';//43","staticfinalintCOMMA=\',\';//44","staticfinalintMINUS=\'-\';//45"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["commandSelect.compile(con);","Expressionsexprs=commandSelect.columnExpressions;","for(intc=0;c\<exprs.size();c++){","Expressionexpr=exprs.get(c);","if(exprinstanceofExpressionName){","Columncolumn=((ExpressionName)expr).getColumn().copy();"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["ObjectgetObject()throwsjava.lang.Exception{","if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.CallableStatement;","importjava.sql.Connection;","importjava.sql.DatabaseMetaData;","importjava.sql.PreparedStatement;","importjava.sql.SQLException;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["ObjectInputStreamois=newObjectInputStream(bais);","returnnewMutableNumeric(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnnewMutableNumeric(Utils.bytes2double(readLongBinary()));","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buf.append(\'\');","formatHour12(details.hour,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","importjava.io.File;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","importsmallsql.database.language.Language;","publicclassCreateFileextendsTransactionStep{"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["intreadByte(){","returnpuffer[offset++];","intreadShort(){","return((puffer[offset++]&0xFF)\<\<8)|(puffer[offset++]&0xFF);","intreadInt(){","return((puffer[offset++]&0xFF)\<\<24)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["Entry[]src=table;","intnewCapacity=newTable.length;","for(intj=0;j\<src.length;j++){","Entrye=src[j];","if(e!=null){","src[j]=null;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["{ROW_LOCKED,\"LarigaÃ¨bloccatadaun\'\'altraconnessione.\"},","{ROW_DELETED,\"RigagiÃ\u00a0cancellata.\"},","{SAVEPT_INVALID_TRANS,\"SAVEPOINTnonvalidoperquestatransazione.\"},","{SAVEPT_INVALID_DRIVER,\"SAVEPOINTnonvalidoperquestodriver{0}.\"},","{ALIAS_UNSUPPORTED,\"Aliasnonsupportatoperquestotipodisorgenterighe.\"},","{ISOLATION_UNKNOWN,\"LivellodiIsolamentotransazionesconosciuto:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(idx2\<0)idx2=datetime.length();","day=Integer.parseInt(datetime.substring(idx1,idx2).trim());","}else{","year=1970;","month=0;","day=1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intgetSavepoint()throwsSQLException{","testClosedConnection();","returncommitPages.size();//thecallisatomic,thatitneednotbesynchronized","publicSavepointsetSavepoint()throwsSQLException{","returnnewSSSavepoint(getSavepoint(),null,transactionTime);","publicSavepointsetSavepoint(Stringname)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["booleanfirstNode1=true;","booleanfirstNode2=true;","booleanfirstNode3=true;","while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["return0;","if(operation==0){","operation=op;","if(operation!=op){","return0;","if(operation==ExpressionArithmetic.EQUALS){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["SQLTokentoken=nextToken(COMMANDS);","switch(token.value){","caseSQLTokenizer.SELECT:","returnselect();","caseSQLTokenizer.DELETE:","returndelete();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["RowSourceright;","privatebooleanisAfterLast;","privateLongLongListrowPositions;//neededforgetRowPosition()andsetRowPosition()","privateintrow;//currentrownumber","JoinScrollscroll;","Join(inttype,RowSourceleft,RowSourceright,Expressioncondition){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["privateCommandinsert()throwsSQLException{","SQLTokentoken=nextToken(MISSING_INTO);","CommandInsertcmd=newCommandInsert(con.log,nextIdentifier());","intparthesisCount=0;","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","if(token.value==SQLTokenizer.PARENTHESIS_L){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicStringgetDriverName(){","return\"SmallSQLDriver\";","publicStringgetDriverVersion(){","returngetDriverMajorVersion()+\".\"+SSDriver.drv.getMinorVersion();","publicintgetDriverMajorVersion(){","returnSSDriver.drv.getMajorVersion();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["return(long)(readNumeric().doubleValue()*10000L);","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnMoney.parseMoney(readString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnexecute(sql);","finalpublicbooleanexecute(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);","returnexecute(sql);","finalpublicbooleanexecute(Stringsql,String[]columnNames)throwsSQLException{","setNeedGeneratedKeys(columnNames);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["if(complement==0){","signum=0;","value=EMPTY_INTS;","}else{","value=newint[2];","if(complement\<0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["switch(expr.getDataType()){","caseSQLTokenizer.REAL:","page=add(page,rowOffset,floatToBinarySortOrder(expr.getFloat()),isLastValues,2);","break;","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnnull;","raFile.position(filePos);","synchronized(page_control){","pageControlBuffer.position(0);","raFile.read(pageControlBuffer);","store.page=page_control;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteChars(char[]value){","verifyFreePufferSize(2*value.length);","for(inti=0;i\<value.length;i++){","charc=value[i];"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnLong.parseLong(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getLong(ois.readObject().toString(),SQLTokenizer.VARCHAR);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicbooleansupportsOpenStatementsAcrossCommit(){","returntrue;","publicbooleansupportsOpenStatementsAcrossRollback(){","returntrue;","publicintgetMaxBinaryLiteralLength(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;","caseSQLTokenizer.CURTIME:","invalidParamCount=(paramCount!=0);","expr=newExpressionValue(newDateTime(DateTime.now(),SQLTokenizer.TIME),SQLTokenizer.TIME);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publiclonglongValue(){","returnvalue;","@Override","publicStringtoString(){","returnString.valueOf(value);","publicObjectgetImmutableObject(){"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalvoidaddRemainderKey(longrowOffset,char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalIndexNodeaddRoot(chardigit)throwsSQLException{","IndexNodenode=addNode(digit);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["sqlStates.put(key,value);","publicStringgetMessage(Stringkey){","Stringmessage=(String)messages.get(key);","assert(message!=null):\"Messagecodenotfound:\"+key;","returnmessage;","publicStringgetSqlState(Stringkey){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["this.remainderKey[d++]=(char)(remainderValue\>\>(i\<\<4));","finalIndexNodeaddRoot()throwsSQLException{","IndexNoderoot=(IndexNode)value;","if(root==null){","value=root=createIndexNode(unique,(char)-1);","returnroot;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","longreadLong(){","return((long)(page[offset++])\<\<56)|","((long)(page[offset++]&0xFF)\<\<48)|"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicDategetDate(StringcolumnName)throwsSQLException{","returngetDate(findColumn(columnName));","publicTimegetTime(StringcolumnName)throwsSQLException{","returngetTime(findColumn(columnName));","publicTimestampgetTimestamp(StringcolumnName)throwsSQLException{","returngetTimestamp(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(lock==prev){","if(lock.nextLock==null){","locksInsert.remove(i--);","}else{","locksInsert.set(i,lock.nextLock);","}else{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getDateTimeLong(),dataType);","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(!(exprinstanceofExpressionValue))returnfalse;","Objectv=((ExpressionValue)expr).value;","if(v==value)returntrue;","if(value==null)returnfalse;","returnvalue.equals(v);","voidaccumulate(Expressionexpr)throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["floatgetFloat(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intsize=tableView.columns.size();","matrix=newint[size];","for(inti=0;i\<matrix.length;i++){","matrix[i]=-1;","for(inti=0;i\<columns.size();i++){","matrix[tableView.findColumnIdx(columns.get(i))]=i;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["System.out.println(\"\\tCurrentdatabase:\"+con.getCatalog());","System.out.println();","System.out.println(\"\\tUsetheUSEcommandtochangethedatabasecontext.\");","System.out.println(\"\\tType2timesENTERtoexecuteanySQLcommand.\");","StringBuffercommand=newStringBuffer();","BufferedReaderinput=newBufferedReader(newInputStreamReader(System.in));"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["finalclassExpressionFunctionATan2extendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.ATAN2;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionATan2.java|"],
"["publicvoidmoveToInsertRow()throwsSQLException{","if(isUpdatable){","isInsertRow=true;","clearRowBuffer();","}else{","throwSmallSQLException.create(Language.RSET_READONLY);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(isRS){","printRS(st.getResultSet());","command.setLength(0);","command.append(line).append(\'\\n\');","}catch(Exceptione){","command.setLength(0);"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["staticintgetInt(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return(obj==Boolean.TRUE)?1:0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["booleangetBoolean()throwsException{","if(param1.getBoolean())","returnparam2.getBoolean();","returnparam3.getBoolean();","intgetInt()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["formatNumber(details.year%100,2,buf);","returnbuf.toString();","case110://USAmm-dd-yyyy","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","caseSQLTokenizer.RIGHT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRight();","break;","caseSQLTokenizer.RTRIM:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"SWITCH\",SWITCH);","staticfinalintBIT=300;","staticfinalintBOOLEAN=301;","staticfinalintBINARY=310;","staticfinalintVARBINARY=311;","staticfinalintRAW=312;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["offset=offset1;","offset1=offset2;","offset2=offset3;","firstNode=firstNode1;","firstNode1=firstNode2;","firstNode2=firstNode3;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intcount=param2.getInt();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["long_left=left.getLong();","return_left\>=right.getLong()&&right2.getLong()\>=_left;","default:","returngetLong()!=0;","caseSQLTokenizer.REAL:","switch(operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["ExpressionFunctionCaseexpr=newExpressionFunctionCase();","SQLTokentoken=nextToken(MISSING_EXPRESSION);","Expressioninput=null;","if(token.value!=SQLTokenizer.WHEN){","previousToken();","input=expression(cmd,0);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returngetBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","return((Number)obj).longValue()*10000;","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnTypes.DOUBLE;","caseSQLTokenizer.DATE:","returnTypes.DATE;","caseSQLTokenizer.TIME:","returnTypes.TIME;","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["formatNumber(details.day,2,buf);","returnbuf.toString();","case13:","case113://default+millis;ddmonyyyyhh:mm:ss:mmm(24h)","formatNumber(details.day,2,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnFloat.parseFloat(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidwriteDate(longdate){","writeInt((int)(date/86400000));","longreadDate(){","returnreadInt()*86400000L;","voidwriteSmallDateTime(longdatetime){","writeInt((int)(datetime/60000));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncmd.getQueryResult();","publicintexecuteUpdate()throwsSQLException{","executeImp();","returncmd.getUpdateCount();","finalprivatevoidexecuteImp()throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommanddrop()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_DROP);","Stringcatalog;","Stringname=catalog=nextIdentifier();","name=nextIdentiferPart(name);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnobj.toBigDecimal();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti,Mapmap)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"MethodgetRef()notyetimplemented.\");","publicBlobgetBlob(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnSQLTokenizer.REPEAT;","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;","byte[]bytes=param1.getBytes();","intcount=param2.getInt();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["this.from=join;","finalvoidsetTables(DataSourcesfrom){","this.tables=from;","finalvoidsetWhere(Expressionwhere){","this.where=where;","finalvoidsetGroup(Expressionsgroup){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicbooleandoesMaxRowSizeIncludeBlobs(){","returnfalse;","publicintgetMaxStatementLength(){","return0;","publicintgetMaxStatements(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["idx1=idx2+1;","idx2=datetime.indexOf(\'.\',idx1);","if(idx2\<0)idx2=datetime.length();","second=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","if(idx1\<length){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","writeLongString(expr.getString());","break;","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayOutputStreambaos=newByteArrayOutputStream();","ObjectOutputStreamoos=newObjectOutputStream(baos);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TableStorePagelock;","TableStorePageprev;","switch(lockType){","caseLOCK_INSERT:","for(inti=0;i\<locksInsert.size();i++){","prev=lock=(TableStorePage)locksInsert.get(i);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["!from.isScrollable()){","from=newScrollable(from);","from.execute();","rs=newSSResultSet(st,this);","voidbeforeFirst()throwsException{","from.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","returnparam2.getLong()+param1.getLong();","caseSQLTokenizer.SQL_TSI_SECOND:","returnparam2.getLong()+param1.getLong()*1000;","caseSQLTokenizer.SQL_TSI_MINUTE:","returnparam2.getLong()+param1.getLong()*60000;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["finalvoidadd(Columncolumn){","if(column==null){","thrownewNullPointerException(\"Columnisnull.\");","if(size\>=data.length){","resize(size\<\<1);","data[size++]=column;"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["if(value[v]\<0){","complement=newbyte[(value.length-v)*4+4];","if(signum\<0)","complement[0]=complement[1]=complement[2]=complement[3]=-1;","offset=4;","}else{"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returni;","}else{","for(inti=0;i\<size;i++)","if(expr.equals(data[i]))","returni;","return-1;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","((MutableInteger)value).value=Math.max(((MutableInteger)value).value,expr.getInt());","break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.max(((MutableLong)value).value,expr.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(int)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.INT);","privateintgetIntImpl()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{ROW_0_ABSOLUTE,\"Row0isinvalidformethodabsolute().\"},","{ROW_NOCURRENT,\"Nocurrentrow.\"},","{ROWS_WRONG_MAX,\"Wrongmaxrowsvalue:{0}.\"},","{ROW_LOCKED,\"RowislockedfromanotherConnection.\"},","{ROW_DELETED,\"Rowalreadydeleted.\"},","{SAVEPT_INVALID_TRANS,\"Savepointisnotvalidforthistransaction.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalintgetInt()throwsException{","Stringstr=param1.getString();","if(str==null)return0;","intlength=str.length();","while(length\>=0&&str.charAt(length-1)==\'\')length--;","returnlength;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLength.java|"],
"["intnewSize=offset+25;","if(newSize\>page.length)resizePage(newSize);","writeByte(column.getFlag());","writeString(column.getName());","writeShort(column.getDataType());","writeInt(column.getPrecision());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(dateinstanceofjava.sql.Time)","type=SQLTokenizer.TIME;","else","type=SQLTokenizer.TIMESTAMP;","returnnewDateTime(parse(date),type);","staticDateTimevalueOf(java.sql.Datedate){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnLong.parseLong(readString());","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["abstractbyte[]getBytes()throwsException;","abstractintgetDataType();","finalintgetType(){returntype;}","StringgetTableName(){","returnnull;","intgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:{","byte[]leftBytes=left.getBytes();","byte[]rightBytes=right.getBytes();","intcomp=Utils.compareBytes(leftBytes,rightBytes);","switch(operation){","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanisLast()throwsException{","returncommandSelect.isLast();","booleanisAfterLast()throwsException{","returncommandSelect.isAfterLast();","voidafterLast()throwsException{","commandSelect.afterLast();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["switch(token.value){","caseSQLTokenizer.SELECT:","caseSQLTokenizer.INSERT:","caseSQLTokenizer.UPDATE:","caseSQLTokenizer.UNION:","caseSQLTokenizer.FROM:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return2+precision*2;","caseSQLTokenizer.SMALLDATETIME:","return21;","default:","returnprecision;","staticintgetDataTypePrecision(intdataType,intdefaultValue){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["return(int)((DateTime)obj).getTimeMillis();","default:","Stringstr=obj.toString().trim();","try{","returnInteger.parseInt(str);","}catch(Throwableth){/*ANumberFormatExceptioncanoccurifitafloatingpointnumber*/}"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"Operazionenonsupportata:{0}.\"},","{CANT_LOCK_FILE,\"Impossibilebloccareilfile\'\'{0}\'\'.UndatabaseSmallSQLDatabasepuÃ²essereapertodaununicoprocesso.\"},","{DB_EXISTENT,\"Ildatabase\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{DB_NONEXISTENT,\"Ildatabase\'\'{0}\'\'Nonesiste.\"},","{DB_NOT_DIRECTORY,\"Ladirectory\'\'{0}\'\'nonÃ¨undatabaseSmallSQL.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnfalse;","booleanisCaseSensitive(){","returnfalse;","booleanisNullable(){","returntrue;","staticfinalintVALUE=1;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnnull;","finalObjectgetObject(intoffset,intdataType)throwsException{","returnnull;","finalStringgetString(intoffset,intdataType)throwsException{","returnnull;","finalvoidscanObjectOffsets(int[]offsets,int[]dataTypes){/*thereisnothingtoscan*/}"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["returnreadShort();","caseSQLTokenizer.INT:","returnreadInt();","caseSQLTokenizer.BIGINT:","return(int)readLong();","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{RSET_NOT_PRODUCED,\"EswurdekeinResultSeterzeugt.\"},","{RSET_READONLY,\"DasResultSetistschreibgeschÃ¼tzt.\"},","{RSET_FWDONLY,\"DasResultSetistforwardonly.\"},","{RSET_CLOSED,\"DasResultSetistgeschlossen.\"},","{RSET_NOT_INSERT_ROW,\"DerCursorzeigtaktuellnichtaufdieEinfÃ¼geposition(insertrow).\"},","{RSET_ON_INSERT_ROW,\"DerCursorzeigtaktuellaufdieEinfÃ¼geposition(insertrow).\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionChar();","break;","caseSQLTokenizer.CONCAT:","if(paramCount!=2){","invalidParamCount=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}elsefullRightRowCounter++;","isBeforeFirst=false;","}while(result&&!getBoolean());","isOuterValid=false;","if(type==Join.FULL_JOIN){","if(fullRightRowCounter\>=isFullNotValid.length){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["rows.add(row);","}catch(Exceptione){","Object[][]data=newObject[rows.size()][];","rows.toArray(data);","CommandSelectcmdSelect=Utils.createMemoryCommandSelect(con,colNames,data);","Expressionsorder=newExpressions();"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.TINYINT:","offset++;","break;","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["SQLTokentoken;","intdataType;","if(isEscape){","token=nextToken(MISSING_SQL_DATATYPE);","switch(token.value){","caseSQLTokenizer.SQL_BIGINT:dataType=SQLTokenizer.BIGINT;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicURLgetURL(StringcolumnName)throwsSQLException{","returngetURL(findColumn(columnName));","publicvoidupdateRef(intcolumnIndex,Refx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blob\");","publicvoidupdateBlob(StringcolumnName,Blobx)throwsSQLException{","updateBlob(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["breakSwitch;","while(true){","Expressioncolumn=expression(selCmd,0);","selCmd.addColumnExpression(column);","token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["super(name,null);","this.database=database;","indexes=null;","references=null;","staticvoiddrop(Databasedatabase,Stringname)throwsException{","booleanok=newFile(Utils.createTableViewFileName(database,name)).delete();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["longgetMoney(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(database==null)","return\"\";","returndatabase.getName();","publicvoidsetTransactionIsolation(intlevel)throwsSQLException{","if(!metadata.supportsTransactionIsolationLevel(level)){","throwSmallSQLException.create(Language.ISOLATION_UNKNOWN,String.valueOf(level));"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["break;","caseSQLTokenizer.REPLACE:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionReplace();","break;","caseSQLTokenizer.RIGHT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["MutableNumericgetNumeric()throwsjava.lang.Exception{","if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["super(FUNCTION);","abstractintgetFunction();","byte[]getBytes()throwsException{","returnExpressionValue.getBytes(getObject(),getDataType());","voidsetParams(Expression[]params){","super.setParams(params);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["returnnewMutableNumeric(getIntImpl());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLongImpl());","caseSQLTokenizer.REAL:","returnnewMutableNumeric(getFloatImpl());","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["addKeyWord(\"SQL_TIMESTAMP\",SQL_TIMESTAMP);","addKeyWord(\"SQL_TINYINT\",SQL_TINYINT);","addKeyWord(\"SQL_VARBINARY\",SQL_VARBINARY);","addKeyWord(\"SQL_VARCHAR\",SQL_VARCHAR);","staticfinalintCOUNT=1400;","staticfinalintMIN=1401;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else{","for(inti=0;i\>places;i--){","factor*=10;","value/=factor;","value=Math.rint(value);","if(places\>0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|"],
"["chars[17]=digits[(daten[offset+6])&0x0F];","chars[19]=digits[(daten[offset+8]\>\>4)&0x0F];","chars[20]=digits[(daten[offset+8])&0x0F];","chars[21]=digits[(daten[offset+9]\>\>4)&0x0F];","chars[22]=digits[(daten[offset+9])&0x0F];","chars[24]=digits[(daten[offset+10]\>\>4)&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["SSResultSet(SSStatementst,CommandSelectcmd){","this.st=st;","metaData.columns=cmd.columnExpressions;","this.cmd=cmd;","isUpdatable=st!=null&&st.rsConcurrency==CONCUR_UPDATABLE&&!cmd.isGroupResult();","publicvoidclose(){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\>0)//castneededforCompiler1.5","value=str;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["this.log=log;","this.columnExpressions=newExpressions();","Command(Loggerlog,ExpressionscolumnExpressions){","this.log=log;","this.columnExpressions=columnExpressions;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["this.autoCommit=autoCommit;","publicbooleangetAutoCommit(){","returnautoCommit;","voidadd(TransactionStepstorePage)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["caseSQLTokenizer.COMMA:","continue;","default:throwcreateSyntaxError(token,MISSING_WHERE_COMMA);","returncmd;","privateCommandcreate()throwsSQLException{","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","if(comment==MULTI_COMMENT){","throwSmallSQLException.create(Language.STXADD_COMMENT_OPEN);","if(!wasWhiteSpace){","tokens.add(newSQLToken(value,tokenStart,sql.length));","returntokens;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returncurrentDS.getObject(colIdx);","finalStringgetString(intcolIdx)throwsException{","returncurrentDS.getString(colIdx);","finalbyte[]getBytes(intcolIdx)throwsException{","returncurrentDS.getBytes(colIdx);","finalintgetDataType(intcolIdx){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["privateStoreImpl(Tabletable,StorePagestorePage,inttype,longfilePos){","this.table=table;","this.storePage=storePage;","this.filePos=filePos;","this.type=type;","staticStoreImplcreateStore(Tabletable,StorePagestorePage,inttype,longfilePos)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intgetInt(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["digit|=0x20;","if(digit\>=\'a\'&&digit\<=\'f\')returndigit-\'W\';//-\'W\'==-\'a\'+10","thrownewRuntimeException();","staticbyte[]unique2bytes(Stringunique)throwsSQLException{","char[]chars=unique.toCharArray();","byte[]daten=newbyte[16];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["idx1=idx2+length;","idx2=str1.indexOf(str2,idx1);","if(idx1\>0){","buffer.append(str1.substring(idx1));","returnbuffer.toString();","returnstr1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returnTypes.VARCHAR;","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnTypes.LONGVARCHAR;","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.util.List;","importsmallsql.database.language.Language;","classTableextendsTableView{","privatestaticfinalintINDEX=1;","finalDatabasedatabase;","FileChannelraFile;//filehandleofthetable"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseGRE_EQU:","caseLESSER:","caseLES_EQU:","caseUNEQUALS:","caseBETWEEN:","caseOR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseConnection.TRANSACTION_REPEATABLE_READ:","caseConnection.TRANSACTION_SERIALIZABLE:","returntrue;","returnfalse;","publicbooleansupportsDataDefinitionAndDataManipulationTransactions(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).longValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","count=readShort()&0xFFFF;","if(!isNull)offset+=count\<\<1;//notuse+=directlybecausereadShortchangetheoffset","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSqrt();","break;","caseSQLTokenizer.TAN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionTan();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{FILE_CANT_DELETE,\"File\'\'{0}\'\'can\'tbedeleted.\"},","{ROW_0_ABSOLUTE,\"Row0isinvalidformethodabsolute().\"},","{ROW_NOCURRENT,\"Nocurrentrow.\"},","{ROWS_WRONG_MAX,\"Wrongmaxrowsvalue:{0}.\"},","{ROW_LOCKED,\"RowislockedfromanotherConnection.\"},","{ROW_DELETED,\"Rowalreadydeleted.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["ExpressionValue[]newRow=currentRow=newExpressionValue[expressions.size()];","for(inti=0;i\<newRow.length;i++){","Expressionexpr=expressions.get(i);","inttype=expr.getType();","if(type\<Expression.GROUP_BEGIN)type=Expression.GROUP_BY;","newRow[i]=newExpressionValue(type);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnrowOffset;","while(true){","IndexNodeScrollStatusstatus=(IndexNodeScrollStatus)nodeStack.peek();","intlevel=status.level;","if(!status.asc^scroll){","intidx=++status.idx;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["offset+=4;","break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionOctetLen();","break;","caseSQLTokenizer.REPEAT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRepeat();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(max\<0)","throwSmallSQLException.create(Language.ROWS_WRONG_MAX,String.valueOf(max));","maxRows=max;","finalpublicvoidsetEscapeProcessing(booleanenable)throwsSQLException{","checkStatement();","finalpublicintgetQueryTimeout()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","returngetBytes();","default:throwcreateUnspportedDataType(param1.getDataType());","intgetDataType(){","returnparam1.getDataType();","intgetPrecision(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["if(String.CASE_INSENSITIVE_ORDER.compare((String)value,str)\<0)//castneededforCompiler1.5","value=str;","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["integerCache[i+4]=newInteger(i);","shortCache[i+4]=newShort((short)i);","staticStringcreateTableViewFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+TABLE_VIEW_EXTENTION;","staticStringcreateLobFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+LOB_EXTENTION;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicbooleanownInsertsAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersDeletesAreVisible(inttype){","returnsupportsResultSetType(type);"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["SQLTokentoken=nextToken(MISSING_ISOLATION);","token=nextToken(MISSING_LEVEL);","token=nextToken(COMMANDS_TRANS_LEVEL);","CommandSetcmd=newCommandSet(con.log,SQLTokenizer.LEVEL);","switch(token.value){","caseSQLTokenizer.READ:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary());","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte();","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["previousToken();","returnexpr;","caseSQLTokenizer.TRUE:","returnnewExpressionValue(Boolean.TRUE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.FALSE:","returnnewExpressionValue(Boolean.FALSE,SQLTokenizer.BOOLEAN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(inti=0;i\<nodes.length;i++){","nodes[i].saveRef(output);","voidsaveRef(StoreImploutput)throwsSQLException{","IndexNodeloadRef(longoffset)throwsSQLException{","thrownewError();","voidload(StoreImplinput)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:","cmdCreate.addColumn(col);","returntoken;","caseSQLTokenizer.DEFAULT:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Expressionexpr=newExpressionArithmetic(left,right,ExpressionArithmetic.EQUALS_NULL);","currentGroup=(currentGroup==null)?","expr:","newExpressionArithmetic(currentGroup,expr,ExpressionArithmetic.AND);","expressions=internalExpressions;","for(intc=0;c\<expressions.size();c++){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["caseSQLTokenizer.UNIQUEIDENTIFIER:","return36;","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:","returnInteger.MAX_VALUE;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnnewDateTime(parse(date),type);","staticDateTimevalueOf(java.sql.Datedate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.DATE);","staticDateTimevalueOf(java.sql.Timedate){","if(date==null)returnnull;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.JOIN:","caseSQLTokenizer.LIMIT:","returntrue;","returnfalse;","privateSQLTokenlastToken(){","if(tokenIdx\>tokens.size()){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StringgetString(intcolIdx)throwsException{","returnget(colIdx).getString();","byte[]getBytes(intcolIdx)throwsException{","returnget(colIdx).getBytes();","intgetDataType(intcolIdx){","returncolumns.get(colIdx).getDataType();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["publicstaticfinalStringSTXADD_IDENT_WRONG=\"SS-0615\";","publicstaticfinalStringSTXADD_OPER_MINUS=\"SS-0616\";","publicstaticfinalStringSTXADD_FUNC_UNKNOWN=\"SS-0617\";","publicstaticfinalStringSTXADD_PARAM_INVALID_COUNT=\"SS-0618\";","publicstaticfinalStringSTXADD_JOIN_INVALID=\"SS-0619\";","publicstaticfinalStringSTXADD_FROM_PAR_CLOSE=\"SS-0620\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["publicTimegetTime(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){","returngetTime(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["SQLTokenizer.SMALLDATETIME,","SQLTokenizer.DATE,","SQLTokenizer.TIME,","SQLTokenizer.DOUBLE,","SQLTokenizer.FLOAT,","SQLTokenizer.REAL,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidwriteByte(intvalue){","intnewSize=offset+1;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value);","intreadByte(){","returnpage[offset++];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleannext()throwsException{","if(isAfterLast)returnfalse;","row++;","booleanresult=scroll.next();","if(!result){","noRow();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(length==0){","returnstr1;","Stringstr3=param3.getString();","StringBufferbuffer=newStringBuffer();","intidx1=0;","intidx2=str1.indexOf(str2,idx1);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["switch(dataType){","caseSQLTokenizer.RAW:","dataType=SQLTokenizer.VARBINARY;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NCHAR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["synchronized(tableViews){","tableViews.remove(tableViewName);","voidreplaceTable(TableoldTable,TablenewTable)throwsException{","synchronized(tableViews){","tableViews.remove(oldTable.name);","tableViews.remove(newTable.name);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.BLOB:","returnnewMutableNumeric(Utils.bytes2double(readLongBinary()));","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returngetResult().getObject();","finalStringgetString()throwsException{","returngetResult().getString();","finalbyte[]getBytes()throwsException{","returngetResult().getBytes();","finalintgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["ExpressionName(Stringname){","super(NAME);","setName(name);","ExpressionName(inttype){","super(type);","voidsetNameAfterTableAlias(Stringname){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["this.isInit=true;","PrintWriterpw=DriverManager.getLogWriter();","if(pw!=null)this.printStackTrace(pw);","staticvoidsetLanguage(ObjectlocaleObj)throwsSQLException{","if(language!=null&&localeObj==null)return;","if(localeObj==null){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["params.add(param);","voidverifyParams()throwsSQLException{","for(intp=0;p\<params.size();p++){","if(((ExpressionValue)params.get(p)).isEmpty())","throwSmallSQLException.create(Language.PARAM_EMPTY,newInteger(p+1));","voidclearParams(){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["if(newScale==scale)return;","intfactor=1;","if(newScale\>scale){","for(;newScale\>scale;scale++){","factor*=10;","if(factor==1000000000){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["ObjectgetObject()throwsException{","if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["con.rollback(savepoint);","throwSmallSQLException.createFromException(e);","}finally{","if(con.getAutoCommit())con.commit();","publicintfindColumn(StringcolumnName)throwsSQLException{","Expressionscolumns=columnExpressions;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["privatevoidgroup(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);","cmd.setGroup(expressionTokenList(cmd,SQLTokenizer.GROUP));","privatevoidwhere(CommandSelectcmd)throwsSQLException{","cmd.setWhere(expression(cmd,0));","privatevoidhaving(CommandSelectcmd)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DATE:","returnTypes.DATE;","caseSQLTokenizer.TIME:","returnTypes.TIME;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StringBufferbuf=newStringBuffer();","switch(style){","case0:","case100://monddyyyyhh:miAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["invalidParamCount=true;","expr=null;//onlyforCompiler","break;","caseSQLTokenizer.COUNT:","invalidParamCount=(paramCount!=1);","if(params[0].getType()==Expression.NAME){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["selCmd=newCommandSelect(con.log);","selCmd.setSource(union);","DataSourcesfrom=newDataSources();","from.add(union);","selCmd.setTables(from);","selCmd.addColumnExpression(newExpressionName(\"*\"));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(token.value==validValues[i])returntoken;","throwcreateSyntaxError(token,validValues);","privateCommandSelectsingleSelect()throwsSQLException{","CommandSelectselCmd=newCommandSelect(con.log);","SQLTokentoken;","Switch:while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:","throwcreateSyntaxError(token,validValues);","returntoken;","for(inti=validValues.length-1;i\>=0;i--){","if(token.value==validValues[i])returntoken;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintDOUBLE=338;","staticfinalintDATE=340;","staticfinalintTIME=341;","staticfinalintTIMESTAMP=342;","staticfinalintSMALLDATETIME=343;","staticfinalintCHAR=350;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["raFile.read(pageControlBuffer);","store.page=page_control;","store.readPageHeader();","store.page=newbyte[store.sizeUsed];","raFile.position(filePos);","ByteBufferbuffer=ByteBuffer.wrap(store.page);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["addKeyWord(\"SQL_TSI_MONTH\",SQL_TSI_MONTH);","addKeyWord(\"Q\",SQL_TSI_QUARTER);","addKeyWord(\"QQ\",SQL_TSI_QUARTER);","addKeyWord(\"SQL_TSI_QUARTER\",SQL_TSI_QUARTER);","addKeyWord(\"YY\",SQL_TSI_YEAR);","addKeyWord(\"YYYY\",SQL_TSI_YEAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["dataTypes[i]=columns.get(i).getDataType();","returntrue;","returnfalse;","@Override","finalvoidexecute()throwsException{","insertStorePages=table.getInserts(con);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\'.\');","formatMillis(details.millis,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intlastmIdx=mIdx-1;","sIdx++;","while(pattern.length()\>mIdx&&value.length()\>sIdx){","m=Character.toUpperCase(pattern.charAt(mIdx++));","if(Character.toUpperCase(value.charAt(sIdx))!=m){","if(m==\'%\'||m==\'_\'){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returncommandSelect.absolute(row);","booleanrelative(introws)throwsException{","returncommandSelect.relative(rows);","intgetRow()throwsException{","returncommandSelect.getRow();","longgetRowPosition(){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["SQLTokentoken=nextToken(MISSING_EXPRESSION);","Expressioninput=null;","if(token.value!=SQLTokenizer.WHEN){","previousToken();","input=expression(cmd,0);","token=nextToken(MISSING_WHEN_ELSE_END);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return;","intshift=48;","booleanfirstNode=(size\>2);//ifthisthefirstnodeinthistreelevel(0canbethefirstnodeandaretheendofthelevel)","while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject();","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnreadLongBinary();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatelongmaxFileOffset;","TableResult(Tabletable){","this.table=table;","@Override","finalbooleaninit(SSConnectioncon)throwsException{","if(super.init(con)){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["param2=param;","break;","case2:","param3=param;","break;","case3:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["finalprivatevoidwriteShort(intvalue){","data[offset++]=(byte)(value\>\>8);","data[offset++]=(byte)(value);","privatefinalvoidresize()throwsSQLException{","intnewsize=data.length\<\<1;","if(newsize\>0xFFFFFF){//seepointerSize"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["finalpublicbooleanexecute(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);","returnexecute(sql);","finalpublicbooleanexecute(Stringsql,int[]columnIndexes)throwsSQLException{","setNeedGeneratedKeys(columnIndexes);","returnexecute(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["returne.value;","prev=e;","e=next;","returnnull;","finalvoidclear(){","Entrytab[]=table;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["publicbooleansupportsSavepoints(){","returnfalse;","publicbooleansupportsNamedParameters(){","returntrue;","publicbooleansupportsMultipleOpenResults(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["return\"#$Ã€Ã\ufffdÃ‚ÃƒÃ„Ã…Ã†Ã‡ÃˆÃ‰ÃŠÃ‹ÃŒÃ\ufffdÃŽÃ\ufffdÃ\ufffdÃ‘Ã’Ã“Ã”Ã•Ã–Ã˜Ã™ÃšÃ›ÃœÃ\ufffdÃžÃŸÃ\u00a0Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿\";","publicbooleansupportsAlterTableWithAddColumn(){","thrownewjava.lang.UnsupportedOperationException(\"MethodsupportsAlterTableWithDropColumn()notyetimplemented.\");","publicbooleansupportsColumnAliasing(){","returntrue;","publicbooleannullPlusNonNullIsNull(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Filefile=getFile(database,name);","booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.INDEX_EXISTS,name);","FileChannelrandomFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,randomFile,con,database));","writeMagic(randomFile);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["publicfloatfloatValue(){","return(float)value;","publicintintValue(){","return(int)value;","publiclonglongValue(){","return(long)value;"]": ["|project://smallsql/src/smallsql/database/MutableDouble.java|"],
"["IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();","returnnode.addRoot();","finalIndexNodeaddRootValue(char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);","returnaddRoot();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["elsebreak;","thrownewIllegalArgumentException(\"Localenotfoundinthetree:\"+localeStr);","protectedLanguage(){","messages=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","sqlStates=newHashMap((int)(MESSAGES.length/0.7));//avoidrehashing;-)","addMessages(MESSAGES);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["abstractMutableNumericgetNumeric(intoffset,intdataType)throwsException;","abstractObjectgetObject(intoffset,intdataType)throwsException;","abstractStringgetString(intoffset,intdataType)throwsException;","booleanisValidPage(){","returnfalse;","abstractvoidscanObjectOffsets(int[]offsets,intdataTypes[]);"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["row[4]=getName();//FKTABLE_CAT","row[6]=foreignKey.fkTable;//FKTABLE_NAME","row[7]=columnsFk.get(c);//FKCOLUMN_NAME","row[8]=Utils.getShort(c+1);//KEY_SEQ","row[9]=Utils.getShort(foreignKey.updateRule);//UPDATE_RULE","row[10]=Utils.getShort(foreignKey.deleteRule);//DELETE_RULE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["MutableNumericnum=left.getNumeric();","num.mul(right.getInt());","returnnum;","}else","if(getDataType(left.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT){","MutableNumericnum=right.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalColumnget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalColumnget(Stringname){","for(inti=0;i\<size;i++){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["getKeywordFromOperation(operation)","};","returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER,params);","voidoptimize()throwsSQLException{","super.optimize();","Expression[]params=getParams();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Expressionparam1;","Expressionparam2;","Expressionparam3;","Expressionparam4;","ExpressionFunction(){","super(FUNCTION);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["if(this.autoCommit!=autoCommit){","commit();","this.autoCommit=autoCommit;","publicbooleangetAutoCommit(){","returnautoCommit;","voidadd(TransactionStepstorePage)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["if(!searchNullValues){","returnnull;","page=findNull(page);","}else{","switch(expr.getDataType()){","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ObjectlObj=left.getObject();","ObjectrObj=right.getObject();","if(lObjinstanceofNumber&&rObjinstanceofNumber)","returnnewDouble(getDoubleImpl(((Number)lObj).doubleValue(),((Number)rObj).doubleValue()));","else"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["((long)(page[1]&0xFF)\<\<48)|","((long)(page[2]&0xFF)\<\<40)|","((long)(page[3]&0xFF)\<\<32)|","((long)(page[4]&0xFF)\<\<24)|","((page[5]&0xFF)\<\<16)|","((page[6]&0xFF)\<\<8)|"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["returnvalue;","finalIndexNode[]getChildNodes(){","returnnodes;","finalIndexNodegetChildNode(chardigit){","intpos=findNodePos(digit);","if(pos\>=0)returnnodes[pos];"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["@Override","intgetUsedSize(){","returnsizeUsed;","@Override","longgetNextPagePos(){","if(updatePointer!=null)returnupdatePointer.getNextPagePos();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.REAL:","page=find(page,floatToBinarySortOrder(expr.getFloat()),2,nodeList);","break;","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","page=find(page,doubleToBinarySortOrder(expr.getDouble()),4,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["importjava.util.Random;","finalclassExpressionFunctionRandextendsExpressionFunctionReturnFloat{","finalstaticprivateRandomrandom=newRandom();","finalintgetFunction(){returnSQLTokenizer.RAND;}","booleanisNull()throwsException{","returngetParams().length==1&&param1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|"],
"["returnUtils.getInteger(getInt());","StringgetString()throwsException{","if(isNull())returnnull;","returnString.valueOf(getInt());","intgetDataType(){","returnSQLTokenizer.INT;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["break;","caseSQLTokenizer.COS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCos();","break;","caseSQLTokenizer.COT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["keyColumnNames=newStrings();","keys=newArrayList();","if(st.getGeneratedKeyNames()!=null)","generatedKeysType=1;","if(st.getGeneratedKeyIndexes()!=null)","generatedKeysType=2;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong();","returnDateTime.calcMillis(details2);","caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong()*3;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.TIMESTAMP:","offset+=8;","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.sql.SQLException;","importjava.sql.Types;","importsmallsql.database.language.Language;","publicclassSQLTokenizer{","privatestaticfinalintNOT_COMMENT=0;","privatestaticfinalintLINE_COMMENT=1;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicbooleanwasNull(){","returnwasNull;","publicStringgetString(intcolumnIndex)throwsSQLException{","try{","Objectobj=getObject(columnIndex);","if(objinstanceofString||obj==null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionMinuteextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.MINUTE;","finalintgetInt()throwsException{","if(param1.isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionMinute.java|"],
"["break;","caseSQLTokenizer.LEFT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionLeft();","break;","caseSQLTokenizer.LENGTH:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.UPDATE:{","LongpageKey=newLong(page);//TODOperformance","TableStorePageprevLock=null;","TableStorePagelock=(TableStorePage)locks.get(pageKey);","TableStorePageusableLock=null;","while(lock!=null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["dayofyear=day=d-((year-1970)*365+(year/4)-(year/100)+(year/400)-477);","if(isLeapYear(year)){","if(day\<59){","day++;","isLeap=true;","dayofyear++;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["assert(sqlState!=null):\"SQLStatecodenotfound:\"+key;","returnsqlState;","publicString[][]getEntries(){","returnMESSAGES;","privatefinalString[][]MESSAGES={","{CUSTOM_MESSAGE,\"{0}\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["buf.append(\'.\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case102://ANSIyyyy.mm.dd","formatNumber(details.year,4,buf);","buf.append(\'.\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnUtils.doubleToMoney(getDoubleImpl());","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returngetMoneyImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatelonggetMoneyImpl()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["store.page=newbyte[store.sizeUsed];","raFile.position(filePos);","ByteBufferbuffer=ByteBuffer.wrap(store.page);","raFile.read(buffer);","}else{","store.page=storePage.page;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","return((Number)obj).doubleValue()!=0;","default:returnUtils.string2boolean(obj.toString());","intgetInt()throwsException{","returngetInt(getObject(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicvoidsetFloat(intparameterIndex,floatx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newFloat(x),SQLTokenizer.REAL);","publicvoidsetDouble(intparameterIndex,doublex)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newDouble(x),SQLTokenizer.DOUBLE);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["finalclassExpressionFunctionRoundextendsExpressionFunctionReturnP1Number{","finalintgetFunction(){returnSQLTokenizer.ROUND;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|"],
"["puffer=temp;","voidskip(intcount){","offset+=count;","intreadByte(){","returnpuffer[offset++];","intreadShort(){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["intvalue=0;","inttokenStart=0;","booleanwasWhiteSpace=true;","intcomment=NOT_COMMENT;","charquote=0;","StringBufferquoteBuffer=newStringBuffer();"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnnewCommandDrop(con.log,catalog,name,tokenType.value);","default:","throwcreateSyntaxError(tokenType,COMMANDS_DROP);","privateCommandalter()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_ALTER);","Stringcatalog;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["fromSource=join(cmd,tables,fromSource,Join.LEFT_JOIN);","break;","caseSQLTokenizer.RIGHT:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.INT:","returnTypes.INTEGER;","caseSQLTokenizer.BIGINT:","returnTypes.BIGINT;","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","switch(operation){","caseADD:","caseSUB:","returnMath.max(left.getScale(),right.getScale());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["classStoreNullextendsStore{","privatefinallongnextPagePos;","StoreNull(){","this(-1);","StoreNull(longnextPos){","nextPagePos=nextPos;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["this.file=file;","fileOffset=-1;","@Override","protectedIndexNodecreateIndexNode(booleanunique,chardigit){","returnnewFileIndexNode(unique,digit,file);","voidsave()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["return-1;","if(longValue\>0)","return1;","return0;","caseSQLTokenizer.DECIMAL:","returnparam1.getNumeric().getSignum();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["thrownewjava.lang.UnsupportedOperationException(\"MethodfindParameter()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodregisterOutParameter()notyetimplemented.\");","publicbooleanwasNull(){","returnwasNull;","publicStringgetString(inti)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["staticfinalintDEFAULT=220;","staticfinalintIDENTITY=221;","staticfinalintINNER=222;","staticfinalintJOIN=223;","staticfinalintON=224;","staticfinalintOUTER=225;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanabsolute(introw)throwsSQLException{","if(row==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","rowIdx=(row\>0)?","Math.min(row-1,rowList.size()):","Math.max(row+rowList.size(),-1);","returnmove();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["for(inti=0;i\>places;i--){","factor*=10;","value/=factor;","value=Math.rint(value);","if(places\>0){","value/=factor;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|"],
"["if(isNull())returnnull;","returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP);","StringgetString()throwsException{","if(isNull())returnnull;","returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP).toString();","intgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["}else{","if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleDoubleFactor[scale]*signum;","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["System.arraycopy(numeric.value,0,value,0,value.length);","this.scale=numeric.scale;","int[]getInternalValue(){","returnvalue;","voidadd(MutableNumericnum){","if(num.scale\<scale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importjava.util.ArrayList;","importsmallsql.database.language.Language;","classSSStatementimplementsStatement{","finalSSConnectioncon;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["firstNode1=firstNode2;","firstNode2=firstNode3;","removeNode();","shift++;","return;","offset3=offset2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["LongoldRowOffset=(Long)index.findRows(distinctColumns,true,null);","longnewRowOffset=rowSource.getRowPosition();","if(oldRowOffset==null){","index.addValues(newRowOffset,distinctColumns);","row++;","returntrue;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["index.addValues(lastRowOffset,orderBy);","sortedRowCount++;","scrollStatus=index.createScrollStatus(orderBy);","useSetRowPosition=false;","finalbooleanisBeforeFirst(){","returnrow==0;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIME);","staticDateTimevalueOf(java.sql.Timestampdate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIMESTAMP);","staticDateTimevalueOf(Stringdate,intdataType)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["values[i].clear();","publicvoidmoveToInsertRow()throwsSQLException{","if(isUpdatable){","isInsertRow=true;","clearRowBuffer();","}else{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["result[2]=(byte)(value\>\>8);","result[3]=(byte)(value);","returnresult;","staticStringbytes2hex(byte[]bytes){","StringBufferbuf=newStringBuffer(bytes.length\<\<1);","for(inti=0;i\<bytes.length;i++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returndatatype.getDataType();","finalintgetPrecision(){","finalintdataType=getDataType();","switch(dataType){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.VARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["staticfinalintCASE=263;","staticfinalintWHEN=264;","staticfinalintTHEN=265;","staticfinalintELSE=266;","staticfinalintEND=267;","staticfinalintSWITCH=268;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returngetIntImpl();","caseSQLTokenizer.BIGINT:","return(int)getLongImpl();","caseSQLTokenizer.REAL:","return(int)getFloatImpl();","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicstaticfinalStringDB_EXISTENT=\"SS-0030\";","publicstaticfinalStringDB_NONEXISTENT=\"SS-0031\";","publicstaticfinalStringDB_NOT_DIRECTORY=\"SS-0032\";","publicstaticfinalStringDB_NOTCONNECTED=\"SS-0033\";","publicstaticfinalStringDB_READONLY=\"SS-0034\";","publicstaticfinalStringCONNECTION_CLOSED=\"SS-0070\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["if(newValueinstanceofbyte[])","this.dataType=SQLTokenizer.VARBINARY;","else","if(newValueinstanceofBoolean)","this.dataType=SQLTokenizer.BOOLEAN;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicstaticMoneycreateFromUnscaledValue(longvalue){","Moneymoney=newMoney();","money.value=value;","returnmoney;","publicstaticMoneycreateFromUnscaledValue(intvalue){","Moneymoney=newMoney();"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["if(operation==NEGATIVE)token=SQLTokenizer.MINUS;","if(operation==ISNOTNULL)token=SQLTokenizer.IS;","Stringkeyword=SQLTokenizer.getKeyWord(token);","if(keyword==null)keyword=\"\"+(char)token;","returnkeyword;","staticintgetOperationFromToken(intvalue){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["scale=big.scale();","signum=big.signum();","finalvoidmul(intfactor){","if(factor\<0){","factor=-factor;","signum=-signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["privatebyte[]data;","privateintsize;","privateintoffset;","staticfinalprivateintpointerSize=3;//ifchangethenalsoinresize()","LongTreeList(){","data=newbyte[25];"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.MONEY:","return((Number)obj).floatValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseLESSER:returnleft.getLong()\<right.getLong();","caseLES_EQU:returnleft.getLong()\<=right.getLong();","caseUNEQUALS:returnleft.getLong()!=right.getLong();","caseBETWEEN:","long_left=left.getLong();","return_left\>=right.getLong()&&right2.getLong()\>=_left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnMoney.parseMoney(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["formatNumber(details.year%100,2,buf);","returnbuf.toString();","case104://germandd.mm.yyyy","formatNumber(details.day,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(length\<bytes.length){","byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;","returnbytes;","caseSQLTokenizer.BINARY:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["for(inti=0;i\<length;i++){","puffer[i]=(char)(value[i]&0xFF);","returnpuffer;","finalstaticprivatechar[]numericToBinarySortOrder(MutableNumericnumeric){","int[]value=numeric.getInternalValue();","intcount=1;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["FileIndex(FileIndexNoderoot,FileChannelraFile){","super(root);","this.raFile=raFile;","staticFileIndexload(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(1);","raFile.read(buffer);"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["{STXADD_FUNC_UNKNOWN,\"01000\"},","{STXADD_PARAM_INVALID_COUNT,\"01000\"},","{STXADD_JOIN_INVALID,\"01000\"},","{STXADD_FROM_PAR_CLOSE,\"01000\"},","{STXADD_KEYS_REQUIRED,\"01000\"},","{STXADD_NOT_NUMBER,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["@Override","finalMutableNumericgetNumeric(intcolIdx)throwsException{","returnstore.getNumeric(offsets[colIdx],dataTypes[colIdx]);","@Override","finalObjectgetObject(intcolIdx)throwsException{","returnstore.getObject(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();","if(length!=bytes.length){","byte[]buffer=newbyte[length];","System.arraycopy(bytes,0,buffer,0,Math.min(bytes.length,length));","returnbuffer;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["Expressionparam0=params[0];","Expressionparam1=params[1];","if(param0instanceofExpressionArithmetic&&param1instanceofExpressionArithmetic){","op=createJoinScrollIndex((ExpressionArithmetic)param0,leftEx,rightEx,operation);","if(op==0){","return0;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnholdability;","intgetSavepoint()throwsSQLException{","testClosedConnection();","returncommitPages.size();//thecallisatomic,thatitneednotbesynchronized","publicSavepointsetSavepoint()throwsSQLException{","returnnewSSSavepoint(getSavepoint(),null,transactionTime);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["beforeFirst();","finalprivatevoidaddGroupRow(){","ExpressionValue[]newRow=currentRow=newExpressionValue[expressions.size()];","for(inti=0;i\<newRow.length;i++){","Expressionexpr=expressions.get(i);","inttype=expr.getType();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["returnnewLong(param1.getLong());","caseSQLTokenizer.REAL:","returnnewFloat(param1.getFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["StoreImplgetStoreInsert(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.INSERT,-1);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-1);","StoreImplgetStoreTemp(SSConnectioncon)throwsException{","TableStorePagestorePage=newTableStorePage(con,this,LOCK_NONE,-2);","returnStoreImpl.createStore(this,storePage,SQLTokenizer.INSERT,-2);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintTRANSACTION=240;","staticfinalintISOLATION=241;","staticfinalintLEVEL=242;","staticfinalintREAD=243;","staticfinalintCOMMITTED=244;","staticfinalintUNCOMMITTED=245;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnresult;","voidafterLast(){","isAfterLast=true;","noRow();","intgetRow(){","returnrow;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["{VALUE_CANT_CONVERT,\"Impossibleconvertireunvalore{0}inunvalore{1}.\"},","{BYTEARR_INVALID_SIZE,\"Lunghezzanonvalidaperunarraydibytes:{0}.\"},","{LOB_DELETED,\"L\'\'oggettoLOBÃ¨statocancellato.\"},","{PARAM_CLASS_UNKNOWN,\"Classesconosciuta(\'\'{0}\'\')perilparametro.\"},","{PARAM_EMPTY,\"Ilparametro{0}Ã¨vuoto.\"},","{PARAM_IDX_OUT_RANGE,\"L\'\'indice{0}perilparametroÃ¨fuoridall\'\'intervalloconsentito(1\<=n\<={1}).\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returngetLongImpl();","caseSQLTokenizer.REAL:","returngetFloatImpl();","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["clear();","break;","caseMIN:","caseMAX:","break;","caseCOUNT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnbuf.toString();","case13:","case113://default+millis;ddmonyyyyhh:mm:ss:mmm(24h)","formatNumber(details.day,2,buf);","buf.append(\'\');","buf.append(SHORT_MONTHS[details.month]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["FileChannelraFile=createFile(con,database);","StorePagestorePage=newStorePage(null,-1,raFile,8);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.CREATE,8);","store.writeString(sql);","store.writeInt(0);//nomoreadditinalinformations","store.writeFinsh(null);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["nodes[i].saveRef(output);","voidsaveRef(StoreImploutput)throwsSQLException{","IndexNodeloadRef(longoffset)throwsSQLException{","thrownewError();","voidload(StoreImplinput)throwsSQLException{","intlength=input.readInt();"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnnewSSSavepoint(getSavepoint(),null,transactionTime);","publicSavepointsetSavepoint(Stringname)throwsSQLException{","returnnewSSSavepoint(getSavepoint(),name,transactionTime);","publicvoidrollback(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){","if(((SSSavepoint)savepoint).transactionTime!=transactionTime){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["precision=Math.max(precision,results.get(i).getScale());","returnprecision;","finalprivateExpressiongetResult()throwsException{","for(inti=0;i\<cases.size();i++){","if(cases.get(i).getBoolean())returnresults.get(i);","returnelseResult;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["from=newScrollable(from);","from.execute();","rs=newSSResultSet(st,this);","voidbeforeFirst()throwsException{","from.beforeFirst();","booleanisBeforeFirst()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","returnInteger.MAX_VALUE;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.MINUTE;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());","returndetails.minute;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionMinute.java|"],
"["returngetUnicodeStream(findColumn(columnName));","publicInputStreamgetBinaryStream(StringcolumnName)throwsSQLException{","returngetBinaryStream(findColumn(columnName));","publicSQLWarninggetWarnings(){","returnnull;","publicvoidclearWarnings(){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","((DateTime)value).time=Math.min(((DateTime)value).time,expr.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(type==Join.FULL_JOIN){","while(right.next()){","fullRightRowCounter++;","fullRowCount=fullRightRowCounter;","}else{","result=right.next();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnreadNumeric().floatValue();","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnFloat.parseFloat(readString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["CommandUpdatecmd=newCommandUpdate(con.log);","DataSourcestables=newDataSources();","cmd.setTables(tables);","cmd.setSource(rowSource(cmd,tables,0));","SQLTokentoken=nextToken(MISSING_SET);","while(true){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticlonggetLong(Objectobj,intdataType)throwsException{","if(obj==null)return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","return(obj==Boolean.TRUE)?1:0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["intbitCount=getBitCount();","returndataSourceIdx|currentDS.getRowPosition()\<\<bitCount;","finalvoidsetRowPosition(longrowPosition)throwsException{","intbitCount=getBitCount();","intmask=0xFFFFFFFF\>\>\>(32-bitCount);","dataSourceIdx=(int)rowPosition&mask;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","switch(operation){","caseADD:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatelonglastRowOffset;","SortedResult(RowSourcerowSource,ExpressionsorderBy){","this.rowSource=rowSource;","this.orderBy=orderBy;","finalbooleanisScrollable(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.DAYOFMONTH;","finalintgetInt()throwsException{","if(param1.isNull())return0;","DateTime.Detailsdetails=newDateTime.Details(param1.getLong());","returndetails.day;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDayOfMonth.java|"],
"["ExpressionNameexp=(ExpressionName)rsColumn;","if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;","continue;","updateValues[i]=null;","result.insertRow(updateValues);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalStringgetString()throwsException{","if(isNull())returnnull;","Stringinput=param1.getString();","returngetString(input);","staticStringgetString(Stringinput){","char[]output=newchar[4];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["thrownewjava.lang.UnsupportedOperationException(\"MethodsetBlob()notyetimplemented.\");","publicvoidsetClob(inti,Clobx)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetArray()notyetimplemented.\");","publicResultSetMetaDatagetMetaData()throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["MutableNumericgetNumeric()throwsException{","if(param1.getBoolean())","returnparam2.getNumeric();","returnparam3.getNumeric();","ObjectgetObject()throwsException{","if(param1.getBoolean())"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["checkStatement();","finalpublicintgetQueryTimeout()throwsSQLException{","checkStatement();","returnqueryTimeout;","finalpublicvoidsetQueryTimeout(intseconds)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["privateStringname;","privatebooleanidentity;","privatebooleancaseSensitive;","privatebooleannullable=true;","privateintscale;","privateintprecision;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["{CONNECTION_CLOSED,\"DieVerbindungistbereitsgeschlossen.\"},","{VIEW_INSERT,\"INSERTwirdnichtunterstÃ¼tztfÃ¼reineView.\"},","{VIEWDROP_NOT_VIEW,\"DROPVIEWkannnichtmit\'\'{0}\'\'verwendetwerden,weileskeineViewist.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{RSET_NOT_PRODUCED,\"EswurdekeinResultSeterzeugt.\"},","{RSET_READONLY,\"DasResultSetistschreibgeschÃ¼tzt.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.BITLEN;","booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|"],
"["switch(tableCommandType){","caseSQLTokenizer.CREATE:","database.createTable(con,name,columns,indexes,foreignKeys);","break;","caseSQLTokenizer.ADD:","con=newSSConnection(con);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["returnUtils.bytes2unique(Utils.unique2bytes(param1.getString()),0);","returnUtils.bytes2unique(param1.getBytes(),0);","Object[]param={SQLTokenizer.getKeyWord(dataType)};","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV,param);","finalprivateStringconvertToString()throwsException{","if(param2!=null){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","value=newDateTime(expr.getLong(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getFloat()==right.getFloat();","caseGREATER:returnleft.getFloat()\>right.getFloat();","caseGRE_EQU:returnleft.getFloat()\>=right.getFloat();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidnoRow(){","rowSource.noRow();","rowIdx=-1;","voidexecute()throwsException{","rowSource.execute();","rowList.clear();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["privateCommandSelectcmd;","privatebooleanwasNull;","SSStatementst;","privatebooleanisUpdatable;","privatebooleanisInsertRow;","privateExpressionValue[]values;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.MONEY:","return((Number)obj).longValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["StringgetString()throwsException{","if(param1.getBoolean())","returnparam2.getString();","returnparam3.getString();","finalintgetDataType(){","returnExpressionArithmetic.getDataType(param2,param3);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["publicvoidsetRef(inti,Refx)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetBlob()notyetimplemented.\");","publicvoidsetClob(inti,Clobx)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetArray()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["longgetLong(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["@Override","finalbooleaninit(SSConnectioncon)throwsException{","if(super.init(con)){","Columnscolumns=table.columns;","offsets=newint[columns.size()];","dataTypes=newint[columns.size()];"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["RandomAccessFileraFile=newRandomAccessFile(file,readonly?\"r\":\"rw\");","FileChannelchannel=raFile.getChannel();","if(!readonly){","try{","FileLocklock=channel.tryLock();","if(lock==null){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["byte[]getBytes()throwsjava.lang.Exception{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);","booleanisInList()throwsException{","if(left.isNull())returnfalse;","try{","for(inti=0;i\<inList.length;i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["staticfinalintOR=500;","staticfinalintAND=501;","staticfinalintIS=502;","staticfinalintNOT=503;","staticfinalintNULL=504;","staticfinalintTRUE=505;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["doublegetDouble(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicbooleansupportsCatalogsInTableDefinitions(){","returntrue;","publicbooleansupportsCatalogsInIndexDefinitions(){","returntrue;","publicbooleansupportsCatalogsInPrivilegeDefinitions(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(Double.isInfinite(value)||Double.isNaN(value))","returnnull;","returnnewMutableNumeric(value);","finalObjectgetObject()throwsException{","if(isNull())returnnull;","returnnewDouble(getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["publicStringgetProcedureTerm(){","return\"procedure\";","publicStringgetCatalogTerm(){","return\"database\";","publicbooleanisCatalogAtStart(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnfalse;","publicbooleanusesLocalFilePerTable(){","returnfalse;","publicbooleansupportsMixedCaseIdentifiers(){","returntrue;","publicbooleanstoresUpperCaseIdentifiers(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalbooleanrowDeleted(){","returncurrentDS.rowDeleted();","finalvoidnullRow(){","currentDS.nullRow();","row=0;","finalvoidnoRow(){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnfirstPage;","ListgetInserts(SSConnectioncon){","synchronized(locks){","ArrayListinserts=newArrayList();","if(con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","for(inti=0;i\<locksInsert.size();i++){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["value[i]=(int)v;","carryover=v\>\>32;","if(carryover\>0){","resizeValue((int)carryover);","voiddiv(MutableNumericnum){","intnewScale=Math.max(scale+5,num.scale+4);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con!=con)returnnull;","if(serializeConnections.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["return((Number)obj).longValue()*10000;","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnUtils.doubleToMoney(((Number)obj).doubleValue());","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreateFromException(Throwablee){","if(einstanceofSQLException){","return(SQLException)e;","else{","Stringmessage=stripMsg(e);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["{FILE_TOOOLD,\"Laversione({0})delfile\'\'{1}\'\'Ã¨troppovecchiaperquestoruntime.\"},","{FILE_CANT_DELETE,\"File\'\'(0)\'\'nonpossonoessereeliminati.\"},","{ROW_0_ABSOLUTE,\"Ilnumerodiriga0nonÃ¨validoperilmetodo\'\'absolute()\'\'.\"},","{ROW_NOCURRENT,\"Nessunarigacorrente.\"},","{ROWS_WRONG_MAX,\"Numeromassimodirighenonvalido({0}).\"},","{ROW_LOCKED,\"LarigaÃ¨bloccatadaun\'\'altraconnessione.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["publicvoidsetLong(intparameterIndex,longx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newLong(x),SQLTokenizer.BIGINT);","publicvoidsetFloat(intparameterIndex,floatx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,newFloat(x),SQLTokenizer.REAL);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["this.operation=operation;","Expression[]params;","if(inList!=null){","this.inList=inList.toArray();","params=newExpression[this.inList.length+1];","params[0]=left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["inti=(int)(e.key%newCapacity);","if(newTable[i]==null){","newTable[i]=e;","}else{","Entryentry=newTable[i];","while(entry.next!=null)entry=entry.next;"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["if(factor==1000000000){","mul(factor);","factor=1;","mul(factor);","}else{","for(;newScale\<scale;scale--){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(!dir.isDirectory()||","!newFile(dir,Utils.MASTER_FILENAME).exists())","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefiles[]=dir.listFiles();","if(files!=null)","for(inti=0;i\<files.length;i++){"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["caseSQLTokenizer.SELECT:","ViewResultviewResult=newViewResult(con,select());","tables.add(viewResult);","returnviewResult;","Stringcatalog=null;","Stringname=getIdentifier(token);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalclassExpressionFunctionTruncateextendsExpressionFunctionReturnP1Number{","finalintgetFunction(){returnSQLTokenizer.TRUNCATE;}","booleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finaldoublegetDouble()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["switch(token.value){","caseSQLTokenizer.D://dateescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.DATE),SQLTokenizer.DATE);","break;","caseSQLTokenizer.T://timeescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIME),SQLTokenizer.TIME);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["locksInsert.remove(i--);","}else{","locksInsert.set(i,lock.nextLock);","}else{","prev.nextLock=lock.nextLock;","return;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["addKeyWord(\"WHEN\",WHEN);","addKeyWord(\"THEN\",THEN);","addKeyWord(\"ELSE\",ELSE);","addKeyWord(\"END\",END);","addKeyWord(\"SWITCH\",SWITCH);","staticfinalintBIT=300;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnfalse;","publicStringgetDatabaseProductName(){","return\"SmallSQLDatabase\";","publicStringgetDatabaseProductVersion(){","returngetDriverVersion();","publicStringgetDriverName(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["Expressionsrc=updateValues[i];","if(src==null)src=tableColumn.getDefaultValue(con);","store.writeExpression(src,tableColumn);","store.writeFinsh(con);","insertStorePages.add(store.getLink());","privateStorestore=Store.NOROW;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnreadString().getBytes();","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(size2\>=data.length){","resize(size2);","data[size2]=value1;","data[size2+1]=value2;","size++;","finalvoidclear(){"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getIndexInfo(SSConnectioncon,Stringtable,booleanunique)throwsSQLException{","Listrows=newArrayList();","Stringstables=getTables(table);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.REAL:","caseSQLTokenizer.MONEY:","return((Number)obj).floatValue();","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["while(length\>0&&value.charAt(length-1)==\'\')length--;","char[]puffer=newchar[length];","for(inti=0;i\<length;i++){","puffer[i]=Character.toLowerCase(Character.toUpperCase(value.charAt(i)));","returnpuffer;","finalstaticprivatechar[]bytesToBinarySortOrder(byte[]value){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["inti=0;","for(intp=0;p\<cases.size();p++){","params[i++]=cases.get(p);","params[i++]=results.get(p);","if(i\<params.length)","params[i]=elseResult;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["StringgetTableName(){","returnnull;","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);","intgetScale(){","returngetScale(getDataType());"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["booleanasc=(expressions.get(0).getAlias()!=SQLTokenizer.DESC_STR);","nodeStack.push(newIndexNodeScrollStatus(rootPage,asc,true,0));","finallonggetRowOffset(booleanscroll){","if(longList!=null){","longrowOffset=scroll?","longList.getNext(longListEnum):"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["staticfinalintNUMBERVALUE=5;","static{","keywords.put(newInteger(VALUE),\"\<expression\>\");","keywords.put(newInteger(IDENTIFIER),\"\<identifier\>\");","keywords.put(newInteger(NUMBERVALUE),\"\<number\>\");","staticfinalintPERCENT=\'%\';//37"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else{","throwSmallSQLException.create(Language.COL_MISSING,sqlColName);","if(columnExpressions.size()!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(table==null||tableTimestamp!=table.getTimestamp())compile(con);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","byte[]bytes=expr.getBytes();","if(bytes.length!=16)throwSmallSQLException.create(Language.BYTEARR_INVALID_SIZE,String.valueOf(bytes.length));","writeBytes(bytes);","default:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionHourextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.HOUR;","finalintgetInt()throwsException{","if(param1.isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionHour.java|"],
"["SQLTokenizer.NUMERIC,","SQLTokenizer.MONEY,","SQLTokenizer.SMALLMONEY,","SQLTokenizer.BIGINT,","SQLTokenizer.INT,","SQLTokenizer.SMALLINT,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["row[0]=getName();//PKTABLE_CAT","row[2]=foreignKey.pkTable;//PKTABLE_NAME","row[3]=columnsPk.get(c);//PKCOLUMN_NAME","row[4]=getName();//FKTABLE_CAT","row[6]=foreignKey.fkTable;//FKTABLE_NAME","row[7]=columnsFk.get(c);//FKCOLUMN_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.SQLException;","publicclassIdentityextendsNumberimplementsMutable{","finalprivatelongfilePos;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["TableStorePagepage;","StoreImplgetStore(Tabletable,SSConnectioncon,intlock)throwsException{","TableStorePagepage=this.page;","if(page==null)","returntable.getStore(con,filePos,lock);","while(page.nextLock!=null)page=page.nextLock;"]": ["|project://smallsql/src/smallsql/database/StorePageLink.java|"],
"["returngetColumnExpression(column).isAutoIncrement();","publicbooleanisCaseSensitive(intcolumn)throwsSQLException{","returngetColumnExpression(column).isCaseSensitive();","publicbooleanisSearchable(intcolumn)throwsSQLException{","inttype=getColumnExpression(column).getType();","returntype==Expression.NAME||type==Expression.FUNCTION;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["importjava.io.FileNotFoundException;","importjava.io.RandomAccessFile;","importjava.nio.channels.FileChannel;","importjava.nio.channels.FileLock;","importjava.sql.SQLException;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"PI\",PI);","addKeyWord(\"POWER\",POWER);","addKeyWord(\"RADIANS\",RADIANS);","addKeyWord(\"RAND\",RAND);","addKeyWord(\"ROUND\",ROUND);","addKeyWord(\"SIGN\",SIGN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["importjava.io.*;","importsmallsql.database.language.Language;","publicclassCommandCreateDatabaseextendsCommand{","CommandCreateDatabase(Loggerlog,Stringname){","super(log);","this.type=SQLTokenizer.DATABASE;"]": ["|project://smallsql/src/smallsql/database/CommandCreateDatabase.java|"],
"["FileIndexNode(booleanunique,chardigit,FileChannelfile){","super(unique,digit);","this.file=file;","fileOffset=-1;","@Override","protectedIndexNodecreateIndexNode(booleanunique,chardigit){"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["buffer.write(bytes,start+length,bytes.length-start-length);","returnbuffer.toByteArray();","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intstart=Math.min(Math.max(0,param2.getInt()-1),str.length());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionInsert.java|"],
"["returnnodes[pos];","finalvoidremoveNode(chardigit){","intpos=findNodePos(digit);","if(pos!=-1){","intlength=nodes.length-1;","IndexNode[]temp=newIndexNode[length];"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{RSET_READONLY,\"DasResultSetistschreibgeschÃ¼tzt.\"},","{RSET_FWDONLY,\"DasResultSetistforwardonly.\"},","{RSET_CLOSED,\"DasResultSetistgeschlossen.\"},","{RSET_NOT_INSERT_ROW,\"DerCursorzeigtaktuellnichtaufdieEinfÃ¼geposition(insertrow).\"},","{RSET_ON_INSERT_ROW,\"DerCursorzeigtaktuellaufdieEinfÃ¼geposition(insertrow).\"},","{ROWSOURCE_READONLY,\"DieRowsourceistschreibgeschÃ¼tzt.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["}else{","for(intm=11;m\>=0;m--){","if(MONTH_DAYS[m]\<=day){","month=m;","day=day-MONTH_DAYS[m]+1;","break;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return;","raFile=null;","try{","currentRaFile.close();","}catch(Throwableex){","con.rollbackFile(currentRaFile);"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["caseSQLTokenizer.DOUBLE:","return(float)readDouble();","caseSQLTokenizer.MONEY:","returnreadLong()/(float)10000.0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/(float)10000.0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["abstractvoidbeforeFirst()throwsException;","booleanisBeforeFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractbooleanfirst()throwsException;"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["returnwasNull;","publicStringgetString(inti)throwsSQLException{","try{","Stringobj=getValue(i).getString();","wasNull=obj==null;","returnobj;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["finalprivatebooleanmoveToValidRow()throwsException{","while(filePos\>=0){","if(moveToRow())","returntrue;","setNextFilePos();","row=0;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["token=nextToken(MISSING_NOT_NULL);","if(token.value==SQLTokenizer.NOT){","nextToken(MISSING_NULL);","operation++;","leftExpr=newExpressionArithmetic(leftExpr,operation);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DISTINCT:","selCmd.setDistinct(true);","break;","default:","previousToken();","breakSwitch;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["inthour;","intminute;","intsecond;","intmillis;","Details(longtime){","intt=(int)(time%86400000);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["packagesmallsql.database;","importjava.sql.*;","classSSSavepointimplementsSavepoint{","privatefinalintid;","privatefinalStringname;","longtransactionTime;"]": ["|project://smallsql/src/smallsql/database/SSSavepoint.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blob\");","publicvoidupdateBlob(StringcolumnName,Blobx)throwsSQLException{","updateBlob(findColumn(columnName),x);","publicvoidupdateClob(intcolumnIndex,Clobx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicvoidupdateArray(StringcolumnName,Arrayx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticlongparse(finalStringdatetime)throwsSQLException{","try{","finalintlength=datetime.length();","finalintyear;","finalintmonth;","finalintday;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["output.writeLong(((Long)value).longValue());","}else","if(valueinstanceofLongTreeList){","output.writeByte(2);","((LongTreeList)value).save(output);","}else"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["default:","thrownewError();","longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());","StringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["returnfalse;","publicbooleansupportsCatalogsInDataManipulation(){","returntrue;","publicbooleansupportsCatalogsInProcedureCalls(){","returntrue;","publicbooleansupportsCatalogsInTableDefinitions(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["for(intp=0;p\<params.length;p++){","params[p].optimize();","publicbooleanequals(Objectexpr){","if(!(exprinstanceofExpression))returnfalse;","if(((Expression)expr).type==type){","Expression[]p1=((Expression)expr).params;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["switch(token.value){","caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:","caseSQLTokenizer.FOREIGN:","IndexDescriptionindex=index(cmdCreate,token.value,tableName,constraintName,null);","if(token.value==SQLTokenizer.FOREIGN){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["init();","privatevoidinit(){","this.isInit=true;","PrintWriterpw=DriverManager.getLogWriter();","if(pw!=null)this.printStackTrace(pw);","staticvoidsetLanguage(ObjectlocaleObj)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getDate(expr.getLong());","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionValue))returnfalse;","Objectv=((ExpressionValue)expr).value;","if(v==value)returntrue;","if(value==null)returnfalse;","returnvalue.equals(v);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["rowSource.beforeFirst();","row=0;","finalbooleanfirst()throwsException{","isCurrentRow=rowSource.first();","while(isCurrentRow&&!isValidRow()){","isCurrentRow=rowSource.next();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["Columncolumn=data[i];","if(name.equalsIgnoreCase(column.getName())){","returncolumn;","returnnull;","finalvoidadd(Columncolumn){","if(column==null){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","classStoreNullextendsStore{","privatefinallongnextPagePos;","StoreNull(){","this(-1);"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["try{","MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["lock=newTableStorePage(con,this,LOCK_WRITE,readlock.fileOffset);","if(prevLock!=null){","prevLock.nextLock=lock;","}else{","locks.put(pageKey,lock);","con.add(lock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseGRE_EQU:returncomp\>=0;","caseLESSER:returncomp\<0;","caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=Utils.compareBytes(leftBytes,right2.getBytes());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["expr=newExpressionName(Expression.SUM);","expr.setParams(params);","Expressionexpr2=newExpressionName(Expression.COUNT);","expr2.setParams(params);","expr=newExpressionArithmetic(expr,expr2,ExpressionArithmetic.DIV);","returnexpr;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intnextOffset1,nextOffset2;","nextOffset1=offset;","offset+=2;","if(listEnum.stack\<3)","offset+=pointerSize;","do{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","return21;","default:","returnprecision;","staticintgetDataTypePrecision(intdataType,intdefaultValue){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["readonly=con.readonly;","database=con.database;","metadata=con.metadata;","log=con.log;","DatabasegetDatabase(booleanreturnNull)throwsSQLException{","testClosedConnection();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con!=con)returnnull;","if(serializeConnections.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnparam2.getLong()+param1.getLong()*86400000;","caseSQLTokenizer.SQL_TSI_WEEK:{","returnparam2.getLong()+param1.getLong()*604800000;","}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.month+=param1.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["msgBuf.append(\",\");","else","if(i==validValues.length-2)","msgBuf.append(\"or\");","Stringmessage=getErrorString(","token,Language.CUSTOM_MESSAGE,msgBuf);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["((long)(page[3]&0xFF)\<\<32)|","((long)(page[4]&0xFF)\<\<24)|","((page[5]&0xFF)\<\<16)|","((page[6]&0xFF)\<\<8)|","((page[7]&0xFF));","this.raFile=raFile;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["for(intp=1;p\<params.length;p++){","setParamAt(convertExpressionIfNeeded(params[p],left),p);","privatestaticStringgetKeywordFromOperation(intoperation){","inttoken=0;","for(inti=1;i\<1000;i++){","if(getOperationFromToken(i)==operation){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnpage.getValue();","else","page=(IndexNode)page.getValue();","thrownewError();","finalObjectfindRows(Expression[]expressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returngetFunctions(SQLTokenizer.ASCII,SQLTokenizer.UCASE);","publicStringgetSystemFunctions(){","returngetFunctions(SQLTokenizer.IFNULL,SQLTokenizer.IIF);","publicStringgetTimeDateFunctions(){","returngetFunctions(SQLTokenizer.CURDATE,SQLTokenizer.YEAR);","publicStringgetSearchStringEscape(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["switch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){","caseSQLTokenizer.INT:","intintValue=param1.getInt();","if(intValue\<0)","return-1;","if(intValue\>0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["System.arraycopy(data,0,dataNew,0,size);","data=dataNew;","publicString[]toArray(){","String[]array=newString[size];","System.arraycopy(data,0,array,0,size);","returnarray;"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["verifyFreePufferSize(2*value.length);","for(inti=0;i\<value.length;i++){","charc=value[i];","puffer[offset++]=(byte)(c\>\>8);","puffer[offset++]=(byte)(c);","voidwriteBytes(byte[]value,intoff,intlength){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returnvalue;","publicstaticlongparseMoney(Stringstr){","returnUtils.doubleToMoney(Double.parseDouble(str));","privatebyte[]toByteArray(){","byte[]bytes=newbyte[8];","intoffset=0;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["writeNumeric(numeric);","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","writeString(expr.getString(),column.getDisplaySize(),false);","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return;","shift-=16;","octet=(int)(value\>\>shift)&0xFFFF;","firstNode=false;","if(shift!=0)offset+=pointerSize;","shift-=16;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["writeInt((int)(date/86400000));","longreadDate(){","returnreadInt()*86400000L;","voidwriteSmallDateTime(longdatetime){","writeInt((int)(datetime/60000));","longreadSmallDateTime(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["store.writeFinsh(con);","insertStorePages.add(store.getLink());","privateStorestore=Store.NOROW;","privatelongafterLastValidFilePos;","finalprivatebooleanmoveToRow()throwsException{","if(filePos\>=0x4000000000000000L){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(view!=null&&!(viewinstanceofView))","throwSmallSQLException.create(Language.VIEWDROP_NOT_VIEW,viewName);","View.drop(this,viewName);","privatevoidcheckForeignKeys(SSConnectioncon,ForeignKeysforeignKeys)throwsSQLException{","for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["while(true){","SQLTokentoken=nextToken();","if(token==null)returnfromSource;","switch(token.value){","caseSQLTokenizer.ON:","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnfalse;","publicbooleanstoresMixedCaseQuotedIdentifiers(){","returntrue;","publicStringgetIdentifierQuoteString(){","return\"\\\"\";","publicStringgetSQLKeywords(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","return1;//1and0","caseSQLTokenizer.BOOLEAN:","return5;//trueandfalse","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["privateExpressionsinternalExpressions=newExpressions();//alistofAggregateFunctionandColNamesfromSELECT,GROUPBYandHAVING","GroupResult(CommandSelectcmd,RowSourcefrom,ExpressionsgroupBy,Expressionhaving,ExpressionsorderBy)throwsSQLException{","this.from=from;","this.groupBy=groupBy;","if(groupBy!=null){","for(inti=0;i\<groupBy.size();i++){"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["finalvoidclearValue(){","value=null;","finalObjectgetValue(){","returnvalue;","finalIndexNode[]getChildNodes(){","returnnodes;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["privatestaticDatabasegetDatabase(SSConnectioncon,Stringname)throwsSQLException{","returnname==null?","con.getDatabase(false):","getDatabase(name,con,false);","privateDatabase(Stringname,FilecanonicalFile,booleanreadonly)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["previousToken();","returnselCmd;","privateCommanddelete()throwsSQLException{","CommandDeletecmd=newCommandDelete(con.log);","nextToken(MISSING_FROM);","from(cmd);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["bytes[i]=(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));","returnbytes;","}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID,String.valueOf(offset));/*,offset*/","privatestaticinthexDigit2int(chardigit){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"EXP\",EXP);","addKeyWord(\"FLOOR\",FLOOR);","addKeyWord(\"LOG\",LOG);","addKeyWord(\"LOG10\",LOG10);","addKeyWord(\"MOD\",MOD);","addKeyWord(\"PI\",PI);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["return36;","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:","returnInteger.MAX_VALUE;","if(defaultValue==-1)"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["Expressionexpr=getValue(i);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["publicstaticfinalStringFK_NOT_TABLE=\"SS-0220\";","publicstaticfinalStringPK_ONLYONE=\"SS-0221\";","publicstaticfinalStringKEY_DUPLICATE=\"SS-0222\";","publicstaticfinalStringMONTH_TOOLARGE=\"SS-0251\";","publicstaticfinalStringDAYS_TOOLARGE=\"SS-0252\";","publicstaticfinalStringHOURS_TOOLARGE=\"SS-0253\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnbuf.toString();","case103://britshdd/mm/yyyy","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);","if(equals(node.getRemainderValue(),key,i)){","returnnode;","returnnode;","finalprivateIndexNodeadd(IndexNodenode,longrowOffset,longkey,booleanisLastValue,intdigitCount)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionLogextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.LOG;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.log(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLog.java|"],
"["switch(expr.getDataType()){","caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.BINARY:","switch(other.getDataType()){","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(token==null)returnselCmd;//SELECTwithoutFROM","booleanas=false;","if(token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);","as=true;","if(as||(!isKeyword(token))){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!isInit)return;","super.printStackTrace(pw);","staticSQLExceptioncreate(StringmessageCode){","assert(messageCode!=null):\"Fillparameters\";","Stringmessage=translateMsg(messageCode,null);","StringsqlState=language.getSqlState(messageCode);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["intlength=daten.length;","if(lengthColumn\<length){","throwSmallSQLException.create(Language.VALUE_STR_TOOLARGE);","if(varchar)lengthColumn=length;","intnewSize=offset+2+2*lengthColumn;","if(newSize\>page.length)resizePage(newSize);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalbooleannext()throwsException{","while(true){","booleanisNext=rowSource.next();","if(!isNext)returnfalse;","LongoldRowOffset=(Long)index.findRows(distinctColumns,true,null);","longnewRowOffset=rowSource.getRowPosition();"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["returncurrentDS.getFloat(colIdx);","finaldoublegetDouble(intcolIdx)throwsException{","returncurrentDS.getDouble(colIdx);","finallonggetMoney(intcolIdx)throwsException{","returncurrentDS.getMoney(colIdx);","finalMutableNumericgetNumeric(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(oldRowOffset.longValue()==newRowOffset){","row++;","returntrue;","finalvoidafterLast()throwsException{","rowSource.afterLast();","row=0;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["returncolumnExpressions.get(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getObject();","StringgetString(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["store.setCurrentOffsetInPage(offsetInPage+size);","raFile.close();","commandSelect=(CommandSelect)newSQLParser().parse(con,sql);","createColumns(con);","View(Databasedatabase,SSConnectioncon,Stringname,Stringsql)throwsException{","super(name,newColumns());"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["byte[]obj=getValue(columnIndex).getBytes();","wasNull=obj==null;","returnobj;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["case100://monddyyyyhh:miAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\'\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(args.length\>0){","con.setCatalog(args[0]);","System.out.println(\"\\tVersion:\"+con.getMetaData().getDatabaseProductVersion());","System.out.println(\"\\tCurrentdatabase:\"+con.getCatalog());","System.out.println();","System.out.println(\"\\tUsetheUSEcommandtochangethedatabasecontext.\");"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["returngetInt()!=0;","intgetInt()throwsException{","if(isNull())return0;","switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","return(int)(param2.getLong()-param1.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["lock.lockType=pageOperation==SQLTokenizer.UPDATE?LOCK_WRITE:LOCK_READ;","if(prevLock!=null){","prevLock.nextLock=lock.nextLock;","}else{","locks.put(pageKey,lock);","con.add(lock);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["return0;","if(operation==ExpressionArithmetic.EQUALS){","Expressionparam0=params[0];","Expressionparam1=params[1];","Expressionscolumns0=Utils.getExpressionNameFromTree(param0);","Expressionscolumns1=Utils.getExpressionNameFromTree(param1);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(day\<59){","day++;","isLeap=true;","dayofyear++;","if(day\<0){","year--;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["page=add(page,rowOffset,bytesToBinarySortOrder(expr.getBytes()),isLastValues);","break;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","page=add(page,rowOffset,expr.getBoolean()?2:1,isLastValues,1);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["tableViews.put(tableName,tableView);","returntableView;","staticvoiddropTable(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropTable(con,tableName);","voiddropTable(SSConnectioncon,StringtableName)throwsException{","synchronized(tableViews){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["return(long)getDouble();","finalfloatgetFloat()throwsException{","return(float)getDouble();","longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());","finalMutableNumericgetNumeric()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.min(((MutableDouble)value).value,expr.getDouble());","break;","caseSQLTokenizer.CHAR:","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["StringstrMillis=datetime.substring(idx1).trim();","switch(strMillis.length()){","case1:","millis=Integer.parseInt(strMillis)*100;","break;","case2:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLength();","break;","caseSQLTokenizer.LOCATE:","invalidParamCount=(paramCount!=2)&&(paramCount!=3);","expr=newExpressionFunctionLocate();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.indexes=newIndexes;","}else{","this.indexes=existIndexes;","existIndexes.add(newIndexes);","write(con);","for(inti=0;i\<foreignKeys.size();i++){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["this.rowSource=rowSource;","finalbooleanisScrollable(){","returntrue;","voidbeforeFirst()throwsException{","rowIdx=-1;","rowSource.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["idx2=datetime.indexOf(\':\',idx1);","if(idx2\>0){","hour=Integer.parseInt(datetime.substring(idx1,idx2).trim());","idx1=idx2+1;","idx2=datetime.indexOf(\':\',idx1);","minute=Integer.parseInt(datetime.substring(idx1,idx2).trim());"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticTimegetTime(longtime){","returnnewTime(DateTime.addDateTimeOffset(time));","staticDategetDate(longtime){","returnnewDate(DateTime.addDateTimeOffset(time));","publicObjectgetImmutableObject(){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["token=nextToken(COMMANDS_CREATE_UNIQUE);","}while(token.value==SQLTokenizer.INDEX);","returncreateIndex(true);","caseSQLTokenizer.NONCLUSTERED:","caseSQLTokenizer.CLUSTERED:","continue;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{VALUE_NULL_INVALID,\"01000\"},","{VALUE_CANT_CONVERT,\"01000\"},","{BYTEARR_INVALID_SIZE,\"01000\"},","{LOB_DELETED,\"01000\"},","{PARAM_CLASS_UNKNOWN,\"01000\"},","{PARAM_EMPTY,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","MutableNumericobj=getNumeric();","return(obj==null)?0:obj.getScale();","default:","returngetScale(dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["break;","caseSQLTokenizer.TS://timestampescapesequence","expr=newExpressionValue(DateTime.valueOf(para.getName(sql),SQLTokenizer.TIMESTAMP),SQLTokenizer.TIMESTAMP);","break;","caseSQLTokenizer.FN://functionescapesequence","nextToken(MISSING_PARENTHESIS_L);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","returnbuf.toString();","case111://Japanyy/mm/dd","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.REAL:","doublefValue=((Float)para1).floatValue();","return(fValue\<0)?newFloat(-fValue):para1;","caseSQLTokenizer.BIGINT:","longlValue=((Number)para1).longValue();","return(lValue\<0)?newLong(-lValue):para1;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["switch(idx){","case0:","param1=param;","break;","case1:","param2=param;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["firstNode=false;","}else{","return;","finalprivateintgetPointer(){","intvalue=0;","for(inti=0;i\<pointerSize;i++){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnfalse;","publicbooleansupportsNamedParameters(){","returntrue;","publicbooleansupportsMultipleOpenResults(){","returntrue;","publicbooleansupportsGetGeneratedKeys(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["byte[]complement;","intoffset;","intv=0;","while(v\<value.length&&value[v]==0)v++;","if(v==value.length)returnEMPTY_BYTES;","if(value[v]\<0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalclassExpressionFunctionAsciiextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.ASCII;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param1.getString().length()==0;","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|"],
"["buf.append(\':\');","formatNumber(details.second,2,buf);","returnbuf.toString();","case21:","case121://ODBCkannonish+millis;yyyy-mm-ddhh:mi:ss.mmm(24h)","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","Stringdef=column.getDefaultDefinition();","writeBoolean(def==null);","if(def!=null)","writeString(column.getDefaultDefinition());","ColumnreadColumn(inttableFormatVersion)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintNEGATIVE=101;//-","privatestaticfinalint[]DatatypeRange={","SQLTokenizer.TIMESTAMP,","SQLTokenizer.SMALLDATETIME,","SQLTokenizer.DATE,","SQLTokenizer.TIME,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["booleanresult;","while((result=next())&&row-1\>rowIdx){/*scrollforward*/}","returnresult;","booleanrelative(introws)throwsException{","intnewRow=rows+rowIdx+1;","if(newRow\<=0){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return(float)getDoubleImpl();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["doublevalue=param1.getDouble();","longfactor=1;","if(places\>0){","for(inti=0;i\<places;i++){","factor*=10;","value*=factor;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["IndexDescriptionindex=index(cmdCreate,token.value,cmdCreate.name,null,colName);","cmdCreate.addIndex(index);","break;","default:","throwcreateSyntaxError(token,MISSING_OPTIONS_DATATYPE);","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TIMESTAMP:","writeTimestamp(expr.getLong());","break;","caseSQLTokenizer.TIME:","writeTime(expr.getLong());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(maxRows\>=0){","if(maxRows==0){","from.beforeFirst();","returnfalse;","returnfrom.absolute(maxRows);","returnfrom.last();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["packagesmallsql.database;","finalclassMutableFloatextendsNumberimplementsMutable{","floatvalue;","MutableFloat(floatvalue){","this.value=value;","publicdoubledoubleValue(){"]": ["|project://smallsql/src/smallsql/database/MutableFloat.java|"],
"["staticfinalintALL=261;","staticfinalintDISTINCT=262;","staticfinalintCASE=263;","staticfinalintWHEN=264;","staticfinalintTHEN=265;","staticfinalintELSE=266;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanisNull()throwsException{","returnparam1.isNull();","finalbyte[]getBytes()throwsException{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);","finalStringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["IndexNodeloadRef(longoffset)throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","MemoryStreaminput=newMemoryStream();","FileIndexNodenode=newFileIndexNode(getUnique(),(char)input.readShort(),file);","node.fileOffset=offset;"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["columnExpressions.add(column);","voidaddParameter(ExpressionValueparam){","params.add(param);","voidverifyParams()throwsSQLException{","for(intp=0;p\<params.size();p++){","if(((ExpressionValue)params.get(p)).isEmpty())"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["node=node.getChildNode(digit);","if(node==null)returnnull;","if(nodeList!=null)nodeList.add(node);","if(++i==length){","returnnode;","if(equals(node.getRemainderValue(),key,i)){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnLong.parseLong(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{COL_INVALID_SIZE,\"UngÃ¼ltigeSpaltengrÃ¶ÃŸe{0}fÃ¼rSpalte\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"DerSpaltenprefix\'\'{0}\'\'passtzukeinemTabellennamenoderAliasnamenindieserAbfrage.\"},","{COL_READONLY,\"DieSpalte{0}istschreibgeschÃ¼tzt.\"},","{COL_INVALID_NAME,\"UngÃ¼ltigerSpaltenname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"SpaltenindexauÃŸerhalbdesGÃ¼ltigkeitsbereiches:{0}.\"},","{COL_AMBIGUOUS,\"DieSpalte\'\'{0}\'\'istmehrdeutig.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["CommandInsertcmd=newCommandInsert(con.log,nextIdentifier());","intparthesisCount=0;","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","if(token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);","if(token.value==SQLTokenizer.SELECT){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["chars[31]=digits[(daten[offset+13])&0x0F];","chars[32]=digits[(daten[offset+14]\>\>4)&0x0F];","chars[33]=digits[(daten[offset+14])&0x0F];","chars[34]=digits[(daten[offset+15]\>\>4)&0x0F];","chars[35]=digits[(daten[offset+15])&0x0F];","returnnewString(chars);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["packagesmallsql.database;","finalclassMutableLongextendsNumberimplementsMutable{","longvalue;","MutableLong(longvalue){","this.value=value;","publicdoubledoubleValue(){"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|"],
"["if(version\>INDEX_VERSION){","Object[]params={newInteger(version),file.getName()};","throwSmallSQLException.create(Language.FILE_TOONEW,params);","}catch(Throwablee){","if(raFile!=null)","try{"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","con.add(lock);","returnlock;","caseSQLTokenizer.ALTER:{","if(locks.size()\>0||locksInsert.size()\>0){","returnnull;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["switch(c){","case\'B\':","case\'F\':","case\'P\':","case\'V\':","c=\'1\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["((MutableFloat)value).value=Math.min(((MutableFloat)value).value,expr.getFloat());","break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.min(((MutableDouble)value).value,expr.getDouble());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["for(inti=commitPages.size()-1;i\>=0;i--){","TransactionSteppage=(TransactionStep)commitPages.get(i);","if(page.raFile==raFile){","page.rollback();","page.freeLock();","voidrollback(intsavepoint)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["rowIdx=-1;","rowSource.beforeFirst();","booleanisBeforeFirst(){","returnrowIdx==-1||rowList.size()==0;","booleanisFirst(){","returnrowIdx==0&&rowList.size()\>0;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getFloat();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["packagesmallsql.database;","classStrings{","privateintsize;","privateString[]data;","Strings(){","data=newString[16];"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnreadDouble()!=0;","caseSQLTokenizer.MONEY:","returnreadLong()!=0;","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnTypes.FLOAT;","caseSQLTokenizer.DOUBLE:","returnTypes.DOUBLE;","caseSQLTokenizer.DATE:","returnTypes.DATE;","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{COL_INVALID_NAME,\"01000\"},","{COL_IDX_OUT_RANGE,\"01000\"},","{COL_AMBIGUOUS,\"01000\"},","{GROUP_AGGR_INVALID,\"01000\"},","{GROUP_AGGR_NOTPART,\"01000\"},","{ORDERBY_INTERNAL,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","page=find(page,numericToBinarySortOrder(expr.getNumeric()),nodeList);","break;","default:","thrownewError(String.valueOf(expr.getDataType()));"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnsize;","finalColumnget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalColumnget(Stringname){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);","returndata[idx];","finalvoidadd(Stringdescr){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=descr;"]": ["|project://smallsql/src/smallsql/database/Strings.java|"],
"["switch(getColumnType(column)){","caseTypes.TINYINT:","caseTypes.SMALLINT:","caseTypes.INTEGER:","return\"java.lang.Integer\";","caseTypes.BIT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","value=newMutableDouble(expr.getDouble());","break;","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returntable;","finalintgetColumnIndex(){","returncolIdx;","finalColumngetColumn(){","returncolumn;","finalpublicStringtoString(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["break;","default:","thrownewError(String.valueOf(expr.getDataType()));","finalvoidremoveValue(longrowOffset,Expressionsexpressions)throwsException{","ArrayListnodeList=newArrayList();","Objectobj=findRows(expressions,true,nodeList);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["publicstaticfinalStringFILE_CANT_DELETE=\"SS-0492\";","publicstaticfinalStringROW_0_ABSOLUTE=\"SS-0520\";","publicstaticfinalStringROW_NOCURRENT=\"SS-0521\";","publicstaticfinalStringROWS_WRONG_MAX=\"SS-0522\";","publicstaticfinalStringROW_LOCKED=\"SS-0523\";","publicstaticfinalStringROW_DELETED=\"SS-0524\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["packagesmallsql.database;","abstractclassExpressionFunctionReturnStringextendsExpressionFunction{","booleanisNull()throwsException{","returnparam1.isNull();","finalbooleangetBoolean()throwsException{","if(isNull())returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|"],
"["tableTimestamp=tableView.getTimestamp();","returntrue;","returnfalse;","abstractvoiddeleteRow()throwsSQLException;","abstractvoidupdateRow(Expression[]updateValues)throwsException;","abstractvoidinsertRow(Expression[]updateValues)throwsException;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["publicdoubledoubleValue(){","returnvalue;","@Override","publicintintValue(){","return(int)value;","@Override"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["case\'-\':","if(comment!=NOT_COMMENT){","break;","if(comment==LINE_COMMENT){","if(c==\'\\r\'||c==\'\\n\'){","comment=NOT_COMMENT;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnisInList();","break;","finalbooleanleftIsNull=left.isNull();","intdataType;","if(operation==NEGATIVE||operation==BIT_NOT){","if(leftIsNull)returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatHour12(details.hour,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case1://USAmm/dd/yy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["catch(IllegalAccessExceptione){","assert(false):\"Internalerror:mustneverhappen.\";","catch(ClassNotFoundExceptione){","catch(InstantiationExceptione){","assert(false):\"ErrorduringLanguageinstantiation:\"+e.getMessage();","intlastUndsc=part.lastIndexOf(\"_\");"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["|(((long)(puffer[offset++]&0xFF))\<\<32)","|((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);","char[]readChars(intlength){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["staticfinalintTS=402;","staticfinalintFN=403;","staticfinalintCALL=404;","staticfinalintOJ=405;","static{","addKeyWord(\"D\",D);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["default:","if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){","if(wasWhiteSpace){","node=searchTree;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicfloatgetFloat(StringcolumnName)throwsSQLException{","returngetFloat(findColumn(columnName));","publicdoublegetDouble(StringcolumnName)throwsSQLException{","returngetDouble(findColumn(columnName));","publicBigDecimalgetBigDecimal(StringcolumnName,intscale)throwsSQLException{","returngetBigDecimal(findColumn(columnName),scale);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["break;","default:thrownewError();","privatevoidinitValue(Expressionexpr)throwsException{","dataType=expr.getDataType();","switch(dataType){","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["StorePagestorePage=newStorePage(null,-1,raFile,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);","sql=store.readString();","inttype;","while((type=store.readInt())!=0){","intoffsetInPage=store.getCurrentOffsetInPage();"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["factor=-factor;","signum=-signum;","longcarryover=0;","for(inti=value.length-1;i\>=0;i--){","longv=(value[i]&0xFFFFFFFFL)*factor+carryover;","value[i]=(int)v;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnExpression.getScale(dataType);","voidsetPrecision(intprecision)throwsSQLException{","if(precision\<0)throwSmallSQLException.create(Language.COL_INVALID_SIZE,newObject[]{newInteger(precision),name});","this.precision=precision;","intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(dataType,precision);"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["result[3]=(byte)(value);","returnresult;","staticStringbytes2hex(byte[]bytes){","StringBufferbuf=newStringBuffer(bytes.length\<\<1);","for(inti=0;i\<bytes.length;i++){","buf.append(digits[(bytes[i]\>\>4)&0x0F]);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","switch(operation){","caseADD:","caseSUB:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["case\'V\':","c=\'1\';","break;","case\'C\':","case\'G\':","case\'J\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["returni;","return-1;","finalvoidtoArray(Expression[]array){","System.arraycopy(data,0,array,0,size);","finalExpression[]toArray(){","Expression[]array=newExpression[size];"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["this.name=name;","voidsetDefaultValue(ExpressiondefaultValue,StringdefaultDefinition){","this.defaultValue=defaultValue;","this.defaultDefinition=defaultDefinition;","ExpressiongetDefaultValue(SSConnectioncon)throwsSQLException{","if(identity)"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["finallonggetRowOffset(booleanscroll){","if(longList!=null){","longrowOffset=scroll?","longList.getNext(longListEnum):","longList.getPrevious(longListEnum);","if(rowOffset\<0){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["privateCommanddrop()throwsSQLException{","SQLTokentokenType=nextToken(COMMANDS_DROP);","Stringcatalog;","Stringname=catalog=nextIdentifier();","name=nextIdentiferPart(name);","if(name==catalog)catalog=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTimestamp(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["{DB_NONEXISTENT,\"Ildatabase\'\'{0}\'\'Nonesiste.\"},","{DB_NOT_DIRECTORY,\"Ladirectory\'\'{0}\'\'nonÃ¨undatabaseSmallSQL.\"},","{DB_NOTCONNECTED,\"L\'\'utentenonÃ¨connessoaundatabase.\"},","{CONNECTION_CLOSED,\"LaconnessioneÃ¨giÃ\u00a0chiusa.\"},","{VIEW_INSERT,\"INSERTnonÃ¨supportatoperunaview.\"},","{VIEWDROP_NOT_VIEW,\"NonÃ¨possibileeffettuareDROPVIEWcon\'\'{0}\'\'perchÃ©nonÃ¨unaview.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["return\"java.math.BigDecimal\";","caseTypes.REAL:","return\"java.lang.Float\";","caseTypes.FLOAT:","caseTypes.DOUBLE:","return\"java.lang.Double\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnnewMutableNumeric(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(readDouble());","caseSQLTokenizer.MONEY:","returnnewMutableNumeric(readLong(),4);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.remainderKey=newchar[length];","System.arraycopy(remainderValue,offset,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(longremainderValue,intcharCount){","this.remainderKey=newchar[charCount];","for(inti=charCount-1,d=0;i\>=0;i--){","this.remainderKey[d++]=(char)(remainderValue\>\>(i\<\<4));"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["pageSize=size;","@Override","longcommit()throwsSQLException{","try{","if(raFile!=null&&page!=null){","ByteBufferbuffer=ByteBuffer.wrap(page,0,pageSize);"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["importjava.io.ByteArrayInputStream;","importjava.io.InputStream;","importjava.io.Reader;","importjava.util.Map;","importjava.util.Calendar;","importjava.net.URL;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["((MutableNumeric)value).add(newValue);","break;","caseSQLTokenizer.MONEY:","((Money)value).value+=expr.getMoney();","break;","default:throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM,SQLTokenizer.getKeyWord(dataType));"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["this.table=table;","this.lockType=lockType;","byte[]getData(){","returnpage;","longcommit()throwsSQLException{","if(nextLock!=null){"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["keys.add(valueExpress.getObject());","if(needGeneratedKeys&&generatedKeysType==1){","String[]keyNames=st.getGeneratedKeyNames();","for(inti=0;i\<keyNames.length;i++){","if(column.getName().equalsIgnoreCase(keyNames[i])){","keyColumnNames.add(column.getName());"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","return(int)readTimestamp();","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(hour==0)hour=12;","formatNumber(hour,2,buf);","privatefinalstaticlongaddDateTimeOffset(longdatetime){","returnaddDateTimeOffset(datetime,TimeZone.getDefault());","finalstaticlongaddDateTimeOffset(longdatetime,TimeZonetimezone){","intt=(int)(datetime%86400000);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicResultSetgetSchemas()throwsSQLException{","String[]colNames={\"TABLE_SCHEM\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetCatalogs()throwsSQLException{","String[]colNames={\"TABLE_CAT\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnlock;","voidfreeLock(TableStorePagestorePage){","finalintlockType=storePage.lockType;","finallongfileOffset=storePage.fileOffset;","synchronized(locks){","try{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["{SYNTAX_BASE_OFS,\"01000\"},","{SYNTAX_BASE_END,\"01000\"},","{STXADD_ADDITIONAL_TOK,\"01000\"},","{STXADD_IDENT_EXPECT,\"01000\"},","{STXADD_IDENT_EMPTY,\"01000\"},","{STXADD_IDENT_WRONG,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["offset+=2;","break;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.BINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:","page=add(page,rowOffset,bytesToBinarySortOrder(expr.getBytes()),isLastValues);","break;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["setParamAt(convertExpressionIfNeeded(params[0],params[1]),0);","for(intp=1;p\<params.length;p++){","setParamAt(convertExpressionIfNeeded(params[p],left),p);","privatestaticStringgetKeywordFromOperation(intoperation){","inttoken=0;","for(inti=1;i\<1000;i++){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnfalse;","booleanisNext=next();","previous();","return!isNext;","finalbooleanisAfterLast(){","introwCount=getRowCount();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returngetColumnExpression(column).isCaseSensitive();","publicbooleanisSearchable(intcolumn)throwsSQLException{","inttype=getColumnExpression(column).getType();","returntype==Expression.NAME||type==Expression.FUNCTION;","publicbooleanisCurrency(intcolumn)throwsSQLException{","switch(getColumnExpression(column).getDataType()){"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["if(size\>=data.length){","resize(size\<\<1);","data[size++]=expr;","finalvoidadd(intidx,Expressionexpr){","if(size\>=data.length){","resize(size\<\<1);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["Statementst=con.createStatement();","if(args.length\>0){","con.setCatalog(args[0]);","System.out.println(\"\\tVersion:\"+con.getMetaData().getDatabaseProductVersion());","System.out.println(\"\\tCurrentdatabase:\"+con.getCatalog());","System.out.println();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["importjava.util.Collection;","importjava.util.HashMap;","importjava.util.Locale;","finalclassTableViewMap{","privatefinalHashMapmap=newHashMap();","privateObjectgetUniqueKey(Stringname){"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefile=newFile(directory,Utils.MASTER_FILENAME);","if(!file.exists())","throwSmallSQLException.create(Language.DB_NOT_DIRECTORY,name);","master=Utils.openRaFile(file,readonly);","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["nextToken(MISSING_TABLE);","from(cmd);","returncmd;","privateCommandinsert()throwsSQLException{","SQLTokentoken=nextToken(MISSING_INTO);","CommandInsertcmd=newCommandInsert(con.log,nextIdentifier());"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["lastRowOffset=rowSource.getRowPosition();","insertedRows.add(lastRowOffset);","returntrue;","rowSource.noRow();","row=(getRowCount()\>0)?getRowCount()+1:0;","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(rows\>0){","while(rows--\>0){","if(!next()){","returnfalse;","}else{","while(rows++\<0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["static{","addKeyWord(\"SQL_BIGINT\",SQL_BIGINT);","addKeyWord(\"SQL_BINARY\",SQL_BINARY);","addKeyWord(\"SQL_BIT\",SQL_BIT);","addKeyWord(\"SQL_CHAR\",SQL_CHAR);","addKeyWord(\"SQL_DATE\",SQL_DATE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else{","previousToken();","returnexpr;","caseSQLTokenizer.TRUE:","returnnewExpressionValue(Boolean.TRUE,SQLTokenizer.BOOLEAN);","caseSQLTokenizer.FALSE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Filefiles[]=dir.listFiles();","if(files!=null)","for(inti=0;i\<files.length;i++){","files[i].delete();","dir.delete();","break;"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["returnUtils.float2bytes(((Number)obj).floatValue());","default:throwcreateUnsupportedConversion(dataType,obj,SQLTokenizer.VARBINARY);","finalintgetDataType(){","returndataType;","StringgetTableName(){","returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["publicvoidupdateObject(StringcolumnName,Objectx,intscale)throwsSQLException{","updateObject(findColumn(columnName),x,scale);","publicvoidupdateObject(StringcolumnName,Objectx)throwsSQLException{","updateObject(findColumn(columnName),x);","publicvoidinsertRow()throwsSQLException{","st.con.log.println(\"insertRow()\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnrowPos==1;","finalbooleanisAfterLast(){","returnrowPos\>1;","finalvoidafterLast(){","rowPos=2;","finalbooleanabsolute(introw){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["caseSQLTokenizer.TINYINT:","writeByte(expr.getInt());","break;","caseSQLTokenizer.SMALLINT:","writeShort(expr.getInt());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnDouble.parseDouble(getString().trim());","finallonggetMoney()throwsException{","if(isNull())return0;","returnMoney.parseMoney(getString().trim());","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["e.printStackTrace();","publicConnectionconnect(Stringurl,Propertiesinfo)throwsSQLException{","if(!acceptsURL(url)){","returnnull;","returnnewSSConnection(parse(url,info));","privatePropertiesparse(Stringurl,Propertiesinfo)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["case\'L\':","c=\'4\';","break;","case\'M\':","case\'N\':","c=\'5\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["{DB_NOT_DIRECTORY,\"Ladirectory\'\'{0}\'\'nonÃ¨undatabaseSmallSQL.\"},","{DB_NOTCONNECTED,\"L\'\'utentenonÃ¨connessoaundatabase.\"},","{CONNECTION_CLOSED,\"LaconnessioneÃ¨giÃ\u00a0chiusa.\"},","{VIEW_INSERT,\"INSERTnonÃ¨supportatoperunaview.\"},","{VIEWDROP_NOT_VIEW,\"NonÃ¨possibileeffettuareDROPVIEWcon\'\'{0}\'\'perchÃ©nonÃ¨unaview.\"},","{VIEW_CANTDROP,\"NonsipuÃ²effettuaredropsullaview\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["break;","caseSQLTokenizer.MONEY:","writeLong(expr.getMoney());","break;","caseSQLTokenizer.SMALLMONEY:","writeInt((int)expr.getMoney());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicSavepointsetSavepoint(Stringname)throwsSQLException{","returnnewSSSavepoint(getSavepoint(),name,transactionTime);","publicvoidrollback(Savepointsavepoint)throwsSQLException{","if(savepointinstanceofSSSavepoint){","if(((SSSavepoint)savepoint).transactionTime!=transactionTime){","throwSmallSQLException.create(Language.SAVEPT_INVALID_TRANS);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["{STXADD_JOIN_INVALID,\"Sintassidellajoinnonvalida.\"},","{STXADD_FROM_PAR_CLOSE,\"Parentesichiusanonattesanellaclausolafrom.\"},","{STXADD_KEYS_REQUIRED,\"Leparolechiaverichiestesono:\"},","{STXADD_NOT_NUMBER,\"Richiestovalorenumerico(passato=\'\'{0}\'\').\"},","{STXADD_COMMENT_OPEN,\"Chiusuradelcommentomancante(\'\'*/\'\').\"},","};"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnparam3.getLong();","floatgetFloat()throwsException{","if(param1.getBoolean())","returnparam2.getFloat();","returnparam3.getFloat();","doublegetDouble()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["switch(token.value){","caseSQLTokenizer.WHERE:","where(cmd);","returncmd;","caseSQLTokenizer.COMMA:","continue;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["switch(level){","caseConnection.TRANSACTION_NONE:","caseConnection.TRANSACTION_READ_UNCOMMITTED:","caseConnection.TRANSACTION_READ_COMMITTED:","caseConnection.TRANSACTION_REPEATABLE_READ:","caseConnection.TRANSACTION_SERIALIZABLE:"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintINNER=222;","staticfinalintJOIN=223;","staticfinalintON=224;","staticfinalintOUTER=225;","staticfinalintFULL=226;","staticfinalintCROSS=227;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(defaultName==null){","defaultName=tableName+\"_\"+Long.toHexString(System.currentTimeMillis())+Integer.toHexString(newObject().hashCode());","returndefaultName;","finalStringgetName(){","returnname;","finalbooleanisPrimary(){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["TableViewResultresult=TableViewResult.getTableViewResult(tables.get(0));","TableViewtable=result.getTableView();","ColumnstabColumns=table.columns;","intcount=tabColumns.size();","Expression[]updateValues=newExpression[count];","if(newRowSources!=null){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnbuf.toString();","case131://Kuwaitidd/mm/yyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["expr=null;//onlyforCompiler","break;","caseSQLTokenizer.COUNT:","invalidParamCount=(paramCount!=1);","if(params[0].getType()==Expression.NAME){","ExpressionNameparam=(ExpressionName)params[0];"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewString(readChars(length));","voidwriteBytes(byte[]daten){","intnewSize=offset+daten.length;","if(newSize\>page.length)resizePage(newSize);","System.arraycopy(daten,0,page,offset,daten.length);","offset+=daten.length;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalStringDESC_STR=\"DESC\";","static{","addKeyWord(\"SELECT\",SELECT);","addKeyWord(\"DELETE\",DELETE);","addKeyWord(\"INTO\",INTO);","addKeyWord(\"UPDATE\",UPDATE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["value=rowOffset;","System.arraycopy(remainderValue,1,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(char[]remainderValue,intoffset){","intlength=remainderValue.length-offset;","this.remainderKey=newchar[length];","System.arraycopy(remainderValue,offset,this.remainderKey,0,length);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["result+=hour*3600000;","result+=(day-1)*86400000L;","if(month\>11){","year+=month/12;","month%=12;","result+=MONTH_DAYS[month]*86400000L;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returngetDate(columnIndex);","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewDate(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti,intscale)throwsSQLException{","try{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["{MONTH_TOOLARGE,\"DerMonatistzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DieTagesindzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"DieStundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"DieMinutensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{SECS_TOOLARGE,\"DieSekundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MILLIS_TOOLARGE,\"DieMillisekundensindzugroÃŸimTIMESTAMPWert\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.TIME:","caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:returnDouble.parseDouble(obj.toString());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privatefinalExpressioncondition;//thejoincondition,thepartaftertheON","finalinttype;","finalRowSourceleft;//thelefttable,vieworrowsourceofthejoin","finalRowSourceright;","privatebooleanisBeforeFirst=true;","privatebooleanisOuterValid=true;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["expr.addCase(condition,result);","break;","caseSQLTokenizer.ELSE:","expr.setElseResult(expression(cmd,0));","break;","caseSQLTokenizer.END:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["row[9]=Utils.getShort(foreignKey.updateRule);//UPDATE_RULE","row[10]=Utils.getShort(foreignKey.deleteRule);//DELETE_RULE","row[11]=fk.getName();//FK_NAME","row[12]=pk.getName();//PK_NAME","row[13]=Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable);//DEFERRABILITY","rows.add(row);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnvalue;","returnmetaData.getColumnExpression(columnIndex);","finalprivateExpressionValuegetUpdateValue(intcolumnIndex)throwsSQLException{","if(values==null){","intcount=metaData.getColumnCount();","values=newExpressionValue[count];"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalbooleanrowDeleted(){","returnleft.rowDeleted()||right.rowDeleted();","voidnullRow(){","left.nullRow();","right.nullRow();","row=0;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["publiclonggetLong(StringparameterName)throwsSQLException{","returngetLong(findParameter(parameterName));","publicfloatgetFloat(StringparameterName)throwsSQLException{","returngetFloat(findParameter(parameterName));","publicdoublegetDouble(StringparameterName)throwsSQLException{","returngetDouble(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["this.right2=right2;","this.operation=operation;","super.setParams(newExpression[]{left,right,right2});","ExpressionArithmetic(Expressionleft,ExpressionsinList,intoperation){","super(FUNCTION);","this.left=left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returndrop();","caseSQLTokenizer.ALTER:","returnalter();","caseSQLTokenizer.SET:","returnset();","caseSQLTokenizer.USE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=Utils.compareBytes(leftBytes,right2.getBytes());","break;}","throwcreateUnspportedDataType();","StringgetString()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","continue;","returnfalse;","returntrue;","privatebooleancreateJoinScrollIndex()throwsException{","if(type==CROSS_JOIN){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["case\'/\':","if((i+1\<sql.length)&&(sql[i+1]==\'*\')){","i++;","tokenStart=i+1;","comment=MULTI_COMMENT;","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Expressionsorder=newExpressions();","order.add(newExpressionName(\"TABLE_TYPE\"));","order.add(newExpressionName(\"TABLE_NAME\"));","cmdSelect.setOrder(order);","returnnewSSResultSet(st,cmdSelect);","publicResultSetgetSchemas()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["expr=newExpressionFunctionLog10();","break;","caseSQLTokenizer.MOD:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionMod();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StringfileName=Utils.createTableViewFileName(database,name);","Filefile=newFile(fileName);","if(!file.exists())","throwSmallSQLException.create(Language.TABLE_OR_VIEW_MISSING,name);","raFile=Utils.openRaFile(file,database.isReadOnly());","ByteBufferbuffer=ByteBuffer.allocate(8);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["returnrowPos==1?1:0;","finallonggetRowPosition(){","returnrowPos;","finalvoidsetRowPosition(longrowPosition){","rowPos=(int)rowPosition;","finalbooleanrowInserted(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["finalbooleanresult=rowSource.next();","if(result){","rowList.add(rowSource.getRowPosition());","returntrue;","rowIdx=rowList.size();//rowIdxshouldbeneverlargerasrowcount","returnfalse;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["privateSQLExceptionnoCurrentRow(){","returnSmallSQLException.create(Language.ROW_NOCURRENT);","booleanisNull(intoffset)throwsSQLException{","thrownoCurrentRow();","booleangetBoolean(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["rowSource.setRowPosition(rowPos);","return!isNext;","finalbooleanisAfterLast(){","returnrow\>0&&!isCurrentRow;","finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["intlockType;","SSConnectioncon;","TableStorePagenextLock;","TableStorePage(SSConnectioncon,Tabletable,intlockType,longfileOffset){","super(null,0,table.raFile,fileOffset);","this.con=con;"]": ["|project://smallsql/src/smallsql/database/TableStorePage.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionDegreesextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.DEGREES;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.toDegrees(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionDegrees.java|"],
"["store.page=storePage.page;","store.sharedPageData=true;","store.readPageHeader();","store=store.loadUpdatedStore();","store.offset=PAGE_CONTROL_SIZE;","returnstore;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["remainderKey=(length\>0)?input.readChars(length):null;","intvalueType=input.readByte();","switch(valueType){","case0:","value=null;","break;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnTypes.BIGINT;","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","returnTypes.DECIMAL;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privateintmaxRows=-1;","finalbooleanisGroupResult(){","returngroupBy!=null||having!=null||isAggregateFunction;","privatevoidcompileJoin(JoinsingleJoin)throwsException{","if(singleJoin.condition!=null)compileLinkExpressionParams(singleJoin.condition);","if(singleJoin.leftinstanceofJoin){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NVARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BOOLEAN)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DATE)),Utils.getInteger(10),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIME)),Utils.getInteger(8),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIMESTAMP)),Utils.getInteger(23),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(3),Utils.getInteger(3),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getDateTimeLong(),dataType);","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["default:","thrownewError();","privateExpressionexpression(Commandcmd,intpreviousOperationLevel)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","ExpressionleftExpr;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntrue;","voidbeforeFirst()throwsException{","rowIdx=-1;","rowSource.beforeFirst();","booleanisBeforeFirst(){","returnrowIdx==-1||rowList.size()==0;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["for(inti=0;i\<tab.length;i++)","tab[i]=null;","size=0;","finalbooleancontainsValue(TableStorePagevalue){","Entrytab[]=table;","for(inti=0;i\<tab.length;i++)"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["returngetBoolean()?1:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl();","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["voidreplaceTable(TableoldTable,TablenewTable)throwsException{","synchronized(tableViews){","tableViews.remove(oldTable.name);","tableViews.remove(newTable.name);","oldTable.close();","newTable.close();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["booleanas=false;","if(token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);","as=true;","if(as||(!isKeyword(token))){","Stringalias=getIdentifier(token);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType);","voidsetParamValue(intidx,Objectvalue,intdataType,intlength)throwsSQLException{","getParam(idx).set(value,dataType,length);","if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType+\";length=\"+length);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["SQLTokentoken=nextToken(MISSING_SET);","while(true){","token=nextToken();","Expressiondest=expressionSingle(cmd,token);","if(dest.getType()!=Expression.NAME)throwcreateSyntaxError(token,MISSING_IDENTIFIER);","nextToken(MISSING_EQUALS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["synchronized(raFile){","raFile.position(filePos);","raFile.read(buffer);","value=((long)(page[0])\<\<56)|","((long)(page[1]&0xFF)\<\<48)|","((long)(page[2]&0xFF)\<\<40)|"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["value=list=newLongTreeList();","list.add(rowOffset);","finalvoidaddRemainderKey(longrowOffset,longremainderValue,intcharCount)throwsSQLException{","saveRemainderValue(remainderValue,charCount);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalvoidaddRemainderKey(longrowOffset,char[]remainderValue,intoffset)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["clearRowBuffer();","privatevoidclearRowBuffer(){","if(values!=null){","for(inti=values.length-1;i\>=0;i--){","values[i].clear();","publicvoidmoveToInsertRow()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["intreadSize=input.readInt();","data=input.readBytes(readSize);","finalvoidsave(StoreImploutput){","output.writeInt(size);","output.writeBytes(data,0,size);","finalvoidadd(longvalue)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicbooleansupportsPositionedUpdate(){","returntrue;","publicbooleansupportsSelectForUpdate(){","returntrue;","publicbooleansupportsStoredProcedures(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["super(log);","this.name=name;","voidaddColumnExpression(Expressioncolumn)throwsSQLException{","if(columnExpressions.indexOf(column)\>=0){","throwSmallSQLException.create(Language.COL_DUPLICATE,column);","super.addColumnExpression(column);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["privatebooleanwasNull;","SSStatementst;","privatebooleanisUpdatable;","privatebooleanisInsertRow;","privateExpressionValue[]values;","privateintfetchDirection;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnfalse;","store.scanObjectOffsets(offsets,dataTypes);","afterLastValidFilePos=store.getNextPagePos();","returntrue;","}else{","filePos=-1;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["staticfinalintREPEATABLE=246;","staticfinalintSERIALIZABLE=247;","staticfinalintCONSTRAINT=250;","staticfinalintPRIMARY=251;","staticfinalintFOREIGN=252;","staticfinalintKEY=253;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["try{","MutableNumericobj=getValue(i).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal(scale);","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["insertNodeLastLevel(octet);","return;","shift-=16;","octet=(int)(value\>\>shift)&0xFFFF;","firstNode=false;","if(shift!=0)offset+=pointerSize;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnsupportsResultSetType(type);","publicbooleanupdatesAreDetected(inttype){","returnfalse;","publicbooleandeletesAreDetected(inttype){","returnsupportsResultSetType(type);","publicbooleaninsertsAreDetected(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["this.offset=tokenStart;","this.length=tokenEnd-tokenStart;","this.name=name;","StringgetName(char[]sql){","if(name!=null)returnname;","returnnewString(sql,offset,length);"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["returngetClob(findColumn(columnName));","publicArraygetArray(StringcolumnName)throwsSQLException{","returngetArray(findColumn(columnName));","publicDategetDate(intcolumnIndex,Calendarcal)throwsSQLException{","try{","if(cal==null){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finalintgetInt()throwsException{","Stringstr=param1.getString();","if(str==null||str.length()==0)return0;","returnstr.charAt(0);","finalObjectgetObject()throwsException{","Stringstr=param1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|"],
"["finalbooleanrowDeleted(){","returncommandSelect.from.rowDeleted();","voidnullRow(){","commandSelect.from.nullRow();","voidnoRow(){","commandSelect.from.noRow();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["voidaddForeingnKey(ForeignKeykey){","foreignKeys.add(key);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","Databasedatabase=catalog==null?","con.getDatabase(false):","Database.getDatabase(catalog,con,false);"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["returntrue;","}else","if(oldRowOffset.longValue()==newRowOffset){","row++;","returntrue;","finalvoidafterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["previousToken();","if(token.length\>1&&(sql[token.offset+1]|0x20)==\'x\'){","if(isMinus){","throwcreateSyntaxError(token,Language.STXADD_OPER_MINUS);","returnnewExpressionValue(Utils.hex2bytes(sql,token.offset+2,token.length-2),SQLTokenizer.VARBINARY);","if(isMinus)tok=\"-\"+tok;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticclassDetails{","intyear;","intmonth;","intdayofyear;","intday;","inthour;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["byte[]getBytes(intoffset,intdataType)throwsException{","thrownoCurrentRow();","doublegetDouble(intoffset,intdataType)throwsException{","thrownoCurrentRow();","floatgetFloat(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["SQLTokentoken=nextToken(MISSING_EXPRESSION);","ExpressionleftExpr;","switch(token.value){","caseSQLTokenizer.NOT:","leftExpr=newExpressionArithmetic(expression(cmd,ExpressionArithmetic.NOT/10),ExpressionArithmetic.NOT);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StorePagestorePage=newStorePage(null,-1,file,fileOffset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","save(store);","fileOffset=store.writeFinsh(null);","@Override","voidsaveRef(StoreImploutput)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["firstPage=store.getNextPagePos();","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","this(database,con,name,columns,null,indexes,foreignKeys);","Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsexistIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","super(name,columns);","this.database=database;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["switch(type){","store.setCurrentOffsetInPage(offsetInPage+size);","raFile.close();","commandSelect=(CommandSelect)newSQLParser().parse(con,sql);","createColumns(con);","View(Databasedatabase,SSConnectioncon,Stringname,Stringsql)throwsException{"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["comp=leftBytes.length\<rightBytes.length?-1:1;","returncomp;","staticCommandSelectcreateMemoryCommandSelect(SSConnectioncon,String[]colNames,Object[][]data)throwsSQLException{","MemoryResultsource=newMemoryResult(data,colNames.length);","CommandSelectcmd=newCommandSelect(con.log);","for(inti=0;i\<colNames.length;i++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["previousToken();","}else{","token=nextToken(MISSING_EXPRESSION);","try{","displaySize=Integer.parseInt(token.getName(sql));","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["store.writeFinsh(null);//Theconnectionparameterisnullbecausethetableheaderiswrittenimmediately.","firstPage=store.getNextPagePos();","@Override","voidwriteMagic(FileChannelraFile)throwsException{","ByteBufferbuffer=ByteBuffer.allocate(8);","buffer.putInt(MAGIC_TABLE);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["returnTypes.DATE;","caseSQLTokenizer.TIME:","returnTypes.TIME;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnTypes.TIMESTAMP;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returntrue;","intgetRow(){","returnrow\>getRowCount()?0:row;","finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["}catch(SQLExceptionex){","throwex;","}catch(Throwableex){","throwSmallSQLException.createFromException(Language.DATETIME_INVALID,datetime,ex);","longgetTimeMillis(){","returntime;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["previousToken();","returnleftExpr;","if(isNot){","isNot=false;","leftExpr=newExpressionArithmetic(leftExpr,ExpressionArithmetic.NOT);","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewMutableNumeric(getLong());","ObjectgetObject()throwsException{","if(isNull())returnnull;","returnnewDateTime(getLong(),SQLTokenizer.TIMESTAMP);","StringgetString()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["if(lock.nextLock==null){","locks.remove(pageKey);","}else{","locks.put(pageKey,lock.nextLock);","}else{","prev.nextLock=lock.nextLock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalintgetInt()throwsException{","returnUtils.long2int(getLong());","finallonggetLong()throwsException{","returnUtils.double2long(getDouble());","finalfloatgetFloat()throwsException{","return(float)getDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["SSConnectioncon;","privatechar[]sql;","privateListtokens;","privateinttokenIdx;","Commandparse(SSConnectioncon,StringsqlString)throwsSQLException{","this.con=con;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return(long)(value*10000-0.5);","return(long)(value*10000+0.5);","staticintindexOf(charvalue,char[]str,intoffset,intlength){","value|=0x20;","for(intend=offset+length;offset\<end;offset++){","if((str[offset]|0x20)==value)returnoffset;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["puffer[offset++]=(byte)(value\>\>40);","puffer[offset++]=(byte)(value\>\>32);","puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnDateTime.getTime(expr.getLong());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(intcolumnIndex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["booleangetBoolean(intoffset,intdataType)throwsException{","thrownoCurrentRow();","byte[]getBytes(intoffset,intdataType)throwsException{","thrownoCurrentRow();","doublegetDouble(intoffset,intdataType)throwsException{","thrownoCurrentRow();"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["case109://monddyyyyhh:mi:ss:mmmAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\'\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintLOCATE=1111;","staticfinalintLTRIM=1112;","staticfinalintOCTETLEN=1113;","staticfinalintREPEAT=1114;","staticfinalintREPLACE=1115;","staticfinalintRIGHT=1116;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"CREATE\",CREATE);","addKeyWord(\"DROP\",DROP);","addKeyWord(\"ALTER\",ALTER);","addKeyWord(\"SET\",SET);","addKeyWord(\"EXEC\",EXECUTE);//aliasforEXECUTE;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"EXECUTE\",EXECUTE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["booleanisCaseSensitive(){","returncaseSensitive;","voidsetNullable(booleannullable){","this.nullable=nullable;","booleanisNullable(){","returnnullable;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["defaultWasSet=true;","break;","caseSQLTokenizer.NULL:","if(nullableWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","nullableWasSet=true;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticTableViewload(SSConnectioncon,Databasedatabase,Stringname)throwsSQLException{","FileChannelraFile=null;","try{","StringfileName=Utils.createTableViewFileName(database,name);","Filefile=newFile(fileName);","if(!file.exists())"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["returnresult;","StringsgetTables(StringtablePattern){","Stringslist=newStrings();","Filedirs[]=directory.listFiles();","if(dirs!=null)","if(tablePattern==null)tablePattern=\"%\";"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnnewMutableNumeric(Utils.bytes2double(readBinary()));","caseSQLTokenizer.TINYINT:","returnnewMutableNumeric(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnnewMutableNumeric(readShort());","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","if((nextEntry==0&&!firstNode)||nextEntry\>octet){","offset-=2;","while(true){","if(shift!=0){","offset=insertNode(octet);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["nextToken(MISSING_ON);","Stringcatalog;","StringtableName=catalog=nextIdentifier();","tableName=nextIdentiferPart(tableName);","if(tableName==catalog)catalog=null;","CommandTablecmd=newCommandTable(con.log,catalog,tableName,SQLTokenizer.INDEX);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(token2!=null&&token2.value==SQLTokenizer.PARENTHESIS_L){","if(isMinus)","returnnewExpressionArithmetic(function(cmd,token,false),ExpressionArithmetic.NEGATIVE);","returnfunction(cmd,token,false);","}else{","charchr1=sql[token.offset];"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncommandSelect.first();","booleanprevious()throwsException{","returncommandSelect.previous();","booleannext()throwsException{","returncommandSelect.next();","booleanlast()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["classStorePageextendsTransactionStep{","byte[]page;//dataofonepage","intpageSize;","longfileOffset;//positioninfile","StorePage(byte[]page,intpageSize,FileChannelraFile,longfileOffset){","super(raFile);"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["rowIdx=-1;","voidnoRow(){","rowSource.noRow();","rowIdx=-1;","voidexecute()throwsException{","rowSource.execute();"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\',\');","buf.append(\'\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case107://Mondd,yyyy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","if(c\>\'0\'&&last!=c){","output[idx++]=c;","last=c;","for(;idx\<4;){","output[idx++]=\'0\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["static{","for(inti=-4;i\<256;i++){","integerCache[i+4]=newInteger(i);","shortCache[i+4]=newShort((short)i);","staticStringcreateTableViewFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+TABLE_VIEW_EXTENTION;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["importjava.nio.channels.FileChannel;","importjava.sql.*;","importsmallsql.database.language.Language;","classColumnimplementsCloneable{","privateExpressiondefaultValue=Expression.NULL;//DefaultvalueforINSERT","privateStringdefaultDefinition;//StringrepresentationforDefaultValue"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["abstractbooleanisScrollable();","abstractvoidbeforeFirst()throwsException;","booleanisBeforeFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanisFirst()throwsSQLException{","throwSmallSQLException.create(Language.RSET_FWDONLY);"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["byte[]str1=param1.getBytes();","byte[]str2=param2.getBytes();","intlength=str2.length;","if(length==0){","returnstr1;","byte[]str3=param3.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returncommandSelect.next();","booleanlast()throwsException{","returncommandSelect.last();","booleanisLast()throwsException{","returncommandSelect.isLast();","booleanisAfterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returnfrom.first();","booleanprevious()throwsException{","returnfrom.previous();","booleannext()throwsException{","if(maxRows\>=0&&from.getRow()\>=maxRows){","from.afterLast();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["finalintgetInt(intcolIdx)throwsException{","returnstore.getInt(offsets[colIdx],dataTypes[colIdx]);","@Override","finallonggetLong(intcolIdx)throwsException{","returnstore.getLong(offsets[colIdx],dataTypes[colIdx]);","@Override"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["buf.append(\':\');","formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\'.\');","formatMillis(details.millis,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["System.arraycopy(daten,offset,temp,0,daten.length-offset);","daten=temp;","char[]chars=newchar[36];","chars[8]=chars[13]=chars[18]=chars[23]=\'-\';","chars[0]=digits[(daten[offset+3]\>\>4)&0x0F];","chars[1]=digits[(daten[offset+3])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["for(inti=0;i\<count;i++){","page=findRows(page,expressions[i],searchNullValues,nodeList);","if(page==null)","returnnull;","if(i+1==count)","returnpage.getValue();"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returntrue;","publicbooleansupportsIntegrityEnhancementFacility(){","returntrue;","publicbooleansupportsOuterJoins(){","returntrue;","publicbooleansupportsFullOuterJoins(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["style=expression(cmd,0);","}else","previousToken();","nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,style);","caseSQLTokenizer.CAST:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["wasWhiteSpace=true;","tokenStart=i+1;","break;","case\'/\':","if((i+1\<sql.length)&&(sql[i+1]==\'*\')){","i++;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnreadLong()/10000.0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000.0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().doubleValue();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["offset=oldOffset;","finalprivatevoidcorrectPointers(intstartOffset,intoldOffset,intdiff,intlevel){","offset=startOffset;","booleanfirstNode=true;","while(offset\<size){","if(offset==oldOffset){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["booleanisMinus=false;","if(token!=null){","switch(token.value){","caseSQLTokenizer.NULL:","returnnewExpressionValue(null,SQLTokenizer.NULL);","caseSQLTokenizer.STRING:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.INT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["raFile.position(fileOffset);","raFile.write(buffer);","returnfileOffset;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","@Override"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["finalclassTableViewMap{","privatefinalHashMapmap=newHashMap();","privateObjectgetUniqueKey(Stringname){","returnname.toUpperCase(Locale.US);//usethesamelocaleforall","TableViewget(Stringname){","return(TableView)map.get(getUniqueKey(name));"]": ["|project://smallsql/src/smallsql/database/TableViewMap.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importjava.text.DateFormatSymbols;","importjava.util.Calendar;","importjava.util.TimeZone;","importsmallsql.database.language.Language;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["finalprivatebyte[]page=newbyte[8];","privatelongvalue;","publicIdentity(FileChannelraFile,longfilePos)throwsIOException{","ByteBufferbuffer=ByteBuffer.wrap(page);","synchronized(raFile){","raFile.position(filePos);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["returndatabase;","ObjectgetMonitor(){","returnthis;","publicStatementcreateStatement()throwsSQLException{","returnnewSSStatement(this);","publicPreparedStatementprepareStatement(Stringsql)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["publicstaticfinalStringROWS_WRONG_MAX=\"SS-0522\";","publicstaticfinalStringROW_LOCKED=\"SS-0523\";","publicstaticfinalStringROW_DELETED=\"SS-0524\";","publicstaticfinalStringSAVEPT_INVALID_TRANS=\"SS-0550\";","publicstaticfinalStringSAVEPT_INVALID_DRIVER=\"SS-0551\";","publicstaticfinalStringALIAS_UNSUPPORTED=\"SS-0580\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["addKeyWord(\"UNIQUEIDENTIFIER\",UNIQUEIDENTIFIER);","addKeyWord(\"SQL_VARIANT\",JAVA_OBJECT);//aliasforMSSQLServerdatatypeSQL_VARIANT","addKeyWord(\"JAVA_OBJECT\",JAVA_OBJECT);","staticfinalintD=400;","staticfinalintT=401;","staticfinalintTS=402;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["page.freeLock();","commitPages.clear();","transactionTime=System.currentTimeMillis();","}catch(Throwablee){","rollback();","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returntoBigDecimal().compareTo(numeric.toBigDecimal());","publicbooleanequals(Objectobj){","if(!(objinstanceofMutableNumeric))returnfalse;","returncompareTo((MutableNumeric)obj)==0;","publicBigDecimaltoBigDecimal(){","if(signum==0)returnnewBigDecimal(BigInteger.ZERO,scale);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnnewSSResultSet(st,cmdSelect);","publicResultSetgetSchemas()throwsSQLException{","String[]colNames={\"TABLE_SCHEM\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetCatalogs()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["tabLockCount++;","TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","con.add(lock);","returnlock;","caseSQLTokenizer.ALTER:{","if(locks.size()\>0||locksInsert.size()\>0){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["addKeyWord(\"NUMERIC\",NUMERIC);","addKeyWord(\"REAL\",REAL);","addKeyWord(\"FLOAT\",FLOAT);","addKeyWord(\"DOUBLE\",DOUBLE);","addKeyWord(\"DATE\",DATE);","addKeyWord(\"TIME\",TIME);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()*10000L;","caseSQLTokenizer.SMALLINT:","returnreadShort()*10000L;","caseSQLTokenizer.INT:","returnreadInt()*10000L;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return-1;","if(longValue\>0)","return1;","return0;","caseSQLTokenizer.MONEY:","longValue=param1.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["try{","Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getBoolean();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnstore.isNull(offsets[colIdx]);","@Override","finalbooleangetBoolean(intcolIdx)throwsException{","returnstore.getBoolean(offsets[colIdx],dataTypes[colIdx]);","@Override","finalintgetInt(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["privateDataSourcestables;//ListofTableResult(TablesandViews)","privateExpressionwhere;","RowSourcefrom;","privateExpressionsgroupBy;","privateExpressionhaving;","privateExpressionsorderBy;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["staticfinalintMONEY=331;","staticfinalintDECIMAL=332;","staticfinalintNUMERIC=333;","staticfinalintREAL=336;","staticfinalintFLOAT=337;","staticfinalintDOUBLE=338;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.BITLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionBitLen();","break;","caseSQLTokenizer.CHARLEN:","caseSQLTokenizer.CHARACTLEN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicResultSetgetProcedures(Stringcatalog,StringschemaPattern,StringprocedureNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"\",\"\",\"\",\"REMARKS\",\"PROCEDURE_TYPE\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetProcedureColumns(Stringcatalog,StringschemaPattern,StringprocedureNamePattern,StringcolumnNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"COLUMN_NAME\",\"COLUMN_TYPE\",\"DATA_TYPE\",\"TYPE_NAME\",\"PRECISION\",\"LENGTH\",\"SCALE\",\"RADIX\",\"NULLABLE\",\"REMARKS\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["setName(name);","ExpressionName(inttype){","super(type);","voidsetNameAfterTableAlias(Stringname){","tableAlias=getName();","setName(name);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["finalvoidtestClosedConnection()throwsSQLException{","if(isClosed())throwSmallSQLException.create(Language.CONNECTION_CLOSED);","publicbooleanisClosed(){","return(commitPages==null);","publicDatabaseMetaDatagetMetaData(){","returnmetadata;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["break;","if(comment==LINE_COMMENT){","if(c==\'\\r\'||c==\'\\n\'){","comment=NOT_COMMENT;","wasWhiteSpace=true;","tokenStart=i+1;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["byte[]bytes=newbyte[8];","intoffset=0;","bytes[offset++]=(byte)(value\>\>56);","bytes[offset++]=(byte)(value\>\>48);","bytes[offset++]=(byte)(value\>\>40);","bytes[offset++]=(byte)(value\>\>32);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["finalvoidsetRowPosition(longrowPosition)throwsException{","intbitCount=getBitCount();","intmask=0xFFFFFFFF\>\>\>(32-bitCount);","dataSourceIdx=(int)rowPosition&mask;","currentDS=dataSources.get(dataSourceIdx);","currentDS.setRowPosition(rowPosition\>\>bitCount);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(value==null)returnfalse;","returnvalue.equals(v);","voidaccumulate(Expressionexpr)throwsException{","inttype=getType();","if(type!=GROUP_BY)expr=expr.getParams()[0];","switch(type){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{TABLE_CANT_DROP,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{TABLE_CANT_DROP_LOCKED,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden,weilsiegelocktist.\"},","{TABLE_CORRUPT_PAGE,\"BeschÃ¤digteTabellenseitebeiPosition:{0}.\"},","{TABLE_MODIFIED,\"DieTabelle\'\'{0}\'\'wurdemodifiziert.\"},","{TABLE_DEADLOCK,\"Deadlock,eskannkeinLockerzeugtwerdenfÃ¼rTabelle\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"TabelleoderView\'\'{0}\'\'existiertnicht.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["if(param1.isNull())returnnull;","switch(getDataType()){","caseSQLTokenizer.INT:","returnnewMutableNumeric(getInt());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["{VALUE_BIN_TOOLARGE,\"EinBinÃ¤reWertmitLÃ¤nge{0}istzugroÃŸfÃ¼reineSpaltemitderGrÃ¶ÃŸe{1}.\"},","{VALUE_NULL_INVALID,\"NullWertesindungÃ¼ltigfÃ¼rdieSpalte\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Kannnichtkonvertierenein{0}Wertzueinem{1}Wert.\"},","{BYTEARR_INVALID_SIZE,\"UngÃ¼ltigeBytearrayGroÃŸe{0}fÃ¼rUNIQUEIDENFIER.\"},","{LOB_DELETED,\"LobObjektwurdegelÃ¶scht.\"},","{PARAM_CLASS_UNKNOWN,\"UnbekanteParameterKlasse:\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["publicStringgetColumnTypeName(intcolumn)throwsSQLException{","returnSQLTokenizer.getKeyWord(getColumnExpression(column).getDataType());","publicbooleanisReadOnly(intcolumn)throwsSQLException{","return!getColumnExpression(column).isDefinitelyWritable();","publicbooleanisWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseMOD:returnleft.getLong()%right.getLong();","caseBIT_NOT:return~right.getInt();","throwcreateUnspportedConversion(SQLTokenizer.LONG);","doublegetDouble()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(t\<0){","t+=86400000;","d--;","intmillis=t%1000;","t/=1000;","synchronized(cal){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["((MutableDouble)value).value+=expr.getDouble();","break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(newValue!=null)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returntrue;","booleanisNull()throwsException{","returnfromEntry.isNull(colIdx);","booleangetBoolean()throwsException{","returnfromEntry.getBoolean(colIdx);","intgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["Columncol;","Expressionstyle=null;","if(isEscape){","expr=expression(cmd,0);","nextToken(MISSING_COMMA);","col=datatype(isEscape);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["System.out.println(\"SmallSQLDatabasecommandlinetool\\n\");","Connectioncon=newSSDriver().connect(\"jdbc:smallsql\",newProperties());","Statementst=con.createStatement();","if(args.length\>0){","con.setCatalog(args[0]);","System.out.println(\"\\tVersion:\"+con.getMetaData().getDatabaseProductVersion());"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["privatefinalintgetBitCount(){","intsize=dataSources.size();","intbitCount=0;","while(size\>0){","bitCount++;","size\>\>=1;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["expr=newExpressionFunctionFloor();","break;","caseSQLTokenizer.LOG:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLog();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["writeLongBinary(expr.getBytes());","break;","caseSQLTokenizer.TIMESTAMP:","writeTimestamp(expr.getLong());","break;","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["case1://USAmm/dd/yy","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicstaticfinalStringTABLE_FILE_INVALID=\"SS-0197\";","publicstaticfinalStringTABLE_OR_VIEW_FILE_INVALID=\"SS-0198\";","publicstaticfinalStringTABLE_EXISTENT=\"SS-0199\";","publicstaticfinalStringFK_NOT_TABLE=\"SS-0220\";","publicstaticfinalStringPK_ONLYONE=\"SS-0221\";","publicstaticfinalStringKEY_DUPLICATE=\"SS-0222\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privateSmallSQLException(Throwablethrowable,Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);","this.initCause(throwable);","init();","privatevoidinit(){","this.isInit=true;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["}else{","valueExpress=column.getDefaultValue(con);","if(needGeneratedKeys&&generatedKeysType==0&&valueExpress!=Expression.NULL){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","if(needGeneratedKeys&&generatedKeysType==1){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["expressionDefList(cmd,expressions,columns);","returnnewIndexDescription(contrainName,tableName,constraintType,expressions,columns);","privateColumndatatype(booleanisEscape)throwsSQLException{","SQLTokentoken;","intdataType;","if(isEscape){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["expr=newExpressionFunctionRight();","break;","caseSQLTokenizer.RTRIM:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRTrim();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:thrownewError(String.valueOf(dataTypes[i]));","@Override","voiddeleteRow(SSConnectioncon)throwsSQLException{","status=DELETED;","type=SQLTokenizer.DELETE;","createWriteLock();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["precision=readInt();","column.setPrecision(precision);","column.setScale(readByte());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","if(!readBoolean()){","Stringdef=readString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["thrownewjava.lang.UnsupportedOperationException(\"MethodsupportsAlterTableWithDropColumn()notyetimplemented.\");","publicbooleansupportsColumnAliasing(){","returntrue;","publicbooleannullPlusNonNullIsNull(){","returntrue;","publicbooleansupportsConvert(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","if(dataType!=SQLTokenizer.DATE){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["testNotInsertRow();","finalCommandSelectcommand=getCmd();","command.updateRow(st.con,values);","command.relative(0);//refreshtherow","clearRowBuffer();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintSQL_LONGVARBINARY=1359;","staticfinalintSQL_LONGVARCHAR=1360;","staticfinalintSQL_REAL=1361;","staticfinalintSQL_SMALLINT=1362;","staticfinalintSQL_TIME=1363;","staticfinalintSQL_TIMESTAMP=1364;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["expr=newExpressionFunctionATan();","break;","caseSQLTokenizer.ATAN2:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionATan2();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{DB_EXISTENT,\"01000\"},","{DB_NONEXISTENT,\"01000\"},","{DB_NOT_DIRECTORY,\"01000\"},","{DB_NOTCONNECTED,\"01000\"},","{CONNECTION_CLOSED,\"01000\"},","{VIEW_INSERT,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnfalse;","publicbooleannullsAreSortedAtEnd(){","returnfalse;","publicStringgetDatabaseProductName(){","return\"SmallSQLDatabase\";","publicStringgetDatabaseProductVersion(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicfloatgetFloat(StringparameterName)throwsSQLException{","returngetFloat(findParameter(parameterName));","publicdoublegetDouble(StringparameterName)throwsSQLException{","returngetDouble(findParameter(parameterName));","publicbyte[]getBytes(StringparameterName)throwsSQLException{","returngetBytes(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["break;","}elseif(quote==0){","if(wasWhiteSpace){","node=searchTree;","}else{","if(node==null){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnnext();","booleanprevious()throwsException{","if(rowIdx\>-1){","rowIdx--;","if(rowIdx\>-1&&rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["publicstaticfinalStringUNSUPPORTED_CONVERSION_OPER=\"SS-0280\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_OPER=\"SS-0281\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_FUNC=\"SS-0282\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_FUNC=\"SS-0283\";","publicstaticfinalStringUNSUPPORTED_TYPE_CONV=\"SS-0284\";","publicstaticfinalStringUNSUPPORTED_TYPE_SUM=\"SS-0285\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnunique;","finalbooleanisEmpty(){","returnnodes==EMPTY_NODES&&value==null;","finalvoidclear(){","nodes=EMPTY_NODES;","value=null;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.OR:","caseSQLTokenizer.AND:","caseSQLTokenizer.BIT_AND:","caseSQLTokenizer.BIT_OR:","caseSQLTokenizer.BIT_XOR:","rightExpr=expression(cmd,level);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticfinalint[]COMMANDS_TRANS_LEVEL={SQLTokenizer.READ,SQLTokenizer.REPEATABLE,SQLTokenizer.SERIALIZABLE};","privatestaticfinalint[]MISSING_READ={SQLTokenizer.READ};","privatestaticfinalint[]MISSING_COMM_UNCOMM={SQLTokenizer.COMMITTED,SQLTokenizer.UNCOMMITTED};","privatestaticfinalint[]MISSING_OPTIONS_DATATYPE={SQLTokenizer.DEFAULT,SQLTokenizer.IDENTITY,SQLTokenizer.NOT,SQLTokenizer.NULL,SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_NUMBERVALUE={SQLTokenizer.NUMBERVALUE};","privatestaticfinalint[]MISSING_AND={SQLTokenizer.AND};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["ExpressionNameexpr=newExpressionName(colNames[i]);","cmd.addColumnExpression(expr);","expr.setFrom(source,i,source.getColumn(i));","cmd.setSource(source);","returncmd;","staticfinalIntegergetInteger(intvalue){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.GREATER:","caseSQLTokenizer.GREATER_EQU:","caseSQLTokenizer.UNEQUALS:","caseSQLTokenizer.LIKE:","caseSQLTokenizer.OR:","caseSQLTokenizer.AND:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnparam1.isNull()||param2.isNull();","booleangetBoolean()throwsException{","returngetLong()!=0;","intgetInt()throwsException{","return(int)getLong();","longgetLong()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returnnewMutableNumeric(getIntImpl());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLongImpl());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","caseLOCK_READ:","caseLOCK_WRITE:","LongpageKey=newLong(fileOffset);//TODOperformance","lock=(TableStorePage)locks.get(pageKey);","prev=lock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["writeFinsh(con);","}else{","newData.status=UPDATED_PAGE;","if(updatePointer==null){","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","filePosUpdated=newData.writeFinsh(null);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnprops;","publicbooleanacceptsURL(Stringurl){","returnurl.startsWith(URL_PREFIX);","publicDriverPropertyInfo[]getPropertyInfo(Stringurl,Propertiesinfo)","throwsSQLException{","Propertiesprops=parse(url,info);"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["addKeyWord(\"SQL_VARBINARY\",SQL_VARBINARY);","addKeyWord(\"SQL_VARCHAR\",SQL_VARCHAR);","staticfinalintCOUNT=1400;","staticfinalintMIN=1401;","staticfinalintMAX=1402;","staticfinalintSUM=1403;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else","returnpage.addRoot((char)0);","finalprivateIndexNodefind(IndexNodenode,longkey,intdigitCount,ArrayListnodeList){","for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));","node=node.getChildNode(digit);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returncurrentDS.getBoolean(colIdx);","finalintgetInt(intcolIdx)throwsException{","returncurrentDS.getInt(colIdx);","finallonggetLong(intcolIdx)throwsException{","returncurrentDS.getLong(colIdx);","finalfloatgetFloat(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returngetDate(findParameter(parameterName),cal);","publicTimegetTime(StringparameterName,Calendarcal)throwsSQLException{","returngetTime(findParameter(parameterName),cal);","publicTimestampgetTimestamp(StringparameterName,Calendarcal)throwsSQLException{","returngetTimestamp(findParameter(parameterName),cal);","publicURLgetURL(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseNEGATIVE:return-left.getFloat();","caseMOD:returnleft.getFloat()%right.getFloat();","throwcreateUnspportedConversion(SQLTokenizer.REAL);","longgetMoney()throwsjava.lang.Exception{","if(isNull())return0;","intdataType=getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalbooleanisNull(intcolIdx)throwsException{","returncurrentDS.isNull(colIdx);","finalbooleangetBoolean(intcolIdx)throwsException{","returncurrentDS.getBoolean(colIdx);","finalintgetInt(intcolIdx)throwsException{","returncurrentDS.getInt(colIdx);"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","returnbuf.toString();","case14:","case114://hh:mi:ss:mmm(24h)"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["longgetLong(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getDouble();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["addKeyWord(\"TOP\",TOP);","addKeyWord(\"ADD\",ADD);","addKeyWord(\"LIMIT\",LIMIT);","addKeyWord(\"DATABASE\",DATABASE);","addKeyWord(\"TABLE\",TABLE);","addKeyWord(\"VIEW\",VIEW);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnmaxRows;","finalpublicvoidsetMaxRows(intmax)throwsSQLException{","if(max\<0)","throwSmallSQLException.create(Language.ROWS_WRONG_MAX,String.valueOf(max));","maxRows=max;","finalpublicvoidsetEscapeProcessing(booleanenable)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.CONCAT:","if(paramCount!=2){","invalidParamCount=true;","expr=null;//onlyforcompiler","break;","invalidParamCount=false;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"DATEADD\",TIMESTAMPADD);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPADD\",TIMESTAMPADD);","addKeyWord(\"DATEDIFF\",TIMESTAMPDIFF);//aliasforMSSQLServer","addKeyWord(\"TIMESTAMPDIFF\",TIMESTAMPDIFF);","addKeyWord(\"WEEK\",WEEK);","addKeyWord(\"YEAR\",YEAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["}else{","token=nextToken(MISSING_DATATYPE);","dataType=token.value;","Columncol=newColumn();","if(dataType==SQLTokenizer.LONG){","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["from(selCmd);","returnselCmd;","default:","if(!isKeyword(token))","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.FROM});","previousToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","case1:","if(right!=null){","right=param;","break;","case2:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["case3:","millis=Integer.parseInt(strMillis);","break;","default:","millis=Integer.parseInt(strMillis.substring(0,3));","}else"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returncolumnExpressions.get(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getNumeric();","ObjectgetObject(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["if(newRow==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);","if(newRow\>0){","beforeFirst();","while(newRow--\>0){","if(!next()){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returnTypes.BINARY;","caseSQLTokenizer.VARBINARY:","returnTypes.VARBINARY;","caseSQLTokenizer.LONGVARBINARY:","returnTypes.LONGVARBINARY;","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMinute();","break;","caseSQLTokenizer.MONTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionMonth();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returntrue;","publicbooleansupportsSubqueriesInQuantifieds(){","returntrue;","publicbooleansupportsCorrelatedSubqueries(){","returntrue;","publicbooleansupportsUnion(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(c+1==keyIndexes[i]){","keyColumnNames.add(column.getName());","keys.add(valueExpress.getObject());","break;","store.writeExpression(valueExpress,column);","for(inti=0;i\<indexes.size();i++){"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returnfromEntry.getDouble(colIdx);","longgetMoney()throwsException{","returnfromEntry.getMoney(colIdx);","MutableNumericgetNumeric()throwsException{","returnfromEntry.getNumeric(colIdx);","ObjectgetObject()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["addKeyWord(\"IFNULL\",IFNULL);","addKeyWord(\"USER\",USER);","addKeyWord(\"CONVERT\",CONVERT);","addKeyWord(\"CAST\",CAST);","addKeyWord(\"IIF\",IIF);","staticfinalintSQL_BIGINT=1350;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=left.getNumeric().compareTo(right2.getNumeric());","default:","returngetNumeric().getSignum()!=0;","caseSQLTokenizer.VARCHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}else{","MutableNumericnum=left.getNumeric();","num.mul(right.getNumeric());","returnnum;","caseDIV:","MutableNumericnum=left.getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TINYINT:","return3;","caseSQLTokenizer.SMALLINT:","return5;","caseSQLTokenizer.INT:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnmove();","finalintgetRow(){","returncurrentRow==null?0:rowIdx+1;","finallonggetRowPosition(){","returnrowIdx;","finalvoidsetRowPosition(longrowPosition)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["for(intc=1;c\<count;){","puffer[c++]=(char)(value[i]\>\>16);","puffer[c++]=(char)value[i++];","returnpuffer;","privatefinalbooleanequals(char[]src1,char[]src2,intoffset2){","if(src1==null)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["{VIEWDROP_NOT_VIEW,\"DROPVIEWkannnichtmit\'\'{0}\'\'verwendetwerden,weileskeineViewist.\"},","{VIEW_CANTDROP,\"View\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{RSET_NOT_PRODUCED,\"EswurdekeinResultSeterzeugt.\"},","{RSET_READONLY,\"DasResultSetistschreibgeschÃ¼tzt.\"},","{RSET_FWDONLY,\"DasResultSetistforwardonly.\"},","{RSET_CLOSED,\"DasResultSetistgeschlossen.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["while(size\>0){","bitCount++;","size\>\>=1;","returnbitCount;","finallonggetRowPosition(){","intbitCount=getBitCount();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfWeek();","break;","caseSQLTokenizer.DAYOFYEAR:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDayOfYear();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.createFromException(e);","publicObjectgetObject(inti)throwsSQLException{","try{","Objectobj=getValue(i).getObject();","wasNull=obj==null;","returnobj;"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["StringscolumnsFk=fk.getColumns();","for(intc=0;c\<columnsPk.size();c++){","Object[]row=newObject[14];","row[0]=getName();//PKTABLE_CAT","row[2]=foreignKey.pkTable;//PKTABLE_NAME","row[3]=columnsPk.get(c);//PKCOLUMN_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnpage[valueOffset]!=0;","@Override","booleangetBoolean(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())returnfalse;","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(i=0;i\<value.length;i++){","if(value[i]!=0){","count=2*(value.length-i)+1;","break;","char[]puffer=newchar[count];","puffer[0]=(char)count;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnnewDateTime(getLong(),dataType);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returngetBytes();","default:throwcreateUnspportedDataType(param1.getDataType());","intgetDataType(){","returnparam1.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["caseSQLTokenizer.REAL:","return13;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return17;","caseSQLTokenizer.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["break;","caseSQLTokenizer.SMALLINT:","writeShort(expr.getInt());","break;","caseSQLTokenizer.INT:","writeInt(expr.getInt());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DOUBLE:","return17;","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["IndexNodenode=(IndexNode)nodeList.get(nodeList.size()-1);","node.clearValue();","for(inti=nodeList.size()-2;i\>=0;i--){","if(!node.isEmpty())","break;","IndexNodeparent=(IndexNode)nodeList.get(i);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["expr.setFrom(source,i,source.getColumn(i));","cmd.setSource(source);","returncmd;","staticfinalIntegergetInteger(intvalue){","if(value\>=-4&&value\<256){","returnintegerCache[value+4];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["else","initValue(expr);","}elseif(!expr.isNull()){","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|","|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["token=nextToken();","if(token==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","}while(token.value==SQLTokenizer.MINUS||token.value==SQLTokenizer.PLUS);","default:","SQLTokentoken2=nextToken();","if(token2!=null&&token2.value==SQLTokenizer.PARENTHESIS_L){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["StringviewName=nextIdentifier();","nextToken(MISSING_AS);","SQLTokentoken=nextToken(MISSING_SELECT);","CommandCreateViewcmd=newCommandCreateView(con.log,viewName);","cmd.sql=newString(sql,token.offset,sql.length-token.offset);","select();//Parsetocheckforvalid"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["FilenewFile=newTable.getFile(this);","FiletmpFile=newFile(Utils.createTableViewFileName(this,\"#\"+System.currentTimeMillis()+this.hashCode()));","if(!oldFile.renameTo(tmpFile)){","throwSmallSQLException.create(Language.TABLE_CANT_RENAME,oldTable.name);","if(!newFile.renameTo(oldFile)){","tmpFile.renameTo(oldFile);//restoretheoldtable"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returncommandSelect.from.rowDeleted();","voidnullRow(){","commandSelect.from.nullRow();","voidnoRow(){","commandSelect.from.noRow();","finalvoidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["returnreadInt();","caseSQLTokenizer.BIGINT:","returnreadLong();","caseSQLTokenizer.REAL:","return(long)readFloat();","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.TIME:","returngetTime(time);","default:","returngetTimestamp(time);","staticclassDetails{","intyear;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(newValueinstanceofFloat)","this.dataType=SQLTokenizer.REAL;","else","if(newValueinstanceofDouble)","this.dataType=SQLTokenizer.DOUBLE;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["cmd.setParamValue(parameterIndex,x,SQLTokenizer.LONGVARCHAR,length);","publicvoidsetUnicodeStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();","thrownewjava.lang.UnsupportedOperationException(\"MethodsetCharacterStream()notyetimplemented.\");","publicvoidsetRef(inti,Refx)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["packagesmallsql.database;","importjava.io.File;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importjava.sql.DriverManager;","importjava.sql.SQLException;"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["privateObjectvalue;","privateintdataType;","privateintlength;","ExpressionValue(){","super(VALUE);","clear();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returncal.getTimeInMillis();","privatestaticlongremoveDateTimeOffset(longdatetime){","synchronized(cal){","cal.setTimeZone(TimeZone.getDefault());","cal.setTimeInMillis(datetime);","returndatetime+cal.get(Calendar.ZONE_OFFSET)+cal.get(Calendar.DST_OFFSET);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewTimestamp(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(StringcolumnName,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["generatedKeyIndexes=null;","generatedKeyNames=null;","finalpublicvoidclose(){","con.log.println(\"Statement.close\");","isClosed=true;","cmd=null;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["publicStringnativeSQL(Stringsql){","returnsql;","publicvoidsetAutoCommit(booleanautoCommit)throwsSQLException{","if(log.isLogging())log.println(\"AutoCommit:\"+autoCommit);","if(this.autoCommit!=autoCommit){","commit();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["TableStorePagestorePage=requestLock(con,pageOperation,filePos);","returnStoreImpl.createStore(this,storePage,pageOperation,filePos);","StoreImplgetStore(TableStorePagestorePage,intpageOperation)throwsException{","returnStoreImpl.recreateStore(this,storePage,pageOperation);","StoreImplgetStoreInsert(SSConnectioncon)throwsException{","TableStorePagestorePage=requestLock(con,SQLTokenizer.INSERT,-1);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["|hexDigit2int(hex[offset++]));","}catch(Exceptione){","throwSmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR,newObject[]{newInteger(offset),newString(hex)});","staticStringbytes2unique(byte[]daten,intoffset){","if(daten.length-offset\<16){","byte[]temp=newbyte[16];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["leftEx.add(param0);","rightEx.add(param1);","}else{","if(left.isExpressionsFromThisRowSource(columns1)&&right.isExpressionsFromThisRowSource(columns0)){","leftEx.add(param1);","rightEx.add(param0);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["data=newForeignKey[16];","finalintsize(){","returnsize;","finalForeignKeyget(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Columnindex:\"+idx+\",Size:\"+size);"]": ["|project://smallsql/src/smallsql/database/ForeignKeys.java|"],
"["year++;","continue;","break;","}while(true);","if(isLeap&&day==59){","month=1;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["nullableWasSet=true;","break;","caseSQLTokenizer.PRIMARY:","caseSQLTokenizer.UNIQUE:","IndexDescriptionindex=index(cmdCreate,token.value,cmdCreate.name,null,colName);","cmdCreate.addIndex(index);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"YY\",SQL_TSI_YEAR);","addKeyWord(\"YYYY\",SQL_TSI_YEAR);","addKeyWord(\"SQL_TSI_YEAR\",SQL_TSI_YEAR);","staticfinalintIFNULL=1301;//firstsystemfunction--\>seeSSDatabaseMetaData.getSystemFunctions","staticfinalintUSER=1302;","staticfinalintCONVERT=1303;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.SQL_INTEGER:dataType=SQLTokenizer.INT;break;","caseSQLTokenizer.SQL_LONGVARBINARY:dataType=SQLTokenizer.LONGVARBINARY;break;","caseSQLTokenizer.SQL_LONGVARCHAR:dataType=SQLTokenizer.LONGVARCHAR;break;","caseSQLTokenizer.SQL_REAL:dataType=SQLTokenizer.REAL;break;","caseSQLTokenizer.SQL_SMALLINT:dataType=SQLTokenizer.SMALLINT;break;","caseSQLTokenizer.SQL_TIME:dataType=SQLTokenizer.TIME;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","byte[]bytes=newbyte[1];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseLESSER:returnleft.getInt()\<right.getInt();","caseLES_EQU:returnleft.getInt()\<=right.getInt();","caseUNEQUALS:returnleft.getInt()!=right.getInt();","caseBETWEEN:","int_left=left.getInt();","return_left\>=right.getInt()&&right2.getInt()\>=_left;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intgeneratedKeysType=0;","while(cmdSel.next()){","if(needGeneratedKeys){","keyColumnNames=newStrings();","keys=newArrayList();","if(st.getGeneratedKeyNames()!=null)"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["finalintgetColumnIndex(){","returncolIdx;","finalColumngetColumn(){","returncolumn;","finalpublicStringtoString(){","if(tableAlias==null)returnString.valueOf(getAlias());"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["index.addValues(right.getRowPosition(),rightEx);","booleannext()throwsException{","switch(compare){","caseExpressionArithmetic.EQUALS:","returnnextEquals();","default:"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["publicvoidsetTimestamp(intparameterIndex,Timestampx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,DateTime.valueOf(x),SQLTokenizer.TIMESTAMP);","publicvoidsetAsciiStream(intparameterIndex,InputStreamx,intlength)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.LONGVARCHAR,length);"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["addKeyWord(\"MM\",SQL_TSI_MONTH);","addKeyWord(\"SQL_TSI_MONTH\",SQL_TSI_MONTH);","addKeyWord(\"Q\",SQL_TSI_QUARTER);","addKeyWord(\"QQ\",SQL_TSI_QUARTER);","addKeyWord(\"SQL_TSI_QUARTER\",SQL_TSI_QUARTER);","addKeyWord(\"YY\",SQL_TSI_YEAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","caseCOUNT:","value=newMutableInteger(0);","dataType=SQLTokenizer.INT;","break;","default:thrownewError();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returntrue;","}else{","rowSource.noRow();","row=0;","returnfalse;","booleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["row=0;","voidexecute()throwsException{","left.execute();","right.execute();","if(!createJoinScrollIndex()){","scroll=newJoinScroll(type,left,right,condition);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnLong.parseLong(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnLong.parseLong(readLongString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicMoney(doublevalue){","this.value=(long)(value*10000);","publicMoney(floatvalue){","this.value=(long)(value*10000);","publicstaticMoneycreateFromUnscaledValue(longvalue){","Moneymoney=newMoney();"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["voidbeforeFirst()throwsException{","scroll.beforeFirst();","isAfterLast=false;","row=0;","booleanfirst()throwsException{","beforeFirst();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["returnFloat.intBitsToFloat(bytes2int(bytes));","staticdoublebytes2double(byte[]bytes){","returnDouble.longBitsToDouble(bytes2long(bytes));","staticlongbytes2long(byte[]bytes){","longresult=0;","intlength=Math.min(8,bytes.length);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnFloat.parseFloat(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnFloat.parseFloat(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TableStorePageInsertlock=newTableStorePageInsert(con,this,LOCK_INSERT);","locksInsert.add(lock);","con.add(lock);","returnlock;","caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(newScale==this.scale)returntoBigDecimal();","returntoBigDecimal().setScale(newScale,BigDecimal.ROUND_HALF_EVEN);","publicObjectgetImmutableObject(){","returntoBigDecimal();","privatestaticfinalbyte[]EMPTY_BYTES=newbyte[0];","privatestaticfinalint[]EMPTY_INTS=newint[0];"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["compileJoin((Join)singleJoin.right);","privatevoidcompileLinkExpression(Expressionexpr)throwsException{","if(expr.getType()==Expression.NAME)","compileLinkExpressionName((ExpressionName)expr);","elsecompileLinkExpressionParams(expr);","privatevoidcompileLinkExpressionName(ExpressionNameexpr)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["while(complement[last]==0){","last--;","complement[last]++;","byte[]toByteArray(){","if(signum==0)returnEMPTY_BYTES;","byte[]complement;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["staticfinalintWHEN=264;","staticfinalintTHEN=265;","staticfinalintELSE=266;","staticfinalintEND=267;","staticfinalintSWITCH=268;","staticfinalStringDESC_STR=\"DESC\";"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnoperation;","return0;","staticfinalintCROSS_JOIN=1;","staticfinalintINNER_JOIN=2;","staticfinalintLEFT_JOIN=3;","staticfinalintFULL_JOIN=4;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["nextToken(MISSING_COMMA);","expr=newExpressionFunctionTimestampDiff(token.value,expr,expression(cmd,0));","nextToken(MISSING_PARENTHESIS_R);","returnexpr;","caseSQLTokenizer.TIMESTAMPADD:","token=nextToken(MISSING_INTERVALS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}else{","while(rows++\<0){","if(!previous()){","returnfalse;","returntrue;","intgetRow(){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["publicvoidrefreshRow()throwsSQLException{","testNotInsertRow();","relative(0);","publicvoidcancelRowUpdates()throwsSQLException{","testNotInsertRow();","clearRowBuffer();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["write(database,con);","View(SSConnectioncon,CommandSelectcommandSelect)throwsException{","super(\"UNION\",newColumns());","this.sql=null;","this.commandSelect=commandSelect;","createColumns(con);"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["returnnewLong(readLong());","caseSQLTokenizer.REAL:","returnnewFloat(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(readDouble());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(shift\>=0){","intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){","intnextEntry=getUnsignedShort();","if(nextEntry==octet){","if(shift==0)return;//valueexistalready,thiscaseshouldnotoccur"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnreadLongString();","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intlength=daten.length;","if(lengthColumn\<length){","Objectparams=newObject[]{newInteger(length),newInteger(lengthColumn)};","throwSmallSQLException.create(Language.VALUE_BIN_TOOLARGE,params);","if(varBinary)lengthColumn=length;","intnewSize=offset+2+lengthColumn;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(src1[i]!=src2[i+offset2])returnfalse;","returntrue;","privatefinalbooleanequals(char[]src1,longsrc2,intcharCount){","if(src1==null)returnfalse;","intlength=src1.length;","if(length!=charCount)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(length\>0)output.writeChars(remainderKey);","if(value==null){","output.writeByte(0);","}else","if(valueinstanceofLong){","output.writeByte(1);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Expressionsexpressions=newExpressions();","Stringscolumns=newStrings();","expressionDefList(cmd,expressions,columns);","IndexDescriptionindexDesc=newIndexDescription(","indexName,","tableName,"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this(newBigDecimal(String.valueOf(val)));","MutableNumeric(Stringval){","this(newBigDecimal(val));","MutableNumeric(BigDecimalbig){","this(big.unscaledValue().toByteArray());","scale=big.scale();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);","useSetRowPosition=true;","finalbooleanrowInserted(){","returnrowSource.rowInserted();"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returndataType;","finalintgetPrecision(){","intprecision=0;","for(inti=results.size()-1;i\>=0;i--){","precision=Math.max(precision,results.get(i).getPrecision());","returnprecision;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.UNCOMMITTED:","cmd.isolationLevel=Connection.TRANSACTION_READ_UNCOMMITTED;","break;","default:","thrownewError();","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintDATE=340;","staticfinalintTIME=341;","staticfinalintTIMESTAMP=342;","staticfinalintSMALLDATETIME=343;","staticfinalintCHAR=350;","staticfinalintNCHAR=352;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicdoubledoubleValue(){","returnvalue/10000.0;","publiclonglongValue(){","return(long)(value/10000.0);","publicStringtoString(){","StringBufferbuffer=newStringBuffer();"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["((DateTime)value).time=Math.min(((DateTime)value).time,expr.getLong());","break;","default:thrownewError(\"\"+dataType);","break;","default:thrownewError();","privatevoidinitValue(Expressionexpr)throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{ISOLATION_UNKNOWN,\"LivellodiIsolamentotransazionesconosciuto:{0}.\"},","{FLAGVALUE_INVALID,\"Flagnonvalidanelmetodo\'\'getMoreResults\'\':{0}.\"},","{ARGUMENT_INVALID,\"Argomentononvalidonelmetodo\'\'setNeedGenratedKeys\'\':{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnonrichieste.\"},","{SEQUENCE_HEX_INVALID,\"Sequenzaesadecimalenonvalidoallaposizione{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Sequenceesadecimalenonvalidaallapositione{0}in\'\'{1}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["staticfinalintDAYOFWEEK=1205;","staticfinalintDAYOFYEAR=1206;","staticfinalintDAY=1207;","staticfinalintHOUR=1208;","staticfinalintMILLISECOND=1209;","staticfinalintMINUTE=1210;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseDIV:","MutableNumericnum=left.getNumeric();","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","num.div(right.getInt());","else","num.div(right.getNumeric());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["this.name=name;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","switch(type){","caseSQLTokenizer.DATABASE:","if(name.startsWith(\"file:\"))","name=name.substring(5);"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["dataType=expr.getDataType();","switch(dataType){","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","value=newMutableInteger(expr.getInt());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["char[]buffer=newchar[size];","for(inti=0;i\<size;i++){","buffer[i]=\'\';","returnnewString(buffer);","finalintgetDataType(){","returnSQLTokenizer.VARCHAR;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSpace.java|"],
"["return0;","finalMutableNumericgetNumeric(intoffset,intdataType)throwsException{","returnnull;","finalObjectgetObject(intoffset,intdataType)throwsException{","returnnull;","finalStringgetString(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["return(SQLException)e;","else{","Stringmessage=stripMsg(e);","StringsqlState=language.getSqlState(Language.CUSTOM_MESSAGE);","returnnewSmallSQLException(e,message,sqlState);","staticSQLExceptioncreateFromException(StringmessageCode,Objectparam0,"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returnnewInteger(getInt());","caseSQLTokenizer.BIGINT:","returnnewLong(getLong());","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnull;","returnvalue;","StringgetString(){","Objectobj=getObject();","if(obj==null)returnnull;","if(dataType==SQLTokenizer.BIT){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["try{","database.dropTable(con,newName);","}catch(Exceptionex1){/*ignoreit*/}","try{","indexes.drop(database);","}catch(Exceptionex1){/*ignoreit*/}"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["default:","previousToken();","breakSwitch;","while(true){","Expressioncolumn=expression(selCmd,0);","selCmd.addColumnExpression(column);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.year,4,buf);","returnbuf.toString();","case5://italianodd-mm-yy","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{INDEX_MISSING,\"Index\'\'{0}\'\'doesnotexist.\"},","{INDEX_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidIndexstore.\"},","{INDEX_CORRUPT,\"ErrorinloadingIndex.Indexfileiscorrupt.({0}).\"},","{INDEX_TOOMANY_EQUALS,\"ToomanyequalsentryinIndex.\"},","{FILE_TOONEW,\"Fileversion({0})offile\'\'{1}\'\'istoonewforthisruntime.\"},","{FILE_TOOOLD,\"Fileversion({0})offile\'\'{1}\'\'istoooldforthisruntime.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["StringBufferbuffer=newStringBuffer(1024);","Stringmiddle=SmallSQLException.translateMsg(","middleMsgCode,newObject[]{middleMsgParam});","buffer.append(middle);","privateStringgetIdentifier(SQLTokentoken)throwsSQLException{","Stringname=token.getName(sql);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intreadShort(){","return((puffer[offset++]&0xFF)\<\<8)|(puffer[offset++]&0xFF);","intreadInt(){","return((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["range=true;","break;","case\'_\':","sIdx++;","break;","default:"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["privateFileChannelraFile;","IndexDescription(Stringname,StringtableName,intconstraintType,Expressionsexpressions,Stringscolumns){","this.constraintType=constraintType;","this.expressions=expressions;","this.columns=columns;","this.name=createName(name,tableName);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["finallonggetPrevious(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64){//apreviouscallofgetNext()hasreturn-1","shift=48;","offset=0;","listEnum.stack=0;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["break;","caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:","caseSQLTokenizer.DELETE:","if(storePage.page==null){","FileChannelraFile=storePage.raFile;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseAND:","caseNOT:","caseLIKE:","caseISNULL:","caseISNOTNULL:","caseIN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.TIME:","returnnewDateTime(param1.getLong(),type).toString(param2.getInt());","default:","returnparam1.getString();","}else","returnparam1.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getBoolean()==right.getBoolean();","caseUNEQUALS:returnleft.getBoolean()!=right.getBoolean();","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseLESSER:returncomp\<0;","caseLES_EQU:returncomp\<=0;","caseUNEQUALS:returncomp!=0;","caseBETWEEN:","returncomp\>=0&&0\>=left.getNumeric().compareTo(right2.getNumeric());","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["intpos=findNodePos(digit);","if(pos!=-1){","intlength=nodes.length-1;","IndexNode[]temp=newIndexNode[length];","System.arraycopy(nodes,0,temp,0,pos);","System.arraycopy(nodes,pos+1,temp,pos,length-pos);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Where(RowSourcerowSource,Expressionwhere){","this.rowSource=rowSource;","this.where=where;","RowSourcegetFrom(){","returnrowSource;","finalprivatebooleanisValidRow()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassExpressionFunctionextendsExpression{","Expressionparam1;","Expressionparam2;","Expressionparam3;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["caseSQLTokenizer.TABLE:","returnalterTable(catalog,tableName);","default:","Object[]param={\"ALTER\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","CommandalterTable(Stringcatalog,Stringname)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicintgetMaxCursorNameLength(){","return0;","publicintgetMaxIndexLength(){","return0;","publicintgetMaxSchemaNameLength(){","return255;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["StringconstraintName;","if(token.value==SQLTokenizer.CONSTRAINT){","constraintName=nextIdentifier();","token=nextToken(MISSING_KEYTYPE);","}else{","constraintName=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["sIdx++;","break;","while(pattern.length()\>mIdx){","if(Character.toUpperCase(pattern.charAt(mIdx++))!=\'%\')returnfalse;","while(value.length()\>sIdx&&!range)returnfalse;","returntrue;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["value[0]=complement;","signum=1;","MutableNumeric(intcomplement,intscale){","this(complement);","this.scale=scale;","MutableNumeric(longcomplement){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{ROW_LOCKED,\"DerDatensatzistgelockedvoneineranderenVerbindung.\"},","{ROW_DELETED,\"DerDatensatzistbereitsgelÃ¶scht.\"},","{SAVEPT_INVALID_TRANS,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdieaktuelleTransaction.\"},","{SAVEPT_INVALID_DRIVER,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdiesenTreiber{0}.\"},","{ALIAS_UNSUPPORTED,\"EinAliasistnichterlaubtfÃ¼rdiesenTypvonRowsource.\"},","{ISOLATION_UNKNOWN,\"UnbekantesTransaktionIsolationLevel:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["}else{","patchExpressions(expr);","returnexpr;","finalvoidexecute()throwsException{","super.execute();","from.execute();"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["caseBETWEEN:","double_left=left.getDouble();","return_left\>=right.getDouble()&&right2.getDouble()\>=_left;","default:","returngetDouble()!=0;","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?Boolean.TRUE:Boolean.FALSE;","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnreadBinary();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){","if(wasWhiteSpace){","node=searchTree;","}else{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionRadians();","break;","caseSQLTokenizer.RAND:","invalidParamCount=(paramCount!=0)&&(paramCount!=1);","expr=newExpressionFunctionRand();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetDriverMajorVersion()+\".\"+SSDriver.drv.getMinorVersion();","publicintgetDriverMajorVersion(){","returnSSDriver.drv.getMajorVersion();","publicintgetDriverMinorVersion(){","returnSSDriver.drv.getMinorVersion();","publicbooleanusesLocalFiles(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnfalse;","publicbooleansupportsSchemasInIndexDefinitions(){","returnfalse;","publicbooleansupportsSchemasInPrivilegeDefinitions(){","returnfalse;","publicbooleansupportsCatalogsInDataManipulation(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(value.length==1&&(value[0]\>0)){","returnvalue[0]/scaleDoubleFactor[scale]*signum;","}else","if(value.length==1){","longtemp=value[0]&0xFFFFFFFFL;","returntemp/scaleDoubleFactor[scale]*signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["abstractlonggetRowPosition();","abstractvoidsetRowPosition(longrowPosition)throwsException;","abstractvoidnullRow();","abstractvoidnoRow();","abstractbooleanrowInserted();","abstractbooleanrowDeleted();"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnreadLongString().getBytes();","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["longreadTime(){","returnreadInt()*1000L;","voidwriteDate(longdate){","writeInt((int)(date/86400000));","longreadDate(){","returnreadInt()*86400000L;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","expr=exprName=newExpressionName(expr.getAlias());","Columncolumn=exprName.getColumn();","if(column==null){","column=newColumn();","exprName.setFrom(this,idx,column);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["while(next()){/*scrollaftertheend*/}","returnprevious();","finalvoidafterLast()throwsException{","while(next()){/*scrollaftertheend*/}","finalintgetRow()throwsException{","returnisCurrentRow?row:0;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returndetails2.year-details1.year;","default:thrownewError();","longgetLong()throwsException{","returngetInt();","floatgetFloat()throwsException{","returngetInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["super(FUNCTION);","privatefinalExpressionscases=newExpressions();","privatefinalExpressionsresults=newExpressions();","privateExpressionelseResult=Expression.NULL;","privateintdataType=-1;","finalvoidaddCase(Expressioncondition,Expressionresult){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["writeInt(PAGE_MAGIC);//forrepair","writeInt(status);","writeInt(sizeUsed);","writeInt(sizePhysical);","writeInt(0);//nextPageOffset","writeLong(filePosUpdated);//Pointerofanupdatedpage"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(i==0){","if(isLastValue){","node.addNode(digit,rowOffset);","returnnull;","returnnode.addRoot(digit);","node=node.addNode(digit);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionLCaseextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.LCASE;","finalbooleanisNull()throwsException{","returnparam1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLCase.java|"],
"["publicbooleandataDefinitionCausesTransactionCommit(){","returnfalse;","publicbooleandataDefinitionIgnoredInTransactions(){","returnfalse;","publicResultSetgetProcedures(Stringcatalog,StringschemaPattern,StringprocedureNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"\",\"\",\"\",\"REMARKS\",\"PROCEDURE_TYPE\"};"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["isOuterValid=false;","isBeforeFirst=false;","right.nullRow();","returntrue;","}elsefullRightRowCounter++;","}else{"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["break;","case\'R\':","c=\'6\';","break;","default:","c=\'0\';"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnInteger.parseInt(readString());","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(idx2\>0){","buffer.write(str1,idx1,idx2-idx1);","buffer.write(str3);","idx1=idx2+length;","idx2=Utils.indexOf(str2,str1,idx1);","if(idx1\>0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReplace.java|"],
"["returnrow\>0&&!isCurrentRow;","finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();","row=0;","finalbooleanfirst()throwsException{","isCurrentRow=rowSource.first();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["returndatetime+cal.get(Calendar.ZONE_OFFSET)+cal.get(Calendar.DST_OFFSET);","staticTimestampgetTimestamp(longtime){","returnnewTimestamp(DateTime.addDateTimeOffset(time));","staticTimegetTime(longtime){","returnnewTime(DateTime.addDateTimeOffset(time));","staticDategetDate(longtime){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintWHERE=211;","staticfinalintGROUP=212;","staticfinalintBY=213;","staticfinalintHAVING=214;","staticfinalintORDER=215;","staticfinalintASC=216;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.scale=scale;","intgetScale(){","switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","returnscale;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returngetBytes();","default:throwcreateUnspportedDataType();","booleangetBoolean()throwsjava.lang.Exception{","switch(operation){","caseOR:returnleft.getBoolean()||right.getBoolean();","caseAND:returnleft.getBoolean()&&right.getBoolean();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionFunction))returnfalse;","return((ExpressionFunction)expr).getFunction()==getFunction();","SQLExceptioncreateUnspportedDataType(intdataType){","Object[]params={","SQLTokenizer.getKeyWord(dataType),"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["staticfinalintLTRIM=1112;","staticfinalintOCTETLEN=1113;","staticfinalintREPEAT=1114;","staticfinalintREPLACE=1115;","staticfinalintRIGHT=1116;","staticfinalintRTRIM=1117;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicvoidupdateObject(StringcolumnName,Objectx)throwsSQLException{","updateObject(findColumn(columnName),x);","publicvoidinsertRow()throwsSQLException{","st.con.log.println(\"insertRow()\");","if(!isInsertRow){","throwSmallSQLException.create(Language.RSET_NOT_INSERT_ROW);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["finaldoublegetDouble()throwsException{","returngetResult().getDouble();","finallonggetMoney()throwsException{","returngetResult().getMoney();","finalMutableNumericgetNumeric()throwsException{","returngetResult().getNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["returngetMoneyImpl();","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","privatelonggetMoneyImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getMoney()+right.getMoney();","caseSUB:returnleft.getMoney()-right.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicInputStreamgetAsciiStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"getUnicodeStream\");","publicInputStreamgetBinaryStream(intcolumnIndex)throwsSQLException{","returnnewByteArrayInputStream(getBytes(columnIndex));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnnull;","publicvoidclearWarnings(){","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSPreparedStatement(this,sql,resultSetType,resultSetConcurrency);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returntrue;","staticintlong2int(longvalue){","if(value\>Integer.MAX_VALUE)","returnInteger.MAX_VALUE;","if(value\<Integer.MIN_VALUE)","returnInteger.MIN_VALUE;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["staticfinalintISNULL=64;//ISNULL","staticfinalintISNOTNULL=ISNULL+1;//ISNOTNULL","staticfinalintADD=71;//+","staticfinalintSUB=72;//-","staticfinalintMUL=81;//*","staticfinalintDIV=82;///"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privatebooleanidentity;","privatebooleancaseSensitive;","privatebooleannullable=true;","privateintscale;","privateintprecision;","privateintdataType;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["super(log);","this.type=SQLTokenizer.VIEW;","this.name=name;","voidaddColumn(Columncolumn){","columns.add(column);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandCreateView.java|"],
"["try{","if(database.getTableView(con,table)instanceofView){","if(isTypeView){","row[3]=\"VIEW\";","rows.add(row);","}else{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publiclongunscaledValue(){","returnvalue;","publicstaticlongparseMoney(Stringstr){","returnUtils.doubleToMoney(Double.parseDouble(str));","privatebyte[]toByteArray(){","byte[]bytes=newbyte[8];"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["@Override","finalfloatgetFloat(intcolIdx)throwsException{","returnstore.getFloat(offsets[colIdx],dataTypes[colIdx]);","@Override","finaldoublegetDouble(intcolIdx)throwsException{","returnstore.getDouble(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["switch(datatype.getDataType()){","caseSQLTokenizer.BIT:","return((Boolean)obj).booleanValue()?\"1\":\"0\";","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if(token!=null)offset=token.offset;","previousToken();","Expressionexpr=expression(cmdCreate,0);","SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;","Stringdef=newString(sql,offset,length);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(SHORT_MONTHS[details.month]);","buf.append(\'\');","formatNumber(details.day,2,buf);","buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicStringgetCatalogTerm(){","return\"database\";","publicbooleanisCatalogAtStart(){","returntrue;","publicStringgetCatalogSeparator(){","return\".\";"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["RowSourcefrom;","privateExpressionsgroupBy;","privateExpressionhaving;","privateExpressionsorderBy;","privatebooleanisAggregateFunction;","privateintmaxRows=-1;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.CREATE:","sizeUsed=sizePhysical=offset;","break;","caseSQLTokenizer.UPDATE:","if(status!=UPDATE_POINTER){","sizeUsed=offset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalintgetFunction(){returnSQLTokenizer.RAND;}","booleanisNull()throwsException{","returngetParams().length==1&&param1.isNull();","finaldoublegetDouble()throwsException{","if(getParams().length==0)","returnrandom.nextDouble();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|"],
"["raFile=createFile(con,database);","firstPage=8;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.CREATE);","intcount=columns.size();","store.writeInt(count);","for(inti=0;i\<count;i++){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["SQLTokentoken;","do{","token=nextToken(MISSING_IDENTIFIER);","token=addColumn(token,cmd);","}while(token!=null&&token.value==SQLTokenizer.COMMA);","returncmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintLOCK_WRITE=3;//occuronwriteandpreventeveryotheraccesstothedata,itisonlyoneLOCK_WRITEperpagepossible","staticfinalintLOCK_TAB=4;//lockthetotaltable","TableView(Stringname,Columnscolumns){","this.name=name;","this.columns=columns;","staticTableViewload(SSConnectioncon,Databasedatabase,Stringname)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["SQLTokentoken=nextToken(MISSING_EXPRESSION);","try{","intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.day,2,buf);","returnbuf.toString();","case111://Japanyy/mm/dd","formatNumber(details.year,4,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["@Override","IndexNodeloadRef(longoffset)throwsSQLException{","StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.INSERT,fileOffset);","MemoryStreaminput=newMemoryStream();","FileIndexNodenode=newFileIndexNode(getUnique(),(char)input.readShort(),file);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["returnbuf.toString();","case14:","case114://hh:mi:ss:mmm(24h)","formatNumber(details.hour,2,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["Object[]params={newInteger(version),file.getName()};","throwSmallSQLException.create(Language.FILE_TOONEW,params);","}catch(Throwablee){","if(raFile!=null)","try{","raFile.close();"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["returntrue;","publicbooleansupportsExpressionsInOrderBy(){","returntrue;","publicbooleansupportsOrderByUnrelated(){","returntrue;","publicbooleansupportsGroupBy(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnrow;","privatefinalintgetBitCount(){","intsize=dataSources.size();","intbitCount=0;","while(size\>0){","bitCount++;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["dataType=SQLTokenizer.LONGVARCHAR;","previousToken();","switch(dataType){","caseSQLTokenizer.RAW:","dataType=SQLTokenizer.VARBINARY;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.fileOffset=fileOffset;","finalvoidsetPageData(byte[]data,intsize){","page=data;","pageSize=size;","@Override","longcommit()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["publicStatementgetStatement(){","returnst;","publicObjectgetObject(inti,Mapmap)throwsSQLException{","returngetObject(i);","publicRefgetRef(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blobobject\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["StringgetString(){","Objectobj=getObject();","if(obj==null)returnnull;","if(dataType==SQLTokenizer.BIT){","return(obj==Boolean.TRUE)?\"1\":\"0\";","returnobj.toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["longtemp=0;","intv1=value.length;","for(intv2=val2.length;v2\>0;){","temp=(value[--v1]&0xFFFFFFFFL)+(val2[--v2]&0xFFFFFFFFL)+(temp\>\>\>32);","value[v1]=(int)temp;","booleanuebertrag=(temp\>\>\>32)!=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["staticfinalintISNOTNULL=ISNULL+1;//ISNOTNULL","staticfinalintADD=71;//+","staticfinalintSUB=72;//-","staticfinalintMUL=81;//*","staticfinalintDIV=82;///","staticfinalintMOD=83;//%"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["publicintgetMaxUserNameLength(){","return0;","publicintgetDefaultTransactionIsolation(){","returnConnection.TRANSACTION_READ_COMMITTED;","publicbooleansupportsTransactions(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["expr=null;//Onlyforthecompiler","break;","expr=newExpressionName(Expression.SUM);","expr.setParams(params);","Expressionexpr2=newExpressionName(Expression.COUNT);","expr2.setParams(params);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintSOUNDEX=1118;","staticfinalintSPACE=1119;","staticfinalintSUBSTRING=1120;","staticfinalintTRIM=1121;","staticfinalintUCASE=1122;//laststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["inttype;","Stringcatalog;","Stringname;","SSResultSetrs;","intupdateCount=-1;","Expressionsparams=newExpressions();"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["StringdbPath=(idx2\>0)?url.substring(idx1+1,idx2):url.substring(idx1+1);","props.setProperty(\"dbpath\",dbPath);","if(idx2\>0){","StringpropsString=url.substring(idx2+1).replace(\'&\',\';\');","StringTokenizertok=newStringTokenizer(propsString,\";\");","while(tok.hasMoreTokens()){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["longfactor=1;","if(places\>0){","for(inti=0;i\<places;i++){","factor*=10;","value*=factor;","}else{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRound.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionTruncate.java|"],
"["writeShort((int)(value\>\>48));","writePointer(offset+pointerSize+2);","writeShort(0);","writeShort((int)(value\>\>32));","writePointer(offset+pointerSize+2);","writeShort(0);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["if(operation!=0){","scroll=newJoinScrollIndex(type,left,right,leftEx,rightEx,operation);","returntrue;","returnfalse;","privateintcreateJoinScrollIndex(ExpressionArithmeticcond,ExpressionsleftEx,ExpressionsrightEx,intoperation)throwsException{","Expression[]params=cond.getParams();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionRTrimextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.RTRIM;","finalbooleanisNull()throwsException{","returnparam1.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRTrim.java|"],
"["Expression[]params=expr.getParams();","if(params!=null){","for(intp=0;p\<params.length;p++){","addInternalExpressionFromSelect(params[p]);","return-1;","finalprivatevoidpatchExpressions(Expressionsexprs)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteLong(longvalue){","verifyFreePufferSize(8);","puffer[offset++]=(byte)(value\>\>56);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["byte[]bytes=param1.getBytes();","intstart=0;","intlength=bytes.length;","while(start\<length&&bytes[start]==0){","start++;","length-=start;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLTrim.java|"],
"["importjava.util.Calendar;","importjava.net.URL;","importsmallsql.database.language.Language;","publicclassSSResultSetimplementsResultSet{","SSResultSetMetaDatametaData=newSSResultSetMetaData();","privateCommandSelectcmd;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["|(((long)(puffer[offset++]&0xFF))\<\<48)","|(((long)(puffer[offset++]&0xFF))\<\<40)","|(((long)(puffer[offset++]&0xFF))\<\<32)","|((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnnewMutableNumeric(getBoolean()?1:0);","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["buf.append(\'\');","formatNumber(details.year,4,buf);","buf.append(\'\');","formatHour12(details.hour,buf);","buf.append(\':\');","formatNumber(details.minute,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["status=DELETED;","type=SQLTokenizer.DELETE;","createWriteLock();","writeFinsh(con);","StorePageLinkgetLink(){","return((TableStorePageInsert)storePage).getLink();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["longresult=millis;","result+=second*1000;","result+=minute*60000;","result+=hour*3600000;","result+=(day-1)*86400000L;","if(month\>11){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["switch(dataType){","caseSQLTokenizer.BOOLEAN:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getBoolean()==right.getBoolean();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returncurrentDS.getNumeric(colIdx);","finalObjectgetObject(intcolIdx)throwsException{","returncurrentDS.getObject(colIdx);","finalStringgetString(intcolIdx)throwsException{","returncurrentDS.getString(colIdx);","finalbyte[]getBytes(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["row=0;","finalvoidnoRow(){","rowSource.noRow();","row=0;","finalbooleanrowInserted(){","returnrowSource.rowInserted();"]": ["|project://smallsql/src/smallsql/database/Where.java|","|project://smallsql/src/smallsql/database/Distinct.java|"],
"["store.page=newbyte[DEFAULT_PAGE_SIZE];","break;","caseSQLTokenizer.SELECT:","caseSQLTokenizer.UPDATE:","caseSQLTokenizer.DELETE:","if(storePage.page==null){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getPrimaryKeys(SSConnectioncon,Stringtable)throwsSQLException{","Listrows=newArrayList();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["DataSourcegetDataSource(){","returnfromEntry;","StringgetTableAlias(){returntableAlias;}","finalTableViewgetTable(){","returntable;","finalintgetColumnIndex(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["SQLTokenizer.getKeyWord(getFunction())","};","returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC,params);","SQLExceptioncreateUnspportedConversion(intdataType){","Object[]params={","SQLTokenizer.getKeyWord(dataType),"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["privatevoidresizeValue(inthighBits){","intval[]=newint[value.length+1];","val[0]=highBits;","System.arraycopy(value,0,val,1,value.length);","value=val;","voidsub(MutableNumericnum){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["column.setPrecision(expr.getPrecision());","finalvoidaddRow(ExpressionValue[]row){","rowList.add(row);","finalColumngetColumn(intcolIdx){","returncolumns.get(colIdx);","finalvoidaddColumn(Columncolumn){"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["staticfinalintWEEK=1218;","staticfinalintYEAR=1219;//lasttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","static{","addKeyWord(\"CURDATE\",CURDATE);","addKeyWord(\"CURTIME\",CURTIME);","addKeyWord(\"CURRENT_DATE\",CURRENTDATE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["throwSmallSQLException.create(Language.DATETIME_INVALID);","if(month\>=12){","throwSmallSQLException.create(Language.MONTH_TOOLARGE,datetime);","if(day\>=32){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==31){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicvoidsetShort(StringparameterName,shortx)throwsSQLException{","setShort(findParameter(parameterName),x);","publicvoidsetInt(StringparameterName,intx)throwsSQLException{","setInt(findParameter(parameterName),x);","publicvoidsetLong(StringparameterName,longx)throwsSQLException{","setLong(findParameter(parameterName),x);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","returndetails2.year-details1.year;","default:thrownewError();","longgetLong()throwsException{","returngetInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["SearchNodeprev=null;","SearchNodenode=searchTree;","booleanwasNextEntry=true;","for(inti=0;i\<letters.length;i++){","charc=(char)(letters[i]|0x20);","while(node!=null&&node.letter!=c){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(rowIdx\<0){","beforeFirst();","returnfalse;","}else{","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["formatNumber(details.year%100,2,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["throwSmallSQLException.create(Language.COL_MISSING,sqlColName);","if(columnExpressions.size()!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","if(table==null||tableTimestamp!=table.getTimestamp())compile(con);","finalIndexDescriptionsindexes=table.indexes;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["SQLParserparser=newSQLParser();","cmd=parser.parse(con,sql);","top=cmd.getMaxRows();","publicResultSetexecuteQuery()throwsSQLException{","executeImp();","returncmd.getQueryResult();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["returnfalse;","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BOOLEAN\"});","@Override","intgetInt(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privatestaticfinalintUPDATE_POINTER=2;","privatestaticfinalintUPDATED_PAGE=3;","finalprivateTabletable;","privatebooleansharedPageData;","privateStorePagestorePage;","privatelongfilePos;//Positioninthefile"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidwriteInt(intvalue){","intnewSize=offset+4;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["default:","Object[]param={\"ALTER\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","CommandalterTable(Stringcatalog,Stringname)throwsSQLException{","SQLTokentokenType=nextToken(MISSING_ADD_ALTER_DROP);","CommandTablecmd=newCommandTable(con.log,catalog,name,tokenType.value);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intoffset=token.offset+token.length;","token=nextToken();","if(token!=null)offset=token.offset;","previousToken();","expressions.add(expression(cmd,0));","SQLTokenlast=lastToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{INDEX_CORRUPT,\"Erroreduranteilcaricamentodell\'\'indice.Filedell\'\'indicecorrotto:\'\'{0}\'\'.\"},","{INDEX_TOOMANY_EQUALS,\"Troppevociugualinell\'\'indice.\"},","{FILE_TOONEW,\"Laversione({0})delfile\'\'{1}\'\'Ã¨tropporecenteperquestoruntime.\"},","{FILE_TOOOLD,\"Laversione({0})delfile\'\'{1}\'\'Ã¨troppovecchiaperquestoruntime.\"},","{FILE_CANT_DELETE,\"File\'\'(0)\'\'nonpossonoessereeliminati.\"},","{ROW_0_ABSOLUTE,\"Ilnumerodiriga0nonÃ¨validoperilmetodo\'\'absolute()\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(raFile!=null&&page!=null){","ByteBufferbuffer=ByteBuffer.wrap(page,0,pageSize);","synchronized(raFile){","if(fileOffset\<0){","fileOffset=raFile.size();","raFile.position(fileOffset);"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["Stringpart=localeStr;","while(true){","StringlangClassName=Language.class.getName()+\'_\'+part;","try{","return(Language)Class.forName(langClassName).newInstance();","catch(IllegalAccessExceptione){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["abstractbooleanisNull(intoffset)throwsException;","abstractbooleangetBoolean(intoffset,intdataType)throwsException;","abstractbyte[]getBytes(intoffset,intdataType)throwsException;","abstractdoublegetDouble(intoffset,intdataType)throwsException;","abstractfloatgetFloat(intoffset,intdataType)throwsException;","abstractintgetInt(intoffset,intdataType)throwsException;"]": ["|project://smallsql/src/smallsql/database/Store.java|"],
"["{TABLE_DEADLOCK,\"Deadlock:nonsipuÃ²mettereunlocksullatabella\'\'{0}\'\'.\"},","{TABLE_OR_VIEW_MISSING,\"Latabella/view\'\'{0}\'\'nonesiste.\"},","{TABLE_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonincludeunatabellaSmallSQLvalida.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"Ilfile\'\'{0}\'\'nonÃ¨uncontenitorevalidoditabella/view.\"},","{TABLE_EXISTENT,\"Latabella/vista\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'nonÃ¨unatabella.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returncreateJoinScrollIndex((ExpressionArithmetic)param1,leftEx,rightEx,operation);","return0;","if(operation==0){","operation=op;","if(operation!=op){","return0;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["{UNSUPPORTED_DATATYPE_FUNC,\"Unsupporteddatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"Unsupportedconversiontodatatype\'\'{0}\'\'forfunction\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"UnsupportedtypeforCONVERTfunction:{0}.\"},","{UNSUPPORTED_TYPE_SUM,\"Unsupporteddatatype\'\'{0}\'\'forSUMfunction.\"},","{UNSUPPORTED_TYPE_MAX,\"Unsupporteddatatype\'\'{0}\'\'forMAXfunction.\"},","{UNSUPPORTED_CONVERSION,\"Can\'\'tconvert\'\'{0}\'\'[{1}]to\'\'{2}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnMath.max(left.getScale(),right.getScale());","caseMUL:","returnleft.getScale()+right.getScale();","caseDIV:","returnMath.max(left.getScale()+5,right.getScale()+4);","caseNEGATIVE:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{CUSTOM_MESSAGE,\"01000\"},","{UNSUPPORTED_OPERATION,\"01000\"},","{CANT_LOCK_FILE,\"01000\"},","{DB_EXISTENT,\"01000\"},","{DB_NONEXISTENT,\"01000\"},","{DB_NOT_DIRECTORY,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnconstraintType==SQLTokenizer.PRIMARY||constraintType==SQLTokenizer.UNIQUE;","finalStringsgetColumns(){","returncolumns;","finalintmatchFactor(Stringsstrings){","if(strings.size()\<columns.size())","returnInteger.MAX_VALUE;//doesnotmap"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["StringBufferbuf=newStringBuffer();","if(value.length==0||signum==0){","buf.append(\'0\');","}else{","if(value.length==1&&(value[0]\>0)){","buf.append(Integer.toString(value[0]));"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(k\>=i)break;//precedingtokensareonlydigitsthatitisnotanidentifierelseafloatingnumber","case\'-\':","if(comment!=NOT_COMMENT){","break;","if(comment==LINE_COMMENT){","if(c==\'\\r\'||c==\'\\n\'){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(newValueinstanceofDouble)","this.dataType=SQLTokenizer.DOUBLE;","else","if(newValueinstanceofNumber)","this.dataType=SQLTokenizer.DECIMAL;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["throwSmallSQLException.create(Language.RSET_NOT_INSERT_ROW);","getCmd().insertRow(st.con,values);","clearRowBuffer();","privatevoidtestNotInsertRow()throwsSQLException{","if(isInsertRow){","throwSmallSQLException.create(Language.RSET_ON_INSERT_ROW);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privateExpressionget(intcolIdx)throwsException{","if(currentRow==null)throwSmallSQLException.create(Language.ROW_NOCURRENT);","returncurrentRow[colIdx];","intgetRowCount(){","returnrowList.size();","voidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["continue;","default:","if(isKeyword(token)){","previousToken();","returnlist;","throwcreateSyntaxError(token,MISSING_TOKEN_LIST);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["SSResultSetMetaDatametaData=newSSResultSetMetaData();","privateCommandSelectcmd;","privatebooleanwasNull;","SSStatementst;","privatebooleanisUpdatable;","privatebooleanisInsertRow;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["publicbooleansupportsDifferentTableCorrelationNames(){","returntrue;","publicbooleansupportsExpressionsInOrderBy(){","returntrue;","publicbooleansupportsOrderByUnrelated(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["ExpressionrightExpr2=expression(cmd,level);","leftExpr=newExpressionArithmetic(leftExpr,rightExpr,rightExpr2,operation);","break;","caseSQLTokenizer.IN:","nextToken(MISSING_PARENTHESIS_L);","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["rowIdx=(row\>0)?","Math.min(row-1,rowList.size()):","Math.max(row+rowList.size(),-1);","returnmove();","finalbooleanrelative(introws){","if(rows==0)return(currentRow!=null);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["packagesmallsql.database;","importjava.io.*;","importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","classFileIndexextendsIndex{","staticvoidprint(Indexindex,Expressionsexpressions){"]": ["|project://smallsql/src/smallsql/database/FileIndex.java|"],
"["returntrue;","publicbooleansupportsGetGeneratedKeys(){","returntrue;","publicResultSetgetSuperTypes(Stringcatalog,StringschemaPattern,StringtypeNamePattern)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodgetSuperTables()notyetimplemented.\");","publicResultSetgetAttributes(Stringcatalog,StringschemaPattern,StringtypeNamePattern,StringattributeNamePattern)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["row[2]=tableName;//TABLE_NAME","row[3]=col.getName();//COLUMN_NAME","row[4]=Utils.getShort(SQLTokenizer.getSQLDataType(col.getDataType()));//DATA_TYPE","row[5]=SQLTokenizer.getKeyWord(col.getDataType());//TYPE_NAME","row[6]=Utils.getInteger(col.getColumnSize());//COLUMN_SIZE","row[8]=Utils.getInteger(col.getScale());//DECIMAL_DIGITS"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(m==\'%\'||m==\'_\'){","mIdx--;","break;","mIdx=lastmIdx;","continueweiter;","sIdx++;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["addKeyWord(\"UCASE\",UCASE);","staticfinalintCURDATE=1200;//firsttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","staticfinalintCURRENTDATE=1201;","staticfinalintCURTIME=1202;","staticfinalintDAYNAME=1203;","staticfinalintDAYOFMONTH=1204;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.BLOB:","returnreadLongBinary();","caseSQLTokenizer.TIMESTAMP:","returnnewDateTime(readTimestamp(),SQLTokenizer.TIMESTAMP);","caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintUNIQUE=254;","staticfinalintCLUSTERED=255;","staticfinalintNONCLUSTERED=256;","staticfinalintREFERENCES=257;","staticfinalintUNION=260;","staticfinalintALL=261;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this();","add(value);","LongTreeList(StoreImplinput){","intreadSize=input.readInt();","data=input.readBytes(readSize);","finalvoidsave(StoreImploutput){"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["intoldOffset=offset;","if(data.length\<size+4+pointerSize)resize();","System.arraycopy(data,oldOffset,data,oldOffset+2+pointerSize,size-oldOffset);","size+=2+pointerSize;","writeShort(octet);","writePointer(size);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["currentDS.nullRow();","row=0;","finalvoidnoRow(){","currentDS.noRow();","row=0;","finalvoidexecute()throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["SQLTokenizer.BLOB,","SQLTokenizer.NULL};","privatestaticintNVARCHAR_IDX=Utils.indexOf(SQLTokenizer.NVARCHAR,DatatypeRange);","privatestaticintINT_IDX=Utils.indexOf(SQLTokenizer.INT,DatatypeRange);","privatestaticintBIGINT_IDX=Utils.indexOf(SQLTokenizer.BIGINT,DatatypeRange);","privatestaticintMONEY_IDX=Utils.indexOf(SQLTokenizer.MONEY,DatatypeRange);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["while(pattern.length()\>mIdx){","if(Character.toUpperCase(pattern.charAt(mIdx++))!=\'%\')returnfalse;","while(value.length()\>sIdx&&!range)returnfalse;","returntrue;","staticintlong2int(longvalue){","if(value\>Integer.MAX_VALUE)"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["intlength=readShort()&0xFFFF;","returnreadBytes(length);","voidwriteLongBinary(byte[]daten)throwsException{","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,daten.length+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(daten.length);","store.writeBytes(daten);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalintsize(){","returnsize;","finallongget1(intidx){","if(idx\>=size)","thrownewIndexOutOfBoundsException(\"Index:\"+idx+\",Size:\"+size);","returndata[idx\<\<1];"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["ExpressionArithmetic(Expressionleft,ExpressionsinList,intoperation){","super(FUNCTION);","this.left=left;","this.operation=operation;","Expression[]params;","if(inList!=null){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["FileIndexNodenode=newFileIndexNode(getUnique(),(char)input.readShort(),file);","node.fileOffset=offset;","node.load(store);","returnnode;","staticFileIndexNodeloadRootNode(booleanunique,FileChannelfile,longoffset)throwsException{","StorePagestorePage=newStorePage(null,-1,file,offset);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["cmd.setParamValue(parameterIndex,x,SQLTokenizer.VARCHAR);","publicvoidsetBytes(intparameterIndex,byte[]x)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.BINARY);","publicvoidsetDate(intparameterIndex,Datex)throwsSQLException{","checkStatement();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["if(token.value==SQLTokenizer.COMMA){","style=expression(cmd,0);","}else","previousToken();","nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,style);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"BETWEEN\",BETWEEN);","addKeyWord(\"LIKE\",LIKE);","addKeyWord(\"IN\",IN);","staticfinalintABS=1000;//firstnumericfunction--\>seeSSDatabaseMetaData.getNumericFunctions","staticfinalintACOS=1001;","staticfinalintASIN=1002;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnisCurrentRow;","finalbooleannext()throwsException{","booleanoldIsCurrentRow=isCurrentRow;","do{","isCurrentRow=rowSource.next();","}while(isCurrentRow&&!isValidRow());"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["con.log.println(\"Statement.close\");","isClosed=true;","cmd=null;","finalpublicintgetMaxFieldSize(){","returnmaxFieldSize;","finalpublicvoidsetMaxFieldSize(intmax){"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["privatevoidcreateIndex(ExpressionsrightEx)throwsException{","index=newIndex(false);","right.beforeFirst();","while(right.next()){","index.addValues(right.getRowPosition(),rightEx);","booleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["finalvoidnoRow(){","currentDS.noRow();","row=0;","finalvoidexecute()throwsException{","for(inti=0;i\<dataSources.size();i++){","dataSources.get(i).execute();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["if(newRow\>0){","beforeFirst();","while(newRow--\>0){","if(!next()){","returnfalse;","}else{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["longreadDate(){","returnreadInt()*86400000L;","voidwriteSmallDateTime(longdatetime){","writeInt((int)(datetime/60000));","longreadSmallDateTime(){","returnreadInt()*60000L;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncmd;","privateCommandinsert()throwsSQLException{","SQLTokentoken=nextToken(MISSING_INTO);","CommandInsertcmd=newCommandInsert(con.log,nextIdentifier());","intparthesisCount=0;","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Object[][]result=newObject[catalogs.size()][];","catalogs.toArray(result);","returnresult;","StringsgetTables(StringtablePattern){","Stringslist=newStrings();","Filedirs[]=directory.listFiles();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnlong2bytes(Double.doubleToLongBits(value));","staticbyte[]float2bytes(floatvalue){","returnint2bytes(Float.floatToIntBits(value));","staticbyte[]long2bytes(longvalue){","byte[]result=newbyte[8];","result[0]=(byte)(value\>\>56);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["sIdx++;","while(pattern.length()\>mIdx&&value.length()\>sIdx){","m=Character.toUpperCase(pattern.charAt(mIdx++));","if(Character.toUpperCase(value.charAt(sIdx))!=m){","if(m==\'%\'||m==\'_\'){","mIdx--;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["buf.append(\':\');","formatMillis(details.millis,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case10://USAmm-dd-yy","formatNumber(details.month+1,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(start==mid)return-1;","returnfindNodePos(digit,start,mid-1);","voidsave(StoreImploutput)throwsSQLException{","output.writeShort(digit);","intlength=remainderKey==null?0:remainderKey.length;","output.writeInt(length);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["break;","caseSQLTokenizer.RIGHT:","token=nextToken(MISSING_OUTER_JOIN);","if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.RIGHT_JOIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewExpressionValue(newLong(tok),SQLTokenizer.BIGINT);","}else{","checkValidIdentifier(tok,token);","ExpressionNameexpr=newExpressionName(tok);","if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicstaticfinalStringTABLE_MODIFIED=\"SS-0194\";","publicstaticfinalStringTABLE_DEADLOCK=\"SS-0195\";","publicstaticfinalStringTABLE_OR_VIEW_MISSING=\"SS-0196\";","publicstaticfinalStringTABLE_FILE_INVALID=\"SS-0197\";","publicstaticfinalStringTABLE_OR_VIEW_FILE_INVALID=\"SS-0198\";","publicstaticfinalStringTABLE_EXISTENT=\"SS-0199\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["Expressionstyle=null;","if(isEscape){","expr=expression(cmd,0);","nextToken(MISSING_COMMA);","col=datatype(isEscape);","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncreateIndex(false);","caseSQLTokenizer.PROCEDURE:","returncreateProcedure();","caseSQLTokenizer.UNIQUE:","do{","token=nextToken(COMMANDS_CREATE_UNIQUE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["right.next();","returntrue;","}else","isFullNotValid[fullRightRowCounter-1]=result;","returnresult;","privatebooleangetBoolean()throwsException{"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returncurrentDS.getDataType(colIdx);","TableViewgetTableView(){","returncurrentDS.getTableView();","finalbooleanisScrollable(){","returnfalse;//TODOperformance,canimplementitifalldatasourcesimplementit","finalvoidbeforeFirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["publicvoidsetDate(StringparameterName,Datex,Calendarcal)throwsSQLException{","setDate(findParameter(parameterName),x,cal);","publicvoidsetTime(StringparameterName,Timex,Calendarcal)throwsSQLException{","setTime(findParameter(parameterName),x,cal);","publicvoidsetTimestamp(StringparameterName,Timestampx,Calendarcal)throwsSQLException{","setTimestamp(findParameter(parameterName),x,cal);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["if((nextEntry==0&&!firstNode)||nextEntry\>octet){","offset-=2;","while(true){","if(shift!=0){","offset=insertNode(octet);","}else{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.WHERE:","caseSQLTokenizer.GROUP:","caseSQLTokenizer.HAVING:","caseSQLTokenizer.ORDER:","caseSQLTokenizer.COMMA:","caseSQLTokenizer.SET:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:","Stringstr=obj.toString();","if(str.indexOf(\'-\')\>0||str.indexOf(\':\')\>0)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["updateDouble(findColumn(columnName),x);","publicvoidupdateBigDecimal(StringcolumnName,BigDecimalx)throwsSQLException{","updateBigDecimal(findColumn(columnName),x);","publicvoidupdateString(StringcolumnName,Stringx)throwsSQLException{","updateString(findColumn(columnName),x);","publicvoidupdateBytes(StringcolumnName,byte[]x)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintSQL_TIME=1363;","staticfinalintSQL_TIMESTAMP=1364;","staticfinalintSQL_TINYINT=1365;","staticfinalintSQL_VARBINARY=1366;","staticfinalintSQL_VARCHAR=1367;","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanrelative(introws)throwsException{","returnfrom.relative(rows);","finalintgetRow()throwsException{","introw=from.getRow();","if(maxRows\>=0&&row\>maxRows)return0;","returnrow;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.SUBSTRING:","invalidParamCount=(paramCount!=3);","expr=newExpressionFunctionSubstring();","break;","caseSQLTokenizer.UCASE:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["DriverPropertyInfo[]driverInfos=newDriverPropertyInfo[1];","driverInfos[0]=newDriverPropertyInfo(\"dbpath\",props.getProperty(\"dbpath\"));","returndriverInfos;","publicintgetMajorVersion(){","return0;","publicintgetMinorVersion(){"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["default:","if(range){//%wildcardisactive","for(;sIdx\<value.length();sIdx++){","if(Character.toUpperCase(value.charAt(sIdx))==m)break;//Countermustn\'tincrementbeforebreak","if(sIdx\>=value.length())returnfalse;","intlastmIdx=mIdx-1;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnfalse;","publicbooleannullsAreSortedHigh(){","returnfalse;","publicbooleannullsAreSortedLow(){","returntrue;","publicbooleannullsAreSortedAtStart(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["setName(name);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionName))returnfalse;","if(((ExpressionName)expr).fromEntry!=fromEntry)returnfalse;","returntrue;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["default:","thrownewError();","privateCommandexecute()throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Execute\");","privateExpressionsexpressionParenthesisList(Commandcmd)throwsSQLException{","Expressionslist=newExpressions();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(((SSSavepoint)savepoint).transactionTime!=transactionTime){","throwSmallSQLException.create(Language.SAVEPT_INVALID_TRANS);","rollback(savepoint.getSavepointId());","return;","throwSmallSQLException.create(Language.SAVEPT_INVALID_DRIVER,savepoint);","publicvoidreleaseSavepoint(Savepointsavepoint)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["token=nextToken(MISSING_EXPRESSION);","try{","intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnUtils.getInteger(readInt());","caseSQLTokenizer.BIGINT:","returnnewLong(readLong());","caseSQLTokenizer.REAL:","returnnewFloat(readFloat());","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["booleanisExpressionsFromThisRowSource(Expressionscolumns){","for(inti=0;i\<columns.size();i++){","ExpressionNameexpr=(ExpressionName)columns.get(i);","if(this!=expr.getDataSource()){","returnfalse;","returntrue;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["if(src1==null)returnfalse;","intlength=src1.length;","if(length!=charCount)returnfalse;","for(inti=0,d=charCount-1;i\<length;i++){","if(src1[i]!=(char)((src2\>\>(d--\<\<4))))returnfalse;","returntrue;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["if(token.value==SQLTokenizer.OUTER)","token=nextToken(MISSING_JOIN);","fromSource=join(cmd,tables,fromSource,Join.FULL_JOIN);","break;","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.ESCAPE_R:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["type=SQLTokenizer.DATE;","else","if(dateinstanceofjava.sql.Time)","type=SQLTokenizer.TIME;","else","type=SQLTokenizer.TIMESTAMP;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.LONG);","privatelonggetLongImpl()throwsjava.lang.Exception{","if(isNull())return0;","switch(operation){","caseADD:returnleft.getLong()+right.getLong();","caseSUB:returnleft.getLong()-right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalStringfkTable;","finalIndexDescriptionpk;","finalIndexDescriptionfk;","finalintupdateRule=DatabaseMetaData.importedKeyNoAction;","finalintdeleteRule=DatabaseMetaData.importedKeyNoAction;","ForeignKey(StringpkTable,IndexDescriptionpk,StringfkTable,IndexDescriptionfk){"]": ["|project://smallsql/src/smallsql/database/ForeignKey.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.UNIQUEIDENTIFIER:{","byte[]leftBytes=left.getBytes();","byte[]rightBytes=right.getBytes();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["writeInt(status);","writeInt(sizeUsed);","writeInt(sizePhysical);","writeInt(0);//nextPageOffset","writeLong(filePosUpdated);//Pointerofanupdatedpage","storePage.setPageData(page,sizeUsed);//TODOpagesollteeigentlichbeimeinlesengesetztsein"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MAX);","break;","caseSQLTokenizer.MIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.MIN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(currentInsertedRow()==0){","scrollStatus.afterLast();","row--;","if(currentInsertedRow()\>=0){","rowSource.setRowPosition(insertedRows.get(currentInsertedRow()));","returntrue;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["caseSQLTokenizer.ACOS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionACos();","break;","caseSQLTokenizer.ASIN:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleansupportsTableCorrelationNames(){","returntrue;","publicbooleansupportsDifferentTableCorrelationNames(){","returntrue;","publicbooleansupportsExpressionsInOrderBy(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["tableView=TableView.load(con,this,tableName);","tableViews.put(tableName,tableView);","returntableView;","staticvoiddropTable(SSConnectioncon,Stringcatalog,StringtableName)throwsException{","getDatabase(con,catalog).dropTable(con,tableName);","voiddropTable(SSConnectioncon,StringtableName)throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["leftExpr=newExpressionArithmetic(leftExpr,operation);","break;","caseSQLTokenizer.NOT:","token=nextToken(MISSING_BETWEEN_IN);","previousToken();","isNot=true;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatestaticfinalint[]COMMANDS_DROP={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE};","privatestaticfinalint[]COMMANDS_SET={SQLTokenizer.TRANSACTION};","privatestaticfinalint[]COMMANDS_CREATE_UNIQUE={SQLTokenizer.INDEX,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]MISSING_TABLE={SQLTokenizer.TABLE};","privatestaticfinalint[]ESCAPE_MISSING_CLOSE={SQLTokenizer.ESCAPE_R};","privatestaticfinalint[]MISSING_EXPRESSION={SQLTokenizer.VALUE};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["return(int)getDoubleImpl();","throwcreateUnspportedConversion(SQLTokenizer.INT);","privateintgetIntImpl()throwsjava.lang.Exception{","switch(operation){","caseADD:returnleft.getInt()+right.getInt();","caseSUB:returnleft.getInt()-right.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["dataSourceIdx=(int)rowPosition&mask;","currentDS=dataSources.get(dataSourceIdx);","currentDS.setRowPosition(rowPosition\>\>bitCount);","finalbooleanrowInserted(){","returncurrentDS.rowInserted();","finalbooleanrowDeleted(){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["Object[]param={\"ALTERTABLE\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandSetset()throwsSQLException{","SQLTokentoken=nextToken(COMMANDS_SET);","switch(token.value){","caseSQLTokenizer.TRANSACTION:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["importjava.nio.ByteBuffer;","importjava.nio.channels.FileChannel;","importsmallsql.database.language.Language;","classViewextendsTableView{","finalStringsql;","finalCommandSelectcommandSelect;"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["Expressionslist=newExpressions();","getExpressionNameFromTree(list,tree);","returnlist;","privatestaticfinalvoidgetExpressionNameFromTree(Expressionslist,Expressiontree){","if(tree.getType()==Expression.NAME){","list.add(tree);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseISNULL:","caseISNOTNULL:","returnSQLTokenizer.BOOLEAN;","default:","returngetDataType(left,right);","intgetScale(){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnfalse;","staticclassEntry{","finallongkey;","finalTableStorePagevalue;","Entrynext;","Entry(longk,TableStorePagev,Entryn){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["if(node==null){","value=0;","wasWhiteSpace=false;","break;","c|=0x20;//caseinsensitive","while(node!=null&&node.letter!=c)node=node.nextEntry;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["single.clear();","single.add(columns.get(i));","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","continue;","returnfalse;","returntrue;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["publicString[][]getEntries(){","returnENTRIES;","privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"Operazionenonsupportata:{0}.\"},","{CANT_LOCK_FILE,\"Impossibilebloccareilfile\'\'{0}\'\'.UndatabaseSmallSQLDatabasepuÃ²essereapertodaununicoprocesso.\"},","{DB_EXISTENT,\"Ildatabase\'\'{0}\'\'Ã¨giÃ\u00a0esistente.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["return(int)readTime();","caseSQLTokenizer.DATE:","return(int)readDate();","caseSQLTokenizer.SMALLDATETIME:","return(int)readSmallDateTime();","default:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","count=readByte();","offset+=2;","if(!isNull)offset+=count*4;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["c=\'3\';","break;","case\'L\':","c=\'4\';","break;","case\'M\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["returnreadBytes(length);","voidwriteLongBinary(byte[]daten)throwsException{","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,daten.length+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(daten.length);","store.writeBytes(daten);","writeLong(store.writeFinsh(null));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["voidsetParams(Expression[]params){","super.setParams(params);","if(params.length\>0)param1=params[0];","if(params.length\>1)param2=params[1];","if(params.length\>2)param3=params[2];","if(params.length\>3)param4=params[3];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["publicintgetColumnCount()throwsSQLException{","returncolumns.size();","publicbooleanisAutoIncrement(intcolumn)throwsSQLException{","returngetColumnExpression(column).isAutoIncrement();","publicbooleanisCaseSensitive(intcolumn)throwsSQLException{","returngetColumnExpression(column).isCaseSensitive();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicbooleansupportsCatalogsInProcedureCalls(){","returntrue;","publicbooleansupportsCatalogsInTableDefinitions(){","returntrue;","publicbooleansupportsCatalogsInIndexDefinitions(){","returntrue;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnSQLTokenizer.CHAR;","finalStringgetString()throwsException{","if(isNull())returnnull;","charchr=(char)param1.getInt();","returnString.valueOf(chr);","finalintgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionChar.java|"],
"["if(!result){","switch(type){","caseJoin.LEFT_JOIN:","caseJoin.FULL_JOIN:","isOuterValid=false;","right.nullRow();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeExpression(c,valueExpress);","store.writeFinsh(con);","for(inti=0;i\<indexes.size();i++){","indexes.get(i).writeFinish(con);","updateCount++;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["intgetScale(){","switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","MutableNumericobj=getNumeric();","return(obj==null)?0:obj.getScale();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["}elsefullRightRowCounter++;","}elsefullRightRowCounter++;","isBeforeFirst=false;","}while(result&&!getBoolean());","isOuterValid=false;","if(type==Join.FULL_JOIN){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["Listrows=newArrayList();","Stringstables=getTables(tablePattern);","for(inti=0;i\<tables.size();i++){","StringtableName=tables.get(i);","try{","TableViewtab=getTableView(con,tableName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["if(Utils.like(name,tablePattern)){","list.add(name.substring(0,name.length()-Utils.TABLE_VIEW_EXTENTION.length()));","returnlist;","Object[][]getColumns(SSConnectioncon,StringtablePattern,StringcolPattern)throwsException{","Listrows=newArrayList();","Stringstables=getTables(tablePattern);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["ObjectInputStreamois=newObjectInputStream(bais);","returnFloat.parseFloat(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2float(readLongBinary());","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateintdataType=SQLTokenizer.TIMESTAMP;","staticfinalint[]MONTH_DAYS={0,31,59,90,120,151,181,212,243,273,304,334};","privatestaticfinalString[]SHORT_MONTHS=newDateFormatSymbols().getShortMonths();","DateTime(longtime,intdataType){","switch(dataType){","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["importsmallsql.database.language.Language;","abstractclassTableView{","staticfinalintMAGIC_TABLE=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'T\';","staticfinalintMAGIC_VIEW=\'S\'\<\<24|\'Q\'\<\<16|\'L\'\<\<8|\'V\';","staticfinalintTABLE_VIEW_VERSION=2;","staticfinalintTABLE_VIEW_OLD_VERSION=1;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["finalprivatevoidtransfer(Entry[]newTable){","Entry[]src=table;","intnewCapacity=newTable.length;","for(intj=0;j\<src.length;j++){","Entrye=src[j];","if(e!=null){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary());","caseSQLTokenizer.TIMESTAMP:","return(int)readTimestamp();","caseSQLTokenizer.TIME:","return(int)readTime();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returntrue;","publicbooleansupportsOpenCursorsAcrossCommit(){","returntrue;","publicbooleansupportsOpenCursorsAcrossRollback(){","returntrue;","publicbooleansupportsOpenStatementsAcrossCommit(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["SQLExceptioncreateUnspportedConversion(intdataType){","Object[]params={","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())","};","returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION_FUNC,params);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["longgetRowPosition(){","returncommandSelect.from.getRowPosition();","voidsetRowPosition(longrowPosition)throwsException{","commandSelect.from.setRowPosition(rowPosition);","finalbooleanrowInserted(){","returncommandSelect.from.rowInserted();"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","return((DateTime)obj).getTimeMillis();","default:returnFloat.parseFloat(obj.toString());","doublegetDouble()throwsException{","returngetDouble(getObject(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","return((byte[])value).length;","default:","returnsuper.getPrecision();","intgetScale(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["value=newValue;","break;","caseSQLTokenizer.MONEY:","((Money)value).value=Math.min(((Money)value).value,expr.getMoney());","break;","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["for(intp=0;p\<cases.size();p++){","params[i++]=cases.get(p);","params[i++]=results.get(p);","if(i\<params.length)","params[i]=elseResult;","super.setParams(params);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["privateSmallSQLException(Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);","init();","privateSmallSQLException(Throwablethrowable,Stringmessage,StringvendorCode){","super(\"[SmallSQL]\"+message,vendorCode,0);","this.initCause(throwable);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["publicvoidupdateBlob(StringcolumnName,Blobx)throwsSQLException{","updateBlob(findColumn(columnName),x);","publicvoidupdateClob(intcolumnIndex,Clobx)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicvoidupdateArray(StringcolumnName,Arrayx)throwsSQLException{","updateArray(findColumn(columnName),x);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["ByteBufferbuffer=ByteBuffer.wrap(page);","synchronized(raFile){","raFile.position(filePos);","raFile.read(buffer);","value=((long)(page[0])\<\<56)|","((long)(page[1]&0xFF)\<\<48)|"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["while(true){","chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);","if(++i==length){","if(isLast){","node.addNode(digit,rowOffset);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["token=nextToken(MISSING_LEVEL);","token=nextToken(COMMANDS_TRANS_LEVEL);","CommandSetcmd=newCommandSet(con.log,SQLTokenizer.LEVEL);","switch(token.value){","caseSQLTokenizer.READ:","token=nextToken(MISSING_COMM_UNCOMM);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.MINUTE:","returnSQLTokenizer.SQL_TSI_MINUTE;","caseSQLTokenizer.HOUR:","returnSQLTokenizer.SQL_TSI_HOUR;","caseSQLTokenizer.D:","caseSQLTokenizer.DAY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["leftExpr=newExpressionArithmetic(leftExpr,ExpressionArithmetic.NOT);","previousToken();","returnleftExpr;","privateExpressionexpressionSingle(Commandcmd,SQLTokentoken)throwsSQLException{","booleanisMinus=false;","if(token!=null){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}else{","intidx=internalExpressions.indexOf(expr);","if(idx\>=0)returnidx;","internalExpressions.add(expr);","returninternalExpressions.size()-1;","finalprivateintaddInternalExpressionFromSelect(Expressionexpr)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["finalvoidsetParams(Expression[]params){","super.setParams(params);","inti=0;","for(intp=0;p\<cases.size();p++){","cases.set(p,params[i++]);","results.set(p,params[i++]);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["packagesmallsql.database;","publicclassExpressionNameextendsExpression{","privateStringtableAlias;","privateDataSourcefromEntry;","privateintcolIdx;","privateTableViewtable;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["privateintdataType=-1;","finalvoidaddCase(Expressioncondition,Expressionresult){","cases.add(condition);","results.add(result);","finalvoidsetElseResult(Expressionexpr){","elseResult=expr;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["finalpublicvoidsetCursorName(Stringname)throwsSQLException{","finalvoidsetGeneratedKeys(ResultSetrs){","generatedKeys=rs;","finalpublicResultSetgetGeneratedKeys()throwsSQLException{","if(generatedKeys==null)","throwSmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returnleft.getMoney()==right.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["Details(longtime){","intt=(int)(time%86400000);","intd=(int)(time/86400000);","if(t\<0){","t+=86400000;","d--;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewDate(DateTime.addDateTimeOffset(expr.getLong(),cal.getTimeZone()));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(StringcolumnName,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticfinalintCLUSTERED=255;","staticfinalintNONCLUSTERED=256;","staticfinalintREFERENCES=257;","staticfinalintUNION=260;","staticfinalintALL=261;","staticfinalintDISTINCT=262;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["token=nextToken();","TableViewtableView=Database.getTableView(con,catalog,name);","TableViewResulttable=TableViewResult.createResult(tableView);","tables.add(table);","if(token!=null&&token.value==SQLTokenizer.AS){","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnnewMutableNumeric(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["resize(size\<\<1);","data[size++]=value;","finalvoidclear(){","size=0;","privatefinalvoidresize(intnewSize){","long[]dataNew=newlong[newSize];"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnDouble.parseDouble(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintBIT_AND=42;//&","staticfinalintBIT_XOR=43;//^","staticfinalintEQUALS=51;//=","staticfinalintEQUALS_NULL=52;//likeEqualsbut(null=null)--\>true","staticfinalintGREATER=53;//\>","staticfinalintGRE_EQU=54;//\>="]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseFIRST:","caseLAST:","caseMAX:","caseMIN:","caseSUM:","returngetParams()[0].getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["finalfloatgetFloat(intoffset,intdataType)throwsException{","return0;","finalintgetInt(intoffset,intdataType)throwsException{","return0;","finallonggetLong(intoffset,intdataType)throwsException{","return0;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["return1;//1and0","caseSQLTokenizer.BOOLEAN:","return5;//trueandfalse","caseSQLTokenizer.TINYINT:","return3;","caseSQLTokenizer.SMALLINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnMoney.parseMoney(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnMoney.parseMoney(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["privateIndexindex;","privateLongTreeListrowList;","privatefinalLongTreeListEnumlongListEnum=newLongTreeListEnum();","JoinScrollIndex(intjoinType,RowSourceleft,RowSourceright,ExpressionsleftEx,ExpressionsrightEx,intcompare)","throwsException{","super(joinType,left,right,null);"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["setAsciiStream(findParameter(parameterName),x,length);","publicvoidsetBinaryStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setBinaryStream(findParameter(parameterName),x,length);","publicvoidsetObject(StringparameterName,Objectx,intsqlType,intscale)throwsSQLException{","setObject(findParameter(parameterName),x,sqlType,scale);","publicvoidsetObject(StringparameterName,Objectx,intsqlType)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["return(TableViewResult)from;","throwSmallSQLException.create(Language.ROWSOURCE_READONLY);","voidsetAlias(Stringalias){","this.alias=alias;","StringgetAlias(){","return(alias!=null)?alias:getTableView().name;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["else","page=(IndexNode)page.getValue();","thrownewError();","finalObjectfindRows(Expression[]expressions,booleansearchNullValues,ArrayListnodeList)throwsException{","IndexNodepage=rootPage;","intcount=expressions.length;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["thrownoCurrentRow();","ObjectgetObject(intoffset,intdataType)throwsException{","thrownoCurrentRow();","StringgetString(intoffset,intdataType)throwsException{","thrownoCurrentRow();","voidscanObjectOffsets(int[]offsets,int[]dataTypes){"]": ["|project://smallsql/src/smallsql/database/StoreNoCurrentRow.java|"],
"["if(valueLength\>1&&value[0]==0){","int[]temp=newint[valueLength-1];","System.arraycopy(value,1,temp,0,valueLength-1);","value=temp;","voidmod(MutableNumericnum){","num=newMutableNumeric(doubleValue()%num.doubleValue());"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.NUMERIC:","returnscale;","default:","returnExpression.getScale(dataType);","voidsetPrecision(intprecision)throwsSQLException{","if(precision\<0)throwSmallSQLException.create(Language.COL_INVALID_SIZE,newObject[]{newInteger(precision),name});"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["}else{","database=Database.getDatabase(catalog,con,false);","ArrayListrows=newArrayList();","booleanisTypeTable=types==null;","booleanisTypeView=types==null;","for(inti=0;types!=null&&i\<types.length;i++){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["byte[]bytes=param1.getBytes();","intlength=param2.getInt();","if(bytes.length\<=length)returnbytes;","byte[]b=newbyte[length];","System.arraycopy(bytes,bytes.length-length,b,0,length);","returnb;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["returnUtils.doubleToMoney(getFloatImpl());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnUtils.doubleToMoney(getDoubleImpl());"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnTypes.REAL;","caseSQLTokenizer.FLOAT:","returnTypes.FLOAT;","caseSQLTokenizer.DOUBLE:","returnTypes.DOUBLE;","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["Stringstr=convertToString();","intlength=datatype.getDisplaySize();","if(length\>str.length()){","char[]buffer=newchar[length-str.length()];","Arrays.fill(buffer,\'\');","returnstr+newString(buffer);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["buf.append(\'/\');","formatNumber(details.day,2,buf);","buf.append(\'/\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case101://USAmm/dd/yyyy"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.PROCEDURE:","returncreateProcedure();","caseSQLTokenizer.UNIQUE:","do{","token=nextToken(COMMANDS_CREATE_UNIQUE);","}while(token.value==SQLTokenizer.INDEX);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.DATE);","staticDateTimevalueOf(java.sql.Timedate){","if(date==null)returnnull;","returnnewDateTime(parse(date),SQLTokenizer.TIME);","staticDateTimevalueOf(java.sql.Timestampdate){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["intlength=nodes.length;","IndexNode[]temp=newIndexNode[length+1];","if(length==0){","temp[0]=node;","}else{","intpos=findNodeInsertPos(node.digit,0,length);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["writeByte(column.getScale());","offset+=column.initAutoIncrement(storePage.raFile,filePos+offset);","Stringdef=column.getDefaultDefinition();","writeBoolean(def==null);","if(def!=null)","writeString(column.getDefaultDefinition());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["abstractclassTableViewResultextendsDataSource{","SSConnectioncon;","privateStringalias;","privatelongtableTimestamp;","intlock=SQLTokenizer.SELECT;","staticTableViewResultcreateResult(TableViewtableView){"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["finalprivateStringconvertToString()throwsException{","if(param2!=null){","inttype=param1.getDataType();","switch(type){","caseSQLTokenizer.SMALLDATETIME:","type=SQLTokenizer.TIMESTAMP;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["row=0;","finalbooleanfirst()throwsException{","beforeFirst();","returnnext();","finalbooleannext()throwsException{","while(true){"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["SQLTokenizer.LONGNVARCHAR,","SQLTokenizer.UNIQUEIDENTIFIER,","SQLTokenizer.NVARCHAR,","SQLTokenizer.NCHAR,","SQLTokenizer.VARCHAR,","SQLTokenizer.CHAR,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["TableViewtableView=tableViews.get(tableName);","if(tableView==null){","tableView=TableView.load(con,this,tableName);","tableViews.put(tableName,tableView);","returntableView;","staticvoiddropTable(SSConnectioncon,Stringcatalog,StringtableName)throwsException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["RowSourceleft;//thelefttable,vieworrowsourceofthejoin","RowSourceright;","privatebooleanisAfterLast;","privateLongLongListrowPositions;//neededforgetRowPosition()andsetRowPosition()","privateintrow;//currentrownumber","JoinScrollscroll;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["publicObjectgetObject(StringcolumnName)throwsSQLException{","returngetObject(findColumn(columnName));","publicintfindColumn(StringcolumnName)throwsSQLException{","returngetCmd().findColumn(columnName)+1;","publicReadergetCharacterStream(intcolumnIndex)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Readerobject\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["formatNumber(details.year,4,buf);","buf.append(\'/\');","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnMoney.parseMoney(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);","TablepkTable=(Table)database.getTableView(con,foreignKey.pkTable);","pkTable.references.add(foreignKey);","Table(Databasedatabase,Stringname){","super(name,null);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["offset2=offset3;","firstNode=firstNode1;","firstNode1=firstNode2;","firstNode2=firstNode3;","removeNode();","shift++;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.REPEAT:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRepeat();","break;","caseSQLTokenizer.REPLACE:","invalidParamCount=(paramCount!=3);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(carryover\>0){","resizeValue((int)carryover);","voiddiv(MutableNumericnum){","intnewScale=Math.max(scale+5,num.scale+4);","BigDecimalbig=toBigDecimal().divide(num.toBigDecimal(),newScale,BigDecimal.ROUND_HALF_EVEN);","setValue(big.unscaledValue().toByteArray());"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnFloat.parseFloat(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.DEGREES:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDegrees();","break;","caseSQLTokenizer.EXP:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseLES_EQU:","caseUNEQUALS:","caseBETWEEN:","caseOR:","caseAND:","caseNOT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returntrue;","if(columns.size()==1){","returnfalse;","Expressionssingle=newExpressions();","for(inti=0;i\<columns.size();i++){","single.clear();"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(type),","getKeywordFromOperation(operation)","};","returnSmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER,params);","voidoptimize()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["result[7]=(byte)(value);","returnresult;","staticintmoney2int(longvalue){","if(value\<Integer.MIN_VALUE)returnInteger.MIN_VALUE;","elseif(value\>Integer.MAX_VALUE)returnInteger.MAX_VALUE;","elsereturn(int)value;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["IndexDescriptionindexDesc=indexes.get(i);","store.writeInt(INDEX);","intoffsetStart=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart+4);//placeholderforlength","indexDesc.save(store);","intoffsetEnd=store.getCurrentOffsetInPage();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["updatePointer.createWriteLock();","if(updatePointer.sharedPageData){","updatePointer.page=newbyte[PAGE_CONTROL_SIZE];","updatePointer.writeFinsh(con);","status=DELETED;","if(sharedPageData){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{COL_INVALID_NAME,\"Invalidcolumnname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Columnindexoutofrange:{0}.\"},","{COL_AMBIGUOUS,\"Column\'\'{0}\'\'isambiguous.\"},","{GROUP_AGGR_INVALID,\"AggregatefunctionarenotvalidintheGROUPBYclause({0}).\"},","{GROUP_AGGR_NOTPART,\"Expression\'\'{0}\'\'isnotpartofaaggregatefunctionorGROUPBYclause.\"},","{ORDERBY_INTERNAL,\"InternalErrorwithORDERBY.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetTableTypes()throwsSQLException{","String[]colNames={\"TABLE_TYPE\"};","Object[][]data={{\"SYSTEMTABLE\"},{\"TABLE\"},{\"VIEW\"}};","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetColumns(Stringcatalog,StringschemaPattern,StringtableNamePattern,StringcolumnNamePattern)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseSQLTokenizer.COMMA:","continue;","default:","thrownewError();","privateExpressionsexpressionTokenList(Commandcmd,intlistType)throwsSQLException{","Expressionslist=newExpressions();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["buf.append(Utils.digits[value]);","privatefinalstaticvoidformatHour12(inthour,StringBufferbuf){","hour%=12;","if(hour==0)hour=12;","formatNumber(hour,2,buf);","privatefinalstaticlongaddDateTimeOffset(longdatetime){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["this.st=st;","metaData.columns=cmd.columnExpressions;","this.cmd=cmd;","isUpdatable=st!=null&&st.rsConcurrency==CONCUR_UPDATABLE&&!cmd.isGroupResult();","publicvoidclose(){","st.con.log.println(\"ResultSet.close\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["booleanisNull()throwsException{","returngetParams().length==1&&param1.isNull();","finaldoublegetDouble()throwsException{","if(getParams().length==0)","returnrandom.nextDouble();","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRand.java|"],
"["inserts.add(lock.getLink());","}else{","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con==con)","inserts.add(lock.getLink());"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["break;","caseSQLTokenizer.SPACE:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSpace();","break;","caseSQLTokenizer.SOUNDEX:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(newValueinstanceofShort)","this.dataType=SQLTokenizer.SMALLINT;","else","if(newValueinstanceofInteger)","this.dataType=SQLTokenizer.INT;","else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnleft.isNull();","default:returnleft.isNull()||right.isNull();","byte[]getBytes()throwsjava.lang.Exception{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);","booleanisInList()throwsException{","if(left.isNull())returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalvoidsetParamAt(Expressionparam,intidx){","switch(idx){","case0:","param1=param;","break;","case1:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["IndexDescriptionindex=indexes.get(i);","Stringscolumns=index.getColumns();","for(intc=0;c\<columns.size();c++){","Object[]row=newObject[13];","row[0]=getName();//TABLE_CAT","row[2]=tableName;//TABLE_NAME"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["staticfinalintMUL=81;//*","staticfinalintDIV=82;///","staticfinalintMOD=83;//%","staticfinalintBIT_NOT=91;//~","staticfinalintNEGATIVE=101;//-","privatestaticfinalint[]DatatypeRange={"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\>0)","value=newValue;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARBINARY)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARBINARY)),Utils.getInteger(65535),\"0x\",null,\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BINARY)),Utils.getInteger(65535),\"0x\",null,\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGNVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["throwSmallSQLException.create(Language.RSET_FWDONLY);","booleanrelative(introws)throwsException{","throwSmallSQLException.create(Language.RSET_FWDONLY);","abstractintgetRow()throwsException;","abstractlonggetRowPosition();","abstractvoidsetRowPosition(longrowPosition)throwsException;"]": ["|project://smallsql/src/smallsql/database/RowSource.java|"],
"["throwSmallSQLException.createFromException(e);","publicDategetDate(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return\"java.sql.Time\";","caseTypes.TIMESTAMP:","return\"java.sql.Timestamp\";","caseTypes.CHAR:","caseTypes.VARCHAR:","caseTypes.LONGVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["while(true){","IndexNodeScrollStatusstatus=(IndexNodeScrollStatus)nodeStack.peek();","intlevel=status.level;","if(!status.asc^scroll){","intidx=++status.idx;","if(idx==-1){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["privateintfetchDirection;","privateintfetchSize;","SSResultSet(SSStatementst,CommandSelectcmd){","this.st=st;","metaData.columns=cmd.columnExpressions;","this.cmd=cmd;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.NULL:","returnTypes.NULL;","default:thrownewError(\"DataType:\"+type);","staticSearchNodesearchTree;","staticHashtablekeywords=newHashtable(337);","staticfinalintVALUE=0;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["abstractMutableNumericgetNumeric()throwsException;","abstractObjectgetObject()throwsException;","finalObjectgetApiObject()throwsException{","Objectobj=getObject();","if(objinstanceofMutable){","return((Mutable)obj).getImmutableObject();"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["value=temp;","voidmod(MutableNumericnum){","num=newMutableNumeric(doubleValue()%num.doubleValue());","value=num.value;","scale=num.scale;","signum=num.signum;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.INT:","((MutableInteger)value).value+=expr.getInt();","break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value+=expr.getLong();","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["return-1;","if(intValue\>0)","return1;","return0;","caseSQLTokenizer.BIGINT:","longlongValue=param1.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["caseSQLTokenizer.LENGTH:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLength();","break;","caseSQLTokenizer.LOCATE:","invalidParamCount=(paramCount!=2)&&(paramCount!=3);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.PARENTHESIS_R:","breakLoop;","caseSQLTokenizer.COMMA:","continue;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["((DateTime)value).time=Math.max(((DateTime)value).time,expr.getLong());","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:","StringuuidStr=expr.getString();","if(uuidStr.compareTo((String)value)\>0)value=uuidStr;","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["Expressionsrc=newRowSources[i];","if(src!=null&&(!(srcinstanceofExpressionValue)||!((ExpressionValue)src).isEmpty())){","Expressioncol=columnExpressions.get(i);","if(!col.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)col;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnfalse;","@Override","finalvoidexecute()throwsException{","insertStorePages=table.getInserts(con);","firstOwnInsert=0x4000000000000000L|insertStorePages.size();","maxFileOffset=table.raFile.size();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["returnTypes.CLOB;","caseSQLTokenizer.JAVA_OBJECT:","returnTypes.JAVA_OBJECT;","caseSQLTokenizer.UNIQUEIDENTIFIER:","return-11;","caseSQLTokenizer.NULL:"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnsupportsResultSetType(type);","publicbooleaninsertsAreDetected(inttype){","returnsupportsResultSetType(type);","publicbooleansupportsBatchUpdates(){","returntrue;","publicResultSetgetUDTs(Stringcatalog,StringschemaPattern,StringtypeNamePattern,int[]types)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintOJ=405;","static{","addKeyWord(\"D\",D);","addKeyWord(\"T\",T);","addKeyWord(\"TS\",TS);","addKeyWord(\"FN\",FN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{ARGUMENT_INVALID,\"InvalidargumentinmethodsetNeedGenratedKeys:{0}.\"},","{GENER_KEYS_UNREQUIRED,\"GeneratedKeysnotrequested.\"},","{SEQUENCE_HEX_INVALID,\"Invalidhexsequenceat{0}.\"},","{SEQUENCE_HEX_INVALID_STR,\"Invalidhexsequenceatposition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"Syntaxerroratoffset{0}on\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"Syntaxerror,unexpectedendofSQLstring.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["inttokenStart=0;","booleanwasWhiteSpace=true;","intcomment=NOT_COMMENT;","charquote=0;","StringBufferquoteBuffer=newStringBuffer();","for(inti=0;i\<sql.length;i++){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value+=expr.getDouble();","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseGREATER:returnleft.getLong()\>right.getLong();","caseGRE_EQU:returnleft.getLong()\>=right.getLong();","caseLESSER:returnleft.getLong()\<right.getLong();","caseLES_EQU:returnleft.getLong()\<=right.getLong();","caseUNEQUALS:returnleft.getLong()!=right.getLong();","caseBETWEEN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.min(((MutableLong)value).value,expr.getLong());","break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.min(((MutableFloat)value).value,expr.getFloat());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnnext();","finalbooleannext()throwsException{","while(true){","booleanisNext=rowSource.next();","if(!isNext)returnfalse;","LongoldRowOffset=(Long)index.findRows(distinctColumns,true,null);"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["(carryover==2147483648L&&(value[valueLength-1]%2==1))){","inti=valueLength-1;","booleanisCarryOver=true;","while(i\>=0&&isCarryOver)","isCarryOver=(value[i--]+=1)==0;","if(valueLength\>1&&value[0]==0){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["value=0;","node=null;","}else{","quoteBuffer.append(c);","wasWhiteSpace=false;","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"DOUBLE\",DOUBLE);","addKeyWord(\"DATE\",DATE);","addKeyWord(\"TIME\",TIME);","addKeyWord(\"DATETIME\",TIMESTAMP);//aliasforMSSQLServerdatatypeDATETIME","addKeyWord(\"TIMESTAMP\",TIMESTAMP);","addKeyWord(\"SMALLDATETIME\",SMALLDATETIME);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["booleanneedGeneratedKeys=st.needGeneratedKeys();","intgeneratedKeysType=0;","while(cmdSel.next()){","if(needGeneratedKeys){","keyColumnNames=newStrings();","keys=newArrayList();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["from=((Where)from).getFrom();","if(frominstanceofTableViewResult){","return(TableViewResult)from;","throwSmallSQLException.create(Language.ROWSOURCE_READONLY);","voidsetAlias(Stringalias){","this.alias=alias;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["publicbooleanstoresMixedCaseIdentifiers(){","returntrue;","publicbooleansupportsMixedCaseQuotedIdentifiers(){","returntrue;","publicbooleanstoresUpperCaseQuotedIdentifiers(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["addKeyWord(\"SIGN\",SIGN);","addKeyWord(\"SIN\",SIN);","addKeyWord(\"SQRT\",SQRT);","addKeyWord(\"TAN\",TAN);","addKeyWord(\"TRUNCATE\",TRUNCATE);","staticfinalintASCII=1100;//firststringfunction--\>seeSSDatabaseMetaData.getStringFunctions"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(searchTree==null){","searchTree=newSearchNode();","searchTree.letter=(char)(letters[0]|0x20);","SearchNodeprev=null;","SearchNodenode=searchTree;","booleanwasNextEntry=true;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){","expr.setFrom(fromEntry,colIdx,table);","break;","}else"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returngetBoolean()?Boolean.TRUE:Boolean.FALSE;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.MONEY:","return19;","caseSQLTokenizer.REAL:","return13;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicstaticfinalStringUNSUPPORTED_OPERATION=\"SS-0001\";","publicstaticfinalStringCANT_LOCK_FILE=\"SS-0003\";","publicstaticfinalStringDB_EXISTENT=\"SS-0030\";","publicstaticfinalStringDB_NONEXISTENT=\"SS-0031\";","publicstaticfinalStringDB_NOT_DIRECTORY=\"SS-0032\";","publicstaticfinalStringDB_NOTCONNECTED=\"SS-0033\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["break;","caseSQLTokenizer.USE:","con.setCatalog(name);","break;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/CommandSet.java|"],
"["returnUtils.money2int(longValue);","caseSQLTokenizer.SMALLMONEY:","returnreadInt()/10000;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().intValue();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["SQLTokentoken=nextToken();","if(token!=null){","throwcreateSyntaxError(token,Language.STXADD_ADDITIONAL_TOK);","returncmd;","finalprivateCommandparse(char[]sql)throwsSQLException{","this.sql=sql;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(!isCurrentRow)returnfalse;","longrowPos=rowSource.getRowPosition();","booleanisNext=next();","rowSource.setRowPosition(rowPos);","return!isNext;","finalbooleanisAfterLast(){"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["expr=newExpressionFunctionACos();","break;","caseSQLTokenizer.ASIN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionASin();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(nextEntry==octet){","if(shift==0){","offset-=2;","removeNodeLastLevel();","while(firstNode&&getUnsignedShort()==0){","offset-=2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnreadonly;","publicvoidsetCatalog(Stringcatalog)throwsSQLException{","testClosedConnection();","database=Database.getDatabase(catalog,this,false);","publicStringgetCatalog(){","if(database==null)"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["keywords.put(newInteger(LESSER_EQU),\"\<=\");","keywords.put(newInteger(UNEQUALS),\"\<\>\");","keywords.put(newInteger(GREATER_EQU),\"\>=\");","staticfinalintSELECT=200;","staticfinalintDELETE=201;","staticfinalintINTO=203;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(wasNull)returnnull;","returnnewURL(expr.getString());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicURLgetURL(StringcolumnName)throwsSQLException{","returngetURL(findColumn(columnName));"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["bytes[offset++]=(byte)(value\>\>56);","bytes[offset++]=(byte)(value\>\>48);","bytes[offset++]=(byte)(value\>\>40);","bytes[offset++]=(byte)(value\>\>32);","bytes[offset++]=(byte)(value\>\>24);","bytes[offset++]=(byte)(value\>\>16);"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["store.writeInt(INDEX);","intoffsetStart=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart+4);//placeholderforlength","indexDesc.save(store);","intoffsetEnd=store.getCurrentOffsetInPage();","store.setCurrentOffsetInPage(offsetStart);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSUB:returnleft.getMoney()-right.getMoney();","caseMUL:returnleft.getMoney()*right.getMoney()/10000;","caseDIV:returnleft.getMoney()*10000/right.getMoney();","caseNEGATIVE:return-left.getMoney();","throwcreateUnspportedConversion(SQLTokenizer.MONEY);","MutableNumericgetNumeric()throwsjava.lang.Exception{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["else","if(i==validValues.length-2)","msgBuf.append(\"or\");","Stringmessage=getErrorString(","token,Language.CUSTOM_MESSAGE,msgBuf);","returnSmallSQLException.create(Language.CUSTOM_MESSAGE,message);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["SQLTokentoken=nextToken();","if(token==null)returnfromSource;","switch(token.value){","caseSQLTokenizer.ON:","previousToken();","returnfromSource;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivatevoidexecuteImpl(Stringsql)throwsSQLException{","checkStatement();","generatedKeys=null;","try{","con.log.println(sql);","SQLParserparser=newSQLParser();"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["thrownewError();","longgetMoney()throwsException{","returnUtils.doubleToMoney(getDouble());","StringgetString()throwsException{","if(isNull())returnnull;","returngetObject().toString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);","char[]readChars(intlength){","char[]chars=newchar[length];","for(inti=0;i\<length;i++){","chars[i]=(char)readShort();"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["returntrue;","finalvoidbeforeFirst(){","rowPos=0;","finalbooleanisBeforeFirst(){","returnrowPos\<=0;","finalbooleanisFirst(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["}else{","return0;","returnoperation;","return0;","staticfinalintCROSS_JOIN=1;","staticfinalintINNER_JOIN=2;"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.RIGHT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["publicstaticfinalStringCOL_INVALID_SIZE=\"SS-0403\";","publicstaticfinalStringCOL_WRONG_PREFIX=\"SS-0404\";","publicstaticfinalStringCOL_READONLY=\"SS-0405\";","publicstaticfinalStringCOL_INVALID_NAME=\"SS-0406\";","publicstaticfinalStringCOL_IDX_OUT_RANGE=\"SS-0407\";","publicstaticfinalStringCOL_AMBIGUOUS=\"SS-0408\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.TIMESTAMP:","returnreadTimestamp()!=0;","caseSQLTokenizer.TIME:","returnreadTime()!=0;","caseSQLTokenizer.DATE:","returnreadDate()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnnodes==EMPTY_NODES&&value==null;","finalvoidclear(){","nodes=EMPTY_NODES;","value=null;","remainderKey=null;","finalvoidclearValue(){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseEQUALS:returnleft.getLong()==right.getLong();","caseGREATER:returnleft.getLong()\>right.getLong();","caseGRE_EQU:returnleft.getLong()\>=right.getLong();","caseLESSER:returnleft.getLong()\<right.getLong();","caseLES_EQU:returnleft.getLong()\<=right.getLong();","caseUNEQUALS:returnleft.getLong()!=right.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["switch(token.value){","caseSQLTokenizer.WHEN:","Expressioncondition=expression(cmd,0);","if(input!=null){","condition=newExpressionArithmetic(input,condition,ExpressionArithmetic.EQUALS);","nextToken(MISSING_THEN);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["quote=0;","tokenStart=i+1;","wasWhiteSpace=true;","}elsequoteBuffer.append(c);","break;","case\'.\':"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["case\'N\':","c=\'5\';","break;","case\'R\':","c=\'6\';","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["node.fileOffset=offset;","node.load(store);","returnnode;","staticFileIndexNodeloadRootNode(booleanunique,FileChannelfile,longoffset)throwsException{","StorePagestorePage=newStorePage(null,-1,file,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["caseSQLTokenizer.BOOLEAN:","returngetBoolean()?10000:0;","caseSQLTokenizer.TINYINT:","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returngetIntImpl()*10000;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["val[0]=highBits;","System.arraycopy(value,0,val,1,value.length);","value=val;","voidsub(MutableNumericnum){","if(num.scale\<scale){","num.setScale(scale);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["newIndexNodeScrollStatus((IndexNode)status.nodeValue,","(expressions.get(level).getAlias()!=SQLTokenizer.DESC_STR),","scroll,level));","continue;","}else","returngetReturnValue(status.nodeValue);"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|","|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["page=add(page,rowOffset,shortToBinarySortOrder(expr.getInt()),isLastValues,1);","break;","caseSQLTokenizer.INT:","page=add(page,rowOffset,intToBinarySortOrder(expr.getInt()),isLastValues,2);","break;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["throwcreateSyntaxError(token,Language.STXADD_PARAM_INVALID_COUNT);","expr.setParams(params);","returnexpr;","privateRowSourcetableSource(Commandcmd,DataSourcestables)throwsSQLException{","SQLTokentoken=nextToken(MISSING_EXPRESSION);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intmaxRows=Integer.parseInt(token.getName(sql));","selCmd.setMaxRows(maxRows);","}catch(NumberFormatExceptione){","throwcreateSyntaxError(token,Language.STXADD_NOT_NUMBER,token.getName(sql));","privatevoidgroup(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["abstractbooleanisNull(intcolIdx)throwsException;","abstractbooleangetBoolean(intcolIdx)throwsException;","abstractintgetInt(intcolIdx)throwsException;","abstractlonggetLong(intcolIdx)throwsException;","abstractfloatgetFloat(intcolIdx)throwsException;","abstractdoublegetDouble(intcolIdx)throwsException;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["row[12]=col.getDefaultDefinition();//COLUMN_DEF","row[15]=row[6];//CHAR_OCTET_LENGTH","row[16]=Utils.getInteger(i);//ORDINAL_POSITION","row[17]=col.isNullable()?\"YES\":\"NO\";//IS_NULLABLE","rows.add(row);","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["ExpressionbaseExpression=exprName.getParams()[0];","column.setPrecision(baseExpression.getPrecision());","column.setScale(baseExpression.getScale());","break;","default:","column.setPrecision(origExpression.getPrecision());"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["Databasedatabase=(Database)iterator.next();","WeakHashMapconnections=database.connections;","connections.remove(con);","if(connections.size()==0){","try{","iterator.remove();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseTypes.INTEGER:","return\"java.lang.Integer\";","caseTypes.BIT:","caseTypes.BOOLEAN:","return\"java.lang.Boolean\";","caseTypes.BINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["setParams(params);","intgetFunction(){","returnSQLTokenizer.CONVERT;","booleanisNull()throwsException{","returnparam1.isNull();","booleangetBoolean()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["for(intr=0;r\<data.length;r++){","Object[]row=data[r];","ExpressionValue[]rowValues=newExpressionValue[row.length];","addRow(rowValues);","for(intc=0;c\<colCount;c++){","ExpressionValueexpr=rowValues[c]=newExpressionValue();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["list.add(rowOffset);","finalvoidaddRemainderKey(longrowOffset,longremainderValue,intcharCount)throwsSQLException{","saveRemainderValue(remainderValue,charCount);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalvoidaddRemainderKey(longrowOffset,char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["intcount=param2.getInt();","ByteArrayOutputStreambuffer=newByteArrayOutputStream();","for(inti=0;i\<count;i++){","buffer.write(bytes);","returnbuffer.toByteArray();","finalStringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["finalprivateSSConnectioncon;","finalprivateSSStatementst;","SSDatabaseMetaData(SSConnectioncon)throwsSQLException{","this.con=con;","st=newSSStatement(con);","publicbooleanallProceduresAreCallable(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["abstractlonggetLong(intcolIdx)throwsException;","abstractfloatgetFloat(intcolIdx)throwsException;","abstractdoublegetDouble(intcolIdx)throwsException;","abstractlonggetMoney(intcolIdx)throwsException;","abstractMutableNumericgetNumeric(intcolIdx)throwsException;","abstractObjectgetObject(intcolIdx)throwsException;"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["byte[]bytes=expr.getBytes();","if(bytes.length!=16)throwSmallSQLException.create(Language.BYTEARR_INVALID_SIZE,String.valueOf(bytes.length));","writeBytes(bytes);","default:","writeBytes(Utils.unique2bytes(expr.getString()));","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(root==null){","value=root=createIndexNode(unique,(char)-1);","returnroot;","privatefinalvoidsaveNode(IndexNodenode){","intlength=nodes.length;","IndexNode[]temp=newIndexNode[length+1];"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["publicstaticfinalStringPARAM_IDX_OUT_RANGE=\"SS-0372\";","publicstaticfinalStringCOL_DUPLICATE=\"SS-0400\";","publicstaticfinalStringCOL_MISSING=\"SS-0401\";","publicstaticfinalStringCOL_VAL_UNMATCH=\"SS-0402\";","publicstaticfinalStringCOL_INVALID_SIZE=\"SS-0403\";","publicstaticfinalStringCOL_WRONG_PREFIX=\"SS-0404\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["intisolationLevel=TRANSACTION_READ_COMMITTED;//seealsogetDefaultTransactionIsolation","privateListcommitPages=newArrayList();","SSConnection(SSConnectioncon){","readonly=con.readonly;","database=con.database;","metadata=con.metadata;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["default:","returnsuper.getPrecision();","intgetScale(){","switch(dataType){","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalbooleanrelative(introws){","if(rows==0)returnrowPos==1;","rowPos=Math.min(Math.max(rowPos+rows,-1),1);","returnrowPos==1;","finalintgetRow(){","returnrowPos==1?1:0;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["daten[15]=hex2byte(chars,34);","returndaten;","privatestaticbytehex2byte(char[]hex,intoffset)throwsSQLException{","try{","return(byte)((hexDigit2int(hex[offset++])\<\<4)","|hexDigit2int(hex[offset++]));"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["noRow();","}else","filePos=store.getNextPagePos();","@Override","finalbooleannext()throwsException{","if(filePos\<0)returnfalse;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["break;","caseSQLTokenizer.ACOS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionACos();","break;","caseSQLTokenizer.ASIN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{DELETE_WO_FROM,\"ThemethoddeleteRowneedaFROMexpression.\"},","{INSERT_WO_FROM,\"ThemethodinsertRowneedaFROMexpression.\"},","{TABLE_CANT_RENAME,\"Table\'\'{0}\'\'can\'\'tberenamed.\"},","{TABLE_CANT_DROP,\"Table\'\'{0}\'\'can\'\'tbedropped.\"},","{TABLE_CANT_DROP_LOCKED,\"Table\'\'{0}\'\'can\'\'tdropbecauseislocked.\"},","{TABLE_CORRUPT_PAGE,\"Corrupttablepageatposition:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["removeNode();","shift++;","return;","offset3=offset2;","offset2=offset1;","offset1=offset-2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["privateExpressionfunction(Commandcmd,SQLTokentoken,booleanisEscape)throwsSQLException{","Expressionexpr;","switch(token.value){","caseSQLTokenizer.CONVERT:{","Columncol;","Expressionstyle=null;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(updatePointer!=null)returnupdatePointer.getNextPagePos();","if(nextPageOffset\<=0){","nextPageOffset=sizePhysical;","returnfilePos+nextPageOffset;","longwriteFinsh(SSConnectioncon)throwsSQLException{","switch(type){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicstaticfinalStringORDERBY_INTERNAL=\"SS-0432\";","publicstaticfinalStringUNION_DIFFERENT_COLS=\"SS-0433\";","publicstaticfinalStringINDEX_EXISTS=\"SS-0460\";","publicstaticfinalStringINDEX_MISSING=\"SS-0461\";","publicstaticfinalStringINDEX_FILE_INVALID=\"SS-0462\";","publicstaticfinalStringINDEX_CORRUPT=\"SS-0463\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.SUBSTRING;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull()||param3.isNull();","finalbyte[]getBytes()throwsException{","if(isNull())returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["DataSourceds=expr.getDataSource();","TableResulttableResult=(TableResult)ds;","tableResult.lock=SQLTokenizer.UPDATE;","while(true){","synchronized(con.getMonitor()){","if(!next()){"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["intgetPrecision(){","returnSSResultSetMetaData.getDataTypePrecision(getDataType(),-1);","intgetScale(){","returngetScale(getDataType());","finalstaticintgetScale(intdataType){","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["addKeyWord(\"DIFFERENCE\",DIFFERENCE);","addKeyWord(\"STUFF\",INSERT);//aliasforMSSQLServer","addKeyWord(\"INSERT\",INSERT);","addKeyWord(\"LCASE\",LCASE);","addKeyWord(\"LEFT\",LEFT);","addKeyWord(\"DATALENGTH\",LENGTH);//aliasforMSSQLServer"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["{UNSUPPORTED_OPERATION,\"UnsupportedOperation{0}.\"},","{CANT_LOCK_FILE,\"Can\'\'tlockfile\'\'{0}\'\'.AsingleSmallSQLDatabasecanonlybeopenedfromasingleprocess.\"},","{DB_EXISTENT,\"Database\'\'{0}\'\'alreadyexists.\"},","{DB_NONEXISTENT,\"Database\'\'{0}\'\'doesnotexist.\"},","{DB_NOT_DIRECTORY,\"Directory\'\'{0}\'\'isnotaSmallSQLdatabase.\"},","{DB_NOTCONNECTED,\"YouarenotconnectedwithaDatabase.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["voiddeleteRow(SSConnectioncon)throwsSQLException{","status=DELETED;","type=SQLTokenizer.DELETE;","createWriteLock();","writeFinsh(con);","StorePageLinkgetLink(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(column==null){","thrownewNullPointerException(\"Columnisnull.\");","if(size\>=data.length){","resize(size\<\<1);","data[size++]=column;","Columnscopy(){"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["mul(factor);","}else{","for(;newScale\<scale;scale--){","factor*=10;","if(factor==1000000000){","divImpl(factor);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intmillis=(int)(time%86400000);","if(millis\<0)","millis+=86400000;","time-=millis;","break;","this.time=time;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["ResultSetMetaDatamd=rs.getMetaData();","intcount=md.getColumnCount();","for(inti=1;i\<=count;i++){","System.out.print(md.getColumnLabel(i));","System.out.print(\'\\t\');","System.out.println();"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","}else{","store=(filePos\<maxFileOffset)?table.getStore(con,filePos,lock):null;","if(store==null){","if(insertStorePages.size()\>0){","filePos=0x4000000000000000L;"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["addKeyWord(\"M\",SQL_TSI_MONTH);","addKeyWord(\"MM\",SQL_TSI_MONTH);","addKeyWord(\"SQL_TSI_MONTH\",SQL_TSI_MONTH);","addKeyWord(\"Q\",SQL_TSI_QUARTER);","addKeyWord(\"QQ\",SQL_TSI_QUARTER);","addKeyWord(\"SQL_TSI_QUARTER\",SQL_TSI_QUARTER);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalvoidmul(intfactor){","if(factor\<0){","factor=-factor;","signum=-signum;","longcarryover=0;","for(inti=value.length-1;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["intoffset=0;","for(intend=list.length;offset\<end;offset++){","if((list[offset])==value)returnoffset;","return-1;","staticintindexOf(byte[]value,byte[]list,intoffset){","intlength=value.length;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["value=null;","remainderKey=null;","finalvoidclearValue(){","value=null;","finalObjectgetValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getLong(),dataType);","caseSQLTokenizer.UNIQUEIDENTIFIER:","returngetBytes();","default:throwcreateUnspportedDataType(param1.getDataType());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["}finally{","if(con.getAutoCommit())con.commit();","finalvoiddeleteRow(SSConnectioncon)throwsSQLException{","intsavepoint=con.getSavepoint();","try{","if(tables.size()\>1)"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["staticfinalintSQL_VARBINARY=1366;","staticfinalintSQL_VARCHAR=1367;","static{","addKeyWord(\"SQL_BIGINT\",SQL_BIGINT);","addKeyWord(\"SQL_BINARY\",SQL_BINARY);","addKeyWord(\"SQL_BIT\",SQL_BIT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intcount=expressions.size();","for(inti=0;i\<count;i++){","page=findRows(page,expressions.get(i),searchNullValues,nodeList);","if(page==null)","returnnull;","if(i+1==count)"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["c=\'0\';","break;","if(c\>\'0\'&&last!=c){","output[idx++]=c;","last=c;","for(;idx\<4;){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["nextToken(MISSING_PARENTHESIS_R);","}else{","col.setPrecision(18);//defaultPrecisionfordecimalandnumeric","previousToken();","break;","col.setDataType(dataType);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:thrownewError(\"\"+dataType);","break;","default:thrownewError();","privatevoidinitValue(Expressionexpr)throwsException{","dataType=expr.getDataType();","switch(dataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["middleMsgCode,newObject[]{middleMsgParam});","buffer.append(middle);","privateStringgetIdentifier(SQLTokentoken)throwsSQLException{","Stringname=token.getName(sql);","checkValidIdentifier(name,token);","returnname;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnUtils.doubleToMoney(getDouble());","finalMutableNumericgetNumeric()throwsException{","if(isNull())returnnull;","doublevalue=getDouble();","if(Double.isInfinite(value)||Double.isNaN(value))","returnnull;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["if(token==null)returnselCmd;//SELECTwithoutFROM","switch(token.value){","caseSQLTokenizer.COMMA:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleannext()throwsException{","if(++rowIdx\<rowList.size()){","rowSource.setRowPosition(rowList.get(rowIdx));","returntrue;","finalbooleanresult=rowSource.next();","if(result){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["Expressiondest=expressionSingle(cmd,token);","if(dest.getType()!=Expression.NAME)throwcreateSyntaxError(token,MISSING_IDENTIFIER);","nextToken(MISSING_EQUALS);","Expressionsrc=expression(cmd,0);","cmd.addSetting(dest,src);","token=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finaldoublegetDouble()throwsException{","if(isNull())return0;","returnDouble.parseDouble(getString().trim());","finallonggetMoney()throwsException{","if(isNull())return0;","returnMoney.parseMoney(getString().trim());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnString.java|","|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java|"],
"["caseSQLTokenizer.VARBINARY:","returnnewMutableNumeric(Utils.bytes2double(readBinary()));","caseSQLTokenizer.TINYINT:","returnnewMutableNumeric(readUnsignedByte());","caseSQLTokenizer.SMALLINT:","returnnewMutableNumeric(readShort());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.MONEY:","returnreadLong();","caseSQLTokenizer.SMALLMONEY:","returnreadInt();","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["expr=newExpressionFunctionDifference();","break;","caseSQLTokenizer.INSERT:","invalidParamCount=(paramCount!=4);","expr=newExpressionFunctionInsert();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["tokenIdx++;//mustbeeverincrementthatthemethodpreviousToken()isworking","returnnull;","return(SQLToken)tokens.get(tokenIdx++);","privateSQLTokennextToken(int[]validValues)throwsSQLException{","SQLTokentoken=nextToken();","if(token==null)throwcreateSyntaxError(token,validValues);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(param1.getBoolean())","returnparam2.getBoolean();","returnparam3.getBoolean();","intgetInt()throwsException{","if(param1.getBoolean())","returnparam2.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["throwSmallSQLException.create(Language.COL_DUPLICATE,column);","super.addColumnExpression(column);","voidaddValues(Expressionsvalues){","this.cmdSel=newCommandSelect(log,values);","voidaddValues(CommandSelectcmdSel){","this.cmdSel=cmdSel;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["staticfinalintSUBSTRING=1120;","staticfinalintTRIM=1121;","staticfinalintUCASE=1122;//laststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","static{","addKeyWord(\"ASCII\",ASCII);","addKeyWord(\"BIT_LENGTH\",BITLEN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["break;","caseSQLTokenizer.SOUNDEX:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSoundex();","break;","caseSQLTokenizer.SUBSTRING:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalprivateRowSourcerowSource;","finalprivateExpressionwhere;","privateintrow=0;","privatebooleanisCurrentRow;","Where(RowSourcerowSource,Expressionwhere){","this.rowSource=rowSource;"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["if(newScale\>scale){","for(;newScale\>scale;scale++){","factor*=10;","if(factor==1000000000){","mul(factor);","factor=1;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["assert(message!=null):\"Messagecodenotfound:\"+key;","returnmessage;","publicStringgetSqlState(Stringkey){","StringsqlState=(String)sqlStates.get(key);","assert(sqlState!=null):\"SQLStatecodenotfound:\"+key;","returnsqlState;"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseLOCK_TAB:","assertstorePage.con==tabLockConnection:\"InternalErrorwithTabLock\";","if(--tabLockCount==0)tabLockConnection=null;","break;","default:","thrownewError();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticfinalintLIKE=508;","staticfinalintIN=509;","static{","addKeyWord(\"OR\",OR);","addKeyWord(\"AND\",AND);","addKeyWord(\"IS\",IS);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TIMESTAMP:","return(int)readTimestamp();","caseSQLTokenizer.TIME:","return(int)readTime();","caseSQLTokenizer.DATE:","return(int)readDate();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.sql.SQLException;","importjava.sql.SQLWarning;","importjava.sql.Savepoint;","importjava.sql.Statement;","importjava.util.ArrayList;","importjava.util.List;"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnlist;","throwcreateSyntaxError(token,MISSING_TOKEN_LIST);","privatevoidexpressionDefList(Commandcmd,Expressionsexpressions,Stringscolumns)throwsSQLException{","SQLTokentoken=nextToken();","if(token.value!=SQLTokenizer.PARENTHESIS_L)throwcreateSyntaxError(token,MISSING_PARENTHESIS_L);","Loop:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(tabLockConnection!=null&&tabLockConnection!=con)returnnull;","switch(con.isolationLevel){","caseConnection.TRANSACTION_SERIALIZABLE:","serializeConnections.put(con,con);","break;","switch(pageOperation){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["{JOIN_DELETE,\"DieMethodedeleteRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{JOIN_INSERT,\"DieMethodeinsertRowwirdnichtunterstÃ¼tztfÃ¼rJoins.\"},","{DELETE_WO_FROM,\"DieMethodedeleteRowbenÃ¶tigteinenFROMAusdruck.\"},","{INSERT_WO_FROM,\"DieMethodeinsertRowbenÃ¶tigteinenFROMAusdruck.\"},","{TABLE_CANT_RENAME,\"DieTabelle\'\'{0}\'\'kannnichtumbenanntwerden.\"},","{TABLE_CANT_DROP,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["writeLong(store.writeFinsh(null));","byte[]readLongBinary()throwsException{","longlobFilePos=readLong();","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,lobFilePos,SQLTokenizer.SELECT);","returnstore.readBytes(store.readInt());","voidwriteChars(char[]daten){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;","tabLockConnection=con;","tabLockCount++;","TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);"]": ["|project://smallsql/src/smallsql/database/Table.java|","|project://smallsql/src/smallsql/database/Table.java|"],
"["privateintsize;","privateColumn[]data;//commenthere2","Columns(){","data=newColumn[16];","finalintsize(){","returnsize;"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["default:throwcreateSyntaxError(token,MISSING_WHERE_COMMA);","returncmd;","privateCommandcreate()throwsSQLException{","while(true){","SQLTokentoken=nextToken(COMMANDS_CREATE);","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatefinalStringname;","privatefinalbooleanreadonly;","privatefinalFiledirectory;","privatefinalFileChannelmaster;","privatefinalWeakHashMapconnections=newWeakHashMap();","staticDatabasegetDatabase(Stringname,SSConnectioncon,booleancreate)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["updateString(findColumn(columnName),x);","publicvoidupdateBytes(StringcolumnName,byte[]x)throwsSQLException{","updateBytes(findColumn(columnName),x);","publicvoidupdateDate(StringcolumnName,Datex)throwsSQLException{","updateDate(findColumn(columnName),x);","publicvoidupdateTime(StringcolumnName,Timex)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return5;//trueandfalse","caseSQLTokenizer.TINYINT:","return3;","caseSQLTokenizer.SMALLINT:","return6;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["intoctet=(int)(value\>\>shift)&0xFFFF;","while(true){","intnextEntry=getUnsignedShort();","if(nextEntry==octet){","if(shift==0){","offset-=2;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["publicbooleandataDefinitionIgnoredInTransactions(){","returnfalse;","publicResultSetgetProcedures(Stringcatalog,StringschemaPattern,StringprocedureNamePattern)throwsSQLException{","String[]colNames={\"PROCEDURE_CAT\",\"PROCEDURE_SCHEM\",\"PROCEDURE_NAME\",\"\",\"\",\"\",\"REMARKS\",\"PROCEDURE_TYPE\"};","Object[][]data=newObject[0][];","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["publicbooleanequals(Objectexpr){","if(!(exprinstanceofExpression))returnfalse;","if(((Expression)expr).type==type){","Expression[]p1=((Expression)expr).params;","Expression[]p2=params;","if(p1!=null&&p2!=null){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["addKeyWord(\"ASIN\",ASIN);","addKeyWord(\"ATAN\",ATAN);","addKeyWord(\"ATN2\",ATAN2);//aliasforMSSQLServer","addKeyWord(\"ATAN2\",ATAN2);","addKeyWord(\"CEILING\",CEILING);","addKeyWord(\"COS\",COS);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["publicvoiddeleteRow()throwsSQLException{","st.con.log.println(\"deleteRow()\");","testNotInsertRow();","getCmd().deleteRow(st.con);","clearRowBuffer();","publicvoidrefreshRow()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["throwSmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);","returngeneratedKeys;","finalpublicintexecuteUpdate(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);","returnexecuteUpdate(sql);","finalpublicintexecuteUpdate(Stringsql,int[]columnIndexes)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["throwSmallSQLException.create(Language.FK_NOT_TABLE,foreignKey.pkTable);","voidcreateTable(SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsindexes,ForeignKeysforeignKeys)throwsException{","checkForeignKeys(con,foreignKeys);","Tabletable=newTable(this,con,name,columns,indexes,foreignKeys);","synchronized(tableViews){","tableViews.put(name,table);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.MONEY:","returnreadLong()!=0;","caseSQLTokenizer.SMALLMONEY:","returnreadInt()!=0;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["column.setAlias(alias);","token=nextToken();","if(token==null)returnselCmd;//SELECTwithoutFROM","switch(token.value){","caseSQLTokenizer.COMMA:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:","returntoString();","privatefinalstaticvoidformatNumber(intvalue,intdigitCount,StringBufferbuf){","buf.setLength(buf.length()+digitCount);","if(value\<0)value=-value;","for(inti=1;i\<=digitCount;i++){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["booleaninit(SSConnectioncon)throwsException{","if(super.init(con)){","commandSelect.compile(con);","returntrue;","returnfalse;","TableViewgetTableView(){"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["{STXADD_IDENT_EMPTY,\"01000\"},","{STXADD_IDENT_WRONG,\"01000\"},","{STXADD_OPER_MINUS,\"01000\"},","{STXADD_FUNC_UNKNOWN,\"01000\"},","{STXADD_PARAM_INVALID_COUNT,\"01000\"},","{STXADD_JOIN_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.NCLOB:","returnInteger.MAX_VALUE;","caseSQLTokenizer.NUMERIC:","returnprecision+(scale\>0?2:1);","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["case1:","if(right!=null){","right=param;","break;","case2:","if(right!=null){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalvoidclear(){","size=0;","privatefinalvoidresize(intnewSize){","long[]dataNew=newlong[newSize\<\<1];","System.arraycopy(data,0,dataNew,0,size\<\<1);","data=dataNew;"]": ["|project://smallsql/src/smallsql/database/LongLongList.java|"],
"["continuenextCol;","token=addColumn(token,cmdCreate);","if(token==null){","throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["output.writeShort(digit);","intlength=remainderKey==null?0:remainderKey.length;","output.writeInt(length);","if(length\>0)output.writeChars(remainderKey);","if(value==null){","output.writeByte(0);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","writeLongString(expr.getString());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalclassDistinctextendsRowSource{","finalprivateExpressionsdistinctColumns;","finalprivateRowSourcerowSource;","privateIndexindex;","privateintrow;","Distinct(RowSourcerowSource,Expressionscolumns){"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"INT\"});","@Override","longgetLong(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["else{","Stringmessage=stripMsg(e);","StringsqlState=language.getSqlState(Language.CUSTOM_MESSAGE);","returnnewSmallSQLException(e,message,sqlState);","staticSQLExceptioncreateFromException(StringmessageCode,Objectparam0,","Throwablee)"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["throwSmallSQLException.create(Language.INDEX_FILE_INVALID,file.getName());","if(version\>INDEX_VERSION){","Object[]params={newInteger(version),file.getName()};","throwSmallSQLException.create(Language.FILE_TOONEW,params);","}catch(Throwablee){","if(raFile!=null)"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(isNull())returnnull;","returnnewMutableNumeric(getInt());","ObjectgetObject()throwsException{","if(isNull())returnnull;","returnUtils.getInteger(getInt());","StringgetString()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["case1:","millis=Integer.parseInt(strMillis)*100;","break;","case2:","millis=Integer.parseInt(strMillis)*10;","break;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","bytes=newbyte[4];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["throwSmallSQLException.createFromException(th);","StringdbKey=file.getName()+\";readonly=\"+con.isReadOnly();","synchronized(databases){","Databasedb=(Database)databases.get(dbKey);","if(db==null){","if(create&&!file.isDirectory()){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returngetReturnValue(status.nodeValue);","idx=++status.idx;","if(idx\>=status.nodes.length){","if(nodeStack.size()\>1){","nodeStack.pop();","continue;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["{TABLE_OR_VIEW_MISSING,\"TableorView\'\'{0}\'\'doesnotexist.\"},","{TABLE_FILE_INVALID,\"File\'\'{0}\'\'doesnotincludeavalidSmallSQLTable.\"},","{TABLE_OR_VIEW_FILE_INVALID,\"File\'\'{0}\'\'isnotavalidTableorViewstore.\"},","{TABLE_EXISTENT,\"TableorView\'\'{0}\'\'alreadyexists.\"},","{FK_NOT_TABLE,\"\'\'{0}\'\'isnotatable.\"},","{PK_ONLYONE,\"Atablecanhaveonlyoneprimarykey.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","}elsecmd.noColumns=true;","Switch:while(true)","switch(token.value){","caseSQLTokenizer.VALUES:{","token=nextToken(MISSING_PARENTHESIS_L);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicinthashCode(){","return(int)(value^(value\>\>\>32));","publiclongunscaledValue(){","returnvalue;","publicstaticlongparseMoney(Stringstr){","returnUtils.doubleToMoney(Double.parseDouble(str));"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["caseSQLTokenizer.IN:returnIN;","caseSQLTokenizer.IS:returnISNULL;","caseSQLTokenizer.OR:returnOR;","caseSQLTokenizer.AND:returnAND;","caseSQLTokenizer.NOT:returnNOT;","caseSQLTokenizer.BIT_OR:returnBIT_OR;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"NUMERIC\"});","@Override","longgetMoney(intvalueOffset,intdataType)throwsException{","this.offset=valueOffset;","if(readBoolean())return0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["StoreImplstoreTemp=table.getStore(((TableStorePage)storePage).con,filePosUpdated,type);","storeTemp.updatePointer=this;","returnstoreTemp;","privatevoidresizePage(intminNewSize){","intnewSize=Math.max(minNewSize,page.length*2);","byte[]newPage=newbyte[newSize];"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(newValue\>value){","value=newValue;","createStorePage().commit();","@Override","publicfloatfloatValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["staticfinalintISOLATION=241;","staticfinalintLEVEL=242;","staticfinalintREAD=243;","staticfinalintCOMMITTED=244;","staticfinalintUNCOMMITTED=245;","staticfinalintREPEATABLE=246;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["sig2=tempi;","if(signum!=sig2)","sub(val2);","else","add(val2);","privatevoidadd(int[]val2){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["LongTreeListlist=(LongTreeList)obj;","list.remove(rowOffset);","if(list.getSize()\>0)return;","IndexNodenode=(IndexNode)nodeList.get(nodeList.size()-1);","node.clearValue();","for(inti=nodeList.size()-2;i\>=0;i--){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returntrue;","fullRowCount=Math.max(fullRowCount,fullRightRowCounter);","fullRightRowCounter=0;","isOuterValid=true;","result=left.next();","if(result){"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["addKeyWord(\"JOIN\",JOIN);","addKeyWord(\"ON\",ON);","addKeyWord(\"OUTER\",OUTER);","addKeyWord(\"FULL\",FULL);","addKeyWord(\"CROSS\",CROSS);","addKeyWord(\"USE\",USE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnfromSource;","if(!fromSource.hasAlias()){","fromSource.setAlias(token.getName(sql));","break;","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.GROUP,SQLTokenizer.ORDER,SQLTokenizer.HAVING});","privatevoidfrom(CommandSelectcmd)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicObjectgetObject(inti,Mapmap)throwsSQLException{","returngetObject(i);","publicRefgetRef(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blobobject\");","publicClobgetClob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["dataType=left.getDataType();","}else{","finalbooleanrightIsNull=right.isNull();","if(operation==EQUALS_NULL&&leftIsNull&&rightIsNull)returntrue;","if(leftIsNull||rightIsNull)returnfalse;","dataType=getDataType(left,right);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["switch(token.value){","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.COMMA:","cmdCreate.addColumn(col);","returntoken;","caseSQLTokenizer.DEFAULT:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Math.min(row-1,rowList.size()):","Math.max(row+rowList.size(),-1);","returnmove();","finalbooleanrelative(introws){","if(rows==0)return(currentRow!=null);","rowIdx=Math.min(Math.max(rowIdx+rows,-1),rowList.size());"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["if(fullReturnCounter\>=fullRowCount){","returnfalse;","right.next();","}while(isFullNotValid[fullReturnCounter++]);","returntrue;","do{"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnumeric=expr.getNumeric();","numeric.setScale(column.getScale());","writeNumeric(numeric);","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.COUNT:","invalidParamCount=(paramCount!=1);","if(params[0].getType()==Expression.NAME){","ExpressionNameparam=(ExpressionName)params[0];","if(\"*\".equals(param.getName())&&param.getTableAlias()==null){","params[0]=newExpressionValue(\"*\",SQLTokenizer.VARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticfinalintBIT_OR=\'|\';//124","staticfinalintESCAPE_R=\'}\';//125","staticfinalintTILDE=\'~\';//126","staticfinalintLESSER_EQU=100+LESSER;//\<=","staticfinalintUNEQUALS=100+EQUALS;//\<\>","staticfinalintGREATER_EQU=100+GREATER;//\>="]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(identity){","counter.setNextValue(obj);","booleanisCaseSensitive(){","returncaseSensitive;","voidsetNullable(booleannullable){","this.nullable=nullable;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["returnparam1.getBytes();","caseSQLTokenizer.VARBINARY:{","byte[]bytes=param1.getBytes();","intlength=datatype.getPrecision();","if(length\<bytes.length){","byte[]buffer=newbyte[length];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["if((cc!=\'-\'&&cc!=\'$\'&&cc\<\'0\')||cc\>\'9\')break;//isidentifier--\>break","if(k\>=i)break;//precedingtokensareonlydigitsthatitisnotanidentifierelseafloatingnumber","case\'-\':","if(comment!=NOT_COMMENT){","break;","if(comment==LINE_COMMENT){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnrowSource.isScrollable();","finalbooleanisBeforeFirst(){","returnrow==0;","finalbooleanisFirst(){","returnrow==1&&isCurrentRow;","finalbooleanisLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["if(dataType\<0){","if(newValue==null)","this.dataType=SQLTokenizer.NULL;","else","if(newValueinstanceofString)","this.dataType=SQLTokenizer.VARCHAR;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["verifyFreePufferSize(4);","puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteLong(longvalue){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["addKeyWord(\"DAYOFYEAR\",DAYOFYEAR);","addKeyWord(\"DAY\",DAY);","addKeyWord(\"HOUR\",HOUR);","addKeyWord(\"MILLISECOND\",MILLISECOND);","addKeyWord(\"MINUTE\",MINUTE);","addKeyWord(\"MONTH\",MONTH);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(idx1==0&&length\>0){","throwSmallSQLException.create(Language.DATETIME_INVALID);","if(month\>=12){","throwSmallSQLException.create(Language.MONTH_TOOLARGE,datetime);","if(day\>=32){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["voidsaveRef(StoreImploutput)throwsSQLException{","if(fileOffset\<0){","save();","output.writeLong(fileOffset);","@Override","IndexNodeloadRef(longoffset)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["this.con=con;","tableTimestamp=tableView.getTimestamp();","returntrue;","returnfalse;","abstractvoiddeleteRow()throwsSQLException;","abstractvoidupdateRow(Expression[]updateValues)throwsException;"]": ["|project://smallsql/src/smallsql/database/TableViewResult.java|"],
"["returngetString(input);","staticStringgetString(Stringinput){","char[]output=newchar[4];","intidx=0;","input=input.toUpperCase();","if(input.length()\>0){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["usableLock=lock;","}else{","if(lock.lockType==LOCK_WRITE){","returnnull;//writelockofanotherConnection","prevLock=lock;","lock=lock.nextLock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(((Money)obj).value,4);","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","if(objinstanceofMutableNumeric)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(isEscape){","expr=expression(cmd,0);","nextToken(MISSING_COMMA);","col=datatype(isEscape);","}else{","col=datatype(isEscape);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicbooleanusesLocalFilePerTable(){","returnfalse;","publicbooleansupportsMixedCaseIdentifiers(){","returntrue;","publicbooleanstoresUpperCaseIdentifiers(){","returnfalse;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["if(isNull())returnnull;","Stringstr=param1.getString();","intstrLen=str.length();","intstart=Math.min(Math.max(0,param2.getInt()-1),strLen);","intlength=param3.getInt();","if(length\<0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["returnnewMutableNumeric(getMoney(),4);","caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();","num.floor();","returnnum;","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1Number.java|"],
"["verifyFreePufferSize(2);","puffer[offset++]=(byte)(value\>\>8);","puffer[offset++]=(byte)(value);","voidwriteInt(intvalue){","verifyFreePufferSize(4);","puffer[offset++]=(byte)(value\>\>24);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["privatebooleanisAggregateFunction;","privateintmaxRows=-1;","finalbooleanisGroupResult(){","returngroupBy!=null||having!=null||isAggregateFunction;","privatevoidcompileJoin(JoinsingleJoin)throwsException{","if(singleJoin.condition!=null)compileLinkExpressionParams(singleJoin.condition);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["if(lock.con!=con)returnnull;","tabLockConnection=con;","tabLockCount++;","TableStorePagelock=newTableStorePage(con,this,LOCK_TAB,page);","lock.rollback();","returnlock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Object[][]data=con.getDatabase(false).getIndexInfo(con,table,unique);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleansupportsResultSetType(inttype){","switch(type){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["caseNEGATIVE:","MutableNumericnum=left.getNumeric();","num.setSignum(-num.getSignum());","returnnum;","caseMOD:","if(getDataType(getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnull;","finalvoiddeleteRow()throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidupdateRow(Expression[]updateValues)throwsException{","throwSmallSQLException.create(Language.RSET_READONLY);","finalvoidinsertRow(Expression[]updateValues)throwsException{"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["publicStringgetMessage(Stringkey){","Stringmessage=(String)messages.get(key);","assert(message!=null):\"Messagecodenotfound:\"+key;","returnmessage;","publicStringgetSqlState(Stringkey){","StringsqlState=(String)sqlStates.get(key);"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["intidx=matrix[columnIdx];","if(idx\>=0)//setonlyifthecolumnpartofthisindex","expressions.set(idx,valueExpression);","finalvoidwriteFinish(SSConnectioncon){","finalvoidsave(StoreImplstore)throwsSQLException{","store.writeInt(constraintType);"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returngetString(left.getString(),right.getString());","caseSQLTokenizer.JAVA_OBJECT:","ObjectlObj=left.getObject();","ObjectrObj=right.getObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["SQLTokenizer.INT,","SQLTokenizer.SMALLINT,","SQLTokenizer.TINYINT,","SQLTokenizer.BIT,","SQLTokenizer.BOOLEAN,","SQLTokenizer.LONGNVARCHAR,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalpublicSQLWarninggetWarnings(){","returnnull;","finalpublicvoidclearWarnings(){","finalpublicvoidsetCursorName(Stringname)throwsSQLException{","finalvoidsetGeneratedKeys(ResultSetrs){","generatedKeys=rs;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.CLOB:{","finalStringleftStr=left.getString();","finalStringrightStr=right.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["node=searchTree;","}else{","if(node==null){","value=0;","wasWhiteSpace=false;","break;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["addKeyWord(\"CURTIME\",CURTIME);","addKeyWord(\"CURRENT_DATE\",CURRENTDATE);","addKeyWord(\"DAYNAME\",DAYNAME);","addKeyWord(\"DAYOFMONTH\",DAYOFMONTH);","addKeyWord(\"DAYOFWEEK\",DAYOFWEEK);","addKeyWord(\"DAYOFYEAR\",DAYOFYEAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returncolumnExpressions.get(colIdx).getInt();","longgetLong(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getLong();","floatgetFloat(intcolIdx)throwsException{","returncolumnExpressions.get(colIdx).getFloat();","doublegetDouble(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["finalIndexDescriptionsindexes=table.indexes;","updateCount=0;","cmdSel.from.execute();","cmdSel.beforeFirst();","StringskeyColumnNames=null;","ArrayListkeys=null;"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["Stringstables=getTables(tablePattern);","for(inti=0;i\<tables.size();i++){","StringtableName=tables.get(i);","try{","TableViewtab=getTableView(con,tableName);","Columnscols=tab.columns;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["setScale(num.scale);","add(num.signum,num.value);","privatevoidadd(intsig2,int[]val2){","if(val2.length\>value.length){","int[]temp=val2;","val2=value;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(month==1){","if(day==30){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==29){","if(!isLeapYear(year)){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Object[]params){","Stringmessage=translateMsg(messageCode,params);","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["Stringname=token.getName(sql);","checkValidIdentifier(name,token);","returnname;","privateStringnextIdentifier()throwsSQLException{","returngetIdentifier(nextToken(MISSING_IDENTIFIER));","privateStringnextIdentiferPart(Stringname)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnstoreTemp;","privatevoidresizePage(intminNewSize){","intnewSize=Math.max(minNewSize,page.length*2);","byte[]newPage=newbyte[newSize];","System.arraycopy(page,0,newPage,0,page.length);","page=newPage;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalStringgetString(intoffset,intdataType)throwsException{","returnnull;","finalvoidscanObjectOffsets(int[]offsets,int[]dataTypes){/*thereisnothingtoscan*/}","finalintgetUsedSize(){","return0;","finallonggetNextPagePos(){"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["publicString[][]getEntries(){","returnENTRIES;","privatefinalString[][]ENTRIES={","{UNSUPPORTED_OPERATION,\"NichtunterstÃ¼tzteFunktion:{0}\"},","{CANT_LOCK_FILE,\"DieDatei\'\'{0}\'\'kannnichtgelocktwerden.EineeinzelneSmallSQLDatenbankkannnurfÃ¼reineneinzigenProzessgeÃ¶ffnetwerden.\"},","{DB_EXISTENT,\"DieDatenbank\'\'{0}\'\'existiertbereits.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["privatestaticfinalint[]MISSING_LEVEL={SQLTokenizer.LEVEL};","privatestaticfinalint[]COMMANDS_TRANS_LEVEL={SQLTokenizer.READ,SQLTokenizer.REPEATABLE,SQLTokenizer.SERIALIZABLE};","privatestaticfinalint[]MISSING_READ={SQLTokenizer.READ};","privatestaticfinalint[]MISSING_COMM_UNCOMM={SQLTokenizer.COMMITTED,SQLTokenizer.UNCOMMITTED};","privatestaticfinalint[]MISSING_OPTIONS_DATATYPE={SQLTokenizer.DEFAULT,SQLTokenizer.IDENTITY,SQLTokenizer.NOT,SQLTokenizer.NULL,SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};","privatestaticfinalint[]MISSING_NUMBERVALUE={SQLTokenizer.NUMBERVALUE};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicvoidsetTime(StringparameterName,Timex)throwsSQLException{","setTime(findParameter(parameterName),x);","publicvoidsetTimestamp(StringparameterName,Timestampx)throwsSQLException{","setTimestamp(findParameter(parameterName),x);","publicvoidsetAsciiStream(StringparameterName,InputStreamx,intlength)throwsSQLException{","setAsciiStream(findParameter(parameterName),x,length);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["caseSQLTokenizer.SELECT:","caseSQLTokenizer.INSERT:","caseSQLTokenizer.UPDATE:","caseSQLTokenizer.UNION:","caseSQLTokenizer.FROM:","caseSQLTokenizer.WHERE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.PARAM_IDX_OUT_RANGE,newObject[]{newInteger(idx),newInteger(params.size())});","return((ExpressionValue)params.get(idx-1));","voidsetParamValue(intidx,Objectvalue,intdataType)throwsSQLException{","getParam(idx).set(value,dataType);","if(log.isLogging()){","log.println(\"param\"+idx+\'=\'+value+\";type=\"+dataType);"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["}while(result&&!getBoolean());","isOuterValid=false;","if(type==Join.FULL_JOIN){","if(fullRightRowCounter\>=isFullNotValid.length){","boolean[]temp=newboolean[fullRightRowCounter\<\<1];","System.arraycopy(isFullNotValid,0,temp,0,fullRightRowCounter);"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returnfalse;","finalvoidafterLast()throwsException{","dataSourceIdx=dataSources.size()-1;","currentDS=dataSources.get(dataSourceIdx);","currentDS.afterLast();","row=0;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["token=addColumn(token,cmd);","}while(token!=null&&token.value==SQLTokenizer.COMMA);","returncmd;","default:","Object[]param={\"ALTERTABLE\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["booleandefaultWasSet=col.isAutoIncrement();//withdatatypeCOUNTERalreadythisvalueisset","while(true){","if(token==null){","cmdCreate.addColumn(col);","returnnull;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["this.dataType=SQLTokenizer.BIGINT;","else","if(newValueinstanceofFloat)","this.dataType=SQLTokenizer.REAL;","else","if(newValueinstanceofDouble)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returnleftExpr;","privateExpressionexpressionSingle(Commandcmd,SQLTokentoken)throwsSQLException{","booleanisMinus=false;","if(token!=null){","switch(token.value){","caseSQLTokenizer.NULL:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["assert(false):\"ErrorduringLanguageinstantiation:\"+e.getMessage();","intlastUndsc=part.lastIndexOf(\"_\");","if(lastUndsc\>-1)part=part.substring(0,lastUndsc);","elsebreak;","thrownewIllegalArgumentException(\"Localenotfoundinthetree:\"+localeStr);","protectedLanguage(){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.SMALLINT:","return5;","caseSQLTokenizer.INT:","caseSQLTokenizer.SMALLMONEY:","return10;","caseSQLTokenizer.BIGINT:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnparam3.getFloat();","doublegetDouble()throwsException{","if(param1.getBoolean())","returnparam2.getDouble();","returnparam3.getDouble();","longgetMoney()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["throwSmallSQLException.createFromException(e);","publicTimegetTime(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.SQL_VARBINARY:dataType=SQLTokenizer.VARBINARY;break;","caseSQLTokenizer.SQL_VARCHAR:dataType=SQLTokenizer.VARCHAR;break;","default:thrownewError();","}else{","token=nextToken(MISSING_DATATYPE);","dataType=token.value;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(sortedRowCount\>0){","scrollStatus.afterLast();","scrollStatus.getRowOffset(false);//previousposition","}else{","rowSource.beforeFirst();","row=sortedRowCount;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["result=(result\<\<8)|(bytes[i]&0xFF);","returnresult;","staticbyte[]double2bytes(doublevalue){","returnlong2bytes(Double.doubleToLongBits(value));","staticbyte[]float2bytes(floatvalue){","returnint2bytes(Float.floatToIntBits(value));"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["throwSmallSQLException.createFromException(e);","privatefinalvoidclose()throwsException{","synchronized(tableViews){","Iteratoriterator=tableViews.values().iterator();","while(iterator.hasNext()){","TableViewtableView=(TableView)iterator.next();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["return\"SmallSQLDatabase\";","publicStringgetDatabaseProductVersion(){","returngetDriverVersion();","publicStringgetDriverName(){","return\"SmallSQLDriver\";","publicStringgetDriverVersion(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["commitPages.add(storePage);","publicvoidcommit()throwsSQLException{","log.println(\"Commit\");","testClosedConnection();","synchronized(getMonitor()){","try{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["packagesmallsql.database;","publicclassExpressionFunctionRightextendsExpressionFunctionReturnP1StringAndBinary{","finalintgetFunction(){","returnSQLTokenizer.RIGHT;","finalbooleanisNull()throwsException{","returnparam1.isNull()||param2.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["caseGREATER:","caseGRE_EQU:","caseLESSER:","caseLES_EQU:","caseUNEQUALS:","caseBETWEEN:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{PK_ONLYONE,\"EineTabellekannnureinenPrimÃ¤rschlÃ¼sselhaben.\"},","{KEY_DUPLICATE,\"DoppelterSchlÃ¼ssel.\"},","{MONTH_TOOLARGE,\"DerMonatistzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{DAYS_TOOLARGE,\"DieTagesindzugroÃŸimDATEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{HOURS_TOOLARGE,\"DieStundensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},","{MINUTES_TOOLARGE,\"DieMinutensindzugroÃŸimTIMEoderTIMESTAMPWert\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["throwSmallSQLException.create(Language.FILE_TOONEW,params);","}catch(Throwablee){","if(raFile!=null)","try{","raFile.close();","}catch(Exceptione2){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["Expressionexpr=getValue(i);","wasNull=expr.isNull();","returnexpr.getLong();","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicBigDecimalgetBigDecimal(inti,intscale)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returnSQLTokenizer.IIF;","booleanisNull()throwsException{","if(param1.getBoolean())","returnparam2.isNull();","returnparam3.isNull();","booleangetBoolean()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["privatevoidcompileJoin(JoinsingleJoin)throwsException{","if(singleJoin.condition!=null)compileLinkExpressionParams(singleJoin.condition);","if(singleJoin.leftinstanceofJoin){","compileJoin((Join)singleJoin.left);","if(singleJoin.rightinstanceofJoin){","compileJoin((Join)singleJoin.right);"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["count=2*(value.length-i)+1;","break;","char[]puffer=newchar[count];","puffer[0]=(char)count;","for(intc=1;c\<count;){","puffer[c++]=(char)(value[i]\>\>16);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["staticfinalintFALSE=506;","staticfinalintBETWEEN=507;","staticfinalintLIKE=508;","staticfinalintIN=509;","static{","addKeyWord(\"OR\",OR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StoreImplgetLobStore(SSConnectioncon,longfilePos,intpageOperation)throwsException{","if(lobs==null){","lobs=newLobs(this);","returnlobs.getStore(con,filePos,pageOperation);","finallonggetFirstPage(){","returnfirstPage;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["}else","returngetReturnValue(status.nodeValue);","if(idx\<0){","if(nodeStack.size()\>1){","nodeStack.pop();","continue;"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["Arrays.fill(buffer,\'\');","returnstr+newString(buffer);","returnstr.substring(0,length);","caseSQLTokenizer.LONGVARBINARY:","returnparam1.getBytes();","caseSQLTokenizer.VARBINARY:{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["default:throwcreateUnspportedConversion(SQLTokenizer.NUMERIC);","ObjectgetObject()throwsjava.lang.Exception{","if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["keywords.put(Utils.getInteger(value),keyword);","char[]letters=keyword.toCharArray();","if(searchTree==null){","searchTree=newSearchNode();","searchTree.letter=(char)(letters[0]|0x20);","SearchNodeprev=null;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(data[i]==null)","returni;","}else{","for(inti=0;i\<size;i++)","if(expr.equals(data[i]))","returni;"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["if(!fromSource.hasAlias()){","fromSource.setAlias(token.getName(sql));","break;","throwcreateSyntaxError(token,newint[]{SQLTokenizer.COMMA,SQLTokenizer.GROUP,SQLTokenizer.ORDER,SQLTokenizer.HAVING});","privatevoidfrom(CommandSelectcmd)throwsSQLException{","DataSourcestables=newDataSources();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["continue;","}else{","return-1;","IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","finalvoidafterLast(){"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["caseSQLTokenizer.IDENTITY:","if(defaultWasSet)throwcreateSyntaxError(token,MISSING_COMMA_PARENTHESIS);","col.setAutoIncrement(true);","defaultWasSet=true;","break;","caseSQLTokenizer.NULL:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"MILLISECOND\",MILLISECOND);","addKeyWord(\"MINUTE\",MINUTE);","addKeyWord(\"MONTH\",MONTH);","addKeyWord(\"MONTHNAME\",MONTHNAME);","addKeyWord(\"GETDATE\",NOW);//aliasforMSSQLServer","addKeyWord(\"NOW\",NOW);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["writeMagic(randomFile);","returnrandomFile;","privatevoidload(Databasedatabase)throwsSQLException{","try{","Filefile=getFile(database,name);","if(!file.exists())"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["default:throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM,SQLTokenizer.getKeyWord(dataType));","break;","caseMAX:","if(value==null){","if(expr.isNull())","dataType=expr.getDataType();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["addKeyWord(\"ALTER\",ALTER);","addKeyWord(\"SET\",SET);","addKeyWord(\"EXEC\",EXECUTE);//aliasforEXECUTE;aliasmustsetfirstsothatkeyisinthehashtableandnotthealias","addKeyWord(\"EXECUTE\",EXECUTE);","addKeyWord(\"FROM\",FROM);","addKeyWord(\"WHERE\",WHERE);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returnDouble.longBitsToDouble(bytes2long(bytes));","staticlongbytes2long(byte[]bytes){","longresult=0;","intlength=Math.min(8,bytes.length);","for(inti=0;i\<length;i++){","result=(result\<\<8)|(bytes[i]&0xFF);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["privatefinalvoidsaveRemainderValue(longremainderValue,intcharCount){","this.remainderKey=newchar[charCount];","for(inti=charCount-1,d=0;i\>=0;i--){","this.remainderKey[d++]=(char)(remainderValue\>\>(i\<\<4));","finalIndexNodeaddRoot()throwsSQLException{","IndexNoderoot=(IndexNode)value;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["addKeyWord(\"DAYOFMONTH\",DAYOFMONTH);","addKeyWord(\"DAYOFWEEK\",DAYOFWEEK);","addKeyWord(\"DAYOFYEAR\",DAYOFYEAR);","addKeyWord(\"DAY\",DAY);","addKeyWord(\"HOUR\",HOUR);","addKeyWord(\"MILLISECOND\",MILLISECOND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["updateValue(columnIndex,x,-1);","publicvoidupdateObject(intcolumnIndex,Objectx)throwsSQLException{","updateValue(columnIndex,x,-1);","publicvoidupdateNull(StringcolumnName)throwsSQLException{","updateNull(findColumn(columnName));","publicvoidupdateBoolean(StringcolumnName,booleanx)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["ExpressionNameright=newExpressionName(null);","right.setFrom(this,idx,newColumnExpression(left));","Expressionexpr=newExpressionArithmetic(left,right,ExpressionArithmetic.EQUALS_NULL);","currentGroup=(currentGroup==null)?","expr:","newExpressionArithmetic(currentGroup,expr,ExpressionArithmetic.AND);"]": ["|project://smallsql/src/smallsql/database/GroupResult.java|"],
"["intreadInt(){","return((puffer[offset++]&0xFF)\<\<24)","|((puffer[offset++]&0xFF)\<\<16)","|((puffer[offset++]&0xFF)\<\<8)","|(puffer[offset++]&0xFF);","longreadLong(){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["page[offset++]=(byte)(value\>\>32);","page[offset++]=(byte)(value\>\>24);","page[offset++]=(byte)(value\>\>16);","page[offset++]=(byte)(value\>\>8);","page[offset++]=(byte)(value);","longreadLong(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{TABLE_CORRUPT_PAGE,\"01000\"},","{TABLE_MODIFIED,\"01000\"},","{TABLE_DEADLOCK,\"01000\"},","{TABLE_OR_VIEW_MISSING,\"01000\"},","{TABLE_FILE_INVALID,\"01000\"},","{TABLE_OR_VIEW_FILE_INVALID,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["finalSSConnectioncon;","Commandcmd;","privatebooleanisClosed;","intrsType;","intrsConcurrency;","privateintfetchDirection;"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["addKeyWord(\"INTO\",INTO);","addKeyWord(\"UPDATE\",UPDATE);","addKeyWord(\"CREATE\",CREATE);","addKeyWord(\"DROP\",DROP);","addKeyWord(\"ALTER\",ALTER);","addKeyWord(\"SET\",SET);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalstaticprivatelonglongToBinarySortOrder(longvalue){","returnvalue^0x8000000000000000L;","finalstaticprivatechar[]stringToBinarySortOrder(Stringvalue,booleanneedTrim){","intlength=value.length();","if(needTrim){","while(length\>0&&value.charAt(length-1)==\'\')length--;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnInteger.MAX_VALUE;","if(defaultValue==-1)","thrownewError(\"Precision:\"+SQLTokenizer.getKeyWord(dataType));","returndefaultValue;","publicintgetColumnDisplaySize(intcolumn)throwsSQLException{","returngetColumnExpression(column).getDisplaySize();"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["this.dataType=dataType;","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionValue))returnfalse;","Objectv=((ExpressionValue)expr).value;","if(v==value)returntrue;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["previousToken();","Expressionexpr=expression(cmdCreate,0);","SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;","Stringdef=newString(sql,offset,length);","col.setDefaultValue(expr,def);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(e!=null){","src[j]=null;","do{","Entrynext=e.next;","e.next=null;","inti=(int)(e.key%newCapacity);"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["if(num.scale\<scale){","num.setScale(scale);","}else","if(num.scale\>scale){","setScale(num.scale);","add(-num.signum,num.value);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["publicstaticfinalStringDATETIME_INVALID=\"SS-0257\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_OPER=\"SS-0280\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_OPER=\"SS-0281\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_FUNC=\"SS-0282\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_FUNC=\"SS-0283\";","publicstaticfinalStringUNSUPPORTED_TYPE_CONV=\"SS-0284\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["addKeyWord(\"RAND\",RAND);","addKeyWord(\"ROUND\",ROUND);","addKeyWord(\"SIGN\",SIGN);","addKeyWord(\"SIN\",SIN);","addKeyWord(\"SQRT\",SQRT);","addKeyWord(\"TAN\",TAN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(!expr.isNull())((MutableInteger)value).value++;","break;","caseSUM:","if(isEmpty()){","initValue(expr);","}else"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.BINARY:","if(other.getPrecision()\>expr.getPrecision()){","returnnewExpressionFunctionConvert(newColumnExpression(other),expr,null);","break;","break;","returnexpr;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["finalvoidnullRow(){","thrownewError();","finalvoidnoRow(){","thrownewError();","finalvoidexecute()throwsException{/*canbeempty,nothingtodo*/}","booleanisExpressionsFromThisRowSource(Expressionscolumns){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["Throwablee)","Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(e,message,sqlState);","staticStringtranslateMsg(StringmessageCode,Object[]params){","assert(messageCode!=null&&params!=null):\"Fillparameters.msgCode=\"+messageCode+\"params=\"+params;"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["break;","caseSQLTokenizer.CHARLEN:","caseSQLTokenizer.CHARACTLEN:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionCharLen();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["index=newIndex(true);","finalbooleanisScrollable(){","returnfalse;","finalvoidbeforeFirst()throwsException{","rowSource.beforeFirst();","row=0;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["returnrowPos\>1;","finalvoidafterLast(){","rowPos=2;","finalbooleanabsolute(introw){","rowPos=(row\>0)?","Math.min(row,1):"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["voidadd(TransactionStepstorePage)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){","commitPages.add(storePage);","publicvoidcommit()throwsSQLException{","log.println(\"Commit\");"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnstore.getLong(offsets[colIdx],dataTypes[colIdx]);","@Override","finalfloatgetFloat(intcolIdx)throwsException{","returnstore.getFloat(offsets[colIdx],dataTypes[colIdx]);","@Override","finaldoublegetDouble(intcolIdx)throwsException{"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["finalvoidaddRemainderKey(longrowOffset,longremainderValue,intcharCount)throwsSQLException{","saveRemainderValue(remainderValue,charCount);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);","finalvoidaddRemainderKey(longrowOffset,char[]remainderValue,intoffset)throwsSQLException{","saveRemainderValue(remainderValue,offset);","value=(unique)?(Object)newLong(rowOffset):newLongTreeList(rowOffset);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["this.holdability=holdability;","publicintgetHoldability(){","returnholdability;","intgetSavepoint()throwsSQLException{","testClosedConnection();","returncommitPages.size();//thecallisatomic,thatitneednotbesynchronized"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["bytes=newbyte[8];","System.arraycopy(page,valueOffset,bytes,0,bytes.length);","returnbytes;","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric().toByteArray();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.value=value;","publicdoubledoubleValue(){","returnvalue;","publicfloatfloatValue(){","returnvalue;","publicintintValue(){"]": ["|project://smallsql/src/smallsql/database/MutableLong.java|","|project://smallsql/src/smallsql/database/MutableFloat.java|","|project://smallsql/src/smallsql/database/MutableInteger.java|"],
"["publicstaticfinalStringROWSOURCE_READONLY=\"SS-0136\";","publicstaticfinalStringSTMT_IS_CLOSED=\"SS-0140\";","publicstaticfinalStringSUBQUERY_COL_COUNT=\"SS-0160\";","publicstaticfinalStringJOIN_DELETE=\"SS-0161\";","publicstaticfinalStringJOIN_INSERT=\"SS-0162\";","publicstaticfinalStringDELETE_WO_FROM=\"SS-0163\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["from.execute();","for(inti=0;i\<columnExpressions.size();i++){","ExpressionNameexpr=(ExpressionName)columnExpressions.get(i);","DataSourceds=expr.getDataSource();","TableResulttableResult=(TableResult)ds;","tableResult.lock=SQLTokenizer.UPDATE;"]": ["|project://smallsql/src/smallsql/database/CommandUpdate.java|"],
"["setCharacterStream(findParameter(parameterName),x,length);","publicvoidsetDate(StringparameterName,Datex,Calendarcal)throwsSQLException{","setDate(findParameter(parameterName),x,cal);","publicvoidsetTime(StringparameterName,Timex,Calendarcal)throwsSQLException{","setTime(findParameter(parameterName),x,cal);","publicvoidsetTimestamp(StringparameterName,Timestampx,Calendarcal)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["Stringstr=param1.getString();","intstrLen=str.length();","intstart=Math.min(Math.max(0,param2.getInt()-1),strLen);","intlength=param3.getInt();","if(length\<0)","throwSmallSQLException.create(Language.SUBSTR_INVALID_LEN,newInteger(length));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSubstring.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","classStoreNullextendsStore{","privatefinallongnextPagePos;","StoreNull(){"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["maxFieldSize=max;","finalpublicintgetMaxRows(){","returnmaxRows;","finalpublicvoidsetMaxRows(intmax)throwsSQLException{","if(max\<0)","throwSmallSQLException.create(Language.ROWS_WRONG_MAX,String.valueOf(max));"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["{GROUP_AGGR_INVALID,\"01000\"},","{GROUP_AGGR_NOTPART,\"01000\"},","{ORDERBY_INTERNAL,\"01000\"},","{UNION_DIFFERENT_COLS,\"01000\"},","{INDEX_EXISTS,\"01000\"},","{INDEX_MISSING,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returntrue;","returnfalse;","privateSQLTokenlastToken(){","if(tokenIdx\>tokens.size()){","returnnull;","return(SQLToken)tokens.get(tokenIdx-1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewDouble(readDouble());","caseSQLTokenizer.MONEY:","returnMoney.createFromUnscaledValue(readLong());","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.offset=valueOffset;","if(readBoolean())returnfalse;","switch(dataType){","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","returnreadBoolean();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["CommandTablecmd=newCommandTable(con.log,catalog,name,tokenType.value);","switch(tokenType.value){","caseSQLTokenizer.ADD:","SQLTokentoken;","do{","token=nextToken(MISSING_IDENTIFIER);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intvalue;","intoffset;//thestartoffsetthetokenintheSQLstring","intlength;//thelengthofthetoken","Stringname;","SQLToken(intvalue,inttokenStart,inttokenEnd){","this.value=value;"]": ["|project://smallsql/src/smallsql/database/SQLToken.java|"],
"["return((ExpressionFunction)expr).getFunction()==getFunction();","SQLExceptioncreateUnspportedDataType(intdataType){","Object[]params={","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())","};"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["returncolumn.getPrecision();","intgetScale(){","returncolumn.getScale();","intgetDisplaySize(){","returncolumn.getDisplaySize();","booleanisAutoIncrement(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnnode.addRootValue(key,i);","}else","if(equals(node.getRemainderValue(),key,i)){","if(isLast){","node.saveValue(rowOffset);","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","return16;","caseSQLTokenizer.UNIQUEIDENTIFIER:","return36;","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["static{","addKeyWord(\"MS\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"SQL_TSI_FRAC_SECOND\",SQL_TSI_FRAC_SECOND);","addKeyWord(\"S\",SQL_TSI_SECOND);","addKeyWord(\"SS\",SQL_TSI_SECOND);","addKeyWord(\"SQL_TSI_SECOND\",SQL_TSI_SECOND);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["this.view=newView(con,commandSelect);","this.columnExpressions=commandSelect.columnExpressions;","this.commandSelect=commandSelect;","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","booleaninit(SSConnectioncon)throwsException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["addKeyWord(\"KEY\",KEY);","addKeyWord(\"UNIQUE\",UNIQUE);","addKeyWord(\"CLUSTERED\",CLUSTERED);","addKeyWord(\"NONCLUSTERED\",NONCLUSTERED);","addKeyWord(\"REFERENCES\",REFERENCES);","addKeyWord(\"UNION\",UNION);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["row=0;","finalbooleanfirst()throwsException{","dataSourceIdx=0;","currentDS=dataSources.get(0);","booleanb=currentDS.first();","row=b?1:0;"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["TableStorePageInsert(SSConnectioncon,Tabletable,intlockType){","super(con,table,lockType,-1);","link.page=this;","link.filePos=fileOffset;","finallongcommit()throwsSQLException{","longresult=super.commit();"]": ["|project://smallsql/src/smallsql/database/TableStorePageInsert.java|"],
"["return9;//nanoseconds","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","return38;","default:return0;","intgetDisplaySize(){"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["publicclassCommandInsertextendsCommand{","booleannoColumns;//afterthetablenamewasnocolumnExpressions;allcolumnExpressionsindefaultorder","privateCommandSelectcmdSel;","privateTabletable;","privatelongtableTimestamp;","privateint[]matrix;//mappingofthecolumnsfromINSERTtothecolumnsintheTable;-1defaultValue"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returnprecision+(scale\>0?2:1);","caseSQLTokenizer.VARBINARY:","caseSQLTokenizer.BINARY:","return2+precision*2;","caseSQLTokenizer.SMALLDATETIME:","return21;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["finalprivateCommandSelectcmdSel;","finalprivateIndexindex=newIndex(true);","finalprivateSSConnectioncon;","ExpressionInSelect(SSConnectioncon,Expressionleft,CommandSelectcmdSel,intoperation){","super(left,(Expressions)null,operation);","this.cmdSel=cmdSel;"]": ["|project://smallsql/src/smallsql/database/ExpressionInSelect.java|"],
"["caseSQLTokenizer.ADD:","con=newSSConnection(con);","TableoldTable=(Table)database.getTableView(con,name);","TableStorePagetableLock=oldTable.requestLock(con,SQLTokenizer.ALTER,-1);","StringnewName=\"#\"+System.currentTimeMillis()+this.hashCode();","try{"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["returncmd;","default:","Object[]param={\"ALTERTABLE\"+tokenType.getName(sql)};","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,param);","privateCommandSetset()throwsSQLException{","SQLTokentoken=nextToken(COMMANDS_SET);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["chardigit=(i\<0)?(length==0?(char)1:2)",":(key[i]);","if(++i==length){","if(isLast){","node.addNode(digit,rowOffset);","returnnull;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["SSCallableStatement(SSConnectioncon,Stringsql,intrsType,intrsConcurrency)throwsSQLException{","super(con,sql,rsType,rsConcurrency);","privateExpressiongetValue(inti)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodfindParameter()notyetimplemented.\");","publicvoidregisterOutParameter(inti,intsqlType)throwsSQLException{","thrownewjava.lang.UnsupportedOperationException(\"MethodregisterOutParameter()notyetimplemented.\");"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["booleanisInList()throwsException{","if(left.isNull())returnfalse;","try{","for(inti=0;i\<inList.length;i++){","right=inList[i];","if(getBoolean())returntrue;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnewView(con,name,raFile,raFile.position());","}catch(Throwablee){","if(raFile!=null)","try{","raFile.close();","}catch(Exceptione2){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["addKeyWord(\"UNCOMMITTED\",UNCOMMITTED);","addKeyWord(\"REPEATABLE\",REPEATABLE);","addKeyWord(\"SERIALIZABLE\",SERIALIZABLE);","addKeyWord(\"CONSTRAINT\",CONSTRAINT);","addKeyWord(\"PRIMARY\",PRIMARY);","addKeyWord(\"FOREIGN\",FOREIGN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(isNull())return0;","switch(interval){","caseSQLTokenizer.SQL_TSI_FRAC_SECOND:","return(int)(param2.getLong()-param1.getLong());","caseSQLTokenizer.SQL_TSI_SECOND:","return(int)(param2.getLong()/1000-param1.getLong()/1000);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["returnfrom.last();","finalvoidafterLast()throwsException{","from.afterLast();","booleanisLast()throwsException{","returnfrom.isLast();","booleanisAfterLast()throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Objectparam0){","Stringmessage=translateMsg(messageCode,newObject[]{param0});","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["voidnullRow(){","rowSource.nullRow();","row=0;","voidnoRow(){","rowSource.noRow();","row=0;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["TableStorePagelock=(TableStorePage)locks.get(pageKey);","while(lock!=null){","if(lock.con!=con)returnnull;//thereisalreadyanylockfromanotherconnection,wecannotstartwrite","if(lock.lockType\<LOCK_WRITE){","lock.lockType=LOCK_WRITE;","returnlock;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["return((byte[])value).length;","default:","returnsuper.getPrecision();","intgetScale(){","switch(dataType){","caseSQLTokenizer.DECIMAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.INT:","returnnewMutableNumeric(readInt());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(readLong());","caseSQLTokenizer.REAL:","returnnewMutableNumeric(readFloat());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.REAL)),Utils.getInteger(7),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DOUBLE)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NVARCHAR)),Utils.getInteger(65535),\"\'\",\"\'\",\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BOOLEAN)),Utils.getInteger(1),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DATE)),Utils.getInteger(10),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{STXADD_IDENT_EMPTY,\"LeererBezeichner.\"},","{STXADD_IDENT_WRONG,\"UngÃ¼ltigerBezeichner\'\'{0}\'\'.\"},","{STXADD_OPER_MINUS,\"UngÃ¼ltigerOperatorMinusfÃ¼rDatentypVARBINARY.\"},","{STXADD_FUNC_UNKNOWN,\"UnbekannteFunktion.\"},","{STXADD_PARAM_INVALID_COUNT,\"UngÃ¼ltigeParamterAnzahl.\"},","{STXADD_JOIN_INVALID,\"UngÃ¼ltigeJoinSyntax.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["staticfinalintCONCAT=1105;","staticfinalintDIFFERENCE=1106;","staticfinalintINSERT=1107;","staticfinalintLCASE=1108;","staticfinalintLEFT=1109;","staticfinalintLENGTH=1110;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.ASTERISK:returnMUL;","caseSQLTokenizer.SLACH:returnDIV;","caseSQLTokenizer.PERCENT:returnMOD;","caseSQLTokenizer.EQUALS:returnEQUALS;","caseSQLTokenizer.GREATER:returnGREATER;","caseSQLTokenizer.GREATER_EQU:returnGRE_EQU;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{COL_DUPLICATE,\"Nomedicolonnaduplicato:\'\'{0}\'\'.\"},","{COL_MISSING,\"Colonna\'\'{0}\'\'nontrovata.\"},","{COL_VAL_UNMATCH,\"IlconteggiodicolonneevalorinonÃ¨identico.\"},","{COL_INVALID_SIZE,\"Lunghezzanonvalida({0})perlacolonna\'\'{1}\'\'.\"},","{COL_WRONG_PREFIX,\"Ilprefissodicolonna\'\'{0}\'\'noncoincideconunaliasonomeditabellausatonellaquery.\"},","{COL_READONLY,\"Lacolonna\'\'{0}\'\'Ã¨disolalettura.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if(expr.isNull()){","if(!searchNullValues){","returnnull;","page=findNull(page);","}else{","switch(expr.getDataType()){"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnSmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC,params);","SQLExceptioncreateUnspportedConversion(intdataType){","Object[]params={","SQLTokenizer.getKeyWord(dataType),","SQLTokenizer.getKeyWord(getFunction())","};"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["StringgetName(){","returnname;","booleanisAutoIncrement(){","returnidentity;","voidsetAutoIncrement(booleanidentity){","this.identity=identity;"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["this.type=type;","this.catalog=catalog;","this.name=name;","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","switch(type){","caseSQLTokenizer.DATABASE:"]": ["|project://smallsql/src/smallsql/database/CommandDrop.java|"],
"["returnexpr;","ExpressionsparamList=expressionParenthesisList(cmd);","intparamCount=paramList.size();","Expression[]params=paramList.toArray();","booleaninvalidParamCount;","switch(token.value){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.DECIMAL);","publicvoidsetString(intparameterIndex,Stringx)throwsSQLException{","checkStatement();","cmd.setParamValue(parameterIndex,x,SQLTokenizer.VARCHAR);","publicvoidsetBytes(intparameterIndex,byte[]x)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["packagesmallsql.database;","classJoinScrollIndexextendsJoinScroll{","privatefinalintcompare;","ExpressionsleftEx;","ExpressionsrightEx;","privateIndexindex;"]": ["|project://smallsql/src/smallsql/database/JoinScrollIndex.java|"],
"["addKeyWord(\"LOCATE\",LOCATE);","addKeyWord(\"LTRIM\",LTRIM);","addKeyWord(\"OCTET_LENGTH\",OCTETLEN);","addKeyWord(\"REPEAT\",REPEAT);","addKeyWord(\"REPLACE\",REPLACE);","addKeyWord(\"RIGHT\",RIGHT);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["if(day==30){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==29){","if(!isLeapYear(year)){","throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(hour\>=24){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnExpressionValue.getBytes(getObject(),getDataType());","voidsetParams(Expression[]params){","super.setParams(params);","if(params.length\>0)param1=params[0];","if(params.length\>1)param2=params[1];","if(params.length\>2)param3=params[2];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunction.java|"],
"["for(inti=0;i\<size;i++)","if(data[i]==null)","returni;","}else{","for(inti=0;i\<size;i++)","if(expr.equals(data[i]))"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["caseSQLTokenizer.SQL_TSI_YEAR:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","details2.year+=param1.getLong();","returnDateTime.calcMillis(details2);","default:thrownewError();","floatgetFloat()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["caseEQUALS_NULL:","caseGREATER:","caseGRE_EQU:","caseLESSER:","caseLES_EQU:","caseUNEQUALS:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["caseSQLTokenizer.INT:","page=find(page,intToBinarySortOrder(expr.getInt()),2,nodeList);","break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["MutableNumericnum=param1.getNumeric();","if(num!=null&&(dataType==SQLTokenizer.NUMERIC||dataType==SQLTokenizer.DECIMAL))","num.setScale(getScale());","returnnum;","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.BOOLEAN:","returnreadBoolean()?newMutableNumeric(1):newMutableNumeric(0);","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnnewMutableNumeric(Utils.bytes2double(readBinary()));","caseSQLTokenizer.TINYINT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["expr=newExpressionArithmetic(params[0],params[1],ExpressionArithmetic.ADD);","break;","caseSQLTokenizer.DIFFERENCE:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionDifference();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["staticbooleanlike(Stringvalue,Stringpattern){","if(value==null||pattern==null)returnfalse;","if(pattern.length()==0)returntrue;","intmIdx=0;//indexinmaskArray","intsIdx=0;//indexinsearchArray","booleanrange=false;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returnnull;","intgetPrecision(){","returncolumn.getPrecision();","intgetScale(){","returncolumn.getScale();","intgetDisplaySize(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["returnnewMutableNumeric((BigDecimal)obj);","default:returnnewMutableNumeric(obj.toString());","ObjectgetObject(){","if(isEmpty()){","returnnull;","returnvalue;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalprivatelonggetDateTimeLong()throwsException{","switch(param1.getDataType()){","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","returnDateTime.parse(param1.getString());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["{TABLE_CANT_DROP,\"01000\"},","{TABLE_CANT_DROP_LOCKED,\"01000\"},","{TABLE_CORRUPT_PAGE,\"01000\"},","{TABLE_MODIFIED,\"01000\"},","{TABLE_DEADLOCK,\"01000\"},","{TABLE_OR_VIEW_MISSING,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["break;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:","page=find(page,expr.getBoolean()?2:1,1,nodeList);","break;","caseSQLTokenizer.NUMERIC:"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["privatestaticfinalint[]MISSING_ISOLATION={SQLTokenizer.ISOLATION};","privatestaticfinalint[]MISSING_LEVEL={SQLTokenizer.LEVEL};","privatestaticfinalint[]COMMANDS_TRANS_LEVEL={SQLTokenizer.READ,SQLTokenizer.REPEATABLE,SQLTokenizer.SERIALIZABLE};","privatestaticfinalint[]MISSING_READ={SQLTokenizer.READ};","privatestaticfinalint[]MISSING_COMM_UNCOMM={SQLTokenizer.COMMITTED,SQLTokenizer.UNCOMMITTED};","privatestaticfinalint[]MISSING_OPTIONS_DATATYPE={SQLTokenizer.DEFAULT,SQLTokenizer.IDENTITY,SQLTokenizer.NOT,SQLTokenizer.NULL,SQLTokenizer.PRIMARY,SQLTokenizer.UNIQUE,SQLTokenizer.COMMA,SQLTokenizer.PARENTHESIS_R};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["lobs=newLobs(this);","returnlobs.getStore(con,filePos,pageOperation);","finallonggetFirstPage(){","returnfirstPage;","ListgetInserts(SSConnectioncon){","synchronized(locks){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["staticintcompareBytes(byte[]leftBytes,byte[]rightBytes){","intlength=Math.min(leftBytes.length,rightBytes.length);","intcomp=0;","for(inti=0;i\<length;i++){","if(leftBytes[i]!=rightBytes[i]){","comp=leftBytes[i]\<rightBytes[i]?-1:1;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["System.out.print(md.getColumnLabel(i));","System.out.print(\'\\t\');","System.out.println();","while(rs.next()){","for(inti=1;i\<=count;i++){","System.out.print(rs.getObject(i));"]": ["|project://smallsql/src/smallsql/tools/CommandLine.java|"],
"["caseSQLTokenizer.SMALLINT:","returnreadShort();","caseSQLTokenizer.INT:","returnreadInt();","caseSQLTokenizer.BIGINT:","return(int)readLong();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["CommandDelete(Loggerlog){","super(log);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{","compile(con);","TableViewResultresult=TableViewResult.getTableViewResult(from);","updateCount=0;"]": ["|project://smallsql/src/smallsql/database/CommandDelete.java|"],
"["returnparam1.isNull();","ObjectgetObject()throwsException{","if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|"],
"["super.setParams(newExpression[]{left,right});","ExpressionArithmetic(Expressionleft,Expressionright,Expressionright2,intoperation){","super(FUNCTION);","this.left=left;","this.right=right;","this.right2=right2;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["super.setParams(params);","finalvoidsetParams(Expression[]params){","super.setParams(params);","inti=0;","for(intp=0;p\<cases.size();p++){","cases.set(p,params[i++]);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["addKeyWord(\"WHERE\",WHERE);","addKeyWord(\"GROUP\",GROUP);","addKeyWord(\"BY\",BY);","addKeyWord(\"HAVING\",HAVING);","addKeyWord(\"ORDER\",ORDER);","addKeyWord(\"ASC\",ASC);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.TIME:","returnnewDateTime(readTime(),SQLTokenizer.TIME).toString();","caseSQLTokenizer.DATE:","returnnewDateTime(readDate(),SQLTokenizer.DATE).toString();","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(readSmallDateTime(),SQLTokenizer.TIMESTAMP).toString();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importjava.sql.SQLException;","importsmallsql.database.language.Language;","publicclassCreateFileextendsTransactionStep{","privatefinalFilefile;","privatefinalSSConnectioncon;","privatefinalDatabasedatabase;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["privateStringgetIdentifier(SQLTokentoken)throwsSQLException{","Stringname=token.getName(sql);","checkValidIdentifier(name,token);","returnname;","privateStringnextIdentifier()throwsSQLException{","returngetIdentifier(nextToken(MISSING_IDENTIFIER));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["type=SQLTokenizer.DELETE;","createWriteLock();","writeFinsh(con);","StorePageLinkgetLink(){","return((TableStorePageInsert)storePage).getLink();","booleanisRollback(){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finalvoidsetName(Stringname){","this.alias=this.name=name;","finalStringgetAlias(){","returnalias;","finalvoidsetAlias(Stringalias){","this.alias=alias;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["}else{","newNode.moveRemainderValueSub(rowOffset,puffer);","privatefinalvoidmoveRemainderValueSub(ObjectrowOffset,char[]remainderValue){","intlength=remainderValue.length-1;","this.remainderKey=newchar[length];","value=rowOffset;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["break;","if(needGeneratedKeys&&generatedKeysType==2){","int[]keyIndexes=st.getGeneratedKeyIndexes();","for(inti=0;i\<keyIndexes.length;i++){","if(c+1==keyIndexes[i]){","keyColumnNames.add(column.getName());"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returncolumnExpressions.get(colIdx).getDataType();","voidbeforeFirst()throwsException{","commandSelect.beforeFirst();","booleanisBeforeFirst()throwsSQLException{","returncommandSelect.isBeforeFirst();","booleanisFirst()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["leftExpr=expressionSingle(cmd,token);","booleanisNot=false;","while((token=nextToken())!=null){","ExpressionrightExpr;","intoperation=ExpressionArithmetic.getOperationFromToken(token.value);","intlevel=operation/10;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["Objectparams=newObject[]{newInteger(length),newInteger(lengthColumn)};","throwSmallSQLException.create(Language.VALUE_BIN_TOOLARGE,params);","if(varBinary)lengthColumn=length;","intnewSize=offset+2+lengthColumn;","if(newSize\>page.length)resizePage(newSize);","page[offset++]=(byte)(lengthColumn\>\>8);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["publicBigDecimalgetBigDecimal(StringparameterName)throwsSQLException{","returngetBigDecimal(findParameter(parameterName));","publicObjectgetObject(StringparameterName,Mapmap)throwsSQLException{","returngetObject(findParameter(parameterName),map);","publicRefgetRef(StringparameterName)throwsSQLException{","returngetRef(findParameter(parameterName));"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["table.drop(con);","}else{","Table.drop(this,tableName);","voidremoveTableView(StringtableViewName){","synchronized(tableViews){","tableViews.remove(tableViewName);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.GROUP:","group(cmd);","break;","caseSQLTokenizer.HAVING:","having(cmd);","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["finalintgetFunction(){","returnSQLTokenizer.SIGN;","finalintgetInt()throwsException{","if(param1.isNull())return0;","switch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["staticfinalintCROSS=227;","staticfinalintUSE=228;","staticfinalintTOP=229;","staticfinalintADD=230;","staticfinalintLIMIT=231;","staticfinalintDATABASE=235;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returngetTimestamp(findColumn(columnName),cal);","publicURLgetURL(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["voidwriteTimestamp(longts){","writeLong(ts);","longreadTimestamp(){","returnreadLong();","voidwriteTime(longtime){","writeInt((int)((time/1000)%86400));"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticSQLExceptioncreate(StringmessageCode){","assert(messageCode!=null):\"Fillparameters\";","Stringmessage=translateMsg(messageCode,null);","StringsqlState=language.getSqlState(messageCode);","returnnewSmallSQLException(message,sqlState);","staticSQLExceptioncreate(StringmessageCode,Objectparam0){"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["publicclassCommandCreateViewextendsCommand{","privateColumnscolumns=newColumns();","Stringsql;","CommandCreateView(Loggerlog,Stringname){","super(log);","this.type=SQLTokenizer.VIEW;"]": ["|project://smallsql/src/smallsql/database/CommandCreateView.java|"],
"["buf.append(\'-\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();","case110://USAmm-dd-yyyy","formatNumber(details.month+1,2,buf);","buf.append(\'-\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(dataTypeIdx\>=MONEY_IDX)","returnSQLTokenizer.MONEY;","if(dataTypeIdx\>=DECIMAL_IDX)","returnSQLTokenizer.DECIMAL;","returnSQLTokenizer.DOUBLE;","staticintgetDataType(inttypeLeft,inttypeRight){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{STXADD_OPER_MINUS,\"01000\"},","{STXADD_FUNC_UNKNOWN,\"01000\"},","{STXADD_PARAM_INVALID_COUNT,\"01000\"},","{STXADD_JOIN_INVALID,\"01000\"},","{STXADD_FROM_PAR_CLOSE,\"01000\"},","{STXADD_KEYS_REQUIRED,\"01000\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["throwcreateUnspportedConversion(SQLTokenizer.MONEY);","MutableNumericgetNumeric()throwsjava.lang.Exception{","if(isNull())returnnull;","intdataType=getDataType();","switch(dataType){","caseSQLTokenizer.BIT:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["if(((MutableNumeric)value).compareTo(newValue)\<0)","value=newValue;","break;","caseSQLTokenizer.MONEY:","((Money)value).value=Math.max(((Money)value).value,expr.getMoney());","break;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["puffer[offset++]=(byte)(value);","voidwriteInt(intvalue){","verifyFreePufferSize(4);","puffer[offset++]=(byte)(value\>\>24);","puffer[offset++]=(byte)(value\>\>16);","puffer[offset++]=(byte)(value\>\>8);"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["staticfinalintLESSER_EQU=100+LESSER;//\<=","staticfinalintUNEQUALS=100+EQUALS;//\<\>","staticfinalintGREATER_EQU=100+GREATER;//\>=","static{","keywords.put(newInteger(LESSER_EQU),\"\<=\");","keywords.put(newInteger(UNEQUALS),\"\<\>\");"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime()!=0;","caseSQLTokenizer.UNIQUEIDENTIFIER:","returnfalse;","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BOOLEAN\"});"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["nodeValue=node.getValue();","this.asc=asc;","this.idx=(asc^scroll)?nodes.length:-2;","this.level=level;","voidafterLast(){","idx=(asc)?nodes.length:-2;"]": ["|project://smallsql/src/smallsql/database/IndexNodeScrollStatus.java|"],
"["return(long)(Utils.bytes2double(readBinary())*10000L);","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()*10000L;","caseSQLTokenizer.SMALLINT:","returnreadShort()*10000L;","caseSQLTokenizer.INT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["row=0;","finalvoidnoRow(){","currentDS.noRow();","row=0;","finalvoidexecute()throwsException{","for(inti=0;i\<dataSources.size();i++){"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["case110://USAmm-dd-yyyy","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.year,4,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["View.drop(this,viewName);","privatevoidcheckForeignKeys(SSConnectioncon,ForeignKeysforeignKeys)throwsSQLException{","for(inti=0;i\<foreignKeys.size();i++){","ForeignKeyforeignKey=foreignKeys.get(i);","TableViewpkTable=getTableView(con,foreignKey.pkTable);","if(!(pkTableinstanceofTable)){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["leftExpr=newExpressionArithmetic(leftExpr,list,operation);","break;","caseSQLTokenizer.IS:","token=nextToken(MISSING_NOT_NULL);","if(token.value==SQLTokenizer.NOT){","nextToken(MISSING_NULL);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["updateCount=0;","cmdSel.from.execute();","cmdSel.beforeFirst();","StringskeyColumnNames=null;","ArrayListkeys=null;","booleanneedGeneratedKeys=st.needGeneratedKeys();"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["returnnewIndexDescription(contrainName,tableName,constraintType,expressions,columns);","privateColumndatatype(booleanisEscape)throwsSQLException{","SQLTokentoken;","intdataType;","if(isEscape){","token=nextToken(MISSING_SQL_DATATYPE);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"LONGVARCHAR\",LONGVARCHAR);","addKeyWord(\"NTEXT\",LONGNVARCHAR);","addKeyWord(\"LONGNVARCHAR\",LONGNVARCHAR);","addKeyWord(\"LONG\",LONG);//aliasforOracleLONGandLONGRAW","addKeyWord(\"CLOB\",CLOB);","addKeyWord(\"NCLOB\",NCLOB);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["privatelongfileOffset;","FileIndexNode(booleanunique,chardigit,FileChannelfile){","super(unique,digit);","this.file=file;","fileOffset=-1;","@Override"]": ["|project://smallsql/src/smallsql/database/FileIndexNode.java|"],
"["caseSQLTokenizer.BIGINT:","writeLong(expr.getLong());","break;","caseSQLTokenizer.REAL:","writeFloat(expr.getFloat());","break;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","if(lock.con!=con)returnnull;","if(serializeConnections.size()\>0){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["@Override","publiclonglongValue(){","returnvalue;","@Override","publicStringtoString(){","returnString.valueOf(value);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["this.value=(long)(value*10000);","publicMoney(floatvalue){","this.value=(long)(value*10000);","publicstaticMoneycreateFromUnscaledValue(longvalue){","Moneymoney=newMoney();","money.value=value;"]": ["|project://smallsql/src/smallsql/database/Money.java|"],
"["finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);","finalvoidnullRow(){","rowSource.nullRow();"]": ["|project://smallsql/src/smallsql/database/Where.java|","|project://smallsql/src/smallsql/database/Distinct.java|"],
"["if(v==value)returntrue;","if(value==null)returnfalse;","returnvalue.equals(v);","voidaccumulate(Expressionexpr)throwsException{","inttype=getType();","if(type!=GROUP_BY)expr=expr.getParams()[0];"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["factor*=10;","if(factor==1000000000){","divImpl(factor);","factor=1;","divImpl(factor);","intgetSignum(){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["{RSET_READONLY,\"IlResultSetÃ¨disolalettura.\"},","{RSET_FWDONLY,\"IlResultSetÃ¨forwardonly.\"},//norealtranslation","{RSET_CLOSED,\"IlResultSetÃ¨chiuso.\"},","{RSET_NOT_INSERT_ROW,\"IlcursorenonÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{RSET_ON_INSERT_ROW,\"IlcursoreÃ¨attualmentenellariga\'\'InsertRow\'\'.\"},","{ROWSOURCE_READONLY,\"IlRowsourceÃ¨disolalettura.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewURL(expr.getString());","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["{TABLE_CANT_RENAME,\"DieTabelle\'\'{0}\'\'kannnichtumbenanntwerden.\"},","{TABLE_CANT_DROP,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{TABLE_CANT_DROP_LOCKED,\"DieTabelle\'\'{0}\'\'kannnichtgelÃ¶schtwerden,weilsiegelocktist.\"},","{TABLE_CORRUPT_PAGE,\"BeschÃ¤digteTabellenseitebeiPosition:{0}.\"},","{TABLE_MODIFIED,\"DieTabelle\'\'{0}\'\'wurdemodifiziert.\"},","{TABLE_DEADLOCK,\"Deadlock,eskannkeinLockerzeugtwerdenfÃ¼rTabelle\'\'{0}\'\'.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["if(!rsColumn.isDefinitelyWritable())","throwSmallSQLException.create(Language.COL_READONLY,newInteger(i));","ExpressionNameexp=(ExpressionName)rsColumn;","if(table==exp.getTable()){","updateValues[exp.getColumnIndex()]=src;","continue;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["publicintgetInt(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();","returnexpr.getInt();","}catch(Exceptione){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["con.add(lock);","returnlock;","voidfreeLock(TableStorePagestorePage){","finalintlockType=storePage.lockType;","finallongfileOffset=storePage.fileOffset;","synchronized(locks){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","return((Number)obj).longValue()*10000;","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["expr=newExpressionFunctionPI();","break;","caseSQLTokenizer.POWER:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionPower();","break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["addKeyWord(\"VARCHAR2\",VARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"VARCHAR\",VARCHAR);","addKeyWord(\"NVARCHAR2\",NVARCHAR);//aliasforOracleVARCHAR2","addKeyWord(\"NVARCHAR\",NVARCHAR);","addKeyWord(\"SYSNAME\",SYSNAME);","addKeyWord(\"TEXT\",LONGVARCHAR);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSUB:returnlVal-rVal;","caseMUL:returnlVal*rVal;","caseDIV:returnlVal/rVal;","caseNEGATIVE:return-rVal;","caseMOD:returnlVal%rVal;","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","publicResultSetgetIndexInfo(Stringcatalog,Stringschema,Stringtable,booleanunique,booleanapproximate)throwsSQLException{","try{","String[]colNames={\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"NON_UNIQUE\",\"INDEX_QUALIFIER\",\"INDEX_NAME\",\"TYPE\",\"ORDINAL_POSITION\",\"COLUMN_NAME\",\"ASC_OR_DESC\",\"CARDINALITY\",\"PAGES\",\"FILTER_CONDITION\"};","Object[][]data=con.getDatabase(false).getIndexInfo(con,table,unique);","returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["{ROW_NOCURRENT,\"KeinaktuellerDatensatz.\"},","{ROWS_WRONG_MAX,\"FehlerhafterWertfÃ¼rMaximaleDatensatzanzahl:{0}.\"},","{ROW_LOCKED,\"DerDatensatzistgelockedvoneineranderenVerbindung.\"},","{ROW_DELETED,\"DerDatensatzistbereitsgelÃ¶scht.\"},","{SAVEPT_INVALID_TRANS,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdieaktuelleTransaction.\"},","{SAVEPT_INVALID_DRIVER,\"DerSavepointistnichtgÃ¼ltigfÃ¼rdiesenTreiber{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["privatestaticfinalintBYTES_PER_CHAR=2;","finalintgetFunction(){","returnSQLTokenizer.BITLEN;","booleanisNull()throwsException{","returnparam1.isNull();","finalintgetInt()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionBitLen.java|"],
"["finalMutableNumericgetNumeric(intoffset,intdataType)throwsException{","returnnull;","finalObjectgetObject(intoffset,intdataType)throwsException{","returnnull;","finalStringgetString(intoffset,intdataType)throwsException{","returnnull;"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["finalObjectgetApiObject()throwsException{","Objectobj=getObject();","if(objinstanceofMutable){","return((Mutable)obj).getImmutableObject();","returnobj;","abstractStringgetString()throwsException;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["returnmessage;","publicStringgetSqlState(Stringkey){","StringsqlState=(String)sqlStates.get(key);","assert(sqlState!=null):\"SQLStatecodenotfound:\"+key;","returnsqlState;","publicString[][]getEntries(){"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnUtils.string2boolean(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(str==null||str.length()==0)return0;","returnstr.charAt(0);","finalObjectgetObject()throwsException{","Stringstr=param1.getString();","if(str==null||str.length()==0)returnnull;","returnUtils.getInteger(str.charAt(0));"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAscii.java|"],
"["booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.TABLE_EXISTENT,name);","FileChannelraFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,raFile,con,database));","writeMagic(raFile);","returnraFile;"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["returnisolationLevel;","publicSQLWarninggetWarnings(){","returnnull;","publicvoidclearWarnings(){","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["switch(param1.getDataType()){","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:","returnDateTime.parse(param1.getString());","returnparam1.getLong();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["addKeyWord(\"SQL_LONGVARBINARY\",SQL_LONGVARBINARY);","addKeyWord(\"SQL_LONGVARCHAR\",SQL_LONGVARCHAR);","addKeyWord(\"SQL_REAL\",SQL_REAL);","addKeyWord(\"SQL_SMALLINT\",SQL_SMALLINT);","addKeyWord(\"SQL_TIME\",SQL_TIME);","addKeyWord(\"SQL_TIMESTAMP\",SQL_TIMESTAMP);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","writeLongString(expr.getString());","break;","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayOutputStreambaos=newByteArrayOutputStream();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["offset=listEnum.offsetStack[listEnum.stack];","firstNode=false;","finallonggetPrevious(LongTreeListEnumlistEnum){","intshift=(3-listEnum.stack)\<\<4;","if(shift\>=64){//apreviouscallofgetNext()hasreturn-1","shift=48;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["caseCOUNT:","returnSQLTokenizer.INT;","default:thrownewError();","voidsetFrom(DataSourcefromEntry,intcolIdx,TableViewtable){","this.fromEntry=fromEntry;","this.colIdx=colIdx;"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["try{","Objectobj=getObject(columnIndex);","if(objinstanceofString||obj==null){","return(String)obj;","if(objinstanceofbyte[]){","return\"0x\"+Utils.bytes2hex((byte[])obj);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["@Override","publicintintValue(){","return(int)value;","@Override","publiclonglongValue(){","returnvalue;"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["staticfinalintLAST=1405;","staticfinalintAVG=1406;","static{","addKeyWord(\"COUNT\",COUNT);","addKeyWord(\"MIN\",MIN);","addKeyWord(\"MAX\",MAX);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["classJoinScroll{","privatefinalExpressioncondition;//thejoincondition,thepartaftertheON","finalinttype;","finalRowSourceleft;//thelefttable,vieworrowsourceofthejoin","finalRowSourceright;","privatebooleanisBeforeFirst=true;"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["returntrue;","returnfalse;","TableViewgetTableView(){","returnview;","voiddeleteRow()throwsSQLException{","commandSelect.deleteRow(con);"]": ["|project://smallsql/src/smallsql/database/ViewResult.java|"],
"["TableoldTable=(Table)database.getTableView(con,name);","TableStorePagetableLock=oldTable.requestLock(con,SQLTokenizer.ALTER,-1);","StringnewName=\"#\"+System.currentTimeMillis()+this.hashCode();","try{","ColumnsoldColumns=oldTable.columns;","ColumnsnewColumns=oldColumns.copy();"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["returntrue;","finalbooleanisLast(){","returnrowPos==1;","finalbooleanisAfterLast(){","returnrowPos\>1;","finalvoidafterLast(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(param1.getMoney());","caseSQLTokenizer.UNIQUEIDENTIFIER:","switch(param1.getDataType()){","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["finalintgetDataType(){","if(dataType\<0){","dataType=elseResult.getDataType();","for(inti=0;i\<results.size();i++){","dataType=ExpressionArithmetic.getDataType(dataType,results.get(i).getDataType());","returndataType;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseDIV:returnlVal/rVal;","caseNEGATIVE:return-rVal;","caseMOD:returnlVal%rVal;","throwcreateUnspportedConversion(SQLTokenizer.DOUBLE);","floatgetFloat()throwsjava.lang.Exception{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["IndexNodenode=status.nodes[idx];","nodeStack.push(newIndexNodeScrollStatus(node,status.asc,scroll,level));","finalvoidafterLast(){","longList=null;","nodeStack.setSize(1);","((IndexNodeScrollStatus)nodeStack.peek()).afterLast();"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["Detailsdetails=newDetails(time);","StringBufferbuf=newStringBuffer();","switch(style){","case0:","case100://monddyyyyhh:miAM(oderPM)","buf.append(SHORT_MONTHS[details.month]);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.DATE:","caseSQLTokenizer.SMALLDATETIME:","offset+=4;","break;","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["TablepkTable=(Table)database.getTableView(con,foreignKey.pkTable);","pkTable.references.add(foreignKey);","Table(Databasedatabase,Stringname){","super(name,null);","this.database=database;","indexes=null;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["if(data.length\<size+4+pointerSize)resize();","System.arraycopy(data,oldOffset,data,oldOffset+2+pointerSize,size-oldOffset);","size+=2+pointerSize;","writeShort(octet);","writePointer(size);","correctPointers(0,oldOffset,2+pointerSize,0);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["returnFloat.parseFloat(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnFloat.parseFloat(readLongString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["cases.set(p,params[i++]);","results.set(p,params[i++]);","if(i\<params.length)","elseResult=params[i];","voidsetParamAt(Expressionparam,intidx){","super.setParamAt(param,idx);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["caseSQLTokenizer.ABS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAbs();","break;","caseSQLTokenizer.ACOS:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}catch(Throwablee){","rollback();","throwSmallSQLException.createFromException(e);","voidrollbackFile(FileChannelraFile)throwsSQLException{","testClosedConnection();","synchronized(getMonitor()){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicvoidupdateArray(StringcolumnName,Arrayx)throwsSQLException{","updateArray(findColumn(columnName),x);","finalprivateExpressiongetValue(intcolumnIndex)throwsSQLException{","if(values!=null){","ExpressionValuevalue=values[metaData.getColumnIdx(columnIndex)];"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["value=null;","finalObjectgetValue(){","returnvalue;","finalIndexNode[]getChildNodes(){","returnnodes;","finalIndexNodegetChildNode(chardigit){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["this.page=page;","this.pageSize=pageSize;","this.fileOffset=fileOffset;","finalvoidsetPageData(byte[]data,intsize){","page=data;","pageSize=size;"]": ["|project://smallsql/src/smallsql/database/StorePage.java|"],
"["Columnscopy(){","Columnscopy=newColumns();","Column[]cols=copy.data=(Column[])data.clone();","for(inti=0;i\<size;i++){","cols[i]=cols[i].copy();","copy.size=size;"]": ["|project://smallsql/src/smallsql/database/Columns.java|"],
"["if(list[offset+i]!=value[i]){","continueloop1;","returnoffset;","return-1;","staticintcompareBytes(byte[]leftBytes,byte[]rightBytes){","intlength=Math.min(leftBytes.length,rightBytes.length);"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["returngetLong(findParameter(parameterName));","publicfloatgetFloat(StringparameterName)throwsSQLException{","returngetFloat(findParameter(parameterName));","publicdoublegetDouble(StringparameterName)throwsSQLException{","returngetDouble(findParameter(parameterName));","publicbyte[]getBytes(StringparameterName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["this.type=type;","this.condition=condition;","this.left=left;","this.right=right;","if(type==Join.FULL_JOIN){","isFullNotValid=newboolean[10];"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["try{","if(values==null){","return;","st.con.log.println(\"updateRow()\");","testNotInsertRow();","finalCommandSelectcommand=getCmd();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["shift+=16;","listEnum.stack--;","if(listEnum.stack\<0)return-1;//nomoreentries","result=listEnum.resultStack[listEnum.stack];","offset=listEnum.offsetStack[listEnum.stack];","firstNode=false;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["previousToken();","nextToken(MISSING_PARENTHESIS_R);","returnnewExpressionFunctionConvert(col,expr,style);","caseSQLTokenizer.CAST:","expr=expression(cmd,0);","nextToken(MISSING_AS);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.STXADD_COMMENT_OPEN);","if(!wasWhiteSpace){","tokens.add(newSQLToken(value,tokenStart,sql.length));","returntokens;","staticprivatevoidaddKeyWord(Stringkeyword,intvalue){","keywords.put(Utils.getInteger(value),keyword);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["caseTypes.REAL:","return\"java.lang.Float\";","caseTypes.FLOAT:","caseTypes.DOUBLE:","return\"java.lang.Double\";","caseTypes.DATE:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["throwSmallSQLException.create(Language.COL_WRONG_PREFIX,tableAlias);","}else{","booleanisSetFrom=false;","for(intt=0;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);","TableViewtable=fromEntry.getTableView();"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicDategetDate(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["ByteBufferbuffer=ByteBuffer.wrap(puffer,0,offset);","file.write(buffer);","voidwriteByte(intvalue){","verifyFreePufferSize(1);","puffer[offset++]=(byte)(value);","voidwriteShort(intvalue){"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseNEGATIVE:return-left.getInt();","caseMOD:returnleft.getInt()%right.getInt();","caseBIT_NOT:return~left.getInt();","throwcreateUnspportedConversion(SQLTokenizer.INT);","longgetLong()throwsjava.lang.Exception{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returntrue;","publicbooleansupportsLimitedOuterJoins(){","returntrue;","publicStringgetSchemaTerm(){","return\"owner\";","publicStringgetProcedureTerm(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnbuffer.toByteArray();","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intcount=param2.getInt();","StringBufferbuffer=newStringBuffer();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRepeat.java|"],
"["if(node==null){","node=newSearchNode();","node.letter=c;","if(wasNextEntry)","prev.nextEntry=node;","elseprev.nextLetter=node;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["byte[]readBinary(){","intlength=readShort()&0xFFFF;","returnreadBytes(length);","voidwriteLongBinary(byte[]daten)throwsException{","StoreImplstore=table.getLobStore(((TableStorePage)storePage).con,daten.length+4,SQLTokenizer.LONGVARBINARY);","store.writeInt(daten.length);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.LTRIM:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionLTrim();","break;","caseSQLTokenizer.OCTETLEN:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimestampgetTimestamp(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["staticintgetDataTypePrecision(intdataType,intdefaultValue){","switch(dataType){","caseSQLTokenizer.NULL:","return0;","caseSQLTokenizer.BIT:","caseSQLTokenizer.BOOLEAN:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["chars[21]=digits[(daten[offset+9]\>\>4)&0x0F];","chars[22]=digits[(daten[offset+9])&0x0F];","chars[24]=digits[(daten[offset+10]\>\>4)&0x0F];","chars[25]=digits[(daten[offset+10])&0x0F];","chars[26]=digits[(daten[offset+11]\>\>4)&0x0F];","chars[27]=digits[(daten[offset+11])&0x0F];"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicdoublegetDouble(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["privateCommandcreate()throwsSQLException{","while(true){","SQLTokentoken=nextToken(COMMANDS_CREATE);","switch(token.value){","caseSQLTokenizer.DATABASE:","returncreateDatabase();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(con.isolationLevel\<=Connection.TRANSACTION_READ_UNCOMMITTED){","for(inti=0;i\<locksInsert.size();i++){","TableStorePageInsertlock=(TableStorePageInsert)locksInsert.get(i);","inserts.add(lock.getLink());","}else{","for(inti=0;i\<locksInsert.size();i++){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalclassExpressionFunctionSignextendsExpressionFunctionReturnInt{","finalintgetFunction(){","returnSQLTokenizer.SIGN;","finalintgetInt()throwsException{","if(param1.isNull())return0;","switch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["TableStorePagestorePage=requestLock(con,SQLTokenizer.CREATE,-1);","if(storePage==null){","throwSmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED,name);","con.rollbackFile(raFile);","close();","if(lobs!=null)"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["return0;","caseSQLTokenizer.BIGINT:","longlongValue=param1.getLong();","if(longValue\<0)","return-1;","if(longValue\>0)"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["returnnewDouble(getDouble());","finalStringgetString()throwsException{","Objectobj=getObject();","if(obj==null)returnnull;","returnobj.toString();","finalintgetDataType(){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnFloat.java|"],
"["booleangetBoolean()throwsException{","returngetLong()!=0;","intgetInt()throwsException{","return(int)getLong();","longgetLong()throwsException{","if(isNull())return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampAdd.java|"],
"["returnsupportsResultSetType(type);","publicbooleanothersUpdatesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersDeletesAreVisible(inttype){","returnsupportsResultSetType(type);","publicbooleanothersInsertsAreVisible(inttype){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["return((Number)obj).doubleValue()!=0;","default:returnUtils.string2boolean(obj.toString());","intgetInt()throwsException{","returngetInt(getObject(),dataType);","staticintgetInt(Objectobj,intdataType)throwsException{","if(obj==null)return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["default:","thrownewError();","returncmd;","caseSQLTokenizer.REPEATABLE:","token=nextToken(MISSING_READ);","cmd.isolationLevel=Connection.TRANSACTION_REPEATABLE_READ;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["throwSmallSQLException.create(Language.DAYS_TOOLARGE,datetime);","if(day==31){","switch(month){","case1:","case3:","case5:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["rightEx.add(param1);","}else{","if(left.isExpressionsFromThisRowSource(columns1)&&right.isExpressionsFromThisRowSource(columns0)){","leftEx.add(param1);","rightEx.add(param0);","}else{"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["packagesmallsql.database;","importjava.sql.*;","importsmallsql.database.language.Language;","abstractclassCommand{","inttype;","Stringcatalog;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["rowIdx=-1;","returnnext();","booleanprevious()throwsException{","if(rowIdx\>-1){","rowIdx--;","if(rowIdx\>-1&&rowIdx\<rowList.size()){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["row++;","returntrue;","}else","if(oldRowOffset.longValue()==newRowOffset){","row++;","returntrue;"]": ["|project://smallsql/src/smallsql/database/Distinct.java|"],
"["Columncolumn=tab.findColumn(columnName);","Object[]row=newObject[8];","row[0]=Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE","row[1]=columnName;//COLUMN_NAME","finalintdataType=column.getDataType();","row[2]=Utils.getInteger(dataType);//DATA_TYPE"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["Join(inttype,RowSourceleft,RowSourceright,Expressioncondition){","this.type=type;","this.condition=condition;","this.left=left;","this.right=right;","finalbooleanisScrollable(){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["this.dataType=SQLTokenizer.VARCHAR;","else","if(newValueinstanceofByte)","this.dataType=SQLTokenizer.TINYINT;","else","if(newValueinstanceofShort)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["nextCol:","while(true){","token=nextToken(MISSING_EXPRESSION);","StringconstraintName;","if(token.value==SQLTokenizer.CONSTRAINT){","constraintName=nextIdentifier();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["publicintgetMaxColumnsInIndex(){","return0;","publicintgetMaxColumnsInOrderBy(){","return0;","publicintgetMaxColumnsInSelect(){","return0;"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnDouble.longBitsToDouble(readLong());","voidwriteFloat(floatvalue){","writeInt(Float.floatToIntBits(value));","floatreadFloat(){","returnFloat.intBitsToFloat(readInt());","voidwriteNumeric(MutableNumericnum){"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintUCASE=1122;//laststringfunction--\>seeSSDatabaseMetaData.getStringFunctions","static{","addKeyWord(\"ASCII\",ASCII);","addKeyWord(\"BIT_LENGTH\",BITLEN);","addKeyWord(\"CHAR_LENGTH\",CHARLEN);","addKeyWord(\"CHARACTER_LENGTH\",CHARACTLEN);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["switch(operation){","caseADD:returnleft.getMoney()+right.getMoney();","caseSUB:returnleft.getMoney()-right.getMoney();","caseMUL:returnleft.getMoney()*right.getMoney()/10000;","caseDIV:returnleft.getMoney()*10000/right.getMoney();","caseNEGATIVE:return-left.getMoney();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["privateStringtableAlias;","privateDataSourcefromEntry;","privateintcolIdx;","privateTableViewtable;","privateColumncolumn;","ExpressionName(Stringname){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["switch(dataType){","caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","caseSQLTokenizer.BIGINT:","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["publicBigDecimalgetBigDecimal(intcolumnIndex,intscale)throwsSQLException{","try{","MutableNumericobj=getValue(columnIndex).getNumeric();","wasNull=obj==null;","if(wasNull)returnnull;","returnobj.toBigDecimal(scale);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnFloat.parseFloat(readString());","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["return(obj==null)?0:obj.getScale();","default:","returngetScale(dataType);","staticSQLExceptioncreateUnsupportedConversion(intfromDataType,Objectobj,inttoDataType){","Object[]params={","SQLTokenizer.getKeyWord(fromDataType),"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TIMESTAMP)),Utils.getInteger(23),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(3),Utils.getInteger(3),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLDATETIME)),Utils.getInteger(16),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.JAVA_OBJECT)),Utils.getInteger(65535),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BLOB)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.CLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.NCLOB)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["row[8]=Utils.getInteger(col.getScale());//DECIMAL_DIGITS","row[9]=Utils.getInteger(10);//NUM_PREC_RADIX","row[10]=Utils.getInteger(col.isNullable()?DatabaseMetaData.columnNullable:DatabaseMetaData.columnNoNulls);//NULLABLE","row[12]=col.getDefaultDefinition();//COLUMN_DEF","row[15]=row[6];//CHAR_OCTET_LENGTH","row[16]=Utils.getInteger(i);//ORDINAL_POSITION"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnexpr.isNullable();","intgetDataType(){","returnexpr.getDataType();","intgetDisplaySize(){","returnexpr.getDisplaySize();","intgetScale(){"]": ["|project://smallsql/src/smallsql/database/ColumnExpression.java|"],
"["this.cmd=cmd;","isUpdatable=st!=null&&st.rsConcurrency==CONCUR_UPDATABLE&&!cmd.isGroupResult();","publicvoidclose(){","st.con.log.println(\"ResultSet.close\");","cmd=null;","publicbooleanwasNull(){"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["importsmallsql.database.language.Language;","publicclassExpressionArithmeticextendsExpression{","privateExpressionleft;","privateExpressionright;","privateExpressionright2;","privateExpression[]inList;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["filePosUpdated=newData.writeFinsh(null);","status=UPDATE_POINTER;","}else{","((TableStorePage)newData.storePage).lockType=TableView.LOCK_INSERT;","updatePointer.filePosUpdated=newData.writeFinsh(null);","updatePointer.status=UPDATE_POINTER;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.time=time;","this.dataType=dataType;","staticlongcalcMillis(Detailsdetails){","returncalcMillis(details.year,details.month,details.day,details.hour,details.minute,details.second,details.millis);","staticlongcalcMillis(intyear,intmonth,finalintday,finalinthour,finalintminute,finalintsecond,finalintmillis){","longresult=millis;"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["privateLobslobs;//filehandleoflobdataforthistable","longfirstPage;//offsetofthefirstpage","finalprivateHashMaplocks=newHashMap();","privateSSConnectiontabLockConnection;//ifsetthenitistheConnectionwithaLOCK_TAB","privateinttabLockCount;","Table(Databasedatabase,SSConnectioncon,Stringname,FileChannelraFile,longoffset,inttableFormatVersion)throwsException{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnMoney.parseMoney(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnMoney.parseMoney(ois.readObject().toString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["SQLTokentoken=nextToken(MISSING_INTO);","CommandInsertcmd=newCommandInsert(con.log,nextIdentifier());","intparthesisCount=0;","token=nextToken(MISSING_PARENTHESIS_VALUES_SELECT);","if(token.value==SQLTokenizer.PARENTHESIS_L){","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returndata[idx];","finalvoidadd(longvalue){","if(size\>=data.length){","resize(size\<\<1);","data[size++]=value;","finalvoidclear(){"]": ["|project://smallsql/src/smallsql/database/LongList.java|"],
"["return-1;","finalvoidtoArray(Expression[]array){","System.arraycopy(data,0,array,0,size);","finalExpression[]toArray(){","Expression[]array=newExpression[size];","System.arraycopy(data,0,array,0,size);"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["voidaddColumnExpression(Expressioncolumn)throwsSQLException{","columnExpressions.add(column);","voidaddParameter(ExpressionValueparam){","params.add(param);","voidverifyParams()throwsSQLException{","for(intp=0;p\<params.size();p++){"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["@Override","finalvoidupdateRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;","intcount=tableColumns.size();","StoreImplnewStore=table.getStoreTemp(con);","synchronized(con.getMonitor()){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["((page[6]&0xFF)\<\<8)|","((page[7]&0xFF));","this.raFile=raFile;","this.filePos=filePos;","privateStorePagecreateStorePage(){","page[0]=(byte)(value\>\>56);"]": ["|project://smallsql/src/smallsql/database/Identity.java|"],
"["returnfrom.isFirst();","booleanfirst()throwsException{","returnfrom.first();","booleanprevious()throwsException{","returnfrom.previous();","booleannext()throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["returnnewMutableNumeric(readLong(),4);","caseSQLTokenizer.SMALLMONEY:","returnnewMutableNumeric(readInt(),4);","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returnreadNumeric();"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{VALUE_NULL_INVALID,\"Valorinullinonvalidiperlacolonna\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Impossibleconvertireunvalore{0}inunvalore{1}.\"},","{BYTEARR_INVALID_SIZE,\"Lunghezzanonvalidaperunarraydibytes:{0}.\"},","{LOB_DELETED,\"L\'\'oggettoLOBÃ¨statocancellato.\"},","{PARAM_CLASS_UNKNOWN,\"Classesconosciuta(\'\'{0}\'\')perilparametro.\"},","{PARAM_EMPTY,\"Ilparametro{0}Ã¨vuoto.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["returnSQLTokenizer.SIGN;","finalintgetInt()throwsException{","if(param1.isNull())return0;","switch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){","caseSQLTokenizer.INT:","intintValue=param1.getInt();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnExpressionValue.getInt(ois.readObject().toString(),SQLTokenizer.VARCHAR);","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["break;","caseSQLTokenizer.ROUND:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRound();","break;","caseSQLTokenizer.SIN:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnewSSResultSet(st,Utils.createMemoryCommandSelect(con,colNames,data));","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicResultSetgetTypeInfo()throwsSQLException{","String[]colNames={\"TYPE_NAME\",\"DATA_TYPE\",\"PRECISION\",\"LITERAL_PREFIX\",\"LITERAL_SUFFIX\",\"CREATE_PARAMS\",\"NULLABLE\",\"CASE_SENSITIVE\",\"SEARCHABLE\",\"UNSIGNED_ATTRIBUTE\",\"FIXED_PREC_SCALE\",\"AUTO_INCREMENT\",\"LOCAL_TYPE_NAME\",\"MINIMUM_SCALE\",\"MAXIMUM_SCALE\",\"SQL_DATA_TYPE\",\"SQL_DATETIME_SUB\",\"NUM_PREC_RADIX\"};","Object[][]data={"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["intintValue=param1.getInt();","if(intValue\<0)","return-1;","if(intValue\>0)","return1;","return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["ObjectInputStreamois=newObjectInputStream(bais);","returnois.readObject().toString();","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2hex(readLongBinary());","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["byte[]rightBytes=right.getBytes();","intcomp=Utils.compareBytes(leftBytes,rightBytes);","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returncomp==0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["top=cmd.getMaxRows();","publicResultSetexecuteQuery()throwsSQLException{","executeImp();","returncmd.getQueryResult();","publicintexecuteUpdate()throwsSQLException{","executeImp();"]": ["|project://smallsql/src/smallsql/database/SSPreparedStatement.java|"],
"["this.rowSource=rowSource;","this.where=where;","RowSourcegetFrom(){","returnrowSource;","finalprivatebooleanisValidRow()throwsException{","returnwhere==null||rowSource.rowInserted()||where.getBoolean();"]": ["|project://smallsql/src/smallsql/database/Where.java|"],
"["for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.freeLock();","commitPages.clear();","transactionTime=System.currentTimeMillis();","}catch(Throwablee){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["if(newSize\<minSize)newSize=minSize;","byte[]temp=newbyte[newSize];","System.arraycopy(puffer,0,temp,0,offset);","puffer=temp;","voidskip(intcount){","offset+=count;"]": ["|project://smallsql/src/smallsql/database/MemoryStream.java|"],
"["caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","writeString(expr.getString(),column.getDisplaySize(),true);","break;","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["lock=newTableStorePage(con,this,LOCK_NONE,page);","if(con.isolationLevel\>=Connection.TRANSACTION_REPEATABLE_READ||pageOperation==SQLTokenizer.UPDATE){","lock.lockType=pageOperation==SQLTokenizer.UPDATE?LOCK_WRITE:LOCK_READ;","if(prevLock!=null){","prevLock.nextLock=lock.nextLock;","}else{"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["voidoptimize()throwsSQLException{","if(params!=null){","for(intp=0;p\<params.length;p++){","params[p].optimize();","publicbooleanequals(Objectexpr){","if(!(exprinstanceofExpression))returnfalse;"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["((StoreImpl)this.store).updateFinsh(con,newStore);","@Override","finalvoidinsertRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;","intcount=tableColumns.size();","StoreImplstore=table.getStoreInsert(con);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["{DATETIME_INVALID,\"\'\'{0}\'\'isteinungÃ¼ltigesDATE,TIMEorTIMESTAMP.\"},","{UNSUPPORTED_CONVERSION_OPER,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'vonDatentyp\'\'{1}\'\'fÃ¼rdieOperation\'\'{2}\'\'.\"},","{UNSUPPORTED_DATATYPE_OPER,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rOperation\'\'{1}\'\'.\"},","{UNSUPPORTED_DATATYPE_FUNC,\"NichtunterstÃ¼tzterDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_CONVERSION_FUNC,\"NichtunterstÃ¼tzteKonvertierungzuDatentyp\'\'{0}\'\'fÃ¼rFunktion\'\'{1}\'\'.\"},","{UNSUPPORTED_TYPE_CONV,\"NichtunterstÃ¼tzterTypfÃ¼rCONVERTFunktion:{0}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["}caseSQLTokenizer.SQL_TSI_MONTH:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());","DateTime.Detailsdetails1=newDateTime.Details(param1.getLong());","return(details2.year*12+details2.month)-(details1.year*12+details1.month);","caseSQLTokenizer.SQL_TSI_QUARTER:{","DateTime.Detailsdetails2=newDateTime.Details(param2.getLong());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["if(num.scale\<scale){","num.setScale(scale);","}else","if(num.scale\>scale){","setScale(num.scale);","add(num.signum,num.value);"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["finalprivateIndexNodeadd(IndexNodenode,longrowOffset,longkey,booleanisLastValue,intdigitCount)throwsSQLException{","for(inti=digitCount-1;i\>=0;i--){","chardigit=(char)(key\>\>(i\<\<4));","if(i==0){","if(isLastValue){","node.addNode(digit,rowOffset);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["break;","caseSQLTokenizer.ADD:","con=newSSConnection(con);","TableoldTable=(Table)database.getTableView(con,name);","TableStorePagetableLock=oldTable.requestLock(con,SQLTokenizer.ALTER,-1);","StringnewName=\"#\"+System.currentTimeMillis()+this.hashCode();"]": ["|project://smallsql/src/smallsql/database/CommandTable.java|"],
"["}else{","if(start==mid)return-1;","returnfindNodePos(digit,start,mid-1);","voidsave(StoreImploutput)throwsSQLException{","output.writeShort(digit);","intlength=remainderKey==null?0:remainderKey.length;"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["throwSmallSQLException.create(Language.HOURS_TOOLARGE,datetime);","if(minute\>=60){","throwSmallSQLException.create(Language.MINUTES_TOOLARGE,datetime);","if(second\>=60){","throwSmallSQLException.create(Language.SECS_TOOLARGE,datetime);","if(millis\>=1000){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicfloatgetFloat(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.SOUNDEX:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionSoundex();","break;","caseSQLTokenizer.SUBSTRING:","invalidParamCount=(paramCount!=3);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returncreateDatabase();","caseSQLTokenizer.TABLE:","returncreateTable();","caseSQLTokenizer.VIEW:","returncreateView();","caseSQLTokenizer.INDEX:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["voidupdateFinsh(SSConnectioncon,StoreImplnewData)throwsSQLException{","type=SQLTokenizer.UPDATE;","if(newData.offset\<=sizePhysical||filePos==-1){","page=newData.page;//newDataisonlyatempStoreImpl","offset=newData.offset;","if(sizePhysical\<offset)sizePhysical=offset;//occuronlyonupdatesofnotcommittedinserts(filePos==-1"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returnparam2.getObject();","returnparam3.getObject();","StringgetString()throwsException{","if(param1.getBoolean())","returnparam2.getString();","returnparam3.getString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionIIF.java|"],
"["quoteBuffer.append(c);","break;","default:","if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["for(inti=0;i\<count;i++){","TransactionSteppage=(TransactionStep)commitPages.get(i);","page.rollback();","page.freeLock();","commitPages.clear();","transactionTime=System.currentTimeMillis();"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["returnnewMutableNumeric(readLong());","caseSQLTokenizer.REAL:","returnnewMutableNumeric(readFloat());","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","returnnewMutableNumeric(readDouble());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["importsmallsql.database.language.Language;","publicclassExpressionValueextendsExpression{","privateObjectvalue;","privateintdataType;","privateintlength;","ExpressionValue(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["this.right=right;","if(type==Join.FULL_JOIN){","isFullNotValid=newboolean[10];","voidbeforeFirst()throwsException{","left.beforeFirst();","right.beforeFirst();"]": ["|project://smallsql/src/smallsql/database/JoinScroll.java|"],
"["return\"java.lang.Float\";","caseTypes.FLOAT:","caseTypes.DOUBLE:","return\"java.lang.Double\";","caseTypes.DATE:","return\"java.sql.Date\";"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{VALUE_BIN_TOOLARGE,\"Valorebinariodilunghezza{0}eccessivaperlacolonnadilunghezza{1}.\"},","{VALUE_NULL_INVALID,\"Valorinullinonvalidiperlacolonna\'\'{0}\'\'.\"},","{VALUE_CANT_CONVERT,\"Impossibleconvertireunvalore{0}inunvalore{1}.\"},","{BYTEARR_INVALID_SIZE,\"Lunghezzanonvalidaperunarraydibytes:{0}.\"},","{LOB_DELETED,\"L\'\'oggettoLOBÃ¨statocancellato.\"},","{PARAM_CLASS_UNKNOWN,\"Classesconosciuta(\'\'{0}\'\')perilparametro.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["staticfinalintSECOND=1215;","staticfinalintTIMESTAMPADD=1216;","staticfinalintTIMESTAMPDIFF=1217;","staticfinalintWEEK=1218;","staticfinalintYEAR=1219;//lasttimedatefunction--\>seeSSDatabaseMetaData.getTimeDateFunctions","static{"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["SQLTokenizer.NVARCHAR,","SQLTokenizer.NCHAR,","SQLTokenizer.VARCHAR,","SQLTokenizer.CHAR,","SQLTokenizer.LONGVARCHAR,","SQLTokenizer.CLOB,"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["importjava.sql.*;","importjava.util.Properties;","importjava.util.StringTokenizer;","importsmallsql.database.language.Language;","publicclassSSDriverimplementsDriver{","staticfinalStringURL_PREFIX=\"jdbc:smallsql\";"]": ["|project://smallsql/src/smallsql/database/SSDriver.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicTimegetTime(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["}catch(Throwableth){/*ANumberFormatExceptioncanoccurifitafloatingpointnumber*/}","return(int)Double.parseDouble(str);","longgetLong()throwsException{","returngetLong(getObject(),dataType);","staticlonggetLong(Objectobj,intdataType)throwsException{","if(obj==null)return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["this.sql=null;","this.commandSelect=commandSelect;","createColumns(con);","privatevoidcreateColumns(SSConnectioncon)throwsException{","commandSelect.compile(con);","Expressionsexprs=commandSelect.columnExpressions;"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["if(nodeDigit==digit)returnmid;","if(nodeDigit\<digit){","returnfindNodeInsertPos(digit,mid+1,end);","}else{","if(start==mid)returnstart;","returnfindNodeInsertPos(digit,start,mid);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["{SEQUENCE_HEX_INVALID_STR,\"UngÃ¼ltigeHexadecimalSequenzebeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_OFS,\"SyntaxErrorbeiPosition{0}in\'\'{1}\'\'.\"},","{SYNTAX_BASE_END,\"SyntaxError,unerwartetesEndedesSQLStrings.\"},","{STXADD_ADDITIONAL_TOK,\"ZusÃ¤tzlicheZeichennachdemEndedesSQLstatement.\"},","{STXADD_IDENT_EXPECT,\"Bezeichnererwartet.\"},","{STXADD_IDENT_EMPTY,\"LeererBezeichner.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["throwcreateSyntaxError(token,validValues);","privateCommandSelectsingleSelect()throwsSQLException{","CommandSelectselCmd=newCommandSelect(con.log);","SQLTokentoken;","Switch:while(true){","token=nextToken(MISSING_EXPRESSION);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.CREATE:{","if(locks.size()\>0){","Iteratorvalues=locks.values().iterator();","while(values.hasNext()){","TableStorePagelock=(TableStorePage)values.next();","if(lock.con!=con)returnnull;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.LONGVARCHAR:","returnFloat.parseFloat(readLongString());","caseSQLTokenizer.JAVA_OBJECT:","ByteArrayInputStreambais=newByteArrayInputStream(readLongBinary());","ObjectInputStreamois=newObjectInputStream(bais);","returnFloat.parseFloat(ois.readObject().toString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["{INDEX_TOOMANY_EQUALS,\"ToomanyequalsentryinIndex.\"},","{FILE_TOONEW,\"Fileversion({0})offile\'\'{1}\'\'istoonewforthisruntime.\"},","{FILE_TOOOLD,\"Fileversion({0})offile\'\'{1}\'\'istoooldforthisruntime.\"},","{FILE_CANT_DELETE,\"File\'\'{0}\'\'can\'tbedeleted.\"},","{ROW_0_ABSOLUTE,\"Row0isinvalidformethodabsolute().\"},","{ROW_NOCURRENT,\"Nocurrentrow.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["System.arraycopy(remainderValue,offset,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(longremainderValue,intcharCount){","this.remainderKey=newchar[charCount];","for(inti=charCount-1,d=0;i\>=0;i--){","this.remainderKey[d++]=(char)(remainderValue\>\>(i\<\<4));","finalIndexNodeaddRoot()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["booleanisReadOnly(){","returnreadonly;","staticfinalvoidcloseConnection(SSConnectioncon)throwsSQLException{","synchronized(databases){","Iteratoriterator=databases.values().iterator();","while(iterator.hasNext()){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["default:","returnparam1.getString();","}else","returnparam1.getString();","finalprivatelonggetDateTimeLong()throwsException{","switch(param1.getDataType()){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["fromSource=join(cmd,tables,fromSource,Join.FULL_JOIN);","break;","caseSQLTokenizer.PARENTHESIS_R:","caseSQLTokenizer.ESCAPE_R:","if(parenthesis==token.value)returnfromSource;","if(parenthesis==0){"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["privatebooleanneedGeneratedKeys;","privateResultSetgeneratedKeys;","privateint[]generatedKeyIndexes;","privateString[]generatedKeyNames;","SSStatement(SSConnectioncon)throwsSQLException{","this(con,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["voidcreate(SSConnectioncon,Databasedatabase,TableViewtableView)throwsException{","for(inti=0;i\<size;i++){","data[i].create(con,database,tableView);","voiddrop(Databasedatabase)throwsException{","for(inti=0;i\<size;i++){","data[i].drop(database);"]": ["|project://smallsql/src/smallsql/database/IndexDescriptions.java|"],
"["returnfalse;","booleannext()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()\<0){","longrowPosition=scrollStatus.getRowOffset(true);","if(rowPosition\>=0){"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["for(inti=-4;i\<256;i++){","integerCache[i+4]=newInteger(i);","shortCache[i+4]=newShort((short)i);","staticStringcreateTableViewFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+TABLE_VIEW_EXTENTION;","staticStringcreateLobFileName(Databasedatabase,Stringname){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{JOIN_INSERT,\"ThemethodinsertRownotsupportedonjoins.\"},","{DELETE_WO_FROM,\"ThemethoddeleteRowneedaFROMexpression.\"},","{INSERT_WO_FROM,\"ThemethodinsertRowneedaFROMexpression.\"},","{TABLE_CANT_RENAME,\"Table\'\'{0}\'\'can\'\'tberenamed.\"},","{TABLE_CANT_DROP,\"Table\'\'{0}\'\'can\'\'tbedropped.\"},","{TABLE_CANT_DROP_LOCKED,\"Table\'\'{0}\'\'can\'\'tdropbecauseislocked.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["returnnewDouble(param1.getDouble());","caseSQLTokenizer.DATE:","caseSQLTokenizer.TIME:","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:","returnnewDateTime(getDateTimeLong(),dataType);"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["returngetObject(i);","publicRefgetRef(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Blobobject\");","publicClobgetClob(inti)throwsSQLException{","throwSmallSQLException.create(Language.UNSUPPORTED_OPERATION,\"Array\");","publicObjectgetObject(StringcolumnName,Mapmap)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["useSetRowPosition=false;","finalbooleanisBeforeFirst(){","returnrow==0;","finalbooleanisFirst(){","returnrow==1;","voidbeforeFirst()throwsException{"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["if(rowOffset\<0){","longList=null;","}else{","returnrowOffset;","while(true){","IndexNodeScrollStatusstatus=(IndexNodeScrollStatus)nodeStack.peek();"]": ["|project://smallsql/src/smallsql/database/IndexScrollStatus.java|"],
"["}else{","return0;","finalvoidcreateWriteLock()throwsSQLException{","TableStorePagestorePageWrite=table.requestWriteLock(((TableStorePage)storePage).con,(TableStorePage)storePage);","if(storePageWrite==null)","throwSmallSQLException.create(Language.ROW_LOCKED);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["finallongfileOffset=storePage.fileOffset;","synchronized(locks){","try{","TableStorePagelock;","TableStorePageprev;","switch(lockType){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["publicvoidclearWarnings(){","publicStatementcreateStatement(intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSStatement(this,resultSetType,resultSetConcurrency);","publicPreparedStatementprepareStatement(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{","returnnewSSPreparedStatement(this,sql,resultSetType,resultSetConcurrency);","publicCallableStatementprepareCall(Stringsql,intresultSetType,intresultSetConcurrency)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["staticvoidsetLanguage(ObjectlocaleObj)throwsSQLException{","if(language!=null&&localeObj==null)return;","if(localeObj==null){","language=Language.getDefaultLanguage();","else{","language=Language.getLanguage(localeObj.toString());"]": ["|project://smallsql/src/smallsql/database/SmallSQLException.java|"],
"["StringdbKey=file.getName()+\";readonly=\"+con.isReadOnly();","synchronized(databases){","Databasedb=(Database)databases.get(dbKey);","if(db==null){","if(create&&!file.isDirectory()){","CommandCreateDatabasecommand=newCommandCreateDatabase(con.log,name);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["floatgetFloat()throwsException{","returnfromEntry.getFloat(colIdx);","doublegetDouble()throwsException{","returnfromEntry.getDouble(colIdx);","longgetMoney()throwsException{","returnfromEntry.getMoney(colIdx);"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["publicvoidsetTime(StringparameterName,Timex,Calendarcal)throwsSQLException{","setTime(findParameter(parameterName),x,cal);","publicvoidsetTimestamp(StringparameterName,Timestampx,Calendarcal)throwsSQLException{","setTimestamp(findParameter(parameterName),x,cal);","publicvoidsetNull(StringparameterName,intsqlType,StringtypeName)throwsSQLException{","setNull(findParameter(parameterName),sqlType,typeName);"]": ["|project://smallsql/src/smallsql/database/SSCallableStatement.java|"],
"["returngetBigDecimal(findColumn(columnName),scale);","publicbyte[]getBytes(StringcolumnName)throwsSQLException{","returngetBytes(findColumn(columnName));","publicDategetDate(StringcolumnName)throwsSQLException{","returngetDate(findColumn(columnName));","publicTimegetTime(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["formatNumber(details.minute,2,buf);","buf.append(\':\');","formatNumber(details.second,2,buf);","switch(dataType){","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(Character.toUpperCase(pattern.charAt(mIdx++))!=\'%\')returnfalse;","while(value.length()\>sIdx&&!range)returnfalse;","returntrue;","staticintlong2int(longvalue){","if(value\>Integer.MAX_VALUE)","returnInteger.MAX_VALUE;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["{FILE_TOOOLD,\"Dateiversion({0})derDatei\'\'{1}\'\'istzualtfÃ¼rdieseLaufzeitbibliothek.\"},","{FILE_CANT_DELETE,\"Datei\'\'{0}\'\'kannnichtgelÃ¶schtwerden.\"},","{ROW_0_ABSOLUTE,\"Datensatz0istungÃ¼ltigfÃ¼rdieMethodeabsolute().\"},","{ROW_NOCURRENT,\"KeinaktuellerDatensatz.\"},","{ROWS_WRONG_MAX,\"FehlerhafterWertfÃ¼rMaximaleDatensatzanzahl:{0}.\"},","{ROW_LOCKED,\"DerDatensatzistgelockedvoneineranderenVerbindung.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["lobs=null;","privatevoidwrite(SSConnectioncon)throwsException{","raFile=createFile(con,database);","firstPage=8;","StoreImplstore=getStore(con,firstPage,SQLTokenizer.CREATE);","intcount=columns.size();"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["finalStringrightStr=right.getString();","intcomp=String.CASE_INSENSITIVE_ORDER.compare(leftStr,rightStr);","switch(operation){","caseIN:","caseEQUALS_NULL:","caseEQUALS:returncomp==0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["break;","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","((MutableDouble)value).value=Math.max(((MutableDouble)value).value,expr.getDouble());","break;","caseSQLTokenizer.CHAR:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(token!=null)offset=token.offset;","previousToken();","expressions.add(expression(cmd,0));","SQLTokenlast=lastToken();","intlength=last.offset+last.length-offset;","columns.add(newString(sql,offset,length));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returnnode;","}else{","returnnodes[pos];","finalvoidremoveNode(chardigit){","intpos=findNodePos(digit);","if(pos!=-1){"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","return(int)readDouble();","caseSQLTokenizer.MONEY:","longlongValue=readLong()/10000;","returnUtils.money2int(longValue);"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["db.connections.put(con,null);","returndb;","privatestaticDatabasegetDatabase(SSConnectioncon,Stringname)throwsSQLException{","returnname==null?","con.getDatabase(false):","getDatabase(name,con,false);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["row[5]=index.getName();//PK_NAME","rows.add(row);","Object[][]result=newObject[rows.size()][];","rows.toArray(result);","returnresult;","Object[][]getIndexInfo(SSConnectioncon,Stringtable,booleanunique)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["for(inti=0;i\<=last;i++){","value[i]=(i==last)?-value[i]:~value[i];","voidmul(MutableNumericnum){","BigDecimalbig=toBigDecimal().multiply(num.toBigDecimal());","setValue(big.unscaledValue().toByteArray());","scale=big.scale();"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["returnfalse;","publicbooleansupportsDataDefinitionAndDataManipulationTransactions(){","returntrue;","publicbooleansupportsDataManipulationTransactionsOnly(){","returnfalse;","publicbooleandataDefinitionCausesTransactionCommit(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["returnSQLTokenizer.LENGTH;","finalintgetInt()throwsException{","Stringstr=param1.getString();","if(str==null)return0;","intlength=str.length();","while(length\>=0&&str.charAt(length-1)==\'\')length--;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionLength.java|"],
"["MutableNumericnum=left.getNumeric();","if(getDataType(right.getDataType(),SQLTokenizer.INT)==SQLTokenizer.INT)","num.div(right.getInt());","else","num.div(right.getNumeric());","returnnum;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["expressionDefList(cmd,expressions,columns);","IndexDescriptionindexDesc=newIndexDescription(","indexName,","tableName,","unique?SQLTokenizer.UNIQUE:SQLTokenizer.INDEX,","expressions,"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(defaultValue==-1)","thrownewError(\"Precision:\"+SQLTokenizer.getKeyWord(dataType));","returndefaultValue;","publicintgetColumnDisplaySize(intcolumn)throwsSQLException{","returngetColumnExpression(column).getDisplaySize();","publicStringgetColumnLabel(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.DECIMAL)),Utils.getInteger(38),null,null,\"precision,scale\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(38),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.MONEY)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLMONEY)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(4),Utils.getInteger(4),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.INT)),Utils.getInteger(10),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.SMALLINT)),Utils.getInteger(5),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.FLOAT)),Utils.getInteger(15),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["finalpublicintexecuteUpdate(Stringsql,String[]columnNames)throwsSQLException{","setNeedGeneratedKeys(columnNames);","returnexecuteUpdate(sql);","finalpublicbooleanexecute(Stringsql,intautoGeneratedKeys)throwsSQLException{","setNeedGeneratedKeys(autoGeneratedKeys);","returnexecute(sql);"]": ["|project://smallsql/src/smallsql/database/SSStatement.java|"],
"["caseSQLTokenizer.DATE:","returnreadDate();","caseSQLTokenizer.SMALLDATETIME:","returnreadSmallDateTime();","default:","throwSmallSQLException.create(Language.VALUE_CANT_CONVERT,newObject[]{SQLTokenizer.getKeyWord(dataType),\"BIGINT\"});"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticStringcreateLobFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+LOB_EXTENTION;","staticStringcreateIdxFileName(Databasedatabase,Stringname){","returndatabase.getName()+\'/\'+name+IDX_EXTENTION;","staticbooleanlike(Stringvalue,Stringpattern){","if(value==null||pattern==null)returnfalse;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["for(intt=0;t\<tables.size();t++){","DataSourcefromEntry=tables.get(t);","TableViewtable=fromEntry.getTableView();","intcolIdx=table.findColumnIdx(expr.getName());","if(colIdx\>=0){","if(isSetFrom){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["caseSQLTokenizer.INSERT:","invalidParamCount=(paramCount!=4);","expr=newExpressionFunctionInsert();","break;","caseSQLTokenizer.LCASE:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["default:","previousToken();","return;","privatevoidorder(CommandSelectcmd)throwsSQLException{","nextToken(MISSING_BY);","cmd.setOrder(expressionTokenList(cmd,SQLTokenizer.ORDER));"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetString(findColumn(columnName));","publicbooleangetBoolean(StringcolumnName)throwsSQLException{","returngetBoolean(findColumn(columnName));","publicbytegetByte(StringcolumnName)throwsSQLException{","returngetByte(findColumn(columnName));","publicshortgetShort(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(nextPageOffset\<=0){","nextPageOffset=sizePhysical;","returnfilePos+nextPageOffset;","longwriteFinsh(SSConnectioncon)throwsSQLException{","switch(type){","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["this.con=con;","this.database=database;","@Override","longcommit(){","raFile=null;","return-1;"]": ["|project://smallsql/src/smallsql/database/CreateFile.java|"],
"["caseBIT_NOT:","returnleft.isNull();","default:returnleft.isNull()||right.isNull();","byte[]getBytes()throwsjava.lang.Exception{","throwcreateUnspportedConversion(SQLTokenizer.BINARY);","booleanisInList()throwsException{"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnfalse;","if(conditioninstanceofExpressionArithmetic){","ExpressionArithmeticcond=(ExpressionArithmetic)condition;","ExpressionsleftEx=newExpressions();","ExpressionsrightEx=newExpressions();","intoperation=createJoinScrollIndex(cond,leftEx,rightEx,0);"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["booleaninit(SSConnectioncon)throwsException{returnfalse;}","StringgetAlias(){returnnull;}","abstractTableViewgetTableView();","booleanisExpressionsFromThisRowSource(Expressionscolumns){","for(inti=0;i\<columns.size();i++){","ExpressionNameexpr=(ExpressionName)columns.get(i);"]": ["|project://smallsql/src/smallsql/database/DataSource.java|"],
"["returnSQLTokenizer.SQL_TSI_MONTH;","caseSQLTokenizer.QUARTER:","returnSQLTokenizer.SQL_TSI_QUARTER;","caseSQLTokenizer.YEAR:","returnSQLTokenizer.SQL_TSI_YEAR;","default:"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["privatefinalbooleanequals(char[]src1,char[]src2,intoffset2){","if(src1==null)returnfalse;","intlength=src1.length;","if(length!=src2.length-offset2)returnfalse;","for(inti=0;i\<length;i++){","if(src1[i]!=src2[i+offset2])returnfalse;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["returnreadBoolean();","caseSQLTokenizer.BINARY:","caseSQLTokenizer.VARBINARY:","returnUtils.bytes2int(readBinary())!=0;","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()!=0;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["returntimestamp;","finalintfindColumnIdx(StringcolumnName){","for(inti=0;i\<columns.size();i++){","if(columns.get(i).getName().equalsIgnoreCase(columnName))returni;","return-1;","finalColumnfindColumn(StringcolumnName){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["databases.put(dbKey,db);","db.connections.put(con,null);","returndb;","privatestaticDatabasegetDatabase(SSConnectioncon,Stringname)throwsSQLException{","returnname==null?","con.getDatabase(false):"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["super.setParams(newExpression[]{left,right,right2});","ExpressionArithmetic(Expressionleft,ExpressionsinList,intoperation){","super(FUNCTION);","this.left=left;","this.operation=operation;","Expression[]params;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["{UNSUPPORTED_TYPE_MAX,\"TipononsupportatoperlafunzioneMAX:\'\'{0}\'\'.\"},","{UNSUPPORTED_CONVERSION,\"NonÃ¨possibleconvertire\'\'{0}\'\'[{1}]in\'\'{2}\'\'.\"},","{INSERT_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneINSERT.\"},","{SUBSTR_INVALID_LEN,\"Lunghezzanonvalida\'\'{0}\'\'perlafunzioneSUBSTRING.\"},","{VALUE_STR_TOOLARGE,\"Stringatroppolungaperlacolonna.\"},","{VALUE_BIN_TOOLARGE,\"Valorebinariodilunghezza{0}eccessivaperlacolonnadilunghezza{1}.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["ObjectInputStreamois=newObjectInputStream(bais);","returnUtils.string2boolean(ois.readObject().toString());","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","returnUtils.bytes2int(readLongBinary())!=0;","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["}else{","locks.put(pageKey,lock);","con.add(lock);","returnlock;","voidfreeLock(TableStorePagestorePage){","finalintlockType=storePage.lockType;"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["ObjectmiddleMsgParam){","StringBufferbuffer=newStringBuffer(1024);","Stringmiddle=SmallSQLException.translateMsg(","middleMsgCode,newObject[]{middleMsgParam});","buffer.append(middle);","privateStringgetIdentifier(SQLTokentoken)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseDIV:","returnMath.max(left.getScale()+5,right.getScale()+4);","caseNEGATIVE:","returnleft.getScale();","caseMOD:","return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'-\');","formatNumber(details.year,4,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["booleannext()throwsException{","if(useSetRowPosition)throwSmallSQLException.create(Language.ORDERBY_INTERNAL);","if(currentInsertedRow()\<0){","longrowPosition=scrollStatus.getRowOffset(true);","if(rowPosition\>=0){","row++;"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["returntrue;","returnfalse;","@Override","finalvoidexecute()throwsException{","insertStorePages=table.getInserts(con);","firstOwnInsert=0x4000000000000000L|insertStorePages.size();"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["finalprivateIndexNodeaddNull(IndexNodepage,longrowOffset,booleanisLastValue)throwsSQLException{","if(isLastValue){","page.addNode((char)0,rowOffset);","returnnull;","}else","returnpage.addRoot((char)0);"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["offset+=pointerSize;","}while(nextEntry!=0);","offset=nextOffset2;","finalprivateintinsertNode(intoctet)throwsSQLException{","intoldOffset=offset;","if(data.length\<size+4+pointerSize)resize();"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["synchronized(tableViews){","tableViews.put(tableName,table);","returntable;","voidcreateView(SSConnectioncon,StringviewName,Stringsql)throwsException{","newView(this,con,viewName,sql);","staticObject[][]getCatalogs(Databasedatabase){"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["intoldScale=scale;","setScale(0);","setScale(oldScale);","privatevoidnegate(byte[]complement){","intlast=complement.length-1;","for(inti=0;i\<=last;i++){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["caseSQLTokenizer.DECIMAL:","MutableNumericnewValue=expr.getNumeric();","if(((MutableNumeric)value).compareTo(newValue)\<0)","value=newValue;","break;","caseSQLTokenizer.MONEY:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["staticfinalintSQL_DECIMAL=1355;","staticfinalintSQL_DOUBLE=1356;","staticfinalintSQL_FLOAT=1357;","staticfinalintSQL_INTEGER=1358;","staticfinalintSQL_LONGVARBINARY=1359;","staticfinalintSQL_LONGVARCHAR=1360;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["finalbooleanisFirst(){","returnrowPos==1;","finalbooleanfirst(){","rowPos=1;","returntrue;","finalbooleanprevious(){"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["returndatabase.getName()+\'/\'+name+IDX_EXTENTION;","staticbooleanlike(Stringvalue,Stringpattern){","if(value==null||pattern==null)returnfalse;","if(pattern.length()==0)returntrue;","intmIdx=0;//indexinmaskArray","intsIdx=0;//indexinsearchArray"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["c=\'1\';","break;","case\'C\':","case\'G\':","case\'J\':","case\'K\':"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSoundex.java|"],
"["caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.VARBINARY:","ExpressionFunctionRTrimtrim=newExpressionFunctionRTrim();","trim.setParams(newExpression[]{expr});"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["returnInteger.MAX_VALUE;//NoStrinfoundforcolName","returnstrings.size()-columns.size();","finalvoidinit(Databasedatabase,TableViewtableView)/*throwsException*/{","intsize=tableView.columns.size();","matrix=newint[size];","for(inti=0;i\<matrix.length;i++){"]": ["|project://smallsql/src/smallsql/database/IndexDescription.java|"],
"["if(union==null){","union=newUnionAll();","union.addDataSource(newViewResult(con,selCmd));","selCmd=newCommandSelect(con.log);","selCmd.setSource(union);","DataSourcesfrom=newDataSources();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.TINYINT)),Utils.getInteger(3),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BIGINT)),Utils.getInteger(19),null,null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),Boolean.FALSE,Boolean.FALSE,Boolean.FALSE,null,Utils.getInteger(0),Utils.getInteger(0),null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARBINARY)),Utils.getInteger(2147483647),\"0x\",null,null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.VARBINARY)),Utils.getInteger(65535),\"0x\",null,\"maxlength\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.BINARY)),Utils.getInteger(65535),\"0x\",null,\"length\",Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),Utils.getShort(SQLTokenizer.getSQLDataType(SQLTokenizer.LONGVARCHAR)),Utils.getInteger(2147483647),\"\'\",\"\'\",null,Utils.getShort(typeNullable),Boolean.FALSE,Utils.getShort(typeSearchable),null,Boolean.FALSE,Boolean.FALSE,null,null,null,null,null,null},"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["throwSmallSQLException.create(Language.PARAM_CLASS_UNKNOWN,newValue.getClass().getName());","finalvoidset(ExpressionValueval){","this.value=val.value;","this.dataType=val.dataType;","this.length=val.length;","booleanisNull(){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["if(token!=null&&token.value==SQLTokenizer.LIMIT){","limit(selCmd);","token=nextToken();","previousToken();","returnselCmd;","privateCommanddelete()throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["for(intend=offset+length;offset\<end;offset++){","if((str[offset]|0x20)==value)returnoffset;","return-1;","staticintindexOf(intvalue,int[]list){","intoffset=0;","for(intend=list.length;offset\<end;offset++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["getDatabase(name,con,false);","privateDatabase(Stringname,FilecanonicalFile,booleanreadonly)throwsSQLException{","try{","this.name=name;","this.readonly=readonly;","directory=canonicalFile;"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["caseSQLTokenizer.VARBINARY:","return(long)(Utils.bytes2double(readBinary())*10000L);","caseSQLTokenizer.TINYINT:","returnreadUnsignedByte()*10000L;","caseSQLTokenizer.SMALLINT:","returnreadShort()*10000L;"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["buf.append(\':\');","formatMillis(details.millis,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case131://Kuwaitidd/mm/yyhh:mi:ss:mmmAM","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["return255;","publicintgetMaxTablesInSelect(){","return0;","publicintgetMaxUserNameLength(){","return0;","publicintgetDefaultTransactionIsolation(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["privateintsize;","privateintoffset;","staticfinalprivateintpointerSize=3;//ifchangethenalsoinresize()","LongTreeList(){","data=newbyte[25];","LongTreeList(longvalue)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["return(int)value;","staticlongdouble2long(doublevalue){","if(value\>Long.MAX_VALUE)","returnLong.MAX_VALUE;","if(value\<Long.MIN_VALUE)","returnLong.MIN_VALUE;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["publicstaticfinalStringMILLIS_TOOLARGE=\"SS-0256\";","publicstaticfinalStringDATETIME_INVALID=\"SS-0257\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_OPER=\"SS-0280\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_OPER=\"SS-0281\";","publicstaticfinalStringUNSUPPORTED_DATATYPE_FUNC=\"SS-0282\";","publicstaticfinalStringUNSUPPORTED_CONVERSION_FUNC=\"SS-0283\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["@Override","finallonggetMoney(intcolIdx)throwsException{","returnstore.getMoney(offsets[colIdx],dataTypes[colIdx]);","@Override","finalMutableNumericgetNumeric(intcolIdx)throwsException{","returnstore.getNumeric(offsets[colIdx],dataTypes[colIdx]);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicbooleangetBoolean(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnrowIdx\>=rowList.size()||rowList.size()==0;","finalvoidafterLast(){","rowIdx=rowList.size();","currentRow=null;","finalbooleanabsolute(introw)throwsSQLException{","if(row==0)throwSmallSQLException.create(Language.ROW_0_ABSOLUTE);"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnInteger.parseInt(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.ROUND:","invalidParamCount=(paramCount!=2);","expr=newExpressionFunctionRound();","break;","caseSQLTokenizer.SIN:","invalidParamCount=(paramCount!=1);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["nextOffset2=nextOffset1;","nextOffset1=offset;","nextEntry=getUnsignedShort();","if(listEnum.stack\<3)","offset+=pointerSize;","}while(nextEntry!=0);"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["staticDateTimevalueOf(java.util.Datedate){","if(date==null)returnnull;","inttype;","if(dateinstanceofjava.sql.Date)","type=SQLTokenizer.DATE;","else"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["break;","case\'.\':","if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){","intk=tokenStart;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["buf.append(\':\');","formatNumber(details.second,2,buf);","buf.append(\':\');","formatMillis(details.millis,buf);","buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|","|project://smallsql/src/smallsql/database/DateTime.java|"],
"["size=0;","finalvoidremove(intidx){","System.arraycopy(data,idx+1,data,idx,(--size)-idx);","finalvoidset(intidx,Expressionexpr){","data[idx]=expr;","finalintindexOf(Expressionexpr){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["if(inList!=null&&idx\>0&&idx\<=inList.length){","inList[idx-1]=param;","super.setParamAt(param,idx);","publicbooleanequals(Objectexpr){","if(!super.equals(expr))returnfalse;","if(!(exprinstanceofExpressionArithmetic))returnfalse;"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.FIRST);","break;","caseSQLTokenizer.LAST:","invalidParamCount=(paramCount!=1);","expr=newExpressionName(Expression.LAST);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["case12://ISOyymmdd","formatNumber(details.year%100,2,buf);","formatNumber(details.month+1,2,buf);","formatNumber(details.day,2,buf);","returnbuf.toString();","case112://ISOyyyymmdd"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["int[]value=numeric.getInternalValue();","intcount=1;","inti;","for(i=0;i\<value.length;i++){","if(value[i]!=0){","count=2*(value.length-i)+1;"]": ["|project://smallsql/src/smallsql/database/Index.java|"],
"["case\'_\':","sIdx++;","break;","default:","if(range){//%wildcardisactive","for(;sIdx\<value.length();sIdx++){"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalvoidinsertRow(Expression[]updateValues)throwsException{","ColumnstableColumns=table.columns;","intcount=tableColumns.size();","StoreImplstore=table.getStoreInsert(con);","for(inti=0;i\<count;i++){","ColumntableColumn=tableColumns.get(i);"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(num.getSignum()\<0)num.setSignum(1);","returnnum;","ObjectgetObject()throwsException{","if(param1.isNull())returnnull;","Objectpara1=param1.getObject();","switch(param1.getDataType()){"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionAbs.java|"],
"["updateValues[exp.getColumnIndex()]=src;","isUpdateNeeded=true;","continue;","if(isUpdateNeeded){","result.updateRow(updateValues);","}catch(Throwablee){"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["checkValidIdentifier(name,token);","returnname;","privateStringnextIdentifier()throwsSQLException{","returngetIdentifier(nextToken(MISSING_IDENTIFIER));","privateStringnextIdentiferPart(Stringname)throwsSQLException{","SQLTokentoken=nextToken();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.FROM:","if(column==null)throwcreateSyntaxError(token,MISSING_EXPRESSION);","column=null;","from(selCmd);","returnselCmd;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["intgetRow(){","returnrow\>getRowCount()?0:row;","finallonggetRowPosition(){","returnrowSource.getRowPosition();","finalvoidsetRowPosition(longrowPosition)throwsException{","rowSource.setRowPosition(rowPosition);"]": ["|project://smallsql/src/smallsql/database/SortedResult.java|"],
"["currentDS=dataSources.get(dataSourceIdx);","currentDS.setRowPosition(rowPosition\>\>bitCount);","finalbooleanrowInserted(){","returncurrentDS.rowInserted();","finalbooleanrowDeleted(){","returncurrentDS.rowDeleted();"]": ["|project://smallsql/src/smallsql/database/UnionAll.java|"],
"["returnMoney.parseMoney(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnMoney.parseMoney(readLongString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseOR:returnleft.getBoolean()||right.getBoolean();","caseAND:returnleft.getBoolean()&&right.getBoolean();","caseNOT:return!left.getBoolean();","caseLIKE:returnUtils.like(left.getString(),right.getString());","caseISNULL:returnleft.isNull();","caseISNOTNULL:return!left.isNull();"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["wasNull=expr.isNull();","if(wasNull)returnnull;","returnnewURL(expr.getString());","}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publicURLgetURL(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(quotient==1)return;","if(quotient\<0){","quotient=-quotient;","signum=-signum;","intvalueLength=value.length;","longcarryover=0;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["packagesmallsql.database;","finalclassExpressionFunctionExpextendsExpressionFunctionReturnFloat{","finalintgetFunction(){returnSQLTokenizer.EXP;}","finaldoublegetDouble()throwsException{","if(isNull())return0;","returnMath.exp(param1.getDouble());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionExp.java|"],
"["finalCommandSelectcommandSelect;","View(SSConnectioncon,Stringname,FileChannelraFile,longoffset)throwsException{","super(name,newColumns());","StorePagestorePage=newStorePage(null,-1,raFile,offset);","StoreImplstore=StoreImpl.createStore(null,storePage,SQLTokenizer.SELECT,offset);","sql=store.readString();"]": ["|project://smallsql/src/smallsql/database/View.java|"],
"["currentRow=(ExpressionValue[])rowList.get(rowIdx);","returntrue;","currentRow=null;","returnfalse;","booleanisNull(intcolIdx)throwsException{","returnget(colIdx).isNull();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["StringgetName(){","returnname;","longgetTimestamp(){","returntimestamp;","finalintfindColumnIdx(StringcolumnName){","for(inti=0;i\<columns.size();i++){"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["caseSQLTokenizer.DOUBLE:","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.REAL:","caseSQLTokenizer.MONEY:","return((Number)obj).floatValue();","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["return(long)(value*10000+0.5);","staticintindexOf(charvalue,char[]str,intoffset,intlength){","value|=0x20;","for(intend=offset+length;offset\<end;offset++){","if((str[offset]|0x20)==value)returnoffset;","return-1;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARCHAR:","returnUtils.string2boolean(readLongString());","caseSQLTokenizer.JAVA_OBJECT:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["if(table!=null){","returntable.getName();","returnnull;","intgetPrecision(){","returncolumn.getPrecision();","intgetScale(){"]": ["|project://smallsql/src/smallsql/database/ExpressionName.java|"],
"["this.scale=scale;","MutableNumeric(MutableNumericnumeric){","this.signum=numeric.signum;","this.value=newint[numeric.value.length];","System.arraycopy(numeric.value,0,value,0,value.length);","this.scale=numeric.scale;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["if(!createJoinScrollIndex()){","scroll=newJoinScroll(type,left,right,condition);","booleanisExpressionsFromThisRowSource(Expressionscolumns){","if(left.isExpressionsFromThisRowSource(columns)||right.isExpressionsFromThisRowSource(columns)){","returntrue;","if(columns.size()==1){"]": ["|project://smallsql/src/smallsql/database/Join.java|"],
"["if(size\>=data.length){","resize(size\<\<1);","System.arraycopy(data,idx,data,idx+1,(size++)-idx);","data[idx]=expr;","finalvoidaddAll(Expressionscols){","intcount=cols.size();"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["throwSmallSQLException.createFromException(Language.CANT_LOCK_FILE,file,th);","returnchannel;","staticfinalExpressionsgetExpressionNameFromTree(Expressiontree){","Expressionslist=newExpressions();","getExpressionNameFromTree(list,tree);","returnlist;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["formatNumber(details.year,4,buf);","buf.append(\'-\');","formatNumber(details.month+1,2,buf);","buf.append(\'-\');","formatNumber(details.day,2,buf);","buf.append(\'T\');"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["MutableNumeric(byte[]complement){","setValue(complement);","privatevoidsetValue(byte[]complement){","intlength=complement.length;","if(length==0){","value=EMPTY_INTS;"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["}while(e!=null);","finalTableStorePageremove(longkey){","inti=(int)(key%table.length);","Entryprev=table[i];","Entrye=prev;","while(e!=null){"]": ["|project://smallsql/src/smallsql/database/StorePageMap.java|"],
"["privateintrowIdx=-1;","privateListrowList=newArrayList();//ListofExpressionGroup[]","MemoryResult(){/*shouldbeempty*/}","MemoryResult(Object[][]data,intcolCount)throwsSQLException{","for(intc=0;c\<colCount;c++){","Columncolumn=newColumn();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["finalbooleannext(){","rowPos++;","returnrowPos==1;","finalbooleanlast(){","rowPos=1;","returntrue;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["this.dataType=dateTime.getDataType();","}else","if(newValueinstanceofbyte[])","this.dataType=SQLTokenizer.VARBINARY;","else","if(newValueinstanceofBoolean)"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","returnMoney.createFromUnscaledValue(getMoney());","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","returngetNumeric();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionReturnP1.java|","|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["}else{","checkValidIdentifier(tok,token);","ExpressionNameexpr=newExpressionName(tok);","if(token2!=null&&token2.value==SQLTokenizer.POINT){","expr.setNameAfterTableAlias(nextIdentifier());","}else{"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["MutableNumericobj=getNumeric();","return(obj==null)?0:obj.getScale();","default:","returngetScale(dataType);","staticSQLExceptioncreateUnsupportedConversion(intfromDataType,Objectobj,inttoDataType){","Object[]params={"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["writeDate(expr.getLong());","break;","caseSQLTokenizer.SMALLDATETIME:","writeSmallDateTime(expr.getLong());","break;","caseSQLTokenizer.UNIQUEIDENTIFIER:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["matrix[idx]=c;","}else{","throwSmallSQLException.create(Language.COL_MISSING,sqlColName);","if(columnExpressions.size()!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);","voidexecuteImpl(SSConnectioncon,SSStatementst)throwsException{"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["default:","Stringkeyword=SQLTokenizer.getKeyWord(dataType);","throwSmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX,keyword);","break;","caseMIN:","if(value==null){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["default:thrownewError();","token=nextToken(ESCAPE_MISSING_CLOSE);","returnexpr;","caseSQLTokenizer.QUESTION:","ExpressionValueparam=newExpressionValue();","cmd.addParameter(param);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","case2:","if(right!=null){","right2=param;","break;","if(inList!=null&&idx\>0&&idx\<=inList.length){"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["while(true){","SQLTokentoken=nextToken(COMMANDS_CREATE);","switch(token.value){","caseSQLTokenizer.DATABASE:","returncreateDatabase();","caseSQLTokenizer.TABLE:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["switch(token.value){","caseSQLTokenizer.ABS:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionAbs();","break;","caseSQLTokenizer.ACOS:"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["formatNumber(details.day,2,buf);","buf.append(\'.\');","formatNumber(details.month+1,2,buf);","buf.append(\'.\');","formatNumber(details.year%100,2,buf);","returnbuf.toString();"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["staticfinalintNOW=1213;","staticfinalintQUARTER=1214;","staticfinalintSECOND=1215;","staticfinalintTIMESTAMPADD=1216;","staticfinalintTIMESTAMPDIFF=1217;","staticfinalintWEEK=1218;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionDegrees();","break;","caseSQLTokenizer.EXP:","invalidParamCount=(paramCount!=1);","expr=newExpressionFunctionExp();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["break;","caseSQLTokenizer.BIGINT:","((MutableLong)value).value=Math.max(((MutableLong)value).value,expr.getLong());","break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value=Math.max(((MutableFloat)value).value,expr.getFloat());"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["return0;","finalintgetInt(intoffset,intdataType)throwsException{","return0;","finallonggetLong(intoffset,intdataType)throwsException{","return0;","finallonggetMoney(intoffset,intdataType)throwsException{"]": ["|project://smallsql/src/smallsql/database/StoreNull.java|"],
"["booleanisNext=next();","previous();","return!isNext&&(rowIdx+1==rowList.size()&&rowList.size()\>0);","booleanisAfterLast()throwsException{","if(rowIdx\>=rowList.size())returntrue;","if(isBeforeFirst()&&rowList.size()==0){"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["returnnewSSCallableStatement(this,sql);","publicStringnativeSQL(Stringsql){","returnsql;","publicvoidsetAutoCommit(booleanautoCommit)throwsSQLException{","if(log.isLogging())log.println(\"AutoCommit:\"+autoCommit);","if(this.autoCommit!=autoCommit){"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["if(!(objinstanceofMutableNumeric))returnfalse;","returncompareTo((MutableNumeric)obj)==0;","publicBigDecimaltoBigDecimal(){","if(signum==0)returnnewBigDecimal(BigInteger.ZERO,scale);","returnnewBigDecimal(newBigInteger(toByteArray()),scale);","publicBigDecimaltoBigDecimal(intnewScale){"]": ["|project://smallsql/src/smallsql/database/MutableNumeric.java|"],
"["rowPos=Math.min(Math.max(rowPos+rows,-1),1);","returnrowPos==1;","finalintgetRow(){","returnrowPos==1?1:0;","finallonggetRowPosition(){","returnrowPos;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["node=node.nextLetter;","}else{","value=0;","node=null;","}else{","quoteBuffer.append(c);"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["directory=canonicalFile;","if(!directory.isDirectory()){","throwSmallSQLException.create(Language.DB_NONEXISTENT,name);","Filefile=newFile(directory,Utils.MASTER_FILENAME);","if(!file.exists())","throwSmallSQLException.create(Language.DB_NOT_DIRECTORY,name);"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returncol;","privateCommandCreateViewcreateView()throwsSQLException{","StringviewName=nextIdentifier();","nextToken(MISSING_AS);","SQLTokentoken=nextToken(MISSING_SELECT);","CommandCreateViewcmd=newCommandCreateView(con.log,viewName);"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(def!=null)","writeString(column.getDefaultDefinition());","ColumnreadColumn(inttableFormatVersion)throwsException{","Columncolumn=newColumn();","column.setFlag(readByte());","column.setName(readString());"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["staticfinalintCOUNTER=324;//aliasforINTIDENTITY,isusedfromMSACCESS","staticfinalintBIGINT=325;","staticfinalintSMALLMONEY=330;","staticfinalintMONEY=331;","staticfinalintDECIMAL=332;","staticfinalintNUMERIC=333;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["StoreImplstore=getStore(con,firstPage,SQLTokenizer.SELECT);","if(store==null){","throwSmallSQLException.create(Language.TABLE_FILE_INVALID,getFile(database));","intcount=store.readInt();","for(inti=0;i\<count;i++){","columns.add(store.readColumn(tableFormatVersion));"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["time-=seconds;","break;","caseSQLTokenizer.TIME:","time%=86400000;","break;","caseSQLTokenizer.DATE:"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["buf.append(details.hour\<12?\"AM\":\"PM\");","returnbuf.toString();","case1://USAmm/dd/yy","formatNumber(details.month+1,2,buf);","buf.append(\'/\');","formatNumber(details.day,2,buf);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["if(millis\>=1000){","throwSmallSQLException.create(Language.MILLIS_TOOLARGE,datetime);","returncalcMillis(year,month,day,hour,minute,second,millis);","}catch(SQLExceptionex){","throwex;","}catch(Throwableex){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["{COL_INVALID_NAME,\"Nomedicolonnanonvalido\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"Indicedicolonnafuoridall\'\'intervallovalido:{0}.\"},","{COL_AMBIGUOUS,\"Ilnomedicolonna\'\'{0}\'\'Ã¨ambiguo.\"},","{GROUP_AGGR_INVALID,\"FunzionediaggregrazionenonvalidaperlaclausolaGROUPBY:({0}).\"},","{GROUP_AGGR_NOTPART,\"L\'\'espressione\'\'{0}\'\'nonÃ¨partediunafunzionediaggregazioneodellaclausolaGROUPBY.\"},","{ORDERBY_INTERNAL,\"ErroreinternoperORDERBY.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["expr=newExpressionFunctionIIF();","break;","caseSQLTokenizer.SWITCH:","invalidParamCount=(paramCount%2!=0);","ExpressionFunctionCaseexprCase=newExpressionFunctionCase();","for(inti=0;i\<paramCount-1;i+=2)"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.VIEW:","returncreateView();","caseSQLTokenizer.INDEX:","returncreateIndex(false);","caseSQLTokenizer.PROCEDURE:","returncreateProcedure();"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["caseSQLTokenizer.TIME:","value=newDateTime(expr.getLong(),dataType);","break;","default:","value=expr.getObject();","privatestaticfinalObjectEMPTY=newObject();"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["caseSQLTokenizer.BIGINT:","returnTypes.BIGINT;","caseSQLTokenizer.SMALLMONEY:","caseSQLTokenizer.MONEY:","caseSQLTokenizer.DECIMAL:","returnTypes.DECIMAL;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["((MutableLong)value).value+=expr.getLong();","break;","caseSQLTokenizer.REAL:","((MutableFloat)value).value+=expr.getFloat();","break;","caseSQLTokenizer.FLOAT:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["}catch(Exceptione){","throwSmallSQLException.createFromException(e);","publiclonggetLong(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["returnSQLTokenizer.getKeyWord(getColumnExpression(column).getDataType());","publicbooleanisReadOnly(intcolumn)throwsSQLException{","return!getColumnExpression(column).isDefinitelyWritable();","publicbooleanisWritable(intcolumn)throwsSQLException{","returngetColumnExpression(column).isDefinitelyWritable();","publicbooleanisDefinitelyWritable(intcolumn)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["values=newExpressionValue[count];","while(count--\>0){","values[count]=newExpressionValue();","returnvalues[metaData.getColumnIdx(columnIndex)];","finalprivatevoidupdateValue(intcolumnIndex,Objectx,intdataType)throwsSQLException{","getUpdateValue(columnIndex).set(x,dataType);"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnUtils.string2boolean(readString());","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["IndexNodenode=addNode(digit);","if(node.remainderKey!=null)node.moveRemainderValue();","node.saveValue(rowOffset);","finalvoidsaveValue(longrowOffset)throwsSQLException{","if(unique){","if(value!=null)throwSmallSQLException.create(Language.KEY_DUPLICATE);"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["returnresult;","staticlongnow(){","returnremoveDateTimeOffset(System.currentTimeMillis());","staticintdayOfWeek(longtime){","return(int)((time/86400000+3)%7);","staticlongparse(java.util.Datedate){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["returnnewDateTime(getDateTimeLong(),dataType);","caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","MutableNumericnum=param1.getNumeric();","if(num!=null&&(dataType==SQLTokenizer.NUMERIC||dataType==SQLTokenizer.DECIMAL))","num.setScale(getScale());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["offset=listEnum.offsetStack[listEnum.stack-1]-pointerSize;","intpointer=getPointer();","if(pointer\<=previousOffset){","offset=previousOffset;","return;","offset=-1;"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["doubledoubleValue=param1.getDouble();","if(doubleValue\<0)","return-1;","if(doubleValue\>0)","return1;","return0;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionSign.java|"],
"["returnintervalType;","ExpressionFunctionTimestampDiff(intintervalType,Expressionp1,Expressionp2){","interval=mapIntervalType(intervalType);","setParams(newExpression[]{p1,p2});","intgetFunction(){","returnSQLTokenizer.TIMESTAMPDIFF;"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionTimestampDiff.java|"],
"["publicTimestampgetTimestamp(StringcolumnName,Calendarcal)throwsSQLException{","returngetTimestamp(findColumn(columnName),cal);","publicURLgetURL(intcolumnIndex)throwsSQLException{","try{","Expressionexpr=getValue(columnIndex);","wasNull=expr.isNull();"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["return0;","publicintgetMaxColumnsInSelect(){","return0;","publicintgetMaxColumnsInTable(){","return0;","publicintgetMaxConnections(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["staticfinalintEXECUTE=209;","staticfinalintFROM=210;","staticfinalintWHERE=211;","staticfinalintGROUP=212;","staticfinalintBY=213;","staticfinalintHAVING=214;"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["intsecond;","intmillis;","Details(longtime){","intt=(int)(time%86400000);","intd=(int)(time/86400000);","if(t\<0){"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["publicstaticfinalStringSTXADD_PARAM_INVALID_COUNT=\"SS-0618\";","publicstaticfinalStringSTXADD_JOIN_INVALID=\"SS-0619\";","publicstaticfinalStringSTXADD_FROM_PAR_CLOSE=\"SS-0620\";","publicstaticfinalStringSTXADD_KEYS_REQUIRED=\"SS-0621\";","publicstaticfinalStringSTXADD_NOT_NUMBER=\"SS-0622\";","publicstaticfinalStringSTXADD_COMMENT_OPEN=\"SS-0623\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["privatefinalvoidresize()throwsSQLException{","intnewsize=data.length\<\<1;","if(newsize\>0xFFFFFF){//seepointerSize","newsize=0xFFFFFF;","if(newsize==data.length)throwSmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);","byte[]temp=newbyte[newsize];"]": ["|project://smallsql/src/smallsql/database/LongTreeList.java|"],
"["tableViews.remove(tableViewName);","voidreplaceTable(TableoldTable,TablenewTable)throwsException{","synchronized(tableViews){","tableViews.remove(oldTable.name);","tableViews.remove(newTable.name);","oldTable.close();"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["publicstaticfinalStringCOL_INVALID_NAME=\"SS-0406\";","publicstaticfinalStringCOL_IDX_OUT_RANGE=\"SS-0407\";","publicstaticfinalStringCOL_AMBIGUOUS=\"SS-0408\";","publicstaticfinalStringGROUP_AGGR_INVALID=\"SS-0430\";","publicstaticfinalStringGROUP_AGGR_NOTPART=\"SS-0431\";","publicstaticfinalStringORDERBY_INTERNAL=\"SS-0432\";"]": ["|project://smallsql/src/smallsql/database/language/Language.java|"],
"["ObjectgetObject()throwsException{","if(param1.isNull())returnnull;","finalintdataType=getDataType();","switch(dataType){","caseSQLTokenizer.LONGVARCHAR:","returnconvertToString();"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionConvert.java|"],
"["caseSQLTokenizer.SMALLMONEY:","return((Money)obj).value;","default:returnMoney.parseMoney(obj.toString());","MutableNumericgetNumeric(){","returngetNumeric(getObject(),dataType);","staticMutableNumericgetNumeric(Objectobj,intdataType){"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["privateExpressionhaving;","privateExpressionsorderBy;","privatebooleanisAggregateFunction;","privateintmaxRows=-1;","finalbooleanisGroupResult(){","returngroupBy!=null||having!=null||isAggregateFunction;"]": ["|project://smallsql/src/smallsql/database/CommandSelect.java|"],
"["inserts.add(lock.getLink());","returninserts;","finalTableStorePagerequestLock(SSConnectioncon,intpageOperation,longpage)throwsException{","synchronized(locks){","if(raFile==null){","throwSmallSQLException.create(Language.TABLE_MODIFIED,name);"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:","returnInteger.MAX_VALUE;","if(defaultValue==-1)","thrownewError(\"Precision:\"+SQLTokenizer.getKeyWord(dataType));","returndefaultValue;"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"],
"["returnnull;","returnnewMutableNumeric(fValue);","caseSQLTokenizer.FLOAT:","caseSQLTokenizer.DOUBLE:","doubledValue=((Number)obj).doubleValue();","if(Double.isInfinite(dValue)||Double.isNaN(dValue))"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["finalprivatebooleanmoveToRow()throwsException{","if(filePos\>=0x4000000000000000L){","store=((StorePageLink)insertStorePages.get((int)(filePos&0x3FFFFFFFFFFFFFFFL))).getStore(table,con,lock);","}else{","store=(filePos\<maxFileOffset)?table.getStore(con,filePos,lock):null;","if(store==null){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["for(inti=commitPages.size()-1;i\>=savepoint;i--){","TransactionSteppage=(TransactionStep)commitPages.remove(i);","page.rollback();","page.freeLock();","publicvoidrollback()throwsSQLException{","log.println(\"Rollback\");"]": ["|project://smallsql/src/smallsql/database/SSConnection.java|"],
"["}else{","if(lock.lockType==LOCK_WRITE){","returnnull;//writelockofanotherConnection","prevLock=lock;","lock=lock.nextLock;","if(usableLock!=null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["privatestaticfinalintNOT_COMMENT=0;","privatestaticfinalintLINE_COMMENT=1;","privatestaticfinalintMULTI_COMMENT=2;","publicstaticListparseSQL(char[]sql)throwsSQLException{","SearchNodenode=searchTree;","ArrayListtokens=newArrayList();"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returntrue;","publicbooleansupportsOuterJoins(){","returntrue;","publicbooleansupportsFullOuterJoins(){","returntrue;","publicbooleansupportsLimitedOuterJoins(){"]": ["|project://smallsql/src/smallsql/database/SSDatabaseMetaData.java|"],
"["switch(c){","case\'\\\"\':","case\'\\\'\':","if(comment!=NOT_COMMENT){","break;","}elseif(quote==0){"]": ["|project://smallsql/src/smallsql/database/SQLTokenizer.java|"],
"["returntable;","voidcreateView(SSConnectioncon,StringviewName,Stringsql)throwsException{","newView(this,con,viewName,sql);","staticObject[][]getCatalogs(Databasedatabase){","Listcatalogs=newArrayList();","FilebaseDir=(database!=null)?"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["{COL_INVALID_NAME,\"UngÃ¼ltigerSpaltenname\'\'{0}\'\'.\"},","{COL_IDX_OUT_RANGE,\"SpaltenindexauÃŸerhalbdesGÃ¼ltigkeitsbereiches:{0}.\"},","{COL_AMBIGUOUS,\"DieSpalte\'\'{0}\'\'istmehrdeutig.\"},","{GROUP_AGGR_INVALID,\"AggregatfunktionsindnichterlaubtimGROUPBYKlausel:({0}).\"},","{GROUP_AGGR_NOTPART,\"DerAusdruck\'\'{0}\'\'istnichtTeileinerAggregatfunktionoderGROUPBYKlausel.\"},","{ORDERBY_INTERNAL,\"InternerErrormitORDERBY.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_de.java|"],
"["caseSQLTokenizer.CHAR:","caseSQLTokenizer.NCHAR:","caseSQLTokenizer.VARCHAR:","caseSQLTokenizer.NVARCHAR:","returnMoney.parseMoney(readString());","caseSQLTokenizer.CLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["caseSQLTokenizer.NUMERIC:","caseSQLTokenizer.DECIMAL:","value=newMutableNumeric(expr.getNumeric());","break;","caseSQLTokenizer.TIMESTAMP:","caseSQLTokenizer.SMALLDATETIME:"]": ["|project://smallsql/src/smallsql/database/ExpressionValue.java|"],
"["inti=0;","for(intp=0;p\<cases.size();p++){","cases.set(p,params[i++]);","results.set(p,params[i++]);","if(i\<params.length)","elseResult=params[i];"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionCase.java|"],
"["{JOIN_INSERT,\"InsertRownonsupportatonellejoin.\"},","{DELETE_WO_FROM,\"DeleteRownecessitaun\'\'espressioneFROM.\"},","{INSERT_WO_FROM,\"InsertRownecessitaun\'\'espressioneFROM.\"},","{TABLE_CANT_RENAME,\"Latabella\'\'{0}\'\'nonpuÃ²essererinominata.\"},","{TABLE_CANT_DROP,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'.\"},","{TABLE_CANT_DROP_LOCKED,\"NonsipuÃ²effettuareDROPdellatabella\'\'{0}\'\'perchÃ©Ã¨inLOCK.\"},"]": ["|project://smallsql/src/smallsql/database/language/Language_it.java|"],
"["if((str[offset]|0x20)==value)returnoffset;","return-1;","staticintindexOf(intvalue,int[]list){","intoffset=0;","for(intend=list.length;offset\<end;offset++){","if((list[offset])==value)returnoffset;"]": ["|project://smallsql/src/smallsql/database/Utils.java|"],
"["finalintdataType=column.getDataType();","row[2]=Utils.getInteger(dataType);//DATA_TYPE","row[3]=SQLTokenizer.getKeyWord(dataType);//TYPE_NAME","row[4]=Utils.getInteger(column.getPrecision());//COLUMN_SIZE","row[6]=Utils.getShort(column.getScale());//DECIMAL_DIGITS","row[7]=Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN"]": ["|project://smallsql/src/smallsql/database/Database.java|"],
"["returnrowPos==1;","finalbooleanfirst(){","rowPos=1;","returntrue;","finalbooleanprevious(){","rowPos--;"]": ["|project://smallsql/src/smallsql/database/NoFromResult.java|"],
"["importsmallsql.database.language.Language;","publicclassSSResultSetimplementsResultSet{","SSResultSetMetaDatametaData=newSSResultSetMetaData();","privateCommandSelectcmd;","privatebooleanwasNull;","SSStatementst;"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["LongpageKey=newLong(fileOffset);//TODOperformance","lock=(TableStorePage)locks.get(pageKey);","prev=lock;","while(lock!=null){","if(lock==storePage){","if(lock==prev){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["@Override","finalvoidnullRow(){","row=0;","store=Store.NULL;","@Override","finalvoidnoRow(){"]": ["|project://smallsql/src/smallsql/database/TableResult.java|"],
"["if(value==null){","output.writeByte(0);","}else","if(valueinstanceofLong){","output.writeByte(1);","output.writeLong(((Long)value).longValue());"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["Scrollable(RowSourcerowSource){","this.rowSource=rowSource;","finalbooleanisScrollable(){","returntrue;","voidbeforeFirst()throwsException{","rowIdx=-1;"]": ["|project://smallsql/src/smallsql/database/Scrollable.java|"],
"["privatestaticfinalint[]COMMANDS_ESCAPE={SQLTokenizer.D,SQLTokenizer.T,SQLTokenizer.TS,SQLTokenizer.FN,SQLTokenizer.CALL};","privatestaticfinalint[]COMMANDS_ALTER={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.PROCEDURE,};","privatestaticfinalint[]COMMANDS_CREATE={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE,SQLTokenizer.UNIQUE,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};","privatestaticfinalint[]COMMANDS_DROP={SQLTokenizer.DATABASE,SQLTokenizer.TABLE,SQLTokenizer.VIEW,SQLTokenizer.INDEX,SQLTokenizer.PROCEDURE};","privatestaticfinalint[]COMMANDS_SET={SQLTokenizer.TRANSACTION};","privatestaticfinalint[]COMMANDS_CREATE_UNIQUE={SQLTokenizer.INDEX,SQLTokenizer.CLUSTERED,SQLTokenizer.NONCLUSTERED};"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["if(idx\>=0){","matrix[idx]=c;","}else{","throwSmallSQLException.create(Language.COL_MISSING,sqlColName);","if(columnExpressions.size()!=cmdSel.columnExpressions.size())","throwSmallSQLException.create(Language.COL_VAL_UNMATCH);"]": ["|project://smallsql/src/smallsql/database/CommandInsert.java|"],
"["privatefinalvoidsaveRemainderValue(char[]remainderValue,intoffset){","intlength=remainderValue.length-offset;","this.remainderKey=newchar[length];","System.arraycopy(remainderValue,offset,this.remainderKey,0,length);","privatefinalvoidsaveRemainderValue(longremainderValue,intcharCount){","this.remainderKey=newchar[charCount];"]": ["|project://smallsql/src/smallsql/database/IndexNode.java|"],
"["finalstaticintgetScale(intdataType){","switch(dataType){","caseSQLTokenizer.MONEY:","caseSQLTokenizer.SMALLMONEY:","return4;","caseSQLTokenizer.TIMESTAMP:"]": ["|project://smallsql/src/smallsql/database/Expression.java|"],
"["doublegetDouble(intcolIdx)throwsException{","returnget(colIdx).getDouble();","longgetMoney(intcolIdx)throwsException{","returnget(colIdx).getMoney();","MutableNumericgetNumeric(intcolIdx)throwsException{","returnget(colIdx).getNumeric();"]": ["|project://smallsql/src/smallsql/database/MemoryResult.java|"],
"["caseSQLTokenizer.SMALLINT:","caseSQLTokenizer.INT:","returnnewMutableNumeric(getIntImpl());","caseSQLTokenizer.BIGINT:","returnnewMutableNumeric(getLongImpl());","caseSQLTokenizer.REAL:"]": ["|project://smallsql/src/smallsql/database/ExpressionArithmetic.java|"],
"["abstractclassCommand{","inttype;","Stringcatalog;","Stringname;","SSResultSetrs;","intupdateCount=-1;"]": ["|project://smallsql/src/smallsql/database/Command.java|"],
"["data=newExpression[16];","Expressions(intinitSize){","data=newExpression[initSize];","finalintsize(){","returnsize;","finalvoidsetSize(intnewSize){"]": ["|project://smallsql/src/smallsql/database/Expressions.java|"],
"["returnb;","finalStringgetString()throwsException{","if(isNull())returnnull;","Stringstr=param1.getString();","intlength=param2.getInt();","intstart=str.length()-Math.min(length,str.length());"]": ["|project://smallsql/src/smallsql/database/ExpressionFunctionRight.java|"],
"["caseSQLTokenizer.SQL_LONGVARCHAR:dataType=SQLTokenizer.LONGVARCHAR;break;","caseSQLTokenizer.SQL_REAL:dataType=SQLTokenizer.REAL;break;","caseSQLTokenizer.SQL_SMALLINT:dataType=SQLTokenizer.SMALLINT;break;","caseSQLTokenizer.SQL_TIME:dataType=SQLTokenizer.TIME;break;","caseSQLTokenizer.SQL_TIMESTAMP:dataType=SQLTokenizer.TIMESTAMP;break;","caseSQLTokenizer.SQL_TINYINT:dataType=SQLTokenizer.TINYINT;break;"]": ["|project://smallsql/src/smallsql/database/SQLParser.java|"],
"["returngetShort(findColumn(columnName));","publicintgetInt(StringcolumnName)throwsSQLException{","returngetInt(findColumn(columnName));","publiclonggetLong(StringcolumnName)throwsSQLException{","returngetLong(findColumn(columnName));","publicfloatgetFloat(StringcolumnName)throwsSQLException{"]": ["|project://smallsql/src/smallsql/database/SSResultSet.java|"],
"["if(hour\>=24){","throwSmallSQLException.create(Language.HOURS_TOOLARGE,datetime);","if(minute\>=60){","throwSmallSQLException.create(Language.MINUTES_TOOLARGE,datetime);","if(second\>=60){","throwSmallSQLException.create(Language.SECS_TOOLARGE,datetime);"]": ["|project://smallsql/src/smallsql/database/DateTime.java|"],
"["caseSQLTokenizer.MONEY:","caseSQLTokenizer.JAVA_OBJECT:","caseSQLTokenizer.LONGVARBINARY:","caseSQLTokenizer.BLOB:","caseSQLTokenizer.CLOB:","caseSQLTokenizer.NCLOB:"]": ["|project://smallsql/src/smallsql/database/StoreImpl.java|","|project://smallsql/src/smallsql/database/StoreImpl.java|"],
"["intgetColumnSize(){","if(SSResultSetMetaData.isNumberDataType(dataType))","returngetPrecision();","elsereturngetDisplaySize();","intgetFlag(){","return(identity?1:0)|"]": ["|project://smallsql/src/smallsql/database/Column.java|"],
"["Table(Databasedatabase,SSConnectioncon,Stringname,Columnscolumns,IndexDescriptionsexistIndexes,IndexDescriptionsnewIndexes,ForeignKeysforeignKeys)throwsException{","super(name,columns);","this.database=database;","this.references=foreignKeys;","newIndexes.create(con,database,this);","if(existIndexes==null){"]": ["|project://smallsql/src/smallsql/database/Table.java|"],
"["Filefile=getFile(database);","booleanok=file.createNewFile();","if(!ok)throwSmallSQLException.create(Language.TABLE_EXISTENT,name);","FileChannelraFile=Utils.openRaFile(file,database.isReadOnly());","con.add(newCreateFile(file,raFile,con,database));","writeMagic(raFile);"]": ["|project://smallsql/src/smallsql/database/TableView.java|"],
"["return16;","caseSQLTokenizer.UNIQUEIDENTIFIER:","return36;","caseSQLTokenizer.LONGVARCHAR:","caseSQLTokenizer.LONGNVARCHAR:","caseSQLTokenizer.LONGVARBINARY:"]": ["|project://smallsql/src/smallsql/database/SSResultSetMetaData.java|"]
}