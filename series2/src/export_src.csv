method,source
/smallsql/database/SSStatement/setFetchDirection(int),"[""final public void setFetchDirection(int direction) throws SQLException{"",""        checkStatement();"",""        fetchDirection = direction;"",""    }""]"
"/smallsql/database/Store/getLong(int,int)","[""abstract long getLong( int offset, int dataType) throws Exception;""]"
/smallsql/database/ExpressionArithmetic/getDouble(),"[""double getDouble() throws java.lang.Exception {"",""        if(isNull()) return 0;"",""        int dataType = getDataType();"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""\t\t\t\treturn getBoolean() ? 1 : 0;"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""\t\t\t\treturn getIntImpl();"",""            case SQLTokenizer.BIGINT:"",""                return getLongImpl();"",""\t\t\tcase SQLTokenizer.REAL:"",""                return getFloatImpl();"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                return getDoubleImpl();"",""        }"",""\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);"",""    }""]"
/smallsql/database/Expression/getInt(),"[""abstract int getInt() throws Exception;""]"
/smallsql/junit/TestLanguage/testBogusLocale(),"[""/**"",""\t * In case of wrong Locale, Language picks up the one corresponding to the"",""\t * the current Locale.\<br\>"",""\t */"",""\tpublic void testBogusLocale() throws SQLException {"",""\t\tLocale origLocale = Locale.getDefault();"",""\t\tLocale.setDefault(Locale.ITALY);"",""\t\t"",""\t\tConnection conn = AllTests.createConnection(\""?locale=XXX\"", null);"",""\t\tStatement stat = conn.createStatement();"","""",""\t\ttry {"",""\t\t\trecreateTestTab(stat);"",""\t\t\t"",""\t\t\tstat.execute(\""CREATE TABLE \"" + TABLE_NAME + \"" (id_test INT)\"");"",""\t\t\tfail();"",""\t\t}"",""\t\tcatch (SQLException e) {"",""\t\t\tassertMessage(e, \""La tabella/vista \'\"" + TABLE_NAME + \""\' è già esistente.\"");"",""\t\t}"",""\t\tfinally {"",""\t\t\tLocale.setDefault(origLocale);"",""\t\t\tconn.close();"",""\t\t}"",""\t}""]"
"/smallsql/database/Utils/createLobFileName(smallsql.database.Database,java.lang.String)","[""static String createLobFileName(Database database, String name){"",""\t\treturn database.getName() + \'/\' + name + LOB_EXTENTION;"",""\t}""]"
/smallsql/database/UnionAll/next(),"[""final boolean next() throws Exception {"",""\t\tboolean n = currentDS.next();"",""\t\trow++;"",""\t\tif(n) return true;"",""\t\twhile(dataSources.size() \> dataSourceIdx+1){"",""\t\t\tcurrentDS = dataSources.get(++dataSourceIdx);"",""\t\t\tcurrentDS.beforeFirst();"",""\t\t\tn = currentDS.next();"",""\t\t\tif(n) return true;"",""\t\t}"",""\t\trow = 0;"",""\t\treturn false;"",""\t}""]"
/smallsql/junit/TestGroupBy/init(),"[""public void init(){"",""\t\tif(init) return;"",""\t\ttry{"",""\t\t\tConnection con = AllTests.getConnection();"",""\t\t\tdropTable( con, table1 );"",""\t\t\tStatement st = con.createStatement();"",""\t\t\tst.execute(\""create table \"" + table1 + \""(name varchar(30), id int )\"");"",""\t\t\t//st.execute(\""create table \"" + table2 + \""(c \"" + testValue.dataType +\"", d \"" + testValue.dataType + \"")\"");"",""\t\t\t//st.execute(\""create table \"" + table3 + \""(c \"" + testValue.dataType +\"", d \"" + testValue.dataType + \"")\"");"",""\t\t\tst.close();"",""\t\t\tPreparedStatement pr = con.prepareStatement(\""INSERT into \"" + table1 + \""(name, id) Values(?,?)\"");"",""\t\t\tpr.setString( 1, STR_VALUE1);"",""\t\t\tpr.setInt( 2, 1 );"",""\t\t\tpr.execute();"",""\t\t\tpr.setString( 1, STR_VALUE1);"",""\t\t\tpr.setInt( 2, 2 );"",""\t\t\tpr.execute();"",""\t\t\tpr.setString( 1, STR_VALUE1);"",""\t\t\tpr.setNull( 2, Types.INTEGER );"",""\t\t\tpr.execute();"",""\t\t\tpr.setString( 1, STR_VALUE2);"",""\t\t\tpr.setInt( 2, 1 );"",""\t\t\tpr.execute();"","""",""\t\t\tpr.close();"","""",""\t\t\tinit = true;"",""\t\t}catch(Throwable e){"",""\t\t\te.printStackTrace();"",""\t\t}"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/allProceduresAreCallable(),"[""public boolean allProceduresAreCallable() {"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionArithmetic/getOperationFromToken(int),"[""static int getOperationFromToken( int value ){"",""        switch(value){"",""            case SQLTokenizer.PLUS:         return ADD;"",""            case SQLTokenizer.MINUS:        return SUB;"",""            case SQLTokenizer.ASTERISK:     return MUL;"",""            case SQLTokenizer.SLACH:        return DIV;"",""            case SQLTokenizer.PERCENT:      return MOD;"",""            case SQLTokenizer.EQUALS:       return EQUALS;"",""            case SQLTokenizer.GREATER:      return GREATER;"",""            case SQLTokenizer.GREATER_EQU:  return GRE_EQU;"",""            case SQLTokenizer.LESSER:       return LESSER;"",""            case SQLTokenizer.LESSER_EQU:   return LES_EQU;"",""            case SQLTokenizer.UNEQUALS:     return UNEQUALS;"",""            case SQLTokenizer.BETWEEN:      return BETWEEN;"",""            case SQLTokenizer.LIKE:         return LIKE;"",""            case SQLTokenizer.IN:           return IN;"",""\t\t\tcase SQLTokenizer.IS:           return ISNULL;"",""            case SQLTokenizer.OR:           return OR;"",""            case SQLTokenizer.AND:          return AND;"",""            case SQLTokenizer.NOT:          return NOT;"",""            case SQLTokenizer.BIT_OR:       return BIT_OR;"",""            case SQLTokenizer.BIT_AND:      return BIT_AND;"",""            case SQLTokenizer.BIT_XOR:      return BIT_XOR;"",""            case SQLTokenizer.TILDE:        return BIT_NOT;"",""            default:                        return 0;"",""        }"",""    }""]"
/smallsql/database/DataSource/init(smallsql.database.SSConnection),"[""boolean init( SSConnection con ) throws Exception{return false;}""]"
/smallsql/database/StoreImpl/resizePage(int),"[""private void resizePage(int minNewSize){"",""    \tint newSize = Math.max(minNewSize, page.length*2);"",""    \tbyte[] newPage = new byte[newSize];"",""    \tSystem.arraycopy( page, 0, newPage, 0, page.length);"",""    \tpage = newPage;"",""    }""]"
/smallsql/database/Index/clear(),"[""/**"",""\t * Remove all entries"",""\t */"",""\tfinal void clear(){"",""\t\trootPage.clear();"",""\t}"",""\t/*================================================================"",""\t * Normalize functions"",""\t * convert the value to a binary with identical sort order "",""\t * like the original values. "",""\t ================================================================*/""]"
/smallsql/database/Index/Index(smallsql.database.IndexNode),"[""Index(IndexNode rootPage){"",""        this.rootPage = rootPage;"",""    }""]"
/smallsql/junit/BasicTestCase/printSQL(java.lang.String),"[""void printSQL(String sql) throws SQLException{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs = st.executeQuery(sql);"",""\t\tprintRS( rs );"",""\t}""]"
/smallsql/database/UnionAll/getMoney(int),"[""final long getMoney(int colIdx) throws Exception {"",""\t\treturn currentDS.getMoney(colIdx);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsLikeEscapeClause(),"[""public boolean supportsLikeEscapeClause() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsANSI92FullSQL(),"[""public boolean supportsANSI92FullSQL() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/ownUpdatesAreVisible(int),"[""public boolean ownUpdatesAreVisible(int type) {"",""\t\treturn supportsResultSetType(type);"",""    }""]"
/smallsql/database/SSStatement/cancel(),"[""final public void cancel() throws SQLException{"",""        checkStatement();"",""        // TODO Statement.cancel()"",""    }""]"
/smallsql/database/MemoryResult/rowDeleted(),"[""final boolean rowDeleted(){"",""\t\treturn false;"",""\t}""]"
/smallsql/database/ExpressionArithmetic/getDoubleImpl(),"[""private double getDoubleImpl() throws java.lang.Exception{"",""\t\tif(operation == NEGATIVE)"",""\t\t\treturn getDoubleImpl(0, left.getDouble());"",""\t\treturn getDoubleImpl(left.getDouble(), right.getDouble());"",""\t}""]"
"/smallsql/database/Command/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""abstract void executeImpl(SSConnection con, SSStatement st) throws Exception;""]"
/smallsql/database/MutableDouble/intValue(),"[""public int intValue() {"",""\t\treturn (int)value;"",""\t}""]"
/smallsql/database/DateTime/parse(java.lang.String),"[""static long parse(final String datetime) throws SQLException{"",""\t\ttry{"",""\t\t\tfinal int length = datetime.length();"","""",""\t\t\tfinal int year;"",""\t\t\tfinal int month;"",""\t\t\tfinal int day;"",""\t\t\tfinal int hour;"",""\t\t\tfinal int minute;"",""\t\t\tfinal int second;"",""\t\t\tfinal int millis;"",""\t\t\t"","""",""\t\t\tint idx1 = 0;"",""\t\t\tint idx2 = datetime.indexOf(\'-\');"",""\t\t\tif(idx2 \> 0){"",""\t\t\t\tyear = Integer.parseInt(datetime.substring(idx1, idx2).trim());"",""\t\t\t\t"",""\t\t\t\tidx1 = idx2+1;"",""\t\t\t\tidx2 = datetime.indexOf(\'-\', idx1);"",""\t\t\t\tmonth = Integer.parseInt(datetime.substring(idx1, idx2).trim())-1;"",""\t\t\t\t"",""\t\t\t\tidx1 = idx2+1;"",""\t\t\t\tidx2 = datetime.indexOf(\' \', idx1);"",""\t\t\t\tif(idx2 \< 0) idx2 = datetime.length();"",""\t\t\t\tday = Integer.parseInt(datetime.substring(idx1, idx2).trim());"",""\t\t\t}else{"",""\t\t\t\tyear  = 1970;"",""\t\t\t\tmonth = 0;"",""\t\t\t\tday   = 1;"",""\t\t\t}"",""\t\t\t"",""\t\t\tidx1 = idx2+1;"",""\t\t\tidx2 = datetime.indexOf(\':\', idx1);"",""\t\t\tif(idx2\>0){"",""\t\t\t\thour = Integer.parseInt(datetime.substring(idx1, idx2).trim());"",""\t\t\t\t"",""\t\t\t\tidx1 = idx2+1;"",""\t\t\t\tidx2 = datetime.indexOf(\':\', idx1);"",""\t\t\t\tminute = Integer.parseInt(datetime.substring(idx1, idx2).trim());"",""\t\t\t\t"",""\t\t\t\tidx1 = idx2+1;"",""\t\t\t\tidx2 = datetime.indexOf(\'.\', idx1);"",""\t\t\t\tif(idx2 \< 0) idx2 = datetime.length();"",""\t\t\t\tsecond = Integer.parseInt(datetime.substring(idx1, idx2).trim());"",""\t\t\t\t"",""\t\t\t\tidx1 = idx2+1;"",""\t\t\t\tif(idx1 \< length){"",""\t\t\t\t\tString strMillis = datetime.substring(idx1).trim();"",""\t\t\t\t\tswitch(strMillis.length()){"",""\t\t\t\t\t\tcase 1:"",""\t\t\t\t\t\t\tmillis = Integer.parseInt(strMillis) * 100;"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase 2:"",""\t\t\t\t\t\t\tmillis = Integer.parseInt(strMillis) * 10;"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase 3:"",""\t\t\t\t\t\t\tmillis = Integer.parseInt(strMillis);"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tdefault:"",""\t\t\t\t\t\t\tmillis = Integer.parseInt(strMillis.substring(0,3));"",""\t\t\t\t\t}"",""\t\t\t\t}else"",""\t\t\t\t\tmillis = 0;"",""\t\t\t}else{"",""\t\t\t\thour   = 0;"",""\t\t\t\tminute = 0;"",""\t\t\t\tsecond = 0;"",""\t\t\t\tmillis = 0;\t\t\t\t"",""\t\t\t}"",""            if(idx1 == 0 && length \> 0){"",""                throw SmallSQLException.create(Language.DATETIME_INVALID);"",""            }"",""            "",""            if(month \>= 12){"",""                throw SmallSQLException.create(Language.MONTH_TOOLARGE, datetime );"",""            }"",""            if(day \>= 32){"",""                throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );"",""            }"",""            if(day == 31){"",""                switch(month){"",""                case 1:"",""                case 3:"",""                case 5:"",""                case 8:"",""                case 10:"",""                    throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );"",""                }"",""            }"",""            if(month == 1){"",""                if(day == 30){"",""                    throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );"",""                }"",""                if(day == 29){"",""                    if(!isLeapYear(year)){"",""                        throw SmallSQLException.create(Language.DAYS_TOOLARGE, datetime );"",""                    }"",""                }"",""            }"",""            if(hour \>= 24){"",""                throw SmallSQLException.create(Language.HOURS_TOOLARGE, datetime );"",""            }"",""            if(minute \>= 60){"",""                throw SmallSQLException.create(Language.MINUTES_TOOLARGE, datetime );"",""            }"",""            if(second \>= 60){"",""                throw SmallSQLException.create(Language.SECS_TOOLARGE, datetime );"",""            }"",""            if(millis \>= 1000){"",""                throw SmallSQLException.create(Language.MILLIS_TOOLARGE, datetime );"",""            }"",""\t\t\treturn calcMillis(year, month, day, hour, minute, second, millis);"",""        }catch(SQLException ex){"",""            throw ex;"",""\t\t}catch(Throwable ex){"",""\t\t\tthrow SmallSQLException.createFromException(Language.DATETIME_INVALID, datetime, ex );"",""\t\t}"",""\t}""]"
"/smallsql/junit/TestFunctions/a(java.lang.String,java.lang.Object)","[""private static TestValue a(String function, Object result){"",""        TestValue value = new TestValue();"",""        value.function  = function;"",""        value.result    = result;"",""        return value;"",""    }""]"
/smallsql/junit/TestExceptionMethods/testDuplicatedColumnAlter(),"[""public void testDuplicatedColumnAlter() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{"",""            Statement st = con.createStatement();"",""            st.execute(\""Create Table DuplicatedColumn(col INT)\"");"",""            try{"",""                st.execute(\""ALTER TABLE DuplicatedColumn Add Col INT\"");"",""                fail(\""SQLException \'Duplicated Column\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"",""        }finally{"",""            dropTable(con, \""DuplicatedColumn\"");"",""        }"",""    }""]"
/smallsql/database/SSCallableStatement/getInt(int),"[""public int getInt(int i) throws SQLException {"",""        try{"",""            Expression expr = getValue(i);"",""            wasNull = expr.isNull();"",""            return expr.getInt();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
"/smallsql/database/StoreImpl/getLong(int,int)","[""/**"",""     * It used for ResultSet.getLong()"",""     */"",""    @Override"",""    long getLong(int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    return readBoolean() ? 1 : 0;"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return Utils.bytes2long( readBinary() );"",""            case SQLTokenizer.TINYINT:"",""                    return readUnsignedByte();"",""            case SQLTokenizer.SMALLINT:"",""                    return readShort();"",""            case SQLTokenizer.INT:"",""                    return readInt();"",""            case SQLTokenizer.BIGINT:"",""                    return readLong();"",""            case SQLTokenizer.REAL:"",""                    return (long)readFloat();"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return (long)readDouble();"",""            case SQLTokenizer.MONEY:"",""                    return readLong() / 10000;"",""            case SQLTokenizer.SMALLMONEY:"",""                    return readInt() / 10000;"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return readNumeric().longValue();"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return Long.parseLong( readString() );"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return Long.parseLong( readLongString() );"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());"",""                    ObjectInputStream ois = new ObjectInputStream(bais);"",""                    return ExpressionValue.getLong( ois.readObject().toString(), SQLTokenizer.VARCHAR );"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return Utils.bytes2long( readLongBinary() );"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\t\treturn readTimestamp();"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\treturn readTime();"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\treturn readDate();"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\treturn readSmallDateTime();"",""\t\t\tdefault:"",""\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \""BIGINT\"" });"",""        }"",""    }""]"
"/smallsql/database/ForeignKey/ForeignKey(java.lang.String,smallsql.database.IndexDescription,java.lang.String,smallsql.database.IndexDescription)","[""ForeignKey(String pkTable, IndexDescription pk, String fkTable, IndexDescription fk){"",""\t\tthis.pkTable = pkTable;"",""\t\tthis.fkTable = fkTable;"",""\t\tthis.pk = pk;"",""\t\tthis.fk = fk;"",""\t}""]"
/smallsql/database/ExpressionArithmetic/getString(),"[""String getString() throws java.lang.Exception {"",""        if(isNull()) return null;"",""        return getObject().toString();"",""    }""]"
/smallsql/database/SSStatement/getGeneratedKeyIndexes(),"[""final int[] getGeneratedKeyIndexes(){"",""        return generatedKeyIndexes;"",""    }""]"
"/smallsql/database/Command/execute(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""final void execute(SSConnection con, SSStatement st) throws SQLException{"",""    \tint savepoint = con.getSavepoint();"",""        try{"",""            executeImpl( con, st );"",""        }catch(Throwable e){"",""            con.rollback(savepoint);"",""            throw SmallSQLException.createFromException(e);"",""        }finally{"",""            if(con.getAutoCommit()) con.commit();"",""        }"",""    }""]"
/smallsql/database/RowSource/isLast(),"[""/**"",""\t * Equals to ResultSet.isLast()."",""\t */"",""\tboolean isLast() throws Exception{"",""\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);"",""\t}""]"
/smallsql/database/SSStatement/execute(java.lang.String),"[""final public boolean execute(String sql) throws SQLException{"",""        executeImpl(sql);"",""        return cmd.getResultSet() != null;"",""    }""]"
"/smallsql/database/SQLParser/function(smallsql.database.Command,smallsql.database.SQLToken,boolean)","[""/**"",""     * Parse any functions. The left parenthesis is already consumed from token list."",""     * @param token the SQLToken of the function"",""     * @param isEscape If the function is a FN ESCAPE sequence"",""     */ "",""    private Expression function( Command cmd, SQLToken token, boolean isEscape ) throws SQLException{"",""        Expression expr;"",""        switch(token.value){"",""        \tcase SQLTokenizer.CONVERT:{"",""        \t\tColumn col;"",""        \t\tExpression style = null;"",""        \t\tif(isEscape){"",""        \t\t\texpr = expression( cmd, 0);"",""\t\t\t\t\tnextToken(MISSING_COMMA);"",""\t\t\t\t\tcol = datatype(isEscape);"",""        \t\t}else{"",""\t        \t\tcol = datatype(isEscape);"",""\t        \t\tnextToken(MISSING_COMMA);"",""\t\t\t\t\texpr = expression( cmd, 0);"",""\t\t\t\t\ttoken = nextToken(MISSING_COMMA_PARENTHESIS);"",""\t\t\t\t\tif(token.value == SQLTokenizer.COMMA){"",""\t\t\t\t\t\tstyle = expression( cmd, 0);"",""\t\t\t\t\t}else"",""\t\t\t\t\t\tpreviousToken();"",""        \t\t}"",""        \t\tnextToken(MISSING_PARENTHESIS_R);"",""        \t\treturn new ExpressionFunctionConvert( col, expr, style );"",""        \t}"",""        \tcase SQLTokenizer.CAST:"",""        \t\texpr = expression( cmd, 0);"",""        \t\tnextToken(MISSING_AS);"",""        \t\tColumn col = datatype(false);"",""        \t\tnextToken(MISSING_PARENTHESIS_R);"",""        \t\treturn new ExpressionFunctionConvert( col, expr, null );"",""\t\t\tcase SQLTokenizer.TIMESTAMPDIFF:"",""\t\t\t\ttoken = nextToken(MISSING_INTERVALS);"",""\t\t\t\tnextToken(MISSING_COMMA);"",""\t\t\t\texpr = expression( cmd, 0);"",""\t\t\t\tnextToken(MISSING_COMMA);"",""\t\t\t\texpr = new ExpressionFunctionTimestampDiff( token.value, expr, expression( cmd, 0));"",""\t\t\t\tnextToken(MISSING_PARENTHESIS_R);"",""\t\t\t\treturn expr;"",""\t\t\tcase SQLTokenizer.TIMESTAMPADD:"",""\t\t\t\ttoken = nextToken(MISSING_INTERVALS);"",""\t\t\t\tnextToken(MISSING_COMMA);"",""\t\t\t\texpr = expression( cmd, 0);"",""\t\t\t\tnextToken(MISSING_COMMA);"",""\t\t\t\texpr = new ExpressionFunctionTimestampAdd( token.value, expr, expression( cmd, 0));"",""\t\t\t\tnextToken(MISSING_PARENTHESIS_R);"",""\t\t\t\treturn expr;"",""        }"",""\t\tExpressions paramList = expressionParenthesisList(cmd);"",""        int paramCount = paramList.size();"",""        Expression[] params = paramList.toArray();"",""        boolean invalidParamCount;"",""        switch(token.value){"",""        // numeric functions:"",""            case SQLTokenizer.ABS:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionAbs();"",""                break;"",""            case SQLTokenizer.ACOS:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionACos();"",""                break;"",""            case SQLTokenizer.ASIN:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionASin();"",""                break;"",""            case SQLTokenizer.ATAN:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionATan();"",""                break;"",""            case SQLTokenizer.ATAN2:"",""                invalidParamCount = (paramCount != 2);"",""                expr = new ExpressionFunctionATan2();"",""                break;"",""            case SQLTokenizer.CEILING:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionCeiling();"",""                break;"",""            case SQLTokenizer.COS:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionCos();"",""                break;"",""            case SQLTokenizer.COT:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionCot();"",""                break;"",""            case SQLTokenizer.DEGREES:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionDegrees();"",""                break;"",""            case SQLTokenizer.EXP:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionExp();"",""                break;"",""            case SQLTokenizer.FLOOR:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionFloor();"",""                break;"",""            case SQLTokenizer.LOG:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionLog();"",""                break;"",""            case SQLTokenizer.LOG10:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionLog10();"",""                break;"",""            case SQLTokenizer.MOD:"",""                invalidParamCount = (paramCount != 2);"",""                expr = new ExpressionFunctionMod();"",""                break;"",""            case SQLTokenizer.PI:"",""                invalidParamCount = (paramCount != 0);"",""                expr = new ExpressionFunctionPI();"",""                break;"",""            case SQLTokenizer.POWER:"",""                invalidParamCount = (paramCount != 2);"",""                expr = new ExpressionFunctionPower();"",""                break;"",""            case SQLTokenizer.RADIANS:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionRadians();"",""                break;"",""            case SQLTokenizer.RAND:"",""                invalidParamCount =  (paramCount != 0) && (paramCount != 1);"",""                expr = new ExpressionFunctionRand();"",""                break;"",""            case SQLTokenizer.ROUND:"",""                invalidParamCount =  (paramCount != 2);"",""                expr = new ExpressionFunctionRound();"",""                break;"",""            case SQLTokenizer.SIN:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionSin();"",""                break;"",""            case SQLTokenizer.SIGN:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionSign();"",""                break;"",""            case SQLTokenizer.SQRT:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionSqrt();"",""                break;"",""            case SQLTokenizer.TAN:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionTan();"",""                break;"",""            case SQLTokenizer.TRUNCATE:"",""                invalidParamCount =  (paramCount != 2);"",""                expr = new ExpressionFunctionTruncate();"",""                break;"",""         "",""        // string functions:"",""\t\t\tcase SQLTokenizer.ASCII:"",""\t\t\t\tinvalidParamCount = (paramCount != 1);"",""\t\t\t\texpr = new ExpressionFunctionAscii();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.BITLEN:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionBitLen();"",""                break;"",""            case SQLTokenizer.CHARLEN:"",""            case SQLTokenizer.CHARACTLEN:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionCharLen();"",""                break;"",""\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\t\tinvalidParamCount = (paramCount != 1);"",""\t\t\t\texpr = new ExpressionFunctionChar();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.CONCAT:"",""                if(paramCount != 2){"",""                    invalidParamCount = true;"",""                    expr = null;//only for compiler"",""                    break;"",""                }"",""                invalidParamCount = false;"",""                expr = new ExpressionArithmetic( params[0], params[1], ExpressionArithmetic.ADD);"",""                break;"",""            case SQLTokenizer.DIFFERENCE:"",""                invalidParamCount = (paramCount != 2);"",""                expr = new ExpressionFunctionDifference();"",""                break;"",""            case SQLTokenizer.INSERT:"",""                invalidParamCount = (paramCount != 4);"",""                expr = new ExpressionFunctionInsert();"",""                break;"",""            case SQLTokenizer.LCASE:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionLCase();"",""                break;"",""            case SQLTokenizer.LEFT:"",""                invalidParamCount = (paramCount != 2);"",""                expr = new ExpressionFunctionLeft();"",""                break;"",""\t\t\tcase SQLTokenizer.LENGTH:"",""\t\t\t\tinvalidParamCount = (paramCount != 1);"",""\t\t\t\texpr = new ExpressionFunctionLength();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.LOCATE:"",""            \tinvalidParamCount = (paramCount != 2) && (paramCount != 3);"",""            \texpr = new ExpressionFunctionLocate();"",""            \tbreak;"",""            case SQLTokenizer.LTRIM:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionLTrim();"",""                break;"",""            case SQLTokenizer.OCTETLEN:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionOctetLen();"",""                break;"",""            case SQLTokenizer.REPEAT:"",""                invalidParamCount = (paramCount != 2);"",""                expr = new ExpressionFunctionRepeat();"",""                break;"",""            case SQLTokenizer.REPLACE:"",""                invalidParamCount = (paramCount != 3);"",""                expr = new ExpressionFunctionReplace();"",""                break;"",""\t\t\tcase SQLTokenizer.RIGHT:"",""\t\t\t\tinvalidParamCount = (paramCount != 2);"",""\t\t\t\texpr = new ExpressionFunctionRight();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.RTRIM:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionRTrim();"",""                break;"",""            case SQLTokenizer.SPACE:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionSpace();"",""                break;"",""            case SQLTokenizer.SOUNDEX:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionSoundex();"",""                break;"",""\t\t\tcase SQLTokenizer.SUBSTRING:"",""\t\t\t\tinvalidParamCount = (paramCount != 3);"",""\t\t\t\texpr = new ExpressionFunctionSubstring();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.UCASE:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionUCase();"",""                break;"",""                "",""        // date time functions"",""            case SQLTokenizer.CURDATE:"",""            case SQLTokenizer.CURRENTDATE:"",""            \tinvalidParamCount = (paramCount != 0);"",""\t\t\t\texpr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.DATE), SQLTokenizer.DATE);"",""\t\t\t\tbreak;"",""            case SQLTokenizer.CURTIME:"",""            \tinvalidParamCount = (paramCount != 0);"",""\t\t\t\texpr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.TIME), SQLTokenizer.TIME);"",""\t\t\t\tbreak;"",""            case SQLTokenizer.DAYOFMONTH:"",""            \tinvalidParamCount = (paramCount != 1);"",""\t\t\t\texpr = new ExpressionFunctionDayOfMonth();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.DAYOFWEEK:"",""            \tinvalidParamCount = (paramCount != 1);"",""\t\t\t\texpr = new ExpressionFunctionDayOfWeek();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.DAYOFYEAR:"",""            \tinvalidParamCount = (paramCount != 1);"",""\t\t\t\texpr = new ExpressionFunctionDayOfYear();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.HOUR:"",""            \tinvalidParamCount = (paramCount != 1);"",""\t\t\t\texpr = new ExpressionFunctionHour();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.MINUTE:"",""            \tinvalidParamCount = (paramCount != 1);"",""\t\t\t\texpr = new ExpressionFunctionMinute();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.MONTH:"",""            \tinvalidParamCount = (paramCount != 1);"",""\t\t\t\texpr = new ExpressionFunctionMonth();"",""\t\t\t\tbreak;"",""            case SQLTokenizer.NOW:"",""            \tinvalidParamCount = (paramCount != 0);"",""\t\t\t\texpr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.TIMESTAMP), SQLTokenizer.TIMESTAMP);"",""\t\t\t\tbreak;"",""            case SQLTokenizer.YEAR:"",""                invalidParamCount = (paramCount != 1);"",""                expr = new ExpressionFunctionYear();"",""                break;"",""            \t"",""        // system functions:"",""            case SQLTokenizer.IIF:"",""        \t\tinvalidParamCount = (paramCount != 3);"",""            \texpr = new ExpressionFunctionIIF();"",""        \t\tbreak;"",""        \tcase SQLTokenizer.SWITCH:"",""        \t\tinvalidParamCount = (paramCount % 2 != 0);"",""        \t\tExpressionFunctionCase exprCase = new ExpressionFunctionCase();"",""        \t\tfor(int i=0; i \< paramCount-1; i +=2)"",""        \t\t\texprCase.addCase(params[i], params[i+1] );"",""        \t\texprCase.setEnd();"",""        \t\texpr = exprCase;"",""        \t\tbreak;"",""        \tcase SQLTokenizer.IFNULL:"",""        \t\tswitch(paramCount){"",""        \t\t\tcase 1:"",""        \t\t\t\treturn new ExpressionArithmetic( params[0], ExpressionArithmetic.ISNULL );"",""        \t\t\tcase 2:        \t\t\t\t"",""        \t\t\t\tinvalidParamCount = false;"",""        \t\t\t\texpr = new ExpressionFunctionIIF();"",""        \t\t\t\tExpression[] newParams = new Expression[3];"",""        \t\t\t\tnewParams[0] = new ExpressionArithmetic( params[0], ExpressionArithmetic.ISNULL );"",""        \t\t\t\tnewParams[1] = params[1];"",""        \t\t\t\tnewParams[2] = params[0];        \t\t\t\t"",""        \t\t\t\tparams = newParams;"",""        \t\t\t\tparamCount = 3;"",""        \t\t\t\tbreak;"",""        \t\t\tdefault:"",""        \t\t\t\tinvalidParamCount = true;"",""        \t\t\t\texpr = null; // only for Compiler"",""        \t\t}"",""        \t\tbreak;"",""                    "",""        // now come the aggregate functions"",""            case SQLTokenizer.COUNT:"",""\t\t\t\t\tinvalidParamCount = (paramCount != 1);"",""\t\t\t\t\tif(params[0].getType() == Expression.NAME){"",""\t\t\t\t\t\t//detect special case COUNT(*)"",""\t\t\t\t\t\tExpressionName param = (ExpressionName)params[0];"",""\t\t\t\t\t\tif(\""*\"".equals(param.getName()) && param.getTableAlias() == null){"",""                            //set any not NULL value as parameter"",""\t\t\t\t\t\t\tparams[0] = new ExpressionValue(\""*\"", SQLTokenizer.VARCHAR);"",""\t\t\t\t\t\t}"",""\t\t\t\t\t}"",""\t\t\t\t\texpr = new ExpressionName( Expression.COUNT );"",""\t\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.SUM:"",""\t\t\t\t\tinvalidParamCount = (paramCount != 1);"",""\t\t\t\t\texpr = new ExpressionName( Expression.SUM );"",""\t\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.MAX:"",""\t\t\t\t\tinvalidParamCount = (paramCount != 1);"",""\t\t\t\t\texpr = new ExpressionName( Expression.MAX );"",""\t\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.MIN:"",""\t\t\t\t\tinvalidParamCount = (paramCount != 1);"",""\t\t\t\t\texpr = new ExpressionName( Expression.MIN );"",""\t\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.FIRST:"",""\t\t\t\t\tinvalidParamCount = (paramCount != 1);"",""\t\t\t\t\texpr = new ExpressionName( Expression.FIRST );"",""\t\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.LAST:"",""\t\t\t\t\tinvalidParamCount = (paramCount != 1);"",""\t\t\t\t\texpr = new ExpressionName( Expression.LAST );"",""\t\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.AVG:"",""\t\t\t\t\tif(paramCount != 1){"",""                        invalidParamCount = true;"",""                        expr = null;//Only for the compiler"",""                        break;"",""                    }"",""\t\t\t\t\texpr = new ExpressionName( Expression.SUM );"",""\t\t\t\t\texpr.setParams( params );"",""\t\t\t\t\tExpression expr2 = new ExpressionName( Expression.COUNT );"",""\t\t\t\t\texpr2.setParams( params );"",""\t\t\t\t\texpr = new ExpressionArithmetic( expr, expr2, ExpressionArithmetic.DIV );"",""\t\t\t\t\treturn expr;"",""            default:"",""            \tthrow createSyntaxError(token, Language.STXADD_FUNC_UNKNOWN);"",""        }"",""        if(invalidParamCount) {"",""        \tthrow createSyntaxError(token, Language.STXADD_PARAM_INVALID_COUNT);"",""        }"",""        expr.setParams( params );"",""        return expr;"",""    }""]"
/smallsql/database/ViewResult/isBeforeFirst(),"[""boolean isBeforeFirst() throws SQLException{"",""\t\treturn commandSelect.isBeforeFirst();"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getFunction(),"[""int getFunction() {"",""\t\treturn SQLTokenizer.TIMESTAMPADD;"",""\t}""]"
/smallsql/database/Money/getImmutableObject(),"[""public Object getImmutableObject(){"",""\t\treturn toBigDecimal();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/storesLowerCaseIdentifiers(),"[""public boolean storesLowerCaseIdentifiers() {"",""    \treturn false;"",""    }""]"
/smallsql/database/Index/Index(boolean),"[""/**"",""\t * Create an Index in the memory. An Index is like a sorted list."",""\t * @param unique true if there are no duplicated values allow."",""\t */"",""\tIndex(boolean unique){"",""\t\trootPage = new IndexNode(unique, (char)-1);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsNamedParameters(),"[""public boolean supportsNamedParameters() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/SSResultSet/getBytes(java.lang.String),"[""public byte[] getBytes(String columnName) throws SQLException {"",""        return getBytes( findColumn( columnName ) );"",""    }""]"
"/smallsql/database/SSCallableStatement/getTime(int,java.util.Calendar)","[""public Time getTime(int i, Calendar cal) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method getTime() not yet implemented.\"");"",""    }""]"
/smallsql/database/ExpressionFunctionTan/getFunction(),"[""final int getFunction(){ return SQLTokenizer.TAN; }""]"
/smallsql/database/SSResultSetMetaData/getSchemaName(int),"[""public String getSchemaName(int column) throws SQLException {"",""        return null;"",""    }""]"
/smallsql/database/ExpressionFunctionBitLen/getInt(),"[""final int getInt() throws Exception {"",""        if(isNull()) return 0;"","""",""        String str = param1.getString();"",""\t\t"",""\t\treturn str.length() * BYTES_PER_CHAR * 8;"",""\t}""]"
/smallsql/database/SSStatement/executeImpl(java.lang.String),"[""final private void executeImpl(String sql) throws SQLException{"",""        checkStatement();"",""        generatedKeys = null;"",""        try{"",""            con.log.println(sql);"",""            SQLParser parser = new SQLParser();"",""            cmd = parser.parse(con, sql);"",""            if(maxRows != 0 && (cmd.getMaxRows() == -1 || cmd.getMaxRows() \> maxRows))"",""                cmd.setMaxRows(maxRows);"",""            cmd.execute(con, this);"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException(e);"",""        }"",""        needGeneratedKeys = false;"",""        generatedKeyIndexes = null;"",""        generatedKeyNames = null;"",""    }""]"
/smallsql/database/TableViewResult/deleteRow(),"[""abstract void deleteRow() throws SQLException;""]"
/smallsql/database/StoreImpl/loadUpdatedStore(),"[""/**"",""     * If the current page is only an pointer to a larger page then the larger page is loaded else it return this."",""     * @return this or the page with the valid data."",""     * @throws Exception"",""     */"",""\tfinal private StoreImpl loadUpdatedStore() throws Exception{"",""\t\tif(status != UPDATE_POINTER) return this;"",""\t\tStoreImpl storeTemp = table.getStore( ((TableStorePage)storePage).con, filePosUpdated, type);"",""\t\tstoreTemp.updatePointer = this;"",""\t\treturn storeTemp;"",""    }""]"
"/smallsql/database/TableView/load(smallsql.database.SSConnection,smallsql.database.Database,java.lang.String)","[""/**"",""\t * Load a Table or View object. "",""\t */"",""\tstatic TableView load(SSConnection con, Database database, String name) throws SQLException{"",""\t    FileChannel raFile = null;"",""\t\ttry{"",""\t\t\tString fileName = Utils.createTableViewFileName( database, name );"",""\t\t\tFile file = new File( fileName );"",""\t\t\tif(!file.exists())"",""\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_MISSING, name);"",""\t\t\traFile = Utils.openRaFile( file, database.isReadOnly() );"",""\t\t\tByteBuffer buffer = ByteBuffer.allocate(8);"",""\t\t\traFile.read(buffer);"",""\t\t\tbuffer.position(0);"",""\t\t\tint magic   = buffer.getInt();"",""\t\t\tint version = buffer.getInt();"",""\t\t\tswitch(magic){"",""\t\t\t\tcase MAGIC_TABLE:"",""\t\t\t\tcase MAGIC_VIEW:"",""\t\t\t\t\t\tbreak;"",""\t\t\t\tdefault:"",""\t\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID, fileName);"",""\t\t\t}"",""\t\t\tif(version \> TABLE_VIEW_VERSION)"",""\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOONEW, new Object[] { new Integer(version), fileName });"",""\t\t\tif(version \< TABLE_VIEW_OLD_VERSION)"",""\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOOOLD, new Object[] { new Integer(version), fileName });"",""\t\t\tif(magic == MAGIC_TABLE)"",""\t\t\t\treturn new Table( database, con, name, raFile, raFile.position(), version);"",""\t\t\t\treturn new View ( con, name, raFile, raFile.position());"",""\t\t}catch(Throwable e){"",""\t\t\tif(raFile != null)"",""\t\t\t\ttry{"",""\t\t\t\t\traFile.close();"",""\t\t\t\t}catch(Exception e2){"",""\t\t\t\t\tDriverManager.println(e2.toString());"",""\t\t\t\t}"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""\t}""]"
"/smallsql/database/SSSavepoint/SSSavepoint(int,java.lang.String,long)","[""SSSavepoint(int id, String name, long transactionTime){"",""\t\tthis.id = id;"",""\t\tthis.name = name;"",""\t\tthis.transactionTime = transactionTime;"",""\t}""]"
/smallsql/database/ExpressionFunctionCot/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return 1/Math.tan( param1.getDouble() );"",""    }""]"
/smallsql/database/Join/createJoinScrollIndex(),"[""/**"",""     * Create a ScrollJoin that based on a index. "",""     * There must not exist a index on a table. If there is no index then a index will be created."",""     * @return null if it is not possible to create a ScrollJoin based on a Index"",""     */"",""    private boolean createJoinScrollIndex() throws Exception{"",""        if(type == CROSS_JOIN){"",""            return false;"",""        }"",""        if(type != INNER_JOIN){"",""            // TODO currently only INNER JOIN are implemented"",""            return false;"",""        }"",""        if(condition instanceof ExpressionArithmetic){"",""            ExpressionArithmetic cond = (ExpressionArithmetic)condition;"",""            Expressions leftEx = new Expressions();"",""            Expressions rightEx = new Expressions();"",""            int operation = createJoinScrollIndex(cond, leftEx, rightEx, 0);"",""            if(operation != 0){"",""                scroll = new JoinScrollIndex( type, left, right, leftEx, rightEx, operation);"",""                return true;"",""            }"",""        }"",""        return false;"",""    }""]"
/smallsql/junit/TestOrderBy/testOrderBy_varchar_desc(),"[""public void testOrderBy_varchar_desc() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tString oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by v desc\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getString(\""v\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(oldValue != null && rs.next()){"",""\t\t\tString newValue = rs.getString(\""v\"");"",""\t\t\tif(newValue != null){"",""\t\t\t\tassertTrue( oldValue.compareTo( newValue ) \> 0 );"",""\t\t\t\tcount++;"",""\t\t\t}"",""\t\t\toldValue = newValue;"",""\t\t}"",""\t\tassertNull(oldValue);"",""\t\tassertFalse( rs.next() );"","""",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/RowSource/absolute(int),"[""boolean absolute(int row) throws Exception{"",""\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnString/getBoolean(),"[""final boolean getBoolean() throws Exception {"",""\t\tif(isNull()) return false;"",""\t\treturn Utils.string2boolean(getString().trim());"",""\t}""]"
/smallsql/database/SSResultSet/getUnicodeStream(int),"[""public InputStream getUnicodeStream(int columnIndex) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.getUnicodeStream method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""getUnicodeStream\"");"",""    }""]"
/smallsql/database/ExpressionFunction/createUnspportedConversion(int),"[""/**"",""     * Create a SQLException that the current function can not convert the specific data type."",""     * @param dataType A data type const from SQLTokenizer."",""     */"",""    SQLException createUnspportedConversion( int dataType ){"",""    \tObject[] params = {"",""    \t\t\tSQLTokenizer.getKeyWord(dataType),"",""    \t\t\tSQLTokenizer.getKeyWord(getFunction())"",""    \t};"",""        return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION_FUNC, params);"",""    }""]"
/smallsql/database/MemoryResult/updateRow(smallsql.database.Expression[]),"[""final void updateRow(Expression[] updateValues) throws Exception{"",""\t\tthrow SmallSQLException.create(Language.RSET_READONLY);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsSubqueriesInIns(),"[""public boolean supportsSubqueriesInIns() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/StoreImpl/readBytes(int),"[""byte[] readBytes(int length){"",""        byte[] daten = new byte[length];"",""        System.arraycopy( page, offset, daten, 0, length);"",""        offset += length;"",""        return daten;"",""    }""]"
/smallsql/database/language/Language/getEntries(),"[""public String[][] getEntries() {"",""\t\treturn MESSAGES;"",""\t}""]"
/smallsql/database/StorePageMap/transfer(smallsql.database.StorePageMap.Entry[]),"[""/** "",""\t * Transfer all entries from current table to newTable."",""\t */"",""\tfinal private void transfer(Entry[] newTable) {"",""\t\tEntry[] src = table;"",""\t\tint newCapacity = newTable.length;"",""\t\tfor (int j = 0; j \< src.length; j++) {"",""\t\t\tEntry e = src[j];"",""\t\t\tif (e != null) {"",""\t\t\t\tsrc[j] = null;"",""\t\t\t\tdo {"",""\t\t\t\t\tEntry next = e.next;"",""\t\t\t\t\te.next = null;"",""\t\t\t\t\tint i = (int)(e.key % newCapacity);"",""\t\t\t\t\t//The order for StorePages with the same key must not change "",""\t\t\t\t\t//that we need to find the end of the link list. This is different to a typical HashTable"",""\t\t\t\t\tif(newTable[i] == null){"",""\t\t\t\t\t\tnewTable[i] = e;"",""\t\t\t\t\t}else{"",""\t\t\t\t\t\tEntry entry = newTable[i];"",""\t\t\t\t\t\twhile(entry.next != null) entry = entry.next;"",""\t\t\t\t\t\tentry.next = e;"",""\t\t\t\t\t}"",""\t\t\t\t\te = next;"",""\t\t\t\t} while (e != null);"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/SQLParser/createTable(),"[""private CommandTable createTable() throws SQLException{"",""        String catalog;"",""        String tableName = catalog = nextIdentifier();"",""        tableName = nextIdentiferPart(tableName);"",""        if(tableName == catalog) catalog = null;"",""        CommandTable cmdCreate = new CommandTable( con.log, catalog, tableName, SQLTokenizer.CREATE );"",""        SQLToken token = nextToken( MISSING_PARENTHESIS_L );"","""",""        nextCol:"",""        while(true){"",""            token = nextToken( MISSING_EXPRESSION );"",""\t\t\t"",""\t\t\tString constraintName;"",""            if(token.value == SQLTokenizer.CONSTRAINT){"",""            \t// reading a CONSTRAINT with name"",""\t\t    \tconstraintName = nextIdentifier();"",""\t\t\t\ttoken = nextToken( MISSING_KEYTYPE );"",""            }else{"",""\t\t\t\tconstraintName = null;"",""            }"",""\t\t\tswitch(token.value){"",""\t\t\t\tcase SQLTokenizer.PRIMARY:"",""\t\t\t\tcase SQLTokenizer.UNIQUE:"",""\t\t\t\tcase SQLTokenizer.FOREIGN:"",""\t\t\t\t\tIndexDescription index = index(cmdCreate, token.value, tableName, constraintName, null);"",""                    if(token.value == SQLTokenizer.FOREIGN){"",""                        nextToken( MISSING_REFERENCES );"",""                        String pk = nextIdentifier();"",""                        Expressions expressions = new Expressions();"",""                        Strings columns = new Strings();"",""                        expressionDefList( cmdCreate, expressions, columns );"",""                        IndexDescription pkIndex = new IndexDescription( null, pk, SQLTokenizer.UNIQUE, expressions, columns);"",""                        ForeignKey foreignKey = new ForeignKey(pk, pkIndex, tableName, index);"",""                        cmdCreate.addForeingnKey(foreignKey);"",""                    }else{"",""                        cmdCreate.addIndex( index );"",""                    }"",""\t"",""\t\t\t\t\ttoken = nextToken( MISSING_COMMA_PARENTHESIS );"",""\t\t\t\t\tswitch(token.value){"",""\t\t\t\t\t\tcase SQLTokenizer.PARENTHESIS_R:"",""\t\t\t\t\t\t\treturn cmdCreate;"",""\t\t\t\t\t\tcase SQLTokenizer.COMMA:"",""\t\t\t\t\t\t\tcontinue nextCol;"",""\t\t\t\t\t}"",""            }"",""            // the token is a column name"",""\t\t\ttoken = addColumn( token, cmdCreate );"",""            if(token == null){"",""                throw createSyntaxError(token, MISSING_COMMA_PARENTHESIS);"",""            }"",""            switch(token.value){"",""                case SQLTokenizer.PARENTHESIS_R:"",""                    return cmdCreate;"",""                case SQLTokenizer.COMMA:"",""                    continue nextCol;"",""                default:"",""                    throw createSyntaxError(token, MISSING_COMMA_PARENTHESIS);"",""            }"",""        }"",""    }""]"
"/smallsql/database/SSPreparedStatement/setAsciiStream(int,java.io.InputStream,int)","[""public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {"",""        checkStatement();"",""\t\tcmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARCHAR, length);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsSubqueriesInExists(),"[""public boolean supportsSubqueriesInExists() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/IndexNode/getChildNodes(),"[""final IndexNode[] getChildNodes(){"",""\t\treturn nodes;"",""\t}""]"
/smallsql/database/SSCallableStatement/getURL(int),"[""public URL getURL(int parameterIndex) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method getURL() not yet implemented.\"");"",""    }""]"
/smallsql/database/MemoryResult/getRowCount(),"[""/**"",""\t * Return size of the ResultSet."",""\t */"",""\tint getRowCount(){"",""\t\treturn rowList.size();"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getNumeric(),"[""MutableNumeric getNumeric() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn new MutableNumeric(getInt());"",""\t}""]"
/smallsql/database/Table/getInserts(smallsql.database.SSConnection),"[""/**"",""     * Return a list of Links to not commited rows. The list include only the rows that are visible for "",""     * the current isolation level."",""     */"",""    List getInserts(SSConnection con){"",""\t\tsynchronized(locks){"",""\t\t\tArrayList inserts = new ArrayList();"",""\t\t\tif(con.isolationLevel \<= Connection.TRANSACTION_READ_UNCOMMITTED){"",""\t\t\t\tfor(int i=0; i\<locksInsert.size(); i++){"",""\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);"",""\t\t\t\t\tinserts.add(lock.getLink());"",""\t\t\t\t}"",""\t\t\t}else{"",""\t\t\t\tfor(int i=0; i\<locksInsert.size(); i++){"",""\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);"",""\t\t\t\t\tif(lock.con == con)"",""\t\t\t\t\t\tinserts.add(lock.getLink());"",""\t\t\t\t}"",""\t\t\t}"",""\t\t\treturn inserts;"",""\t\t}    \t"",""    }""]"
/smallsql/database/Strings/toArray(),"[""public String[] toArray() {"",""        String[] array = new String[size];"",""        System.arraycopy(data, 0, array, 0, size);"",""        return array;     "",""    }""]"
/smallsql/database/SortedResult/first(),"[""boolean first() throws Exception {"",""\t\tbeforeFirst();"",""\t\treturn next();"",""\t}""]"
/smallsql/database/ExpressionFunctionSoundex/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.SOUNDEX;"",""\t}""]"
/smallsql/database/MemoryResult/getBytes(int),"[""byte[] getBytes( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getBytes();"",""\t}""]"
/smallsql/database/ExpressionName/ExpressionName(java.lang.String),"[""// field name Expression i.e. abc, mytable.abc, \""ab c\"""",""    ExpressionName(String name){"",""\t\tsuper(NAME);"",""        setName( name );"",""    }""]"
/smallsql/database/StoreImpl/writeLong(long),"[""void writeLong( long value ){"",""    \tint newSize = offset + 8;"",""        if(newSize \> page.length) resizePage(newSize);"","""",""        page[ offset++ ] = (byte)(value \>\> 56);"",""        page[ offset++ ] = (byte)(value \>\> 48);"",""        page[ offset++ ] = (byte)(value \>\> 40);"",""        page[ offset++ ] = (byte)(value \>\> 32);"",""        page[ offset++ ] = (byte)(value \>\> 24);"",""        page[ offset++ ] = (byte)(value \>\> 16);"",""        page[ offset++ ] = (byte)(value \>\> 8);"",""        page[ offset++ ] = (byte)(value);"",""    }""]"
/smallsql/database/SSConnection/setAutoCommit(boolean),"[""public void setAutoCommit(boolean autoCommit) throws SQLException {"",""\t\tif(log.isLogging()) log.println(\""AutoCommit:\""+autoCommit);"",""    \tif(this.autoCommit != autoCommit){"",""    \t\tcommit();"",""    \t\tthis.autoCommit = autoCommit;"",""    \t}"",""    }""]"
/smallsql/database/Money/toBigDecimal(),"[""public BigDecimal toBigDecimal(){"",""\t\tif(value == 0) return ZERO;"",""\t\treturn new BigDecimal( new BigInteger( toByteArray() ), 4 );"",""\t}""]"
/smallsql/database/SSResultSet/getShort(int),"[""public short getShort(int columnIndex) throws SQLException {"",""        return (short)getInt( columnIndex );"",""    }""]"
/smallsql/database/ExpressionName/getString(),"[""String getString() throws Exception{"",""        return fromEntry.getString(colIdx);"",""    }""]"
/smallsql/database/StoreImpl/writeBoolean(boolean),"[""void writeBoolean( boolean value ){"",""    \tint newSize = offset + 1;"",""        if(newSize \> page.length) resizePage(newSize);"","""",""        page[ offset++ ] = (byte)(value ? 1 : 0);"",""    }""]"
/smallsql/database/Utils/long2int(long),"[""static int long2int(long value){"",""\t\tif(value \> Integer.MAX_VALUE)"",""\t\t\treturn Integer.MAX_VALUE;"",""\t\tif(value \< Integer.MIN_VALUE)"",""\t\t\treturn Integer.MIN_VALUE;"",""\t\treturn (int)value;"",""\t}""]"
/smallsql/junit/TestJoins/tearDown(),"[""public void tearDown() throws SQLException{"",""\t\tclear();"",""    }""]"
/smallsql/database/DataSource/isExpressionsFromThisRowSource(smallsql.database.Expressions),"[""/**"",""     * @inheritDoc"",""     */"",""\tboolean isExpressionsFromThisRowSource(Expressions columns){"",""        for(int i=0; i\<columns.size(); i++){"",""            ExpressionName expr = (ExpressionName)columns.get(i);"",""            if(this != expr.getDataSource()){"",""                return false;"",""            }"",""        }"",""        return true;"",""    }""]"
/smallsql/database/MemoryStream/verifyFreePufferSize(int),"[""private void verifyFreePufferSize(int freeSize){"",""\t\tint minSize = offset+freeSize;"",""\t\tif(minSize \< puffer.length){"",""\t\t\tint newSize = puffer.length \<\< 1;"",""\t\t\tif(newSize \< minSize) newSize = minSize;"",""\t\t\tbyte[] temp = new byte[newSize];"",""\t\t\tSystem.arraycopy(puffer, 0, temp, 0, offset);"",""\t\t\tpuffer = temp;"",""\t\t}"",""\t}""]"
"/smallsql/database/SSCallableStatement/getDate(int,java.util.Calendar)","[""public Date getDate(int i, Calendar cal) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method getDate() not yet implemented.\"");"",""    }""]"
/smallsql/database/ExpressionFunctionMod/getFunction(),"[""final int getFunction(){ return SQLTokenizer.MOD; }""]"
"/smallsql/database/SmallSQLException/create(java.lang.String,java.lang.Object[])","[""static SQLException create( String messageCode, Object[] params ) {"",""    \tString message = translateMsg(messageCode, params);"",""    \tString sqlState = language.getSqlState(messageCode);"",""        return new SmallSQLException(message, sqlState);"",""    }""]"
/smallsql/junit/BenchTest/test_UpdateLargeBinaryWithSP(java.sql.Connection),"[""/**"",""      *  12. Test"",""      *  Update large binary data with a SP."",""      */  "",""    static void test_UpdateLargeBinaryWithSP(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test update large binary data with a SP: \"" + rowCount + \""KB bytes\"");"",""        "",""        try{"",""            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\"".bin\"");"",""            byte bytes[] = new byte[1024];"",""            for(int i=0; i\<rowCount; i++){"",""                fos.write(bytes);"",""            }"",""            fos.close();"",""            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\"".bin\"");"",""            long time = -System.currentTimeMillis();"",""            Statement st = con.createStatement();"",""            st.execute(\""CREATE PROCEDURE #UpdateLargeBinary(@im image) as Update \"" + tableName + \"" set im=@im WHERE pr=2\"");"",""            PreparedStatement pr = con.prepareStatement(\""exec #UpdateLargeBinary ?\"");"",""            pr.setBinaryStream( 1, fis, rowCount*1024 );"",""            pr.execute();"",""            st.execute(\""DROP PROCEDURE #UpdateLargeBinary\"");"",""            st.close();"",""            pr.close();"",""            time += System.currentTimeMillis();"",""            System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            fis.close();"",""            java.io.File file = new java.io.File(tableName+\"".bin\"");"",""            file.delete();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getObject(),"[""Object getObject() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn Utils.getInteger(getInt());"",""\t}""]"
"/smallsql/database/ExpressionArithmetic/getDataType(int,int)","[""/**"",""     * Returns the higher level data type from 2 data types. "",""     */"",""\tstatic int getDataType(int typeLeft, int typeRight){"",""\t\tif(typeLeft == typeRight) return typeLeft;"","""",""\t\tint dataTypeIdx = Math.min( Utils.indexOf( typeLeft, DatatypeRange), Utils.indexOf( typeRight, DatatypeRange) );"",""\t\tif(dataTypeIdx \< 0) throw new Error(\""getDataType(): \""+typeLeft+\"", \""+typeRight);"",""\t\treturn DatatypeRange[ dataTypeIdx ];"",""    }""]"
/smallsql/database/Where/next(),"[""final boolean next() throws Exception {"",""        boolean oldIsCurrentRow = isCurrentRow;"",""\t\tdo{"",""\t\t\tisCurrentRow = rowSource.next();"",""\t\t}while(isCurrentRow && !isValidRow());"",""\t\tif(oldIsCurrentRow || isCurrentRow) row++;"",""\t\treturn isCurrentRow;"",""\t}""]"
/smallsql/junit/TestMoneyRounding/setUp(),"[""public void setUp() throws SQLException{"",""        tearDown();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tst.execute(\""create table \"" + table + \""(a money, b smallmoney)\"");"",""    }""]"
/smallsql/database/ExpressionFunctionChar/getPrecision(),"[""final int getPrecision(){"",""\t\treturn 1;"",""\t}""]"
/smallsql/junit/TestAlterTable2/testWithPrimaryKey(),"[""public void testWithPrimaryKey() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.execute(\""create table \""+table+\"" (keyField varchar(2) primary key)\"");"",""        st.execute(\""alter table \""+table+\"" add anotherField varchar(4)\"");"",""        ResultSet rs = st.executeQuery(\""Select * From \"" + table);"",""        assertRSMetaData( rs, new String[]{\""keyField\"", \""anotherField\""},  new int[]{Types.VARCHAR, Types.VARCHAR} );"",""        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );"",""        assertRowCount( 1, rs );"",""    }""]"
/smallsql/database/MutableNumeric/MutableNumeric(java.lang.String),"[""MutableNumeric(String val){"",""        this( new BigDecimal( val ) );"",""    }""]"
/smallsql/junit/TestDBMetaData/testGetgetUDTs(),"[""public void testGetgetUDTs() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        ResultSet rs = md.getUDTs(null, null, null, null);"",""        String[] colNames = {\""TYPE_CAT\"", \""TYPE_SCHEM\"", \""TYPE_NAME\"", \""CLASS_NAME\"", \""DATA_TYPE\"", \""REMARKS\""};"",""        int[] colTypes = new int[colNames.length];"",""        assertRSMetaData( rs, colNames, colTypes);"",""        assertFalse(rs.next());"",""    }""]"
/smallsql/database/Money/equals(java.lang.Object),"[""public boolean equals(Object obj){"",""        return (obj instanceof Money && ((Money)obj).value == value);"",""    }""]"
/smallsql/database/SQLParser/insert(),"[""private Command insert() throws SQLException{"",""        SQLToken token = nextToken( MISSING_INTO );"",""        CommandInsert cmd = new CommandInsert( con.log, nextIdentifier() );"","""",""\t\tint parthesisCount = 0;"","""",""\t\ttoken = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);"",""        if(token.value == SQLTokenizer.PARENTHESIS_L){"",""        \ttoken = nextToken(MISSING_EXPRESSION);"",""        \tif(token.value == SQLTokenizer.SELECT){"",""\t\t\t\tparthesisCount++;"",""\t\t\t\tcmd.noColumns = true;"",""        \t}else{"",""\t\t\t\tpreviousToken();"",""\t            Expressions list = expressionParenthesisList(cmd);"",""\t            for(int i=0; i\<list.size(); i++){"",""\t                cmd.addColumnExpression( list.get( i ) );"",""\t            }"",""\t            token = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);"",""        \t}"",""        }else cmd.noColumns = true;"",""        "",""Switch: while(true)"",""        switch(token.value){"",""        \tcase SQLTokenizer.VALUES:{"",""\t            token = nextToken(MISSING_PARENTHESIS_L);"",""\t            cmd.addValues( expressionParenthesisList(cmd) );"",""\t            return cmd;"",""\t        }"",""        \tcase SQLTokenizer.SELECT:"",""        \t\tcmd.addValues( select() );"",""        \t\twhile(parthesisCount-- \> 0){"",""        \t\t\tnextToken(MISSING_PARENTHESIS_R);"",""        \t\t}"",""        \t\treturn cmd;"",""        \tcase SQLTokenizer.PARENTHESIS_L:"",""        \t\ttoken = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);"",""        \t\tparthesisCount++;"",""        \t\tcontinue Switch;"",""        \tdefault:"",""        \t\tthrow new Error();"",""        }"",""    }""]"
/smallsql/junit/BenchTest/test_DeleteAll(java.sql.Connection),"[""/**"",""      *  2. Test"",""      *  Delete all rows with a single statement."",""      */  "",""    static void test_DeleteAll(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test delete all rows: \"" + rowCount + \"" rows\"");"",""        "",""        try{"",""            long time = -System.currentTimeMillis();"",""            Statement st = con.createStatement();"",""            st.execute(\""DELETE FROM \"" + tableName);"",""            time += System.currentTimeMillis();"",""            System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            st.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
/smallsql/junit/TestDBMetaData/testGetTypeInfo(),"[""public void testGetTypeInfo() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        "",""        ResultSet rs = md.getTypeInfo();  "",""        "",""        String[] colNames = {\""TYPE_NAME\"", \""DATA_TYPE\"", \""PRECISION\"", \""LITERAL_PREFIX\"", \""LITERAL_SUFFIX\"", \""CREATE_PARAMS\"", \""NULLABLE\"", \""CASE_SENSITIVE\"", \""SEARCHABLE\"", \""UNSIGNED_ATTRIBUTE\"", \""FIXED_PREC_SCALE\"", \""AUTO_INCREMENT\"", \""LOCAL_TYPE_NAME\"", \""MINIMUM_SCALE\"", \""MAXIMUM_SCALE\"", \""SQL_DATA_TYPE\"", \""SQL_DATETIME_SUB\"", \""NUM_PREC_RADIX\""};"",""        int[] colTypes = {Types.VARCHAR, Types.SMALLINT, Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.BOOLEAN, Types.SMALLINT, Types.BOOLEAN, Types.BOOLEAN, Types.BOOLEAN, Types.NULL, Types.INTEGER, Types.INTEGER, Types.NULL, Types.NULL, Types.NULL };"",""        assertRSMetaData(rs, colNames, colTypes);"",""        "",""        assertTrue(rs.next());"",""        int lastDataType = rs.getInt(\""data_type\"");"",""        while(rs.next()){"",""            int dataType = rs.getInt(\""data_type\"");"",""            assertTrue(\""Wrong sorting order\"", dataType\>=lastDataType );"",""            lastDataType = dataType;"",""        }"",""    }""]"
"/smallsql/database/CommandCreateView/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""void executeImpl(SSConnection con, SSStatement st) throws Exception{"",""        con.getDatabase(false).createView(con, name, sql);"",""    }""]"
/smallsql/database/Expressions/indexOf(smallsql.database.Expression),"[""final int indexOf(Expression expr) {"",""\t\tif (expr == null) {"",""\t\t\tfor (int i = 0; i \< size; i++)"",""\t\t\t\tif (data[i]==null)"",""\t\t\t\t\treturn i;"",""\t\t} else {"",""\t\t\tfor (int i = 0; i \< size; i++)"",""\t\t\t\tif (expr.equals(data[i]))"",""\t\t\t\t\treturn i;"",""\t\t}"",""\t\treturn -1;"",""\t}""]"
/smallsql/database/MemoryResult/isLast(),"[""final boolean isLast(){"",""\t\treturn rowIdx == rowList.size() - 1 && currentRow != null;"",""\t}""]"
/smallsql/database/Expression/getLong(),"[""abstract long getLong() throws Exception;""]"
/smallsql/database/SSCallableStatement/getByte(int),"[""public byte getByte(int i) throws SQLException {"",""        return (byte)getInt( i );"",""    }""]"
/smallsql/database/SSResultSet/getFetchDirection(),"[""public int getFetchDirection(){"",""        return fetchDirection;"",""    }""]"
"/smallsql/database/SSPreparedStatement/SSPreparedStatement(smallsql.database.SSConnection,java.lang.String)","[""SSPreparedStatement( SSConnection con, String sql ) throws SQLException {"",""        this( con, sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY );"",""    }""]"
/smallsql/database/TableViewResult/createResult(smallsql.database.TableView),"[""static TableViewResult createResult(TableView tableView){"",""\t\tif(tableView instanceof Table)"",""\t\t\treturn new TableResult((Table)tableView);"",""\t\treturn new ViewResult( (View)tableView );"",""\t}""]"
"/smallsql/database/Index/removeValue(long,smallsql.database.Expressions)","[""final void removeValue( long rowOffset, Expressions expressions ) throws Exception{"",""\t\tArrayList nodeList = new ArrayList();"",""\t\tObject obj = findRows(expressions, true, nodeList);"",""\t\tif(!rootPage.getUnique()){"",""\t\t\tLongTreeList list = (LongTreeList)obj;"",""\t\t\tlist.remove(rowOffset);"",""\t\t\tif(list.getSize() \> 0) return;"",""\t\t}"",""\t\tIndexNode node = (IndexNode)nodeList.get(nodeList.size()-1);"",""\t\tnode.clearValue();"",""\t\tfor(int i = nodeList.size()-2; i \>= 0; i--){"",""\t\t\tif(!node.isEmpty())"",""\t\t\t\tbreak;"",""\t\t\tIndexNode parent = (IndexNode)nodeList.get(i);"",""\t\t\tparent.removeNode( node.getDigit() );"",""\t\t\tnode = parent;"",""\t\t}"",""\t}""]"
/smallsql/database/Expression/getAlias(),"[""final String getAlias(){ "",""\t\treturn alias; "",""\t}""]"
"/smallsql/database/SSCallableStatement/registerOutParameter(java.lang.String,int,java.lang.String)","[""public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {"",""        registerOutParameter( findParameter( parameterName ), sqlType, typeName );"",""    }""]"
/smallsql/database/SQLParser/nextToken(int[]),"[""private SQLToken nextToken( int[] validValues) throws SQLException{"",""        SQLToken token = nextToken();"",""        if(token == null) throw createSyntaxError( token, validValues);"",""        if(validValues == MISSING_EXPRESSION){"",""            return token; // an expression can be contained in every token."",""        }"",""        if(validValues == MISSING_IDENTIFIER){"",""            // the follow token are not valid identifier"",""            switch(token.value){"",""                case SQLTokenizer.PARENTHESIS_L:"",""                case SQLTokenizer.PARENTHESIS_R:"",""                case SQLTokenizer.COMMA:"",""                    throw createSyntaxError( token, validValues);"",""            }"",""            return token;"",""        }"",""        for(int i=validValues.length-1; i\>=0; i--){"",""            if(token.value == validValues[i]) return token;"",""        }"",""        throw createSyntaxError( token, validValues);"",""    }""]"
"/smallsql/database/SSPreparedStatement/setObject(int,java.lang.Object,int)","[""public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, x, -1);"",""    }""]"
/smallsql/database/Where/noRow(),"[""final void noRow() {"",""\t\trowSource.noRow();"",""\t\trow = 0;"",""\t}""]"
"/smallsql/database/Database/getColumns(smallsql.database.SSConnection,java.lang.String,java.lang.String)","[""Object[][] getColumns( SSConnection con, String tablePattern, String colPattern) throws Exception{"",""    \tList rows = new ArrayList();"",""\t\tStrings tables = getTables(tablePattern);"",""    \tfor(int i=0; i\<tables.size(); i++){"",""    \t\tString tableName = tables.get(i);"",""\t\t\ttry{"",""\t    \t\tTableView tab = getTableView( con, tableName);"",""\t    \t\tColumns cols = tab.columns;"",""\t    \t\tfor(int c=0; c\<cols.size(); c++){"",""\t    \t\t\tColumn col = cols.get(c);"",""\t\t\t\t\tObject[] row = new Object[18];"",""\t\t\t\t\trow[0] = getName(); \t\t\t//TABLE_CAT"",""\t\t\t\t\t\t\t\t   \t\t\t\t\t//TABLE_SCHEM"",""\t\t\t\t\trow[2] = tableName;\t\t\t\t//TABLE_NAME\t"",""\t\t\t\t\trow[3] = col.getName();\t\t\t//COLUMN_NAME\t"",""\t\t\t\t\trow[4] = Utils.getShort( SQLTokenizer.getSQLDataType( col.getDataType() )); //DATA_TYPE  "",""\t\t\t\t\trow[5] = SQLTokenizer.getKeyWord( col.getDataType() );\t//TYPE_NAME"",""\t\t\t\t\trow[6] = Utils.getInteger(col.getColumnSize());//COLUMN_SIZE"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//BUFFER_LENGTH"",""\t\t\t\t\trow[8] = Utils.getInteger(col.getScale());//DECIMAL_DIGITS"",""\t\t\t\t\trow[9] = Utils.getInteger(10);\t\t//NUM_PREC_RADIX"",""\t\t\t\t\trow[10]= Utils.getInteger(col.isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls); //NULLABLE"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//REMARKS"",""\t\t\t\t\trow[12]= col.getDefaultDefinition(); //COLUMN_DEF"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//SQL_DATA_TYPE"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//SQL_DATETIME_SUB"",""\t\t\t\t\trow[15]= row[6];\t\t\t\t//CHAR_OCTET_LENGTH"",""\t\t\t\t\trow[16]= Utils.getInteger(i); \t//ORDINAL_POSITION\t\t"",""\t\t\t\t\trow[17]= col.isNullable() ? \""YES\"" : \""NO\""; //IS_NULLABLE\t\t\t\t\t"",""\t\t\t\t\trows.add(row);"",""\t    \t\t}"",""\t\t\t}catch(Exception e){"",""\t\t\t\t//invalid Tables and View will not show "",""\t\t\t}"",""    \t}"",""\t\tObject[][] result = new Object[rows.size()][];"",""\t\trows.toArray(result);"",""\t\treturn result;"",""    }""]"
/smallsql/database/ExpressionValue/getDouble(),"[""double getDouble() throws Exception{"",""\t\treturn getDouble( getObject(), dataType);"",""    }""]"
/smallsql/database/SSResultSet/getFloat(int),"[""public float getFloat(int columnIndex) throws SQLException {"",""        try{"",""            Expression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""            return expr.getFloat();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/IndexScrollStatus/reset(),"[""/**"",""\t * Reset this index to start a new scan of it with nextRowoffset()"",""\t */"",""\tfinal void reset(){"",""\t\tnodeStack.clear();"",""\t\tboolean asc = (expressions.get(0).getAlias() != SQLTokenizer.DESC_STR);"",""\t\tnodeStack.push( new IndexNodeScrollStatus(rootPage, asc, true, 0) );"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsColumnAliasing(),"[""public boolean supportsColumnAliasing() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/isReadOnly(),"[""public boolean isReadOnly() {"",""    \treturn false;"",""    }""]"
"/smallsql/database/SSResultSet/updateBytes(int,byte[])","[""public void updateBytes(int columnIndex, byte[] x) throws SQLException {"",""\t\tupdateValue( columnIndex, x, SQLTokenizer.VARBINARY);"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getBoolean(),"[""final boolean getBoolean() throws Exception {"",""\t\tif(isNull()) return false;"",""\t\treturn Utils.string2boolean(getString().trim());"",""\t}""]"
"/smallsql/database/SSConnection/prepareStatement(java.lang.String,int)","[""public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {"",""        SSPreparedStatement pr = new SSPreparedStatement( this, sql);"",""        pr.setNeedGeneratedKeys(autoGeneratedKeys);"",""        return pr;"",""    }""]"
/smallsql/database/ExpressionValue/getString(),"[""String getString(){"",""        Object obj = getObject();"",""        if(obj == null) return null;"",""        if(dataType == SQLTokenizer.BIT){"",""            return (obj == Boolean.TRUE) ? \""1\"" : \""0\"";"",""        }"",""        return obj.toString();"",""    }""]"
/smallsql/database/Money/doubleValue(),"[""public double doubleValue() {"",""        return value / 10000.0;"",""    }""]"
/smallsql/database/ColumnExpression/isCaseSensitive(),"[""boolean isCaseSensitive(){"",""\t\treturn expr.isCaseSensitive();"",""\t}""]"
/smallsql/junit/TestStatement/testGetConnection(),"[""public void testGetConnection() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        "",""        assertEquals(con, st.getConnection() );"",""    }""]"
/smallsql/database/ViewResult/isAfterLast(),"[""boolean isAfterLast() throws Exception{"",""\t\treturn commandSelect.isAfterLast();"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setURL(int,java.net.URL)","[""public void setURL(int parameterIndex, URL x) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setURL() not yet implemented.\"");"",""    }""]"
"/smallsql/junit/TestTransactions/testInsertRow_Last(java.sql.Connection,boolean)","[""private void testInsertRow_Last(Connection con, boolean callLastBefore) throws Exception{"",""\t\ttry{\t\t\t"",""\t\t\tcon.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert\')\"");"","""",""\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)"",""\t\t\t\t\t\t\t\t.executeQuery(\""Select * from transactions Where 1=0\"");"",""\t\t\t"",""\t\t\tif(callLastBefore) rs.last();"",""\t\t\trs.moveToInsertRow();"",""\t\t\trs.updateString(\""v\"", \""qwert2\"");"",""\t\t\trs.insertRow();"",""\t\t\t"",""\t\t\trs.last();"",""\t\t\tassertEquals(\""qwert2\"", rs.getString(\""v\""));"",""\t\t\tassertFalse( rs.next() );"",""\t\t\tassertTrue( rs.previous() );"",""\t\t\tassertEquals(\""qwert2\"", rs.getString(\""v\""));"",""\t\t\t"",""\t\t\trs.beforeFirst();"",""\t\t\tassertTrue( rs.next() );"",""\t\t\tassertEquals(\""qwert2\"", rs.getString(\""v\""));"",""\t\t\tassertFalse( rs.next() );"","""",""\t\t}finally{"",""\t\t\ttry{"",""\t\t\t\tcon.createStatement().execute(\""Drop Table transactions\"");"",""\t\t\t}catch(Throwable e){e.printStackTrace();}"",""\t\t}"",""\t}""]"
/smallsql/database/TableResult/execute(),"[""@Override"",""    final void execute() throws Exception{"",""\t\tinsertStorePages = table.getInserts(con);"",""\t\tfirstOwnInsert = 0x4000000000000000L | insertStorePages.size();"",""\t\tmaxFileOffset = table.raFile.size();"",""        beforeFirst();"",""\t}""]"
/smallsql/database/DataSource/getDataType(int),"[""abstract int getDataType( int colIdx );""]"
/smallsql/database/CommandSelect/next(),"[""/**"",""\t * move to the next row."",""\t * @return true if the next row valid"",""\t * @throws Exception"",""\t */"",""    boolean next() throws Exception{"",""        if(maxRows \>= 0 && from.getRow() \>= maxRows){"",""        \tfrom.afterLast();"",""        \treturn false;"",""        }"",""\t\treturn from.next();"",""    }""]"
"/smallsql/database/SQLParser/expressionDefList(smallsql.database.Command,smallsql.database.Expressions,smallsql.database.Strings)","[""private void expressionDefList(Command cmd, Expressions expressions, Strings columns) throws SQLException{"",""        SQLToken token = nextToken();"",""        if(token.value != SQLTokenizer.PARENTHESIS_L) throw createSyntaxError(token, MISSING_PARENTHESIS_L );"",""        Loop:"",""        while(true){"",""            int offset = token.offset + token.length;"",""            token = nextToken();"",""            if(token != null) offset = token.offset;"",""            previousToken();  "",""            "",""            expressions.add( expression(cmd, 0) );"",""            SQLToken last = lastToken();"",""            int length = last.offset + last.length - offset;"",""            columns.add( new String( sql, offset, length ) );"","""",""            token = nextToken(MISSING_COMMA_PARENTHESIS);"",""            switch(token.value){"",""                case SQLTokenizer.PARENTHESIS_R:"",""                    break Loop;"",""                case SQLTokenizer.COMMA:"",""                    continue;"",""                default:"",""                    throw new Error();"",""            }"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsDataManipulationTransactionsOnly(),"[""public boolean supportsDataManipulationTransactionsOnly() {"",""    \treturn false;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/othersInsertsAreVisible(int),"[""public boolean othersInsertsAreVisible(int type) {"",""\t\treturn supportsResultSetType(type);"",""    }""]"
"/smallsql/database/StoreNull/getFloat(int,int)","[""final float getFloat(int offset, int dataType) throws Exception {"",""\t\treturn 0;"",""\t}""]"
/smallsql/database/Money/toString(),"[""public String toString(){"",""\t\tStringBuffer buffer = new StringBuffer();"",""\t\tbuffer.append(longValue()).append(\'.\');"",""\t\tfinal long v = Math.abs(value);"",""\t\tbuffer.append( (char)((v % 10000) / 1000 + \'0\') );"",""\t\tbuffer.append( (char)((v % 1000) / 100 + \'0\') );"",""\t\tbuffer.append( (char)((v % 100) / 10 + \'0\') );"",""\t\tbuffer.append( (char)((v % 10) + \'0\') );"",""\t\t"",""        return buffer.toString();"",""    }""]"
/smallsql/database/ViewResult/getRow(),"[""int getRow() throws Exception{"",""\t\treturn commandSelect.getRow();"",""\t}""]"
/smallsql/database/UnionAll/getBitCount(),"[""private final int getBitCount(){"",""\t\tint size = dataSources.size();"",""\t\tint bitCount = 0;"",""\t\twhile(size\>0){"",""\t\t\tbitCount++;"",""\t\t\tsize \>\>= 1;"",""\t\t}"",""\t\treturn bitCount;"",""\t}""]"
/smallsql/database/Table/getStoreInsert(smallsql.database.SSConnection),"[""StoreImpl getStoreInsert( SSConnection con ) throws Exception{"",""\t\tTableStorePage storePage = requestLock( con, SQLTokenizer.INSERT, -1 );"",""        return StoreImpl.createStore( this, storePage, SQLTokenizer.INSERT, -1 );"",""    }""]"
"/smallsql/database/Table/getStore(smallsql.database.TableStorePage,int)","[""StoreImpl getStore( TableStorePage storePage, int pageOperation ) throws Exception{"",""\t\t// is used for not committed INSERT pages, a new lock is not needed"",""\t\treturn StoreImpl.recreateStore( this, storePage, pageOperation );"",""\t}""]"
/smallsql/database/StoreImpl/writeDouble(double),"[""void writeDouble(double value){"",""        writeLong( Double.doubleToLongBits(value) );"",""    }""]"
/smallsql/database/ViewResult/getInt(int),"[""int getInt(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getInt();"",""\t}""]"
/smallsql/database/ExpressionName/getDouble(),"[""double getDouble() throws Exception{"",""        return fromEntry.getDouble(colIdx);"",""    }""]"
/smallsql/database/ColumnExpression/ColumnExpression(smallsql.database.Expression),"[""ColumnExpression(Expression expr){"",""\t\tthis.expr = expr;"",""\t}""]"
"/smallsql/database/SSResultSet/updateDate(int,java.sql.Date)","[""public void updateDate(int columnIndex, Date x) throws SQLException {"",""\t\tupdateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.DATE);"",""    }""]"
/smallsql/database/IndexNode/addRoot(char),"[""/**"",""\t * Add a new root index on the position of digit at the end of the tree. "",""\t * This is needed for multi columns index at the end of the first (not last)"",""\t * column key value."",""\t * @param digit The digit must be in the range 0 between 255. "",""\t */"",""\tfinal IndexNode addRoot(char digit) throws SQLException{"",""\t\tIndexNode node = addNode(digit);"",""\t\tif(node.remainderKey != null) node.moveRemainderValue();"",""\t\treturn node.addRoot();"",""\t}""]"
/smallsql/database/MutableNumeric/setSignum(int),"[""void setSignum(int signum){"",""        this.signum = signum;"",""    }""]"
/smallsql/database/TransactionStep/commit(),"[""abstract long commit() throws SQLException;""]"
/smallsql/database/TransactionStep/freeLock(),"[""void freeLock(){/* default nothing*/}""]"
/smallsql/database/SSDatabaseMetaData/getDriverMinorVersion(),"[""public int getDriverMinorVersion() {"",""\t\treturn SSDriver.drv.getMinorVersion();"",""    }""]"
/smallsql/database/ExpressionFunctionReturnInt/getLong(),"[""final long getLong() throws Exception {"",""\t\treturn getInt();"",""\t}""]"
"/smallsql/database/Table/requestLock(smallsql.database.SSConnection,int,long)","[""/**"",""     * Request a page lock. If the request is valid then it return the StorePage. "",""     * If the lock can not be created within 5 seconds then it throw an exception."",""     * @param con The connection that request the lock"",""     * @param pageOperation The operation that should be perform"",""     * @param page The offset of the page"",""     * @return a valid StorePage"",""     * @throws Exception if a timeout occurs"",""     */"",""    final TableStorePage requestLock(SSConnection con, int pageOperation, long page) throws Exception{"",""    \tsynchronized(locks){"",""            if(raFile == null){"",""                throw SmallSQLException.create(Language.TABLE_MODIFIED, name);"",""            }"",""\t\t\tlong endTime = 0;"",""\t\t\twhile(true){"",""\t\t\t\tTableStorePage storePage = requestLockImpl( con, pageOperation, page);"",""\t\t\t\tif(storePage != null) "",""\t\t\t\t\treturn storePage; // the normal case should be the fasted"",""\t\t\t\tif(endTime == 0)"",""\t\t\t\t\tendTime = System.currentTimeMillis() + 5000;"",""\t\t\t\tlong waitTime = endTime - System.currentTimeMillis();"",""\t\t\t\tif(waitTime \<= 0)"",""\t\t\t\t\tthrow SmallSQLException.create(Language.TABLE_DEADLOCK, name);"",""\t\t\t\tlocks.wait(waitTime);"",""\t\t\t}"",""    \t}"",""    }""]"
/smallsql/database/ExpressionFunctionOctetLen/getInt(),"[""final int getInt() throws Exception {"",""        if(isNull()) return 0;"","""",""        String str = param1.getString();"",""\t\t"",""\t\treturn str.length() * BYTES_PER_CHAR;"",""\t}""]"
/smallsql/database/IndexDescription/getName(),"[""final String getName(){"",""\t\treturn name;"",""\t}""]"
"/smallsql/database/SSResultSet/updateBigDecimal(int,java.math.BigDecimal)","[""public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException {"",""\t\tupdateValue( columnIndex, x, SQLTokenizer.DECIMAL);"",""    }""]"
/smallsql/database/SmallSQLException/printStackTrace(java.io.PrintStream),"[""public void printStackTrace(PrintStream ps){"",""\t\tif(!isInit) return;"",""\t\tsuper.printStackTrace(ps);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsSchemasInIndexDefinitions(),"[""public boolean supportsSchemasInIndexDefinitions() {"",""    \treturn false;"",""    }""]"
/smallsql/database/FileIndexNode/saveRef(smallsql.database.StoreImpl),"[""@Override"",""    void saveRef(StoreImpl output) throws SQLException{"",""        if(fileOffset \< 0){"",""            save();"",""        }"",""\t\toutput.writeLong(fileOffset);"",""\t}""]"
/smallsql/database/IndexNode/clear(),"[""final void clear(){"",""\t\tnodes = EMPTY_NODES;"",""\t\tvalue = null;"",""\t\tremainderKey = null;"",""\t}""]"
/smallsql/database/UnionAll/noRow(),"[""final void noRow() {"",""\t\tcurrentDS.noRow();"",""\t\trow = 0;"",""\t}""]"
/smallsql/database/Index/bytesToBinarySortOrder(byte[]),"[""final static private char[] bytesToBinarySortOrder(byte[] value){"",""\t\tint length = value.length;"",""\t\tchar[] puffer = new char[length];"",""\t\tfor(int i=0; i\<length; i++){"",""\t\t\tpuffer[i] = (char)(value[i] & 0xFF);"",""\t\t}"",""\t\treturn puffer;"",""\t}""]"
/smallsql/database/TableView/getTimestamp(),"[""long getTimestamp(){"",""\t\treturn timestamp;"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)","[""public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException {"",""\t\ttry {"",""\t\t\tString[] colNames = {\""TABLE_CAT\"", \""TABLE_SCHEM\"", \""TABLE_NAME\"", \""NON_UNIQUE\"", \""INDEX_QUALIFIER\"", \""INDEX_NAME\"", \""TYPE\"", \""ORDINAL_POSITION\"", \""COLUMN_NAME\"", \""ASC_OR_DESC\"", \""CARDINALITY\"", \""PAGES\"", \""FILTER_CONDITION\""};"",""\t\t\tObject[][] data   = con.getDatabase(false).getIndexInfo(con, table, unique);"",""\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""\t\t} catch (Exception e) {"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
"/smallsql/database/Distinct/Distinct(smallsql.database.RowSource,smallsql.database.Expressions)","[""Distinct(RowSource rowSource, Expressions columns){"",""\t\tthis.rowSource = rowSource;"",""\t\tthis.distinctColumns = columns;"",""\t}""]"
/smallsql/database/SSConnection/getWarnings(),"[""public SQLWarning getWarnings(){"",""        return null;"",""    }""]"
/smallsql/junit/TestTokenizer/testMultiLine(),"[""public void testMultiLine() throws SQLException {"",""\t\tfinal String SQL_1 = "",""\t\t\t\""SELECT 10/2, id, SUM(myint) /* comment, \'ignore it.   \\n\"" +"",""\t\t\t\"" */ FROM /* -- comment */\"" + TABLE_NAME + \"" -- my comment /* \\n\\r\"" +"",""\t\t\t\"" /* comment */ GROUP BY id ORDER BY id\\r\"" +"",""\t\t\t\""/* comment */ -- somment\\r\\n\"";"","""",""\t\tsuccessTest(SQL_1);"",""\t\t"",""\t\tfinal String SQL_2 = "",""\t\t\t\""SELECT 10/2 / * this must fail */\"";"",""\t\t"",""\t\tfailureTest(SQL_2, \""Tokenized not-comment as a multiline-comment.\"");"","""",""\t\tfinal String SQL_3 = "",""\t\t\t\""SELECT 10/2 /* this must fail \"";"",""\t\t"",""\t\tfailureTest(SQL_3, "",""\t\t\t\t\""Uncomplete end multiline comment not recognized.\"","",""\t\t\t\t\""Missing end comment mark\"");"",""\t}""]"
/smallsql/database/CommandCreateView/addColumn(smallsql.database.Column),"[""/**"",""     * Add a column definition. This is used from the SQLParser."",""     * @see SQLParser#createTable"",""     */"",""\tvoid addColumn( Column column ){"",""\t\tcolumns.add( column );"",""\t}""]"
/smallsql/database/ExpressionFunctionDayOfMonth/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.DAYOFMONTH;"",""\t}""]"
/smallsql/database/Columns/Columns(),"[""Columns(){"",""\t\tdata = new Column[16];"",""\t}""]"
/smallsql/database/ExpressionName/getFloat(),"[""float getFloat() throws Exception{"",""        return fromEntry.getFloat(colIdx);"",""    }""]"
/smallsql/database/Command/Command(smallsql.database.Logger),"[""Command(Logger log){"",""    \tthis.log = log;"",""\t\tthis.columnExpressions = new Expressions();"",""    }""]"
/smallsql/database/Distinct/rowDeleted(),"[""final boolean rowDeleted() {"",""\t\treturn rowSource.rowDeleted();"",""\t}""]"
/smallsql/database/ExpressionFunctionRTrim/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull();"",""\t}""]"
"/smallsql/database/Utils/createIdxFileName(smallsql.database.Database,java.lang.String)","[""static String createIdxFileName(Database database, String name){"",""\t\treturn database.getName() + \'/\' + name + IDX_EXTENTION;"",""\t}""]"
/smallsql/database/IndexNode/addNode(char),"[""/**"",""\t * Add a node in the middle of a key value."",""\t * @param digit The digit must be in the range 0 between 255. "",""\t */"",""\tfinal IndexNode addNode(char digit) throws SQLException{"",""\t\tif(remainderKey != null) moveRemainderValue();"",""\t\tint pos = findNodePos( digit );"",""\t\tif(pos == -1){"",""\t\t\tIndexNode node = createIndexNode(unique, digit);"",""\t\t\tsaveNode( node );"",""\t\t\treturn node;"",""\t\t}else{"",""\t\t\treturn nodes[pos];"",""\t\t}"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/ownDeletesAreVisible(int),"[""public boolean ownDeletesAreVisible(int type) {"",""\t\treturn supportsResultSetType(type);"",""    }""]"
/smallsql/database/MutableFloat/longValue(),"[""public long longValue() {"",""\t\treturn (long)value;"",""\t}""]"
/smallsql/database/ExpressionName/getColumnIndex(),"[""/**"",""\t * Get index of the column in the table"",""\t * @return"",""\t */"",""\tfinal int getColumnIndex(){"",""\t\treturn colIdx;"",""\t}""]"
"/smallsql/database/Utils/createMemoryCommandSelect(smallsql.database.SSConnection,java.lang.String[],java.lang.Object[][])","[""/**"",""     * "",""     * @param colNames"",""     * @param data"",""     * @return"",""     * @throws SQLException"",""     */"",""    static CommandSelect createMemoryCommandSelect( SSConnection con, String[] colNames, Object[][] data) throws SQLException{"",""\t\tMemoryResult source = new MemoryResult(data, colNames.length);"",""\t\tCommandSelect cmd = new CommandSelect(con.log);"",""\t\tfor(int i=0; i\<colNames.length; i++){"",""\t\t\tExpressionName expr = new ExpressionName(colNames[i]);"",""\t\t\tcmd.addColumnExpression( expr );"",""\t\t\texpr.setFrom( source, i, source.getColumn(i));"",""\t\t}"",""\t\tcmd.setSource(source);"",""\t\treturn cmd;"",""    }""]"
/smallsql/junit/TestOrderBy/testOrderBy_Scollable(),"[""public void testOrderBy_Scollable() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""\t\tResultSet rs;"",""\t\tint count;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by v\"");"",""\t\t"",""\t\t//jetzt irgendwo in die Mitte scrollen"",""\t\trs.next();"",""\t\trs.next();"",""\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen"",""\t\t"",""\t\trs.last();"",""\t\tcount = 0;"",""\t\twhile(rs.previous()) count++;\t\t"",""\t\tassertEquals( valueCount, count );"","""",""\t\trs.beforeFirst();"",""\t\tcount = -1;"",""\t\twhile(rs.next()) count++;\t\t"",""\t\tassertEquals( valueCount, count );"","""",""\t\trs.beforeFirst();"",""\t\tcount = -1;"",""\t\twhile(rs.next()) count++;\t\t"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/StoreImpl/readTimestamp(),"[""long readTimestamp(){"",""        return readLong();"",""    }""]"
"/smallsql/database/SSCallableStatement/setURL(java.lang.String,java.net.URL)","[""public void setURL(String parameterName, URL x) throws SQLException {"",""        setURL( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/StoreImpl/isRollback(),"[""/**"",""     * If this store is a ghost because it was rollback."",""     */"",""    boolean isRollback(){"",""        return storePage.raFile == null;"",""    }""]"
/smallsql/database/ViewResult/setRowPosition(long),"[""void setRowPosition(long rowPosition) throws Exception {"",""\t\tcommandSelect.from.setRowPosition(rowPosition);"",""\t}""]"
"/smallsql/database/SortedResult/SortedResult(smallsql.database.RowSource,smallsql.database.Expressions)","[""SortedResult(RowSource rowSource, Expressions orderBy){"",""\t\tthis.rowSource = rowSource;"",""\t\tthis.orderBy = orderBy;"",""\t}""]"
/smallsql/database/ExpressionFunctionLog10/getFunction(),"[""final int getFunction(){ return SQLTokenizer.LOG10; }""]"
"/smallsql/junit/BasicTestCase/assertSQLException(java.lang.String,int,java.sql.SQLException)","[""void assertSQLException(String sqlstate, int vendorCode, SQLException ex) {"",""        StringWriter sw = new StringWriter();"",""        ex.printStackTrace(new PrintWriter(sw));"",""        assertEquals( \""Vendor Errorcode:\""+sw, vendorCode, ex.getErrorCode() );"",""        assertEquals( \""SQL State:\""+sw, sqlstate, ex.getSQLState());"",""    }""]"
/smallsql/database/ExpressionValue/getFloat(),"[""float getFloat() throws Exception{"",""\t\treturn getFloat( getObject(), dataType);"",""    }""]"
/smallsql/database/Table/writeMagic(java.nio.channels.FileChannel),"[""@Override"",""    void writeMagic(FileChannel raFile) throws Exception{"",""        ByteBuffer buffer = ByteBuffer.allocate(8);"",""        buffer.putInt(MAGIC_TABLE);"",""        buffer.putInt(TABLE_VIEW_VERSION);"",""        buffer.position(0);"",""        raFile.write(buffer);"",""\t}""]"
"/smallsql/database/CommandSet/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""void executeImpl(SSConnection con, SSStatement st) throws java.sql.SQLException {"",""        switch(type){"",""            case SQLTokenizer.LEVEL:"",""                con.isolationLevel = isolationLevel;"",""                break;"",""            case SQLTokenizer.USE:"",""            \tcon.setCatalog(name);"",""            \tbreak;"",""            default:"",""                throw new Error();"",""        }"",""    }""]"
/smallsql/junit/TestTransactions/testCommit(),"[""public void testCommit() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.setAutoCommit(false);"",""\t\t\tcon.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert\')\"");"",""\t\t\tassertRowCount( 1, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Select v From transactions\"");"",""\t\t\tassertRowCount( 2, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions Select * From transactions\"");"",""\t\t\tassertRowCount( 4, \""Select * from transactions\"");"",""\t\t\t"",""\t\t\tcon.commit();"",""\t\t\tassertRowCount( 4, \""Select * from transactions\"");"",""\t\t\t"",""\t\t}finally{"",""\t\t\ttry{"",""\t\t\t\tcon.createStatement().execute(\""Drop Table transactions\"");"",""\t\t\t}catch(Throwable e){e.printStackTrace();}"",""\t\t\tcon.setAutoCommit(true);"",""\t\t}"",""\t}""]"
"/smallsql/database/SSResultSet/updateTimestamp(java.lang.String,java.sql.Timestamp)","[""public void updateTimestamp(String columnName, Timestamp x) throws SQLException {"",""        updateTimestamp( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/SQLParser/limit(smallsql.database.CommandSelect),"[""private void limit(CommandSelect selCmd) throws SQLException{"",""        SQLToken token = nextToken(MISSING_EXPRESSION);"",""        try{"",""            int maxRows = Integer.parseInt(token.getName(sql));"",""            selCmd.setMaxRows(maxRows);"",""        }catch(NumberFormatException e){"",""            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));"",""        }"",""    }""]"
/smallsql/database/Join/getRowPosition(),"[""final long getRowPosition(){"",""\t\tif(rowPositions == null) rowPositions = new LongLongList();"",""\t\trowPositions.add( left.getRowPosition(), right.getRowPosition());"",""\t\treturn rowPositions.size()-1;"",""\t}""]"
/smallsql/database/SSResultSetMetaData/getScale(int),"[""public int getScale(int column) throws SQLException {"",""        return getColumnExpression( column ).getScale();"",""    }""]"
/smallsql/database/ExpressionFunctionLength/getInt(),"[""final int getInt() throws Exception {"",""\t\tString str = param1.getString();"",""\t\tif(str == null) return 0;"",""\t\tint length = str.length();"",""\t\twhile(length\>=0 && str.charAt(length-1) == \' \') length--;"",""\t\treturn length;"",""\t}""]"
/smallsql/database/IndexDescriptions/close(),"[""void close() throws Exception{"",""        for(int i=0; i\<size; i++){"",""            data[i].close();"",""        }"",""    }""]"
/smallsql/junit/TestDeleteUpdate/TestDeleteUpdate(java.lang.String),"[""/**"",""\t * @param name"",""\t */"",""\tpublic TestDeleteUpdate(String name) {"",""\t\tsuper(name);"",""\t}""]"
/smallsql/database/TableStorePageInsert/getLink(),"[""/**"",""\t * Return the link to this StorePage"",""\t */"",""\tfinal StorePageLink getLink(){"",""\t\treturn link;"",""\t}""]"
/smallsql/database/SortedResult/beforeFirst(),"[""void beforeFirst() throws Exception {"",""\t\tscrollStatus.reset();"",""\t\trow = 0;"",""\t\tuseSetRowPosition = false;"",""\t}""]"
"/smallsql/database/Table/requestLockImpl(smallsql.database.SSConnection,int,long)","[""/**"",""     * Request a page lock. If the request is valid then it return the StorePage. "",""     * In the other case it return null."",""     * @param page The fileOffset or -1 for a new page"",""     * @throws SQLException "",""     */"",""\tfinal private TableStorePage requestLockImpl(SSConnection con, int pageOperation, long page) throws SQLException{"",""\t\tsynchronized(locks){"",""\t\t\tif(tabLockConnection != null && tabLockConnection != con) return null;"",""\t\t\tswitch(con.isolationLevel){"",""\t\t\t\tcase Connection.TRANSACTION_SERIALIZABLE:"",""\t\t\t\t\tserializeConnections.put( con, con);"",""\t\t\t\t\tbreak;"",""\t\t\t}"",""\t\t"",""\t\t\tswitch(pageOperation){"",""\t\t\t\tcase SQLTokenizer.CREATE:{"",""\t\t\t\t\t\t// first check if another connection has a lock before creating a table lock"",""\t\t\t\t\t\tif(locks.size() \> 0){"",""\t\t\t\t\t\t\tIterator values = locks.values().iterator();"",""\t\t\t\t\t\t\twhile(values.hasNext()){"",""\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();"",""\t\t\t\t\t\t\t\tif(lock.con != con) return null;"",""\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\tfor(int i=0; i\<locksInsert.size(); i++){"",""\t\t\t\t\t\t\t//the first StorePage in the linked list must be ever TableStorePageInsert"",""\t\t\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);"",""\t\t\t\t\t\t\tif(lock.con != con) return null;"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\tif(serializeConnections.size() \> 0){"",""\t\t\t\t\t\t\tIterator values = locks.values().iterator();"",""\t\t\t\t\t\t\twhile(values.hasNext()){"",""\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();"",""\t\t\t\t\t\t\t\tif(lock.con != con) return null;"",""\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\ttabLockConnection = con;"",""\t\t\t\t\t\ttabLockCount++;"",""\t\t\t\t\t\tTableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);"",""\t\t\t\t\t\tcon.add(lock);"",""\t\t\t\t\t\treturn lock;"",""\t\t\t\t\t}"",""                case SQLTokenizer.ALTER:{"",""                    // first check if there is any lock before creating a table lock"",""                    if(locks.size() \> 0 || locksInsert.size() \> 0){"",""                        return null;"",""                    }"",""                    if(serializeConnections.size() \> 0){"",""                        Iterator values = locks.values().iterator();"",""                        while(values.hasNext()){"",""                            TableStorePage lock = (TableStorePage)values.next();"",""                            if(lock.con != con) return null;"",""                        }"",""                    }"",""                    tabLockConnection = con;"",""                    tabLockCount++;"",""                    TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);"",""                    lock.rollback();"",""                    return lock;"",""                }"",""\t\t\t\tcase SQLTokenizer.INSERT:{"",""\t\t\t\t\t\t// if there are more as one Connection with a serializable lock then an INSERT is not valid"",""\t\t\t\t\t\tif(serializeConnections.size() \> 1) return null;"",""\t\t\t\t\t\tif(serializeConnections.size() == 1 && serializeConnections.get(con) == null) return null;"",""\t\t\t\t\t\tTableStorePageInsert lock = new TableStorePageInsert(con, this, LOCK_INSERT);"",""\t\t\t\t\t\tlocksInsert.add( lock );"",""\t\t\t\t\t\tcon.add(lock);"",""\t\t\t\t\t\treturn lock;"",""\t\t\t\t\t}"",""\t\t\t\tcase SQLTokenizer.SELECT:"",""\t\t\t\tcase SQLTokenizer.UPDATE:{"",""\t\t\t\t\t\tLong pageKey = new Long(page); //TODO performance"",""\t\t\t\t\t\tTableStorePage prevLock = null;"",""\t\t\t\t\t\tTableStorePage lock = (TableStorePage)locks.get( pageKey );"",""\t\t\t\t\t\tTableStorePage usableLock = null;"",""\t\t\t\t\t\twhile(lock != null){"",""\t\t\t\t\t\t\tif(lock.con == con || "",""\t\t\t\t\t\t\t   con.isolationLevel \<= Connection.TRANSACTION_READ_UNCOMMITTED){"",""\t\t\t\t\t\t\t    usableLock = lock;"",""\t\t\t\t\t\t\t} else {"",""\t\t\t\t\t\t\t    if(lock.lockType == LOCK_WRITE){"",""\t\t\t\t\t\t\t        return null; // write lock of another Connection"",""\t\t\t\t\t\t\t    }"",""\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\tprevLock = lock;"",""\t\t\t\t\t\t\tlock = lock.nextLock;"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\tif(usableLock != null){"",""\t\t\t\t\t\t    return usableLock;"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\tlock = new TableStorePage( con, this, LOCK_NONE, page);"",""\t\t\t\t\t\tif(con.isolationLevel \>= Connection.TRANSACTION_REPEATABLE_READ || pageOperation == SQLTokenizer.UPDATE){"",""\t\t\t\t\t\t\tlock.lockType = pageOperation == SQLTokenizer.UPDATE ? LOCK_WRITE : LOCK_READ;"",""\t\t\t\t\t\t\tif(prevLock != null){"",""\t\t\t\t\t\t\t    prevLock.nextLock = lock.nextLock;"",""\t\t\t\t\t\t\t}else{"",""\t\t\t\t\t\t\t    locks.put( pageKey, lock );"",""\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\tcon.add(lock);"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\treturn lock;\t\t\t\t\t\t\t"",""\t\t\t\t\t}"",""\t\t\t\tcase SQLTokenizer.LONGVARBINARY:"",""\t\t\t\t\t// is used for written BLOB and CLOB"",""\t\t\t\t\t// the difference to INSERT is that page described the size of the byte buffer"",""\t\t\t\t\treturn new TableStorePage( con, this, LOCK_INSERT, -1);"",""\t\t\t\tdefault:"",""\t\t\t\t\tthrow new Error(\""pageOperation:\""+pageOperation);"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/junit/TestDBMetaData/TestDBMetaData(java.lang.String),"[""public TestDBMetaData(String arg0) {"",""\t\tsuper(arg0);"",""\t}""]"
/smallsql/junit/TestResultSet/testScrollStates(),"[""public void testScrollStates() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""        ResultSet rs = st.executeQuery(\""Select * From ResultSet Where 1=0\"");"",""        "",""        assertTrue(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertTrue(\""isAfterLast\"", rs.isAfterLast() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""        "",""        rs.moveToInsertRow();"",""        rs.insertRow();"",""        "",""        rs.beforeFirst();"",""        assertTrue(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertFalse(\""isAfterLast\"", rs.isAfterLast() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""        assertTrue(\""next\"", rs.next() );"",""        assertTrue(\""isFirst\"", rs.isFirst() );"",""        assertTrue(\""rowInserted\"", rs.rowInserted() );"",""        assertEquals(\""getRow\"", 1, rs.getRow() );"",""        assertTrue(\""isLast\"", rs.isLast() );"",""        assertFalse(\""next\"", rs.next() );"",""        assertFalse(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertTrue(\""isAfterLast\"", rs.isAfterLast() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""        "",""        assertTrue(\""first\"", rs.first() );"",""        assertEquals(\""getRow\"", 1, rs.getRow() );"",""        "",""        assertFalse(\""previous\"", rs.previous() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""        assertTrue(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertFalse(\""isAfterLast\"", rs.isAfterLast() );"",""        "",""        assertTrue(\""last\"", rs.last() );"",""        assertEquals(\""getRow\"", 1, rs.getRow() );"",""        assertTrue(\""isLast\"", rs.isLast() );"",""        "",""        rs.afterLast();"",""        assertFalse(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertTrue(\""isAfterLast\"", rs.isAfterLast() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getTableTypes(),"[""public ResultSet getTableTypes() throws SQLException {"",""\t\tString[] colNames = {\""TABLE_TYPE\""};"",""\t\tObject[][] data   = {{\""SYSTEM TABLE\""}, {\""TABLE\""}, {\""VIEW\""}};"",""\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""    }""]"
/smallsql/database/ExpressionFunctionReplace/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull() || param2.isNull() || param3.isNull();"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnFloat/getMoney(),"[""long getMoney() throws Exception{"",""        return Utils.doubleToMoney(getDouble());"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsSchemasInPrivilegeDefinitions(),"[""public boolean supportsSchemasInPrivilegeDefinitions() {"",""    \treturn false;"",""    }""]"
/smallsql/database/TableResult/getMoney(int),"[""@Override"",""    final long getMoney( int colIdx ) throws Exception{"",""        return store.getMoney( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/database/ViewResult/getNumeric(int),"[""MutableNumeric getNumeric(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getNumeric();"",""\t}""]"
/smallsql/junit/TestDBMetaData/testGetProcedureColumns(),"[""public void testGetProcedureColumns() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        ResultSet rs = md.getProcedureColumns( null, null, \""*\"", null);"",""        String[] colNames = {\""PROCEDURE_CAT\"", \""PROCEDURE_SCHEM\"", \""PROCEDURE_NAME\"", \""COLUMN_NAME\"", \""COLUMN_TYPE\"", \""DATA_TYPE\"", \""TYPE_NAME\"", \""PRECISION\"", \""LENGTH\"", \""SCALE\"", \""RADIX\"", \""NULLABLE\"", \""REMARKS\"" };"",""        int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };"",""        assertRSMetaData( rs, colNames, colTypes);"",""    }""]"
/smallsql/database/Identity/intValue(),"[""@Override"",""    public int intValue() {"",""\t\treturn (int)value;"",""\t}""]"
/smallsql/database/SortedResult/rowInserted(),"[""final boolean rowInserted(){"",""\t\treturn rowSource.rowInserted();"",""\t}""]"
/smallsql/tools/CommandLine/printRS(java.sql.ResultSet),"[""private static void printRS(ResultSet rs) throws SQLException {"",""        ResultSetMetaData md = rs.getMetaData();"",""        int count = md.getColumnCount();"",""        for(int i=1; i\<=count; i++){"",""            System.out.print(md.getColumnLabel(i));"",""            System.out.print(\'\\t\');"",""        }"",""        System.out.println();"",""        while(rs.next()){"",""            for(int i=1; i\<=count; i++){"",""                System.out.print(rs.getObject(i));"",""                System.out.print(\'\\t\');"",""            }"",""            System.out.println();"",""        }"",""    }""]"
/smallsql/database/Store/isValidPage(),"[""/**"",""\t * Get the status of the current page."",""\t * @return true if the current row valid. false if deleted or updated data."",""\t */"",""\tboolean isValidPage(){"",""\t\treturn false;"",""\t}""]"
"/smallsql/junit/TestDataTypes/checkValues(java.sql.Statement,java.lang.Object[],boolean)","[""private void checkValues(Statement st, Object[] values, boolean needTrim) throws Exception{"",""        ResultSet rs = st.executeQuery(\""SELECT * From \"" + table);"","""",""        int i = 0;"",""        while(rs.next()){"",""            assertEqualsRsValue(values[i], rs, needTrim);"",""            i++;"",""        }"",""        rs.close();"",""\t}""]"
"/smallsql/database/StoreImpl/writeExpression(smallsql.database.Expression,smallsql.database.Column)","[""/**"",""     * Here are pass only Expression instead of Objects to optimize "",""     * it for native data (no object)."",""     * The value of offset must be correctly. "",""     * @param expr the value that should be written"",""     * @param column a description of the target column"",""     * @throws Exception if any error occur like conversions or io exceptions"",""     */"",""    void writeExpression( Expression expr, Column column) throws Exception{"",""        boolean isNull = expr.isNull();"",""        if(isNull && !column.isNullable()){"",""            throw SmallSQLException.create(Language.VALUE_NULL_INVALID, column.getName());"",""        }"",""        int dataType = column.getDataType();"",""        if(isNull){"",""            writeBoolean(true); //true - is null"",""            switch(dataType){"",""                case SQLTokenizer.BIT:"",""                case SQLTokenizer.BOOLEAN:"",""                case SQLTokenizer.TINYINT:"",""                    offset++;"",""                    break;"",""                case SQLTokenizer.SMALLINT:"",""                case SQLTokenizer.BINARY:"",""                case SQLTokenizer.VARBINARY:"",""                case SQLTokenizer.CHAR:"",""                case SQLTokenizer.NCHAR:"",""                case SQLTokenizer.VARCHAR:"",""                case SQLTokenizer.NVARCHAR:"",""                    offset += 2;"",""                    break;"",""                case SQLTokenizer.INT:"",""                case SQLTokenizer.REAL:"",""                case SQLTokenizer.SMALLMONEY:"",""                case SQLTokenizer.TIME:"",""                case SQLTokenizer.DATE:"",""                case SQLTokenizer.SMALLDATETIME:"",""                    offset += 4;"",""                    break;"",""                case SQLTokenizer.BIGINT:"",""                case SQLTokenizer.FLOAT:"",""                case SQLTokenizer.DOUBLE:"",""                case SQLTokenizer.MONEY:"",""                case SQLTokenizer.JAVA_OBJECT:"",""                case SQLTokenizer.LONGVARBINARY:"",""                case SQLTokenizer.BLOB:"",""\t\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\t\tcase SQLTokenizer.NCLOB:"",""                case SQLTokenizer.LONGNVARCHAR:"",""                case SQLTokenizer.LONGVARCHAR:"",""                case SQLTokenizer.TIMESTAMP:"",""                    offset += 8;"",""                    break;"",""                case SQLTokenizer.UNIQUEIDENTIFIER:"",""                    offset += 16;"",""                    break;"",""                case SQLTokenizer.NUMERIC:"",""                case SQLTokenizer.DECIMAL:"",""                    offset += 3;"",""                    break;"",""                default: throw new Error();"",""            }"",""            return;"",""        }"",""        writeBoolean(false); // false - is not null"",""       \tcolumn.setNewAutoIncrementValue(expr);"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    writeBoolean( expr.getBoolean() );"",""                    break;"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    writeBinary( expr.getBytes(), column.getPrecision(), dataType != SQLTokenizer.BINARY );"",""                    break;"",""            case SQLTokenizer.TINYINT:"",""                    writeByte( expr.getInt() );"",""                    break;"",""            case SQLTokenizer.SMALLINT:"",""                    writeShort( expr.getInt() );"",""                    break;"",""            case SQLTokenizer.INT:"",""                    writeInt( expr.getInt() );"",""                    break;"",""            case SQLTokenizer.BIGINT:"",""                    writeLong( expr.getLong() );"",""                    break;"",""            case SQLTokenizer.REAL:"",""                    writeFloat( expr.getFloat() );"",""                    break;"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    writeDouble( expr.getDouble() );"",""                    break;"",""            case SQLTokenizer.MONEY:"",""                    writeLong( expr.getMoney() );"",""                    break;"",""            case SQLTokenizer.SMALLMONEY:"",""                    writeInt( (int)expr.getMoney() );"",""                    break;"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""            \t\tMutableNumeric numeric = expr.getNumeric();"",""            \t\tnumeric.setScale( column.getScale() );"",""                    writeNumeric( numeric );"",""                    break;"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""                    writeString( expr.getString(), column.getDisplaySize(), false );"",""                    break;"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    writeString( expr.getString(), column.getDisplaySize(), true );"",""                    break;"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    writeLongString( expr.getString() );"",""                    break;"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    // FIXME a MemoryStream can be faster because there are no additional array copy"",""                    ByteArrayOutputStream baos = new ByteArrayOutputStream();"",""                    ObjectOutputStream oos = new ObjectOutputStream(baos);"",""                    oos.writeObject( expr.getObject() );"",""                    writeLongBinary( baos.toByteArray() );"",""                    break;"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    writeLongBinary( expr.getBytes() );"",""                    break;"",""            case SQLTokenizer.TIMESTAMP:"",""                    writeTimestamp( expr.getLong() );"",""                    break;"",""            case SQLTokenizer.TIME:"",""                    writeTime( expr.getLong() );"",""                    break;"",""            case SQLTokenizer.DATE:"",""                    writeDate( expr.getLong() );"",""                    break;"",""            case SQLTokenizer.SMALLDATETIME:"",""                    writeSmallDateTime( expr.getLong() );"",""                    break;"",""            case SQLTokenizer.UNIQUEIDENTIFIER:"",""\t\t\t\t\tswitch(expr.getDataType()){"",""\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:"",""\t\t\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:"",""\t\t\t\t\tcase SQLTokenizer.BLOB:"",""\t\t\t\t\t\tbyte[] bytes = expr.getBytes();"",""                        if(bytes.length != 16) throw SmallSQLException.create(Language.BYTEARR_INVALID_SIZE, String.valueOf(bytes.length));"",""                        writeBytes( bytes );"",""\t\t\t\t\tdefault:"",""                        writeBytes( Utils.unique2bytes(expr.getString()) );"",""\t\t\t\t\t}"",""                    break;"",""            default: throw new Error(String.valueOf(column.getDataType()));"",""        }"",""    }""]"
"/smallsql/database/SSResultSetMetaData/getDisplaySize(int,int,int)","[""static int getDisplaySize(int dataType, int precision, int scale){"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.BIT:"",""\t\t\t\treturn 1; // 1 and 0"",""\t\t\tcase SQLTokenizer.BOOLEAN:"",""\t\t\t\treturn 5; //true and false"",""\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\t\treturn 3;"",""\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\t\treturn 6;"",""\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\treturn 10;"",""\t\t\tcase SQLTokenizer.BIGINT:"",""            case SQLTokenizer.MONEY:"",""\t\t\t\treturn 19;"",""            case SQLTokenizer.REAL:"",""                return 13;"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\treturn 17;"",""\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""            case SQLTokenizer.LONGNVARCHAR:"",""\t\t\tcase SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.JAVA_OBJECT:"",""            case SQLTokenizer.BLOB:"",""            case SQLTokenizer.CLOB:"",""            case SQLTokenizer.NCLOB:"",""\t\t\t\treturn Integer.MAX_VALUE;"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\treturn precision + (scale\>0 ? 2 : 1);"",""\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\t\treturn 2 + precision*2;"",""            case SQLTokenizer.SMALLDATETIME:"",""                return 21;"",""\t\t\tdefault:"",""\t\t\t\treturn precision;"",""\t\t}"",""\t}""]"
/smallsql/junit/TestGroupBy/testFirst1(),"[""public void testFirst1() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Integer(1), \""Select first(id) FROM \"" + table1);"",""\t}""]"
/smallsql/database/ExpressionArithmetic/getFloat(),"[""float getFloat() throws java.lang.Exception {"",""        if(isNull()) return 0;"",""        int dataType = getDataType();"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""\t\t\t\treturn getBoolean() ? 1 : 0;"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""\t\t\t\treturn getIntImpl();"",""            case SQLTokenizer.BIGINT:"",""                return getLongImpl();"",""\t\t\tcase SQLTokenizer.REAL:"",""                return getFloatImpl();"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                return (float)getDoubleImpl();"",""        }"",""\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);"",""    }""]"
"/smallsql/database/SmallSQLException/create(java.lang.String,java.lang.Object)","[""/**"",""\t * Convenience method for passing only one parameter.\<br\>"",""\t * To create a custom message, pass Language.CUSTOM_MESSAGE as messageCode"",""\t * and the message as param0."",""\t * "",""\t * @param messageCode"",""\t *            localized message key. pass Language.CUSTOM_MESSAGE and the"",""\t *            plain message inside the parameters array to create an"",""\t *            unlocalized message."",""\t * @param param0"",""\t *            message parameter."",""\t */"",""    static SQLException create( String messageCode, Object param0 ) {"",""    \tString message = translateMsg(messageCode, new Object[] { param0 });"",""    \tString sqlState = language.getSqlState(messageCode);"",""        return new SmallSQLException(message, sqlState);"",""    }""]"
/smallsql/database/CommandInsert/addValues(smallsql.database.CommandSelect),"[""void addValues( CommandSelect cmdSel ){"",""    \tthis.cmdSel = cmdSel;"",""    }""]"
"/smallsql/database/SSCallableStatement/getTimestamp(int,java.util.Calendar)","[""public Timestamp getTimestamp(int i, Calendar cal) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method getTimestamp() not yet implemented.\"");"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getCatalogSeparator(),"[""public String getCatalogSeparator() {"",""    \treturn \"".\"";"",""    }""]"
"/smallsql/database/TableView/createFile(smallsql.database.SSConnection,smallsql.database.Database)","[""/**"",""\t * Create an empty table or view file that only include the signature."",""\t * @param database The database that the table or view should include."",""\t * @return A file handle"",""\t * @throws Exception if any error occur like"",""\t * \<li\>file exist already"",""\t * \<li\>SecurityException"",""\t */"",""\tFileChannel createFile(SSConnection con, Database database) throws Exception{"",""\t    if( database.isReadOnly() ){"",""\t        throw SmallSQLException.create(Language.DB_READONLY);"",""\t    }"",""\t\tFile file = getFile( database );"",""\t\tboolean ok = file.createNewFile();"",""\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_EXISTENT, name);"",""\t\tFileChannel raFile = Utils.openRaFile( file, database.isReadOnly() );"",""\t\tcon.add(new CreateFile(file, raFile, con, database));"",""\t\twriteMagic(raFile);"",""\t\treturn raFile;"",""\t}""]"
/smallsql/database/language/Language/getFromLocaleTree(java.lang.String),"[""/**"",""\t * Searches a language in the Locale tree, for example:\<br\>"",""\t * first \'en_UK\', then \'en\'"",""\t * "",""\t * @param localeStr"",""\t *            locale string."",""\t * @return Language instance, if found."",""\t * @throws IllegalArgumentException"",""\t *             Language not found in the tree."",""\t */"",""\tprivate static Language getFromLocaleTree(String localeStr) "",""\tthrows IllegalArgumentException {"",""\t\tString part = localeStr;"",""\t\twhile (true) {"",""\t\t\tString langClassName = Language.class.getName() + \'_\' + part;"",""\t\t\t"",""\t\t\ttry {"",""\t\t\t\treturn (Language) Class.forName(langClassName).newInstance();"",""\t\t\t}"",""\t\t\tcatch (IllegalAccessException e) {"",""\t\t\t\t assert(false): \""Internal error: must never happen.\"";"",""\t\t\t}"",""\t\t\tcatch (ClassNotFoundException e) { "",""\t\t\t\t// do nothing"",""\t\t\t}"",""\t\t\tcatch (InstantiationException e) { "",""\t\t\t\tassert(false): \""Error during Language instantiation: \"" + e.getMessage();"",""\t\t\t}"",""\t\t\t"",""\t\t\tint lastUndsc = part.lastIndexOf(\""_\"");"",""\t\t\t"",""\t\t\tif (lastUndsc \> -1) part = part.substring(0, lastUndsc);"",""\t\t\telse break;\t\t\t"",""\t\t}"",""\t\t"",""\t\tthrow new IllegalArgumentException(\""Locale not found in the tree: \"" + localeStr);"",""\t}""]"
"/smallsql/database/TableStorePageInsert/TableStorePageInsert(smallsql.database.SSConnection,smallsql.database.Table,int)","[""TableStorePageInsert(SSConnection con, Table table, int lockType){"",""\t\tsuper( con, table, lockType, -1);"",""\t\tlink.page = this;"",""\t\tlink.filePos = fileOffset;"",""\t}""]"
"/smallsql/database/SSCallableStatement/setBoolean(java.lang.String,boolean)","[""public void setBoolean(String parameterName, boolean x) throws SQLException {"",""        setBoolean( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/SSCallableStatement/findParameter(java.lang.String),"[""private int findParameter( String parameterName ){"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method findParameter() not yet implemented.\"");"",""    }""]"
"/smallsql/database/SSCallableStatement/setDouble(java.lang.String,double)","[""public void setDouble(String parameterName, double x) throws SQLException {"",""        setDouble( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getInt(),"[""int getInt() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\tswitch(interval){"",""\t\t\tcase SQLTokenizer.SQL_TSI_FRAC_SECOND:"",""\t\t\t\treturn (int)(param2.getLong() - param1.getLong());"",""\t\t\tcase SQLTokenizer.SQL_TSI_SECOND:"",""\t\t\t\treturn (int)(param2.getLong() /1000 - param1.getLong() /1000);"",""\t\t\tcase SQLTokenizer.SQL_TSI_MINUTE:"",""\t\t\t\treturn (int)(param2.getLong() /60000 - param1.getLong() /60000);"",""\t\t\tcase SQLTokenizer.SQL_TSI_HOUR:"",""\t\t\t\treturn (int)(param2.getLong() /3600000 - param1.getLong() /3600000);"",""\t\t\tcase SQLTokenizer.SQL_TSI_DAY:"",""\t\t\t\treturn (int)(param2.getLong() /86400000 - param1.getLong() /86400000);"",""\t\t\tcase SQLTokenizer.SQL_TSI_WEEK:{"",""\t\t\t\tlong day2 = param2.getLong() /86400000;"",""\t\t\t\tlong day1 = param1.getLong() /86400000;"",""\t\t\t\t// the 1. Jan 1970 is a Thursday --\> 3"",""\t\t\t\treturn (int)((day2 + 3) / 7 - (day1 + 3) / 7);"",""\t\t\t}case SQLTokenizer.SQL_TSI_MONTH:{"",""\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());"",""\t\t\t\tDateTime.Details details1 = new DateTime.Details(param1.getLong());"",""\t\t\t\treturn (details2.year * 12 + details2.month) - (details1.year * 12 + details1.month);"",""\t\t\t}"",""\t\t\tcase SQLTokenizer.SQL_TSI_QUARTER:{"",""\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());"",""\t\t\t\tDateTime.Details details1 = new DateTime.Details(param1.getLong());"",""\t\t\t\treturn (details2.year * 4 + details2.month / 3) - (details1.year * 4 + details1.month / 3);"",""\t\t\t}"",""\t\t\tcase SQLTokenizer.SQL_TSI_YEAR:{"",""\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());"",""\t\t\t\tDateTime.Details details1 = new DateTime.Details(param1.getLong());"",""\t\t\t\treturn details2.year - details1.year;"",""\t\t\t}"",""\t\t\tdefault: throw new Error();"",""\t\t}"",""\t}""]"
"/smallsql/database/StoreImpl/copyValueFrom(smallsql.database.StoreImpl,int,int)","[""void copyValueFrom( StoreImpl store, int valueOffset, int length){"",""\t\tSystem.arraycopy( store.page, valueOffset, this.page, this.offset, length);"",""\t\tthis.offset += length;"",""    }""]"
/smallsql/database/Columns/get(int),"[""final Column get(int idx){"",""\t\tif (idx \>= size)"",""\t\t\tthrow new IndexOutOfBoundsException(\""Column index: \""+idx+\"", Size: \""+size);"",""\t\treturn data[idx];"",""\t}""]"
/smallsql/junit/TestFunctions/suite(),"[""public static Test suite() throws Exception{"",""        TestSuite theSuite = new TestSuite(\""Functions\"");"",""        for(int i=0; i\<TESTS.length; i++){"",""            theSuite.addTest(new TestFunctions( TESTS[i] ) );"",""        }"",""        return theSuite;"",""    }""]"
/smallsql/junit/TestOrderBy/testOrderBy_char(),"[""public void testOrderBy_char() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tString oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by c\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = rs.getString(\""c\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getString(\""c\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tString newValue = rs.getString(\""c\"");"",""\t\t\tassertTrue( oldValue + \""\<\"" + newValue, oldValue.compareTo( newValue ) \< 0 );"",""\t\t\toldValue = newValue;"",""\t\t\tcount++;"",""\t\t}"",""\t\trs.close();"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/ExpressionFunctionLog/getFunction(),"[""final int getFunction(){ return SQLTokenizer.LOG; }""]"
"/smallsql/database/SSCallableStatement/setFloat(java.lang.String,float)","[""public void setFloat(String parameterName, float x) throws SQLException {"",""        setFloat( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/SortedResult/afterLast(),"[""void afterLast() throws Exception{"",""        useSetRowPosition = false;"",""        if(sortedRowCount \> 0){"",""            scrollStatus.afterLast();"",""            scrollStatus.getRowOffset(false); //previous position"",""        }else{"",""            rowSource.beforeFirst();"",""        }"",""        row = sortedRowCount;"",""        while(next()){"",""            // scroll to the end if there inserted rows"",""        }"",""\t}""]"
"/smallsql/database/SSCallableStatement/setShort(java.lang.String,short)","[""public void setShort(String parameterName, short x) throws SQLException {"",""        setShort( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/MutableLong/doubleValue(),"[""public double doubleValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/junit/BenchTest/test_Scroll_getXXX(java.sql.Connection),"[""/**"",""      *  11. Test"",""      *  Scroll and call the getXXX methods for every columns."",""      */  "",""    static void test_Scroll_getXXX(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test scroll and call the getXXX methods for every columns: \"" + rowCount + \"" rows\"");"",""        "",""        try{"",""            Statement st = con.createStatement();"",""            long time = -System.currentTimeMillis();"",""            ResultSet rs = st.executeQuery(\""SELECT * FROM \"" + tableName);"",""            for (int i=0; i\<rowCount; i++){"",""                    rs.next();"",""\t                rs.getInt   (  1 );"",""\t                rs.getBytes (  2 );"",""\t                rs.getString(  3 );"",""\t                rs.getDate  (  4 );"",""\t                rs.getFloat (  5 );"",""\t                rs.getFloat (  6 );"",""\t                rs.getBytes (  7 );"",""\t                rs.getInt   (  8 );"",""\t                rs.getDouble(  9 );"",""\t                rs.getDouble(  10 );"",""\t                rs.getFloat (  11 );"",""\t                rs.getTime  (  12 );"",""\t                rs.getShort (  13 );"",""\t                rs.getFloat (  14 );"",""\t                rs.getString(  15 );"",""\t                rs.getString(  16 );"",""\t                rs.getByte  (  17 );"",""\t                rs.getBytes (  18 );"",""\t                rs.getString(  19 );"",""            }"",""            time += System.currentTimeMillis();"",""            System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            st.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
"/smallsql/database/SSCallableStatement/getTimestamp(java.lang.String,java.util.Calendar)","[""public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {"",""        return getTimestamp( findParameter( parameterName ), cal );"",""    }""]"
/smallsql/junit/TestAlterTable2/testAdd2Keys(),"[""public void testAdd2Keys() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.execute(\""create table \""+table+\"" (a varchar(2) unique)\"");"",""        st.execute(\""alter table \""+table+\"" add b varchar(4) primary key\"");"",""        ResultSet rs = st.executeQuery(\""Select * From \"" + table);"",""        assertRSMetaData( rs, new String[]{\""a\"", \""b\""},  new int[]{Types.VARCHAR, Types.VARCHAR} );"",""        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );"",""        assertRowCount( 2, rs );"",""    }""]"
/smallsql/database/Column/isAutoIncrement(),"[""boolean isAutoIncrement(){"",""        return identity;"",""    }""]"
"/smallsql/database/SSCallableStatement/setTimestamp(java.lang.String,java.sql.Timestamp)","[""public void setTimestamp(String parameterName, Timestamp x) throws SQLException {"",""        setTimestamp( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/Distinct/first(),"[""final boolean first() throws Exception {"",""\t\tbeforeFirst();"",""\t\treturn next();"",""\t}""]"
"/smallsql/database/SSDriver/connect(java.lang.String,java.util.Properties)","[""public Connection connect(String url, Properties info) throws SQLException{"",""        if(!acceptsURL(url)){"",""            return null;"",""        }"",""        return new SSConnection(parse(url, info));"",""    }""]"
/smallsql/database/Scrollable/isExpressionsFromThisRowSource(smallsql.database.Expressions),"[""/**"",""     * @inheritDoc"",""     */"",""    boolean isExpressionsFromThisRowSource(Expressions columns){"",""        return rowSource.isExpressionsFromThisRowSource(columns);"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/convertToString(),"[""final private String convertToString() throws Exception{"",""\t\tif(param2 != null){"",""\t\t\tint type = param1.getDataType();"",""\t\t\tswitch(type){"",""\t\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\ttype = SQLTokenizer.TIMESTAMP;"",""\t\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\treturn new DateTime( param1.getLong(), type ).toString(param2.getInt());"",""\t\t\t\tdefault:"",""\t\t\t\t\treturn param1.getString();"",""\t\t\t}"",""\t\t\t//TODO Format for MONEY, REAL and DOUBLE"",""\t\t}else"",""\t\t\treturn param1.getString();"",""\t}""]"
/smallsql/database/MutableNumeric/getImmutableObject(),"[""public Object getImmutableObject(){"",""\t\treturn toBigDecimal();"",""\t}""]"
/smallsql/database/ExpressionArithmetic/getFloatImpl(),"[""private float getFloatImpl() throws java.lang.Exception {"",""        switch(operation){"",""            case ADD: return left.getFloat() + right.getFloat();"",""            case SUB: return left.getFloat() - right.getFloat();"",""            case MUL: return left.getFloat() * right.getFloat();"",""            case DIV: return left.getFloat() / right.getFloat();"",""            case NEGATIVE:  return           - left.getFloat();"",""            case MOD:\t\treturn left.getFloat() % right.getFloat();"",""        }"",""        throw createUnspportedConversion( SQLTokenizer.REAL );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getIdentifierQuoteString(),"[""public String getIdentifierQuoteString() {"",""    \treturn \""\\\""\"";"",""    }""]"
/smallsql/database/IndexScrollStatus/getRowOffset(boolean),"[""/**"",""\t * Return the next rowOffset of this index. You need to call reset() before the first use. "",""\t * @param next if true the next rowOffset else the previous rowOffset"",""\t */"",""\tfinal long getRowOffset( boolean scroll){"",""\t\tif(longList != null){"",""\t\t\tlong rowOffset = scroll ? "",""\t\t\t\t\t\t\t\tlongList.getNext(longListEnum) : "",""\t\t\t\t\t\t\t\tlongList.getPrevious(longListEnum);"",""\t\t\tif(rowOffset \< 0){"",""\t\t\t\t// No more entries on this node"",""\t\t\t\tlongList = null;"",""\t\t\t}else{"",""\t\t\t\treturn rowOffset;"",""\t\t\t}"",""\t\t}"",""\t\twhile(true){"",""\t\t\tIndexNodeScrollStatus status = (IndexNodeScrollStatus)nodeStack.peek();"",""\t\t\tint level = status.level;"",""\t\t\tif(!status.asc ^ scroll){"",""\t\t\t\t//ASC order"",""\t\t\t\tint idx = ++status.idx;"",""\t\t\t\tif(idx == -1){"",""\t\t\t\t\tif(status.nodeValue != null){"",""\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){"",""\t\t\t\t\t\t\tlevel++;"",""\t\t\t\t\t\t\tnodeStack.push("",""\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, "",""\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), "",""\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));"",""\t\t\t\t\t\t\tcontinue;"",""\t\t\t\t\t\t}else"",""\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);"",""\t\t\t\t\t}"",""\t\t\t\t\t//There is no RowOffset in this node"",""\t\t\t\t\tidx = ++status.idx;"",""\t\t\t\t}"",""\t\t\t\tif(idx \>= status.nodes.length){"",""\t\t\t\t\t//No more nodes in this level"",""\t\t\t\t\tif(nodeStack.size() \> 1){"",""\t\t\t\t\t\tnodeStack.pop();"",""\t\t\t\t\t\tcontinue;"",""\t\t\t\t\t}else{"",""\t\t\t\t\t\t//No more RowOffsets in this Index"",""                        status.idx = status.nodes.length; //to prevent problems with scroll back after multiple calls after the end."",""\t\t\t\t\t\treturn -1;"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t\tIndexNode node = status.nodes[idx];"",""\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );"",""\t\t\t}else{"",""\t\t\t\t//DESC order"",""\t\t\t\tint idx = --status.idx;"",""\t\t\t\tif(idx == -1){"",""\t\t\t\t\tif(status.nodeValue != null){"",""\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){"",""\t\t\t\t\t\t\tlevel++;"",""\t\t\t\t\t\t\tnodeStack.push("",""\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, "",""\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), "",""\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));"",""\t\t\t\t\t\t\tcontinue;"",""\t\t\t\t\t\t}else"",""\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);"",""\t\t\t\t\t}"",""\t\t\t\t\t//There is no RowOffset in this node"",""\t\t\t\t}"",""\t\t\t\tif(idx \< 0){"",""\t\t\t\t\t//No more nodes in this level"",""\t\t\t\t\tif(nodeStack.size() \> 1){"",""\t\t\t\t\t\tnodeStack.pop();"",""\t\t\t\t\t\tcontinue;"",""\t\t\t\t\t}else{"",""\t\t\t\t\t\t//No more RowOffsets in this Index"",""\t\t\t\t\t\treturn -1;"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t\tIndexNode node = status.nodes[idx];"",""\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );"",""\t\t\t}"",""\t\t}"",""\t}""]"
"/smallsql/database/SQLParser/checkValidIdentifier(java.lang.String,smallsql.database.SQLToken)","[""private void checkValidIdentifier(String name, SQLToken token) throws SQLException{"",""        if(token.value == SQLTokenizer.ASTERISK) return;"",""        if(token.value != SQLTokenizer.VALUE &&"",""\t\t   token.value != SQLTokenizer.IDENTIFIER &&"",""           token.value \< 200){"",""            throw createSyntaxError( token, Language.STXADD_IDENT_EXPECT);"",""        }"",""        if(name.length() == 0) {"",""            throw createSyntaxError( token, Language.STXADD_IDENT_EMPTY, name);"",""        }"",""        char firstChar = name.charAt(0);"",""\t\tif(firstChar != \'#\' && firstChar \< \'@\') {"",""\t\t\tthrow createSyntaxError( token, Language.STXADD_IDENT_WRONG, name );"",""\t\t}"",""    }""]"
"/smallsql/database/IndexDescription/init(smallsql.database.Database,smallsql.database.TableView)","[""/**"",""\t * Create a binding of the columns form this index to the columns of the table."",""\t * @param database "",""\t * @param tableView"",""\t * @see IndexDescriptions#setTableView"",""\t */"",""\tfinal void init(Database database, TableView tableView)/* throws Exception*/{"",""\t\tint size = tableView.columns.size();"",""\t\tmatrix = new int[size];"",""\t\tfor(int i=0; i\<matrix.length; i++){"",""\t\t\tmatrix[i] = -1;"",""\t\t}"",""\t\t"",""\t\tfor(int i=0; i\<columns.size(); i++){"",""\t\t\tmatrix[tableView.findColumnIdx(columns.get(i))] = i;"",""\t\t}"",""\t}""]"
"/smallsql/database/SSCallableStatement/setAsciiStream(java.lang.String,java.io.InputStream,int)","[""public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {"",""        setAsciiStream( findParameter( parameterName ), x, length );"",""    }""]"
/smallsql/database/ExpressionName/isDefinitelyWritable(),"[""boolean isDefinitelyWritable(){"",""\t\treturn true;"",""\t}""]"
/smallsql/database/ViewResult/absolute(int),"[""boolean absolute(int row) throws Exception{"",""\t\treturn commandSelect.absolute(row);"",""\t}""]"
/smallsql/junit/TestOrderBy/testVarcharEmpty(),"[""public void testVarcharEmpty() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table3 + \"" ORDER  by vc\"");"",""\t\t"",""\t\tassertTrue( rs.next() );\t\t"",""\t\tassertNull( rs.getObject(\""vc\"") );"","""",""\t\tassertTrue( rs.next() );"",""\t\tassertEquals( \""\"", rs.getObject(\""vc\"") );"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\tassertEquals( table3, rs.getObject(\""vc\"") );"",""\t\t"",""\t\tassertFalse( rs.next() );"",""\t}""]"
"/smallsql/database/SSCallableStatement/setInt(java.lang.String,int)","[""public void setInt(String parameterName, int x) throws SQLException {"",""        setInt( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/StoreImpl/isValidPage(),"[""@Override"",""    boolean isValidPage(){"",""\t\treturn status == NORMAL || (status == UPDATED_PAGE && updatePointer != null); "",""\t}""]"
/smallsql/database/Utils/float2bytes(float),"[""static byte[] float2bytes( float value ){"",""        return int2bytes(Float.floatToIntBits(value));"",""    }""]"
/smallsql/junit/TestGroupBy/testCountWherePrepare(),"[""public void testCountWherePrepare() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tPreparedStatement pr = con.prepareStatement(\""Select count(*) FROM \"" + table1 + \"" Where id=-1234\"");"",""\t\tfor(int i=1; i\<=3; i++){"",""\t\t\tResultSet rs = pr.executeQuery();"",""\t\t\tassertTrue( \""No row produce in loop:\""+i, rs.next());\t"",""\t\t\tassertEquals( \""loop:\""+i, 0, rs.getInt(1));"",""\t\t}"",""\t}""]"
"/smallsql/junit/BasicTestCase/assertEqualsObject(java.lang.String,java.lang.Object,java.lang.Object)","[""public void assertEqualsObject( String msg, Object obj1, Object obj2 ){"",""\t\tif(obj1 instanceof byte[]){"",""\t\t\tif(!java.util.Arrays.equals( (byte[])obj1, (byte[])obj2)){"",""\t\t\t\tfail(msg + \"" expected:\"" + bytes2hex((byte[])obj1)+ \"" but was:\""+bytes2hex((byte[])obj2));"",""\t\t\t}"",""\t\t}else{ "",""\t\t\tif(obj1 instanceof BigDecimal)"",""\t\t\t\tif(((BigDecimal)obj1).compareTo((BigDecimal)obj2) == 0) return;"",""\t\t"",""\t\t\tassertEquals( msg, obj1, obj2);"",""\t\t}"",""\t}""]"
/smallsql/database/SQLParser/nextIdentiferPart(java.lang.String),"[""/**"",""     * Check if the identifier is a 2 part name with a point in the middle like FIRST.SECOND"",""     * @param name the name of the first part"",""     * @return the second part if exist else returns the first part"",""     * @throws SQLException "",""     */"",""    private String nextIdentiferPart(String name) throws SQLException{"",""        SQLToken token = nextToken();"",""        //check if the object name include a database name"",""        if(token != null && token.value == SQLTokenizer.POINT){"",""            return nextIdentifier();"",""        }else{"",""            previousToken();"",""        }"",""        return name;"",""    }""]"
"/smallsql/database/ExpressionValue/set(java.lang.Object,int,int)","[""final void set( Object value, int _dataType, int length ) throws SQLException{"",""\t\tset( value, _dataType );"",""\t\tthis.length = length;"",""\t}""]"
"/smallsql/database/Database/getReferenceKeys(smallsql.database.SSConnection,java.lang.String,java.lang.String)","[""Object[][] getReferenceKeys(SSConnection con, String pkTable, String fkTable) throws SQLException{"",""\t\tList rows = new ArrayList();"",""\t\tStrings tables = (pkTable != null) ? getTables(pkTable) : getTables(fkTable);"",""\t\tfor(int t=0; t\<tables.size(); t++){"",""    \t\tString tableName = tables.get(t);"",""    \t\tTableView tab = getTableView( con, tableName);"",""\t\t\tif(!(tab instanceof Table)) continue;"",""\t\t\tForeignKeys references = ((Table)tab).references;"",""\t\t\tfor(int i=0; i\<references.size(); i++){"",""\t\t\t\tForeignKey foreignKey = references.get(i);"",""\t\t\t\tIndexDescription pk = foreignKey.pk;"",""\t\t\t\tIndexDescription fk = foreignKey.fk;"",""\t\t\t\tif((pkTable == null || pkTable.equals(foreignKey.pkTable)) &&"",""\t\t\t\t   (fkTable == null || fkTable.equals(foreignKey.fkTable))){"",""\t\t\t\t\tStrings columnsPk = pk.getColumns();"",""\t\t\t\t\tStrings columnsFk = fk.getColumns();"",""\t\t\t\t\tfor(int c=0; c\<columnsPk.size(); c++){"",""\t\t\t\t\t\tObject[] row = new Object[14];"",""\t\t\t\t\t\trow[0] = getName();\t\t\t\t//PKTABLE_CAT"",""\t\t\t\t\t\t\t\t\t\t\t\t\t\t//PKTABLE_SCHEM"",""\t\t\t\t\t\trow[2] = foreignKey.pkTable;\t//PKTABLE_NAME"",""\t\t\t\t\t\trow[3] = columnsPk.get(c);\t\t//PKCOLUMN_NAME"",""\t\t\t\t\t\trow[4] = getName();\t\t\t\t//FKTABLE_CAT"",""\t\t\t\t\t\t\t\t\t\t\t\t\t\t//FKTABLE_SCHEM"",""\t\t\t\t\t\trow[6] = foreignKey.fkTable;\t//FKTABLE_NAME"",""\t\t\t\t\t\trow[7] = columnsFk.get(c);\t\t//FKCOLUMN_NAME"",""\t\t\t\t\t\trow[8] = Utils.getShort(c+1);\t//KEY_SEQ"",""\t\t\t\t\t\trow[9] = Utils.getShort(foreignKey.updateRule);//UPDATE_RULE"",""\t\t\t\t\t\trow[10]= Utils.getShort(foreignKey.deleteRule); //DELETE_RULE"",""\t\t\t\t\t\trow[11]= fk.getName();\t//FK_NAME"",""\t\t\t\t\t\trow[12]= pk.getName();\t//PK_NAME"",""\t\t\t\t\t\trow[13]= Utils.getShort(DatabaseMetaData.importedKeyNotDeferrable); //DEFERRABILITY"",""\t\t\t\t\t\trows.add(row);"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t}"",""\t\t}"",""\t\tObject[][] result = new Object[rows.size()][];"",""\t\trows.toArray(result);"",""\t\treturn result;\t\t"",""\t}""]"
/smallsql/database/ViewResult/init(smallsql.database.SSConnection),"[""/**"",""\t * Is used for compile() of different Commands"",""\t * "",""\t * @param con"",""\t * @return true if now init; false if already init"",""\t * @throws Exception"",""\t */"",""\tboolean init( SSConnection con ) throws Exception{"",""\t\tif(super.init(con)){"",""\t\t\tcommandSelect.compile(con);"",""\t\t\treturn true;"",""\t\t}"",""\t\treturn false;"",""\t}""]"
/smallsql/database/SSResultSet/next(),"[""public boolean next() throws SQLException {"",""\t\ttry{"",""            moveToCurrentRow();"",""            return getCmd().next();"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""\t}""]"
"/smallsql/database/StoreNull/scanObjectOffsets(int[],int[])","[""final void scanObjectOffsets(int[] offsets, int[] dataTypes) {/* there is nothing to scan */}""]"
"/smallsql/database/IndexNodeScrollStatus/IndexNodeScrollStatus(smallsql.database.IndexNode,boolean,boolean,int)","[""IndexNodeScrollStatus(IndexNode node, boolean asc, boolean scroll, int level){"",""\t\tthis.nodes = node.getChildNodes();"",""\t\tnodeValue = node.getValue();"",""\t\tthis.asc = asc;"",""\t\tthis.idx = (asc ^ scroll) ? nodes.length : -2;"",""\t\tthis.level = level;"",""\t}""]"
/smallsql/database/ExpressionFunctionDifference/isNull(),"[""boolean isNull() throws Exception {"",""        return param1.isNull() || param2.isNull();"",""    }""]"
/smallsql/database/SQLParser/execute(),"[""private Command execute() throws SQLException{"",""        //TODO Execute"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Execute\"");"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/isNull(),"[""boolean isNull() throws Exception {"",""\t\treturn param1.isNull();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsCorrelatedSubqueries(),"[""public boolean supportsCorrelatedSubqueries() {"",""\t\treturn true;"",""    }""]"
/smallsql/junit/TestExceptions/suite(),"[""public static Test suite() throws Exception{"",""        TestSuite theSuite = new TestSuite(\""Exceptions\"");"",""        for(int i=0; i\<TESTS.length; i++){"",""            theSuite.addTest(new TestExceptions( TESTS[i] ) );"",""        }"",""        return theSuite;"",""    }""]"
/smallsql/database/Expression/getObject(),"[""abstract Object getObject() throws Exception;""]"
/smallsql/database/Distinct/beforeFirst(),"[""final void beforeFirst() throws Exception {"",""\t\trowSource.beforeFirst();"",""\t\trow = 0;"",""\t}""]"
"/smallsql/database/StoreNull/getString(int,int)","[""final String getString(int offset, int dataType) throws Exception {"",""\t\treturn null;"",""\t}""]"
/smallsql/database/MemoryStream/writeChars(char[]),"[""void writeChars(char[] value){"",""\t\tverifyFreePufferSize(2*value.length);"",""\t\tfor(int i=0; i\<value.length; i++){"",""\t\t\tchar c = value[i];"",""\t\t\tpuffer[ offset++ ] = (byte)(c \>\> 8);"",""\t\t\tpuffer[ offset++ ] = (byte)(c);"",""\t\t}"",""\t}""]"
"/smallsql/database/SQLParser/expressionSingle(smallsql.database.Command,smallsql.database.SQLToken)","[""/**"",""     * This method parse a single expression like 12, \'qwert\', 0x3F or a column name."",""     * "",""     * @param cmd is needed to add parameters \""?\"" with addParameter() "",""     */"",""    private Expression expressionSingle(Command cmd, SQLToken token) throws SQLException{"",""        boolean isMinus = false;"",""        if(token != null){"",""            switch(token.value){"",""                case SQLTokenizer.NULL:"",""                        return new ExpressionValue( null, SQLTokenizer.NULL );"",""                case SQLTokenizer.STRING:"",""                        return new ExpressionValue( token.getName(null), SQLTokenizer.VARCHAR );"",""                case SQLTokenizer.IDENTIFIER:"",""                        {"",""                        String name = getIdentifier( token );"",""                        ExpressionName expr =  new ExpressionName( name );"",""                        SQLToken token2 = nextToken();"",""                        if(token2 != null && token2.value == SQLTokenizer.POINT){"",""                            expr.setNameAfterTableAlias( nextIdentifier() );"",""                        }else{"",""                            previousToken();"",""                        }"",""                        return expr;"",""                        }"",""                case SQLTokenizer.TRUE:"",""                        return new ExpressionValue( Boolean.TRUE, SQLTokenizer.BOOLEAN );"",""                case SQLTokenizer.FALSE:"",""                        return new ExpressionValue( Boolean.FALSE, SQLTokenizer.BOOLEAN );"",""                case SQLTokenizer.ESCAPE_L:{"",""                        token = nextToken(COMMANDS_ESCAPE);"",""                        SQLToken para = nextToken(MISSING_EXPRESSION);"",""                        Expression expr;"",""                        switch(token.value){"",""                            case SQLTokenizer.D: // date escape sequence"",""                            \texpr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.DATE), SQLTokenizer.DATE );"",""                            \tbreak;"",""                            case SQLTokenizer.T: // time escape sequence"",""                                expr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.TIME), SQLTokenizer.TIME );"",""                            \tbreak;"",""                            case SQLTokenizer.TS: // timestamp escape sequence"",""                                expr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.TIMESTAMP), SQLTokenizer.TIMESTAMP );"",""                            \tbreak;"",""                            case SQLTokenizer.FN: // function escape sequence"",""                            \tnextToken(MISSING_PARENTHESIS_L);"",""                            \texpr = function(cmd, para, true);"",""                            \tbreak;"",""                            case SQLTokenizer.CALL: // call escape sequence"",""                                throw new java.lang.UnsupportedOperationException(\""call escape sequence\"");"",""                            default: throw new Error();"",""                        }"",""                        token = nextToken( ESCAPE_MISSING_CLOSE );"",""                        return expr;"",""                }"",""                case SQLTokenizer.QUESTION:"",""                        ExpressionValue param = new ExpressionValue();"",""                        cmd.addParameter( param );"",""                        return param;"",""                case SQLTokenizer.CASE:"",""                \t\treturn caseExpr(cmd);"",""                case SQLTokenizer.MINUS:"",""                case SQLTokenizer.PLUS:"",""                        // sign detection"",""                        do{"",""                            if(token.value == SQLTokenizer.MINUS)"",""                                    isMinus = !isMinus;"",""                            token = nextToken();"",""                            if(token == null) throw createSyntaxError( token, MISSING_EXPRESSION );"",""                        }while(token.value == SQLTokenizer.MINUS || token.value == SQLTokenizer.PLUS);"",""                        // no Break"",""                default:"",""                        SQLToken token2 = nextToken();"",""                        if(token2 != null && token2.value == SQLTokenizer.PARENTHESIS_L){"",""                            if(isMinus)"",""                                return new ExpressionArithmetic( function( cmd, token, false ),  ExpressionArithmetic.NEGATIVE );"",""                            return function( cmd, token, false );"",""                        }else{"",""                            // constant expression or identifier"",""                            char chr1 = sql[ token.offset ];"",""\t\t\t\t\t\t\tif(chr1 == \'$\'){"",""\t\t\t\t\t\t\t\tpreviousToken();"",""\t                            String tok = new String(sql, token.offset+1, token.length-1);"",""                                if(isMinus) tok = \""-\"" + tok;"",""\t\t\t\t\t\t\t\treturn new ExpressionValue( new Money(Double.parseDouble(tok)), SQLTokenizer.MONEY );"",""\t\t\t\t\t\t\t}"",""                            String tok = new String(sql, token.offset, token.length);"",""                            if((chr1 \>= \'0\' && \'9\' \>= chr1) || chr1 == \'.\'){"",""                                previousToken();"",""                                // first character is a digit"",""                                if(token.length\>1 && (sql[ token.offset +1 ] | 0x20) == \'x\'){"",""                                    // binary data as hex"",""                                    if(isMinus) {"",""                \t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_OPER_MINUS);"",""                                    }"",""                                    return new ExpressionValue( Utils.hex2bytes( sql, token.offset+2, token.length-2), SQLTokenizer.VARBINARY );"",""                                }"",""                                if(isMinus) tok = \""-\"" + tok;"",""                                if(Utils.indexOf( \'.\', sql, token.offset, token.length ) \>= 0 ||"",""                                   Utils.indexOf( \'e\', sql, token.offset, token.length ) \>= 0){"",""                                    return new ExpressionValue( new Double(tok), SQLTokenizer.DOUBLE );"",""                                }else{"",""                                    try{"",""                                        return new ExpressionValue( new Integer(tok), SQLTokenizer.INT );"",""                                    }catch(NumberFormatException e){"",""                                        return new ExpressionValue( new Long(tok), SQLTokenizer.BIGINT );"",""                                    }"",""                                }"",""                            }else{"",""                                // identifier"",""                                checkValidIdentifier( tok, token );"",""                                ExpressionName expr = new ExpressionName(tok);"",""                                if(token2 != null && token2.value == SQLTokenizer.POINT){"",""                                    expr.setNameAfterTableAlias( nextIdentifier() );"",""                                }else{"",""                                    previousToken();"",""                                }"",""                                if(isMinus)"",""                                    return new ExpressionArithmetic( expr,  ExpressionArithmetic.NEGATIVE );"",""                                return expr;"",""                            }"",""                        }"",""            }"",""        }"",""        return null;"",""    }""]"
/smallsql/database/ExpressionFunctionUCase/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.UCASE;"",""\t}""]"
/smallsql/database/SSResultSet/getTime(java.lang.String),"[""public Time getTime(String columnName) throws SQLException {"",""        return getTime( findColumn( columnName ) );"",""    }""]"
/smallsql/database/Where/last(),"[""final boolean last() throws Exception{"",""\t\twhile(next()){/* scroll after the end */}"",""\t\treturn previous();"",""\t}""]"
"/smallsql/database/SSStatement/executeUpdate(java.lang.String,int[])","[""final public int executeUpdate(String sql, int[] columnIndexes) throws SQLException{"",""        setNeedGeneratedKeys(columnIndexes);"",""        return executeUpdate(sql);"",""    }""]"
"/smallsql/database/StoreNull/getDouble(int,int)","[""final double getDouble(int offset, int dataType) throws Exception {"",""\t\treturn 0;"",""\t}""]"
"/smallsql/database/SSResultSet/updateAsciiStream(java.lang.String,java.io.InputStream,int)","[""public void updateAsciiStream(String columnName, InputStream x, int length) throws SQLException {"",""        updateAsciiStream( findColumn( columnName ), x, length );"",""    }""]"
/smallsql/database/SSResultSet/getArray(int),"[""public Array getArray(int i) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.getArray method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Array\"");"",""    }""]"
/smallsql/database/MutableInteger/longValue(),"[""public long longValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/database/Table/write(smallsql.database.SSConnection),"[""private void write(SSConnection con) throws Exception{"",""        raFile = createFile( con, database );"",""        firstPage = 8;"",""        StoreImpl store = getStore( con, firstPage, SQLTokenizer.CREATE);"",""        int count = columns.size();"",""        store.writeInt( count );"",""        for(int i=0; i\<count; i++){"",""            store.writeColumn(columns.get(i));"",""        }"","""",""\t\t// write additional informations"",""\t\tfor(int i=0; i\<indexes.size(); i++){"",""\t\t\tIndexDescription indexDesc = indexes.get(i);"",""\t\t\tstore.writeInt( INDEX );"",""\t\t\tint offsetStart = store.getCurrentOffsetInPage();"",""\t\t\tstore.setCurrentOffsetInPage( offsetStart + 4 ); // place holder for length"",""\t\t\t"",""\t\t\t// write the IndexDescription"",""\t\t\tindexDesc.save(store);"",""\t\t\t"",""\t\t\t// write the length information"",""\t\t\tint offsetEnd = store.getCurrentOffsetInPage();"",""\t\t\tstore.setCurrentOffsetInPage( offsetStart );"",""\t\t\tstore.writeInt( offsetEnd - offsetStart);"",""\t\t\tstore.setCurrentOffsetInPage( offsetEnd );"",""\t\t}"",""\t\tstore.writeInt( 0 ); // no more additional informations"",""\t\t"",""\t\tstore.writeFinsh(null); //The connection parameter is null because the table header is written immediately."",""        firstPage = store.getNextPagePos();"",""    }""]"
/smallsql/database/RowSource/getRow(),"[""abstract int getRow() throws Exception;""]"
/smallsql/database/SSDatabaseMetaData/nullsAreSortedAtEnd(),"[""public boolean nullsAreSortedAtEnd() {"",""\t\treturn false;"",""    }""]"
/smallsql/database/UnionAll/getFloat(int),"[""final float getFloat(int colIdx) throws Exception {"",""\t\treturn currentDS.getFloat(colIdx);"",""\t}""]"
/smallsql/database/DataSource/getInt(int),"[""abstract int getInt( int colIdx ) throws Exception;""]"
/smallsql/database/SSStatement/setNeedGeneratedKeys(int[]),"[""final void setNeedGeneratedKeys(int[] columnIndexes) throws SQLException{"",""        needGeneratedKeys = columnIndexes != null;"",""        generatedKeyIndexes = columnIndexes;"",""    }""]"
/smallsql/database/MemoryResult/deleteRow(),"[""final void deleteRow() throws Exception{"",""\t\tthrow SmallSQLException.create(Language.RSET_READONLY);"",""\t}""]"
/smallsql/database/SSResultSet/getInt(java.lang.String),"[""public int getInt(String columnName) throws SQLException {"",""        return getInt( findColumn( columnName ) );"",""    }""]"
"/smallsql/database/JoinScrollIndex/JoinScrollIndex(int,smallsql.database.RowSource,smallsql.database.RowSource,smallsql.database.Expressions,smallsql.database.Expressions,int)","[""JoinScrollIndex( int joinType, RowSource left, RowSource right, Expressions leftEx, Expressions rightEx, int compare)"",""            throws Exception{"",""        super( joinType, left, right, null);"",""        this.leftEx = leftEx;"",""        this.rightEx = rightEx;"",""        this.compare = compare;"",""        createIndex(rightEx);"",""    }""]"
"/smallsql/database/SSResultSet/updateBoolean(java.lang.String,boolean)","[""public void updateBoolean(String columnName, boolean x) throws SQLException {"",""        updateBoolean( findColumn( columnName ), x );"",""    }""]"
"/smallsql/database/Database/createTable(smallsql.database.SSConnection,java.lang.String,smallsql.database.Columns,smallsql.database.IndexDescriptions,smallsql.database.IndexDescriptions,smallsql.database.ForeignKeys)","[""/**"",""     * It is used to create temp Table for ALTER TABLE and co."",""     */"",""    Table createTable(SSConnection con, String tableName, Columns columns, IndexDescriptions oldIndexes, IndexDescriptions newIndexes, ForeignKeys foreignKeys) throws Exception{"",""        checkForeignKeys( con, foreignKeys );"",""        Table table = new Table( this, con, tableName, columns, oldIndexes, newIndexes, foreignKeys);"",""        synchronized(tableViews){"",""            tableViews.put( tableName, table);"",""        }"",""        return table;"",""    }""]"
/smallsql/database/SQLParser/nextIdentifier(),"[""/**"",""     * Returns a valid identifier from the next token from token stack."",""     * @return the string with the name"",""     * @throws SQLException if the identifier is invalid"",""     */"",""    private String nextIdentifier() throws SQLException{"",""    \treturn getIdentifier( nextToken( MISSING_IDENTIFIER ) );"",""    }""]"
/smallsql/database/SQLParser/alter(),"[""private Command alter() throws SQLException{"",""    \tSQLToken tokenType = nextToken(COMMANDS_ALTER);"",""\t\tString catalog;"",""\t\tString tableName = catalog = nextIdentifier();"",""        switch(tokenType.value){"",""        case SQLTokenizer.TABLE:"",""        case SQLTokenizer.VIEW:"",""        case SQLTokenizer.INDEX:"",""        case SQLTokenizer.PROCEDURE:"",""            tableName = nextIdentiferPart(tableName);"",""            if(tableName == catalog) catalog = null;"",""        }"",""        switch(tokenType.value){"",""    \t//case SQLTokenizer.DATABASE:"",""        case SQLTokenizer.TABLE:"",""            return alterTable( catalog, tableName );"",""        //case SQLTokenizer.VIEW:"",""        //case SQLTokenizer.INDEX:"",""        //case SQLTokenizer.PROCEDURE:"",""        default:"",""    \t\tObject[] param = { \""ALTER \"" + tokenType.getName( sql ) };"",""        \tthrow SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);"",""        }"",""    }""]"
/smallsql/junit/BenchTest/test_UpdateLargeBinary(java.sql.Connection),"[""/**"",""      *  12. Test"",""      *  Update large binary data."",""      */  "",""    static void test_UpdateLargeBinary(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test update large binary data: \"" + rowCount + \""KB bytes\"");"",""        "",""        try{"",""            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\"".bin\"");"",""            byte bytes[] = new byte[1024];"",""            for(int i=0; i\<rowCount; i++){"",""                fos.write(bytes);"",""            }"",""            fos.close();"",""            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\"".bin\"");"",""            long time = -System.currentTimeMillis();"",""            PreparedStatement pr = con.prepareStatement(\""Update \"" + tableName + \"" set im=? WHERE pr=1\"");"",""            pr.setBinaryStream( 1, fis, rowCount*1024 );"",""            pr.execute();"",""            pr.close();"",""            time += System.currentTimeMillis();"",""            System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            fis.close();"",""            java.io.File file = new java.io.File(tableName+\"".bin\"");"",""            file.delete();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
/smallsql/database/Column/setDataType(int),"[""void setDataType(int dataType){"",""        this.dataType = dataType;"",""    }""]"
/smallsql/database/TableResult/getString(int),"[""@Override"",""    final String getString( int colIdx ) throws Exception{"",""        return store.getString( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/database/language/Language/getSqlState(java.lang.String),"[""public String getSqlState(String key) {"",""\t\tString sqlState = (String) sqlStates.get(key);"",""\t\tassert(sqlState != null): \""SQL State code not found: \"" + key;"",""\t\treturn sqlState;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getExtraNameCharacters(),"[""public String getExtraNameCharacters() {"",""    \treturn \""#$ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ\"";"",""    }""]"
/smallsql/database/ExpressionName/getPrecision(),"[""int getPrecision(){"",""\t\treturn column.getPrecision();"",""\t}""]"
"/smallsql/database/ExpressionValue/ExpressionValue(java.lang.Object,int)","[""/**"",""     * Constructor for static Expression i.e. 0x23, 67, 23.8, \'qwert\'"",""     */"",""    ExpressionValue(Object value, int dataType ){"",""\t\tsuper(VALUE);"",""        this.value      = value;"",""        this.dataType   = dataType;"",""    }""]"
/smallsql/database/ExpressionFunctionChar/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\tchar chr = (char)param1.getInt();"",""\t\treturn String.valueOf(chr);"",""\t}""]"
"/smallsql/database/ExpressionArithmetic/convertExpressionIfNeeded(smallsql.database.Expression,smallsql.database.Expression)","[""private Expression convertExpressionIfNeeded( Expression expr, Expression other ){"",""        if(expr == null || other == null){"",""            return expr;"",""        }"",""        switch(expr.getDataType()){"",""        case SQLTokenizer.CHAR:"",""        case SQLTokenizer.NCHAR:"",""        case SQLTokenizer.BINARY:"",""            switch(other.getDataType()){"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""            case SQLTokenizer.CLOB:"",""            case SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""            case SQLTokenizer.VARBINARY:"",""                ExpressionFunctionRTrim trim = new ExpressionFunctionRTrim();"",""                trim.setParams(new Expression[]{expr});"",""                return trim;"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.BINARY:"",""                if(other.getPrecision() \> expr.getPrecision()){"",""                    return new ExpressionFunctionConvert(new ColumnExpression(other), expr, null );"",""                }"",""                break; "",""            }"",""            break;"",""        }"",""        return expr;"",""    }""]"
/smallsql/database/MutableNumeric/toBigDecimal(),"[""public BigDecimal toBigDecimal(){"",""\t\tif(signum == 0) return new BigDecimal( BigInteger.ZERO, scale);"",""        return new BigDecimal( new BigInteger( toByteArray() ), scale );"",""    }""]"
"/smallsql/database/SSResultSet/updateDouble(java.lang.String,double)","[""public void updateDouble(String columnName, double x) throws SQLException {"",""        updateDouble( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/DateTime/isLeapYear(int),"[""/**"",""     * @return true if the year is a leap year"",""     */"",""    static boolean isLeapYear(int year){"",""        return year % 4 == 0 && (year%100 != 0 || year%400 == 0);"",""    }""]"
/smallsql/database/TableResult/getDouble(int),"[""@Override"",""    final double getDouble( int colIdx ) throws Exception{"",""        return store.getDouble( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/database/ExpressionFunction/getBytes(),"[""byte[] getBytes() throws Exception{"",""        return ExpressionValue.getBytes(getObject(), getDataType());"",""    }""]"
/smallsql/database/DateTime/calcMillis(smallsql.database.DateTime.Details),"[""static long calcMillis(Details details){"",""\t\treturn calcMillis(details.year, details.month, details.day, details.hour, details.minute, details.second, details.millis);"",""\t}""]"
/smallsql/database/SSCallableStatement/getBytes(int),"[""public byte[] getBytes(int i) throws SQLException {"",""        try{"",""            byte[] obj = getValue(i).getBytes();"",""            wasNull = obj == null;"",""            return obj;"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SortedResult/rowDeleted(),"[""final boolean rowDeleted(){"",""\t\treturn rowSource.rowDeleted();"",""\t}""]"
/smallsql/database/Scrollable/isFirst(),"[""boolean isFirst(){"",""\t\treturn rowIdx == 0 && rowList.size()\>0;"",""\t}""]"
/smallsql/junit/TestGroupBy/testComplex(),"[""public void testComplex() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tPreparedStatement pr = con.prepareStatement(\""Select abs(sum(abs(3-id))+2) FROM \"" + table1 + \"" Group By name+\'a\' Order By \'b\'+(Name+\'a\')\"");"",""\t\tfor(int i=1; i\<=3; i++){"",""\t\t\tResultSet rs = pr.executeQuery( );"",""\t\t\tassertTrue  ( \""loop:\""+i, rs.next());"",""\t\t\tassertEquals( \""loop:\""+i, 5, rs.getInt(1));"",""\t\t\tassertTrue  ( \""loop:\""+i, rs.next());"",""\t\t\tassertEquals( \""loop:\""+i, 4, rs.getInt(1));"",""\t\t}"",""\t}""]"
/smallsql/database/SmallSQLException/stripMsg(java.lang.Throwable),"[""/**"",""\t * Strips the message out of the passed exception, if possible."",""\t */"",""\tprivate static String stripMsg(Throwable throwable) {"",""\t\tString msg = throwable.getMessage();"",""\t\tif(msg == null || msg.length() \< 30){"",""\t\t\tString msg2 = throwable.getClass().getName();"",""\t\t\tmsg2 = msg2.substring(msg2.lastIndexOf(\'.\')+1);"",""\t\t\tif(msg != null)"",""\t\t\t\tmsg2 = msg2 + \':\' + msg;"",""\t\t\treturn msg2;"",""\t\t}"",""\t\t"",""\t\treturn throwable.getMessage(); "",""\t}""]"
"/smallsql/database/SSResultSet/updateBlob(int,java.sql.Blob)","[""public void updateBlob(int columnIndex, Blob x) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.updateBlob method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Blob\"");"",""    }""]"
/smallsql/database/CommandSelect/last(),"[""/**"",""\t * Is used from ResultSet.last()."",""\t */"",""\tfinal boolean last() throws Exception{"",""\t\tif(maxRows \>= 0){"",""            if(maxRows == 0){"",""                from.beforeFirst();"",""                return false;"",""            }"",""\t\t\treturn from.absolute(maxRows);"",""\t\t}"",""\t\treturn from.last();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getCatalogTerm(),"[""public String getCatalogTerm() {"",""    \treturn \""database\"";"",""    }""]"
/smallsql/database/ViewResult/getDataType(int),"[""int getDataType(int colIdx) {"",""\t\treturn columnExpressions.get(colIdx).getDataType();"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnFloat/getString(),"[""final String getString() throws Exception{"",""        Object obj = getObject();"",""        if(obj == null) return null;"",""        return obj.toString();"",""    }""]"
"/smallsql/database/SSResultSet/updateFloat(java.lang.String,float)","[""public void updateFloat(String columnName, float x) throws SQLException {"",""        updateFloat( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/SQLParser/setTransaction(),"[""private CommandSet setTransaction() throws SQLException{"",""        SQLToken token = nextToken( MISSING_ISOLATION );"",""        token = nextToken( MISSING_LEVEL );"",""        token = nextToken( COMMANDS_TRANS_LEVEL );"",""        CommandSet cmd = new CommandSet( con.log, SQLTokenizer.LEVEL );"",""        switch(token.value){"",""            case SQLTokenizer.READ:"",""                token = nextToken( MISSING_COMM_UNCOMM );"",""                switch(token.value){"",""                    case SQLTokenizer.COMMITTED:"",""                        cmd.isolationLevel = Connection.TRANSACTION_READ_COMMITTED;"",""                        break;"",""                    case SQLTokenizer.UNCOMMITTED:"",""                        cmd.isolationLevel = Connection.TRANSACTION_READ_UNCOMMITTED;"",""                        break;"",""                    default:"",""                        throw new Error();"",""                }"",""                return cmd;"",""            case SQLTokenizer.REPEATABLE:"",""                token = nextToken( MISSING_READ );"",""                cmd.isolationLevel = Connection.TRANSACTION_REPEATABLE_READ;"",""                return cmd;"",""            case SQLTokenizer.SERIALIZABLE:"",""                cmd.isolationLevel = Connection.TRANSACTION_SERIALIZABLE;"",""                return cmd;"",""            default:"",""                throw new Error();"",""        }"","""","""",""    }""]"
"/smallsql/database/SSResultSet/updateShort(java.lang.String,short)","[""public void updateShort(String columnName, short x) throws SQLException {"",""        updateShort( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/NoFromResult/getRowPosition(),"[""final long getRowPosition() {"",""\t\treturn rowPos;"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getLong(),"[""long getLong() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\tswitch(interval){"",""\t\t\tcase SQLTokenizer.SQL_TSI_FRAC_SECOND:"",""\t\t\t\treturn param2.getLong() + param1.getLong();"",""\t\t\tcase SQLTokenizer.SQL_TSI_SECOND:"",""\t\t\t\treturn param2.getLong() + param1.getLong() * 1000;"",""\t\t\tcase SQLTokenizer.SQL_TSI_MINUTE:"",""\t\t\t\treturn param2.getLong() + param1.getLong() * 60000;"",""\t\t\tcase SQLTokenizer.SQL_TSI_HOUR:"",""\t\t\t\treturn param2.getLong() + param1.getLong() * 3600000;"",""\t\t\tcase SQLTokenizer.SQL_TSI_DAY:"",""\t\t\t\treturn param2.getLong() + param1.getLong() * 86400000;"",""\t\t\tcase SQLTokenizer.SQL_TSI_WEEK:{"",""\t\t\t\treturn param2.getLong() + param1.getLong() * 604800000;"",""\t\t\t}case SQLTokenizer.SQL_TSI_MONTH:{"",""\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());"",""\t\t\t\tdetails2.month += param1.getLong();"",""\t\t\t\treturn DateTime.calcMillis(details2);"",""\t\t\t}"",""\t\t\tcase SQLTokenizer.SQL_TSI_QUARTER:{"",""\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());"",""\t\t\t\tdetails2.month += param1.getLong() * 3;"",""\t\t\t\treturn DateTime.calcMillis(details2);"",""\t\t\t}"",""\t\t\tcase SQLTokenizer.SQL_TSI_YEAR:{"",""\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());"",""\t\t\t\tdetails2.year += param1.getLong();"",""\t\t\t\treturn DateTime.calcMillis(details2);"",""\t\t\t}"",""\t\t\tdefault: throw new Error();"",""\t\t}"",""\t\t// TODO Auto-generated method stub"",""\t}""]"
/smallsql/database/ExpressionFunctionConvert/getBoolean(),"[""boolean getBoolean() throws Exception {"",""\t\treturn ExpressionValue.getBoolean( getObject(), getDataType() );"",""\t}""]"
/smallsql/database/SSConnection/getCatalog(),"[""public String getCatalog(){"",""    \tif(database == null)"",""    \t\treturn \""\"";"",""        return database.getName();"",""    }""]"
"/smallsql/database/SSPreparedStatement/setInt(int,int)","[""public void setInt(int parameterIndex, int x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.INT);"",""    }""]"
/smallsql/junit/TestDBMetaData/testGetCrossReference(),"[""public void testGetCrossReference() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        dropTable(con,\""tblCross1\"");"",""        dropTable(con,\""tblCross2\"");"",""        DatabaseMetaData md = con.getMetaData();"",""        "",""        Statement st = con.createStatement();"",""        st.execute(\""Create Table tblCross1(id1 counter primary key, v nvarchar(100))\"");"",""        //st.execute(\""Create Table tblCross2(id2 counter foreign key REFERENCES tblCross1(id1), v nvarchar(100))\"");"",""        st.execute(\""Create Table tblCross2(id2 int , v nvarchar(100), foreign key (id2) REFERENCES tblCross1(id1))\"");"",""        String[] colNames = {\""PKTABLE_CAT\"", \""PKTABLE_SCHEM\"", \""PKTABLE_NAME\"", \""PKCOLUMN_NAME\"", \""FKTABLE_CAT\"", \""FKTABLE_SCHEM\"", \""FKTABLE_NAME\"", \""FKCOLUMN_NAME\"", \""KEY_SEQ\"", \""UPDATE_RULE\"", \""DELETE_RULE\"", \""FK_NAME\"", \""PK_NAME\"", \""DEFERRABILITY\""};"",""        int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT };"",""        "",""        ResultSet rs = md.getCrossReference(null,null,\""tblCross1\"",null,null,\""tblCross2\"");"",""        assertRSMetaData(rs, colNames, colTypes);"",""        assertTrue(rs.next());"",""        assertFalse(rs.next());"",""        "",""        rs = md.getImportedKeys(null,null,\""tblCross2\"");"",""        assertRSMetaData(rs, colNames, colTypes);"",""        assertTrue(rs.next());"",""        assertFalse(rs.next());"",""        "",""        rs = md.getExportedKeys(null,null,\""tblCross1\"");"",""        assertRSMetaData(rs, colNames, colTypes);"",""        assertTrue(rs.next());"",""        assertFalse(rs.next());"",""        "",""        dropTable(con,\""tblCross1\"");"",""        dropTable(con,\""tblCross2\"");"",""    }""]"
/smallsql/database/SSResultSet/getURL(java.lang.String),"[""public URL getURL(String columnName) throws SQLException {"",""        return getURL( findColumn( columnName ) );"",""    }""]"
/smallsql/database/ExpressionFunctionATan2/isNull(),"[""boolean isNull() throws Exception{"",""        return param1.isNull() || param2.isNull();"",""    }""]"
/smallsql/database/ExpressionFunctionFloor/getDouble(),"[""double getDouble() throws Exception{"",""        return Math.floor( param1.getDouble() );"",""    }""]"
/smallsql/database/ExpressionFunctionFloor/getString(),"[""String getString() throws Exception{"",""        Object obj = getObject();"",""        if(obj == null) return null;"",""        return obj.toString();"",""    }""]"
"/smallsql/database/StorePageMap/add(long,smallsql.database.TableStorePage)","[""/**"",""\t * Add the StorePage with the key. Multiple StorePage for the same key are valid."",""\t * The cause are multiple changes in one transaction. With SavePoints a rollback to a older"",""\t * StorePage is valid.\<p\>"",""\t * The latest StorePage is placed at first pos."",""\t */"",""\tfinal TableStorePage add(long key, TableStorePage value) {"",""\t\tint i = (int)(key % table.length);"","""",""\t\ttable[i] = new Entry(key, value, table[i]);"",""\t\tif (size++ \>= threshold) "",""\t\t\tresize(2 * table.length);"",""\t\treturn null;"",""\t}""]"
"/smallsql/database/SSResultSet/updateAsciiStream(int,java.io.InputStream,int)","[""public void updateAsciiStream(int columnIndex, InputStream x, int length) throws SQLException {"",""\t\tupdateValue( columnIndex, x, SQLTokenizer.LONGVARCHAR, length);"",""    }""]"
"/smallsql/database/SSPreparedStatement/setObject(int,java.lang.Object)","[""public void setObject(int parameterIndex, Object x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, x, -1);"",""    }""]"
/smallsql/database/SortedResult/nullRow(),"[""void nullRow() {"",""\t\trowSource.nullRow();"",""\t\trow = 0;"",""\t\t"",""\t}""]"
/smallsql/database/SSResultSetMetaData/getColumnCount(),"[""public int getColumnCount() throws SQLException {"",""        return columns.size();"",""    }""]"
/smallsql/junit/TestTokenizer/setUp(),"[""public void setUp() throws SQLException {"",""\t\tif (! init) {"",""\t\t\tconn = AllTests.createConnection(\""?locale=en\"", null);"",""\t\t\tstat = conn.createStatement();"",""\t\t\tinit = true;"",""\t\t}"",""\t\tdropTable();"",""\t\tcreateTable();"",""\t}""]"
/smallsql/database/SSConnection/prepareStatement(java.lang.String),"[""public PreparedStatement prepareStatement(String sql) throws SQLException {"",""        return new SSPreparedStatement( this, sql);"",""    }""]"
/smallsql/database/SQLParser/create(),"[""private Command create() throws SQLException{"",""        while(true){"",""            SQLToken token = nextToken(COMMANDS_CREATE);"",""            switch(token.value){"",""                case SQLTokenizer.DATABASE:"",""                    return createDatabase();"",""                case SQLTokenizer.TABLE:"",""                    return createTable();"",""                case SQLTokenizer.VIEW:"",""                    return createView();"",""                case SQLTokenizer.INDEX:"",""                    return createIndex(false);"",""                case SQLTokenizer.PROCEDURE:"",""                    return createProcedure();"",""                case SQLTokenizer.UNIQUE:"",""                    do{"",""                        token = nextToken(COMMANDS_CREATE_UNIQUE);"",""                    }while(token.value == SQLTokenizer.INDEX);"",""                    return createIndex(true);"",""                case SQLTokenizer.NONCLUSTERED:"",""                case SQLTokenizer.CLUSTERED:"",""                    continue;"",""                default:"",""                    throw createSyntaxError( token, COMMANDS_CREATE );"",""            }"",""        }"",""    }""]"
/smallsql/database/SQLParser/select(),"[""final private CommandSelect select() throws SQLException{"",""\t\tCommandSelect selCmd = singleSelect();"",""\t\tSQLToken token = nextToken();"",""\t\t   \t\t"",""    \tUnionAll union = null; "",""\t"",""\t\twhile(token != null && token.value == SQLTokenizer.UNION){"",""\t\t\tif(union == null){"",""\t\t\t\tunion = new UnionAll();"",""\t\t\t\tunion.addDataSource(new ViewResult( con, selCmd ));"",""\t\t\t\tselCmd = new CommandSelect(con.log);"",""\t\t\t\tselCmd.setSource( union );"",""\t\t\t\tDataSources from = new DataSources();"",""\t\t\t\tfrom.add(union);"",""\t\t\t\tselCmd.setTables( from );"",""\t\t\t\tselCmd.addColumnExpression( new ExpressionName(\""*\"") );"",""\t\t\t}"",""\t\t\tnextToken(MISSING_ALL);"",""\t\t\tnextToken(MISSING_SELECT);"",""\t\t\tunion.addDataSource( new ViewResult( con, singleSelect() ) );"",""\t\t\ttoken = nextToken();"",""\t\t}"",""\t\tif(token != null && token.value == SQLTokenizer.ORDER){"",""\t\t\torder( selCmd );"",""\t\t\ttoken = nextToken();"",""\t\t}"",""\t\tif(token != null && token.value == SQLTokenizer.LIMIT){"",""            limit( selCmd );"",""            token = nextToken();"",""        }"",""        previousToken();"",""\t\treturn selCmd;"",""    }""]"
/smallsql/junit/TestOther/testDistinct(),"[""public void testDistinct() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{"",""\t\t\tcon.createStatement().execute(\""Create Table TestDistinct (i counter, v varchar(20), n bigint, b boolean)\"");"",""\t\t\tassertRowCount( 0, \""Select * From TestDistinct\"" );"","""",""\t\t\tcon.createStatement().execute(\""Insert Into TestDistinct(v,b) Values(\'qwert1\',true)\"");"",""\t\t\tcon.createStatement().execute(\""Insert Into TestDistinct(v,b) Values(\'qwert2\',true)\"");"",""\t\t\tcon.createStatement().execute(\""Insert Into TestDistinct(v,b) Values(\'qwert1\',true)\"");"",""\t\t\tcon.createStatement().execute(\""Insert Into TestDistinct(v,b) Values(\'qwert2\',true)\"");"",""\t\t\tcon.createStatement().execute(\""Insert Into TestDistinct(v,b) Values(\'qwert1\',false)\"");"",""\t\t\tassertRowCount( 5, \""Select b,n,v From TestDistinct\"" );"",""\t\t\tassertRowCount( 2, \""Select Distinct v From TestDistinct t1\"" );"",""\t\t\tassertRowCount( 3, \""Select Distinct b,n,v From TestDistinct\"" );"",""\t\t\tassertRowCount( 3, \""Select Distinct b,n,v,i+null,23+i-i,\'asdf\'+v From TestDistinct\"" );"",""\t\t\tassertRowCount( 5, \""Select All b,n,v From TestDistinct\"" );"",""\t\t}finally{"",""            dropTable( con, \""TestDistinct\"" );"",""\t\t}"",""\t}""]"
/smallsql/database/NoFromResult/isExpressionsFromThisRowSource(smallsql.database.Expressions),"[""/**"",""     * @inheritDoc"",""     */"",""    boolean isExpressionsFromThisRowSource(Expressions columns){"",""        //if there are a expression in the list then it can not from this RowSource"",""        return columns.size() == 0;"",""    }""]"
/smallsql/database/ExpressionValue/getPrecision(),"[""final int getPrecision(){"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\t\treturn ((String)value).length();"",""\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\t\treturn ((byte[])value).length;"",""\t\t\tdefault: "",""\t\t\t\treturn super.getPrecision();"",""\t\t}"",""\t}""]"
"/smallsql/database/TableView/TableView(java.lang.String,smallsql.database.Columns)","[""TableView(String name, Columns columns){"",""\t\tthis.name = name;"",""\t\tthis.columns = columns;"",""\t}""]"
/smallsql/junit/BasicTestCase/BasicTestCase(java.lang.String),"[""public BasicTestCase(String name){"",""        super(makeNameValid(name));"",""    }""]"
/smallsql/database/MutableNumeric/toString(),"[""public String toString(){"",""        StringBuffer buf = new StringBuffer();"",""        if(value.length == 0 || signum == 0){"",""            buf.append( \'0\' );"",""        }else{"",""            if (value.length == 1 && (value[0] \> 0)){"",""                // simple Integer Value"",""                buf.append( Integer.toString(value[0]) );"",""            }else"",""            if (value.length == 1){"",""                // overflow Integer Value"",""                long temp = value[0] & 0xFFFFFFFFL;"",""                buf.append( Long.toString( temp ) );"",""            }else"",""            if (value.length == 2 && (value[0] \> 0)){"",""                // simple Long Value"",""                long temp = (((long)value[0]) \<\< 32) | (value[1] & 0xFFFFFFFFL);"",""                buf.append( Long.toString( temp ) );"",""            }else{"",""                return new BigDecimal( new BigInteger( toByteArray() ), scale ).toString();"",""            }"",""        }"",""        if(scale \> 0){"",""            while(buf.length() \<= scale) buf.insert( 0, \'0\' );"",""            buf.insert( buf.length() - scale, \'.\' );"",""        }"",""        if (signum \< 0) buf.insert( 0, \'-\');"",""        return buf.toString();"",""    }""]"
/smallsql/database/SmallSQLException/create(java.lang.String),"[""static SQLException create( String messageCode ) {"",""    \tassert (messageCode != null): \""Fill parameters\"";"",""    \t"",""    \tString message = translateMsg(messageCode, null);"",""    \tString sqlState = language.getSqlState(messageCode);"",""        return new SmallSQLException(message, sqlState);"",""    }""]"
/smallsql/junit/TestOther/testSetTransaction(),"[""public void testSetTransaction() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{"",""\t\t\tcon.createStatement().execute(\""Set Transaction Isolation Level Read Uncommitted\"");"",""\t\t\tassertEquals( Connection.TRANSACTION_READ_UNCOMMITTED, con.getTransactionIsolation() );"",""\t\t\t"",""\t\t\tcon.createStatement().execute(\""Set Transaction Isolation Level Read Committed\"");"",""\t\t\tassertEquals( Connection.TRANSACTION_READ_COMMITTED, con.getTransactionIsolation() );"",""\t\t\t"",""\t\t\tcon.createStatement().execute(\""Set Transaction Isolation Level Repeatable Read\"");"",""\t\t\tassertEquals( Connection.TRANSACTION_REPEATABLE_READ, con.getTransactionIsolation() );"",""\t\t\t"",""\t\t\tcon.createStatement().execute(\""Set Transaction Isolation Level Serializable\"");"",""\t\t\tassertEquals( Connection.TRANSACTION_SERIALIZABLE, con.getTransactionIsolation() );"",""\t\t\t"",""\t\t}finally{"",""\t\t\tcon.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );"",""\t\t}"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setString(int,java.lang.String)","[""public void setString(int parameterIndex, String x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, x, SQLTokenizer.VARCHAR);"",""    }""]"
"/smallsql/database/SQLParser/expression(smallsql.database.Command,int)","[""/**"",""\t * Read a complex expression that can be build from multiple atomic expressions."",""     * @param cmd is needed to add parameters \""?\"" with addParameter() "",""\t * @param previousOperationLevel the level of the left operation."",""\t */"",""    private Expression expression(Command cmd, int previousOperationLevel) throws SQLException{"",""        SQLToken token = nextToken(MISSING_EXPRESSION);"",""        Expression leftExpr;"",""        switch(token.value){"",""            case SQLTokenizer.NOT:"",""            \tleftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.NOT      / 10), ExpressionArithmetic.NOT);"",""            \tbreak;"",""            case SQLTokenizer.MINUS:"",""            \tleftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.NEGATIVE / 10), ExpressionArithmetic.NEGATIVE);"",""            \tbreak;"",""            case SQLTokenizer.TILDE:"",""            \tleftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.BIT_NOT  / 10), ExpressionArithmetic.BIT_NOT);"",""            \tbreak;"",""            case SQLTokenizer.PARENTHESIS_L:"",""                leftExpr = expression( cmd, 0);"",""                token = nextToken(MISSING_PARENTHESIS_R);"",""                break;"",""            default:"",""                leftExpr = expressionSingle( cmd, token);"",""        }"",""        boolean isNot = false;"",""        while((token = nextToken()) != null){"",""            Expression rightExpr;"",""            int operation = ExpressionArithmetic.getOperationFromToken(token.value);"",""            int level = operation / 10;"",""            if(previousOperationLevel \>= level){"",""                previousToken();"",""                return leftExpr;"",""            }"",""            switch(token.value){"",""                case SQLTokenizer.PLUS:"",""                case SQLTokenizer.MINUS:"",""                case SQLTokenizer.ASTERISK:"",""                case SQLTokenizer.SLACH:"",""                case SQLTokenizer.PERCENT:"",""                case SQLTokenizer.EQUALS:"",""                case SQLTokenizer.LESSER:"",""                case SQLTokenizer.LESSER_EQU:"",""                case SQLTokenizer.GREATER:"",""                case SQLTokenizer.GREATER_EQU:"",""                case SQLTokenizer.UNEQUALS:"",""                case SQLTokenizer.LIKE:"",""                case SQLTokenizer.OR:"",""                case SQLTokenizer.AND:"",""                case SQLTokenizer.BIT_AND:"",""                case SQLTokenizer.BIT_OR:"",""                case SQLTokenizer.BIT_XOR:"",""                    rightExpr = expression( cmd, level );"",""                    leftExpr = new ExpressionArithmetic( leftExpr, rightExpr, operation );"",""                    break;"",""                case SQLTokenizer.BETWEEN:"",""                    rightExpr = expression( cmd, ExpressionArithmetic.AND );"",""                    nextToken( MISSING_AND );"",""                    Expression rightExpr2 = expression( cmd, level );"",""                    leftExpr = new ExpressionArithmetic( leftExpr, rightExpr, rightExpr2, operation );"",""                    break;"",""                case SQLTokenizer.IN:"",""            \t\tnextToken(MISSING_PARENTHESIS_L);"",""                \ttoken = nextToken(MISSING_EXPRESSION);"",""                \tif(token.value == SQLTokenizer.SELECT){"",""                \t\tCommandSelect cmdSel = select();"",""\t\t\t\t\t\tleftExpr = new ExpressionInSelect( con, leftExpr, cmdSel, operation );"",""\t\t\t\t\t\tnextToken(MISSING_PARENTHESIS_R);"",""                \t}else{"",""                \t\tpreviousToken();"",""                \t\tExpressions list = expressionParenthesisList( cmd );"",""                \t\tleftExpr = new ExpressionArithmetic( leftExpr, list, operation );"",""                \t}"",""                    break;"",""                case SQLTokenizer.IS:"",""                \ttoken = nextToken(MISSING_NOT_NULL);"",""                \tif(token.value == SQLTokenizer.NOT){"",""                \t\tnextToken(MISSING_NULL);"",""\t\t\t\t\t\toperation++;"",""                \t}"",""                \tleftExpr = new ExpressionArithmetic( leftExpr, operation );"",""                \tbreak;"",""                case SQLTokenizer.NOT:"",""                \ttoken = nextToken(MISSING_BETWEEN_IN);"",""                \tpreviousToken();"",""                \tisNot = true;"",""                \tcontinue;"",""                default:"",""                        previousToken();"",""                        return leftExpr;"",""            }"",""            if(isNot){"",""            \tisNot = false;"",""\t\t\t\tleftExpr =  new ExpressionArithmetic( leftExpr, ExpressionArithmetic.NOT);"",""            }"",""        }"",""        previousToken();"",""        return leftExpr;"",""    }""]"
/smallsql/database/SSStatement/getConnection(),"[""final public Connection getConnection(){"",""        return con;"",""    }""]"
/smallsql/database/IndexScrollStatus/afterLast(),"[""/**"",""\t * Move the index after the last position. The next call nextRowOffset() returns a -1"",""\t *"",""\t */"",""\tfinal void afterLast(){"",""\t\tlongList = null;"",""\t\tnodeStack.setSize(1);"",""\t\t((IndexNodeScrollStatus)nodeStack.peek()).afterLast();"",""\t}""]"
"/smallsql/database/SSResultSet/updateTime(int,java.sql.Time)","[""public void updateTime(int columnIndex, Time x) throws SQLException {"",""\t\tupdateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.TIME);"",""    }""]"
/smallsql/junit/TestDBMetaData/testGetTableTypes(),"[""public void testGetTableTypes() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        ResultSet rs = md.getTableTypes();"",""        String[] colNames = {\""TABLE_TYPE\""};"",""        int[] colTypes = {Types.VARCHAR};"",""        assertRSMetaData( rs, colNames, colTypes);"",""        String type = \""\"";"",""        int count = 0;"",""        while(rs.next()){"",""            String type2 = rs.getString(\""TABLE_TYPE\"");"",""            assertTrue( type+\""-\""+type2, type.compareTo(type2)\<0);"",""            type = type2;"",""            count++;"",""        }"",""        assertEquals(\""Table Type Count\"", 3, count);"",""    }""]"
/smallsql/database/ExpressionFunctionHour/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(param1.isNull()) return 0;"",""\t\tDateTime.Details details = new DateTime.Details(param1.getLong());"",""\t\treturn details.hour;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsMinimumSQLGrammar(),"[""public boolean supportsMinimumSQLGrammar() {"",""    \treturn true;"",""    }""]"
/smallsql/junit/TestGroupBy/testMinOfNull(),"[""public void testMinOfNull() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( null, \""Select min(id) FROM \"" + table1 + \"" Where id is null\"");"",""\t}""]"
/smallsql/junit/BenchTest/main(java.lang.String[]),"[""public static void main(String[] args) throws SQLException{"",""        for(int i=0; i\<args.length;){"",""            String option = args[i++];"",""            if      (option.equals(\""-driver\"")  ) driverClassName = args[i++];"",""            else if (option.equals(\""-user\"")    ) userName = args[i++];"",""            else if (option.equals(\""-password\"")) password = args[i++];"",""            else if (option.equals(\""-url\"")     ) jdbcUrl  = args[i++];"",""            else if (option.equals(\""-rowcount\"")) rowCount = Integer.parseInt(args[i++]);"",""            else if (option.equals(\""-?\"") | option.equals(\""-help\"")){"",""                System.out.println( \""Valid options are :\\n\\t-driver\\n\\t-url\\n\\t-user\\n\\t-password\\n\\t-rowcount\"");"",""                System.exit(0);"",""            }"",""            else {System.out.println(\""Option \"" + option + \"" is ignored\"");i++;}"",""        }"",""        System.out.println( \""Driver:  \\t\"" + driverClassName);"",""        System.out.println( \""Username:\\t\"" + userName);"",""        System.out.println( \""Password:\\t\"" + password);"",""        System.out.println( \""JDBC URL:\\t\"" + jdbcUrl);"",""        System.out.println( \""Row Count:\\t\"" + rowCount);"",""        System.out.println();"",""        try{"",""            Class.forName(driverClassName).newInstance();"",""            con = DriverManager.getConnection( jdbcUrl, userName,password);"",""            System.out.println( con.getMetaData().getDriverName() + \"" \"" + con.getMetaData().getDriverVersion());"",""            System.out.println();"",""            createTestTable( con );"",""            test_InsertClassic( con );"",""            test_DeleteAll( con );"",""            test_InsertEmptyRows( con );"",""            test_DeleteRows( con );"",""            test_InsertRows( con );"",""            test_RowRequestPages( con );"",""            test_UpdateRows( con );"",""            test_UpdateRowsPrepare( con );"",""            test_UpdateRowsPrepareSP( con );"",""            test_UpdateRowsPrepareBatch( con );"",""            test_Scroll_getXXX( con );"",""            test_UpdateLargeBinary( con );"",""            test_UpdateLargeBinaryWithSP( con );"",""        }catch(Exception e){"",""            e.printStackTrace();"",""        }finally{"",""            if (con != null){"",""                //dropTestTable( con );"",""                con.close();"",""            }"",""        }"",""    }""]"
/smallsql/database/Expression/optimize(),"[""/**"",""     * Optimize the expression after a command was compiled. "",""     * This can be constant expressions that are evaluate once."",""     * @throws SQLException "",""     */"",""    void optimize() throws SQLException{"",""        if(params != null){"",""            for(int p=0; p\<params.length; p++){"",""                params[p].optimize();"",""            }"",""        }"",""    }""]"
/smallsql/junit/TestGroupBy/testFirst2(),"[""public void testFirst2() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( \""name1\"", \""Select first(name) FROM \"" + table1);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getSchemaTerm(),"[""public String getSchemaTerm() {"",""    \treturn \""owner\"";"",""    }""]"
/smallsql/database/MemoryResult/getBoolean(int),"[""boolean getBoolean( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getBoolean();"",""\t}""]"
/smallsql/database/ViewResult/updateRow(smallsql.database.Expression[]),"[""void updateRow(Expression[] updateValues) throws Exception{"",""\t\tcommandSelect.updateRow(con, updateValues);"",""\t}""]"
"/smallsql/database/Column/initAutoIncrement(java.nio.channels.FileChannel,long)","[""int initAutoIncrement(FileChannel raFile, long filePos) throws IOException{"",""    \tif(identity){"",""\t\t\tcounter = new Identity(raFile, filePos);"",""\t\t\tdefaultValue = new ExpressionValue( counter, SQLTokenizer.BIGINT );"",""    \t}"",""    \treturn 8;"",""    }""]"
"/smallsql/database/SSDatabaseMetaData/supportsConvert(int,int)","[""public boolean supportsConvert(int fromType, int toType) {"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionPower/getFunction(),"[""final int getFunction(){ return SQLTokenizer.POWER; }""]"
/smallsql/database/MutableNumeric/equals(java.lang.Object),"[""public boolean equals(Object obj){"",""\t\tif(!(obj instanceof MutableNumeric)) return false;"",""\t\treturn compareTo((MutableNumeric)obj) == 0;"",""\t}""]"
"/smallsql/database/SSResultSet/updateInt(java.lang.String,int)","[""public void updateInt(String columnName, int x) throws SQLException {"",""        updateInt( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/MemoryStream/writeTo(java.nio.channels.FileChannel),"[""void writeTo(FileChannel file) throws IOException{"",""\t    ByteBuffer buffer = ByteBuffer.wrap( puffer, 0, offset );"",""\t\tfile.write(buffer);"",""\t}""]"
/smallsql/database/Expressions/get(int),"[""final Expression get(int idx){"",""\t\tif (idx \>= size)"",""\t\t\tthrow new IndexOutOfBoundsException(\""Index: \""+idx+\"", Size: \""+size);"",""\t\treturn data[idx];"",""\t}""]"
/smallsql/database/CommandSelect/previous(),"[""/**"",""\t * Is used from ResultSet.previous()."",""\t */"",""\tboolean previous() throws Exception{"",""\t\treturn from.previous();"",""\t}""]"
"/smallsql/database/SSResultSet/updateObject(int,java.lang.Object,int)","[""public void updateObject(int columnIndex, Object x, int scale) throws SQLException {"",""    \t//TODO scale to consider"",""\t\tupdateValue( columnIndex, x, -1);"",""    }""]"
/smallsql/database/IndexNode/clearValue(),"[""final void clearValue(){"",""\t\tvalue = null;"",""\t}""]"
/smallsql/junit/TestTransactions/testCommitWithOneCommitRow(),"[""/**"",""\t * In the table there is already one row that is committed."",""\t */"",""\tpublic void testCommitWithOneCommitRow() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert\')\"");"",""\t\t\tassertRowCount( 1, \""Select * from transactions\"");"","""",""\t\t\tcon.setAutoCommit(false);"",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Select v From transactions\"");"",""\t\t\tassertRowCount( 2, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions (Select * From transactions)\"");"",""\t\t\tassertRowCount( 4, \""Select * from transactions\"");"",""\t\t\t"",""\t\t\tcon.commit();"",""\t\t\tassertRowCount( 4, \""Select * from transactions\"");"",""\t\t\t"",""\t\t}finally{"",""\t\t\ttry{"",""\t\t\t\tcon.createStatement().execute(\""Drop Table transactions\"");"",""\t\t\t}catch(Throwable e){e.printStackTrace();}"",""\t\t\tcon.setAutoCommit(true);"",""\t\t}"",""\t}""]"
/smallsql/database/SQLParser/createProcedure(),"[""private CommandCreateDatabase createProcedure() throws SQLException{"",""        //TODO Create Procedure"",""\t\tObject[] param = { \""Create Procedure\"" };"",""    \tthrow SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);"",""    }""]"
/smallsql/database/Scrollable/Scrollable(smallsql.database.RowSource),"[""/** Detect if on any previous scrolling the last row was reached. */"",""\t//private boolean lastIsFound;"",""\t"","""",""\tScrollable(RowSource rowSource){"",""\t\tthis.rowSource = rowSource;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/nullPlusNonNullIsNull(),"[""public boolean nullPlusNonNullIsNull() {"",""    \treturn true;"",""    }""]"
"/smallsql/database/SSResultSet/getBigDecimal(java.lang.String,int)","[""public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {"",""        return getBigDecimal( findColumn( columnName ), scale );"",""    }""]"
/smallsql/database/language/Language/Language(),"[""/**"",""\t * Base language constructor; fills the internal map with the English"",""\t * messages"",""\t */"",""\tprotected Language() {"",""\t\tmessages = new HashMap((int)(MESSAGES.length / 0.7)); //avoid rehashing ;-)"",""\t\tsqlStates = new HashMap((int)(MESSAGES.length / 0.7)); //avoid rehashing ;-)"",""\t\taddMessages(MESSAGES);"",""\t\tsetSqlStates();"",""\t}""]"
/smallsql/database/JoinScrollIndex/createIndex(smallsql.database.Expressions),"[""private void createIndex(Expressions rightEx) throws Exception{"",""        index = new Index(false);"",""        right.beforeFirst();"",""        while(right.next()){"",""            index.addValues(right.getRowPosition(), rightEx);"",""        }"",""    }""]"
/smallsql/database/MemoryResult/first(),"[""final boolean first(){"",""\t\trowIdx = 0;"",""\t\treturn move();"",""\t}""]"
/smallsql/junit/TestExceptionMethods/testDuplicatedColumnInsert(),"[""public void testDuplicatedColumnInsert() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{"",""            Statement st = con.createStatement();"",""            st.execute(\""Create Table DuplicatedColumn(col INT)\"");"",""            try{"",""                st.execute(\""INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\"");"",""                fail(\""SQLException \'Duplicated Column\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"",""        }finally{"",""            dropTable(con, \""DuplicatedColumn\"");"",""        }"",""    }""]"
/smallsql/database/SortedResult/isLast(),"[""final boolean isLast() throws Exception{"",""        if(row == 0){"",""            return false;"",""        }"",""        if(row \> getRowCount()){"",""            return false;"",""        }"",""        boolean isNext = next();"",""        previous();"",""        return !isNext;"",""    }""]"
/smallsql/database/MemoryResult/getRow(),"[""final int getRow(){"",""\t\treturn currentRow == null ? 0 : rowIdx+1;"",""\t}""]"
/smallsql/database/Scrollable/getRowPosition(),"[""long getRowPosition() {"",""\t\treturn rowIdx;"",""\t}""]"
/smallsql/database/SSCallableStatement/getClob(java.lang.String),"[""public Clob getClob(String parameterName) throws SQLException {"",""        return getClob( findParameter( parameterName ) );"",""    }""]"
/smallsql/junit/TestOperatoren/tearDown(),"[""public void tearDown(){"",""        try{"",""            Connection con = AllTests.getConnection();"",""            Statement st = con.createStatement();"",""            st.execute(\""drop table \"" + table);"",""            st.close();"",""        }catch(Throwable e){"",""            //e.printStackTrace();"",""        }"",""    }""]"
"/smallsql/database/SSPreparedStatement/setBytes(int,byte[])","[""public void setBytes(int parameterIndex, byte[] x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, x, SQLTokenizer.BINARY);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsLimitedOuterJoins(),"[""public boolean supportsLimitedOuterJoins() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSConnection/setReadOnly(boolean),"[""public void setReadOnly(boolean readOnly){"",""        //TODO Connection ReadOnly implementing"",""    }""]"
/smallsql/database/ExpressionFunctionReturnString/getNumeric(),"[""final MutableNumeric getNumeric() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn new MutableNumeric(getString().trim());"",""\t}""]"
/smallsql/junit/TestTransactions/testReadSerialized(),"[""public void testReadSerialized() throws Exception{"",""        Connection con1 = AllTests.getConnection();"",""        Connection con2 = AllTests.createConnection();"",""        try{        "",""            con1.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""            assertRowCount( 0, \""Select * from transactions\"");"",""            con1.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert2\')\"");"",""            assertRowCount( 1, \""Select * from transactions\"");"","""",""            con1.setTransactionIsolation( Connection.TRANSACTION_SERIALIZABLE );"",""            con1.setAutoCommit(false);"","""",""            //create a serialize lock on the table"",""            ResultSet rs1 = con1.createStatement().executeQuery(\""Select count(*) from transactions\"");"",""            assertTrue( rs1.next() );"",""            assertEquals( \""Count(*)\"", 1, rs1.getInt(1) );"",""            "",""            //reading should be possible on a second connection"",""            ResultSet rs2 = con2.createStatement().executeQuery(\""Select count(*) from transactions\"");"",""            assertTrue( rs2.next() );"",""            assertEquals( \""Count(*)\"", 1, rs2.getInt(1) );"",""            try{"",""                con2.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert3\')\"");"",""                fail(\""TRANSACTION_SERIALIZABLE does not lock the table\"");"",""            }catch(SQLException ex){"",""                assertSQLException(\""01000\"", 0, ex);"",""            }"",""        }finally{"",""            con2.close();"",""            dropTable(con1, \""transactions\"");"",""            con1.setAutoCommit(true);"",""        }"",""    }""]"
/smallsql/database/NoFromResult/isFirst(),"[""final boolean isFirst(){"",""\t\treturn rowPos == 1;"",""\t}""]"
/smallsql/database/ExpressionFunctionASin/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.asin( param1.getDouble() );"",""    }""]"
"/smallsql/database/DateTime/formatNumber(int,int,java.lang.StringBuffer)","[""private final static void formatNumber(int value, int digitCount, StringBuffer buf){"",""\t\tbuf.setLength(buf.length() + digitCount);"",""\t\tif(value \< 0) value = - value;"",""\t\tfor(int i=1; i\<=digitCount; i++){"",""\t\t\tbuf.setCharAt( buf.length()-i, Utils.digits[ value % 10 ] );"",""\t\t\tvalue /= 10;"",""\t\t}"",""\t}""]"
/smallsql/database/SQLTokenizer/getSQLDataType(int),"[""static final int getSQLDataType(int type){"",""\t\t// on change of this map the order from getTypeInfo need to be change"",""\t\tswitch(type){"",""\t\t\tcase SQLTokenizer.BIT:"",""\t\t\t\t\t\treturn Types.BIT;"",""\t\t\tcase SQLTokenizer.BOOLEAN:"",""\t\t\t\t\t\treturn Types.BOOLEAN;"",""\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\t\t\t\treturn Types.BINARY;"",""\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\t\t\t\treturn Types.VARBINARY;"",""\t\t\tcase SQLTokenizer.LONGVARBINARY:"",""\t\t\t\t\t\treturn Types.LONGVARBINARY;"",""\t\t\tcase SQLTokenizer.BLOB:"",""\t\t\t\t\t\treturn Types.BLOB;"",""\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\t\t\t\treturn Types.TINYINT;"",""\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\t\t\t\treturn Types.SMALLINT;"",""\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\t\t\treturn Types.INTEGER;"",""\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\t\t\treturn Types.BIGINT;"",""\t\t\tcase SQLTokenizer.SMALLMONEY:"",""\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\t\t\treturn Types.DECIMAL;"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\t\t\treturn Types.NUMERIC;"",""\t\t\tcase SQLTokenizer.REAL:"",""\t\t\t\t\t\treturn Types.REAL;"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\t\t\t\treturn Types.FLOAT;"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\t\t\treturn Types.DOUBLE;"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\t\treturn Types.DATE;"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\t\treturn Types.TIME;"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\t\treturn Types.TIMESTAMP;"",""\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\tcase SQLTokenizer.NCHAR:"",""\t\t\t\t\t\treturn Types.CHAR;"",""\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\tcase SQLTokenizer.NVARCHAR:"",""\t\t\t\t\t\treturn Types.VARCHAR;"",""\t\t\tcase SQLTokenizer.LONGNVARCHAR:"",""\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""\t\t\t\t\t\treturn Types.LONGVARCHAR;"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""\t\t\t\t\t\treturn Types.CLOB;"",""\t\t\tcase SQLTokenizer.JAVA_OBJECT:"",""\t\t\t\t\t\treturn Types.JAVA_OBJECT;"",""\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:"",""\t\t\t\t\t\treturn -11;"",""\t\t\tcase SQLTokenizer.NULL:"",""\t\t\t\t\t\treturn Types.NULL;"",""\t\t\tdefault: throw new Error(\""DataType:\""+type);"",""\t\t}"",""\t}""]"
/smallsql/database/ColumnExpression/getScale(),"[""int getScale(){"",""\t\treturn expr.getScale();"",""\t}""]"
/smallsql/junit/TestThreads/testConcurrentThreadWrite(),"[""/**"",""     * Create a table with a single row. In different threads on the same connection a int value will be increment."",""     * "",""     * @throws Throwable"",""     *             if an thread problem occur"",""     */"",""    public void testConcurrentThreadWrite() throws Throwable{"",""        ArrayList threadList = new ArrayList();"",""        throwable = null;"",""        final Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        try{"",""            st.execute(\""CREATE TABLE ConcurrentWrite( value int)\"");"",""            st.execute(\""INSERT INTO ConcurrentWrite(value) Values(0)\"");"","""",""            // start threads that check the row count"",""            for(int i = 0; i \< 200; i++){"",""                Thread thread = new Thread(new Runnable(){"","""",""                    public void run(){"",""                        try{"",""                            Statement st2 = con.createStatement();"",""                            int count = st2.executeUpdate(\""UPDATE ConcurrentWrite SET value = value + 1\"");"",""                            assertEquals(\""Update Count\"", 1, count);"",""                        }catch(Throwable ex){"",""                            throwable = ex;"",""                        }"",""                    }"","""",""                });"",""                threadList.add(thread);"",""                thread.start();"",""            }"","""",""            // wait until all threads are finish"",""            for(int i = 0; i \< threadList.size(); i++){"",""                Thread thread = (Thread)threadList.get(i);"",""                thread.join(5000);"",""            }"","""",""            // throw the exception if one occur"",""            if(throwable != null){"",""                throw throwable;"",""            }"","""",""            assertEqualsRsValue(new Integer(200), \""SELECT value FROM ConcurrentWrite\"");"",""        }finally{"",""            dropTable(con, \""ConcurrentWrite\"");"",""        }"",""    }""]"
/smallsql/database/Distinct/afterLast(),"[""final void afterLast() throws Exception {"",""\t\trowSource.afterLast();"",""\t\trow = 0;"",""\t}""]"
/smallsql/database/ExpressionFunctionIIF/getFloat(),"[""float getFloat() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.getFloat();"",""\t\treturn param3.getFloat();"",""\t}""]"
/smallsql/database/ExpressionFunctionIIF/getFunction(),"[""int getFunction() {"",""\t\treturn SQLTokenizer.IIF;"",""\t}""]"
/smallsql/database/Distinct/rowInserted(),"[""final boolean rowInserted(){"",""\t\treturn rowSource.rowInserted();"",""\t}""]"
"/smallsql/database/SSCallableStatement/getDate(java.lang.String,java.util.Calendar)","[""public Date getDate(String parameterName, Calendar cal) throws SQLException {"",""        return getDate( findParameter( parameterName ), cal );"",""    }""]"
/smallsql/database/ExpressionFunctionSpace/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.SPACE;"",""\t}""]"
/smallsql/database/ExpressionFunctionSubstring/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull() || param2.isNull() || param3.isNull();"",""\t}""]"
/smallsql/database/Scrollable/isBeforeFirst(),"[""boolean isBeforeFirst(){"",""\t\treturn rowIdx == -1 || rowList.size() == 0;"",""\t}""]"
/smallsql/database/SSConnection/rollback(),"[""public void rollback() throws SQLException {"",""\t\tlog.println(\""Rollback\"");"",""\t\ttestClosedConnection();"",""        synchronized(getMonitor()){"",""            int count = commitPages.size();"",""            for(int i=0; i\<count; i++){"",""                TransactionStep page = (TransactionStep)commitPages.get(i);"",""                page.rollback();"",""                page.freeLock();"",""            }"",""            commitPages.clear();"",""\t\t\ttransactionTime = System.currentTimeMillis();"",""        }"",""    }""]"
/smallsql/database/MemoryResult/isNull(int),"[""boolean isNull( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).isNull();"",""\t}""]"
"/smallsql/database/Utils/openRaFile(java.io.File,boolean)","[""/**"",""     * Open a RandomAccessFile and lock it that no other thread or VM can open it.."",""     * "",""     * @param file"",""     *            The file that should be open."",""     * @return a FileChannel"",""     * @throws FileNotFoundException"",""     *             If the file can not open"",""     * @param readonly open database in read only mode"",""     * @throws SQLException"",""     *             If the file can\'t lock."",""     */"",""    static final FileChannel openRaFile( File file, boolean readonly ) throws FileNotFoundException, SQLException{"",""        RandomAccessFile raFile = new RandomAccessFile(file, readonly ? \""r\"" : \""rw\"" );"",""        FileChannel channel = raFile.getChannel();"",""        if( !readonly ){"",""            try{"",""                FileLock lock = channel.tryLock();"",""                if(lock == null){"",""                    throw SmallSQLException.create(Language.CANT_LOCK_FILE, file);"",""                }"",""            }catch(SQLException sqlex){"",""                throw sqlex;"",""            }catch(Throwable th){"",""                throw SmallSQLException.createFromException(Language.CANT_LOCK_FILE, file, th);"",""            }"",""        }"",""        return channel;"",""    }""]"
/smallsql/database/ExpressionFunctionAscii/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull() || param1.getString().length() == 0;"",""\t}""]"
/smallsql/database/SSResultSet/getDate(java.lang.String),"[""public Date getDate(String columnName) throws SQLException {"",""        return getDate( findColumn( columnName ) );"",""    }""]"
/smallsql/database/Where/previous(),"[""final boolean previous() throws Exception {"",""        boolean oldIsCurrentRow = isCurrentRow;"",""\t\tdo{"",""\t\t\tisCurrentRow = rowSource.previous();"",""\t\t}while(isCurrentRow && !isValidRow());"",""\t\tif(oldIsCurrentRow || isCurrentRow) row--;"",""\t\treturn isCurrentRow;"",""\t}""]"
/smallsql/junit/TestGroupBy/testMaxTime(),"[""public void testMaxTime() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( java.sql.Time.valueOf(\""12:34:56\""), \""Select max({t \'12:34:56\'}) FROM \"" + table1);"",""\t}""]"
/smallsql/database/RowSource/setRowPosition(long),"[""/**"",""\t * Restore the row that was marked with the value. This is using for SortedResult."",""\t * @param rowPosition Only values that are return from getRowPosition are valid."",""\t */"",""\tabstract void setRowPosition(long rowPosition) throws Exception;""]"
/smallsql/database/SSResultSetMetaData/getColumnIdx(int),"[""final int getColumnIdx( int column ) throws SQLException{"",""\t\tif(column \< 1 || column \> columns.size())"",""\t\t\tthrow SmallSQLException.create( Language.COL_IDX_OUT_RANGE, String.valueOf(column));"",""\t\treturn column-1;"",""\t}""]"
/smallsql/database/SSConnection/getMonitor(),"[""/**"",""     * Get a monitor object for all synchronized blocks on connection base. Multiple calls return the same object."",""     * "",""     * @return a unique object of this connection"",""     */"",""    Object getMonitor(){"",""        return this;"",""    }""]"
/smallsql/database/TableResult/noRow(),"[""@Override"",""    final void noRow(){"",""\t\trow = 0;"",""\t\tstore = Store.NOROW;"",""\t}""]"
/smallsql/database/SSCallableStatement/getLong(java.lang.String),"[""public long getLong(String parameterName) throws SQLException {"",""        return getLong( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/Expression/isAutoIncrement(),"[""boolean isAutoIncrement(){"",""\t\treturn false;"",""\t}""]"
/smallsql/database/ExpressionFunctionAbs/getBoolean(),"[""boolean getBoolean() throws Exception{"",""        return getDouble() != 0;"",""    }""]"
"/smallsql/database/CommandSelect/updateRow(smallsql.database.SSConnection,smallsql.database.Expression[])","[""final void updateRow(SSConnection con, Expression[] newRowSources) throws SQLException{"",""\t\tint savepoint = con.getSavepoint();"",""\t\ttry{"",""\t\t\t//loop through all tables of this ResultSet "",""\t\t\tfor(int t=0; t\<tables.size(); t++){"",""\t\t\t\tTableViewResult result = TableViewResult.getTableViewResult( tables.get(t) );"",""\t\t\t\tTableView table = result.getTableView();"",""\t\t\t\tColumns tableColumns = table.columns;"",""\t\t\t\tint count = tableColumns.size();"",""\t\t\t\t"",""\t\t\t\t// order the new Values after it position in the table"",""\t\t\t\tExpression[] updateValues = new Expression[count];"",""\t\t\t\tboolean isUpdateNeeded = false;"",""\t\t\t\tfor(int i=0; i\<columnExpressions.size(); i++){"",""\t\t\t\t\tExpression src = newRowSources[i];"",""\t\t\t\t\tif(src != null && (!(src instanceof ExpressionValue) || !((ExpressionValue)src).isEmpty())){\t"",""\t\t\t\t\t\tExpression col = columnExpressions.get(i);"",""\t\t\t\t\t\tif(!col.isDefinitelyWritable())"",""\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.COL_READONLY, new Integer(i));"",""\t\t\t\t\t\tExpressionName exp = (ExpressionName)col;"",""\t\t\t\t\t\tif(table == exp.getTable()){"",""\t\t\t\t\t\t\tupdateValues[exp.getColumnIndex()] = src;"",""\t\t\t\t\t\t\tisUpdateNeeded = true;"",""\t\t\t\t\t\t\tcontinue;"",""\t\t\t\t\t\t}"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t\t"",""\t\t\t\t// save the new values if there are new value for this table"",""\t\t\t\tif(isUpdateNeeded){"",""\t\t\t\t\tresult.updateRow(updateValues);"",""\t\t\t\t}"",""\t\t\t}"",""\t\t}catch(Throwable e){"",""\t\t\tcon.rollback(savepoint);"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}finally{"",""\t\t\tif(con.getAutoCommit()) con.commit();"",""\t\t}"",""\t}""]"
/smallsql/database/MutableDouble/MutableDouble(double),"[""MutableDouble(double value){"",""\t\tthis.value = value;"",""\t}""]"
/smallsql/database/ExpressionFunctionCase/getFloat(),"[""final float getFloat() throws Exception {"",""\t\treturn getResult().getFloat();"",""\t}""]"
/smallsql/database/StoreImpl/setCurrentOffsetInPage(int),"[""void setCurrentOffsetInPage(int newOffset){"",""\t\tthis.offset = newOffset;"",""\t}""]"
/smallsql/database/DateTime/addDateTimeOffset(long),"[""private final static long addDateTimeOffset(long datetime){"",""        return addDateTimeOffset( datetime, TimeZone.getDefault());"",""\t}""]"
/smallsql/database/ExpressionFunctionCase/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.CASE;"",""\t}""]"
/smallsql/database/ViewResult/getBytes(int),"[""byte[] getBytes(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getBytes();"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnInt/getObject(),"[""Object getObject() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn Utils.getInteger(getInt());"",""\t}""]"
/smallsql/database/Index/doubleToBinarySortOrder(double),"[""final static private long doubleToBinarySortOrder(double value){"",""\t\tlong intValue = Double.doubleToLongBits(value);"",""\t\treturn (intValue\<0) ?"",""\t\t\t~intValue :"",""\t\t\tintValue ^ 0x8000000000000000L;\t\t\t"",""\t}""]"
/smallsql/database/SSPreparedStatement/getParameterMetaData(),"[""public ParameterMetaData getParameterMetaData() throws SQLException {"",""        checkStatement();"",""       /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method getParameterMetaData() not yet implemented.\"");"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getNumericFunctions(),"[""public String getNumericFunctions() {"",""    \treturn getFunctions(SQLTokenizer.ABS, SQLTokenizer.TRUNCATE);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/storesMixedCaseIdentifiers(),"[""public boolean storesMixedCaseIdentifiers() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSConnection/releaseSavepoint(java.sql.Savepoint),"[""public void releaseSavepoint(Savepoint savepoint) throws SQLException {"",""\t\tif(savepoint instanceof SSSavepoint){"",""\t\t\t((SSSavepoint)savepoint).transactionTime = 0;"",""\t\t\treturn;"",""\t\t}"",""\t\tthrow SmallSQLException.create(Language.SAVEPT_INVALID_DRIVER, new Object[] { savepoint });"",""    }""]"
/smallsql/database/SSResultSet/last(),"[""public boolean last() throws SQLException {"",""\t\ttry{"",""            moveToCurrentRow();"",""            return getCmd().last();"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
/smallsql/database/ExpressionName/getMoney(),"[""long getMoney() throws Exception{"",""        return fromEntry.getMoney(colIdx);"",""    }""]"
/smallsql/junit/BasicTestCase/string2boolean(java.lang.String),"[""/**"",""     * Identical to the Implementation from Utils.string2boolean"",""     */"",""    private boolean string2boolean( String val){"",""        try{"",""            return Double.parseDouble( val ) != 0;"",""        }catch(NumberFormatException e){/*ignore it if it not a number*/}"",""        return \""true\"".equalsIgnoreCase( val ) || \""yes\"".equalsIgnoreCase( val ) || \""t\"".equalsIgnoreCase( val );"",""    }""]"
/smallsql/database/Distinct/nullRow(),"[""final void nullRow() {"",""\t\trowSource.nullRow();"",""\t\trow = 0;"",""\t}""]"
/smallsql/junit/TestGroupBy/testMaxDate(),"[""public void testMaxDate() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( java.sql.Date.valueOf(\""2345-01-23\""), \""Select max({d \'2345-01-23\'}) FROM \"" + table1);"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getNumeric(),"[""final MutableNumeric getNumeric() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn new MutableNumeric(getString().trim());"",""\t}""]"
"/smallsql/database/SSStatement/executeUpdate(java.lang.String,int)","[""final public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException{"",""        setNeedGeneratedKeys(autoGeneratedKeys);"",""        return executeUpdate(sql);"",""    }""]"
/smallsql/junit/TestJoins/clear(),"[""private void clear() throws SQLException{"",""        Connection con = AllTests.getConnection();"",""        dropTable( con, table );"",""        dropTable( con, table2 );"",""        dropTable( con, table3 );"",""\t}""]"
/smallsql/junit/TestOrderBy/testOrderBy_varchar(),"[""public void testOrderBy_varchar() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tString oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by v\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = rs.getString(\""v\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getString(\""v\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tString newValue = rs.getString(\""v\"");"",""\t\t\tassertTrue( oldValue + \""\<\"" + newValue, oldValue.compareTo( newValue ) \< 0 );"",""\t\t\toldValue = newValue;"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/IndexNodeScrollStatus/afterLast(),"[""void afterLast(){"",""\t\tidx = (asc) ? nodes.length : -2;\t\t\t"",""\t}""]"
/smallsql/database/LongLongList/LongLongList(),"[""LongLongList(){"",""\t\tthis(16);"",""\t}""]"
"/smallsql/database/SQLParser/getErrorString(smallsql.database.SQLToken,java.lang.String,java.lang.Object)","[""/**"",""\t * Create the complete error string (begin + middle + end)."",""\t * "",""\t * @param token"",""\t *            token object."",""\t * @param middleMsgCode"",""\t *            middle message[code]."",""\t * @param middleMsgParam"",""\t *            middle message[code] parameter."",""\t * @return complete error message string."",""\t */"",""    private String getErrorString(SQLToken token, String middleMsgCode, "",""    \t\tObject middleMsgParam) {"",""    \tStringBuffer buffer = new StringBuffer(1024);"","""",""    \t/* begin */"",""    \t"",""        if(token != null){"",""        \tObject[] params = { String.valueOf(token.offset),"",""        \t\t\t\t\t\tString.valueOf(sql, token.offset, token.length) };"",""        \tString begin = SmallSQLException.translateMsg(Language.SYNTAX_BASE_OFS, params);"",""        \tbuffer.append(begin);"",""        }"",""        else{"",""        \tString begin = SmallSQLException.translateMsg("",""        \t\t\tLanguage.SYNTAX_BASE_END, new Object[] { });"",""        \tbuffer.append(begin);"",""        }"",""    \t"",""    \t/* middle */"",""    \t"",""    \tString middle = SmallSQLException.translateMsg("",""    \t\t\tmiddleMsgCode, new Object[] { middleMsgParam });"",""    \t"",""    \tbuffer.append(middle);"",""    \t"",""    \t/* end */"",""    \t"",""        int valOffset = (token != null) ? token.offset : sql.length;"",""        int valBegin = Math.max( 0, valOffset-40);"",""        int valEnd   = Math.min( valOffset+20, sql.length );"",""        String lineSeparator = System.getProperty( \""line.separator\"" );"",""        buffer.append( lineSeparator );"",""        buffer.append( sql, valBegin, valEnd-valBegin);"",""        buffer.append( lineSeparator );"",""        for(; valBegin\<valOffset; valBegin++) buffer.append(\' \');"",""        buffer.append(\'^\');"",""    \t"",""    \treturn buffer.toString();    \t"",""    }""]"
/smallsql/database/MemoryResult/beforeFirst(),"[""final void beforeFirst(){"",""\t\trowIdx = -1;"",""\t\tcurrentRow = null;"",""\t}""]"
/smallsql/database/Utils/string2boolean(java.lang.String),"[""static boolean string2boolean( String val){"",""        try{"",""            return Double.parseDouble( val ) != 0;"",""        }catch(NumberFormatException e){/*ignore it if it not a number*/}"",""        return \""true\"".equalsIgnoreCase( val ) || \""yes\"".equalsIgnoreCase( val ) || \""t\"".equalsIgnoreCase( val );"",""    }""]"
/smallsql/database/ExpressionFunctionRTrim/getBytes(),"[""final byte[] getBytes() throws Exception{"",""\t\tif(isNull()) return null;"",""\t\tbyte[] bytes = param1.getBytes();"",""        int length = bytes.length;"",""        while(length\>0 && bytes[length-1]==0){"",""            length--;"",""        }"",""\t\tbyte[] b = new byte[length];"",""\t\tSystem.arraycopy(bytes, 0, b, 0, length);"",""\t\treturn b;\t\t"",""\t}""]"
/smallsql/database/RowSource/first(),"[""/**"",""\t * Equals to ResultSet.first()"",""\t * @return"",""\t */"",""    abstract boolean first() throws Exception;""]"
"/smallsql/database/ExpressionValue/set(java.lang.Object,int)","[""/**"",""     * "",""     * @param newValue The new Value."",""     * @param newDataType The data type of the new Value (One of the SQLTokenizer const). "",""     * If the type is -1 then the data type is verify with many instanceof expressions."",""     * @throws SQLException If the newValue is not a instance of a know class. "",""     */"",""    final void set( Object newValue, int newDataType ) throws SQLException{"",""        this.value      = newValue;"",""        this.dataType   = newDataType;"",""        if(dataType \< 0){"",""            if(newValue == null)"",""                this.dataType = SQLTokenizer.NULL;"",""            else"",""            if(newValue instanceof String)"",""                this.dataType = SQLTokenizer.VARCHAR;"",""            else"",""            if(newValue instanceof Byte)"",""                this.dataType = SQLTokenizer.TINYINT;"",""            else"",""            if(newValue instanceof Short)"",""                this.dataType = SQLTokenizer.SMALLINT;"",""            else"",""            if(newValue instanceof Integer)"",""                this.dataType = SQLTokenizer.INT;"",""            else"",""            if(newValue instanceof Long || newValue instanceof Identity)"",""                this.dataType = SQLTokenizer.BIGINT;"",""            else"",""            if(newValue instanceof Float)"",""                this.dataType = SQLTokenizer.REAL;"",""            else"",""            if(newValue instanceof Double)"",""                this.dataType = SQLTokenizer.DOUBLE;"",""            else"",""            if(newValue instanceof Number)"",""                this.dataType = SQLTokenizer.DECIMAL;"",""            else"",""            if(newValue instanceof java.util.Date){"",""                DateTime dateTime;"",""            \tthis.value = dateTime = DateTime.valueOf((java.util.Date)newValue);"",""\t\t\t\tthis.dataType = dateTime.getDataType();"",""            }else"",""            if(newValue instanceof byte[])"",""                this.dataType = SQLTokenizer.VARBINARY;"",""            else"",""            if(newValue instanceof Boolean)"",""                this.dataType = SQLTokenizer.BOOLEAN;"",""            else"",""            if(newValue instanceof Money)"",""                this.dataType = SQLTokenizer.MONEY;"",""            else"",""                throw SmallSQLException.create(Language.PARAM_CLASS_UNKNOWN, newValue.getClass().getName());"",""        }"",""    }""]"
/smallsql/database/ExpressionValue/getMoney(),"[""long getMoney() throws Exception{"",""\t\treturn getMoney( getObject(), dataType );"",""    }""]"
/smallsql/database/SSStatement/setNeedGeneratedKeys(int),"[""final void setNeedGeneratedKeys(int autoGeneratedKeys) throws SQLException{"",""        switch(autoGeneratedKeys){"",""        case NO_GENERATED_KEYS:"",""            break;"",""        case RETURN_GENERATED_KEYS:"",""            needGeneratedKeys = true;"",""            break;"",""        default:"",""            throw SmallSQLException.create(Language.ARGUMENT_INVALID, String.valueOf(autoGeneratedKeys));"",""        }"",""    }""]"
/smallsql/database/LongTreeList/getSize(),"[""final int getSize() {"",""\t\treturn size;"",""\t}""]"
/smallsql/database/Scrollable/isAfterLast(),"[""boolean isAfterLast() throws Exception{"",""\t\tif(rowIdx \>= rowList.size()) return true;"",""        if(isBeforeFirst() && rowList.size() == 0){"",""            next();"",""            previous();"",""            if(rowList.size() == 0) return true;"",""        }"",""        return false;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsTransactionIsolationLevel(int),"[""public boolean supportsTransactionIsolationLevel(int level) {"",""    \tswitch(level){"",""\t\t\tcase Connection.TRANSACTION_NONE:"",""\t\t\tcase Connection.TRANSACTION_READ_UNCOMMITTED:"",""    \t\tcase Connection.TRANSACTION_READ_COMMITTED:"",""\t\t\tcase Connection.TRANSACTION_REPEATABLE_READ:"",""\t\t\tcase Connection.TRANSACTION_SERIALIZABLE:"",""\t\t\t\treturn true;"",""    \t}"",""    \treturn false;"",""    }""]"
/smallsql/database/DataSource/getNumeric(int),"[""abstract MutableNumeric getNumeric( int colIdx ) throws Exception;""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getDataType(),"[""int getDataType() {"",""\t\treturn SQLTokenizer.INT;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsCatalogsInIndexDefinitions(),"[""public boolean supportsCatalogsInIndexDefinitions() {"",""\t\treturn true;"",""    }""]"
"/smallsql/database/StoreImpl/updateFinsh(smallsql.database.SSConnection,smallsql.database.StoreImpl)","[""/**"",""     * Is call from updateRow()."",""     * The offset of newData must be at the end of the data. It used as new page size. "",""     */"",""\tvoid updateFinsh(SSConnection con, StoreImpl newData) throws SQLException{"",""\t\ttype = SQLTokenizer.UPDATE;"",""\t\t//createWriteLock();"",""\t\tif(newData.offset \<= sizePhysical || filePos == -1){"",""\t\t\t// the old page can be overwrite because it it large enough"",""\t\t\tpage = newData.page; //newData is only a temp StoreImpl"",""\t\t\toffset = newData.offset;"",""\t\t\tif(sizePhysical \< offset) sizePhysical = offset; // occur only on updates of not committed inserts (filePos == -1"",""\t\t\twriteFinsh(con);"",""\t\t}else{"",""\t\t\t// we need to create a new page because the old page is to small"",""\t\t\tnewData.status = UPDATED_PAGE;"",""\t\t\tif(updatePointer == null){"",""\t\t\t\t// we need to create a new page and change the old page to a UPDATE_POINTER"",""\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;"",""\t\t\t\tfilePosUpdated = newData.writeFinsh(null);"",""\t\t\t\tstatus = UPDATE_POINTER;"",""\t\t\t}else{"",""\t\t\t\t// we need to create a new page and delete the old page"",""\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;"",""\t\t\t\tupdatePointer.filePosUpdated = newData.writeFinsh(null);"",""\t\t\t\tupdatePointer.status = UPDATE_POINTER;"",""\t\t\t\tupdatePointer.type = SQLTokenizer.UPDATE;"",""\t\t\t\tupdatePointer.createWriteLock();"",""\t\t\t\tif(updatePointer.sharedPageData){"",""\t\t\t\t    updatePointer.page = new byte[PAGE_CONTROL_SIZE];"",""\t\t\t\t}"",""\t\t\t\tupdatePointer.writeFinsh(con);"",""\t\t\t\tstatus = DELETED;"",""                if(sharedPageData){"",""                    page = new byte[PAGE_CONTROL_SIZE];"",""                }"",""\t\t\t}"",""\t\t\twriteFinsh(con);"",""\t\t}"",""\t}""]"
/smallsql/database/DataSource/getObject(int),"[""abstract Object getObject( int colIdx ) throws Exception;""]"
/smallsql/database/ExpressionFunctionRound/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""\t\tfinal int places = param2.getInt();"",""\t\tdouble value = param1.getDouble();"",""\t\tlong factor = 1;"",""\t\tif(places \> 0){"",""\t\t\tfor(int i=0; i\<places; i++){"",""\t\t\t\tfactor *= 10;"",""\t\t\t}"",""\t\t\tvalue *= factor;"",""\t\t}else{"",""\t\t\tfor(int i=0; i\>places; i--){"",""\t\t\t\tfactor *= 10;"",""\t\t\t}"",""\t\t\tvalue /= factor;"",""\t\t}"",""\t\tvalue = Math.rint( value );"",""\t\tif(places \> 0){"",""\t\t\tvalue /= factor;"",""\t\t}else{"",""\t\t\tvalue *= factor;"",""\t\t}"",""\t\treturn value;"",""    }""]"
/smallsql/junit/TestStatement/testBatchUpate(),"[""public void testBatchUpate() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\t"",""\t\tassertEquals(\""Result Length wrong\"", 0, st.executeBatch().length );"",""\t\tst.clearBatch();"",""\t\tst.addBatch(\""Bla Bla\"");"",""        try {"",""            st.executeBatch();"",""        } catch (BatchUpdateException ex) {"",""            assertEquals(\""Result Length wrong\"",1,ex.getUpdateCounts().length);"",""        }"",""\t\tst.clearBatch();"",""\t\tint count = 10;"",""\t\tfor(int i=1; i\<=count; i++){"",""\t\t\tst.addBatch(\""Insert Into statement(c) Values(\'batch\""+i+\""\')\"");"",""\t\t}"",""\t\tint[] result = st.executeBatch();"",""\t\tassertEquals(\""Result Length wrong\"", count, result.length);"",""\t\tfor(int i=0; i\<count; i++){"",""\t\t\tassertEquals(\""Update Count\"", 1, result[i]);"",""\t\t}"",""\t\tassertRowCount(10, \""Select * From statement\"");"",""    }""]"
/smallsql/database/MemoryResult/MemoryResult(),"[""/**"",""\t * This constructor is only use for extended classes."",""\t */"",""\tMemoryResult(){/* should be empty */}""]"
/smallsql/database/SSDatabaseMetaData/supportsGetGeneratedKeys(),"[""public boolean supportsGetGeneratedKeys() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionCase/ExpressionFunctionCase(),"[""/**"",""\t * @param type"",""\t */"",""\tExpressionFunctionCase() {"",""\t\tsuper(FUNCTION);"",""\t}""]"
/smallsql/database/NoFromResult/isBeforeFirst(),"[""final boolean isBeforeFirst(){"",""\t\treturn rowPos \<= 0;"",""\t}""]"
/smallsql/database/SSResultSetMetaData/isCaseSensitive(int),"[""public boolean isCaseSensitive(int column) throws SQLException {"",""        return getColumnExpression( column ).isCaseSensitive();"",""    }""]"
"/smallsql/database/ExpressionName/setFrom(smallsql.database.DataSource,int,smallsql.database.Column)","[""/**"",""\t * Set the DataSource and the index in the DataSource. The first column has the index 0."",""\t * The Table object is using to request the Column description."",""\t */"",""\tvoid setFrom( DataSource fromEntry, int colIdx, Column column ){"",""\t\tthis.fromEntry  = fromEntry;"",""\t\tthis.colIdx     = colIdx;"",""\t\tthis.column\t\t= column;"",""\t}""]"
"/smallsql/database/ExpressionFunction/setParamAt(smallsql.database.Expression,int)","[""final void setParamAt( Expression param, int idx){"",""\t\tswitch(idx){"",""\t\t\tcase 0:"",""\t\t\t\tparam1 = param;"",""\t\t\t\tbreak;"",""\t\t\tcase 1:"",""\t\t\t\tparam2 = param;"",""\t\t\t\tbreak;"",""\t\t\tcase 2:"",""\t\t\t\tparam3 = param;"",""\t\t\t\tbreak;"",""\t\t\tcase 3:"",""\t\t\t\tparam4 = param;"",""\t\t\t\tbreak;"",""\t\t}"",""\t\tsuper.setParamAt( param, idx );"",""\t}""]"
/smallsql/database/ExpressionFunctionDegrees/getFunction(),"[""final int getFunction(){ return SQLTokenizer.DEGREES; }""]"
/smallsql/database/SSDatabaseMetaData/supportsOrderByUnrelated(),"[""public boolean supportsOrderByUnrelated() {"",""    \treturn true;"",""    }""]"
/smallsql/database/MemoryResult/setRowPosition(long),"[""final void setRowPosition(long rowPosition) throws Exception{"",""\t\trowIdx = (int)rowPosition;"",""\t\tmove();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsOpenCursorsAcrossCommit(),"[""public boolean supportsOpenCursorsAcrossCommit() {"",""    \treturn true;"",""    }""]"
/smallsql/junit/TestGroupBy/testSumInt(),"[""public void testSumInt() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Integer(4), \""Select sum(id) FROM \"" + table1);"",""\t}""]"
/smallsql/database/IndexNode/saveRef(smallsql.database.StoreImpl),"[""void saveRef(StoreImpl output) throws SQLException{"",""\t\t"",""\t}""]"
"/smallsql/database/Table/drop(smallsql.database.Database,java.lang.String)","[""/**"",""\t * Drop the Table. This method is static that the file does not need to load and also corrupt files can be dropped."",""\t */ "",""    static void drop(Database database, String name) throws Exception{"",""        boolean ok = new File( Utils.createTableViewFileName( database, name ) ).delete();"",""        if(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);"",""    }""]"
"/smallsql/database/TableResult/copyValueInto(int,smallsql.database.StoreImpl)","[""final private void copyValueInto( int colIdx, StoreImpl dst){"",""    \tint offset = offsets[colIdx++];"",""    \tint length = (colIdx \< offsets.length ? offsets[colIdx] : store.getUsedSize()) - offset;"",""\t\tdst.copyValueFrom( (StoreImpl)store, offset, length);"",""    }""]"
/smallsql/database/SSStatement/getMoreResults(int),"[""final public boolean getMoreResults(int current) throws SQLException{"",""        switch(current){"",""        case CLOSE_ALL_RESULTS:"",""        // currently there exists only one ResultSet"",""        case CLOSE_CURRENT_RESULT:"",""            ResultSet rs = cmd.getResultSet();"",""            cmd.rs = null;"",""            if(rs != null)"",""                rs.close();"",""            break;"",""        case KEEP_CURRENT_RESULT:"",""            break;"",""        default:"",""            throw SmallSQLException.create(Language.FLAGVALUE_INVALID, String.valueOf(current));"",""        }"",""        return cmd.getMoreResults();"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1/getPrecision(),"[""int getPrecision() {"",""\t\treturn param1.getPrecision();"",""\t}""]"
"/smallsql/database/SSResultSet/getObject(java.lang.String,java.util.Map)","[""public Object getObject(String columnName, Map map) throws SQLException {"",""        return getObject( columnName );"",""    }""]"
/smallsql/database/MemoryStream/MemoryStream(),"[""MemoryStream(){"",""\t\tpuffer = new byte[256];"",""\t}""]"
/smallsql/database/StoreImpl/writeShort(int),"[""void writeShort( int value ){"",""    \tint newSize = offset + 2;"",""        if(newSize \> page.length) resizePage(newSize);"","""",""        page[ offset++ ] = (byte)(value \>\> 8);"",""        page[ offset++ ] = (byte)(value);"",""    }""]"
/smallsql/database/SSCallableStatement/getBlob(java.lang.String),"[""public Blob getBlob(String parameterName) throws SQLException {"",""        return getBlob( findParameter( parameterName ) );"",""    }""]"
"/smallsql/database/Table/Table(smallsql.database.Database,java.lang.String)","[""/**"",""     * Constructor for extends class Lobs."",""     */"",""    Table(Database database, String name){"",""    \tsuper( name, null);"",""    \tthis.database = database;"",""\t\tindexes = null;"",""        references = null;"",""    }""]"
/smallsql/database/LongList/LongList(),"[""LongList(){"",""\t\tthis(16);"",""\t}""]"
/smallsql/database/ExpressionFunctionDayOfWeek/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.DAYOFWEEK;"",""\t}""]"
"/smallsql/database/SSCallableStatement/getTime(java.lang.String,java.util.Calendar)","[""public Time getTime(String parameterName, Calendar cal) throws SQLException {"",""        return getTime( findParameter( parameterName ), cal );"",""    }""]"
/smallsql/database/ExpressionFunctionCos/getFunction(),"[""final int getFunction(){ return SQLTokenizer.COS; }""]"
/smallsql/database/ExpressionName/getColumn(),"[""final Column getColumn(){"",""\t\treturn column;"",""\t}""]"
/smallsql/database/ColumnExpression/getName(),"[""String getName(){"",""\t\treturn expr.getAlias();"",""\t}""]"
/smallsql/database/ExpressionFunctionReplace/getBytes(),"[""final byte[] getBytes() throws Exception{"",""\t\tif(isNull()) return null;"",""        byte[] str1 = param1.getBytes();"",""        byte[] str2  = param2.getBytes();"",""        int length = str2.length;"",""        if(length == 0){"",""            return str1;"",""        }"",""        byte[] str3  = param3.getBytes();"",""        ByteArrayOutputStream buffer = new ByteArrayOutputStream();"",""        int idx1 = 0;"",""        int idx2 = Utils.indexOf(str2,str1,idx1);"",""        while(idx2 \> 0){"",""            buffer.write(str1,idx1,idx2-idx1);"",""            buffer.write(str3);"",""            idx1 = idx2 + length;"",""            idx2 = Utils.indexOf(str2,str1,idx1);"",""        }"",""        if(idx1 \> 0){"",""            buffer.write(str1,idx1,str1.length-idx1);"",""            return buffer.toByteArray();"",""        }"",""        return str1;"",""\t}""]"
/smallsql/database/LongList/size(),"[""final int size(){"",""\t\treturn size;"",""\t}""]"
/smallsql/database/ExpressionFunctionLTrim/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\tString str = param1.getString();"",""        int start = 0;"",""        while(start\<str.length() && str.charAt(start)==\' \'){"",""            start++;"",""        }"",""\t\treturn str.substring(start);"",""\t}""]"
/smallsql/database/Join/isExpressionsFromThisRowSource(smallsql.database.Expressions),"[""/**"",""     * @inheritDoc"",""     */"",""    boolean isExpressionsFromThisRowSource(Expressions columns){"",""        if(left.isExpressionsFromThisRowSource(columns) || right.isExpressionsFromThisRowSource(columns)){"",""            return true;"",""        }"",""        if(columns.size() == 1){"",""            return false;"",""        }"",""        "",""        //Now it will be difficult, there are 2 or more column"",""        //one can in the left, the other can be in the right"",""        //Or one is not in both that we need to check everyone individually"",""        Expressions single = new Expressions();"",""        for(int i=0; i\<columns.size(); i++){"",""            single.clear();"",""            single.add(columns.get(i));"",""            if(left.isExpressionsFromThisRowSource(columns) || right.isExpressionsFromThisRowSource(columns)){"",""                continue;"",""            }"",""            return false;"",""        }"",""        return true;"",""    }""]"
/smallsql/database/StorePageMap/isEmpty(),"[""/**"",""\t * Returns \<tt\>true\</tt\> if this map contains no key-value mappings."",""\t *"",""\t * @return \<tt\>true\</tt\> if this map contains no key-value mappings."",""\t */"",""\tfinal boolean isEmpty() {"",""\t\treturn size == 0;"",""\t}""]"
"/smallsql/database/SSResultSet/updateClob(int,java.sql.Clob)","[""public void updateClob(int columnIndex, Clob x) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.updateClob method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Clob\"");"",""    }""]"
"/smallsql/database/Index/findRows(smallsql.database.IndexNode,smallsql.database.Expression,boolean,java.util.ArrayList)","[""/**"",""     * Return the last IndexNode for the expression. If the value in expressions does not exist then it return a null."",""     * "",""     * @param page"",""     *            the start point of the search. If it the first expression of a list then it is the rootPage"",""     * @param expr"",""     *            the searching expression"",""     * @param searchNullValues"",""     *            a expression with NULL values should return a result."",""     * @param nodeList"",""     *            optional, can be null. The search path in the index tree."",""     * @return the mapping IndexNode or null."",""     */"",""\tfinal private IndexNode findRows(IndexNode page, Expression expr, boolean searchNullValues, ArrayList nodeList) throws Exception{"",""\t\t\tif(expr.isNull()){"",""                if(!searchNullValues){"",""                    return null;"",""                }"",""\t\t\t\tpage = findNull(page);"",""\t\t\t}else{"",""\t\t\t\tswitch(expr.getDataType()){"",""\t\t\t\t\tcase SQLTokenizer.REAL:"",""\t\t\t\t\t\tpage = find( page, floatToBinarySortOrder( expr.getFloat()), 2, nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\t\t\t\tpage = find( page, doubleToBinarySortOrder( expr.getDouble()), 4, nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\t\t\t\tpage = find( page, expr.getInt(), 1, nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\t\t\t\tpage = find( page, shortToBinarySortOrder( expr.getInt()), 1, nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\t\t\tpage = find( page, intToBinarySortOrder( expr.getInt()), 2, nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:"",""\t\t\t\t\t\tpage = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\t\t\tcase SQLTokenizer.NVARCHAR:"",""\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:"",""\t\t\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), false ), nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.NCHAR:"",""\t\t\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), true ), nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:"",""\t\t\t\t\tcase SQLTokenizer.BLOB:"",""\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:"",""\t\t\t\t\t\tpage = find( page, bytesToBinarySortOrder( expr.getBytes()), nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.BIT:"",""\t\t\t\t\tcase SQLTokenizer.BOOLEAN:"",""\t\t\t\t\t\tpage = find( page, expr.getBoolean() ? 2 : 1, 1, nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\t\tcase SQLTokenizer.DECIMAL:\t\t\t\t\t\t"",""\t\t\t\t\t\tpage = find( page, numericToBinarySortOrder( expr.getNumeric() ), nodeList );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tdefault: "",""\t\t\t\t\t\t//TODO more data types"",""\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));"",""\t\t\t\t}"",""\t\t\t}"",""\t\t\treturn page;"",""\t}""]"
/smallsql/database/SortedResult/execute(),"[""final void execute() throws Exception{"",""\t\trowSource.execute();"",""\t\tIndex index = new Index(false);\t"",""        lastRowOffset = -1;"",""\t\twhile(rowSource.next()){"",""            lastRowOffset = rowSource.getRowPosition();"",""\t\t\tindex.addValues( lastRowOffset, orderBy);"",""            sortedRowCount++;"",""\t\t}"",""\t\tscrollStatus = index.createScrollStatus(orderBy);"",""\t\tuseSetRowPosition = false;"",""\t}""]"
/smallsql/database/StoreImpl/readLong(),"[""long readLong(){"",""        //return (((long)readInt()) \<\< 32) | (readInt() & 0xFFFFFFFFL);"",""        return  ((long)(page[ offset++ ]) \<\< 56) |"",""                ((long)(page[ offset++ ] & 0xFF) \<\< 48) |"",""                ((long)(page[ offset++ ] & 0xFF) \<\< 40) |"",""                ((long)(page[ offset++ ] & 0xFF) \<\< 32) |"",""                ((long)(page[ offset++ ] & 0xFF) \<\< 24) |"",""                ((page[ offset++ ] & 0xFF) \<\< 16) |"",""                ((page[ offset++ ] & 0xFF) \<\< 8) |"",""                ((page[ offset++ ] & 0xFF));"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxColumnsInOrderBy(),"[""public int getMaxColumnsInOrderBy() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/StoreImpl/readPageHeader(),"[""private final void readPageHeader() throws SQLException{"",""\t\tif(readInt() != PAGE_MAGIC){"",""\t\t\tthrow SmallSQLException.create(Language.TABLE_CORRUPT_PAGE, new Object[] { new Long(filePos) });"",""\t\t}"",""\t\tstatus = readInt();"",""\t\tsizeUsed  = readInt();"",""\t\tsizePhysical = readInt();"",""\t\tnextPageOffset = readInt();"",""\t\tfilePosUpdated = readLong();"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/getScale(),"[""final int getScale() {"",""\t\treturn datatype.getScale();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsSchemasInTableDefinitions(),"[""public boolean supportsSchemasInTableDefinitions() {"",""    \treturn false;"",""    }""]"
/smallsql/database/Column/setScale(int),"[""void setScale(int scale){"",""        this.scale = scale;"",""    }""]"
/smallsql/database/LongTreeList/LongTreeList(),"[""/**"",""\t * Create a empty LongTreeList."",""\t *"",""\t */"",""\tLongTreeList(){"",""\t\tdata = new byte[25];"",""\t}""]"
"/smallsql/database/DateTime/calcMillis(int,int,int,int,int,int,int)","[""static long calcMillis(int year, int month, final int day, final int hour, final int minute, final int second, final int millis){"",""\t\tlong result = millis;"",""\t\tresult += second * 1000;"",""\t\tresult += minute * 60000;"",""\t\tresult += hour * 3600000;"",""\t\tresult += (day-1) * 86400000L;"",""\t\tif(month \> 11){"",""\t\t\tyear += month / 12;"",""\t\t\tmonth %= 12;"",""\t\t}"",""\t\tresult += MONTH_DAYS[month] * 86400000L;"",""\t\tresult += (year - 1970) * 31536000000L; // millis 365 days"",""\t\tresult += ((year/4) - (year/100) + (year/400) - 477) * 86400000L;"",""\t\tif(month\<2 && year % 4 == 0 && (year%100 != 0 || year%400 == 0))"",""\t\t\tresult -= 86400000L;"",""\t\treturn result;"",""\t}""]"
/smallsql/database/Join/isScrollable(),"[""final boolean isScrollable(){"",""\t\treturn false; //TODO performance, if left and right are scrollable then this should also scrollable"",""\t}""]"
/smallsql/junit/TestOrderBy/testOrderBy_Scollable2(),"[""public void testOrderBy_Scollable2() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""\t\tResultSet rs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by v\"");"","""",""\t\t"",""\t\tint colCount = rs.getMetaData().getColumnCount();"",""\t\tArrayList result = new ArrayList();"",""\t\twhile(rs.next()){"",""\t\t\tObject[] row = new Object[colCount];"",""\t\t\tfor(int i=0; i\<colCount; i++){"",""\t\t\t\trow[i] = rs.getObject(i+1);"",""\t\t\t}"",""\t\t\tresult.add(row);"",""\t\t}"",""\t\t"",""\t\tint rowCount = result.size();"",""\t\twhile(rs.previous()){"",""\t\t\tObject[] row = (Object[])result.get(--rowCount);"",""\t\t\tfor(int i=0; i\<colCount; i++){"",""\t\t\t\tassertEquals( \""Difference in row:\""+rowCount, row[i], rs.getObject(i+1));"",""\t\t\t}"",""\t\t}"",""\t\tassertEquals( \""RowCount different between next and previous:\""+rowCount, 0, rowCount);"",""\t}""]"
/smallsql/junit/TestGroupBy/testMin(),"[""public void testMin() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Integer(1), \""Select min(id) FROM \"" + table1);"",""\t}""]"
/smallsql/database/IndexNode/loadRef(long),"[""IndexNode loadRef( long offset ) throws SQLException{"",""\t\tthrow new Error();"",""\t}""]"
/smallsql/database/ExpressionFunction/ExpressionFunction(),"[""ExpressionFunction(){"",""\t\tsuper(FUNCTION);"",""\t}""]"
/smallsql/database/SSResultSet/getAsciiStream(java.lang.String),"[""public InputStream getAsciiStream(String columnName) throws SQLException {"",""        return getAsciiStream( findColumn( columnName ) );"",""    }""]"
"/smallsql/database/SSPreparedStatement/setDate(int,java.sql.Date)","[""public void setDate(int parameterIndex, Date x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.DATE);"",""    }""]"
/smallsql/database/SortedResult/relative(int),"[""boolean relative(int rows) throws Exception{"",""        if(rows == 0) return (row != 0);"",""        if(rows \> 0){"",""            while(rows-- \> 0){"",""                if(!next()){"",""                    return false;"",""                }"",""            }"",""        }else{"",""            while(rows++ \< 0){"",""                if(!previous()){"",""                    return false;"",""                }"",""            }"",""        }"",""        return true;"",""    }""]"
/smallsql/junit/TestGroupBy/testAvg(),"[""public void testAvg() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Integer(1), \""Select avg(id) FROM \"" + table1);"",""\t}""]"
/smallsql/database/StorePageMap/StorePageMap(),"[""/**"",""\t * Constructs an empty \<tt\>HashMap\</tt\> with the default initial capacity"",""\t * (16) and the default load factor (0.75)."",""\t */"",""\tStorePageMap() {"",""\t\tthreshold = 12;"",""\t\ttable = new Entry[17];"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/insertsAreDetected(int),"[""public boolean insertsAreDetected(int type) {"",""\t\treturn supportsResultSetType(type);"",""    }""]"
/smallsql/junit/TestTokenizer/dropTable(),"[""private void dropTable() throws SQLException {"",""\t\ttry {"",""\t\t\tstat.execute(\""DROP TABLE \"" + TABLE_NAME);"",""\t\t} catch (SQLException e) {"",""\t\t\t// just to check the error, if it happens, is the expected one"",""\t\t\tout.println(\""REGULAR: \"" + e.getMessage() + \'\\n\');"",""\t\t}"",""\t}""]"
/smallsql/database/Store/deleteRow(smallsql.database.SSConnection),"[""abstract void deleteRow(SSConnection con) throws SQLException;""]"
"/smallsql/database/SSCallableStatement/setDate(java.lang.String,java.sql.Date,java.util.Calendar)","[""public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {"",""        setDate( findParameter( parameterName ), x, cal );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsCatalogsInPrivilegeDefinitions(),"[""public boolean supportsCatalogsInPrivilegeDefinitions() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getObject(),"[""Object getObject() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn new DateTime( getLong(), SQLTokenizer.TIMESTAMP );"",""\t}""]"
/smallsql/junit/TestStatement/testFetch(),"[""public void testFetch() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        "",""        st.setFetchDirection(ResultSet.FETCH_FORWARD);"",""        assertEquals( st.getFetchDirection(), ResultSet.FETCH_FORWARD);"","""",""        st.setFetchDirection(ResultSet.FETCH_REVERSE);"",""        assertEquals( st.getFetchDirection(), ResultSet.FETCH_REVERSE);"",""        "",""        st.setFetchSize(123);"",""        assertEquals( st.getFetchSize(), 123);"",""    }""]"
/smallsql/database/Column/getDataType(),"[""int getDataType(){"",""        return dataType;"",""    }""]"
/smallsql/junit/TestThreads/testConcurrentConnectionWrite()/$anonymous1/run(),"[""public void run(){"",""                        try{"",""                            Connection con2 = AllTests.createConnection();"",""                            Statement st2 = con2.createStatement();"",""                            int count = st2.executeUpdate(\""UPDATE ConcurrentWrite SET value = value + 1\"");"",""                            assertEquals(\""Update Count\"", 1, count);"",""                            con2.close();"",""                        }catch(Throwable ex){"",""                            throwable = ex;"",""                        }"",""                    }""]"
/smallsql/database/SSResultSet/previous(),"[""public boolean previous() throws SQLException {"",""\t\ttry{"",""            moveToCurrentRow();"",""\t\t\treturn getCmd().previous();"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""\t}""]"
/smallsql/database/Table/close(),"[""/**"",""     * Closed the file handle that the object can be garbaged."",""     */"",""    @Override"",""    void close() throws Exception{"",""        if(indexes != null)"",""            indexes.close();"",""        raFile.close();"",""        raFile = null;"",""        if( lobs != null ){"",""            lobs.close();"",""            lobs = null;"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionIIF/getPrecision(),"[""final int getPrecision(){"",""\t\treturn Math.max( param2.getPrecision(), param3.getPrecision() );"",""\t}""]"
"/smallsql/database/SSResultSet/updateCharacterStream(int,java.io.Reader,int)","[""public void updateCharacterStream(int columnIndex, Reader x, int length) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.updateCharacterStream method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Reader object\"");"",""    }""]"
/smallsql/database/TableResult/getTableView(),"[""@Override"",""    final TableView getTableView(){"",""\t\treturn table;"",""\t}""]"
/smallsql/database/ExpressionFunctionInsert/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull() || param2.isNull() || param3.isNull() || param4.isNull();"",""\t}""]"
"/smallsql/database/ExpressionArithmetic/getDataType(smallsql.database.Expression,smallsql.database.Expression)","[""/**"",""\t * Returns the higher level data type from 2 expressions. "",""\t */"",""    static int getDataType(Expression left, Expression right){"",""\t\tint typeLeft  = left.getDataType();"",""\t\tint typeRight = right.getDataType();"",""\t\treturn getDataType( typeLeft, typeRight);"",""    }""]"
/smallsql/database/Column/getDefaultDefinition(),"[""String getDefaultDefinition(){"",""\t\treturn defaultDefinition;"",""\t}""]"
/smallsql/database/ExpressionFunctionCot/getFunction(),"[""final int getFunction(){ return SQLTokenizer.COT; }""]"
/smallsql/junit/BenchTest/test_DeleteRows(java.sql.Connection),"[""/**"",""      *  4. Test"",""      *  Delete rows with the method deleteRow()."",""      */  "",""    static void test_DeleteRows(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test delete rows with deleteRow(): \"" + rowCount + \"" rows\"");"",""        "",""        try{"",""            Statement st1 = con.createStatement();"",""            ResultSet rs = st1.executeQuery( \""SELECT count(*) FROM \"" + tableName);"",""            rs.next();"",""            int count = rs.getInt(1);"",""            if (count != rowCount){"",""                // There are not the correct count of rows."",""                if (count == 0){"",""                    createTestDataWithClassicInsert( con );"",""                    rs = st1.executeQuery( \""SELECT count(*) FROM \"" + tableName);"",""                    rs.next();"",""                    count = rs.getInt(1);"",""                }"",""                if (count != rowCount){"",""                    System.out.println( \""  Failed: Only \"" + (rowCount-count) + \"" rows were deleted.\"");"",""                    return;"",""                }"",""            }"",""            st1.close();"",""            "",""            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );"",""            rs = st.executeQuery(\""SELECT * FROM \""+tableName);"",""            long time = -System.currentTimeMillis();"",""            for (int i=0; i\<rowCount; i++){"",""                rs.next();"",""                rs.deleteRow();"",""            }"",""            time += System.currentTimeMillis();"",""            rs = st.executeQuery( \""SELECT count(*) FROM \"" + tableName);"",""            rs.next();"",""            count = rs.getInt(1);"",""            if (count != 0)"",""                 System.out.println( \""  Failed: Only \"" + (rowCount-count) + \"" rows were deleted.\"");"",""            else System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            st.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
"/smallsql/database/IndexNode/addRemainderKey(long,long,int)","[""/**"",""\t * Add a value on a tree node end without roll out the completly tree."",""\t * This reduce the size of the tree if there are large enties with a high significance."",""\t * for example: "",""\t * If you have large strings which are different on the on the first 3 charchters. "",""\t * Then you need only a tree size of 3. "",""\t * @param digit \t The digit must be in the range 0 between 255."",""\t * @param rowOffset  The result value. This is the value that is saved in the tree."",""\t * @param value \t The key value."",""\t * @param digitCount The count of digits from value that need to indexing in the tree. "",""\t * \t\t\t\t\t The range is from 1 to 3;  "",""\t */"",""\tfinal void addRemainderKey(long rowOffset, long remainderValue, int charCount) throws SQLException{"",""\t\tsaveRemainderValue(remainderValue, charCount);"",""\t\tvalue = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);"",""\t}""]"
/smallsql/junit/TestScrollable/testPreviousWithWhere(),"[""public void testPreviousWithWhere() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.createStatement().execute(\""Create Table Scrollable (i counter, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from Scrollable\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into Scrollable(v) Values(\'qwert\')\"");"",""\t\t\tassertRowCount( 1, \""Select * from Scrollable\"");"",""\t\t\tassertRowCount( 0, \""Select * from Scrollable Where 1=0\"");"","""",""            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""            testPreviousWithWhereAssert( st.executeQuery(\""Select * from Scrollable Where 1=0\"") );"",""            testPreviousWithWhereAssert( st.executeQuery(\""Select * from Scrollable Where 1=0 Order By v\"") );"",""            testPreviousWithWhereAssert( st.executeQuery(\""Select v from Scrollable Where 1=0 Group By v\"") );"",""            testPreviousWithWhereAssert( st.executeQuery(\""Select v from Scrollable Where 1=0 Group By v Order By v\"") );"",""            testPreviousWithWhereAssert( st.executeQuery(\""Select v from Scrollable Group By v Having 1=0 Order By v\"") );"",""\t\t\t"",""\t\t}finally{"",""            dropTable( con, \""Scrollable\"");"",""\t\t}"",""\t}""]"
/smallsql/database/StorePageMap/containsValue(smallsql.database.TableStorePage),"[""/**"",""\t * Returns \<tt\>true\</tt\> if this map maps one or more keys to the"",""\t * specified value."",""\t *"",""\t * @param value value whose presence in this map is to be tested."",""\t * @return \<tt\>true\</tt\> if this map maps one or more keys to the"",""\t *         specified value."",""\t */"",""\tfinal boolean containsValue(TableStorePage value) {"",""\t\tEntry tab[] = table;"",""\t\t\tfor (int i = 0; i \< tab.length ; i++)"",""\t\t\t\tfor (Entry e = tab[i] ; e != null ; e = e.next)"",""\t\t\t\t\tif (value.equals(e.value))"",""\t\t\t\t\t\treturn true;"",""\t\treturn false;"",""\t}""]"
/smallsql/database/TableResult/getFloat(int),"[""@Override"",""    final float getFloat( int colIdx ) throws Exception{"",""        return store.getFloat( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/database/Expressions/Expressions(int),"[""Expressions(int initSize){"",""\t\tdata = new Expression[initSize];"",""\t}""]"
/smallsql/database/SSResultSet/insertRow(),"[""public void insertRow() throws SQLException {"",""\t\tst.con.log.println(\""insertRow()\"");"",""        if(!isInsertRow){"",""            throw SmallSQLException.create(Language.RSET_NOT_INSERT_ROW);"",""        }"",""\t\tgetCmd().insertRow( st.con, values);"",""        clearRowBuffer();"",""    }""]"
/smallsql/database/SSResultSetMetaData/isBinaryDataType(int),"[""static boolean isBinaryDataType(int dataType) {"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\tcase SQLTokenizer.LONGVARBINARY:"",""\t\t\tcase SQLTokenizer.BLOB:"",""\t\t\t\treturn true;"",""\t\t}"",""\t\treturn false;"",""\t}""]"
"/smallsql/database/CommandSet/CommandSet(smallsql.database.Logger,int)","[""CommandSet( Logger log, int type ){"",""\t\tsuper(log);"",""        this.type = type;"",""    }""]"
/smallsql/database/UnionAll/getString(int),"[""final String getString(int colIdx) throws Exception {"",""\t\treturn currentDS.getString(colIdx);"",""\t}""]"
"/smallsql/database/SSCallableStatement/setTime(java.lang.String,java.sql.Time,java.util.Calendar)","[""public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {"",""        setTime( findParameter( parameterName ), x, cal );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxBinaryLiteralLength(),"[""public int getMaxBinaryLiteralLength() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/UnionAll/getDouble(int),"[""final double getDouble(int colIdx) throws Exception {"",""\t\treturn currentDS.getDouble(colIdx);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getMaxStatements(),"[""public int getMaxStatements() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/ExpressionArithmetic/getMoney(),"[""long getMoney() throws java.lang.Exception {"",""        if(isNull()) return 0;"",""        int dataType = getDataType();\t\t"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""\t\t\t\treturn getBoolean() ? 10000 : 0;"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""\t\t\t\treturn getIntImpl() * 10000;"",""            case SQLTokenizer.BIGINT:"",""                return getLongImpl() * 10000;"",""\t\t\tcase SQLTokenizer.REAL:"",""                return Utils.doubleToMoney( getFloatImpl() );"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                return Utils.doubleToMoney( getDoubleImpl() );"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""\t\t\t\treturn getMoneyImpl();"",""        }"",""\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);"",""    }""]"
/smallsql/junit/BasicTestCase/printRS(java.sql.ResultSet),"[""void printRS(ResultSet rs) throws SQLException{"",""   \t\tint count = rs.getMetaData().getColumnCount();"",""\t\twhile(rs.next()){ "",""\t\t\tfor(int i=1; i\<=count; i++){"",""\t\t\t\tSystem.out.print(rs.getString(i) + \'\\t\');"",""\t\t\t} "",""\t\t\tSystem.out.println();"",""\t\t}"","""",""   \t}""]"
/smallsql/database/TableResult/insertRow(smallsql.database.Expression[]),"[""@Override"",""    final void insertRow(Expression[] updateValues) throws Exception{"",""\t\tColumns tableColumns = table.columns;"",""\t\tint count = tableColumns.size();"",""\t\t"",""\t\t// save the new values if there are new value for this table"",""\t\tStoreImpl store = table.getStoreInsert(con);"",""\t\tfor(int i=0; i\<count; i++){"",""\t\t\tColumn tableColumn = tableColumns.get(i);"",""\t\t\tExpression src = updateValues[i];"",""\t\t\tif(src == null) src = tableColumn.getDefaultValue(con);"",""\t\t\tstore.writeExpression( src, tableColumn );"",""\t\t\t\t\t\t"",""\t\t}"",""\t\tstore.writeFinsh( con );"",""\t\tinsertStorePages.add(store.getLink());"",""\t}""]"
/smallsql/database/ExpressionFunctionInsert/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\tString str = param1.getString();"",""        int start  = Math.min(Math.max( 0, param2.getInt() - 1), str.length() );"",""\t\tint length = Math.min(param3.getInt(), str.length() );"",""        StringBuffer buffer = new StringBuffer();"",""        buffer.append(str.substring(0,start));"",""        buffer.append(param4.getString());"",""        if(length \< 0) "",""            throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));"",""        buffer.append(str.substring(start+length));"",""\t\treturn buffer.toString();"",""\t}""]"
/smallsql/junit/TestOrderBy/testOrderBy_varchar_DescAsc(),"[""public void testOrderBy_varchar_DescAsc() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tString oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by v desc, i asc\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getString(\""v\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(oldValue != null && rs.next()){"",""\t\t\tString newValue = rs.getString(\""v\"");"",""\t\t\tif(newValue != null){"",""\t\t\t\tassertTrue( oldValue.compareTo( newValue ) \> 0 );"",""\t\t\t\tcount++;"",""\t\t\t}"",""\t\t\toldValue = newValue;"",""\t\t}"",""\t\tassertNull(oldValue);"",""\t\tassertFalse( rs.next() );"","""",""\t\tassertEquals( valueCount, count );"",""\t}""]"
"/smallsql/database/Database/dropTable(smallsql.database.SSConnection,java.lang.String,java.lang.String)","[""static void dropTable(SSConnection con, String catalog, String tableName) throws Exception{"",""\t\tgetDatabase( con, catalog).dropTable( con, tableName);"",""\t}""]"
/smallsql/junit/TestAlterTable2/setUp(),"[""public void setUp(){"",""        tearDown();"",""    }""]"
/smallsql/database/ExpressionArithmetic/getMoneyImpl(),"[""private long getMoneyImpl() throws java.lang.Exception {"",""        switch(operation){"",""            case ADD: return left.getMoney() + right.getMoney();"",""            case SUB: return left.getMoney() - right.getMoney();"",""            case MUL: return left.getMoney() * right.getMoney() / 10000;"",""            case DIV: return left.getMoney() * 10000 / right.getMoney();\t\t\t\t\t"",""            case NEGATIVE: return \t\t\t - left.getMoney();"",""        }"",""        throw createUnspportedConversion( SQLTokenizer.MONEY );"",""    }""]"
/smallsql/database/ExpressionFunctionLocate/getFunction(),"[""int getFunction() {"",""\t\treturn SQLTokenizer.LOCATE;"",""\t}""]"
/smallsql/database/StorePageMap/containsKey(long),"[""/**"",""\t * Returns \<tt\>true\</tt\> if this map contains a StorePage for the"",""\t * specified key."",""\t *"",""\t */"",""\tfinal boolean containsKey(long key) {"",""\t\treturn (get(key) != null);"",""\t}""]"
/smallsql/database/SSConnection/nativeSQL(java.lang.String),"[""public String nativeSQL(String sql){"",""        return sql;"",""    }""]"
/smallsql/database/ExpressionName/isNullable(),"[""boolean isNullable(){"",""\t\treturn column.isNullable();"",""\t}""]"
/smallsql/database/ExpressionFunctionPI/getDouble(),"[""final double getDouble() throws Exception{"",""        return Math.PI;"",""    }""]"
"/smallsql/database/SSResultSet/getBigDecimal(int,int)","[""public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {"",""        try{"",""            MutableNumeric obj = getValue(columnIndex).getNumeric();"",""            wasNull = obj == null;"",""            if(wasNull) return null;"",""            return obj.toBigDecimal(scale);"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/TableView/writeMagic(java.nio.channels.FileChannel),"[""abstract void writeMagic(FileChannel raFile) throws Exception;""]"
"/smallsql/database/ExpressionFunctionTimestampDiff/ExpressionFunctionTimestampDiff(int,smallsql.database.Expression,smallsql.database.Expression)","[""ExpressionFunctionTimestampDiff(int intervalType, Expression p1, Expression p2){"",""\t\tinterval = mapIntervalType( intervalType );"",""\t\tsetParams( new Expression[]{p1,p2});"",""\t}""]"
/smallsql/database/DateTime/toString(int),"[""/**"",""\t * @param style a value like the syle of CONVERT function from MS SQL Server."",""\t */"",""\tString toString(int style){"",""\t\tif(style \< 0)"",""\t\t\treturn toString();"",""\t\tDetails details = new Details(time);"",""\t\tStringBuffer buf = new StringBuffer();"",""\t\tswitch(style){"",""\t\t\tcase 0:"",""\t\t\tcase 100: // mon dd yyyy hh:miAM (oder PM)"",""\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatHour12( details.hour, buf );"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append( details.hour \< 12 ? \""AM\"" : \""PM\"" );"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 1:   // USA mm/dd/yy"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 101:   // USA mm/dd/yyyy"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 2: // ANSI yy.mm.dd"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 102: // ANSI yyyy.mm.dd"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 3: // britsh dd/mm/yy"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 103: // britsh dd/mm/yyyy"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 4: // german dd.mm.yy"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 104: // german dd.mm.yyyy"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 5: // italiano dd-mm-yy"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 105: // italiano dd-mm-yyyy"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 6: // dd mon yy"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 106: // dd mon yyyy"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 7: // Mon dd, yy"",""\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\',\');"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 107: // Mon dd, yyyy"",""\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\',\');"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 8: //hh:mm:ss"",""\t\t\tcase 108:"",""\t\t\t\tformatNumber( details.hour, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.second, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 9:"",""\t\t\tcase 109: // mon dd yyyy hh:mi:ss:mmmAM (oder PM)"",""\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatHour12( details.hour, buf );"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.second, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatMillis( details.millis, buf);"",""\t\t\t\tbuf.append( details.hour \< 12 ? \""AM\"" : \""PM\"" );"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 10: // USA mm-dd-yy"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 110: // USA mm-dd-yyyy"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 11: // Japan yy/mm/dd"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 111: // Japan yy/mm/dd"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 12: // ISO yymmdd"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 112: // ISO yyyymmdd"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 13:"",""\t\t\tcase 113: // default + millis;  dd mon yyyy hh:mm:ss:mmm(24h)"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.hour, 2, buf );"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.second, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatMillis( details.millis, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 14:"",""\t\t\tcase 114: // hh:mi:ss:mmm(24h)"",""\t\t\t\tformatNumber( details.hour, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.second, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatMillis( details.millis, buf );"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 20:"",""\t\t\tcase 120: // ODBC kannonish; yyyy-mm-dd hh:mi:ss(24h)"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.hour, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.second, 2, buf);"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 21:"",""\t\t\tcase 121: // ODBC kannonish + millis; yyyy-mm-dd hh:mi:ss.mmm(24h)"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.hour, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.second, 2, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatMillis( details.millis, buf );"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 26:"",""\t\t\tcase 126: // ISO8601; yyyy-mm-ddThh:mi:ss.mmm(24h)"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'-\');"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'T\');"",""\t\t\t\tformatNumber( details.hour, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.second, 2, buf);"",""\t\t\t\tbuf.append(\'.\');"",""\t\t\t\tformatMillis( details.millis, buf );"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 130: // Kuwaiti  dd mon yyyy hh:mi:ss:mmmAM"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tbuf.append( SHORT_MONTHS[ details.month ]);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.year, 4, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatHour12( details.hour, buf );"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.second, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatMillis( details.millis, buf);"",""\t\t\t\tbuf.append( details.hour \< 12 ? \""AM\"" : \""PM\"" );"",""\t\t\t\treturn buf.toString();"",""\t\t\tcase 131: // Kuwaiti  dd/mm/yy hh:mi:ss:mmmAM"",""\t\t\t\tformatNumber( details.day, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.month+1, 2, buf);"",""\t\t\t\tbuf.append(\'/\');"",""\t\t\t\tformatNumber( details.year % 100, 2, buf);"",""\t\t\t\tbuf.append(\' \');"",""\t\t\t\tformatNumber( details.hour, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.minute, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatNumber( details.second, 2, buf);"",""\t\t\t\tbuf.append(\':\');"",""\t\t\t\tformatMillis( details.millis, buf );"",""\t\t\t\treturn buf.toString();"",""\t\t\tdefault:"",""\t\t\t\treturn toString();"",""\t\t}"",""\t\t"",""\t}""]"
/smallsql/database/ExpressionFunctionCase/getPrecision(),"[""final int getPrecision(){"",""\t\tint precision = 0;"",""\t\tfor(int i=results.size()-1; i\>=0; i--){"",""\t\t\tprecision = Math.max(precision, results.get(i).getPrecision());"",""\t\t}"",""\t\treturn precision;"",""\t}""]"
/smallsql/junit/TestOther/testCatalog(),"[""public void testCatalog() throws Exception{"",""        Connection con = DriverManager.getConnection(\""jdbc:smallsql\"");"",""        assertEquals( \""\"", con.getCatalog() );"",""        con.setCatalog( AllTests.CATALOG );"",""        assertEquals( AllTests.CATALOG, con.getCatalog() ); "",""        con.close();"",""        "",""        con = DriverManager.getConnection(\""jdbc:smallsql\"");"",""        assertEquals( \""\"", con.getCatalog() );"",""        con.createStatement().execute( \""Use \"" + AllTests.CATALOG );"",""        assertEquals( AllTests.CATALOG, con.getCatalog() ); "",""        con.close();"",""        "",""        con = DriverManager.getConnection(\""jdbc:smallsql?dbpath=\"" + AllTests.CATALOG);"",""        assertEquals( AllTests.CATALOG, con.getCatalog() ); "",""        con.close();"",""    }""]"
/smallsql/database/Distinct/getRow(),"[""final int getRow() throws Exception {"",""\t\treturn row;"",""\t}""]"
"/smallsql/database/MutableNumeric/MutableNumeric(long,int)","[""MutableNumeric(long complement, int scale){"",""        this( complement );"",""        this.scale = scale;"",""    }""]"
"/smallsql/database/DateTime/DateTime(long,int)","[""DateTime(long time, int dataType){"",""\t\tswitch(dataType){"",""        case SQLTokenizer.SMALLDATETIME:"",""            int seconds = (int)(time % 60000);"",""            if(seconds \< 0){"",""                seconds += 60000;"",""            }"",""            time -= seconds;"",""            break;"",""\t\tcase SQLTokenizer.TIME:"",""\t\t\ttime %= 86400000;"",""\t\t\tbreak;"",""\t\tcase SQLTokenizer.DATE:"",""\t\t\tint millis = (int)(time % 86400000);"",""\t\t\tif(millis \< 0)"",""\t\t\t\tmillis += 86400000;"",""\t\t\ttime -= millis;"",""\t\t\tbreak;"",""\t\t}"",""\t\tthis.time = time;"",""\t\tthis.dataType = dataType;"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnP1Number/getBoolean(),"[""final boolean getBoolean() throws Exception{"",""        return getDouble() != 0;"",""    }""]"
/smallsql/database/MemoryResult/rowInserted(),"[""final boolean rowInserted(){"",""\t\treturn false;"",""\t}""]"
/smallsql/database/Command/addParameter(smallsql.database.ExpressionValue),"[""void addParameter( ExpressionValue param ){"",""        params.add( param );"",""    }""]"
/smallsql/junit/TestStatement/testGeneratedKeysWithPrepare(),"[""public void testGeneratedKeysWithPrepare() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        ResultSet rs;"",""        "",""        PreparedStatement pr = con.prepareStatement(\""Insert Into statement(c) Values(\'key1\')\"", Statement.NO_GENERATED_KEYS);"",""        pr.execute();"",""        try{"",""            pr.getGeneratedKeys();"",""            fail(\""NO_GENERATED_KEYS\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""01000\"", 0, ex);"",""        }"",""        assertEquals(\""UpdateCount\"", 1, pr.getUpdateCount());"",""        assertNull(\""getResultSet\"", pr.getResultSet());"",""        pr.close();"",""        "",""        pr = con.prepareStatement(\""Insert Into statement(c) Values(\'key2\')\"", Statement.RETURN_GENERATED_KEYS);"",""        pr.execute();"",""        rs = pr.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",1,rs.getMetaData().getColumnCount());"",""        assertEquals(\""ColumnCount\"",\""i\"",rs.getMetaData().getColumnName(1));"",""        assertRowCount(1,rs);"","""",""        pr = con.prepareStatement(\""Insert Into statement(c) Values(\'key3\')\"", Statement.RETURN_GENERATED_KEYS);"",""        assertEquals(1,pr.executeUpdate());"",""        rs = pr.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",1,rs.getMetaData().getColumnCount());"",""        assertEquals(\""ColumnCount\"",\""i\"",rs.getMetaData().getColumnName(1));"",""        assertRowCount(1,rs);"","""",""        pr = con.prepareStatement(\""Insert Into statement(c) Values(\'key4\')\"", new int[]{2,1});"",""        pr.execute();"",""        rs = pr.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",2,rs.getMetaData().getColumnCount());"",""        assertRowCount(1,rs);"","""",""        pr = con.prepareStatement(\""Insert Into statement(c) Values(\'key5\')\"", new int[]{2});"",""        assertEquals(1,pr.executeUpdate());"",""        rs = pr.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",1,rs.getMetaData().getColumnCount());"",""        assertEquals(\""ColumnCount\"",\""i\"",rs.getMetaData().getColumnName(1));"",""        assertRowCount(1,rs);"","""",""        pr = con.prepareStatement(\""Insert Into statement(c) Values(\'key6\')\"", new String[]{\""c\"",\""i\""});"",""        pr.execute();"",""        rs = pr.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",2,rs.getMetaData().getColumnCount());"",""        assertRowCount(1,rs);"","""",""        pr = con.prepareStatement(\""Insert Into statement(c) Values(\'key7\')\"", new String[]{\""i\""});"",""        assertEquals(1,pr.executeUpdate());"",""        rs = pr.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",1,rs.getMetaData().getColumnCount());"",""        assertEquals(\""ColumnCount\"",\""i\"",rs.getMetaData().getColumnName(1));"",""        assertRowCount(1,rs);"",""    }""]"
/smallsql/database/MemoryResult/afterLast(),"[""final void afterLast(){"",""\t\trowIdx = rowList.size();"",""\t\tcurrentRow = null;"",""\t}""]"
/smallsql/database/StoreImpl/readLongBinary(),"[""byte[] readLongBinary() throws Exception{"",""        long lobFilePos = readLong();"",""        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );"",""        return store.readBytes( store.readInt() );"",""    }""]"
"/smallsql/database/StoreImpl/getInt(int,int)","[""/**"",""     * It used for ResultSet.getInt()"",""     */"",""    @Override"",""    int getInt(int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    return readBoolean() ? 1 : 0;"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return Utils.bytes2int( readBinary() );"",""            case SQLTokenizer.TINYINT:"",""                    return readUnsignedByte();"",""            case SQLTokenizer.SMALLINT:"",""                    return readShort();"",""            case SQLTokenizer.INT:"",""                    return readInt();"",""            case SQLTokenizer.BIGINT:"",""                    return (int)readLong();"",""            case SQLTokenizer.REAL:"",""                    return (int)readFloat();"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return (int)readDouble();"",""            case SQLTokenizer.MONEY:"",""            \t\tlong longValue = readLong() / 10000;"",""            \t\treturn Utils.money2int(longValue);"",""            case SQLTokenizer.SMALLMONEY:"",""                    return readInt() / 10000;"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return readNumeric().intValue();"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return Integer.parseInt( readString() );"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return Integer.parseInt( readLongString() );"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());"",""                    ObjectInputStream ois = new ObjectInputStream(bais);"",""                    return ExpressionValue.getInt(ois.readObject().toString(), SQLTokenizer.VARCHAR);"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return Utils.bytes2int( readLongBinary() );"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\t\treturn (int)readTimestamp();"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\treturn (int)readTime();"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\treturn (int)readDate();"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\treturn (int)readSmallDateTime();"",""\t\t\tdefault:"",""\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \""INT\"" });"",""        }"",""    }""]"
/smallsql/database/StoreImpl/readUnsignedByte(),"[""int readUnsignedByte(){"",""        return page[ offset++ ] & 0xFF;"",""    }""]"
/smallsql/database/RowSource/beforeFirst(),"[""/**"",""\t * Equals to ResultSet.beforeFirst()"",""\t */"",""\tabstract void beforeFirst() throws Exception;""]"
/smallsql/junit/TestGroupBy/testMaxBigInt(),"[""public void testMaxBigInt() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Long(2), \""Select max(cast(id as BigInt)) FROM \"" + table1);"",""\t}""]"
/smallsql/database/SSCallableStatement/getBoolean(int),"[""public boolean getBoolean(int i) throws SQLException {"",""        try{"",""            Expression expr = getValue(i);"",""            wasNull = expr.isNull();"",""            return expr.getBoolean();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SSResultSet/getTimestamp(int),"[""public Timestamp getTimestamp(int columnIndex) throws SQLException {"",""        try{"",""\t\t\tExpression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""\t\t\tif(wasNull) return null;"",""\t\t\treturn DateTime.getTimestamp( expr.getLong() );"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
"/smallsql/database/Store/getInt(int,int)","[""abstract int getInt( int offset, int dataType) throws Exception;""]"
/smallsql/database/StoreImpl/deleteRow(smallsql.database.SSConnection),"[""@Override"",""    void deleteRow(SSConnection con) throws SQLException{"",""\t\tstatus = DELETED;"",""\t\ttype   = SQLTokenizer.DELETE;"",""\t\tcreateWriteLock();"",""\t\twriteFinsh(con);"",""\t}""]"
/smallsql/database/NoFromResult/isAfterLast(),"[""final boolean isAfterLast(){"",""\t\treturn rowPos \> 1;"",""\t}""]"
/smallsql/junit/TestDeleteUpdate/TestDeleteUpdate(),"[""/**"",""\t * "",""\t */"",""\tpublic TestDeleteUpdate() {"",""\t\tsuper();"",""\t}""]"
/smallsql/junit/TestDBMetaData/TestDBMetaData(),"[""public TestDBMetaData(){"",""\t\tsuper();"",""\t}""]"
/smallsql/junit/BenchTest/deleteTestTable(java.sql.Connection),"[""static void deleteTestTable(Connection con){"",""        try{"",""            Statement st = con.createStatement();"",""            st.execute(\""DELETE FROM \"" + tableName);"",""            st.close();"",""        }catch(Exception e){/* ignore it */}"",""    }""]"
/smallsql/database/ExpressionFunctionPI/isNull(),"[""boolean isNull() throws Exception{"",""        return false;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsOuterJoins(),"[""public boolean supportsOuterJoins() {"",""    \treturn true;"",""    }""]"
"/smallsql/database/CommandTable/CommandTable(smallsql.database.Logger,java.lang.String,java.lang.String,int)","[""CommandTable( Logger log, String catalog, String name, int tableCommandType ){"",""    \tsuper(log);"",""        this.type = SQLTokenizer.TABLE;"",""        this.catalog = catalog;"",""        this.name = name;"",""        this.tableCommandType = tableCommandType;"",""    }""]"
/smallsql/database/ExpressionValue/clear(),"[""final void clear(){"",""        value = EMPTY;"",""    }""]"
/smallsql/database/ExpressionFunctionReturnString/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Integer.parseInt(getString().trim());"",""\t}""]"
"/smallsql/junit/BasicTestCase/assertEqualsObject(java.lang.String,java.lang.Object,java.lang.Object,boolean)","[""public void assertEqualsObject( String msg, Object obj1, Object obj2, boolean needTrim ){"",""        if(needTrim && obj1 != null){"",""            // trim for CHAR and BINARY"",""            if(obj1 instanceof String) obj1 = ((String)obj1).trim();"",""            if(obj1 instanceof byte[]){"",""                byte[] tmp = (byte[])obj1;"",""                int k=tmp.length-1;"",""                for(; k\>= 0; k--) if(tmp[k] != 0) break;"",""                k++;"",""                byte[] tmp2 = new byte[k];"",""                System.arraycopy( tmp, 0, tmp2, 0, k);"",""                obj1 = tmp2;"",""            }"",""        }"",""\t\tif(needTrim && obj2 != null){"",""\t\t\t// trim for CHAR and BINARY"",""\t\t\tif(obj2 instanceof String) obj2 = ((String)obj2).trim();"",""\t\t\tif(obj2 instanceof byte[]){"",""\t\t\t\tbyte[] tmp = (byte[])obj2;"",""\t\t\t\tint k=tmp.length-1;"",""\t\t\t\tfor(; k\>= 0; k--) if(tmp[k] != 0) break;"",""\t\t\t\tk++;"",""\t\t\t\tbyte[] tmp2 = new byte[k];"",""\t\t\t\tSystem.arraycopy( tmp, 0, tmp2, 0, k);"",""\t\t\t\tobj2 = tmp2;"",""\t\t\t}"",""\t\t}"",""\t\tassertEqualsObject( msg, obj1, obj2);"",""    }""]"
/smallsql/database/SSConnection/createStatement(),"[""public Statement createStatement() throws SQLException {"",""        return new SSStatement(this);"",""    }""]"
/smallsql/database/ExpressionValue/equals(java.lang.Object),"[""/**"",""\t * Is used in GroupResult."",""\t */"",""\tpublic boolean equals(Object expr){"",""\t\tif(!super.equals(expr)) return false;"",""\t\tif(!(expr instanceof ExpressionValue)) return false;"",""\t\tObject v = ((ExpressionValue)expr).value;"",""\t\tif(v == value) return true;"",""\t\tif(value == null) return false;"",""\t\treturn value.equals(v);"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setBlob(int,java.sql.Blob)","[""public void setBlob(int i, Blob x) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setBlob() not yet implemented.\"");"",""    }""]"
"/smallsql/database/Utils/hex2bytes(char[],int,int)","[""static byte[] hex2bytes( char[] hex, int offset, int length) throws SQLException{"",""        try{"",""            byte[] bytes = new byte[length / 2];"",""            for(int i=0; i\<bytes.length; i++){"",""                bytes[i] = (byte)((hexDigit2int( hex[ offset++ ] ) \<\< 4)"",""                                | hexDigit2int( hex[ offset++ ] ));"",""            }"",""            return bytes;"",""        }catch(Exception e){"",""             throw SmallSQLException.create(Language.SEQUENCE_HEX_INVALID, String.valueOf(offset)); /*, offset*/"",""        }"",""    }""]"
/smallsql/junit/TestGroupBy/testSumDecimal(),"[""public void testSumDecimal() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new BigDecimal(\""4.00\""), \""Select sum(cast(id as decimal(38,2))) FROM \"" + table1);"",""\t}""]"
/smallsql/database/DateTime/getTimestamp(long),"[""static Timestamp getTimestamp(long time){"",""\t\treturn new Timestamp( DateTime.addDateTimeOffset(time) ); "",""\t}""]"
/smallsql/database/ExpressionName/equals(java.lang.Object),"[""/**"",""     * Is used in GroupResult."",""     */"",""    public boolean equals(Object expr){"",""    \tif(!super.equals(expr)) return false;"",""    \tif(!(expr instanceof ExpressionName)) return false;"",""    \tif( ((ExpressionName)expr).fromEntry != fromEntry) return false;"",""    \treturn true;"",""    }""]"
"/smallsql/database/Utils/hex2byte(char[],int)","[""private static byte hex2byte( char[] hex, int offset) throws SQLException{"",""        try{"",""                return (byte)((hexDigit2int( hex[ offset++ ] ) \<\< 4)"",""                                | hexDigit2int( hex[ offset++ ] ));"",""        }catch(Exception e){"",""             throw SmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR, new Object[] { new Integer(offset), new String(hex) });"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1Number/getString(),"[""String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn getObject().toString();"",""\t}""]"
"/smallsql/database/View/View(smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long)","[""/**"",""\t * Constructor for loading an existing view. "",""\t */"",""\tView(SSConnection con, String name, FileChannel raFile, long offset) throws Exception{"",""\t\tsuper( name, new Columns() );"",""\t\tStorePage storePage = new StorePage( null, -1, raFile, offset);"",""\t\tStoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);"",""\t\tsql = store.readString();"",""\t\t"",""\t\t// read additional informations"",""\t\tint type;"",""\t\twhile((type = store.readInt()) != 0){"",""\t\t\tint offsetInPage = store.getCurrentOffsetInPage();"",""\t\t\tint size = store.readInt();"",""\t\t\tswitch(type){"",""\t\t\t\t//currently there are no additinal informations, see write()"",""\t\t\t}"",""\t\t\tstore.setCurrentOffsetInPage(offsetInPage + size);"",""\t\t}"",""\t\t"",""\t\traFile.close();"",""\t\tcommandSelect = (CommandSelect)new SQLParser().parse(con, sql);"",""\t\tcreateColumns(con);"",""\t}""]"
/smallsql/database/DateTime/now(),"[""static long now(){\t"",""\t\treturn removeDateTimeOffset( System.currentTimeMillis() );"",""\t}""]"
/smallsql/database/Scrollable/absolute(int),"[""boolean absolute(int row) throws Exception{"",""\t\tif(row == 0)"",""\t\t\tthrow SmallSQLException.create(Language.ROW_0_ABSOLUTE);"",""\t\tif(row \< 0){"",""\t\t\tafterLast();"",""\t\t\trowIdx = rowList.size() + row;"",""\t\t\tif(rowIdx \< 0){"",""\t\t\t\tbeforeFirst();"",""\t\t\t\treturn false;"",""\t\t\t}else{"",""\t\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );"",""\t\t\t\treturn true;"",""\t\t\t}"",""\t\t}"",""\t\tif(row \<= rowList.size()){"",""\t\t\trowIdx = row-1;"",""\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );"",""\t\t\treturn true;"",""\t\t}"",""\t\t"",""\t\trowIdx = rowList.size()-1;"",""\t\tif(rowIdx \>= 0)"",""\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );"",""\t\tboolean result;"",""\t\twhile((result = next()) && row-1 \> rowIdx){/* scroll forward */}"",""\t\treturn result;"",""\t}""]"
/smallsql/database/Database/getTables(java.lang.String),"[""Strings getTables(String tablePattern){"",""\t\tStrings list = new Strings();"",""\t\tFile dirs[] = directory.listFiles();    "",""\t\tif(dirs != null)"",""\t\t\tif(tablePattern == null) tablePattern = \""%\""; "",""\t\t\ttablePattern += Utils.TABLE_VIEW_EXTENTION;"",""\t\t\tfor(int i=0; i\<dirs.length; i++){"",""\t\t\t\tString name = dirs[i].getName();"",""\t\t\t\tif(Utils.like(name, tablePattern)){"",""\t\t\t\t\tlist.add(name.substring( 0, name.length()-Utils.TABLE_VIEW_EXTENTION.length() ));"",""\t\t\t\t}"",""\t\t\t}"",""    \treturn list;"",""    }""]"
/smallsql/database/ViewResult/deleteRow(),"[""void deleteRow() throws SQLException{"",""\t\tcommandSelect.deleteRow(con);"",""\t}""]"
/smallsql/database/Distinct/setRowPosition(long),"[""final void setRowPosition(long rowPosition) throws Exception {"",""\t\trowSource.setRowPosition(rowPosition);"",""\t}""]"
/smallsql/database/SSResultSet/getString(java.lang.String),"[""public String getString(String columnName) throws SQLException {"",""        return getString( findColumn( columnName ) );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxStatementLength(),"[""public int getMaxStatementLength() {"",""    \treturn 0;"",""    }""]"
"/smallsql/database/SSResultSet/updateString(int,java.lang.String)","[""public void updateString(int columnIndex, String x) throws SQLException {"",""\t\tupdateValue( columnIndex, x, SQLTokenizer.VARCHAR);"",""    }""]"
/smallsql/database/SSCallableStatement/getObject(java.lang.String),"[""public Object getObject(String parameterName) throws SQLException {"",""        return getObject( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxConnections(),"[""public int getMaxConnections() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/SSResultSet/getRef(java.lang.String),"[""public Ref getRef(String columnName) throws SQLException {"",""        return getRef( findColumn( columnName ) );"",""    }""]"
/smallsql/junit/TestScrollable/testLastWithWhere(),"[""public void testLastWithWhere() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.createStatement().execute(\""Create Table Scrollable (i counter, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from Scrollable\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into Scrollable(v) Values(\'qwert\')\"");"",""\t\t\tassertRowCount( 1, \""Select * from Scrollable\"");"",""\t\t\tassertRowCount( 0, \""Select * from Scrollable Where 1=0\"");"","""",""\t\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""            testLastWithWhereAssert( st.executeQuery(\""Select * from Scrollable Where 1=0\"") );"",""            testLastWithWhereAssert( st.executeQuery(\""Select * from Scrollable Where 1=0 Order By v\"") );"",""            testLastWithWhereAssert( st.executeQuery(\""Select v from Scrollable Where 1=0 Order By v\"") );"",""            testLastWithWhereAssert( st.executeQuery(\""Select v from Scrollable Where 1=0 Group By v Order By v\"") );"",""\t\t}finally{"",""            dropTable( con, \""Scrollable\"");"",""\t\t}"",""\t}""]"
/smallsql/database/SSCallableStatement/wasNull(),"[""public boolean wasNull(){"",""        return wasNull;"",""    }""]"
/smallsql/database/MemoryResult/nullRow(),"[""void nullRow(){"",""\t\tthrow new Error();"",""\t}""]"
/smallsql/database/StoreImpl/readShort(),"[""int readShort(){"",""        return (page[ offset++ ] \<\< 8) | (page[ offset++ ] & 0xFF);"",""    }""]"
/smallsql/database/SmallSQLException/createFromException(java.lang.Throwable),"[""static SQLException createFromException( Throwable e ){"",""        if(e instanceof SQLException) {"",""        \treturn (SQLException)e;"",""        }"",""        else {"",""        \tString message = stripMsg(e);"",""        \tString sqlState = language.getSqlState(Language.CUSTOM_MESSAGE);"",""        \treturn new SmallSQLException(e, message, sqlState);"",""        }"",""    }""]"
/smallsql/database/DataSources/size(),"[""final int size(){"",""\t\treturn size;"",""\t}""]"
/smallsql/database/Where/getFrom(),"[""RowSource getFrom(){"",""\t\treturn rowSource;"",""\t}""]"
/smallsql/database/ExpressionFunctionRound/isNull(),"[""boolean isNull() throws Exception{"",""        return param1.isNull() || param2.isNull();"",""    }""]"
/smallsql/junit/TestGroupBy/testGroupByWithExpression(),"[""public void testGroupByWithExpression() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tPreparedStatement pr = con.prepareStatement(\""Select sum(id), name+\'a\' as ColumnName FROM \"" + table1 + \"" Group By name+\'a\' Order By Name+\'a\'\"");"",""\t\tfor(int i=1; i\<=3; i++){"",""\t\t\tResultSet rs = pr.executeQuery( );"",""\t\t\tassertTrue  ( \""loop:\""+i, rs.next());"",""\t\t\tassertEquals( \""loop:\""+i, 3, rs.getInt(1));"",""\t\t\tassertTrue  ( \""loop:\""+i, rs.next());"",""\t\t\tassertEquals( \""loop:\""+i, 1, rs.getInt(1));"",""\t\t\tassertEquals( \""loop:\""+i+\"" Alias name von Expression\"", \""ColumnName\"", rs.getMetaData().getColumnName(2));"",""\t\t}"",""\t}""]"
/smallsql/database/GroupResult/patchExpressions(smallsql.database.Expression),"[""final private void patchExpressions(Expression expression) throws SQLException{"",""\t\tExpression[] params = expression.getParams();"",""\t\tif(params == null) return;"",""\t\tfor(int i=0; i\<params.length; i++){"",""\t\t\texpression.setParamAt( patchExpression(params[i]), i);"",""\t\t}"",""\t}""]"
/smallsql/database/ViewResult/getBoolean(int),"[""boolean getBoolean(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getBoolean();"",""\t}""]"
/smallsql/database/Money/Money(),"[""/**"",""     * Is use from factory methods only."",""     */"",""    private Money(){/* should be empty */}""]"
/smallsql/database/Join/next(),"[""boolean next() throws Exception{"",""        if(isAfterLast) return false;"",""        row++;"",""        boolean result = scroll.next();"",""        if(!result){"",""            noRow();"",""        }"",""        return result;"",""    }""]"
/smallsql/junit/BenchTest/test_RowRequestPages(java.sql.Connection),"[""/**"",""      *  6. Test"",""      *  Request one page of rows from a large ResultSet."",""      */  "",""    static void test_RowRequestPages(Connection con){"",""        int pages = 100; "",""        int rows  = rowCount / pages;"",""        System.out.println();"",""        System.out.println( \""Test request row pages : \"" + pages + \"" pages, \"" +rows + \"" rows per page\"");"",""        try{"",""            Statement st1 = con.createStatement();"",""            ResultSet rs = st1.executeQuery( \""SELECT count(*) FROM \"" + tableName);"",""            rs.next();"",""            int count = rs.getInt(1);"",""            if (count != rowCount){"",""                // There are not the correct count of rows."",""                if (count == 0){"",""                    createTestDataWithClassicInsert( con );"",""                    rs = st1.executeQuery( \""SELECT count(*) FROM \"" + tableName);"",""                    rs.next();"",""                    count = rs.getInt(1);"",""                }"",""                if (count != rowCount){"",""                    System.out.println( \""  Failed: Only \"" + (rowCount-count) + \"" rows were found.\"");"",""                    return;"",""                }"",""            }"",""            st1.close();"",""            "",""            long time = -System.currentTimeMillis();"",""            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);"",""            st.setFetchSize( rows );"",""            for (int i=0; i\<pages; i++){"",""                rs = st.executeQuery(\""SELECT * FROM \"" + tableName);"",""                rs.absolute( i*rows+1 );"",""                for (int r=1; r\<rows; r++){"",""                    // only (rows-1) rows because absolute has already the first row"",""                    if (!rs.next()){"",""                        System.out.println( \""  Failed: No rows were found at page \"" + i + \"" page and row \"" + r);"",""                        return;"",""                    }"",""                    int col_i = rs.getInt(\""i\"");"",""                    if (col_i != (i*rows+r)){"",""                        System.out.println( \""  Failed: Wrong row \"" + col_i + \"", it should be row \"" + (i*rows+r));"",""                        return;"",""                    }"",""                }"",""            }"",""            time += System.currentTimeMillis();"",""            System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            st.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
"/smallsql/database/StoreNoCurrentRow/scanObjectOffsets(int[],int[])","[""void scanObjectOffsets(int[] offsets, int[] dataTypes) {"",""\t\t// TODO Auto-generated method stub"","""",""\t}""]"
/smallsql/database/ExpressionName/toString(),"[""final public String toString(){"",""        if(tableAlias == null) return String.valueOf(getAlias());"",""        return tableAlias + \"".\"" + getAlias();"",""    }""]"
/smallsql/database/RowSource/rowInserted(),"[""/**"",""\t * If the current row is inserted in this ResultSet."",""\t */"",""\tabstract boolean rowInserted();""]"
/smallsql/database/language/Language_de/getEntries(),"[""public String[][] getEntries() {"",""\t\treturn ENTRIES;"",""\t}""]"
/smallsql/database/SSResultSet/getBigDecimal(java.lang.String),"[""public BigDecimal getBigDecimal(String columnName) throws SQLException {"",""        return getBigDecimal( findColumn( columnName ) );"",""    }""]"
/smallsql/database/MutableLong/floatValue(),"[""public float floatValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/junit/TestExceptionMethods/testDuplicatedColumnCreate(),"[""public void testDuplicatedColumnCreate() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        try{"",""            st.execute(\""Create Table DuplicatedColumn(col INT, Col INT)\"");"",""            fail(\""SQLException \'Duplicated Column\' should be throw\"");"",""        }catch(SQLException e){"",""            assertSQLException(\""01000\"", 0, e);"",""        }"",""    }""]"
/smallsql/database/RowSource/afterLast(),"[""abstract void afterLast() throws Exception;""]"
/smallsql/junit/TestFunctions/TestFunctions(smallsql.junit.TestFunctions.TestValue),"[""TestFunctions(TestValue testValue){"",""        super(testValue.function);"",""        this.testValue = testValue;"",""    }""]"
/smallsql/database/MutableNumeric/divImpl(int),"[""final private void divImpl(int quotient){\t"",""\t\tif(quotient == 1) return;"",""\t\tif(quotient \< 0){"",""\t\t\tquotient = - quotient;"",""\t\t\tsignum = -signum;"",""\t\t}"",""\t\tint valueLength = value.length;"",""\t\tlong carryover = 0;"",""\t\tfor(int i = 0; i\<valueLength; i++){"",""\t\t\tlong v = (value[i] & 0xFFFFFFFFL) + carryover;"",""\t\t\tvalue[i] = (int)(v / quotient);"",""\t\t\tcarryover = ((v % quotient) \<\< 32);"",""\t\t}"",""\t\tcarryover /= quotient;"",""\t\tif(carryover \> 2147483648L || //2147483648L == Integer.MAX_VALUE+1"",""\t\t  (carryover == 2147483648L && (value[valueLength-1] % 2 == 1))){"",""\t\t\tint i = valueLength-1;"",""\t\t\tboolean isCarryOver = true;"",""\t\t\twhile(i \>= 0 && isCarryOver)"",""\t\t\t\tisCarryOver = (value[i--] += 1) == 0;"",""\t\t}"",""\t\tif(valueLength\>1 && value[0] == 0){"",""\t\t\tint[] temp = new int[valueLength-1];"",""\t\t\tSystem.arraycopy(value, 1, temp, 0, valueLength-1);"",""\t\t\tvalue = temp;"",""\t\t}"",""\t\t\t"",""\t}""]"
"/smallsql/database/SSResultSet/updateRef(java.lang.String,java.sql.Ref)","[""public void updateRef(String columnName, Ref x) throws SQLException {"",""        updateRef( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/MutableNumeric/div(int),"[""final void div(int quotient){"",""\t\t//increment the scale with 5"",""\t\tmul(100000);"",""\t\tscale += 5;"",""\t\t"",""\t\tdivImpl(quotient);"",""\t}""]"
/smallsql/junit/TestStatement/testMultiValues(),"[""public void testMultiValues() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""    \tassertEquals(\""Update Count:\"", 10, st.executeUpdate(\""Insert Into statement(c) Values(\'abc1\'),(\'abc2\'),(\'abc3\'),(\'abc4\'),(\'abc5\'),(\'abc6\'),(\'abc7\'),(\'abc8\'),(\'abc9\'),(\'abc10\')\""));"",""    }""]"
/smallsql/database/SSPreparedStatement/executeBatch(),"[""public int[] executeBatch() throws BatchUpdateException {"",""\t\tif(batches == null || batches.size() == 0) return new int[0];"",""\t\tint[] result = new int[batches.size()];"",""\t\tBatchUpdateException failed = null;"",""\t\tfor(int b=0; b\<batches.size(); b++){"",""\t\t\ttry{"",""                checkStatement();"",""\t\t\t\tExpressionValue[] values = (ExpressionValue[])batches.get(b);"",""\t\t\t\tfor(int i=0; i\<values.length; i++){"",""\t\t\t\t\t((ExpressionValue)cmd.params.get(i)).set( values[i] );"",""\t\t\t\t}"",""\t\t\t\tresult[b] = executeUpdate();"",""\t\t\t} catch (SQLException ex) {"",""\t\t\t\tresult[b] = EXECUTE_FAILED;"",""\t\t\t\tif(failed == null){"",""\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);"",""\t\t\t\t\tfailed.initCause(ex);"",""\t\t\t\t}"",""\t\t\t\tfailed.setNextException(ex);"",""\t\t\t}"",""\t\t}"",""    \tbatches.clear();"",""    \tif(failed != null)"",""    \t\tthrow failed;"",""    \treturn result;"",""\t}""]"
/smallsql/database/SSStatement/close(),"[""final public void close(){"",""        con.log.println(\""Statement.close\"");"",""        isClosed = true;"",""        cmd = null;"",""        // TODO make Resources free;"",""    }""]"
/smallsql/database/SSResultSetMetaData/getCatalogName(int),"[""public String getCatalogName(int column) throws SQLException {"",""        return null;"",""    }""]"
/smallsql/junit/TestFunctions/runTest(),"[""public void runTest() throws Exception{"",""    \tString query = \""Select \"" + testValue.function + \"",5 from \"" + table;"",""\t\tassertEqualsRsValue( testValue.result, query);"",""        if(!testValue.function.startsWith(\""Top\"")){"",""            assertEqualsRsValue( testValue.result, \""Select \"" + testValue.function + \"" from \"" + table + \"" Group By \"" + testValue.function);"",""        }"",""    }""]"
/smallsql/database/ExpressionName/setNameAfterTableAlias(java.lang.String),"[""void setNameAfterTableAlias(String name){"",""        tableAlias = getName();"",""\t\tsetName( name );"",""    }""]"
/smallsql/database/NoFromResult/isScrollable(),"[""final boolean isScrollable(){"",""\t\treturn true;"",""\t}""]"
/smallsql/database/StoreImpl/readFloat(),"[""float readFloat(){"",""        return Float.intBitsToFloat( readInt() );"",""    }""]"
/smallsql/database/MemoryResult/getDataType(int),"[""int getDataType( int colIdx ){"",""\t\treturn columns.get( colIdx ).getDataType();"",""\t\t//return get( colIdx ).getDataType(); // problems if no currentRow"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setTime(int,java.sql.Time)","[""public void setTime(int parameterIndex, Time x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIME);"",""    }""]"
/smallsql/database/SSPreparedStatement/execute(),"[""public boolean execute() throws SQLException {"",""\t\texecuteImp();"",""        return cmd.getResultSet() != null;"",""    }""]"
"/smallsql/database/SSResultSet/updateInt(int,int)","[""public void updateInt(int columnIndex, int x) throws SQLException {"",""\t\tupdateValue( columnIndex, Utils.getInteger(x), SQLTokenizer.INT);"",""    }""]"
/smallsql/database/SSStatement/getGeneratedKeyNames(),"[""final String[] getGeneratedKeyNames(){"",""        return generatedKeyNames;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsNonNullableColumns(),"[""public boolean supportsNonNullableColumns() {"",""    \treturn true;"",""    }""]"
/smallsql/junit/TestFunctions/setUp(),"[""public void setUp(){"",""        tearDown();"",""        try{"",""            Connection con = AllTests.getConnection();"",""            Statement st = con.createStatement();"",""            st.execute(\""create table \"" + table + \""(aInt int, aVarchar varchar(100))\"");"",""            st.execute(\""Insert into \"" + table + \""(aInt, aVarchar) Values(-120,\'qwert\')\"");"",""            st.close();"",""        }catch(Throwable e){"",""            e.printStackTrace();"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Integer.parseInt(getString().trim());"",""\t}""]"
"/smallsql/database/Index/findRows(smallsql.database.Expression[],boolean,java.util.ArrayList)","[""/**"",""     * Returns a Long (unique) or a LongTreeList with rowOffsets. If the value in expressions does not exist then it"",""     * return a null."",""     * "",""     * @param expressions"",""     *            The value that are search in the Index."",""     * @param searchNullValues"",""     *            a expression with NULL values should return a result."",""     * @param nodeList"",""     *            optional, can be null. The search path in the index tree."",""     */"",""    final Object findRows(Expression[] expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{"",""        IndexNode page = rootPage;"",""        int count = expressions.length;"",""        for(int i = 0; i \< count; i++){"",""            page = findRows(page, expressions[i], searchNullValues, nodeList);"",""            if(page == null)"",""                return null;"",""            if(i + 1 == count)"",""                return page.getValue();"",""            else"",""                page = (IndexNode)page.getValue();"",""        }"",""        throw new Error();"",""    }""]"
"/smallsql/database/SSResultSet/updateObject(int,java.lang.Object)","[""public void updateObject(int columnIndex, Object x) throws SQLException {"",""    \tupdateValue( columnIndex, x, -1);"",""    }""]"
/smallsql/database/Distinct/execute(),"[""final void execute() throws Exception{"",""\t\trowSource.execute();"",""\t\tindex = new Index(true);\t"",""\t}""]"
"/smallsql/database/GroupResult/GroupResult(smallsql.database.CommandSelect,smallsql.database.RowSource,smallsql.database.Expressions,smallsql.database.Expression,smallsql.database.Expressions)","[""/**"",""\t * Constructor for Grouping a Result from a CommandSelect"",""\t */"",""\tGroupResult(CommandSelect cmd, RowSource from, Expressions groupBy, Expression having, Expressions orderBy) throws SQLException{"",""\t\tthis.from = from;"",""\t\tthis.groupBy = groupBy;"",""\t\t"",""\t\tif(groupBy != null){"",""\t\t\tfor(int i=0; i\<groupBy.size(); i++){"",""\t\t\t\tExpression left = groupBy.get(i);"",""\t\t\t\tint idx = addInternalExpressionFromGroupBy( left );"",""\t\t\t\tExpressionName right = new ExpressionName(null);"",""\t\t\t\tright.setFrom(this, idx, new ColumnExpression(left));"",""\t\t\t\tExpression expr = new ExpressionArithmetic( left, right, ExpressionArithmetic.EQUALS_NULL);"",""\t\t\t\tcurrentGroup = (currentGroup == null) ? "",""\t\t\t\t\t\t\t\texpr :"",""\t\t\t\t\t\t\t\tnew ExpressionArithmetic( currentGroup, expr, ExpressionArithmetic.AND );"",""\t\t\t}"",""\t\t}"",""\t\texpressions = internalExpressions;"",""        for(int c=0; c\<expressions.size(); c++){"",""            addColumn(new ColumnExpression(expressions.get(c)));"",""        }"","""",""\t\tpatchExpressions( cmd.columnExpressions );"",""\t\tif(having != null) having = patchExpression( having );"",""\t\tpatchExpressions( orderBy );"",""\t}""]"
/smallsql/database/SSResultSet/getDouble(java.lang.String),"[""public double getDouble(String columnName) throws SQLException {"",""        return getDouble( findColumn( columnName ) );"",""    }""]"
/smallsql/database/ExpressionFunctionLTrim/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull();"",""\t}""]"
/smallsql/database/DataSource/getBytes(int),"[""abstract byte[] getBytes( int colIdx ) throws Exception;""]"
/smallsql/database/ExpressionFunctionIIF/getLong(),"[""long getLong() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.getLong();"",""\t\treturn param3.getLong();"",""\t}""]"
/smallsql/junit/TestTransactions/testInsertRow_withWrongWhere(),"[""/**"",""     * If there was insert a row within the ResultSet that not map WHERE than you scroll to this row. If there an Insert"",""     * outsite the ResultSet that not map the WHERE then you can\'t scroll this row."",""     * "",""     * @throws Exception"",""     */"",""\tpublic void testInsertRow_withWrongWhere() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.setAutoCommit(false);"",""\t\t\tcon.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert\')\"");"","""",""\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)"",""\t\t\t\t\t\t\t\t.executeQuery(\""Select * from transactions Where 1=0\"");"",""\t\t\t"",""\t\t\trs.moveToInsertRow();"",""\t\t\trs.updateString(\""v\"", \""qwert2\"");"",""\t\t\trs.insertRow();"",""\t\t\t"",""\t\t\trs.beforeFirst();"",""\t\t\tassertTrue( rs.next() );"",""\t\t\tassertEquals(\""qwert2\"", rs.getString(\""v\""));"",""\t\t\tassertFalse( rs.next() );"",""\t\t}finally{"",""\t\t\ttry{"",""\t\t\t\tcon.createStatement().execute(\""Drop Table transactions\"");"",""\t\t\t}catch(Throwable e){e.printStackTrace();}"",""\t\t\tcon.setAutoCommit(true);"",""\t\t}"",""\t}""]"
/smallsql/database/RowSource/nullRow(),"[""/**"",""\t * Is used for OUTER JOIN to set the RowSource to NULL if the row exists"",""\t * only in the major RowSource (table)"",""\t */"",""\tabstract void nullRow();""]"
/smallsql/junit/TestOther/testInSelect(),"[""public void testInSelect() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{"",""\t\t\tcon.createStatement().execute(\""Create Table TestInSelect (i counter, v varchar(20), n bigint, b boolean)\"");"",""\t\t\tassertRowCount( 0, \""Select * From TestInSelect WHere i In (Select i from TestInSelect)\"" );"","""",""\t\t\tcon.createStatement().execute(\""Insert Into TestInSelect(v,b) Values(\'qwert1\',true)\"");"",""\t\t\tassertRowCount( 1, \""Select * From TestInSelect WHere i In (Select i from TestInSelect)\"" );"","""",""\t\t\tcon.createStatement().execute(\""Insert Into TestInSelect(v,b) Values(\'qwert1\',true)\"");"",""\t\t\tassertRowCount( 2, \""Select * From TestInSelect WHere i In (Select i from TestInSelect)\"" );"",""\t\t\tassertRowCount( 1, \""Select * From TestInSelect WHere i In (Select i from TestInSelect Where i\>1)\"" );"",""\t\t\tassertRowCount( 1, \""Select * From TestInSelect Where i IN ( 1, 1, 12345, 987654321)\"" );"",""\t\t\tassertRowCount( 2, \""Select * From TestInSelect Where v IN ( null, \'\', \'qwert1\', \'qwert1\')\"" );"",""\t\t\tassertRowCount( 2, \""Select * From TestInSelect Where v IN ( \'qwert1\')\"" );"",""\t\t\tassertRowCount( 0, \""Select * From TestInSelect Where \'\' IN ( \'qwert1\')\"" );"",""\t\t\tassertRowCount( 2, \""Select * From TestInSelect Where \'qwert1\' IN ( \'qwert1\', \'qwert2\')\"" );"",""\t\t}finally{"",""            dropTable( con, \""TestInSelect\"" );"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionFunctionRepeat/getBytes(),"[""final byte[] getBytes() throws Exception{"",""        if(isNull()) return null;"",""        byte[] bytes = param1.getBytes();"",""        int count  = param2.getInt();"",""        ByteArrayOutputStream buffer = new ByteArrayOutputStream();"",""        for(int i=0; i\<count; i++){"",""            buffer.write(bytes);"",""        }"",""        return buffer.toByteArray();"",""\t}""]"
/smallsql/database/MutableDouble/getImmutableObject(),"[""public Object getImmutableObject(){"",""\t\treturn new Double(value);"",""\t}""]"
"/smallsql/database/StoreNoCurrentRow/getDouble(int,int)","[""double getDouble(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/ViewResult/isNull(int),"[""/*====================================================================="","" * "","" * Methods of interface DataSource"","" * "","" ====================================================================*/\t"",""\tboolean isNull(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).isNull();"",""\t}""]"
"/smallsql/database/CommandUpdate/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""void executeImpl(SSConnection con, SSStatement st) throws Exception {"",""\t\tint count = columnExpressions.size();"",""\t\tcolumnExpressions.addAll(sources);"",""\t\tcompile(con);"",""\t\tcolumnExpressions.setSize(count);"",""\t\tnewRowSources = sources.toArray();"",""\t\tupdateCount = 0;"",""\t\tfrom.execute();"",""\t\t"",""\t\t// Change the lock on all reading table to write lock"",""\t\t// this is needed for the case that a writing value depends on reading value "",""\t\tfor(int i=0; i\<columnExpressions.size(); i++){"",""\t\t    ExpressionName expr = (ExpressionName)columnExpressions.get(i);"",""\t\t    DataSource ds = expr.getDataSource();"",""\t\t    TableResult tableResult = (TableResult)ds;"",""\t\t    tableResult.lock = SQLTokenizer.UPDATE;"",""\t\t}"",""\t\t"",""\t\twhile(true){"",""\t\t\t// the reading and writing of a row must be atomic"",""            synchronized(con.getMonitor()){"",""                if(!next()){"",""                    return;"",""                }"",""                updateRow(con, newRowSources);"",""            }"",""\t\t\tupdateCount++;"",""\t\t}"",""\t}""]"
/smallsql/database/Expressions/clear(),"[""final void clear(){"",""\t\tsize = 0;"",""\t}""]"
/smallsql/database/MemoryStream/writeInt(int),"[""void writeInt(int value){"",""\t\tverifyFreePufferSize(4);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 24);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 16);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 8);"",""\t\tpuffer[ offset++ ] = (byte)(value);"",""\t}""]"
"/smallsql/database/SSConnection/createStatement(int,int,int)","[""public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {"",""\t\t//TODO resultSetHoldability"",""\t\treturn new SSStatement( this, resultSetType, resultSetConcurrency);"",""    }""]"
/smallsql/junit/TestGroupBy/testMaxString(),"[""public void testMaxString() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( STR_VALUE2, \""Select max(name) FROM \"" + table1);"",""\t}""]"
/smallsql/junit/TestExceptions/runTest(),"[""public void runTest() throws Exception{"",""    \tinit();"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""\t\tResultSet rs = null;"",""        try{"",""            rs = st.executeQuery( testValue.sql );"",""        }catch(SQLException sqle){"",""            assertTrue( \""There should no syntax error:\""+sqle, SYNTAX == testValue.errorType);"",""            assertSQLException( testValue.sqlstate, testValue.errorCode, sqle );"",""        }"",""        if(testValue.errorType == SYNTAX){"",""            assertNull(\""There should be a syntax error\"", rs);"",""            return;"",""        }"",""        try{"",""            while(rs.next()){"",""                for(int i=1; i\<=rs.getMetaData().getColumnCount(); i++){"",""                    rs.getObject(i);"",""                }"",""            }"",""            fail(\""There should be a runtime error\"");"",""        }catch(SQLException sqle){"",""            assertSQLException( testValue.sqlstate, testValue.errorCode, sqle );"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxTablesInSelect(),"[""public int getMaxTablesInSelect() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/ExpressionArithmetic/equals(java.lang.Object),"[""/**"",""\t * Is used in GroupResult."",""\t */"",""\tpublic boolean equals(Object expr){"",""\t\tif(!super.equals(expr)) return false;"",""\t\tif(!(expr instanceof ExpressionArithmetic)) return false;"",""\t\tif( ((ExpressionArithmetic)expr).operation != operation) return false;"",""\t\treturn true;"",""\t}""]"
/smallsql/database/StorePage/rollback(),"[""@Override"",""    final void rollback(){"",""\t\traFile = null;"",""\t}""]"
/smallsql/database/Column/getDefaultValue(smallsql.database.SSConnection),"[""/**"",""     * Return the default expression for this column. If there is no default vale then it return Expression.NULL. "",""     * @param con SSConnection for transactions"",""     */"",""    Expression getDefaultValue(SSConnection con) throws SQLException{"",""    \tif(identity)"",""    \t\tcounter.createNextValue(con);"",""        return defaultValue;"",""    }""]"
/smallsql/database/language/Language/getDefaultLanguage(),"[""/**"",""\t * Gets the language for the default locale; if not found, returns the"",""\t * ENGLISH language."",""\t */"",""\tpublic static Language getDefaultLanguage() {\t\t"",""\t\tString dfltLocaleStr = Locale.getDefault().toString();"","""",""\t\ttry {"",""\t\t\treturn getFromLocaleTree(dfltLocaleStr);"",""\t\t}"",""\t\tcatch (IllegalArgumentException e) {"",""\t\t\treturn new Language(); // default to English"",""\t\t}"",""\t}""]"
/smallsql/database/ViewResult/getObject(int),"[""Object getObject(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getObject();"",""\t}""]"
/smallsql/database/ExpressionName/getDisplaySize(),"[""int getDisplaySize(){"",""\t\treturn column.getDisplaySize();"",""\t}""]"
/smallsql/database/StoreImpl/writeLongString(java.lang.String),"[""void writeLongString(String daten) throws Exception{"",""        char[] chars = daten.toCharArray();"",""        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, chars.length * 2L + 4, SQLTokenizer.LONGVARBINARY);"",""        store.writeInt( chars.length );"",""        store.writeChars( chars );"",""        writeLong( store.writeFinsh(null) );"",""    }""]"
"/smallsql/database/StoreNoCurrentRow/getInt(int,int)","[""int getInt(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/SSResultSet/getStatement(),"[""public Statement getStatement() {"",""        return st;"",""    }""]"
/smallsql/database/Expressions/resize(int),"[""private final void resize(int newSize){"",""\t\tExpression[] dataNew = new Expression[newSize];"",""\t\tSystem.arraycopy(data, 0, dataNew, 0, size);"",""\t\tdata = dataNew;\t\t"",""\t}""]"
/smallsql/database/ExpressionFunctionCase/getMoney(),"[""final long getMoney() throws Exception {"",""\t\treturn getResult().getMoney();"",""\t}""]"
/smallsql/database/ExpressionFunctionMinute/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.MINUTE;"",""\t}""]"
/smallsql/database/IndexDescription/writeFinish(smallsql.database.SSConnection),"[""/**"",""\t * This is call if the row is finish written."",""\t * @param con the connection for a later commit or rollback."",""\t */"",""\tfinal void writeFinish(SSConnection con) {"",""\t\t//TODO"",""\t\t//index.addValues(expressions);\t\t"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getStringFunctions(),"[""public String getStringFunctions() {"",""\t\treturn getFunctions(SQLTokenizer.ASCII, SQLTokenizer.UCASE);"",""    }""]"
/smallsql/database/RowSource/setAlias(java.lang.String),"[""void setAlias(String name) throws SQLException{"",""        throw SmallSQLException.create(Language.ALIAS_UNSUPPORTED);"",""    }""]"
/smallsql/database/ViewResult/first(),"[""boolean first() throws Exception {"",""\t\treturn commandSelect.first();"",""\t}""]"
/smallsql/database/Scrollable/isScrollable(),"[""final boolean isScrollable(){"",""\t\treturn true;"",""\t}""]"
/smallsql/database/StoreNull/getNextPagePos(),"[""final long getNextPagePos(){"",""\t\treturn nextPagePos;"",""\t}""]"
/smallsql/database/ExpressionFunctionRepeat/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\tString str = param1.getString();"",""        int count  = param2.getInt();"",""        StringBuffer buffer = new StringBuffer();"",""        for(int i=0; i\<count; i++){"",""            buffer.append(str);"",""        }"",""\t\treturn buffer.toString();"",""\t}""]"
"/smallsql/database/StoreNoCurrentRow/getString(int,int)","[""String getString(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/MutableNumeric/getSignum(),"[""/**"",""     * @return Returns the signum."",""     */"",""    int getSignum() {"",""        return signum;"",""    }""]"
"/smallsql/database/Join/createJoinScrollIndex(smallsql.database.ExpressionArithmetic,smallsql.database.Expressions,smallsql.database.Expressions,int)","[""private int createJoinScrollIndex(ExpressionArithmetic cond, Expressions leftEx, Expressions rightEx, int operation) throws Exception{"",""        Expression[] params = cond.getParams();"",""        int op = cond.getOperation();"",""        if(op == ExpressionArithmetic.AND){"",""            Expression param0 = params[0];"",""            Expression param1 = params[1];"",""            if(param0 instanceof ExpressionArithmetic && param1 instanceof ExpressionArithmetic){"",""                op = createJoinScrollIndex((ExpressionArithmetic)param0, leftEx, rightEx, operation);"",""                if(op == 0){"",""                    return 0;"",""                }"",""                return createJoinScrollIndex((ExpressionArithmetic)param1, leftEx, rightEx, operation);"",""            }"",""            return 0;"",""        }"",""        if(operation == 0){"",""            operation = op;"",""        }"",""        if(operation != op){"",""            return 0;"",""        }"",""        if(operation == ExpressionArithmetic.EQUALS){"",""            Expression param0 = params[0];"",""            Expression param1 = params[1];"",""            //scan all column that are include in the expression"",""            Expressions columns0 = Utils.getExpressionNameFromTree(param0);"",""            Expressions columns1 = Utils.getExpressionNameFromTree(param1);"",""            if(left.isExpressionsFromThisRowSource(columns0) && right.isExpressionsFromThisRowSource(columns1)){"",""                leftEx.add( param0 );"",""                rightEx.add( param1 );"",""            }else{"",""                if(left.isExpressionsFromThisRowSource(columns1) && right.isExpressionsFromThisRowSource(columns0)){"",""                    leftEx.add( param1 );"",""                    rightEx.add( param0 );"",""                }else{"",""                    return 0;"",""                }"",""            }"",""            "",""            return operation;"",""        }"",""        return 0;"",""    }""]"
/smallsql/database/DataSource/getLong(int),"[""abstract long getLong( int colIdx ) throws Exception;""]"
/smallsql/database/Command/verifyParams(),"[""/**"",""     * check if all parameters are set"",""     */"",""    void verifyParams() throws SQLException{"",""        for(int p=0; p\<params.size(); p++){"",""            if(((ExpressionValue)params.get(p)).isEmpty())"",""            \tthrow SmallSQLException.create(Language.PARAM_EMPTY, new Integer(p+1));"",""        }"",""    }""]"
/smallsql/database/Expression/getDataType(),"[""abstract int getDataType();""]"
"/smallsql/database/SSCallableStatement/setBigDecimal(java.lang.String,java.math.BigDecimal)","[""public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {"",""        setBigDecimal( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/ExpressionFunctionCase/getLong(),"[""final long getLong() throws Exception {"",""\t\treturn getResult().getLong();"",""\t}""]"
"/smallsql/database/TableStorePage/TableStorePage(smallsql.database.SSConnection,smallsql.database.Table,int,long)","[""TableStorePage(SSConnection con, Table table, int lockType, long fileOffset){"",""\t\tsuper( null, 0, table.raFile, fileOffset );"",""\t\tthis.con \t= con;"",""\t\tthis.table = table;"",""\t\tthis.lockType \t= lockType;"",""\t}""]"
/smallsql/database/TransactionStep/TransactionStep(java.nio.channels.FileChannel),"[""TransactionStep(FileChannel raFile){"",""        this.raFile = raFile;"",""    }""]"
"/smallsql/junit/BasicTestCase/assertRowCount(int,java.sql.ResultSet)","[""void assertRowCount(int sollCount, ResultSet rs ) throws Exception{"",""\t\tint colCount = rs.getMetaData().getColumnCount();"",""\t\tint count = 0;"",""\t\t//System.out.println(sql);"",""\t\twhile(rs.next()){"",""\t\t\tcount++;"",""\t\t\tfor(int i=1; i\<=colCount; i++){"",""\t\t\t\trs.getObject(i);"",""\t\t\t\t//System.out.print( \"" \""+rs.getObject(i));"",""\t\t\t}"",""\t\t\t//System.out.println();"",""\t\t}"",""\t\tassertEquals( \""Wrong row count\"", sollCount, count);"",""\t\tfor(int i=1; i\<=colCount; i++){"",""\t\t\ttry{"",""\t\t\t\t// if not a SQLException occur then it is an error"",""\t\t\t\tfail( \""Column:\""+i+\"" Value:\""+String.valueOf(rs.getObject(i)));"",""\t\t\t}catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"",""\t\t}"",""\t\tassertFalse( \""Scroll after last\"", rs.next() );"",""\t}""]"
/smallsql/database/CommandSelect/compileLinkExpressionName(smallsql.database.ExpressionName),"[""/**"",""     * Set the connection (link) of a named Expression to the table and the column index."",""     * This means a column name in the SQL statement is link to it table source."",""     */"",""    private void compileLinkExpressionName(ExpressionName expr) throws Exception{"",""        String tableAlias = expr.getTableAlias();"",""        if(tableAlias != null){"",""            int t = 0;"",""            for(; t \< tables.size(); t++){"",""                DataSource fromEntry = tables.get(t);"",""                if(tableAlias.equalsIgnoreCase(fromEntry.getAlias())){"",""                    TableView table = fromEntry.getTableView();"",""                    int colIdx = table.findColumnIdx(expr.getName());"",""                    if(colIdx \>= 0){"",""                        // Column was find and now we set the DataSouce, column index and TableView."",""                        expr.setFrom(fromEntry, colIdx, table);"",""                        break;"",""                    }else"",""                        throw SmallSQLException.create(Language.COL_INVALID_NAME, new Object[]{expr.getName()});"",""                }"",""            }"",""            if(t == tables.size())"",""                throw SmallSQLException.create(Language.COL_WRONG_PREFIX, tableAlias);"",""        }else{"",""            // column name without table name"",""            boolean isSetFrom = false;"",""            for(int t = 0; t \< tables.size(); t++){"",""                DataSource fromEntry = tables.get(t);"",""                TableView table = fromEntry.getTableView();"",""                int colIdx = table.findColumnIdx(expr.getName());"",""                if(colIdx \>= 0){"",""                    if(isSetFrom){"",""                        // Column was already set. This means the column is ambiguous"",""                        throw SmallSQLException.create(Language.COL_AMBIGUOUS, expr.getName());"",""                    }"",""                    // Column was find and now we set the DataSouce, column index and TableView."",""                    isSetFrom = true;"",""                    expr.setFrom(fromEntry, colIdx, table);"",""                }"",""            }"",""            if(!isSetFrom){"",""                throw SmallSQLException.create(Language.COL_INVALID_NAME, expr.getName());"",""            }"",""        }"",""        compileLinkExpressionParams(expr);"",""    }""]"
"/smallsql/database/StoreImpl/getNumeric(int,int)","[""/**"",""     * It used for ResultSet.getBigDecimal()"",""     */"",""    @Override"",""    MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return null;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    return readBoolean() ? new MutableNumeric(1) : new MutableNumeric(0);"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return new MutableNumeric(Utils.bytes2double( readBinary() ));"",""            case SQLTokenizer.TINYINT:"",""                    return new MutableNumeric(readUnsignedByte());"",""            case SQLTokenizer.SMALLINT:"",""                    return new MutableNumeric(readShort());"",""            case SQLTokenizer.INT:"",""                    return new MutableNumeric(readInt());"",""            case SQLTokenizer.BIGINT:"",""                    return new MutableNumeric(readLong());"",""            case SQLTokenizer.REAL:"",""                    return new MutableNumeric(readFloat());"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return new MutableNumeric(readDouble());"",""            case SQLTokenizer.MONEY:"",""                    return new MutableNumeric( readLong(), 4);"",""            case SQLTokenizer.SMALLMONEY:"",""                    return new MutableNumeric( readInt(), 4);"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return readNumeric();"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return new MutableNumeric( readString() );"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return new MutableNumeric( readLongString() );"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());"",""                    ObjectInputStream ois = new ObjectInputStream(bais);"",""                    return new MutableNumeric( ois.readObject().toString() );"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return new MutableNumeric( Utils.bytes2double( readLongBinary() ) );"",""            case SQLTokenizer.TIMESTAMP:"",""            case SQLTokenizer.TIME:"",""            case SQLTokenizer.DATE:"",""            case SQLTokenizer.SMALLDATETIME:"",""                    throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \""NUMERIC\"" });"",""            // SAVER: check if this should be a kind of \""type not recognized\"" exception."",""            default: throw new Error();"",""        }"",""    }""]"
/smallsql/junit/BasicTestCase/BasicTestCase(),"[""public BasicTestCase(){"",""        super();"",""    }""]"
/smallsql/database/SSStatement/executeUpdate(java.lang.String),"[""final public int executeUpdate(String sql) throws SQLException{"",""        executeImpl(sql);"",""        return cmd.getUpdateCount();"",""    }""]"
/smallsql/database/ExpressionFunctionSubstring/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\tString str = param1.getString();"",""\t\tint strLen = str.length();"",""\t\tint start  = Math.min( Math.max( 0, param2.getInt() - 1), strLen);"",""\t\tint length = param3.getInt();"",""\t\tif(length \< 0) "",""\t\t\tthrow SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));"",""\t\tlength = Math.min( length, strLen-start );"",""\t\treturn str.substring(start, start+length);"",""\t}""]"
/smallsql/database/TableViewMap/getUniqueKey(java.lang.String),"[""/**"",""     * We save table and vies in a file with the same name. "",""     * Some OS (like WIndows) accept different written names for the same file."",""     * This method create an unique identifier for the same file."",""     * As unique identifier can be use a java.io.File but this will produce different"",""     * results on different OS. This will it make difficult to transfer  "",""     * an application to another OS."",""     * @param name the table or view name."",""     * @return a unique object"",""     */"",""    private Object getUniqueKey(String name){"",""        return name.toUpperCase(Locale.US); //use the same locale for all"",""    }""]"
/smallsql/database/Identity/createStorePage(),"[""private StorePage createStorePage(){"",""\t\tpage[ 0 ] = (byte)(value \>\> 56);"",""\t\tpage[ 1 ] = (byte)(value \>\> 48);"",""\t\tpage[ 2 ] = (byte)(value \>\> 40);"",""\t\tpage[ 3 ] = (byte)(value \>\> 32);"",""\t\tpage[ 4 ] = (byte)(value \>\> 24);"",""\t\tpage[ 5 ] = (byte)(value \>\> 16);"",""\t\tpage[ 6 ] = (byte)(value \>\> 8);"",""\t\tpage[ 7 ] = (byte)(value);"",""\t\treturn new StorePage( page, 8, raFile, filePos);"",""\t}""]"
/smallsql/database/ExpressionFunctionIIF/getMoney(),"[""long getMoney() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.getMoney();"",""\t\treturn param3.getMoney();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsBatchUpdates(),"[""public boolean supportsBatchUpdates() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/ExpressionFunction/setParams(smallsql.database.Expression[]),"[""void setParams( Expression[] params ){"",""        super.setParams( params );"",""        if(params.length \>0) param1 = params[0] ;"",""        if(params.length \>1) param2 = params[1] ;"",""        if(params.length \>2) param3 = params[2] ;"",""        if(params.length \>3) param4 = params[3] ;"",""    }""]"
/smallsql/junit/BenchTest/test_UpdateRows(java.sql.Connection),"[""/**"",""      *  7. Test"",""      *  Update rows with the method updateRow()."",""      */  "",""    static void test_UpdateRows(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test update rows with updateRow(): \"" + rowCount + \"" rows\"");"",""        "",""        try{"",""            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );"",""            ResultSet rs = st.executeQuery(\""SELECT * FROM \"" + tableName);"",""            int colCount = rs.getMetaData().getColumnCount();"",""            long time = -System.currentTimeMillis();"",""            int count = 0;"",""            while(rs.next()){"",""                for (int i=2; i\<=colCount; i++){"",""                    rs.updateObject( i, rs.getObject(i) );"",""                }"",""                rs.updateRow();"",""                count++;"",""            }"",""            time += System.currentTimeMillis();"",""            if (count != rowCount)"",""                 System.out.println( \""  Failed: Only \"" + count + \"" rows were updated.\"");"",""            else System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            st.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\"" + e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
/smallsql/database/StoreNoCurrentRow/deleteRow(smallsql.database.SSConnection),"[""void deleteRow(SSConnection con) throws SQLException{"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/NoFromResult/absolute(int),"[""final boolean absolute(int row){"",""\t\trowPos = (row \> 0) ?"",""\t\t\tMath.min( row, 1 ) :"",""\t\t\tMath.min( row +1, -1 );"",""\t\treturn rowPos == 1;"",""\t}""]"
/smallsql/database/Column/isCaseSensitive(),"[""boolean isCaseSensitive(){"",""        return caseSensitive;"",""    }""]"
/smallsql/database/SortedResult/getRow(),"[""int getRow(){"",""\t\treturn row \> getRowCount() ? 0 : row;"",""\t}""]"
/smallsql/junit/TestScrollable/testAbsoluteRelativeAssert(java.sql.ResultSet),"[""private void testAbsoluteRelativeAssert(ResultSet rs) throws SQLException{"",""        assertEquals(0, rs.getRow());"",""        "",""        assertTrue(rs.absolute(2));"",""        assertEquals(\""qwert2\"", rs.getString(\""v\""));"",""        assertEquals(2, rs.getRow());"","""",""        assertTrue(rs.relative(-1));"",""        assertEquals(\""qwert1\"", rs.getString(\""v\""));"",""        assertEquals(1, rs.getRow());"","""",""        assertTrue(rs.absolute(1));"",""        assertEquals(\""qwert1\"", rs.getString(\""v\""));"",""        assertEquals(1, rs.getRow());"",""        assertTrue(rs.isFirst());"","""",""        assertTrue(rs.relative(1));"",""        assertEquals(\""qwert2\"", rs.getString(\""v\""));"",""        assertEquals(2, rs.getRow());"",""        assertFalse(rs.isLast());"",""        assertFalse(rs.isFirst());"","""",""        assertTrue(rs.absolute(-1));"",""        assertEquals(\""qwert3\"", rs.getString(\""v\""));"",""        assertEquals(3, rs.getRow());"",""        assertTrue(rs.isLast());"",""        assertFalse(rs.isFirst());"","""",""        assertTrue(rs.relative(0));"",""        assertEquals(\""qwert3\"", rs.getString(\""v\""));"",""        assertEquals(3, rs.getRow());"",""        assertTrue(rs.isLast());"",""        assertFalse(rs.isFirst());"","""",""        assertFalse(rs.absolute(4));"",""        assertEquals(0, rs.getRow());"",""        assertFalse(rs.isLast());"",""        assertFalse(rs.isFirst());"",""        assertFalse(rs.isBeforeFirst());"",""        assertTrue(rs.isAfterLast());"","""",""        assertTrue(rs.last());"",""        assertEquals(3, rs.getRow());"",""        assertTrue(rs.isLast());"",""        assertFalse(rs.isFirst());"","""",""        assertFalse(rs.absolute(-4));"",""        assertEquals(0, rs.getRow());"",""        assertFalse(rs.isLast());"",""        assertFalse(rs.isFirst());"",""        assertTrue(rs.isBeforeFirst());"",""        assertFalse(rs.isAfterLast());"","""",""        assertFalse(rs.relative(4));"",""        assertEquals(0, rs.getRow());"",""        assertFalse(rs.isLast());"",""        assertFalse(rs.isFirst());"",""        assertFalse(rs.isBeforeFirst());"",""        assertTrue(rs.isAfterLast());"","""",""        assertFalse(rs.relative(-4));"",""        assertEquals(0, rs.getRow());"",""        assertFalse(rs.isLast());"",""        assertFalse(rs.isFirst());"",""        assertTrue(rs.isBeforeFirst());"",""        assertFalse(rs.isAfterLast());"",""    }""]"
/smallsql/database/Utils/unique2bytes(java.lang.String),"[""static byte[] unique2bytes( String unique ) throws SQLException{"",""        char[] chars = unique.toCharArray();"",""        byte[] daten = new byte[16];"",""        daten[3] = hex2byte( chars, 0 );"",""        daten[2] = hex2byte( chars, 2 );"",""        daten[1] = hex2byte( chars, 4 );"",""        daten[0] = hex2byte( chars, 6 );"","""",""        daten[5] = hex2byte( chars, 9 );"",""        daten[4] = hex2byte( chars, 11 );"","""",""        daten[7] = hex2byte( chars, 14 );"",""        daten[6] = hex2byte( chars, 16 );"","""",""        daten[8] = hex2byte( chars, 19 );"",""        daten[9] = hex2byte( chars, 21 );"","""",""        daten[10] = hex2byte( chars, 24 );"",""        daten[11] = hex2byte( chars, 26 );"",""        daten[12] = hex2byte( chars, 28 );"",""        daten[13] = hex2byte( chars, 30 );"",""        daten[14] = hex2byte( chars, 32 );"",""        daten[15] = hex2byte( chars, 34 );"",""        return daten;"",""    }""]"
/smallsql/database/MutableInteger/intValue(),"[""public int intValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/database/SQLParser/parse(char[]),"[""final private Command parse(char[] sql) throws SQLException{"",""        this.sql = sql;"",""        this.tokens = SQLTokenizer.parseSQL( sql );"",""        tokenIdx = 0;"","""",""        SQLToken token = nextToken(COMMANDS);"",""        switch (token.value){"",""            case SQLTokenizer.SELECT:"",""                    return select();"",""            case SQLTokenizer.DELETE:"",""                    return delete();"",""            case SQLTokenizer.INSERT:"",""                    return insert();"",""            case SQLTokenizer.UPDATE:"",""                    return update();"",""            case SQLTokenizer.CREATE:"",""                    return create();"",""            case SQLTokenizer.DROP:"",""                    return drop();"",""            case SQLTokenizer.ALTER:"",""                    return alter();"",""            case SQLTokenizer.SET:"",""                    return set();"",""\t\t\tcase SQLTokenizer.USE:"",""\t\t\t\t\ttoken = nextToken(MISSING_EXPRESSION);"",""\t\t\t\t\tString name = token.getName( sql );"",""\t\t\t\t\tcheckValidIdentifier( name, token );"",""\t\t\t\t\tCommandSet set = new CommandSet( con.log, SQLTokenizer.USE);"",""\t\t\t\t\tset.name = name;"",""\t\t\t\t\treturn set;"",""            case SQLTokenizer.EXECUTE:"",""                    return execute();"",""            case SQLTokenizer.TRUNCATE:"",""            \t\treturn truncate();"",""            default:"",""                    throw new Error();"",""        }"",""    }""]"
/smallsql/junit/TestDataTypes/main(java.lang.String[]),"[""public static void main(String[] argv) {"",""        junit.swingui.TestRunner.main(new String[]{TestDataTypes.class.getName()});"",""    }""]"
"/smallsql/database/Store/getNumeric(int,int)","[""abstract MutableNumeric getNumeric( int offset, int dataType) throws Exception;""]"
/smallsql/database/TableResult/rowDeleted(),"[""@Override"",""    final boolean rowDeleted(){"",""\t\t// A StoreNull is created on setRowPosition on a deleted row"",""        // The instance Store.NULL is used for an empty outer join"",""\t\tif(store instanceof StoreNull && store != Store.NULL){"",""            return true;"",""        }"",""        if(store instanceof StoreImpl &&"",""            ((StoreImpl)store).isRollback()){"",""            return true;"",""        }"",""        return false;"",""\t}""]"
/smallsql/database/ExpressionFunctionConvert/getNumeric(),"[""MutableNumeric getNumeric() throws Exception {"",""\t\treturn ExpressionValue.getNumeric(getObject(), getDataType());"",""\t}""]"
"/smallsql/database/IndexDescription/getFile(smallsql.database.Database,java.lang.String)","[""static File getFile(Database database, String name) throws Exception{"",""\t\treturn new File( Utils.createIdxFileName( database, name ) );"",""\t}""]"
/smallsql/database/ExpressionFunctionSubstring/getBytes(),"[""final byte[] getBytes() throws Exception{"",""\t\tif(isNull()) return null;"",""\t\tbyte[] bytes = param1.getBytes();"",""\t\tint byteLen = bytes.length;"",""\t\tint start  = Math.min( Math.max( 0, param2.getInt() - 1), byteLen);"",""\t\tint length = param3.getInt();"",""\t\tif(length \< 0) "",""\t\t\tthrow SmallSQLException.create(Language.SUBSTR_INVALID_LEN, new Integer(length));"",""\t\tif(start == 0 && byteLen == length) return bytes;"",""\t\tif(byteLen \> length + start){"",""\t\t\tbyte[] b = new byte[length];"",""\t\t\tSystem.arraycopy(bytes, start, b, 0, length);"",""\t\t\treturn b;\t\t"",""\t\t}else{"",""\t\t\tbyte[] b = new byte[byteLen - start];"",""\t\t\tSystem.arraycopy(bytes, start, b, 0, b.length);"",""\t\t\treturn b;\t\t"",""\t\t}"",""\t}""]"
/smallsql/database/SSConnection/setTypeMap(java.util.Map),"[""public void setTypeMap(Map map){"",""        //TODO support for TypeMap"",""    }""]"
/smallsql/junit/TestGroupBy/testMaxDouble(),"[""public void testMaxDouble() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Double(2), \""Select max(convert(double,id)) FROM \"" + table1);"",""\t}""]"
/smallsql/database/CommandSelect/compileLinkExpression(smallsql.database.Expression),"[""private void compileLinkExpression( Expression expr) throws Exception{"",""\t\tif(expr.getType() == Expression.NAME)"",""\t\t\t compileLinkExpressionName( (ExpressionName)expr);"",""\t\telse compileLinkExpressionParams( expr );"",""    }""]"
/smallsql/database/SQLParser/createView(),"[""private CommandCreateView createView() throws SQLException{"",""    \tString viewName = nextIdentifier();"","""",""\t\tnextToken(MISSING_AS);"",""\t\tSQLToken token = nextToken(MISSING_SELECT);"",""\t\tCommandCreateView cmd = new CommandCreateView( con.log, viewName );"",""\t\t"",""\t\tcmd.sql = new String(sql, token.offset, sql.length-token.offset );"",""\t\tselect(); //Parse to check for valid"",""        return cmd;"",""    }""]"
/smallsql/database/UnionAll/getTableView(),"[""TableView getTableView(){"",""\t\treturn currentDS.getTableView();"",""\t}""]"
/smallsql/database/SortedResult/noRow(),"[""void noRow() {"",""\t\trowSource.noRow();"",""\t\trow = 0;"",""\t}""]"
/smallsql/database/IndexNode/load(smallsql.database.StoreImpl),"[""void load(StoreImpl input) throws SQLException{"",""\t\tint length = input.readInt();"",""\t\tremainderKey = (length\>0) ? input.readChars(length) : null;"",""\t\t"",""\t\tint valueType = input.readByte();"",""\t\tswitch(valueType){"",""\t\t\tcase 0:"",""\t\t\t\tvalue = null;"",""\t\t\t\tbreak;"",""\t\t\tcase 1:"",""\t\t\t\tvalue = new Long(input.readLong());"",""\t\t\t\tbreak;"",""\t\t\tcase 2:"",""\t\t\t\tvalue = new LongTreeList(input);"",""\t\t\t\tbreak;"",""\t\t\tcase 3:"",""\t\t\t\tvalue = loadRef( input.readLong());"",""\t\t\t\tbreak;"",""\t\t\tdefault: "",""\t\t\t\tthrow SmallSQLException.create(Language.INDEX_CORRUPT, String.valueOf(valueType));"",""\t\t}"",""        "",""        nodes = new IndexNode[input.readShort()];"",""        for(int i=0; i\<nodes.length; i++){"",""            nodes[i] = loadRef( input.readLong() );"",""        }"",""\t}""]"
/smallsql/database/Expression/getApiObject(),"[""final Object getApiObject() throws Exception{"",""\t\tObject obj = getObject();"",""\t\tif(obj instanceof Mutable){"",""\t\t\treturn ((Mutable)obj).getImmutableObject();"",""\t\t}"",""\t\treturn obj;"",""\t}""]"
/smallsql/database/ExpressionFunctionAbs/getNumeric(),"[""MutableNumeric getNumeric() throws Exception{"",""\t\tif(param1.isNull()) return null;"",""        MutableNumeric num = param1.getNumeric();"",""        if(num.getSignum() \< 0) num.setSignum(1);"",""        return num;"",""    }""]"
/smallsql/database/Identity/longValue(),"[""@Override"",""    public long longValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/database/SSResultSet/getBigDecimal(int),"[""public BigDecimal getBigDecimal(int columnIndex) throws SQLException {"",""        try{"",""            MutableNumeric obj = getValue(columnIndex).getNumeric();"",""            wasNull = obj == null;"",""            if(wasNull) return null;"",""            return obj.toBigDecimal();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
"/smallsql/database/SSPreparedStatement/setClob(int,java.sql.Clob)","[""public void setClob(int i, Clob x) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setClob() not yet implemented.\"");"",""    }""]"
/smallsql/database/MemoryResult/addColumn(smallsql.database.Column),"[""/**"",""     * Add a column to the list of Columns. This should call only form COnstructor."",""     * @param column"",""     */"",""    final void addColumn(Column column){"",""        columns.add(column);"",""    }""]"
"/smallsql/junit/BasicTestCase/dropTable(java.sql.Connection,java.lang.String)","[""void dropTable(Connection con, String name) throws SQLException{"",""\t\ttry {"",""\t\t\tStatement st = con.createStatement();"",""\t\t\tst.execute(\""drop table \""+name);"",""\t\t\tst.close();"",""\t\t} catch (SQLException e) {"",""            String msg = e.getMessage();"",""            if(msg.indexOf(\""[SmallSQL]Table\"")==0 && msg.indexOf(name)\>0 && msg.indexOf(\""can\'t be dropped.\"")\>0 ){"",""                return;"",""            }"",""            throw e;"",""        }"",""    }""]"
/smallsql/database/ViewResult/getRowPosition(),"[""long getRowPosition() {"",""\t\treturn commandSelect.from.getRowPosition();"",""\t}""]"
/smallsql/junit/TestExceptionMethods/testForwardOnly(),"[""public void testForwardOnly() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{"",""            con.createStatement().execute(\""Create Table ExceptionMethods(v varchar(30))\"");"","""",""            con.createStatement().execute(\""Insert Into ExceptionMethods(v) Values(\'qwert\')\"");"","""",""            ResultSet rs = con.createStatement().executeQuery(\""Select * from ExceptionMethods\"");"",""            assertEquals(true, rs.next());"","""",""            try{"",""                rs.isBeforeFirst();"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"","""",""            try{"",""                rs.isFirst();"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"","""",""            try{"",""                rs.first();"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"","""",""            try{"",""                rs.previous();"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"","""",""            try{"",""                rs.last();"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"","""",""            try{"",""                rs.isLast();"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"","""",""            try{"",""                rs.isAfterLast();"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"","""",""            try{"",""                rs.afterLast();"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"","""",""            try{"",""                rs.absolute(1);"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"","""",""            try{"",""                rs.relative(1);"",""                fail(\""SQLException \'ResultSet is forward only\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"",""        }finally{"",""            dropTable(con, \""ExceptionMethods\"");"",""        }"",""    }""]"
/smallsql/junit/TestStatement/testMaxRows(),"[""public void testMaxRows() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.setMaxRows(5);"",""        ResultSet rs = st.executeQuery(\""Select * From statement\"");"",""        assertEquals(\""Statement.getResultSet\"", rs, st.getResultSet());"",""        assertRowCount(5,rs);"",""        assertRowCount(4,\""Select top 4 * From statement\"");"",""        assertRowCount(3,\""Select * From statement Limit 3\"");"",""        assertRowCount(2,\""Select * From statement Order By c ASC Limit 2\"");"",""        assertRowCount(0,\""Select top 0 * From statement\"");"",""        "",""        st = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE );"",""        rs = st.executeQuery(\""Select Top 0 * From statement\"");"",""        assertFalse( \""last()\"", rs.last() );"",""        "",""        PreparedStatement pr = con.prepareStatement(\""Select * From statement\"");"",""        pr.setMaxRows(6);"",""        rs = pr.executeQuery();"",""        assertEquals(\""PreparedStatement.getResultSet\"", rs, pr.getResultSet());"",""        assertRowCount(6,rs);"",""        "",""        pr.setMaxRows(3);"",""        rs = pr.executeQuery();"",""        assertRowCount(3,rs);"",""               "",""        pr.setMaxRows(4);"",""        rs = pr.executeQuery();"",""        assertRowCount(4,rs);"",""    }""]"
"/smallsql/database/SSResultSet/updateBigDecimal(java.lang.String,java.math.BigDecimal)","[""public void updateBigDecimal(String columnName, BigDecimal x) throws SQLException {"",""        updateBigDecimal( findColumn( columnName ), x );"",""    }""]"
/smallsql/junit/TestResultSet/testScrollStatesGroupBy(),"[""public void testScrollStatesGroupBy() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""        ResultSet rs = st.executeQuery(\""Select i,max(c) From ResultSet Group By i HAVING i=1\"");"",""        "",""        assertEquals(\""getConcurrency\"",ResultSet.CONCUR_READ_ONLY, rs.getConcurrency());"",""        assertTrue(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertFalse(\""isAfterLast\"", rs.isAfterLast() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""        "",""        rs.beforeFirst();"",""        assertTrue(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertFalse(\""isAfterLast\"", rs.isAfterLast() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""        assertTrue(\""next\"", rs.next() );"",""        assertTrue(\""isFirst\"", rs.isFirst() );"",""        assertFalse(\""rowInserted\"", rs.rowInserted() );"",""        assertEquals(\""getRow\"", 1, rs.getRow() );"",""        assertTrue(\""isLast\"", rs.isLast() );"",""        assertFalse(\""next\"", rs.next() );"",""        assertFalse(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertTrue(\""isAfterLast\"", rs.isAfterLast() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""        "",""        assertTrue(\""first\"", rs.first() );"",""        assertEquals(\""getRow\"", 1, rs.getRow() );"",""        "",""        assertFalse(\""previous\"", rs.previous() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""        assertTrue(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertFalse(\""isAfterLast\"", rs.isAfterLast() );"",""        "",""        assertTrue(\""last\"", rs.last() );"",""        assertEquals(\""getRow\"", 1, rs.getRow() );"",""        assertTrue(\""isLast\"", rs.isLast() );"",""        "",""        rs.afterLast();"",""        assertFalse(\""isBeforeFirst\"", rs.isBeforeFirst() );"",""        assertTrue(\""isAfterLast\"", rs.isAfterLast() );"",""        assertEquals(\""getRow\"", 0, rs.getRow() );"",""    }""]"
/smallsql/database/Money/floatValue(),"[""public float floatValue() {"",""        return value / 10000.0F;"",""    }""]"
"/smallsql/database/Table/Table(smallsql.database.Database,smallsql.database.SSConnection,java.lang.String,java.nio.channels.FileChannel,long,int)","[""/**"",""\t * Constructor for read existing tables."",""\t */"",""    Table( Database database, SSConnection con, String name, FileChannel raFile, long offset, int tableFormatVersion) throws Exception{"",""        super( name, new Columns() );"",""        this.database = database;"",""        this.raFile   = raFile;"",""\t\tthis.firstPage = offset;"",""\t\tStoreImpl store = getStore(con, firstPage, SQLTokenizer.SELECT);"",""        if(store == null){"",""            throw SmallSQLException.create(Language.TABLE_FILE_INVALID, getFile(database));"",""        }"",""\t\tint count = store.readInt();"","""",""\t\tfor(int i=0; i\<count; i++){"",""\t\t\tcolumns.add( store.readColumn(tableFormatVersion) );"",""\t\t}"",""\t\tindexes = new IndexDescriptions();"",""        references = new ForeignKeys();"",""\t\t"",""\t\t// read additional informations"",""\t\tint type;"",""\t\twhile((type = store.readInt()) != 0){"",""\t\t\tint offsetInPage = store.getCurrentOffsetInPage();"",""\t\t\tint size = store.readInt();"",""\t\t\tswitch(type){"",""\t\t\t\tcase INDEX:"",""\t\t\t\t\tindexes.add( IndexDescription.load( database, this, store) );"",""\t\t\t\t\tbreak;"",""\t\t\t}"",""\t\t\tstore.setCurrentOffsetInPage(offsetInPage + size);"",""\t\t}"",""\t\t"",""\t\tfirstPage = store.getNextPagePos();"",""    }""]"
/smallsql/database/ExpressionFunctionReturnFloat/isNull(),"[""boolean isNull() throws Exception{"",""        return param1.isNull();"",""    }""]"
/smallsql/database/MemoryResult/execute(),"[""void execute() throws Exception{"",""        rowList.clear();"",""\t}""]"
/smallsql/database/SSResultSetMetaData/isSearchable(int),"[""public boolean isSearchable(int column) throws SQLException {"",""    \tint type = getColumnExpression( column ).getType();"",""        return type == Expression.NAME || type == Expression.FUNCTION;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsOpenStatementsAcrossRollback(),"[""public boolean supportsOpenStatementsAcrossRollback() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSSavepoint/getSavepointName(),"[""public String getSavepointName(){"",""\t\treturn name;"",""\t}""]"
"/smallsql/database/FileIndexNode/loadRootNode(boolean,java.nio.channels.FileChannel,long)","[""static FileIndexNode loadRootNode(boolean unique, FileChannel file, long offset) throws Exception{"",""        StorePage storePage = new StorePage( null, -1, file, offset);"",""        StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);"",""        FileIndexNode node = new FileIndexNode( unique, (char)store.readShort(), file );"",""        node.fileOffset = offset;"",""        node.load( store );"",""        return node;    "",""    }""]"
"/smallsql/database/Database/checkForeignKeys(smallsql.database.SSConnection,smallsql.database.ForeignKeys)","[""private void checkForeignKeys( SSConnection con, ForeignKeys foreignKeys ) throws SQLException{"",""        for(int i=0; i\<foreignKeys.size(); i++){"",""            ForeignKey foreignKey = foreignKeys.get(i);"",""            TableView pkTable = getTableView(con, foreignKey.pkTable);"",""            if(!(pkTable instanceof Table)){"",""                throw SmallSQLException.create(Language.FK_NOT_TABLE, foreignKey.pkTable);"",""            }"",""        }"",""    }""]"
/smallsql/database/SSResultSetMetaData/isReadOnly(int),"[""public boolean isReadOnly(int column) throws SQLException {"",""        return !getColumnExpression( column ).isDefinitelyWritable();"",""    }""]"
/smallsql/database/LongLongList/size(),"[""final int size(){"",""\t\treturn size;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsPositionedUpdate(),"[""public boolean supportsPositionedUpdate() {"",""\t\treturn true;"",""    }""]"
"/smallsql/database/SSPreparedStatement/setShort(int,short)","[""public void setShort(int parameterIndex, short x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.SMALLINT);"",""    }""]"
/smallsql/database/SSResultSet/setFetchDirection(int),"[""public void setFetchDirection(int direction){"",""        fetchDirection = direction;"",""    }""]"
"/smallsql/database/CommandUpdate/addSetting(smallsql.database.Expression,smallsql.database.Expression)","[""/**"",""\t * Set a value pair of the update command. For example:"",""\t * \""UPDATE table1 SET col1 = 234\"""",""\t * \""col1\"" is the dest"",""\t * \""234\"" is the source"",""\t * @param dest"",""\t * @param source must be a ExpressionName"",""\t */"",""\tvoid addSetting(Expression dest, Expression source){"",""\t\t//destinations.add(dest);"",""\t\tcolumnExpressions.add(dest);"",""\t\tsources.add(source);"",""\t}""]"
/smallsql/database/ExpressionFunctionATan2/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.atan2( param1.getDouble(), param2.getDouble() );"",""    }""]"
/smallsql/junit/TestOrderBy/testOrderBy_int_asc(),"[""public void testOrderBy_int_asc() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tInteger oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by i Asc\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = (Integer)rs.getObject(\""i\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = (Integer)rs.getObject(\""i\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\""i\"") ) \< 0 );"",""\t\t\toldValue = (Integer)rs.getObject(\""i\"");"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/MutableNumeric/MutableNumeric(long),"[""MutableNumeric(long complement){"",""        if(complement == 0){"",""            signum = 0;"",""            value = EMPTY_INTS;"",""        }else{"",""            value = new int[2];"",""            if(complement \< 0){"",""                value[0] = (int)(~(complement \>\> 32));"",""                value[1] = (int)(-complement);"",""                signum = -1;"",""            }else{"",""                value[0] = (int)(complement \>\> 32);"",""                value[1] = (int)complement;"",""                signum = 1;"",""            }"",""        }"",""    }""]"
/smallsql/database/SortedResult/setRowPosition(long),"[""final void setRowPosition(long rowPosition) throws Exception{"",""\t\trowSource.setRowPosition(rowPosition);"",""\t\tuseSetRowPosition = true;"",""\t}""]"
/smallsql/database/Expression/getTableName(),"[""String getTableName(){"",""\t\treturn null;"",""\t}""]"
/smallsql/junit/TestScrollable/testFirstWithWhere(),"[""public void testFirstWithWhere() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.createStatement().execute(\""Create Table Scrollable (i counter, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from Scrollable\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into Scrollable(v) Values(\'qwert\')\"");"",""\t\t\tassertRowCount( 1, \""Select * from Scrollable\"");"",""\t\t\tassertRowCount( 0, \""Select * from Scrollable Where 1=0\"");"","""",""            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""            testFirstWithWhereAssert( st.executeQuery(\""Select * from Scrollable Where 1=0\"") );"",""            testFirstWithWhereAssert( st.executeQuery(\""Select * from Scrollable Where 1=0 Order By v\"") );"",""            testFirstWithWhereAssert( st.executeQuery(\""Select v from Scrollable Where 1=0 Group By v\"") );"",""            testFirstWithWhereAssert( st.executeQuery(\""Select v from Scrollable Where 1=0 Group By v Order By v\"") );"",""\t\t}finally{"",""            dropTable( con, \""Scrollable\"");"",""\t\t}"",""\t}""]"
/smallsql/database/MutableDouble/toString(),"[""public String toString(){"",""\t\treturn String.valueOf(value);"",""\t}""]"
/smallsql/database/LongTreeList/LongTreeList(long),"[""/**"",""\t * Create a LongTreeList with a first value."",""\t * @param value"",""\t */"",""\tLongTreeList(long value) throws SQLException{"",""\t\tthis();"",""\t\tadd(value);"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setFloat(int,float)","[""public void setFloat(int parameterIndex, float x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, new Float(x), SQLTokenizer.REAL);"",""    }""]"
/smallsql/database/MemoryStream/readBytes(int),"[""byte[] readBytes(int length){"",""\t\tbyte[] bytes = new byte[length];"",""\t\tSystem.arraycopy(puffer, offset, bytes, 0, length);"",""\t\toffset += length;"",""\t\treturn bytes;"",""\t}""]"
/smallsql/database/ViewResult/beforeFirst(),"[""void beforeFirst() throws Exception {"",""\t\tcommandSelect.beforeFirst();"",""\t}""]"
/smallsql/database/ExpressionFunctionRadians/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.toRadians( param1.getDouble() );"",""    }""]"
"/smallsql/database/SmallSQLException/translateMsg(java.lang.String,java.lang.Object[])","[""/**"",""\t * Get the localized message and format with the specified parameter,"",""\t * without creating an exception. Follows createMessage(String, Object[])"",""\t * convention."",""\t * "",""\t * @param messageCode"",""\t *            localized message key. pass CUSTOM_MESSAGE and the plain"",""\t *            message inside the parameters array to create an unlocalized"",""\t *            message."",""\t * @param params"",""\t *            format parameters, nullable."",""\t * @return translated message."",""\t */"",""\tstatic String translateMsg(String messageCode, Object[] params) {"",""\t\tassert ( messageCode != null && params != null ): \""Fill parameters. msgCode=\"" + messageCode + \"" params=\"" + params;"",""\t\t"",""\t\tString localized = language.getMessage(messageCode);\t\t"",""\t\treturn MessageFormat.format(localized, params); "",""\t}""]"
/smallsql/database/SSResultSet/getRef(int),"[""public Ref getRef(int i) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.getRef method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Ref object\"");"",""    }""]"
/smallsql/database/NoFromResult/next(),"[""final boolean next(){"",""\t\trowPos++;"",""\t\treturn rowPos == 1;"",""\t}""]"
/smallsql/database/SSCallableStatement/getObject(int),"[""public Object getObject(int i) throws SQLException {"",""        try{"",""            Object obj = getValue(i).getObject();"",""            wasNull = obj == null;"",""            return obj;"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/junit/TestGroupBy/testGroupBy(),"[""public void testGroupBy() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\trs = st.executeQuery(\""Select name FROM \"" + table1 + \"" Group By name\"");"",""\t\tassertTrue(rs.next());"",""\t\tassertEquals( STR_VALUE1, rs.getObject(1) ); "",""\t\tassertTrue(rs.next());"",""\t\tassertEquals( STR_VALUE2, rs.getObject(1) ); "",""\t\t"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnInt/getDataType(),"[""final int getDataType() {"",""\t\treturn SQLTokenizer.INT;"",""\t}""]"
/smallsql/database/SSStatement/setNeedGeneratedKeys(java.lang.String[]),"[""final void setNeedGeneratedKeys(String[] columnNames) throws SQLException{"",""        needGeneratedKeys = columnNames != null;"",""        generatedKeyNames = columnNames;"",""    }""]"
/smallsql/database/ExpressionArithmetic/isInList(),"[""boolean isInList() throws Exception{"",""    \tif(left.isNull()) return false;"",""    \ttry{"",""\t    \tfor(int i=0; i\<inList.length; i++){"",""\t    \t\tright = inList[i];"",""\t    \t\tif(getBoolean()) return true;"",""\t    \t}"",""    \t}finally{"",""    \t\tright = null;"",""    \t}"",""    \treturn false;"",""    }""]"
/smallsql/database/Database/close(),"[""/**"",""\t * Close all tables and views of this Database."",""\t */"",""\tprivate final void close() throws Exception{"",""\t\tsynchronized(tableViews){"",""\t\t\tIterator iterator = tableViews.values().iterator();"",""\t\t\twhile(iterator.hasNext()){"",""\t\t\t\tTableView tableView = (TableView)iterator.next();"",""\t\t\t\ttableView.close();"",""\t\t\t\titerator.remove();"",""\t\t\t}"",""\t\t}"",""\t\tmaster.close();"",""\t}""]"
/smallsql/junit/AllTests/getConnection(),"[""public static Connection getConnection() throws SQLException{"",""        if(con == null || con.isClosed()){"",""            con = createConnection();"",""        }"",""        return con;"",""    }""]"
/smallsql/database/SSResultSet/getString(int),"[""public String getString(int columnIndex) throws SQLException {"",""        try{"",""            Object obj = getObject(columnIndex);"",""            "",""            if(obj instanceof String || obj == null){"",""                return (String)obj;"",""            }"",""            if(obj instanceof byte[]){"",""                // The Display Value of a binary Value is different as the default in SQL "",""                return \""0x\"" + Utils.bytes2hex( (byte[])obj );"",""            }"",""            // all other values"",""            return getValue(columnIndex).getString();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxCursorNameLength(),"[""public int getMaxCursorNameLength() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxColumnNameLength(),"[""public int getMaxColumnNameLength() {"",""    \treturn 255;"",""    }""]"
/smallsql/database/ExpressionFunctionAbs/getDouble(),"[""double getDouble() throws Exception{"",""        return Math.abs( param1.getDouble() );"",""    }""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getFloat(),"[""float getFloat() throws Exception {"",""\t\treturn getLong();"",""\t}""]"
"/smallsql/database/SSStatement/executeUpdate(java.lang.String,java.lang.String[])","[""final public int executeUpdate(String sql, String[] columnNames) throws SQLException{"",""        setNeedGeneratedKeys(columnNames);"",""        return executeUpdate(sql);"",""    }""]"
"/smallsql/database/Store/scanObjectOffsets(int[],int[])","[""abstract void scanObjectOffsets( int[] offsets, int dataTypes[] );""]"
/smallsql/database/SSResultSet/getDouble(int),"[""public double getDouble(int columnIndex) throws SQLException {"",""        try{"",""            Expression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""            return expr.getDouble();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/MutableNumeric/floor(),"[""void floor(){"",""\t\t//TODO performance"",""\t\tint oldScale = scale;"",""\t\tsetScale(0);"",""\t\tsetScale(oldScale);"",""\t}""]"
/smallsql/database/SSPreparedStatement/clearParameters(),"[""public void clearParameters() throws SQLException {"",""        checkStatement();"",""        cmd.clearParams();"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsCatalogsInTableDefinitions(),"[""public boolean supportsCatalogsInTableDefinitions() {"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionCase/getResult(),"[""final private Expression getResult() throws Exception{"",""\t\tfor(int i=0; i\<cases.size(); i++){"",""\t\t\tif(cases.get(i).getBoolean()) return results.get(i);"",""\t\t}"",""\t\treturn elseResult;"",""\t}""]"
/smallsql/database/ExpressionFunctionAbs/getString(),"[""String getString() throws Exception{"",""        Object obj = getObject();"",""        if(obj == null) return null;"",""        return obj.toString();"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getDriverName(),"[""public String getDriverName(){"",""    \treturn \""SmallSQL Driver\"";"",""    }""]"
/smallsql/junit/BenchTest/test_InsertEmptyRows(java.sql.Connection),"[""/**"",""      *  3. Test"",""      *  Insert only empty rows with the default values of the row with the method insertRow()."",""      */  "",""    static void test_InsertEmptyRows(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test insert empty rows with insertRow(): \"" + rowCount + \"" rows\"");"",""        "",""        try{"",""            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );"",""            ResultSet rs = st.executeQuery(\""SELECT * FROM \""+tableName);"",""            long time = -System.currentTimeMillis();"",""            for (int i=0; i\<rowCount; i++){"",""                rs.moveToInsertRow();"",""                rs.insertRow();"",""            }"",""            time += System.currentTimeMillis();"",""            rs = st.executeQuery( \""SELECT count(*) FROM \"" + tableName);"",""            rs.next();"",""            int count = rs.getInt(1);"",""            if (count != rowCount)"",""                 System.out.println( \""  Failed: Only \"" + count + \"" rows were inserted.\"");"",""            else System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            st.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
/smallsql/database/FileIndexNode/loadRef(long),"[""@Override"",""    IndexNode loadRef( long offset ) throws SQLException{"",""        StorePage storePage = new StorePage( null, -1, file, offset);"",""        StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);"",""        MemoryStream input = new MemoryStream();"",""\t\tFileIndexNode node = new FileIndexNode( getUnique(), (char)input.readShort(), file );"",""\t\tnode.fileOffset = offset;"",""        node.load( store );"",""\t\treturn node;\t"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {"",""        String[] colNames = {\""TABLE_CAT\"", \""TABLE_SCHEM\"", \""TABLE_NAME\"", \""GRANTOR\"", \""GRANTEE\"", \""PRIVILEGE\"", \""IS_GRANTABLE\""};"",""        /**@todo: Implement this java.sql.DatabaseMetaData method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method getTablePrivileges() not yet implemented.\"");"",""    }""]"
"/smallsql/database/SSDatabaseMetaData/getImportedKeys(java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {"",""\t\treturn getCrossReference( null, null, null, null, null, table );"",""    }""]"
/smallsql/database/MemoryResult/relative(int),"[""final boolean relative(int rows){"",""\t\tif(rows == 0) return (currentRow != null);"",""\t\trowIdx = Math.min( Math.max( rowIdx + rows, -1), rowList.size());"",""\t\treturn move();"",""\t}""]"
"/smallsql/database/StoreImpl/scanObjectOffsets(int[],int[])","[""@Override"",""    void scanObjectOffsets( int[] offsets, int dataTypes[] ){"",""        offset = PAGE_CONTROL_SIZE;"",""        for(int i=0; i\<offsets.length; i++){"",""            offsets[i] = offset;"",""            boolean isNull = readBoolean(); // for isNull"",""            switch(dataTypes[i]){"",""                case SQLTokenizer.BIT:"",""                case SQLTokenizer.BOOLEAN:"",""                case SQLTokenizer.TINYINT:"",""                    offset++;"",""                    break;"",""                case SQLTokenizer.SMALLINT:"",""                    offset += 2;"",""                    break;"",""                case SQLTokenizer.INT:"",""                case SQLTokenizer.REAL:"",""                case SQLTokenizer.SMALLMONEY:"",""                case SQLTokenizer.TIME:"",""                case SQLTokenizer.DATE:"",""                case SQLTokenizer.SMALLDATETIME:"",""                    offset += 4;"",""                    break;"",""                case SQLTokenizer.BIGINT:"",""                case SQLTokenizer.FLOAT:"",""                case SQLTokenizer.DOUBLE:"",""                case SQLTokenizer.MONEY:"",""                case SQLTokenizer.JAVA_OBJECT:"",""                case SQLTokenizer.LONGVARBINARY:"",""                case SQLTokenizer.BLOB:"",""\t\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\t\tcase SQLTokenizer.NCLOB:"",""                case SQLTokenizer.LONGNVARCHAR:"",""                case SQLTokenizer.LONGVARCHAR:"",""                case SQLTokenizer.TIMESTAMP:"",""                    offset += 8;"",""                    break;"",""                case SQLTokenizer.BINARY:"",""                case SQLTokenizer.VARBINARY:"",""                    int count = readShort() & 0xFFFF;"",""                    if(!isNull) offset += count;  // not use += directly because readShort change the offset"",""                    break;"",""                case SQLTokenizer.NUMERIC:"",""                case SQLTokenizer.DECIMAL:"",""                    count = readByte();"",""\t\t\t\t\toffset += 2;"",""\t\t\t\t\tif(!isNull) offset += count*4;"",""                    break;"",""                case SQLTokenizer.CHAR:"",""                case SQLTokenizer.NCHAR:"",""                case SQLTokenizer.VARCHAR:"",""                case SQLTokenizer.NVARCHAR:"",""                    count = readShort() & 0xFFFF;"",""                    if(!isNull) offset += count \<\< 1; // not use += directly because readShort change the offset"",""                    break;"",""                case SQLTokenizer.UNIQUEIDENTIFIER:"",""                    offset += 16;"",""                    break;"",""                default: throw new Error(String.valueOf( dataTypes[i] ) );"",""            }"",""        }"",""    }""]"
/smallsql/database/SSResultSet/clearWarnings(),"[""public void clearWarnings(){"",""        //TODO support for Warnings"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/getDouble(),"[""double getDouble() throws Exception {"",""\t\treturn ExpressionValue.getDouble( getObject(), getDataType() );"",""\t}""]"
/smallsql/database/SQLToken/getName(char[]),"[""String getName(char[] sql){"",""\t\tif(name != null) return name;"",""\t\treturn new String( sql, offset, length );"",""\t}""]"
/smallsql/database/GroupResult/addInternalExpressionFromGroupBy(smallsql.database.Expression),"[""/**"",""\t * Add a expression to the internal expression list if not exist in this list."",""\t * It will be added named columns in the GROUP BY clause."",""\t * @param expr The expression to added."",""\t * @return the position in the internal list"",""\t */"",""\tfinal private int addInternalExpressionFromGroupBy(Expression expr) throws SQLException{"",""\t\tint type = expr.getType();"",""\t\tif(type \>= Expression.GROUP_BEGIN){"",""\t\t\t\tthrow SmallSQLException.create(Language.GROUP_AGGR_INVALID, expr);"",""\t\t}else{"",""\t\t\tint idx = internalExpressions.indexOf(expr);"",""\t\t\tif(idx \>= 0) return idx;"",""\t\t\tinternalExpressions.add(expr);"",""\t\t\treturn internalExpressions.size()-1;"",""\t\t}"",""\t}""]"
/smallsql/database/ViewResult/afterLast(),"[""void afterLast() throws Exception{"",""\t\tcommandSelect.afterLast();"",""\t}""]"
"/smallsql/database/Index/add(smallsql.database.IndexNode,long,long,boolean,int)","[""/**"",""\t * The key has a binary sort order. This means the most significant byte is in the high byte."",""\t * @param digitCount The count of 16Bit digits."",""\t */"",""\tfinal private IndexNode add(IndexNode node, long rowOffset, long key, boolean isLastValue, int digitCount) throws SQLException{"",""\t\tfor(int i=digitCount-1; i\>=0; i--){"",""\t\t\tchar digit = (char)(key \>\> (i\<\<4));"",""\t\t\tif(i == 0){"",""\t\t\t\tif(isLastValue){"",""\t\t\t\t\tnode.addNode( digit, rowOffset );"",""\t\t\t\t\treturn null;"",""\t\t\t\t}"",""\t\t\t\treturn node.addRoot(digit);"",""\t\t\t}"",""\t\t\tnode = node.addNode(digit);"",""\t\t\tif(node.isEmpty()){"",""\t\t\t\tif(isLastValue){"",""\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );"",""\t\t\t\t\treturn null;"",""\t\t\t\t}"",""\t\t\t\treturn node.addRootValue( key, i);"",""\t\t\t}else"",""\t\t\tif(equals(node.getRemainderValue(), key, i)){"",""\t\t\t\tif(isLastValue){"",""\t\t\t\t\tnode.saveValue( rowOffset);"",""\t\t\t\t\treturn null;"",""\t\t\t\t}"",""\t\t\t\treturn node.addRoot();"",""\t\t\t}\t\t"",""\t\t}"",""\t\tthrow new Error();"",""\t}""]"
"/smallsql/database/Store/getString(int,int)","[""abstract String getString( int offset, int dataType) throws Exception;""]"
"/smallsql/database/Store/getDouble(int,int)","[""abstract double getDouble( int offset, int dataType) throws Exception;""]"
/smallsql/database/ExpressionFunctionFloor/getFunction(),"[""int getFunction(){ return SQLTokenizer.FLOOR; }""]"
/smallsql/database/StoreImpl/readBinary(),"[""byte[] readBinary(){"",""        int length = readShort() & 0xFFFF;"",""        return readBytes(length);"",""    }""]"
/smallsql/junit/BenchTest/dropTestTable(java.sql.Connection),"[""static void dropTestTable(Connection con){"",""        try{"",""            Statement st = con.createStatement();"",""            st.execute(\""drop table \"" + tableName);"",""            st.close();"",""        }catch(Exception e){/* ignore it */}"",""    }""]"
/smallsql/database/CommandSelect/setHaving(smallsql.database.Expression),"[""final void setHaving(Expression having){"",""        this.having = having;"",""    }""]"
/smallsql/database/CreateFile/rollback(),"[""/**"",""     * {@inheritDoc}"",""     */"",""    @Override"",""    void rollback() throws SQLException{"",""        FileChannel currentRaFile = raFile;"",""        if(raFile == null){"",""            return;"",""        }"",""        raFile = null;"",""        try{"",""            currentRaFile.close();"",""        }catch(Throwable ex){"",""            //ignore it"",""        }"",""        con.rollbackFile(currentRaFile);"",""        if(!file.delete()){"",""            file.deleteOnExit();"",""            throw SmallSQLException.create(Language.FILE_CANT_DELETE, file.getPath());"",""        }"",""        "",""        String name = file.getName();"",""        name = name.substring(0, name.lastIndexOf(\'.\'));"",""        database.removeTableView(name);"",""    }""]"
/smallsql/junit/TestScrollable/testNextWithWhere(),"[""public void testNextWithWhere() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.createStatement().execute(\""Create Table Scrollable (i counter, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from Scrollable\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into Scrollable(v) Values(\'qwert\')\"");"",""\t\t\tassertRowCount( 1, \""Select * from Scrollable\"");"",""\t\t\tassertRowCount( 0, \""Select * from Scrollable Where 1=0\"");"","""",""            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""            testNextWithWhereAssert( st.executeQuery(\""Select * from Scrollable Where 1=0\"") );"",""            testNextWithWhereAssert( st.executeQuery(\""Select * from Scrollable Where 1=0 Order By v\"") );"",""            testNextWithWhereAssert( st.executeQuery(\""Select v from Scrollable Where 1=0 Group By v\"") );"",""            testNextWithWhereAssert( st.executeQuery(\""Select v from Scrollable Where 1=0 Group By v Order By v\"") );"",""\t\t}finally{"",""            dropTable( con, \""Scrollable\"");"",""\t\t}"",""\t}""]"
/smallsql/database/SSResultSetMetaData/isNullable(int),"[""public int isNullable(int column) throws SQLException {"",""        return getColumnExpression( column ).isNullable() ? columnNullable : columnNoNulls;"",""    }""]"
/smallsql/junit/TestGroupBy/testMaxNumeric(),"[""public void testMaxNumeric() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new java.math.BigDecimal(\""2\""), \""Select max(convert(numeric,id)) FROM \"" + table1);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getSystemFunctions(),"[""public String getSystemFunctions() {"",""\t\treturn getFunctions(SQLTokenizer.IFNULL, SQLTokenizer.IIF);"",""    }""]"
/smallsql/database/ExpressionFunctionCase/setElseResult(smallsql.database.Expression),"[""final void setElseResult(Expression expr){"",""\t\telseResult = expr;"",""\t}""]"
/smallsql/database/SSStatement/executeBatch(),"[""public int[] executeBatch() throws BatchUpdateException{"",""        if(batches == null)"",""            return new int[0];"",""        final int[] result = new int[batches.size()];"",""        BatchUpdateException failed = null;"",""        for(int i = 0; i \< result.length; i++){"",""            try{"",""                result[i] = executeUpdate((String)batches.get(i));"",""            }catch(SQLException ex){"",""                result[i] = EXECUTE_FAILED;"",""                if(failed == null){"",""                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);"",""                    failed.initCause(ex);"",""                }"",""                failed.setNextException(ex);"",""            }"",""        }"",""        batches.clear();"",""        if(failed != null)"",""            throw failed;"",""        return result;"",""    }""]"
/smallsql/database/Utils/getInteger(int),"[""/**"",""     *  recycle Integer objects, this is faster as to garbage the objects"",""\t */"",""\tstatic final Integer getInteger(int value){"",""\t\tif(value \>= -4 && value \< 256){"",""\t\t\treturn integerCache[ value+4 ];\t\t"",""\t\t}else"",""\t\t\treturn new Integer(value);"",""\t}""]"
/smallsql/database/ExpressionArithmetic/getLongImpl(),"[""private long getLongImpl() throws java.lang.Exception {"",""        if(isNull()) return 0;"",""        switch(operation){"",""            case ADD: return left.getLong() + right.getLong();"",""            case SUB: return left.getLong() - right.getLong();"",""            case MUL: return left.getLong() * right.getLong();"",""            case DIV: return left.getLong() / right.getLong();"",""            case NEGATIVE:  return          - left.getLong();"",""            case MOD:\t\treturn left.getLong() % right.getLong();"",""            case BIT_NOT:   return          ~ right.getInt();"",""        }"",""\t\tthrow createUnspportedConversion( SQLTokenizer.LONG);"",""    }""]"
/smallsql/database/GroupResult/patchExpressions(smallsql.database.Expressions),"[""/**"",""\t * Patch all external ExpressionName in the list (SELECT clause)"",""\t * that it link to the the internal RowSource."",""\t */"",""\tfinal private void patchExpressions(Expressions exprs) throws SQLException{"",""\t\tif(exprs == null) return;"",""\t\tfor(int i=0; i\<exprs.size(); i++){"",""\t\t\texprs.set(i, patchExpression(exprs.get(i)));"",""\t\t}\t"",""\t}""]"
/smallsql/junit/AllTests/printRS(java.sql.ResultSet),"[""public static void printRS( ResultSet rs ) throws SQLException{"",""        while(rs.next()){"",""            for(int i=1; i\<=rs.getMetaData().getColumnCount(); i++){"",""                System.out.print(rs.getObject(i)+\""\\t\"");"",""            }"",""            System.out.println();"",""        }"",""    }""]"
"/smallsql/database/IndexNode/saveRemainderValue(long,int)","[""private final void saveRemainderValue( long remainderValue, int charCount){"",""\t\tthis.remainderKey = new char[charCount];"",""\t\tfor(int i=charCount-1, d=0; i\>=0; i--){"",""\t\t\tthis.remainderKey[d++] = (char)(remainderValue \>\> (i\<\<4));"",""\t\t}"",""\t}""]"
/smallsql/database/Expression/isCaseSensitive(),"[""boolean isCaseSensitive(){"",""\t\treturn false; "",""\t}""]"
/smallsql/database/ExpressionFunctionConvert/getString(),"[""String getString() throws Exception {"",""\t\tObject obj = getObject();"",""\t\tif(obj == null) return null;"",""\t\tswitch(datatype.getDataType()){"",""\t\t\tcase SQLTokenizer.BIT:"",""\t\t\t\treturn ((Boolean)obj).booleanValue() ? \""1\"" : \""0\"";"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""            case SQLTokenizer.LONGVARBINARY:"",""                    return new String( (byte[])obj );"",""\t\t}"",""\t\treturn obj.toString();"",""\t}""]"
/smallsql/database/ExpressionFunctionSoundex/getPrecision(),"[""int getPrecision(){"",""        return 4;"",""    }""]"
/smallsql/database/DataSource/getBoolean(int),"[""abstract boolean getBoolean( int colIdx ) throws Exception;""]"
/smallsql/database/StoreImpl/writeFinsh(smallsql.database.SSConnection),"[""/**"",""     * "",""     * @param con Is needed to add this page to the commitPages. If it null then it save directly without rollback option."",""     * @return The file position if con == null."",""     * @throws SQLException"",""     */"",""    long writeFinsh(SSConnection con) throws SQLException{"",""        switch(type){"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.INSERT:"",""            case SQLTokenizer.CREATE:"",""                sizeUsed = sizePhysical = offset;"",""                break;"",""\t\t\tcase SQLTokenizer.UPDATE:"",""\t\t\t\tif(status != UPDATE_POINTER) {"",""\t\t\t\t\tsizeUsed = offset;"",""\t\t\t\t\tbreak;"",""\t\t\t\t}"",""            case SQLTokenizer.DELETE:"",""\t\t\t\tsizeUsed = PAGE_CONTROL_SIZE;"",""                break;"",""            //SQLTokenizer.SELECT should not occur here"",""            default: throw new Error(\""\""+type);"",""        }"",""\t\toffset = 0;"",""\t\twriteInt( PAGE_MAGIC ); // for repair "",""\t\twriteInt( status);"",""\t\twriteInt( sizeUsed );"",""\t\twriteInt( sizePhysical );"",""\t\twriteInt( 0 ); //nextPageOffset"",""\t\twriteLong( filePosUpdated ); // Pointer of an updated page"",""\t\tstorePage.setPageData( page, sizeUsed ); //TODO page sollte eigentlich beim einlesen gesetzt sein"",""        if(con == null){"",""        \t// the pointer is needed to safe in another page"",""        \t// this produce not referenced pages on rollback"",""\t\t\treturn storePage.commit();"",""        }else{"",""            return 0;"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionDifference/getInt(),"[""final int getInt() throws Exception {"",""        if(isNull()) return 0;"",""\t\tString str1 = ExpressionFunctionSoundex.getString(param1.getString());"",""        String str2 = ExpressionFunctionSoundex.getString(param2.getString());"",""        int diff = 0;"",""        for(int i=0; i\<4; i++){"",""            if(str1.charAt(i) == str2.charAt(i)){"",""                diff++;"",""            }"",""        }"",""\t\treturn diff;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getMaxIndexLength(),"[""public int getMaxIndexLength() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/getInt(),"[""int getInt() throws Exception {"",""\t\treturn ExpressionValue.getInt( getObject(), getDataType() );"",""\t}""]"
/smallsql/database/SSResultSetMetaData/getColumnName(int),"[""public String getColumnName(int column) throws SQLException {"",""        return getColumnExpression( column ).getAlias();"",""    }""]"
/smallsql/database/ViewResult/rowInserted(),"[""final boolean rowInserted(){"",""\t\treturn commandSelect.from.rowInserted();"",""\t}""]"
/smallsql/database/MutableNumeric/compareTo(smallsql.database.MutableNumeric),"[""public int compareTo(MutableNumeric numeric){"",""    \t//TODO performance"",""\t\treturn toBigDecimal().compareTo(numeric.toBigDecimal());"",""    }""]"
/smallsql/database/RowSource/execute(),"[""/**"",""     * Perform some operation on some RowSources per ResultSet. For example the grouping"",""     * on GroupResult and sorting on SortedResult."",""     */"",""    abstract void execute() throws Exception;""]"
"/smallsql/database/SQLParser/rowSource(smallsql.database.Command,smallsql.database.DataSources,int)","[""/**"",""     * returns a row source. A row source is a Table, Join, View or a row function."",""     *"",""     */"",""    private RowSource rowSource(Command cmd, DataSources tables, int parenthesis) throws SQLException{"",""        RowSource fromSource = null;"",""        fromSource = tableSource(cmd, tables);"","""",""        while(true){"",""            SQLToken token = nextToken();"",""            if(token == null) return fromSource;"",""            switch(token.value){"",""                case SQLTokenizer.ON:"",""                    previousToken();"",""                    return fromSource;"",""                case SQLTokenizer.CROSS:"",""                    nextToken(MISSING_JOIN);"",""                    //no break"",""                case SQLTokenizer.COMMA:"",""                    fromSource = new Join( Join.CROSS_JOIN, fromSource, rowSource(cmd, tables, 0), null);"",""                    break;"",""                case SQLTokenizer.INNER:"",""                    nextToken(MISSING_JOIN);"",""                    //no break;"",""                case SQLTokenizer.JOIN:"",""                    fromSource = join( cmd, tables, fromSource, Join.INNER_JOIN );"",""                    break;"",""                case SQLTokenizer.LEFT:"",""                    token = nextToken(MISSING_OUTER_JOIN);"",""                \tif(token.value == SQLTokenizer.OUTER)"",""                \t\ttoken = nextToken(MISSING_JOIN);"",""                    fromSource = join( cmd, tables, fromSource, Join.LEFT_JOIN );"",""                    break;"",""                case SQLTokenizer.RIGHT:"",""                \ttoken = nextToken(MISSING_OUTER_JOIN);"",""                \tif(token.value == SQLTokenizer.OUTER)"",""                \t\ttoken = nextToken(MISSING_JOIN);"",""\t\t\t\t\tfromSource = join( cmd, tables, fromSource, Join.RIGHT_JOIN );"",""\t\t\t\t\tbreak;                \t"",""\t\t\t\tcase SQLTokenizer.FULL:"",""\t\t\t\t\ttoken = nextToken(MISSING_OUTER_JOIN);"",""\t\t\t\t\tif(token.value == SQLTokenizer.OUTER)"",""\t\t\t\t\t\ttoken = nextToken(MISSING_JOIN);"",""\t\t\t\t\tfromSource = join( cmd, tables, fromSource, Join.FULL_JOIN );"",""\t\t\t\t\tbreak;                \t"",""                case SQLTokenizer.PARENTHESIS_R:"",""                case SQLTokenizer.ESCAPE_R:"",""                    if(parenthesis == token.value) return fromSource;"",""                    if(parenthesis == 0){"",""                    \tpreviousToken();"",""\t\t\t\t\t\treturn fromSource;"",""                    }"",""                    throw createSyntaxError( token, Language.STXADD_FROM_PAR_CLOSE );"",""                default:"",""                \tif(isKeyword(token)){"",""\t\t\t\t\t\tpreviousToken();"",""\t\t\t\t\t\treturn fromSource;"",""                \t}"",""                    if(!fromSource.hasAlias()){"",""                        fromSource.setAlias( token.getName( sql ) );"",""                        break;"",""                    }"",""                    throw createSyntaxError( token, new int[]{SQLTokenizer.COMMA, SQLTokenizer.GROUP, SQLTokenizer.ORDER, SQLTokenizer.HAVING} );"",""            }"",""        }"",""    }""]"
"/smallsql/database/CommandDelete/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""void executeImpl(SSConnection con, SSStatement st) throws Exception {"",""\t\tcompile(con);"",""\t\tTableViewResult result = TableViewResult.getTableViewResult(from);"",""\t\t"",""\t\tupdateCount = 0;"",""\t\tfrom.execute();"",""\t\twhile(next()){"",""\t\t\tresult.deleteRow();"",""\t\t\tupdateCount++;"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionFunctionChar/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.CHAR;"",""\t}""]"
/smallsql/database/ExpressionFunctionYear/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(param1.isNull()) return 0;"",""\t\tDateTime.Details details = new DateTime.Details(param1.getLong());"",""\t\treturn details.year;"",""\t}""]"
/smallsql/database/ExpressionFunctionInsert/getBytes(),"[""final byte[] getBytes() throws Exception{"",""        if(isNull()) return null;"",""        byte[] bytes = param1.getBytes();"",""        int start  = Math.min(Math.max( 0, param2.getInt() - 1), bytes.length );"",""        int length = Math.min(param3.getInt(), bytes.length );"",""        ByteArrayOutputStream buffer = new ByteArrayOutputStream();"",""        buffer.write(bytes,0,start);"",""        buffer.write(param4.getBytes());"",""        if(length \< 0) "",""            throw SmallSQLException.create(Language.INSERT_INVALID_LEN, new Integer(length));"",""        buffer.write(bytes, start+length, bytes.length-start-length);"",""        return buffer.toByteArray();"",""\t}""]"
/smallsql/database/SSResultSet/getMetaData(),"[""public ResultSetMetaData getMetaData(){"",""        return metaData;"",""    }""]"
/smallsql/junit/TestOrderBy/testOrderBy_real(),"[""public void testOrderBy_real() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tFloat oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by r\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = (Float)rs.getObject(\""r\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = (Float)rs.getObject(\""r\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tassertTrue( oldValue.compareTo( (Float)rs.getObject(\""r\"") ) \< 0 );"",""\t\t\toldValue = (Float)rs.getObject(\""r\"");"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsUnionAll(),"[""public boolean supportsUnionAll() {"",""\t\treturn true;"",""    }""]"
"/smallsql/database/ExpressionValue/getDouble(java.lang.Object,int)","[""static double getDouble(Object obj, int dataType) throws Exception{"",""        if(obj == null) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""                return (obj.equals(Boolean.TRUE)) ? 1 : 0;"",""            case SQLTokenizer.INT:"",""            case SQLTokenizer.BIGINT:"",""            case SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.MONEY:"",""                return ((Number)obj).doubleValue();"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\treturn ((DateTime)obj).getTimeMillis();"",""            default: return Double.parseDouble( obj.toString() );"",""        }"",""    }""]"
/smallsql/database/ExpressionArithmetic/getLong(),"[""long getLong() throws java.lang.Exception {"",""        if(isNull()) return 0;"",""        int dataType = getDataType();"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""\t\t\t\treturn getBoolean() ? 1 : 0;"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""\t\t\t\treturn getIntImpl();"",""            case SQLTokenizer.BIGINT:"",""                return getLongImpl();"",""\t\t\tcase SQLTokenizer.REAL:"",""                return (long)getFloatImpl();"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                return (long)getDoubleImpl();"",""        }"",""\t\tthrow createUnspportedConversion( SQLTokenizer.LONG);"",""    }""]"
/smallsql/database/MutableFloat/intValue(),"[""public int intValue() {"",""\t\treturn (int)value;"",""\t}""]"
/smallsql/database/Scrollable/next(),"[""boolean next() throws Exception {"",""\t\tif(++rowIdx \< rowList.size()){"",""\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );"",""\t\t\treturn true;"",""\t\t}"",""\t\tfinal boolean result = rowSource.next();"",""\t\tif(result){"",""\t\t\trowList.add( rowSource.getRowPosition());"",""\t\t\treturn true;"",""\t\t}"",""        rowIdx = rowList.size(); //rowIdx should be never larger as row count"",""\t\treturn false;"",""\t}""]"
"/smallsql/database/StoreImpl/getBytes(int,int)","[""/**"",""     * It used for ResultSet.getBytes()"",""     */"",""    @Override"",""    byte[] getBytes(int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return null;"",""        switch(dataType){"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return readBinary();"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    byte[] bytes = new byte[1];"",""                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);"",""                    return bytes;"",""            case SQLTokenizer.SMALLINT:"",""                    bytes = new byte[2];"",""                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);"",""                    return bytes;"",""            case SQLTokenizer.INT:"",""            case SQLTokenizer.REAL:"",""            case SQLTokenizer.SMALLMONEY:"",""            case SQLTokenizer.TIME:"",""            case SQLTokenizer.DATE:"",""            case SQLTokenizer.SMALLDATETIME:"",""                    bytes = new byte[4];"",""                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);"",""                    return bytes;"",""            case SQLTokenizer.BIGINT:"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.TIMESTAMP:"",""                    bytes = new byte[8];"",""                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);"",""                    return bytes;"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return readNumeric().toByteArray();"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return readString().getBytes();"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return readLongString().getBytes();"",""            case SQLTokenizer.JAVA_OBJECT:"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return readLongBinary();"",""            case SQLTokenizer.UNIQUEIDENTIFIER:"",""                    bytes = new byte[16];"",""                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);"",""                    return bytes;"",""            default: throw new Error();"",""        }"",""    }""]"
/smallsql/database/SSStatement/getFetchSize(),"[""final public int getFetchSize() throws SQLException{"",""        checkStatement();"",""        return fetchSize;"",""    }""]"
"/smallsql/database/IndexNode/addRemainderKey(long,char[],int)","[""final void addRemainderKey(long rowOffset, char[] remainderValue, int offset) throws SQLException{"",""\t\tsaveRemainderValue(remainderValue, offset);"",""\t\tvalue = (unique) ? (Object)new Long(rowOffset) : new LongTreeList(rowOffset);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/nullsAreSortedAtStart(),"[""public boolean nullsAreSortedAtStart() {"",""\t\treturn false;"",""    }""]"
"/smallsql/database/StoreImpl/getString(int,int)","[""/**"",""     * It used for ResultSet.getString()"",""     */"",""    @Override"",""    String getString( int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return null;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""                    return readBoolean() ? \""1\"" : \""0\"";"",""            case SQLTokenizer.BOOLEAN:"",""                    return String.valueOf( readBoolean() );"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return Utils.bytes2hex( readBinary() );"",""            case SQLTokenizer.TINYINT:"",""                    return String.valueOf( readUnsignedByte() );"",""            case SQLTokenizer.SMALLINT:"",""                    return String.valueOf( readShort() );"",""            case SQLTokenizer.INT:"",""                    return String.valueOf( readInt() );"",""            case SQLTokenizer.BIGINT:"",""                    return String.valueOf( readLong() );"",""            case SQLTokenizer.REAL:"",""                    return String.valueOf( readFloat() );"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return String.valueOf( readDouble() );"",""            case SQLTokenizer.MONEY:"",""                    return Money.createFromUnscaledValue( readLong() ).toString();"",""            case SQLTokenizer.SMALLMONEY:"",""                    return Money.createFromUnscaledValue( readInt() ).toString();"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return readNumeric().toString();"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return readString();"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return readLongString();"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());"",""                    ObjectInputStream ois = new ObjectInputStream(bais);"",""                    return ois.readObject().toString();"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return Utils.bytes2hex( readLongBinary() );"",""            case SQLTokenizer.TIMESTAMP:"",""                    return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP ).toString();"",""            case SQLTokenizer.TIME:"",""                    return new DateTime( readTime(), SQLTokenizer.TIME ).toString();"",""            case SQLTokenizer.DATE:"",""                    return new DateTime( readDate(), SQLTokenizer.DATE ).toString();"",""            case SQLTokenizer.SMALLDATETIME:"",""                    return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP ).toString();"",""            case SQLTokenizer.UNIQUEIDENTIFIER:"",""                    return Utils.bytes2unique( page, this.offset);"",""            default: throw new Error();"",""        }"",""    }""]"
/smallsql/junit/BenchTest/createTestDataWithClassicInsert(java.sql.Connection),"[""// create test data after the insert test is failed"",""    static void createTestDataWithClassicInsert(Connection con) throws SQLException{"",""        String sql = \""INSERT INTO \"" + tableName + \""(bi,c,d,de,f,im,i,m,n,r,si,sd,sm,sy,t,ti,vb,vc) VALUES(0x172243,\'Test\',\'20010101\',1234.56789,9876.54321,0x\"";"",""        for(int i=0; i\<largeByteArray.length; i++){"",""            sql += \""00\"";"",""        }"",""        Statement st = con.createStatement();"",""        for (int i=0; i\<rowCount; i++){"",""            st.execute(sql + \"",\""+i+\"",23.45,567.45,78.89,\""+i+\"",\'11:11:11\',34.56,\'sysname (30) NULL\',\'ntext NULL, sample to save in the field\',\""+(i & 0xFF)+\"",0x172243,\'nvarchar (255) NULL\')\""  );"",""        }"",""        st.close();"",""    }""]"
/smallsql/database/SSResultSet/getTimestamp(java.lang.String),"[""public Timestamp getTimestamp(String columnName) throws SQLException {"",""        return getTimestamp( findColumn( columnName ) );"",""    }""]"
/smallsql/database/SSCallableStatement/getBoolean(java.lang.String),"[""public boolean getBoolean(String parameterName) throws SQLException {"",""        return getBoolean( findParameter( parameterName ) );"",""    }""]"
"/smallsql/database/StoreImpl/getDouble(int,int)","[""/**"",""     * It used for ResultSet.getDouble()"",""     */"",""    @Override"",""    double getDouble(int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    return readBoolean() ? 1 : 0;"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return Utils.bytes2double( readBinary() );"",""            case SQLTokenizer.TINYINT:"",""                    return readUnsignedByte();"",""            case SQLTokenizer.SMALLINT:"",""                    return readShort();"",""            case SQLTokenizer.INT:"",""                    return readInt();"",""            case SQLTokenizer.BIGINT:"",""                    return readLong();"",""            case SQLTokenizer.REAL:"",""                    return readFloat();"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return readDouble();"",""            case SQLTokenizer.MONEY:"",""                    return readLong() / 10000.0;"",""            case SQLTokenizer.SMALLMONEY:"",""                    return readInt() / 10000.0;"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return readNumeric().doubleValue();"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return Double.parseDouble( readString() );"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return Double.parseDouble( readLongString() );"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());"",""                    ObjectInputStream ois = new ObjectInputStream(bais);"",""                    return Double.parseDouble( ois.readObject().toString() );"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return Utils.bytes2double( readLongBinary() );"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\t\treturn readTimestamp();"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\treturn readTime();"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\treturn readDate();"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\treturn readSmallDateTime();"",""\t\t\tdefault:"",""\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \""NUMERIC\"" });"",""        }"",""    }""]"
"/smallsql/database/SSDatabaseMetaData/getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException {"",""        String[] colNames = {\""TABLE_CAT\"", \""TABLE_SCHEM\"", \""TABLE_NAME\"", \""COLUMN_NAME\"", \""GRANTOR\"", \""GRANTEE\"", \""PRIVILEGE\"", \""IS_GRANTABLE\""};"",""        /**@todo: Implement this java.sql.DatabaseMetaData method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method getColumnPrivileges() not yet implemented.\"");"",""    }""]"
/smallsql/database/MutableNumeric/sub(smallsql.database.MutableNumeric),"[""/**"",""     * Subtract the value to the current MutableNumeric Object and change it."",""     * @param num the subtracted  value"",""     */"",""    void sub(MutableNumeric num){"",""\t\tif(num.scale \< scale){"",""\t\t\tnum.setScale(scale);"",""\t\t}else"",""\t\tif(num.scale \> scale){"",""\t\t\tsetScale(num.scale);"",""\t\t}"",""        add( -num.signum, num.value );"",""    }""]"
/smallsql/database/language/Language_it/Language_it(),"[""protected Language_it() {"",""\t\taddMessages(ENTRIES);"",""\t}""]"
/smallsql/database/RowSource/relative(int),"[""boolean relative(int rows) throws Exception{"",""\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);"",""\t}""]"
"/smallsql/database/Store/getBytes(int,int)","[""abstract byte[] getBytes( int offset, int dataType) throws Exception;""]"
/smallsql/database/SSStatement/getFetchDirection(),"[""final public int getFetchDirection() throws SQLException{"",""        checkStatement();"",""        return fetchDirection;"",""    }""]"
/smallsql/database/Columns/resize(int),"[""private final void resize(int newSize){"",""\t\tColumn[] dataNew = new Column[newSize];"",""\t\tSystem.arraycopy(data, 0, dataNew, 0, size);"",""\t\tdata = dataNew;\t\t"",""\t}""]"
"/smallsql/junit/BasicTestCase/assertEqualsRsValue(java.lang.Object,java.lang.String)","[""/**"",""\t * Test a single Value of a the ResultSet that was produce from the SQL"",""\t */"",""   \tvoid assertEqualsRsValue(Object obj, String sql) throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs = st.executeQuery(sql);"",""\t\tassertTrue( \""No row produce\"", rs.next());"",""        assertEqualsRsValue(obj,rs,false);"",""    }""]"
/smallsql/database/ExpressionValue/ExpressionValue(int),"[""/**"",""\t * Constructor is used from Constructor GroupResult"",""\t */"",""\tExpressionValue(int type){"",""\t\tsuper(type);"",""\t\tswitch(type){"",""\t\t\tcase GROUP_BY:"",""\t\t\tcase SUM:"",""\t\t\tcase FIRST:"",""\t\t\tcase LAST:"",""\t\t\t\tclear();"",""\t\t\t\tbreak;"",""\t\t\tcase MIN:"",""\t\t\tcase MAX:"",""\t\t\t\t// set value to null"",""\t\t\t\tbreak;"",""\t\t\tcase COUNT:"",""\t\t\t\tvalue = new MutableInteger(0);"",""\t\t\t\tdataType = SQLTokenizer.INT;"",""\t\t\t\tbreak;"",""\t\t\tdefault: throw new Error();"",""\t\t}"",""\t}""]"
"/smallsql/database/Table/Table(smallsql.database.Database,smallsql.database.SSConnection,java.lang.String,smallsql.database.Columns,smallsql.database.IndexDescriptions,smallsql.database.IndexDescriptions,smallsql.database.ForeignKeys)","[""/**"",""     * Constructor for alter an existing tables."",""     */"",""    Table(Database database, SSConnection con, String name, Columns columns, IndexDescriptions existIndexes, IndexDescriptions newIndexes, ForeignKeys foreignKeys) throws Exception{"",""        super( name, columns );"",""        this.database = database;"",""        this.references = foreignKeys;"",""        newIndexes.create(con, database, this);"",""        if(existIndexes == null){"",""            this.indexes = newIndexes;"",""        }else{"",""            this.indexes = existIndexes;"",""            existIndexes.add(newIndexes);"",""        }"",""        "",""        write(con);"",""        for(int i=0; i\<foreignKeys.size(); i++){"",""            ForeignKey foreignKey = foreignKeys.get(i);"",""            Table pkTable = (Table)database.getTableView(con, foreignKey.pkTable);"",""            pkTable.references.add(foreignKey);"",""        }"",""    }""]"
"/smallsql/database/SSPreparedStatement/setCharacterStream(int,java.io.Reader,int)","[""public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setCharacterStream() not yet implemented.\"");"",""    }""]"
/smallsql/database/TableViewResult/init(smallsql.database.SSConnection),"[""/**"",""\t * Is used for compile() of different Commands"",""\t * "",""\t * @param con"",""\t * @return true if now init; false if already init"",""\t * @throws Exception"",""\t */"",""\tboolean init( SSConnection con ) throws Exception{"",""\t\tTableView tableView = getTableView();"",""\t\tif(tableTimestamp != tableView.getTimestamp()){"",""\t\t\tthis.con = con;"",""\t\t\ttableTimestamp = tableView.getTimestamp();"",""\t\t\treturn true;"",""\t\t}"",""\t\treturn false;"",""\t}""]"
/smallsql/database/Expression/getParams(),"[""final Expression[] getParams(){ return params; }""]"
/smallsql/database/ExpressionFunctionSign/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(param1.isNull()) return 0;"",""\t\tswitch(ExpressionArithmetic.getBestNumberDataType(param1.getDataType())){"",""\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\tint intValue = param1.getInt();"",""\t\t\t\tif(intValue \< 0)"",""\t\t\t\t\treturn -1;"",""\t\t\t\tif(intValue \> 0)"",""\t\t\t\t\treturn 1;"",""\t\t\t\treturn 0;"",""\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\tlong longValue = param1.getLong();"",""\t\t\t\tif(longValue \< 0)"",""\t\t\t\t\treturn -1;"",""\t\t\t\tif(longValue \> 0)"",""\t\t\t\t\treturn 1;"",""\t\t\t\treturn 0;"",""\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\t\tlongValue = param1.getMoney();"",""\t\t\t\tif(longValue \< 0)"",""\t\t\t\t\treturn -1;"",""\t\t\t\tif(longValue \> 0)"",""\t\t\t\t\treturn 1;"",""\t\t\t\treturn 0;"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\treturn param1.getNumeric().getSignum();"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\tdouble doubleValue = param1.getDouble();"",""\t\t\t\tif(doubleValue \< 0)"",""\t\t\t\t\treturn -1;"",""\t\t\t\tif(doubleValue \> 0)"",""\t\t\t\t\treturn 1;"",""\t\t\t\treturn 0;"",""\t\t\tdefault:"",""\t\t\t\tthrow new Error();"",""\t\t}"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsExtendedSQLGrammar(),"[""public boolean supportsExtendedSQLGrammar() {"",""    \treturn true;"",""    }""]"
"/smallsql/database/StoreNoCurrentRow/getNumeric(int,int)","[""MutableNumeric getNumeric(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnFloat/getBoolean(),"[""final boolean getBoolean() throws Exception{"",""        return getDouble() != 0;"",""    }""]"
"/smallsql/database/SSResultSet/updateRef(int,java.sql.Ref)","[""public void updateRef(int columnIndex, Ref x) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.updateRef method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Ref\"");"",""    }""]"
/smallsql/database/DateTime/getDataType(),"[""int getDataType(){"",""\t\treturn dataType;"",""\t}""]"
/smallsql/database/ExpressionFunctionCase/getObject(),"[""final Object getObject() throws Exception {"",""\t\treturn getResult().getObject();"",""\t}""]"
/smallsql/database/JoinScrollIndex/nextEquals(),"[""private boolean nextEquals() throws Exception{"",""        if(rowList != null){"",""            long rowPosition = rowList.getNext(longListEnum);"",""            if(rowPosition != -1){"",""                right.setRowPosition(rowPosition);"",""                return true;"",""            }"",""            rowList = null;"",""        }"",""        Object rows;"",""        do{"",""            if(!left.next()){"",""                return false;"",""            }"",""            rows = index.findRows(leftEx, false, null);"",""        }while(rows == null);"",""        "",""        if(rows instanceof Long){"",""            right.setRowPosition(((Long)rows).longValue());"",""        }else{"",""            rowList = (LongTreeList)rows;"",""            longListEnum.reset();"",""            right.setRowPosition(rowList.getNext(longListEnum));"",""        }"",""        return true;"",""    }""]"
/smallsql/database/Strings/Strings(),"[""Strings(){"",""\t\tdata = new String[16];"",""\t}""]"
/smallsql/junit/TestGroupBy/testCountNoRow(),"[""public void testCountNoRow() throws Exception{"",""\t\tinit();"",""\t"",""\t\t// test count(*) without any row"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tst.execute(\""Delete FROM \"" + table1);"",""\t\tinit = false;"",""\t\tassertEqualsRsValue( new Integer(0), \""Select count(*) FROM \"" + table1);"",""\t}""]"
/smallsql/database/SSResultSetMetaData/isAutoIncrement(int),"[""public boolean isAutoIncrement(int column) throws SQLException {"",""        return getColumnExpression( column ).isAutoIncrement();"",""    }""]"
/smallsql/database/SSStatement/getResultSetHoldability(),"[""final public int getResultSetHoldability() throws SQLException{"",""        /** @todo: Implement this java.sql.Statement method */"",""        throw new java.lang.UnsupportedOperationException(\""Method getResultSetHoldability() not yet implemented.\"");"",""    }""]"
/smallsql/database/UnionAll/rowDeleted(),"[""final boolean rowDeleted(){"",""\t\treturn currentDS.rowDeleted();"",""\t}""]"
"/smallsql/database/ExpressionFunctionConvert/ExpressionFunctionConvert(smallsql.database.Column,smallsql.database.Expression,smallsql.database.Expression)","[""public ExpressionFunctionConvert(Column datatype, Expression value, Expression style) {"",""\t\tsuper();"",""\t\tthis.datatype = datatype;"",""\t\tExpression[] params = (style == null) ? new Expression[]{value} : new Expression[]{value, style};"",""\t\tsetParams( params );"",""\t}""]"
/smallsql/database/ExpressionFunctionReplace/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\tString str1 = param1.getString();"",""\t\tString str2  = param2.getString();"",""        int length = str2.length();"",""        if(length == 0){"",""            return str1;"",""        }"",""        String str3  = param3.getString();"",""        StringBuffer buffer = new StringBuffer();"",""        int idx1 = 0;"",""        int idx2 = str1.indexOf(str2,idx1);"",""        while(idx2 \>= 0){"",""            buffer.append(str1.substring(idx1,idx2));"",""            buffer.append(str3);"",""            idx1 = idx2 + length;"",""            idx2 = str1.indexOf(str2,idx1);"",""        }"",""        if(idx1 \> 0){"",""            buffer.append(str1.substring(idx1));"",""            return buffer.toString();"",""        }"",""\t\treturn str1;"",""\t}""]"
/smallsql/database/TableView/close(),"[""/**"",""\t * Close it and free all resources."",""\t */"",""\tvoid close() throws Exception{/* in this abstract class is nothing to free */}""]"
/smallsql/database/SSCallableStatement/getBlob(int),"[""public Blob getBlob(int i) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method getBlob() not yet implemented.\"");"",""    }""]"
/smallsql/database/SSResultSet/getValue(int),"[""/**"",""     * Get the expression of a column. "",""     * This expression can be used to request a value of the current row."",""     */"",""    final private Expression getValue(int columnIndex) throws SQLException{"",""        if(values != null){"",""            ExpressionValue value = values[ metaData.getColumnIdx( columnIndex ) ];"",""            if(!value.isEmpty() || isInsertRow){ "",""                return value;"",""            }"",""        }"",""        return metaData.getColumnExpression(columnIndex);"",""    }""]"
/smallsql/junit/TestGroupBy/TestGroupBy(java.lang.String),"[""public TestGroupBy(String name) {"",""\t\tsuper(name);"",""\t}""]"
"/smallsql/database/SSConnection/createStatement(int,int)","[""public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {"",""        return new SSStatement( this, resultSetType, resultSetConcurrency);"",""    }""]"
/smallsql/database/DateTime/valueOf(java.util.Date),"[""static DateTime valueOf(java.util.Date date){"",""\t\tif(date == null) return null;"",""\t\tint type;"",""\t\tif(date instanceof java.sql.Date)"",""\t\t\ttype = SQLTokenizer.DATE;"",""\t\telse"",""\t\tif(date instanceof java.sql.Time)"",""\t\t\ttype = SQLTokenizer.TIME;"",""\t\telse"",""\t\t\ttype = SQLTokenizer.TIMESTAMP;"",""\t\treturn new DateTime( parse(date), type);"",""\t}""]"
/smallsql/database/TableViewResult/insertRow(smallsql.database.Expression[]),"[""abstract void insertRow(Expression[] updateValues) throws Exception;""]"
/smallsql/database/ExpressionFunctionLTrim/getBytes(),"[""final byte[] getBytes() throws Exception{"",""\t\tif(isNull()) return null;"",""\t\tbyte[] bytes = param1.getBytes();"",""        int start = 0;"",""        int length = bytes.length;"",""        while(start\<length && bytes[start]==0){"",""            start++;"",""        }"",""        length -= start; "",""\t\tbyte[] b = new byte[length];"",""\t\tSystem.arraycopy(bytes, start, b, 0, length);"",""\t\treturn b;\t\t"",""\t}""]"
/smallsql/database/ExpressionName/getLong(),"[""long getLong() throws Exception{"",""        return fromEntry.getLong(colIdx);"",""    }""]"
/smallsql/database/TableView/findColumn(java.lang.String),"[""/**"",""\t * Returns the Column of a column name."",""\t */"",""\tfinal Column findColumn(String columnName){"",""\t\tfor(int i=0; i\<columns.size(); i++){"",""\t\t\tColumn column = columns.get(i);"",""\t\t\tif( column.getName().equalsIgnoreCase(columnName) ) return column;"",""\t\t}"",""\t\treturn null;"",""\t}""]"
/smallsql/junit/TestStatement/testResultSetType(),"[""public void testResultSetType() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""        "",""        assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, st.getResultSetType());"",""        assertEquals(ResultSet.CONCUR_UPDATABLE, st.getResultSetConcurrency());"",""        "",""        ResultSet rs = st.executeQuery(\""Select * From statement\"");"",""        "",""        assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, rs.getType());"",""        assertEquals(ResultSet.CONCUR_UPDATABLE, rs.getConcurrency());"",""    }""]"
/smallsql/database/ExpressionFunctionASin/getFunction(),"[""final int getFunction(){ return SQLTokenizer.ASIN; }""]"
"/smallsql/database/MemoryResult/MemoryResult(java.lang.Object[][],int)","[""/**"",""\t * Constructor for DatabaseMetaData. ResultSets that not based on a store."",""\t */"",""\tMemoryResult(Object[][] data, int colCount) throws SQLException{"",""        for(int c=0; c\<colCount; c++){"",""            Column column = new Column();"",""            column.setDataType(SQLTokenizer.NULL);"",""            columns.add( column );"",""        }"",""\t\tfor(int r=0; r\<data.length; r++){"",""\t\t\tObject[] row = data[r];"",""            ExpressionValue[] rowValues = new ExpressionValue[row.length];"",""\t\t\taddRow(rowValues);"",""\t\t\tfor(int c=0; c\<colCount; c++){"",""                ExpressionValue expr = rowValues[c] = new ExpressionValue();"",""\t\t\t\texpr.set( row[c], -1);"",""                Column column = columns.get(c);"",""                if(expr.getDataType() != SQLTokenizer.NULL){"",""                    column.setDataType(expr.getDataType());"",""                }"",""                if(expr.getPrecision() \> column.getPrecision()){"",""                    column.setPrecision(expr.getPrecision());"",""                }"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getDataType(),"[""int getDataType() {"",""\t\treturn SQLTokenizer.TIMESTAMP;"",""\t}""]"
/smallsql/database/MutableNumeric/add(smallsql.database.MutableNumeric),"[""/**"",""     * Add the value to the current MutableNumeric Object and change it."",""     * @param num the added value"",""     */"",""    void add(MutableNumeric num){"",""\t\tif(num.scale \< scale){"",""\t\t\tnum.setScale(scale);"",""\t\t}else"",""\t\tif(num.scale \> scale){"",""\t\t\tsetScale(num.scale);"",""\t\t}"",""        add( num.signum, num.value );"",""    }""]"
"/smallsql/database/SSPreparedStatement/setTimestamp(int,java.sql.Timestamp,java.util.Calendar)","[""public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setTimestamp() not yet implemented.\"");"",""    }""]"
/smallsql/database/ViewResult/nullRow(),"[""void nullRow() {"",""\t\tcommandSelect.from.nullRow();"","""",""\t}""]"
/smallsql/database/Distinct/noRow(),"[""final void noRow() {"",""\t\trowSource.noRow();"",""\t\trow = 0;"",""\t}""]"
"/smallsql/database/SSResultSet/updateTimestamp(int,java.sql.Timestamp)","[""public void updateTimestamp(int columnIndex, Timestamp x) throws SQLException {"",""\t\tupdateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.TIMESTAMP);"",""    }""]"
/smallsql/database/SSStatement/setQueryTimeout(int),"[""final public void setQueryTimeout(int seconds) throws SQLException{"",""        checkStatement();"",""        queryTimeout = seconds;"",""    }""]"
/smallsql/database/SQLParser/singleSelect(),"[""/**"",""     * A single SELECT of a UNION or only a simple single SELECT."",""     * @return"",""     * @throws SQLException"",""     */"",""    private CommandSelect singleSelect() throws SQLException{"",""        CommandSelect selCmd = new CommandSelect(con.log);"",""\t\tSQLToken token;"",""        // scan for prefix like DISTINCT, ALL and the TOP clause; sample: SELECT TOP 15 ..."",""Switch: while(true){"",""\t\t\ttoken = nextToken(MISSING_EXPRESSION);"",""\t\t\tswitch(token.value){"",""\t\t\t\tcase SQLTokenizer.TOP:"",""\t\t\t\t\ttoken = nextToken(MISSING_EXPRESSION);"",""\t\t\t\t\ttry{"",""\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));"",""\t\t\t\t\t\tselCmd.setMaxRows(maxRows);"",""\t\t\t\t\t}catch(NumberFormatException e){"",""\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));"",""\t\t\t\t\t}"",""\t\t\t\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.ALL:"",""\t\t\t\t\tselCmd.setDistinct(false);"",""\t\t\t\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.DISTINCT:"",""\t\t\t\t\tselCmd.setDistinct(true);"",""\t\t\t\t\tbreak;"",""\t\t\t\tdefault:"",""\t\t\t\t\tpreviousToken();"",""\t\t\t\t\tbreak Switch;"",""\t\t\t}"",""\t\t}"","""",""        while(true){"",""            Expression column = expression(selCmd, 0);"",""            selCmd.addColumnExpression( column );"","""",""            token = nextToken();"",""            if(token == null) return selCmd; // SELECT without FROM"","""",""            boolean as = false;"",""            if(token.value == SQLTokenizer.AS){"",""                token = nextToken(MISSING_EXPRESSION);"",""                as = true;"",""            }"","""",""            if(as || (!isKeyword(token))){"",""            \tString alias = getIdentifier( token);"",""                column.setAlias( alias );"",""                token = nextToken();"",""                if(token == null) return selCmd; // SELECT without FROM"",""            }"","""",""            switch(token.value){"",""                case SQLTokenizer.COMMA:"",""                        if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );"",""                        column = null;"",""                        break;"",""                case SQLTokenizer.FROM:"",""                        if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );"",""                        column = null;"",""                        from(selCmd);"",""                        return selCmd;"","""",""                default:"",""                        if(!isKeyword(token))"",""                \t\t\tthrow createSyntaxError( token, new int[]{SQLTokenizer.COMMA, SQLTokenizer.FROM} );"",""                        previousToken();"",""                        return selCmd;"",""            }"",""        }"",""    }""]"
/smallsql/database/SSResultSetMetaData/isSignedDataType(int),"[""static boolean isSignedDataType(int dataType) {"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\tcase SQLTokenizer.INT:"",""\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\tcase SQLTokenizer.SMALLMONEY:"",""\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\tcase SQLTokenizer.REAL:"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\treturn true;"",""\t\t}"",""\t\treturn false;"",""\t}""]"
/smallsql/database/SSResultSet/isFirst(),"[""public boolean isFirst() throws SQLException {"",""    \treturn getCmd().isFirst();"",""    }""]"
/smallsql/junit/TestMoneyRounding/verify(int),"[""private void verify(int firstValue) throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs = st.executeQuery(\""Select * FROM \"" + table);"",""\t\tlong i = firstValue;"",""\t\twhile(rs.next()){"",""\t\t\tObject obj1 = rs.getObject(1);"",""\t\t\tObject obj2 = rs.getObject(2);"",""\t\t\tif(obj1 instanceof Money){"",""\t\t\t\tMoney mon1 = (Money)obj1;"",""\t\t\t\tMoney mon2 = (Money)obj2;"",""\t\t\t\tassertEquals(\""Roundungsfehler money:\"", i, mon1.unscaledValue());"",""\t\t\t\tassertEquals(\""Roundungsfehler smallmoney:\"", i, mon2.unscaledValue());"",""\t\t\t}else{"",""\t\t\t\tBigDecimal mon1 = (BigDecimal)obj1;"",""\t\t\t\tBigDecimal mon2 = (BigDecimal)obj2;"",""\t\t\t\tassertEquals(\""Roundungsfehler money:\"", i, mon1.unscaledValue().longValue());"",""\t\t\t\tassertEquals(\""Roundungsfehler smallmoney:\"", i, mon2.unscaledValue().longValue());"",""\t\t\t}"",""\t\t\ti++;"",""\t\t}"",""\t\tst.close();"",""    }""]"
/smallsql/database/CommandSelect/setGroup(smallsql.database.Expressions),"[""final void setGroup(Expressions group){"",""        this.groupBy = group;"",""    }""]"
/smallsql/database/ExpressionFunctionRTrim/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\tString str = param1.getString();"",""        int length = str.length();"",""        while(length\>0 && str.charAt(length-1)==\' \'){"",""            length--;"",""        }"",""\t\treturn str.substring(0,length);"",""\t}""]"
/smallsql/database/MemoryResult/getMoney(int),"[""long getMoney( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getMoney();"",""\t}""]"
/smallsql/database/ExpressionFunctionAbs/getInt(),"[""int getInt() throws Exception{"",""        return Math.abs( param1.getInt() );"",""    }""]"
/smallsql/database/Expression/clone(),"[""protected Object clone() throws CloneNotSupportedException{"",""\t\treturn super.clone();"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnInt/getFloat(),"[""final float getFloat() throws Exception {"",""\t\treturn getInt();"",""\t}""]"
/smallsql/database/Identity/getImmutableObject(),"[""public Object getImmutableObject(){"",""        return new Long(value);"",""    }""]"
/smallsql/database/MemoryResult/get(int),"[""/**"","" \t * Returns the current Expression for the columnIdx. "","" \t * The columnIdx starts at 0."","" \t * There is no index check. "","" \t */\t"",""\tprivate Expression get(int colIdx) throws Exception{"",""\t\tif(currentRow == null) throw SmallSQLException.create(Language.ROW_NOCURRENT);"",""\t\treturn currentRow[ colIdx ];"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsPositionedDelete(),"[""public boolean supportsPositionedDelete() {"",""    \treturn true;"",""    }""]"
/smallsql/database/MutableNumeric/getScale(),"[""int getScale(){"",""\t    return scale;"",""    }""]"
/smallsql/database/ViewResult/getLong(int),"[""long getLong(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getLong();"",""\t}""]"
/smallsql/database/Lobs/Lobs(smallsql.database.Table),"[""Lobs(Table table) throws Exception{"",""\t\tsuper(table.database, table.name);"",""\t\traFile = Utils.openRaFile( getFile(database), database.isReadOnly() );"",""\t}""]"
/smallsql/database/DataSource/isNull(int),"[""abstract boolean isNull( int colIdx ) throws Exception;""]"
/smallsql/database/SSDatabaseMetaData/supportsUnion(),"[""public boolean supportsUnion() {"",""\t\treturn true;"",""    }""]"
"/smallsql/database/SSResultSet/updateArray(int,java.sql.Array)","[""public void updateArray(int columnIndex, Array x) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.updateArray method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Array\"");"",""    }""]"
"/smallsql/database/Utils/createTableViewFileName(smallsql.database.Database,java.lang.String)","[""static String createTableViewFileName(Database database, String name){"",""        return database.getName() + \'/\' + name + TABLE_VIEW_EXTENTION;"",""    }""]"
/smallsql/database/SSResultSet/getAsciiStream(int),"[""public InputStream getAsciiStream(int columnIndex) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.getAsciiStream method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""getAsciiStream\"");"",""    }""]"
/smallsql/junit/TestDBMetaData/testGetURL(),"[""public void testGetURL() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        assertEquals( \""URL\"", AllTests.JDBC_URL, md.getURL());"",""    }""]"
/smallsql/database/SSResultSetMetaData/isWritable(int),"[""public boolean isWritable(int column) throws SQLException {"",""        return getColumnExpression( column ).isDefinitelyWritable();"",""    }""]"
"/smallsql/database/SSConnection/prepareCall(java.lang.String,int,int,int)","[""public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {"",""    \t//TODO resultSetHoldability"",""\t\treturn new SSCallableStatement( this, sql, resultSetType, resultSetConcurrency);"",""    }""]"
/smallsql/database/ExpressionValue/getLong(),"[""long getLong() throws Exception{"",""    \treturn getLong( getObject(), dataType);"",""    }""]"
"/smallsql/database/LongLongList/add(long,long)","[""final void add(long value1, long value2){"",""\t\tint size2 = size \<\< 1;"",""\t\tif(size2 \>= data.length ){"",""\t\t\tresize(size2);"",""\t\t}"",""\t\tdata[ size2   ] = value1;"",""\t\tdata[ size2 +1] = value2;"",""\t\tsize++;"",""\t}""]"
"/smallsql/database/SSResultSet/getObject(int,java.util.Map)","[""public Object getObject(int i, Map map) throws SQLException {"",""        return getObject( i );"",""    }""]"
/smallsql/junit/TestOther/testManyColumns(),"[""public void testManyColumns() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""        dropTable( con, \""ManyCols\"" );"",""\t\tStringBuffer buf = new StringBuffer(\""Create Table ManyCols(\"");"",""\t\tfor(int i=1; i\<300; i++){"",""\t\t\tif(i!=1)buf.append(\',\');"",""\t\t\tbuf.append(\""column\"").append(i).append(\"" int\"");"",""\t\t}"",""\t\tbuf.append(\')\');"",""\t\t"",""\t\tst.execute(buf.toString());"",""\t\tcon.close();"",""\t\tcon = AllTests.getConnection();"",""\t\tst = con.createStatement();"",""\t\tassertEquals(1,st.executeUpdate(\""Insert Into ManyCols(column260) Values(123456)\""));"",""\t\tst.execute(\""Drop Table ManyCols\"");"",""\t}""]"
/smallsql/database/Table/drop(smallsql.database.SSConnection),"[""/**"",""     * Drop a loaded table."",""     *"",""     */"",""    void drop(SSConnection con) throws Exception{"",""\t\tTableStorePage storePage = requestLock( con, SQLTokenizer.CREATE, -1 );"",""\t\tif(storePage == null){"",""\t\t\tthrow SmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED, name);"",""        }"",""\t\t// remove the all commits that point to this table"",""\t\tcon.rollbackFile(raFile);"",""\t\tclose();"",""\t\tif(lobs != null)"",""\t\t\tlobs.drop(con);"",""\t\tif(indexes != null)"",""\t\t\tindexes.drop(database);"",""\t\tboolean ok = getFile(database).delete();"",""\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);"",""    }""]"
"/smallsql/database/ExpressionValue/getFloat(java.lang.Object,int)","[""static float getFloat(Object obj, int dataType) throws Exception{"",""        if(obj == null) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""                return (obj.equals(Boolean.TRUE)) ? 1 : 0;"",""            case SQLTokenizer.INT:"",""            case SQLTokenizer.BIGINT:"",""            case SQLTokenizer.DOUBLE:"",""\t\t\tcase SQLTokenizer.FLOAT:"",""            case SQLTokenizer.REAL:"",""            case SQLTokenizer.MONEY:"",""                return ((Number)obj).floatValue();"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\treturn ((DateTime)obj).getTimeMillis();"",""            default: return Float.parseFloat( obj.toString() );"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionIIF/getObject(),"[""Object getObject() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.getObject();"",""\t\treturn param3.getObject();"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getAttributes(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException {"",""        /**@todo: Implement this java.sql.DatabaseMetaData method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method getAttributes() not yet implemented.\"");"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1Number/getNumeric(),"[""MutableNumeric getNumeric() throws Exception{"",""\t\tif(param1.isNull()) return null;"",""\t\tswitch(getDataType()){"",""\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\treturn new MutableNumeric(getInt());"",""\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\treturn new MutableNumeric(getLong());"",""\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\t\treturn new MutableNumeric(getMoney(), 4);"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\tMutableNumeric num = param1.getNumeric();"",""\t\t\t\tnum.floor();"",""\t\t\t\treturn num;"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\treturn new MutableNumeric(getDouble());"",""\t\t\tdefault:"",""\t\t\t\tthrow new Error();"",""\t\t}"",""    }""]"
/smallsql/database/SSConnection/setHoldability(int),"[""public void setHoldability(int holdability){"",""        this.holdability = holdability;"",""    }""]"
/smallsql/database/SSResultSet/isBeforeFirst(),"[""public boolean isBeforeFirst() throws SQLException {"",""\t\treturn getCmd().isBeforeFirst();"",""    }""]"
/smallsql/database/ExpressionFunctionRound/getFunction(),"[""final int getFunction(){ return SQLTokenizer.ROUND; }""]"
"/smallsql/database/SSCallableStatement/setLong(java.lang.String,long)","[""public void setLong(String parameterName, long x) throws SQLException {"",""        setLong( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/SSConnection/close(),"[""public void close() throws SQLException {"",""        rollback();"",""\t\tdatabase = null;"",""        commitPages = null;"",""\t\tDatabase.closeConnection(this);"",""    }""]"
/smallsql/database/MutableFloat/doubleValue(),"[""public double doubleValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/database/RowSource/getRowPosition(),"[""/**"",""     * Get a marker for the current row. The method setRowPostion must be reconstruct"",""     * the current row. The RowPosition can be a file offset for TableResult."",""     * This is using for SortedResult."",""     * @return The value need be \>= 0."",""     * It can be a counter for MemoryResult."",""     */"",""\tabstract long getRowPosition();""]"
/smallsql/database/ExpressionName/isNull(),"[""boolean isNull() throws Exception{"",""        return fromEntry.isNull(colIdx);"",""    }""]"
"/smallsql/database/StoreNoCurrentRow/getBytes(int,int)","[""byte[] getBytes(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/junit/TestOperatoren/suite(),"[""public static Test suite() throws Exception{"",""        TestSuite theSuite = new TestSuite(\""Operatoren\"");"",""        for(int i=0; i\<TESTS.length; i++){"",""            theSuite.addTest(new TestOperatoren( TESTS[i] ) );"",""        }"",""        return theSuite;"",""    }""]"
/smallsql/database/SSCallableStatement/getLong(int),"[""public long getLong(int i) throws SQLException {"",""        try{"",""            Expression expr = getValue(i);"",""            wasNull = expr.isNull();"",""            return expr.getLong();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/usesLocalFilePerTable(),"[""public boolean usesLocalFilePerTable() {"",""    \treturn false;"",""    }""]"
"/smallsql/database/Identity/Identity(java.nio.channels.FileChannel,long)","[""public Identity(FileChannel raFile, long filePos) throws IOException{"",""\t    ByteBuffer buffer = ByteBuffer.wrap(page);"",""\t\tsynchronized(raFile){"",""\t\t\traFile.position(filePos);"",""\t\t\traFile.read(buffer);"",""\t\t}"",""\t\tvalue = ((long)(page[ 0 ]) \<\< 56) |"",""\t\t\t\t((long)(page[ 1 ] & 0xFF) \<\< 48) |"",""\t\t\t\t((long)(page[ 2 ] & 0xFF) \<\< 40) |"",""\t\t\t\t((long)(page[ 3 ] & 0xFF) \<\< 32) |"",""\t\t\t\t((long)(page[ 4 ] & 0xFF) \<\< 24) |"",""\t\t\t\t((page[ 5 ] & 0xFF) \<\< 16) |"",""\t\t\t\t((page[ 6 ] & 0xFF) \<\< 8) |"",""\t\t\t\t((page[ 7 ] & 0xFF));"",""\t\tthis.raFile  = raFile;"",""\t\tthis.filePos = filePos;"",""\t}""]"
/smallsql/database/SSResultSet/getDate(int),"[""public Date getDate(int columnIndex) throws SQLException {"",""        try{"",""\t\t\tExpression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""\t\t\tif(wasNull) return null;"",""\t\t\treturn DateTime.getDate( expr.getLong() );"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/StoreImpl/writeString(java.lang.String),"[""void writeString( String strDaten ) throws SQLException{"",""        writeString( strDaten, Short.MAX_VALUE, true );"",""    }""]"
/smallsql/database/TableResult/setNextFilePos(),"[""/**"",""\t * A negative filePos means no more rows.\<p\>"",""\t * A value larger 0x4000000000000000L means a row that was inserted in this ResultSet.\<p\>"",""\t * A value of 0 means beforeFirst.\<p\>"",""\t * All other values are read position in the file.\<p\>"",""\t *"",""\t */"",""\tfinal private void setNextFilePos(){"",""\t\tif(filePos \< 0) return; // end of rows"",""\t\tif(store == Store.NOROW)"",""\t\t\t filePos = table.getFirstPage(); // can point at the end of file"",""\t\telse"",""\t\tif(filePos \>= 0x4000000000000000L){"",""\t\t\tfilePos++;"",""\t\t\tif((filePos & 0x3FFFFFFFFFFFFFFFL) \>= insertStorePages.size()){"",""\t\t\t\tfilePos = -1;"",""\t\t\t\tnoRow();"",""\t\t\t}"",""\t\t}else"",""\t\t\tfilePos = store.getNextPagePos();"",""\t}""]"
"/smallsql/database/View/View(smallsql.database.SSConnection,smallsql.database.CommandSelect)","[""/**"",""\t * Constructor for a UNION "",""\t */"",""\tView(SSConnection con, CommandSelect commandSelect) throws Exception{"",""\t\tsuper(\""UNION\"", new Columns());"",""\t\tthis.sql = null;"",""\t\tthis.commandSelect = commandSelect;"",""\t\tcreateColumns(con);"",""\t}""]"
/smallsql/database/Identity/createNextValue(smallsql.database.SSConnection),"[""void createNextValue(SSConnection con) throws SQLException{"",""\t\tvalue++;"",""\t\tcon.add( createStorePage() );"",""\t}""]"
/smallsql/database/SSStatement/checkStatement(),"[""void checkStatement() throws SQLException{"",""        if(isClosed){"",""            throw SmallSQLException.create(Language.STMT_IS_CLOSED);"",""        }"",""    }""]"
/smallsql/junit/TestGroupBy/testMaxTinyint(),"[""public void testMaxTinyint() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Integer(2), \""Select max(convert(tinyint,id)) FROM \"" + table1);"",""\t}""]"
/smallsql/database/MutableDouble/longValue(),"[""public long longValue() {"",""\t\treturn (long)value;"",""\t}""]"
/smallsql/database/SSConnection/setSavepoint(java.lang.String),"[""public Savepoint setSavepoint(String name) throws SQLException {"",""\t\treturn new SSSavepoint(getSavepoint(), name, transactionTime);"",""    }""]"
/smallsql/database/NoFromResult/last(),"[""final boolean last(){"",""\t\trowPos = 1;"",""\t\treturn true;"",""\t}""]"
"/smallsql/database/SSResultSet/updateBytes(java.lang.String,byte[])","[""public void updateBytes(String columnName, byte[] x) throws SQLException {"",""        updateBytes( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/ExpressionValue/isNull(),"[""boolean isNull(){"",""        return getObject() == null;"",""    }""]"
/smallsql/database/SSConnection/isReadOnly(),"[""public boolean isReadOnly(){"",""        return readonly;"",""    }""]"
"/smallsql/database/SSCallableStatement/setObject(java.lang.String,java.lang.Object,int,int)","[""public void setObject(String parameterName, Object x, int sqlType, int scale) throws SQLException {"",""        setObject( findParameter( parameterName ), x, sqlType, scale );"",""    }""]"
/smallsql/database/LongTreeList/removeNode(),"[""/**"",""\t * Remove a octet entry on the current offset for one of the first 3 levels. "",""\t * Then set it the pointer in the new entry to the new node "",""\t * @param octet a short value"",""\t */"",""\tfinal private void removeNode() throws SQLException{"",""\t\tint oldOffset = offset;"",""\t\t"",""\t\t//correct all offset that point behind the old node"",""\t\tcorrectPointers( 0, oldOffset, -(2+pointerSize), 0 );"","""",""\t\tsize -= 2+pointerSize;"",""\t\tSystem.arraycopy(data, oldOffset + 2+pointerSize, data, oldOffset, size-oldOffset);"","""",""\t\toffset = oldOffset;"",""\t}""]"
"/smallsql/junit/BasicTestCase/assertRSMetaData(java.sql.ResultSet,java.lang.String[],int[])","[""public void assertRSMetaData( ResultSet rs, String[] colNames, int[] types) throws Exception{"",""\t\tResultSetMetaData rm = rs.getMetaData();"",""\t\tint count = rm.getColumnCount();"",""\t\tassertEquals( \""Column count:\"", colNames.length, count);"",""\t\tfor(int i=1; i\<=count; i++){"",""\t\t\tassertEquals(\""Col \""+i+\"" name\"", colNames[i-1], rm.getColumnName(i));"",""\t\t\tassertEquals(\""Col \""+i+\"" label\"", colNames[i-1], rm.getColumnLabel(i));"",""\t\t\tassertEquals(\""Col \""+i+\"" type\"", types   [i-1], rm.getColumnType(i));"",""\t\t\tswitch(types[i-1]){"",""\t\t\t\tcase Types.VARCHAR:"",""\t\t\t\t\tassertTrue  (\""Wrong Precision (\"" + rm.getColumnTypeName(i) + \"") for Column \""+i+\"": \""+rm.getPrecision(i), rm.getPrecision(i) \> 0);"",""\t\t\t\t\tbreak;"",""\t\t\t\tcase Types.INTEGER:"",""\t\t\t\t\tassertTrue  (\""Wrong Precision (\"" + rm.getColumnTypeName(i) + \"") for Column \""+i, rm.getPrecision(i) \> 0);"",""\t\t\t\t\tbreak;"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionFunctionLTrim/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.LTRIM;"",""\t}""]"
/smallsql/junit/TestGroupBy/testMaxInt(),"[""public void testMaxInt() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Integer(2), \""Select max(id) FROM \"" + table1);"",""\t}""]"
/smallsql/database/Where/rowDeleted(),"[""final boolean rowDeleted() {"",""\t\treturn rowSource.rowDeleted();"",""\t}""]"
/smallsql/database/SSResultSet/getConcurrency(),"[""public int getConcurrency(){"",""    \treturn isUpdatable ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY;"",""    }""]"
"/smallsql/database/ViewResult/ViewResult(smallsql.database.SSConnection,smallsql.database.CommandSelect)","[""/**"",""\t * Constructor is used for UNION"",""\t * @throws Exception "",""\t * "",""\t */"",""\tViewResult(SSConnection con, CommandSelect commandSelect) throws SQLException{"",""\t\ttry{"",""\t\t\tthis.view = new View( con, commandSelect);"",""\t\t\tthis.columnExpressions = commandSelect.columnExpressions;"",""\t\t\tthis.commandSelect     = commandSelect;"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""\t}""]"
/smallsql/database/MemoryResult/getObject(int),"[""Object getObject( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getObject();"",""\t}""]"
/smallsql/database/Where/isExpressionsFromThisRowSource(smallsql.database.Expressions),"[""/**"",""     * @inheritDoc"",""     */"",""    boolean isExpressionsFromThisRowSource(Expressions columns){"",""        return rowSource.isExpressionsFromThisRowSource(columns);"",""    }""]"
/smallsql/database/SSStatement/getMaxRows(),"[""final public int getMaxRows(){"",""        return maxRows;"",""    }""]"
/smallsql/database/Columns/copy(),"[""Columns copy(){"",""        Columns copy = new Columns();"",""        Column[] cols = copy.data = (Column[]) data.clone(); "",""        for(int i=0; i\<size; i++){"",""            cols[i] = cols[i].copy();"",""        }"",""        copy.size = size;"",""        return copy;"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1/getObject(),"[""Object getObject() throws Exception{"",""\t\tif(isNull()) return null;"",""        int dataType = getDataType();"",""        switch(dataType){"",""\t        case SQLTokenizer.BIT:"",""\t        case SQLTokenizer.BOOLEAN:"",""\t                return getBoolean() ? Boolean.TRUE : Boolean.FALSE;"",""\t        case SQLTokenizer.BINARY:"",""\t        case SQLTokenizer.VARBINARY:"",""\t                return getBytes();"",""\t        case SQLTokenizer.TINYINT:"",""\t        case SQLTokenizer.SMALLINT:"",""\t        case SQLTokenizer.INT:"",""\t                return new Integer( getInt() );"",""\t        case SQLTokenizer.BIGINT:"",""\t                return new Long( getLong() );"",""\t        case SQLTokenizer.REAL:"",""\t                return new Float( getFloat() );"",""\t        case SQLTokenizer.FLOAT:"",""\t        case SQLTokenizer.DOUBLE:"",""\t                return new Double( getDouble() );"",""\t        case SQLTokenizer.MONEY:"",""\t        case SQLTokenizer.SMALLMONEY:"",""\t                return Money.createFromUnscaledValue( getMoney() );"",""\t        case SQLTokenizer.NUMERIC:"",""\t        case SQLTokenizer.DECIMAL:"",""\t                return getNumeric();"",""\t        case SQLTokenizer.CHAR:"",""\t        case SQLTokenizer.NCHAR:"",""\t        case SQLTokenizer.VARCHAR:"",""\t        case SQLTokenizer.NVARCHAR:"",""\t        case SQLTokenizer.LONGNVARCHAR:"",""\t        case SQLTokenizer.LONGVARCHAR:"",""\t        \t\treturn getString();"",""\t        case SQLTokenizer.LONGVARBINARY:"",""\t                return getBytes();"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\treturn new DateTime( getLong(), dataType );"",""\t        case SQLTokenizer.UNIQUEIDENTIFIER:"",""\t                return getBytes();"",""\t        default: throw createUnspportedDataType(param1.getDataType());"",""\t    }"",""    }""]"
/smallsql/database/Utils/getShort(int),"[""/**"",""     * recycle Integer objects, this is faster as to garbage the objects"",""\t */"",""\tstatic final Short getShort(int value){"",""\t\tif(value \>= -4 && value \< 256){"",""\t\t\treturn shortCache[ value+4 ];\t\t"",""\t\t}else"",""\t\t\treturn new Short((short)value);"",""\t}""]"
/smallsql/database/CommandSelect/deleteRow(smallsql.database.SSConnection),"[""final void deleteRow(SSConnection con) throws SQLException{"",""\t\tint savepoint = con.getSavepoint();"",""\t\ttry{"",""\t\t\tif(tables.size() \> 1)"",""\t\t\t\tthrow SmallSQLException.create(Language.JOIN_DELETE);"",""\t\t\tif(tables.size() == 0)"",""\t\t\t\tthrow SmallSQLException.create(Language.DELETE_WO_FROM);"",""\t\t\tTableViewResult.getTableViewResult( tables.get(0) ).deleteRow();"",""\t\t}catch(Throwable e){"",""\t\t\tcon.rollback(savepoint);"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}finally{"",""\t\t\tif(con.getAutoCommit()) con.commit();"",""\t\t}"",""\t}""]"
/smallsql/database/Identity/toString(),"[""@Override"",""    public String toString(){"",""\t    return String.valueOf(value);"",""\t}""]"
/smallsql/junit/TestExceptionMethods/testGetConnection(),"[""public void testGetConnection() throws Exception{"",""        Connection con;"",""        try{"",""            con = DriverManager.getConnection(AllTests.JDBC_URL + \""?abc\"");"",""            con.close();"",""            fail(\""SQLException should be thrown\"");"",""        }catch(SQLException ex){"",""            // is OK"",""        }"",""        con = DriverManager.getConnection(AllTests.JDBC_URL + \""? \"");"",""        con.close();"","""",""        con = DriverManager.getConnection(AllTests.JDBC_URL + \""?a=b; ; c=d  ; e = f; ; \"");"","""",""        // open 2 Connections with different written path"",""        Connection con2 = DriverManager.getConnection( \""jdbc:smallsql:\"" + new File( AllTests.CATALOG ).getAbsolutePath());"",""        con.close();"",""        con2.close();"","""",""        con = DriverManager.getConnection( \""jdbc:smallsql:file:\"" + AllTests.CATALOG );"",""        con.close();"",""    }""]"
/smallsql/database/IndexDescriptions/size(),"[""final int size(){"",""\t\treturn size;"",""\t}""]"
/smallsql/database/SSCallableStatement/getClob(int),"[""public Clob getClob(int i) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method getClob() not yet implemented.\"");"",""    }""]"
/smallsql/database/MutableNumeric/mod(smallsql.database.MutableNumeric),"[""void mod(MutableNumeric num){"",""    \t//TODO performance"",""\t\tnum = new MutableNumeric( doubleValue() % num.doubleValue() );"",""\t\tvalue = num.value;"",""\t\tscale = num.scale;"",""\t\tsignum = num.signum;"",""    }""]"
/smallsql/database/Expression/getFloat(),"[""abstract float getFloat() throws Exception;""]"
/smallsql/database/JoinScrollIndex/next(),"[""boolean next() throws Exception{"",""        switch(compare){"",""        case ExpressionArithmetic.EQUALS:"",""            return nextEquals();"",""        default:"",""            throw new Error(\""Compare operation not supported:\"" + compare);"",""        }"","""",""    }""]"
/smallsql/database/SSDatabaseMetaData/usesLocalFiles(),"[""public boolean usesLocalFiles() {"",""    \treturn false;"",""    }""]"
/smallsql/database/ExpressionFunctionAscii/getInt(),"[""final int getInt() throws Exception {"",""\t\tString str = param1.getString();"",""\t\tif(str == null || str.length() == 0) return 0;"",""\t\treturn str.charAt(0);"",""\t}""]"
/smallsql/database/SSConnection/getTypeMap(),"[""public Map getTypeMap(){"",""        return null;"",""    }""]"
"/smallsql/database/SSDatabaseMetaData/supportsResultSetConcurrency(int,int)","[""public boolean supportsResultSetConcurrency(int type, int concurrency) {"",""\t\tif(type \>= ResultSet.TYPE_FORWARD_ONLY && type \<= ResultSet.TYPE_SCROLL_SENSITIVE &&"",""\t\t\tconcurrency \>= ResultSet.CONCUR_READ_ONLY && concurrency \<= ResultSet.CONCUR_UPDATABLE)"",""\t\t\treturn true;"",""\t\treturn false;"",""    }""]"
/smallsql/database/IndexNode/saveValue(long),"[""/**"",""\t * Save the rowOffset on the digit position. This can be used for FINAL_VALUE or REMAINDER_VALUE."",""\t * The caller need to verify that there already exist an equals value."",""\t * This means that the digit and the remainder is equals."",""\t * @param digit The digit must be in the range 0 between 255. "",""\t * @param rowOffset The value that is saved in the tree."",""\t */"",""\tfinal void saveValue(long rowOffset) throws SQLException{"",""\t\tif(unique){"",""\t\t\tif(value != null) throw SmallSQLException.create(Language.KEY_DUPLICATE);"",""\t\t\tvalue = new Long(rowOffset);"",""\t\t}else{"",""\t\t\tLongTreeList list = (LongTreeList)value;"",""\t\t\tif(list == null){"",""\t\t\t\tvalue = list = new LongTreeList();"",""\t\t\t}"",""\t\t\tlist.add(rowOffset);"",""\t\t}"",""\t}""]"
/smallsql/database/LongTreeList/save(smallsql.database.StoreImpl),"[""/**"",""\t * Save this list to a serial stream. This can be used to save it on a hard disk."",""\t * @param output"",""\t */"",""\tfinal void save(StoreImpl output){"",""\t\toutput.writeInt(size);"",""\t\toutput.writeBytes(data, 0, size);"",""\t}""]"
/smallsql/database/MutableNumeric/floatValue(),"[""public float floatValue(){"",""        if(value.length == 0 || signum == 0){"",""            return 0;"",""        }else{"",""            if (value.length == 1 && (value[0] \> 0)){"",""                // simple Integer Value"",""                return value[0] / scaleFloatFactor[scale] * signum;"",""            }else"",""            if (value.length == 1){"",""                // overflow Integer Value"",""                long temp = value[0] & 0xFFFFFFFFL;"",""                return temp / scaleFloatFactor[scale] * signum;"",""            }else"",""            if (value.length == 2 && (value[0] \> 0)){"",""                // simple Long Value"",""                long temp = (((long)value[0]) \<\< 32) | (value[1] & 0xFFFFFFFFL);"",""                return temp / scaleFloatFactor[scale] * signum;"",""            }else{"",""                return new BigDecimal( new BigInteger( toByteArray() ), scale ).floatValue();"",""            }"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getUserName(),"[""public String getUserName() {"",""    \treturn \""\"";"",""    }""]"
/smallsql/junit/TestOther/testBinaryStore(),"[""public void testBinaryStore() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{"",""            Statement st = con.createStatement();"",""            st.execute(\""Create Table Binary (b varbinary(20))\"");"",""            "",""            st.execute(\""Truncate Table Binary\"");"",""            st.execute(\""Insert Into Binary(b) Values(12345)\"");"",""            ResultSet rs = st.executeQuery(\""Select * From Binary\"");"",""            rs.next();"",""            assertEquals(rs.getInt(1), 12345);"",""            "",""            st.execute(\""Truncate Table Binary\"");"",""            st.execute(\""Insert Into Binary(b) Values(1.2345)\"");"",""            rs = st.executeQuery(\""Select * From Binary\"");"",""            rs.next();"",""            assertEquals( 1.2345, rs.getDouble(1), 0.0);"",""            "",""            st.execute(\""Truncate Table Binary\"");"",""            st.execute(\""Insert Into Binary(b) Values(cast(1.2345 as real))\"");"",""            rs = st.executeQuery(\""Select * From Binary\"");"",""            rs.next();"",""            assertEquals( 1.2345F, rs.getFloat(1), 0.0);"",""            "",""        }finally{"",""            dropTable( con, \""Binary\"" );"",""        }"",""    }""]"
/smallsql/database/StoreNull/deleteRow(smallsql.database.SSConnection),"[""final void deleteRow(SSConnection con) throws SQLException{"",""\t\tif(nextPagePos \>= 0){"",""\t\t\tthrow SmallSQLException.create(Language.ROW_DELETED);"",""\t\t}"",""\t\t//TODO"",""\t\tthrow new Error();"",""\t}""]"
"/smallsql/database/Index/find(smallsql.database.IndexNode,long,int,java.util.ArrayList)","[""final private IndexNode find(IndexNode node, long key, int digitCount, ArrayList nodeList){"",""\t\tfor(int i=digitCount-1; i\>=0; i--){"",""\t\t\tchar digit = (char)(key \>\> (i\<\<4));"",""\t\t\tnode = node.getChildNode(digit);"",""\t\t\t"",""\t\t\tif(node == null) return null;"",""\t\t\tif(nodeList != null) nodeList.add(node);"","""",""\t\t\tif(equals(node.getRemainderValue(), key, i)){"",""\t\t\t\treturn node;"",""\t\t\t}"",""\t\t}"",""\t\treturn node;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getMaxRowSize(),"[""public int getMaxRowSize() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/Where/isFirst(),"[""final boolean isFirst(){"",""\t\treturn row == 1 && isCurrentRow;"",""\t}""]"
/smallsql/database/TableResult/getRow(),"[""@Override"",""    final int getRow(){"",""    \treturn row;"",""    }""]"
/smallsql/junit/TestStatement/testMoreResults(),"[""public void testMoreResults() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        "",""        ResultSet rs = st.executeQuery(\""Select * From statement\"");"",""        assertEquals( \""getResultSet()\"", rs, st.getResultSet() );"",""        assertEquals( \""getUpdateCount()\"", -1, st.getUpdateCount() );"",""        assertFalse( st.getMoreResults() );"",""        try{"",""            rs.next();"",""            fail(\""ResultSet should be closed\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""01000\"", 0, ex);"",""        }"",""        assertNull( \""getResultSet()\"", st.getResultSet() );"",""        assertEquals( \""getUpdateCount()\"", -1, st.getUpdateCount() );"",""        "",""        "",""        rs = st.executeQuery(\""Select * From statement\"");"",""        assertEquals( \""getResultSet()\"", rs, st.getResultSet() );"",""        assertEquals( \""getUpdateCount()\"", -1, st.getUpdateCount() );"",""        assertFalse( st.getMoreResults(Statement.KEEP_CURRENT_RESULT) );"",""        assertTrue(rs.next());"",""        assertNull( \""getResultSet()\"", st.getResultSet() );"",""        assertEquals( \""getUpdateCount()\"", -1, st.getUpdateCount() );"",""        "",""        "",""        int count = st.executeUpdate(\""Update statement set c = c\"");"",""        assertTrue( \""Update Erfolgreich\"", count\>0 );"",""        assertNull( \""getResultSet()\"", st.getResultSet() );"",""        assertEquals( \""getUpdateCount()\"", count, st.getUpdateCount() );"",""        assertFalse( st.getMoreResults() );"",""        assertNull( \""getResultSet()\"", st.getResultSet() );"",""        assertEquals( \""getUpdateCount()\"", -1, st.getUpdateCount() );"",""    }""]"
"/smallsql/database/StoreNull/getInt(int,int)","[""final int getInt(int offset, int dataType) throws Exception {"",""\t\treturn 0;"",""\t}""]"
/smallsql/database/SSStatement/setCursorName(java.lang.String),"[""final public void setCursorName(String name) throws SQLException{"",""        /** @todo: Implement this java.sql.Statement.setCursorName method */"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""setCursorName\"");"",""    }""]"
"/smallsql/database/StoreImpl/getBoolean(int,int)","[""/**"",""     * It used for ResultSet.getBoolean()"",""     */"",""    @Override"",""    boolean getBoolean(int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return false;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    return readBoolean();"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return Utils.bytes2int( readBinary() ) != 0;"",""            case SQLTokenizer.TINYINT:"",""                    return readUnsignedByte() != 0;"",""            case SQLTokenizer.SMALLINT:"",""                    return readShort() != 0;"",""            case SQLTokenizer.INT:"",""                    return readInt() != 0;"",""            case SQLTokenizer.BIGINT:"",""                    return readLong() != 0;"",""            case SQLTokenizer.REAL:"",""                    return readFloat() != 0;"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return readDouble() != 0;"",""            case SQLTokenizer.MONEY:"",""                    return readLong() != 0;"",""            case SQLTokenizer.SMALLMONEY:"",""                    return readInt() != 0;"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return readNumeric().getSignum() != 0;"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return Utils.string2boolean( readString() );"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return Utils.string2boolean( readLongString() );"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());"",""                    ObjectInputStream ois = new ObjectInputStream(bais);"",""                    return Utils.string2boolean( ois.readObject().toString() );"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return Utils.bytes2int( readLongBinary() ) != 0;"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\t\treturn readTimestamp() != 0;"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\treturn readTime() != 0;"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\treturn readDate() != 0;"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\treturn readSmallDateTime() != 0;"",""            case SQLTokenizer.UNIQUEIDENTIFIER:"",""                return false;"",""\t\t\tdefault: "",""\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \""BOOLEAN\"" });"",""        }"",""    }""]"
/smallsql/database/StoreNoCurrentRow/getNextPagePos(),"[""long getNextPagePos(){"",""\t\t//TODO"",""\t\treturn -1;"",""\t}""]"
/smallsql/database/SSResultSet/isAfterLast(),"[""public boolean isAfterLast() throws SQLException {"",""        try{"",""            return getCmd().isAfterLast();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException(e);"",""        }"",""    }""]"
"/smallsql/database/Database/dropTable(smallsql.database.SSConnection,java.lang.String)","[""void dropTable(SSConnection con, String tableName) throws Exception{"",""        synchronized(tableViews){"",""            Table table = (Table)tableViews.get( tableName );"",""            if(table != null){"",""\t\t\t\ttableViews.remove( tableName );"",""                table.drop(con);"",""            }else{"",""            \tTable.drop( this, tableName );"",""            }"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getDouble(),"[""final double getDouble() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Double.parseDouble(getString().trim());"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getMoney(),"[""long getMoney() throws Exception {"",""\t\treturn getLong() * 10000;"",""\t}""]"
/smallsql/database/SSResultSetMetaData/getPrecision(int),"[""public int getPrecision(int column) throws SQLException {"",""        return getColumnExpression( column ).getPrecision();"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getURL(),"[""public String getURL() throws SQLException {"",""    \tDatabase database = con.getDatabase(true);"",""    \tif(database == null)"",""\t\t\treturn SSDriver.URL_PREFIX;"",""    \treturn SSDriver.URL_PREFIX + \':\' + database.getName();"",""    }""]"
/smallsql/database/SSStatement/setMaxFieldSize(int),"[""final public void setMaxFieldSize(int max){"",""        maxFieldSize = max;"",""    }""]"
/smallsql/junit/TestAlterTable/testAdd1Column(),"[""public void testAdd1Column() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.execute(\""Alter Table \"" + table + \"" Add a Varchar(20)\"");"",""        ResultSet rs = st.executeQuery(\""Select * From \"" + table);"",""        assertRSMetaData( rs, new String[]{\""i\"", \""v\"", \""a\""},  new int[]{Types.INTEGER, Types.VARCHAR, Types.VARCHAR} );"",""    }""]"
/smallsql/database/ExpressionFunctionInsert/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.INSERT;"",""\t}""]"
"/smallsql/database/Store/getBoolean(int,int)","[""abstract boolean getBoolean( int offset, int dataType) throws Exception;""]"
/smallsql/database/SSResultSet/getInt(int),"[""public int getInt(int columnIndex) throws SQLException {"",""        try{"",""            Expression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""            return expr.getInt();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SSResultSet/getArray(java.lang.String),"[""public Array getArray(String columnName) throws SQLException {"",""        return getArray( findColumn( columnName ) );"",""    }""]"
/smallsql/database/CommandSelect/setMaxRows(int),"[""final void setMaxRows(int max){"",""\t\tmaxRows = max;"",""\t}""]"
"/smallsql/database/SSResultSet/updateShort(int,short)","[""public void updateShort(int columnIndex, short x) throws SQLException {"",""\t\tupdateValue( columnIndex, Utils.getShort(x), SQLTokenizer.SMALLINT);"",""    }""]"
/smallsql/database/CommandInsert/compile(smallsql.database.SSConnection),"[""/**"",""     * The method compile set all needed reference links after the Parsing"",""     */"",""    private void compile(SSConnection con) throws Exception{    \t"",""        TableView tableView = con.getDatabase(false).getTableView( con, name);"",""        if(!(tableView instanceof Table))"",""        \tthrow SmallSQLException.create(Language.VIEW_INSERT);"",""        table = (Table)tableView;"",""        tableTimestamp = table.getTimestamp();"",""\t\tcmdSel.compile(con);"",""        int count = table.columns.size();"",""        matrix = new int[count];"",""        if(noColumns){"",""        \t// noColumns means a table without Columns like INSERT INTO mytable VALUES(1,2)"",""        \t// in this case all columnExpressions of the table need to use"",""            columnExpressions.clear();"",""            for(int i=0; i\<count; i++){"",""                matrix[i] = i;"",""            }"",""\t\t\tif(count != cmdSel.columnExpressions.size())"",""\t\t\t\t\tthrow SmallSQLException.create(Language.COL_VAL_UNMATCH);"",""        }else{"",""            for(int i=0; i\<count; i++) matrix[i] = -1;"",""            for(int c=0; c\<columnExpressions.size(); c++){"",""                // listing of the column names in the INSERT SQL expression"",""                Expression sqlCol = columnExpressions.get(c);"",""                String sqlColName = sqlCol.getName();"",""                int idx = table.findColumnIdx( sqlColName );"",""                if(idx \>= 0){"",""                    matrix[idx] = c;"",""                }else{"",""                    throw SmallSQLException.create(Language.COL_MISSING, sqlColName);"",""                }"",""            }"",""\t\t\tif(columnExpressions.size() != cmdSel.columnExpressions.size())"",""\t\t\t\t\tthrow SmallSQLException.create(Language.COL_VAL_UNMATCH);"",""        }"",""    }""]"
/smallsql/database/SQLTokenizer/getKeyWord(int),"[""static final String getKeyWord(int key){"",""\t\treturn (String)keywords.get( Utils.getInteger(key) );"",""\t}""]"
/smallsql/junit/TestDBMetaData/testVersions(),"[""public void testVersions() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        assertEquals( \""DriverVersion\"", md.getDriverVersion(), md.getDatabaseProductVersion());"",""        Driver driver = DriverManager.getDriver(AllTests.JDBC_URL);"",""        assertEquals( \""MajorVersion\"", driver.getMajorVersion(), md.getDatabaseMajorVersion());"",""        assertEquals( \""MajorVersion\"", driver.getMajorVersion(), md.getDriverMajorVersion());"",""        assertEquals( \""MinorVersion\"", driver.getMinorVersion(), md.getDatabaseMinorVersion());"",""        assertEquals( \""MinorVersion\"", driver.getMinorVersion(), md.getDriverMinorVersion());"",""        assertEquals( \""Version\"", new DecimalFormat(\""###0.00\"", new DecimalFormatSymbols(Locale.US)).format(driver.getMajorVersion()+driver.getMinorVersion()/100.0), md.getDriverVersion());"",""        assertTrue( \""jdbcCompliant\"", driver.jdbcCompliant() );"",""    }""]"
/smallsql/junit/AllTests/suite(),"[""public static Test suite() throws Exception{"",""        TestSuite theSuite = new TestSuite(\""SmallSQL all Tests\"");"",""        theSuite.addTestSuite( TestAlterTable.class );"",""        theSuite.addTestSuite( TestAlterTable2.class );"",""        theSuite.addTest    ( TestDataTypes.suite() );"",""        theSuite.addTestSuite(TestDBMetaData.class);"",""\t\ttheSuite.addTestSuite(TestExceptionMethods.class);"",""\t\ttheSuite.addTest     (TestExceptions.suite());"",""\t\ttheSuite.addTestSuite(TestDeleteUpdate.class);"",""\t\ttheSuite.addTest     (TestFunctions.suite() );"",""\t\ttheSuite.addTestSuite(TestGroupBy.class);"",""\t\ttheSuite.addTestSuite(TestIdentifer.class);"",""\t\ttheSuite.addTest     (TestJoins.suite());"",""        theSuite.addTestSuite(TestLanguage.class);"",""\t\ttheSuite.addTestSuite(TestMoneyRounding.class );"",""\t\ttheSuite.addTest     (TestOperatoren.suite() );"",""\t\ttheSuite.addTestSuite(TestOrderBy.class);"",""\t\ttheSuite.addTestSuite(TestOther.class);"",""        theSuite.addTestSuite(TestResultSet.class);"",""\t\ttheSuite.addTestSuite(TestScrollable.class);"",""        theSuite.addTestSuite(TestStatement.class);"",""        theSuite.addTestSuite(TestThreads.class);"",""        theSuite.addTestSuite(TestTokenizer.class);"",""        theSuite.addTestSuite(TestTransactions.class);"",""        return theSuite;"",""    }""]"
/smallsql/database/ExpressionArithmetic/getObject(),"[""Object getObject() throws java.lang.Exception {"",""        if(isNull()) return null;"",""        int dataType = getDataType();"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    return getBoolean() ? Boolean.TRUE : Boolean.FALSE;"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return getBytes();"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""                    return new Integer( getInt() );"",""            case SQLTokenizer.BIGINT:"",""                    return new Long( getLong() );"",""            case SQLTokenizer.REAL:"",""                    return new Float( getFloat() );"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return new Double( getDouble() );"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""                    return Money.createFromUnscaledValue( getMoney() );"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return getNumeric();"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""            \t\treturn getString( left.getString(), right.getString() );"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    Object lObj = left.getObject();"",""                    //FIXME NullPointerException bei NEGATIVE"",""                    Object rObj = right.getObject();"",""                    if(lObj instanceof Number && rObj instanceof Number)"",""                        return new Double( getDoubleImpl( ((Number)lObj).doubleValue(), ((Number)rObj).doubleValue() ) );"",""                    else"",""                        return getString( lObj.toString(), rObj.toString() );"",""            case SQLTokenizer.LONGVARBINARY:"",""                    return getBytes();"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\treturn new DateTime( getLong(), dataType );"",""            case SQLTokenizer.UNIQUEIDENTIFIER:"",""                    return getBytes();"",""            default: throw createUnspportedDataType();"",""        }"",""    }""]"
"/smallsql/database/SSResultSet/updateFloat(int,float)","[""public void updateFloat(int columnIndex, float x) throws SQLException {"",""\t\tupdateValue( columnIndex, new Float(x), SQLTokenizer.REAL);"",""    }""]"
/smallsql/database/Where/isLast(),"[""final boolean isLast() throws Exception{"",""\t\tif(!isCurrentRow) return false;"",""\t\tlong rowPos = rowSource.getRowPosition();"",""\t\tboolean isNext = next();"",""\t\trowSource.setRowPosition(rowPos);"",""\t\treturn !isNext;"",""\t}""]"
/smallsql/database/CommandSelect/isFirst(),"[""/**"",""\t * Is used from ResultSet.isFirst()."",""\t */"",""\tboolean isFirst() throws SQLException{"",""\t\treturn from.isFirst();"",""\t}""]"
/smallsql/database/Scrollable/last(),"[""boolean last() throws Exception{"",""\t\tafterLast();"",""\t\treturn previous();"",""\t}""]"
/smallsql/database/ExpressionName/getBoolean(),"[""boolean getBoolean() throws Exception{"",""        return fromEntry.getBoolean(colIdx);"",""    }""]"
/smallsql/database/TableViewResult/setAlias(java.lang.String),"[""void setAlias( String alias ){"",""\t\tthis.alias = alias;"",""\t}""]"
/smallsql/database/ViewResult/execute(),"[""final void execute() throws Exception{"",""\t\tcommandSelect.from.execute();"",""\t}""]"
/smallsql/database/MemoryResult/getRowPosition(),"[""final long getRowPosition(){"",""\t\treturn rowIdx;"",""\t}""]"
/smallsql/database/ExpressionFunctionPI/getFunction(),"[""final int getFunction(){ return SQLTokenizer.PI; }""]"
/smallsql/database/SSResultSet/getTime(int),"[""public Time getTime(int columnIndex) throws SQLException {"",""        try{"",""\t\t\tExpression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""\t\t\tif(wasNull) return null;"",""\t\t\treturn DateTime.getTime( expr.getLong() );"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SQLParser/truncate(),"[""private Command truncate() throws SQLException{"",""\t\tCommandDelete cmd = new CommandDelete(con.log);"",""\t\tnextToken(MISSING_TABLE);"",""\t\tfrom(cmd);"",""\t\treturn cmd;"",""\t}""]"
/smallsql/junit/TestExceptionMethods/countFiles(java.lang.String),"[""private int countFiles(String fileNameStart){"",""        int count = 0;"",""        String names[] = new File(AllTests.CATALOG).list();"",""        for(int i=0; i\<names.length; i++){"",""            if(names[i].startsWith(fileNameStart)){"",""                count++;"",""            }"",""        }"",""        return count;"",""    }""]"
/smallsql/database/StoreImpl/writeByte(int),"[""void writeByte( int value ){"",""    \tint newSize = offset + 1;"",""        if(newSize \> page.length) resizePage(newSize);"","""",""        page[ offset++ ] = (byte)(value);"",""    }""]"
/smallsql/database/SSResultSet/setFetchSize(int),"[""public void setFetchSize(int rows){"",""        fetchSize = rows;"",""    }""]"
/smallsql/database/ViewResult/relative(int),"[""boolean relative(int rows) throws Exception{"",""\t\treturn commandSelect.relative(rows);"",""\t}""]"
"/smallsql/database/SSResultSet/updateLong(java.lang.String,long)","[""public void updateLong(String columnName, long x) throws SQLException {"",""        updateLong( findColumn( columnName ), x );"",""    }""]"
"/smallsql/database/SSCallableStatement/setBytes(java.lang.String,byte[])","[""public void setBytes(String parameterName, byte[] x) throws SQLException {"",""        setBytes( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1Number/getInt(),"[""final int getInt() throws Exception {"",""\t\treturn Utils.long2int(getLong());"",""\t}""]"
"/smallsql/database/StoreImpl/writeString(java.lang.String,int,boolean)","[""void writeString( String strDaten, int lengthColumn, boolean varchar ) throws SQLException{"",""        char[] daten = strDaten.toCharArray();"",""        int length = daten.length;"","""",""        if(lengthColumn \< length){"",""            throw SmallSQLException.create(Language.VALUE_STR_TOOLARGE);"",""        }"",""\t\tif(varchar) lengthColumn = length;"",""    \tint newSize = offset + 2 + 2*lengthColumn;"",""        if(newSize \> page.length) resizePage(newSize);"","""",""        writeShort( lengthColumn );"",""        writeChars( daten );"",""        for(int i=length; i\<lengthColumn; i++){"",""            page[ offset++ ] = \' \';"",""            page[ offset++ ] = 0;"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionATan/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.atan( param1.getDouble() );"",""    }""]"
/smallsql/database/ExpressionArithmetic/getOperation(),"[""/**"",""     * Get the arithmetic operation of this expression."",""     * @return"",""     */"",""    int getOperation(){"",""        return operation;"",""    }""]"
"/smallsql/database/CreateFile/CreateFile(java.io.File,java.nio.channels.FileChannel,smallsql.database.SSConnection,smallsql.database.Database)","[""CreateFile(File file, FileChannel raFile,SSConnection con, Database database){"",""        super(raFile);"",""        this.file = file;"",""        this.con = con;"",""        this.database = database;"",""    }""]"
/smallsql/database/SortedResult/currentInsertedRow(),"[""/**"",""     * Calculate the row position in the inserted rows. This is a pointer to insertedRows."",""     * If the row pointer is not in the inserted rows then the value is negative."",""     */"",""    private final int currentInsertedRow(){"",""        return row - sortedRowCount - 1;"",""    }""]"
/smallsql/database/Column/getName(),"[""String getName(){"",""        return name;"",""    }""]"
/smallsql/database/ExpressionFunctionDayOfYear/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(param1.isNull()) return 0;"",""\t\tDateTime.Details details = new DateTime.Details(param1.getLong());"",""\t\treturn details.dayofyear+1;"",""\t}""]"
/smallsql/database/LongTreeList/getPointer(),"[""/**"",""\t * Read a pointer to another node in de index."",""\t */"",""\tfinal private int getPointer(){"",""\t\tint value = 0;"",""\t\tfor(int i=0; i\<pointerSize; i++){"",""\t\t\tvalue \<\<= 8;"",""\t\t\tvalue += (data[offset++] & 0xFF);"",""\t\t}"",""\t\treturn value;"",""\t}""]"
/smallsql/database/Scrollable/first(),"[""boolean first() throws Exception {"",""\t\trowIdx = -1;"",""\t\treturn next();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsTransactions(),"[""public boolean supportsTransactions() {"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionValue/getBoolean(),"[""boolean getBoolean() throws Exception{"",""\t\treturn getBoolean( getObject(), dataType );"",""    }""]"
/smallsql/junit/TestOrderBy/testOrderBy_int_desc(),"[""public void testOrderBy_int_desc() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tInteger oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by i Desc\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = (Integer)rs.getObject(\""i\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(oldValue != null && rs.next()){"",""\t\t\tInteger newValue = (Integer)rs.getObject(\""i\"");"",""\t\t\tif(newValue != null){"",""\t\t\t\tassertTrue( oldValue.compareTo( newValue ) \> 0 );"",""\t\t\t\tcount++;"",""\t\t\t}"",""\t\t\toldValue = newValue;"",""\t\t}"",""\t\tassertNull(oldValue);"",""\t\tassertFalse( rs.next() );"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/CommandSelect/isLast(),"[""/**"",""\t * Is used from ResultSet.isLast()."",""\t */"",""\tboolean isLast() throws Exception{"",""\t\treturn from.isLast();"",""\t}""]"
"/smallsql/database/SSResultSet/getTime(int,java.util.Calendar)","[""public Time getTime(int columnIndex, Calendar cal) throws SQLException {"",""        try{"",""            if(cal == null){"",""                return getTime(columnIndex);"",""            }"",""            Expression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""            if(wasNull) return null;"",""            return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/junit/TestAlterTable/testAddWithTableLock_READ_COMMITTED(),"[""public void testAddWithTableLock_READ_COMMITTED() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        int isolation = con.getTransactionIsolation();"",""        con.setAutoCommit(false);"",""        try{"",""            con.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );"",""            ResultSet rs = st.executeQuery(\""Select * From \"" + table);"",""            rs.next();"",""            st.execute(\""Alter Table \"" + table + \"" Add a Varchar(20)\"");"",""            try {"",""                rs.next();"",""                fail(\""Alter Table should not work on a table with a lock.\"");"",""            } catch (SQLException ex) {"",""                assertSQLException( \""01000\"", 0, ex );"",""            }"",""        }finally{"",""            con.setTransactionIsolation(isolation);"",""            con.setAutoCommit(true);"",""        }"",""    }""]"
/smallsql/database/ExpressionArithmetic/isNull(),"[""boolean isNull() throws Exception{"",""        switch(operation){"",""\t        case OR:"",""\t        case AND:"",""\t        case NOT:"",""\t        case LIKE:"",""\t        case ISNULL:"",""\t\t\tcase ISNOTNULL:"",""\t\t\tcase IN:"",""\t\t\t\t\t\t\treturn false; //Boolean operations return ever a result ???, but at least ISNULL and ISNOTNULL"",""            case NEGATIVE: "",""            case BIT_NOT:"",""                           return                  left.isNull();"",""            default:       return left.isNull() || right.isNull();"",""        }"",""    }""]"
/smallsql/database/StoreImpl/readChars(int),"[""char[] readChars(int length){"",""        char[] daten = new char[length];"",""        for(int i=0; i\<length; i++){"",""            daten[i] = (char)((page[ offset++ ] & 0xFF) | (page[ offset++ ] \<\< 8));"",""        }"",""        return daten;"",""    }""]"
/smallsql/database/SSResultSet/getURL(int),"[""public URL getURL(int columnIndex) throws SQLException {"",""        try{"",""            Expression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""            if(wasNull) return null;"",""            return new URL( expr.getString() );"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
"/smallsql/database/CommandTable/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""void executeImpl(SSConnection con, SSStatement st) throws Exception{"",""        Database database = catalog == null ? "",""                con.getDatabase(false) : "",""                Database.getDatabase( catalog, con, false );"",""        switch(tableCommandType){"",""        case SQLTokenizer.CREATE:"",""            database.createTable( con, name, columns, indexes, foreignKeys );"",""            break;"",""        case SQLTokenizer.ADD:"",""            con = new SSConnection(con);"",""            //TODO disable the transaction to reduce memory use."",""            Table oldTable = (Table)database.getTableView( con, name);"",""            "",""            // Request a TableLock and hold it for the completely ALTER TABLE command"",""            TableStorePage tableLock = oldTable.requestLock( con, SQLTokenizer.ALTER, -1);"",""            String newName = \""#\"" + System.currentTimeMillis() + this.hashCode();"",""            try{"",""                Columns oldColumns = oldTable.columns;"",""                Columns newColumns = oldColumns.copy();"",""                for(int i = 0; i \< columns.size(); i++){"",""                    addColumn(newColumns, columns.get(i));"",""                }"",""                "",""                Table newTable = database.createTable( con, newName, newColumns, oldTable.indexes, indexes, foreignKeys );"",""                StringBuffer buffer = new StringBuffer(256);"",""                buffer.append(\""INSERT INTO \"").append( newName ).append( \'(\' );"",""                for(int c=0; c\<oldColumns.size(); c++){"",""                    if(c != 0){"",""                        buffer.append( \',\' );"",""                    }"",""                    buffer.append( oldColumns.get(c).getName() );"",""                }"",""                buffer.append( \"")  SELECT * FROM \"" ).append( name );"",""                con.createStatement().execute( buffer.toString() );"",""                "",""                database.replaceTable( oldTable, newTable );"",""            }catch(Exception ex){"",""                //Remove all from the new table"",""                try {"",""                    database.dropTable(con, newName);"",""                } catch (Exception ex1) {/* ignore it */}"",""                try{"",""                    indexes.drop(database);"",""                } catch (Exception ex1) {/* ignore it */}"",""                throw ex;"",""            }finally{"",""                tableLock.freeLock();"",""            }"",""            break;"",""        default:"",""            throw new Error();"",""        }"",""    }""]"
/smallsql/database/Column/setNullable(boolean),"[""void setNullable(boolean nullable){"",""        this.nullable = nullable;"",""    }""]"
/smallsql/database/MemoryResult/noRow(),"[""void noRow(){"",""\t\tcurrentRow = null;"",""\t}""]"
/smallsql/database/ForeignKeys/size(),"[""final int size(){"",""\t\treturn size;"",""\t}""]"
/smallsql/database/NoFromResult/previous(),"[""final boolean previous(){"",""\t\trowPos--;"",""\t\treturn rowPos == 1;"",""\t}""]"
/smallsql/database/SSCallableStatement/getBytes(java.lang.String),"[""public byte[] getBytes(String parameterName) throws SQLException {"",""        return getBytes( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/StoreImpl/readSmallDateTime(),"[""long readSmallDateTime(){"",""        return readInt() * 60000L;"",""    }""]"
/smallsql/database/ExpressionFunctionLocate/isNull(),"[""boolean isNull() throws Exception {"",""\t\treturn param1.isNull() || param2.isNull();"",""\t}""]"
/smallsql/database/SSResultSetMetaData/getColumnLabel(int),"[""public String getColumnLabel(int column) throws SQLException {"",""        return getColumnExpression( column ).getAlias();"",""    }""]"
"/smallsql/database/Database/dropView(smallsql.database.SSConnection,java.lang.String,java.lang.String)","[""static void dropView(SSConnection con, String catalog, String tableName) throws Exception{"",""\t\tgetDatabase( con, catalog).dropView(tableName);"",""\t}""]"
/smallsql/database/Expression/isDefinitelyWritable(),"[""boolean isDefinitelyWritable(){"",""\t\treturn false;"",""\t}""]"
/smallsql/database/SSStatement/setGeneratedKeys(java.sql.ResultSet),"[""/**"",""     * Set on execution the result with the generated keys."",""     * "",""     * @param rs"",""     */"",""    final void setGeneratedKeys(ResultSet rs){"",""        generatedKeys = rs;"",""    }""]"
/smallsql/database/ExpressionFunctionSqrt/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.sqrt( param1.getDouble() );"",""    }""]"
/smallsql/junit/TestStatement/testTruncate(),"[""public void testTruncate() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        "",""        st.execute(\""Truncate table statement\"");"",""        assertRowCount(0, \""Select * From statement\"");"",""    }""]"
/smallsql/database/CommandTable/addColumn(smallsql.database.Column),"[""/**"",""     * Add a column definition. This is used from the SQLParser."",""     * "",""     * @throws SQLException"",""     *             if the column already exist in the list."",""     * @see SQLParser#createTable"",""     */"",""    void addColumn(Column column) throws SQLException{"",""        addColumn(columns, column);"",""    }""]"
/smallsql/database/FileIndex/close(),"[""void close() throws IOException{"",""        raFile.close();"",""    }""]"
/smallsql/database/SSResultSet/refreshRow(),"[""public void refreshRow() throws SQLException {"",""        testNotInsertRow();"",""        relative(0);"",""    }""]"
"/smallsql/database/CommandInsert/CommandInsert(smallsql.database.Logger,java.lang.String)","[""CommandInsert(Logger log, String name){"",""        super(log);"",""        this.name = name;"",""    }""]"
/smallsql/database/RowSource/noRow(),"[""/**"",""\t * Is used for JOIN to set both site to \""No current row\"". This is needed if"",""\t * one site has 0 rows that the getXXX() methods throw this exception."",""\t */"",""\tabstract void noRow();""]"
/smallsql/database/Scrollable/beforeFirst(),"[""void beforeFirst() throws Exception {"",""\t\trowIdx = -1;"",""\t\trowSource.beforeFirst();"",""\t}""]"
/smallsql/database/SSResultSetMetaData/isDefinitelyWritable(int),"[""public boolean isDefinitelyWritable(int column) throws SQLException {"",""        return getColumnExpression( column ).isDefinitelyWritable();"",""    }""]"
/smallsql/database/CommandSelect/setWhere(smallsql.database.Expression),"[""/**"",""\t * Is used from CommandSelect, CommandDelete and CommandUpdate"",""\t * @param where"",""\t */"",""\tfinal void setWhere( Expression where ){"",""\t\tthis.where = where;"",""\t}""]"
/smallsql/database/Index/floatToBinarySortOrder(float),"[""final static private int floatToBinarySortOrder(float value){"",""\t\tint intValue = Float.floatToIntBits(value);"",""\t\treturn (intValue\<0) ?"",""\t\t\t~intValue :"",""\t\t\tintValue ^ 0x80000000;\t\t\t"",""\t}""]"
"/smallsql/database/SSResultSetMetaData/getDataTypePrecision(int,int)","[""static int getDataTypePrecision(int dataType, int defaultValue){"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.NULL:"",""\t\t\t\treturn 0;"",""\t\t\tcase SQLTokenizer.BIT:"",""\t\t\tcase SQLTokenizer.BOOLEAN:"",""\t\t\t\treturn 1;"",""\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\t\treturn 3;"",""\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\t\treturn 5;"",""\t\t\tcase SQLTokenizer.INT:"",""\t\t\tcase SQLTokenizer.SMALLMONEY:"",""\t\t\t\treturn 10;"",""\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\t\treturn 19;"",""\t\t\tcase SQLTokenizer.REAL:"",""\t\t\t\treturn 7;"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\treturn 15;"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""\t\t\tcase SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""            case SQLTokenizer.BINARY:"",""\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\t\tif(defaultValue == -1)"",""\t\t\t\t\treturn 0xFFFF;"",""                return defaultValue;"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""                if(defaultValue == -1)"",""                    return 38;"",""                return defaultValue;"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\treturn 23;"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\treturn 8;"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\treturn 10;"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\treturn 16;"",""\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:"",""\t\t\t\treturn 36;"",""\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""            case SQLTokenizer.LONGNVARCHAR:"",""\t\t\tcase SQLTokenizer.LONGVARBINARY:"",""\t\t\t\treturn Integer.MAX_VALUE;"",""\t\t}"",""\t\tif(defaultValue == -1)"",""\t\t\tthrow new Error(\""Precision:\""+SQLTokenizer.getKeyWord(dataType));"",""\t\treturn defaultValue;"",""\t}""]"
/smallsql/database/Where/isBeforeFirst(),"[""final boolean isBeforeFirst(){"",""\t\treturn row == 0;"",""\t}""]"
/smallsql/database/Utils/getExpressionNameFromTree(smallsql.database.Expression),"[""/**"",""     * Get all the ExpressionName objects that are part of the tree."",""     * If it only a constant expression then a empty list is return."",""     * @param tree the expression to scan"",""     * @return the list of ExpressionName instances"",""     */"",""    static final Expressions getExpressionNameFromTree(Expression tree){"",""        Expressions list = new Expressions();"",""        getExpressionNameFromTree( list, tree );"",""        return list;"",""    }""]"
/smallsql/database/MutableInteger/doubleValue(),"[""public double doubleValue() {"",""\t\treturn value;"",""\t}""]"
"/smallsql/database/SSResultSet/getDate(int,java.util.Calendar)","[""public Date getDate(int columnIndex, Calendar cal) throws SQLException {"",""        try{"",""            if(cal == null){"",""                return getDate(columnIndex);"",""            }"",""            Expression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""            if(wasNull) return null;"",""            return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/ExpressionInSelect/loadInList(),"[""private void loadInList() throws Exception{"",""\t\tif(cmdSel.compile(con)){"",""\t\t\tcmdSel.from.execute();"",""\t\t\tif(cmdSel.columnExpressions.size() != 1)"",""\t\t\t\tthrow SmallSQLException.create(Language.SUBQUERY_COL_COUNT, new Integer(cmdSel.columnExpressions.size()));"",""\t\t\tindex.clear();"",""\t\t\twhile(cmdSel.next()){"",""\t\t\t\ttry{"",""\t\t\t\t\tindex.addValues(0, cmdSel.columnExpressions );"",""\t\t\t\t}catch(Exception e){"",""\t\t\t\t\t//double values can not add"",""\t\t\t\t}"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/junit/TestGroupBy/testLast1(),"[""public void testLast1() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Integer(1), \""Select last(id) FROM \"" + table1);"",""\t}""]"
/smallsql/database/SSStatement/getResultSetType(),"[""final public int getResultSetType() throws SQLException{"",""        checkStatement();"",""        return rsType;"",""    }""]"
/smallsql/database/CommandSelect/compileJoin(smallsql.database.Join),"[""/**"",""\t * Set the link between the Named Expression and the Table object"",""\t * in the condition."",""\t * If there are cascade Joins then follow the tree with a recursion. "",""\t */"",""    private void compileJoin( Join singleJoin ) throws Exception{"",""        if(singleJoin.condition != null) compileLinkExpressionParams( singleJoin.condition );"",""        if(singleJoin.left instanceof Join){"",""            compileJoin( (Join)singleJoin.left );"",""        }"",""        if(singleJoin.right instanceof Join){"",""            compileJoin( (Join)singleJoin.right );"",""        }"",""    }""]"
/smallsql/database/LongTreeList/remove(long),"[""/**"",""\t * Remove a value from this list."",""\t * @param value"",""\t * @throws SQLException"",""\t */"",""\tfinal void remove(long value) throws SQLException{"",""\t\tif(size == 0) return;"",""\t\tint offset1 = 0;"",""\t\tint offset2 = 0;"",""\t\tint offset3 = 0;"",""\t\toffset = 0;"",""\t\tint shift = 48;"",""\t\tboolean firstNode = true; // if this the first node in this tree level (0 can be the first node and are the end of the level)"",""\t\tboolean firstNode1 = true;"",""\t\tboolean firstNode2 = true;"",""\t\tboolean firstNode3 = true;"",""\t\twhile(shift\>=0){"",""\t\t\tint octet = (int)(value \>\> shift) & 0xFFFF;"",""\t\t\twhile(true){"",""\t\t\t\tint nextEntry = getUnsignedShort();"",""\t\t\t\tif(nextEntry == octet){"",""\t\t\t\t\tif(shift == 0){"",""\t\t\t\t\t\t//value find"",""\t\t\t\t\t\toffset -= 2;"",""\t\t\t\t\t\tremoveNodeLastLevel();"",""\t\t\t\t\t\twhile(firstNode && getUnsignedShort() == 0){"",""\t\t\t\t\t\t\toffset -= 2;"",""\t\t\t\t\t\t\tremoveNodeLastLevel(); // the end 0 of a node"",""\t\t\t\t\t\t\tif(shift \>= 3) "",""\t\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\t\toffset = offset1;"",""\t\t\t\t\t\t\toffset1 = offset2;"",""\t\t\t\t\t\t\toffset2 = offset3;"",""\t\t\t\t\t\t\tfirstNode = firstNode1;"",""\t\t\t\t\t\t\tfirstNode1 = firstNode2;"",""\t\t\t\t\t\t\tfirstNode2 = firstNode3;"",""\t\t\t\t\t\t\tremoveNode();"",""\t\t\t\t\t\t\tshift++;"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\treturn;"",""\t\t\t\t\t}"",""\t\t\t\t\toffset3 = offset2;"",""\t\t\t\t\toffset2 = offset1;"",""\t\t\t\t\toffset1 = offset -2;"",""\t\t\t\t\toffset = getPointer();"",""\t\t\t\t\tfirstNode3 = firstNode2;"",""\t\t\t\t\tfirstNode2 = firstNode1;"",""\t\t\t\t\tfirstNode1 = firstNode;"",""\t\t\t\t\tfirstNode = true;"",""\t\t\t\t\tbreak;"",""\t\t\t\t}"",""\t\t\t\tif((nextEntry == 0 && !firstNode) || nextEntry \> octet){"",""\t\t\t\t\t//value is not in the list, this should not occur"",""\t\t\t\t\treturn;"",""\t\t\t\t}"",""\t\t\t\tfirstNode = false;"",""\t\t\t\tif(shift != 0) offset += pointerSize;"",""\t\t\t}"",""\t\t\tshift -= 16;"",""\t\t}"",""\t}""]"
"/smallsql/database/SSConnection/prepareCall(java.lang.String,int,int)","[""public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {"",""        return new SSCallableStatement( this, sql, resultSetType, resultSetConcurrency);"",""    }""]"
"/smallsql/database/CommandDrop/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""void executeImpl(SSConnection con, SSStatement st) throws Exception {"",""        switch(type){"",""            case SQLTokenizer.DATABASE:"",""                if(name.startsWith(\""file:\""))"",""                    name = name.substring(5);"",""                File dir = new File( name );"",""                if(!dir.isDirectory() || "",""                   !new File( dir, Utils.MASTER_FILENAME ).exists())"",""               \t\t\tthrow SmallSQLException.create(Language.DB_NONEXISTENT, name);"",""                File files[] = dir.listFiles();"",""                if(files != null)"",""\t                for(int i=0; i\<files.length; i++){"",""\t                    files[i].delete();"",""\t                }"",""                dir.delete();"",""                break;"",""            case SQLTokenizer.TABLE:"",""                Database.dropTable( con, catalog, name );"",""                break;"",""            case SQLTokenizer.VIEW:"",""\t\t\t\tDatabase.dropView( con, catalog, name );"",""\t\t\t\tbreak;"",""            case SQLTokenizer.INDEX:"",""            case SQLTokenizer.PROCEDURE:"",""                throw new java.lang.UnsupportedOperationException();"",""            default:"",""                throw new Error();"",""        }"",""    }""]"
"/smallsql/database/IndexNode/saveRemainderValue(char[],int)","[""private final void saveRemainderValue(char[] remainderValue, int offset){"",""\t\tint length = remainderValue.length-offset;"",""\t\tthis.remainderKey = new char[length];"",""\t\tSystem.arraycopy( remainderValue, offset, this.remainderKey, 0, length);"",""\t}""]"
"/smallsql/database/Utils/bytes2unique(byte[],int)","[""static String bytes2unique( byte[] daten, int offset ){"",""    \tif(daten.length-offset \< 16){"",""    \t\tbyte[] temp = new byte[16];"",""    \t\tSystem.arraycopy(daten, offset, temp, 0, daten.length-offset);"",""    \t\tdaten = temp;"",""    \t}"",""        char[] chars = new char[36];"",""        chars[8] = chars[13] = chars[18] = chars[23] = \'-\';"","""",""        chars[0] = digits[ (daten[offset+3] \>\> 4) & 0x0F ];"",""        chars[1] = digits[ (daten[offset+3]     ) & 0x0F ];"",""        chars[2] = digits[ (daten[offset+2] \>\> 4) & 0x0F ];"",""        chars[3] = digits[ (daten[offset+2]     ) & 0x0F ];"",""        chars[4] = digits[ (daten[offset+1] \>\> 4) & 0x0F ];"",""        chars[5] = digits[ (daten[offset+1]     ) & 0x0F ];"",""        chars[6] = digits[ (daten[offset+0] \>\> 4) & 0x0F ];"",""        chars[7] = digits[ (daten[offset+0]     ) & 0x0F ];"","""",""        chars[ 9] = digits[ (daten[offset+5] \>\> 4) & 0x0F ];"",""        chars[10] = digits[ (daten[offset+5]     ) & 0x0F ];"",""        chars[11] = digits[ (daten[offset+4] \>\> 4) & 0x0F ];"",""        chars[12] = digits[ (daten[offset+4]     ) & 0x0F ];"","""",""        chars[14] = digits[ (daten[offset+7] \>\> 4) & 0x0F ];"",""        chars[15] = digits[ (daten[offset+7]     ) & 0x0F ];"",""        chars[16] = digits[ (daten[offset+6] \>\> 4) & 0x0F ];"",""        chars[17] = digits[ (daten[offset+6]     ) & 0x0F ];"","""",""        chars[19] = digits[ (daten[offset+8] \>\> 4) & 0x0F ];"",""        chars[20] = digits[ (daten[offset+8]     ) & 0x0F ];"",""        chars[21] = digits[ (daten[offset+9] \>\> 4) & 0x0F ];"",""        chars[22] = digits[ (daten[offset+9]     ) & 0x0F ];"","""",""        chars[24] = digits[ (daten[offset+10] \>\> 4) & 0x0F ];"",""        chars[25] = digits[ (daten[offset+10]     ) & 0x0F ];"",""        chars[26] = digits[ (daten[offset+11] \>\> 4) & 0x0F ];"",""        chars[27] = digits[ (daten[offset+11]     ) & 0x0F ];"",""        chars[28] = digits[ (daten[offset+12] \>\> 4) & 0x0F ];"",""        chars[29] = digits[ (daten[offset+12]     ) & 0x0F ];"",""        chars[30] = digits[ (daten[offset+13] \>\> 4) & 0x0F ];"",""        chars[31] = digits[ (daten[offset+13]     ) & 0x0F ];"",""        chars[32] = digits[ (daten[offset+14] \>\> 4) & 0x0F ];"",""        chars[33] = digits[ (daten[offset+14]     ) & 0x0F ];"",""        chars[34] = digits[ (daten[offset+15] \>\> 4) & 0x0F ];"",""        chars[35] = digits[ (daten[offset+15]     ) & 0x0F ];"",""        return new String(chars);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getDriverVersion(),"[""public String getDriverVersion() {"",""    \treturn getDriverMajorVersion() + \"".\"" + SSDriver.drv.getMinorVersion();"",""    }""]"
/smallsql/database/CommandSelect/compileLinkExpressionParams(smallsql.database.Expression),"[""private void compileLinkExpressionParams(Expression expr) throws Exception{"",""        // check sub Expression (parameters)"",""        Expression[] expParams = expr.getParams();"",""\t\tisAggregateFunction = isAggregateFunction || expr.getType() \>= Expression.GROUP_BEGIN;"",""        if(expParams != null){"",""            for(int k=0; k\<expParams.length; k++){"",""                Expression param = expParams[k];"",""\t\t\t\tint paramType = param.getType();"",""\t\t\t\tisAggregateFunction = isAggregateFunction || paramType \>= Expression.GROUP_BEGIN;"",""                if(paramType == Expression.NAME)"",""                     compileLinkExpressionName( (ExpressionName)param );"",""                else compileLinkExpressionParams( param );"",""            }"",""        }"",""        expr.optimize();"",""    }""]"
/smallsql/junit/TestTransactions/testRollback(),"[""public void testRollback() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t    con.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tcon.setAutoCommit(false);"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert\')\"");"",""\t\t\tassertRowCount( 1, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Select v From transactions\"");"",""\t\t\tassertRowCount( 2, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) (Select v From transactions)\"");"",""\t\t\tassertRowCount( 4, \""Select * from transactions\"");"",""\t\t\t"",""\t\t\tcon.rollback();"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"",""\t\t\t"",""\t\t}finally{"",""\t\t\ttry{"",""\t\t\t\tcon.createStatement().execute(\""Drop Table transactions\"");"",""\t\t\t}catch(Throwable e){e.printStackTrace();}"",""\t\t\tcon.setAutoCommit(true);"",""\t\t}"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getMaxColumnsInTable(),"[""public int getMaxColumnsInTable() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/dataDefinitionCausesTransactionCommit(),"[""public boolean dataDefinitionCausesTransactionCommit() {"",""    \treturn false;"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1/isNull(),"[""boolean isNull() throws Exception{"",""        return param1.isNull();"",""    }""]"
/smallsql/database/Expression/getPrecision(),"[""int getPrecision(){"",""\t\treturn SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );"",""\t}""]"
/smallsql/junit/TestDBMetaData/testGetColumn(),"[""public void testGetColumn() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tdropTable(con,\""tableColumns\"");"",""\t\tdropView( con, \""viewColumns\"");"",""\t\tcon.createStatement().execute(\""create table tableColumns(a int default 5)\"");"",""\t\tDatabaseMetaData md = con.getMetaData();"",""\t\t"",""\t\tResultSet rs = md.getColumns(null, null, \""tableColumns\"", null);"",""        String[] colNames = {\""TABLE_CAT\"", \""TABLE_SCHEM\"", \""TABLE_NAME\"", \""COLUMN_NAME\"", \""DATA_TYPE\"", \""TYPE_NAME\"", \""COLUMN_SIZE\"", \""BUFFER_LENGTH\"", \""DECIMAL_DIGITS\"", \""NUM_PREC_RADIX\"", \""NULLABLE\"", \""REMARKS\"", \""COLUMN_DEF\"", \""SQL_DATA_TYPE\"", \""SQL_DATETIME_SUB\"", \""CHAR_OCTET_LENGTH\"", \""ORDINAL_POSITION\"", \""IS_NULLABLE\""};"",""        int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR};"",""\t\tassertRSMetaData( rs, colNames, colTypes);\t\t"",""\t\tassertTrue( \""No row\"", rs.next() );"",""\t\tassertEquals( \""a\"", rs.getObject(\""COLUMN_NAME\"") ); "",""\t\tassertEquals( \""INT\"", rs.getObject(\""TYPE_NAME\"") ); "",""\t\tassertEquals( \""5\"", rs.getObject(\""COLUMN_Def\"") ); "",""\t\t"",""\t\tcon.createStatement().execute(\""create view viewColumns as Select * from tableColumns\"");"",""\t\t"",""\t\trs = md.getColumns(null, null, \""viewColumns\"", null);"",""\t\tassertRSMetaData( rs, colNames, colTypes);\t\t"",""\t\tassertTrue( \""No row\"", rs.next() );"",""\t\tassertEquals( \""a\"", rs.getObject(\""COLUMN_NAME\"") ); "",""\t\tassertEquals( \""INT\"", rs.getObject(\""TYPE_NAME\"") ); "",""\t\tassertEquals( \""5\"", rs.getObject(\""COLUMN_Def\"") ); "","""",""\t\tdropView( con, \""viewColumns\"");"",""\t\tdropTable( con, \""tableColumns\"");"",""\t}""]"
/smallsql/database/SmallSQLException/printStackTrace(java.io.PrintWriter),"[""public void printStackTrace(PrintWriter pw){"",""\t\tif(!isInit) return;"",""\t\tsuper.printStackTrace(pw);"",""\t}""]"
/smallsql/database/SQLParser/order(smallsql.database.CommandSelect),"[""private void order(CommandSelect cmd) throws SQLException{"",""        nextToken(MISSING_BY);"",""        cmd.setOrder(expressionTokenList(cmd, SQLTokenizer.ORDER));"",""    }""]"
/smallsql/database/StoreImpl/writeNumeric(smallsql.database.MutableNumeric),"[""void writeNumeric( MutableNumeric num){"",""        writeByte( num.getInternalValue().length );"",""        writeByte( num.getScale() );"",""        writeByte( num.getSignum() );"",""        for(int i=0; i\<num.getInternalValue().length; i++){"",""            writeInt( num.getInternalValue()[i] );"",""        }"",""    }""]"
/smallsql/database/ExpressionValue/getObject(),"[""Object getObject(){"",""        if(isEmpty()){"",""            return null;"",""        }"",""        return value;"",""    }""]"
/smallsql/database/Index/longToBinarySortOrder(long),"[""final static private long longToBinarySortOrder(long value){"",""\t\treturn value ^ 0x8000000000000000L;"",""\t}""]"
/smallsql/database/Index/intToBinarySortOrder(int),"[""final static private int intToBinarySortOrder(int value){"",""\t\treturn value ^ 0x80000000;"",""\t}""]"
/smallsql/database/StoreImpl/writeTimestamp(long),"[""void writeTimestamp( long ts){"",""        writeLong( ts );"",""    }""]"
"/smallsql/database/Where/Where(smallsql.database.RowSource,smallsql.database.Expression)","[""Where(RowSource rowSource, Expression where){"",""\t\tthis.rowSource = rowSource;"",""\t\tthis.where = where;"",""\t}""]"
/smallsql/database/ExpressionFunctionDayOfYear/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.DAYOFYEAR;"",""\t}""]"
/smallsql/database/NoFromResult/first(),"[""final boolean first(){"",""\t\trowPos = 1;"",""\t\treturn true;"",""\t}""]"
/smallsql/database/CommandSelect/isBeforeFirst(),"[""/**"",""\t * Is used from ResultSet.isBeforeFirst()."",""\t */"",""\tboolean isBeforeFirst() throws SQLException{"",""\t\treturn from.isBeforeFirst();"",""\t}""]"
/smallsql/database/Columns/get(java.lang.String),"[""/**"",""     * Search for a Column with the given name. The search is not case sensitive."",""     * "",""     * @param name"",""     *            the name of the searching column."",""     * @return The first found column or null."",""     * @throws NullPointerException"",""     *             if the name is null."",""     */"",""    final Column get(String name){"",""        for(int i = 0; i \< size; i++){"",""            Column column = data[i];"",""            if(name.equalsIgnoreCase(column.getName())){"",""                return column;"",""            }"",""        }"",""        return null;"",""    }""]"
/smallsql/database/SSResultSet/rowDeleted(),"[""public boolean rowDeleted() throws SQLException {"",""    \treturn getCmd().from.rowDeleted();"",""    }""]"
/smallsql/database/Scrollable/previous(),"[""boolean previous() throws Exception{"",""\t\tif(rowIdx \> -1){"",""\t\t\trowIdx--;"",""\t\t\tif(rowIdx \> -1 && rowIdx \< rowList.size()){"",""\t\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );"",""\t\t\t\treturn true;"",""\t\t\t}"",""\t\t}"",""\t\trowSource.beforeFirst();"",""\t\treturn false;"",""\t}""]"
/smallsql/junit/TestDBMetaData/testGetSchemas(),"[""public void testGetSchemas() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        ResultSet rs = md.getSchemas();"",""        String[] colNames = {\""TABLE_SCHEM\""};"",""        int[] colTypes = {Types.NULL};"",""        assertRSMetaData( rs, colNames, colTypes);"",""        assertFalse(rs.next());"",""    }""]"
/smallsql/database/TableResult/setRowPosition(long),"[""@Override"",""    final void setRowPosition(long rowPosition) throws Exception{"",""\t\tfilePos = rowPosition;"",""\t\tif(filePos \< 0 || !moveToRow()){"",""\t\t\tstore = new StoreNull(store.getNextPagePos());"",""\t\t}"",""\t}""]"
/smallsql/database/View/writeMagic(java.nio.channels.FileChannel),"[""@Override"",""    void writeMagic(FileChannel raFile) throws Exception{"",""        ByteBuffer buffer = ByteBuffer.allocate(8);"",""        buffer.putInt(MAGIC_VIEW);"",""        buffer.putInt(TABLE_VIEW_VERSION);"",""        buffer.position(0);"",""        raFile.write(buffer);"",""\t}""]"
/smallsql/database/Column/getFlag(),"[""int getFlag(){"",""        return (identity        ? 1 : 0) |"",""               (caseSensitive   ? 2 : 0) |"",""               (nullable        ? 4 : 0);"",""    }""]"
"/smallsql/database/SSConnection/prepareStatement(java.lang.String,java.lang.String[])","[""public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {"",""        SSPreparedStatement pr = new SSPreparedStatement( this, sql);"",""        pr.setNeedGeneratedKeys(columnNames);"",""        return pr;"",""    }""]"
"/smallsql/database/TableViewMap/put(java.lang.String,smallsql.database.TableView)","[""void put(String name, TableView tableView){"",""        map.put(getUniqueKey(name), tableView);"",""    }""]"
"/smallsql/database/SSCallableStatement/setString(java.lang.String,java.lang.String)","[""public void setString(String parameterName, String x) throws SQLException {"",""        setString( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/MutableNumeric/mul(smallsql.database.MutableNumeric),"[""void mul(MutableNumeric num){"",""\t\t//TODO performance"",""\t\tBigDecimal big = toBigDecimal().multiply(num.toBigDecimal() );"",""\t\tsetValue( big.unscaledValue().toByteArray() );"",""\t\tscale = big.scale();"",""\t\tsignum = big.signum();"",""    }""]"
/smallsql/database/ExpressionFunctionReturnFloat/getLong(),"[""final long getLong() throws Exception{"",""        return (long)getDouble();"",""    }""]"
/smallsql/database/CommandInsert/addValues(smallsql.database.Expressions),"[""void addValues(Expressions values){"",""        // this.values = values;"",""\t\tthis.cmdSel = new CommandSelect(log, values );"",""    }""]"
/smallsql/database/DateTime/getImmutableObject(),"[""public Object getImmutableObject(){"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\treturn getDate( time );"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\treturn getTime( time );"",""\t\t\tdefault:"",""\t\t\t\treturn getTimestamp( time );"",""\t\t}"",""\t}""]"
/smallsql/junit/TestAlterTable/testAdd2Column(),"[""public void testAdd2Column() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.execute(\""Alter Table \"" + table + \"" Add a Varchar(20), b int DEFAULT 25\"");"",""        ResultSet rs = st.executeQuery(\""Select * From \"" + table);"",""        assertRSMetaData( rs, new String[]{\""i\"", \""v\"", \""a\"", \""b\""},  new int[]{Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.INTEGER} );"",""        int count = 0;"",""        while(rs.next()){"",""            assertEquals( \""default value\"", 25, rs.getInt(\""b\"") );"",""            count++;"",""        }"",""        assertEquals( \""RowCount\"", rowCount, count );"",""    }""]"
/smallsql/database/ExpressionFunctionReturnString/getDouble(),"[""final double getDouble() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Double.parseDouble(getString().trim());"",""\t}""]"
/smallsql/database/ExpressionName/getObject(),"[""Object getObject() throws Exception{"",""        return fromEntry.getObject(colIdx);"",""    }""]"
/smallsql/database/ExpressionArithmetic/getBoolean(),"[""boolean getBoolean() throws java.lang.Exception {"",""        switch(operation){"",""        \tcase OR:    return left.getBoolean() || right.getBoolean();"",""            case AND:   return left.getBoolean() && right.getBoolean();"",""            case NOT:   return                      !left.getBoolean();"",""            case LIKE:  return Utils.like( left.getString(), right.getString());"",""            case ISNULL:return \t\t\t\t\t\tleft.isNull();"",""\t\t\tcase ISNOTNULL:\treturn \t\t\t\t\t!left.isNull();"",""\t\t\tcase IN:\tif(right == null)"",""\t\t\t\t\t\t\treturn isInList();"",""\t\t\t\t\t\tbreak;"",""        }"",""        final boolean leftIsNull = left.isNull();"",""        int dataType;"",""        if(operation == NEGATIVE || operation == BIT_NOT){"",""        \tif(leftIsNull) return false;"",""        \tdataType = left.getDataType();"",""        }else{"",""            final boolean rightIsNull = right.isNull();"",""        \tif(operation == EQUALS_NULL && leftIsNull && rightIsNull) return true;"",""        \tif(leftIsNull || rightIsNull) return false;"",""        \tdataType = getDataType(left, right);"",""        }"",""        switch(dataType){"",""\t\t\tcase SQLTokenizer.BOOLEAN:"",""\t\t\t\t\tswitch(operation){"",""\t\t\t\t\t\tcase IN:"",""\t\t\t\t\t\tcase EQUALS_NULL:"",""\t\t\t\t\t\tcase EQUALS:    return left.getBoolean() == right.getBoolean();"",""\t\t\t\t\t\tcase UNEQUALS:  return left.getBoolean() != right.getBoolean();"",""\t\t\t\t\t}"",""\t\t\t\t\t//break; interpret it as BIT "",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""            case SQLTokenizer.BIT:"",""                    switch(operation){"",""\t\t\t\t\t\tcase IN:"",""\t\t\t\t\t\tcase EQUALS_NULL:"",""                        case EQUALS:    return left.getInt() == right.getInt();"",""                        case GREATER:   return left.getInt() \>  right.getInt();"",""                        case GRE_EQU:   return left.getInt() \>= right.getInt();"",""                        case LESSER:    return left.getInt() \<  right.getInt();"",""                        case LES_EQU:   return left.getInt() \<= right.getInt();"",""                        case UNEQUALS:  return left.getInt() != right.getInt();"",""                        case BETWEEN:"",""                                        int _left = left.getInt();"",""                                        return _left \>= right.getInt() && right2.getInt() \>= _left;"",""                        default:"",""                        \treturn getInt() != 0;"",""                    }"",""            case SQLTokenizer.BIGINT:"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""                    switch(operation){"",""\t\t\t\t\t\tcase IN:"",""\t\t\t\t\t\tcase EQUALS_NULL:"",""                        case EQUALS:    return left.getLong() == right.getLong();"",""                        case GREATER:   return left.getLong() \>  right.getLong();"",""                        case GRE_EQU:   return left.getLong() \>= right.getLong();"",""                        case LESSER:    return left.getLong() \<  right.getLong();"",""                        case LES_EQU:   return left.getLong() \<= right.getLong();"",""                        case UNEQUALS:  return left.getLong() != right.getLong();"",""                        case BETWEEN:"",""                                        long _left = left.getLong();"",""                                        return _left \>= right.getLong() && right2.getLong() \>= _left;"",""                        default:"",""                        \treturn getLong() != 0;"",""                    }"",""            case SQLTokenizer.REAL:"",""                    switch(operation){"",""\t\t\t\t\t\tcase IN:"",""\t\t\t\t\t\tcase EQUALS_NULL:"",""                        case EQUALS:    return left.getFloat() == right.getFloat();"",""                        case GREATER:   return left.getFloat() \>  right.getFloat();"",""                        case GRE_EQU:   return left.getFloat() \>= right.getFloat();"",""                        case LESSER:    return left.getFloat() \<  right.getFloat();"",""                        case LES_EQU:   return left.getFloat() \<= right.getFloat();"",""                        case UNEQUALS:  return left.getFloat() != right.getFloat();"",""                        case BETWEEN:"",""                                        float _left = left.getFloat();"",""                                        return _left \>= right.getFloat() && right2.getFloat() \>= _left;"",""                        default:"",""                        \treturn getFloat() != 0;"",""                    }"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    switch(operation){"",""\t\t\t\t\t\tcase IN:"",""\t\t\t\t\t\tcase EQUALS_NULL:"",""                        case EQUALS:    return left.getDouble() == right.getDouble();"",""                        case GREATER:   return left.getDouble() \>  right.getDouble();"",""                        case GRE_EQU:   return left.getDouble() \>= right.getDouble();"",""                        case LESSER:    return left.getDouble() \<  right.getDouble();"",""                        case LES_EQU:   return left.getDouble() \<= right.getDouble();"",""                        case UNEQUALS:  return left.getDouble() != right.getDouble();"",""                        case BETWEEN:"",""                                        double _left = left.getDouble();"",""                                        return _left \>= right.getDouble() && right2.getDouble() \>= _left;"",""                        default:"",""                        \treturn getDouble() != 0;"",""                    }"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""                    switch(operation){"",""\t\t\t\t\t\tcase IN:"",""\t\t\t\t\t\tcase EQUALS_NULL:"",""                        case EQUALS:    return left.getMoney() == right.getMoney();"",""                        case GREATER:   return left.getMoney() \>  right.getMoney();"",""                        case GRE_EQU:   return left.getMoney() \>= right.getMoney();"",""                        case LESSER:    return left.getMoney() \<  right.getMoney();"",""                        case LES_EQU:   return left.getMoney() \<= right.getMoney();"",""                        case UNEQUALS:  return left.getMoney() != right.getMoney();"",""                        case BETWEEN:"",""                                        long _left = left.getMoney();"",""                                        return _left \>= right.getMoney() && right2.getMoney() \>= _left;"",""                        default:"",""                        \treturn getMoney() != 0;"",""                    }"",""            case SQLTokenizer.DECIMAL:"",""\t\t\tcase SQLTokenizer.NUMERIC:{"",""\t\t\t\t\tif(operation == NEGATIVE)"",""\t\t\t\t\t\treturn left.getNumeric().getSignum() != 0;"",""\t\t\t\t\tint comp = left.getNumeric().compareTo( right.getNumeric() );"",""\t\t\t\t\tswitch(operation){"",""\t\t\t\t\t\tcase IN:"",""\t\t\t\t\t\tcase EQUALS_NULL:"",""\t\t\t\t\t\tcase EQUALS:    return comp == 0;"",""\t\t\t\t\t\tcase GREATER:   return comp \>  0;"",""\t\t\t\t\t\tcase GRE_EQU:   return comp \>= 0;"",""\t\t\t\t\t\tcase LESSER:    return comp \<  0;"",""\t\t\t\t\t\tcase LES_EQU:   return comp \<= 0;"",""\t\t\t\t\t\tcase UNEQUALS:  return comp != 0;"",""\t\t\t\t\t\tcase BETWEEN:"",""\t\t\t\t\t\t\t\t\t\treturn comp \>= 0 && 0 \>= left.getNumeric().compareTo( right2.getNumeric() );"",""                        default:"",""                        \treturn getNumeric().getSignum() != 0;"",""\t\t\t\t\t}"",""\t\t\t\t\t}"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.CLOB:{"",""                    final String leftStr = left.getString();"",""                    final String rightStr = right.getString();"",""                    int comp = String.CASE_INSENSITIVE_ORDER.compare( leftStr, rightStr );"",""                    switch(operation){"",""\t\t\t\t\t\tcase IN:"",""\t\t\t\t\t\tcase EQUALS_NULL:"",""                        case EQUALS:    return comp == 0;"",""                        case GREATER:   return comp \>  0;"",""                        case GRE_EQU:   return comp \>= 0;"",""                        case LESSER:    return comp \<  0;"",""                        case LES_EQU:   return comp \<= 0;"",""                        case UNEQUALS:  return comp != 0;"",""                        case BETWEEN:"",""                                        return comp \>= 0 && 0 \>= String.CASE_INSENSITIVE_ORDER.compare( leftStr, right2.getString() );"",""                        case ADD:       return Utils.string2boolean(leftStr + rightStr);"",""                    }"",""                    break;}"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:{"",""                    byte[] leftBytes = left.getBytes();"",""                    byte[] rightBytes= right.getBytes();"",""                    int comp = Utils.compareBytes( leftBytes, rightBytes);"",""                    switch(operation){"",""\t\t\t\t\t\tcase IN:"",""\t\t\t\t\t\tcase EQUALS_NULL:"",""                        case EQUALS:    return comp == 0;"",""                        case GREATER:   return comp \>  0;"",""                        case GRE_EQU:   return comp \>= 0;"",""                        case LESSER:    return comp \<  0;"",""                        case LES_EQU:   return comp \<= 0;"",""                        case UNEQUALS:  return comp != 0;"",""                        case BETWEEN:"",""                                        return comp \>= 0 && 0 \>= Utils.compareBytes( leftBytes, right2.getBytes() );"",""                    }"",""                    break;}"",""        }"",""        throw createUnspportedDataType();"",""    }""]"
/smallsql/junit/TestFunctions/tearDown(),"[""public void tearDown(){"",""        try{"",""            Connection con = AllTests.getConnection();"",""            Statement st = con.createStatement();"",""            st.execute(\""drop table \"" + table);"",""            st.close();"",""        }catch(Throwable e){"",""            //e.printStackTrace();"",""        }"",""    }""]"
/smallsql/database/TransactionStep/rollback(),"[""abstract void rollback() throws SQLException;""]"
/smallsql/database/Scrollable/afterLast(),"[""void afterLast() throws Exception {"",""\t\tif(rowIdx+1 \< rowList.size()){"",""\t\t\trowIdx = rowList.size()-1;"",""\t\t\trowSource.setRowPosition( rowList.get(rowIdx) );"",""\t\t}"",""\t\twhile(next()){/* scroll after the end */}"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getFloat(),"[""float getFloat() throws Exception {"",""\t\treturn getInt();"",""\t}""]"
"/smallsql/database/SSResultSet/updateBinaryStream(java.lang.String,java.io.InputStream,int)","[""public void updateBinaryStream(String columnName, InputStream x, int length) throws SQLException {"",""        updateBinaryStream( findColumn( columnName ), x, length );"",""    }""]"
/smallsql/database/SSResultSet/absolute(int),"[""public boolean absolute(int row) throws SQLException {"",""\t\ttry{"",""            moveToCurrentRow();"",""\t\t\treturn getCmd().absolute(row);"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
"/smallsql/database/SSCallableStatement/setObject(java.lang.String,java.lang.Object,int)","[""public void setObject(String parameterName, Object x, int sqlType) throws SQLException {"",""        setObject( findParameter( parameterName ), x, sqlType );"",""    }""]"
"/smallsql/database/Utils/compareBytes(byte[],byte[])","[""static int compareBytes( byte[] leftBytes, byte[] rightBytes){"",""        int length = Math.min( leftBytes.length, rightBytes.length );"",""        int comp = 0;"",""        for(int i=0; i\<length; i++){"",""            if(leftBytes[i] != rightBytes[i]){"",""                comp = leftBytes[i] \< rightBytes[i] ? -1 : 1;"",""                break;"",""            }"",""        }"",""        if(comp == 0 && leftBytes.length != rightBytes.length){"",""            comp = leftBytes.length \< rightBytes.length ? -1 : 1;"",""        }"",""        return comp;"",""    }""]"
/smallsql/database/SQLParser/previousToken(),"[""private void previousToken(){"",""        tokenIdx--;"",""    }""]"
/smallsql/database/StorePageMap/resize(int),"[""/**"",""\t * Rehashes the contents of this map into a new array with a"",""\t * larger capacity.  This method is called automatically when the"",""\t * number of keys in this map reaches its threshold."",""\t *"",""\t * If current capacity is MAXIMUM_CAPACITY, this method does not"",""\t * resize the map, but but sets threshold to Integer.MAX_VALUE."",""\t * This has the effect of preventing future calls."",""\t *"",""\t * @param newCapacity the new capacity, MUST be a power of two;"",""\t *        must be greater than current capacity unless current"",""\t *        capacity is MAXIMUM_CAPACITY (in which case value"",""\t *        is irrelevant)."",""\t */"",""\tfinal private void resize(int newCapacity) {"","""",""\t\tEntry[] newTable = new Entry[newCapacity];"",""\t\ttransfer(newTable);"",""\t\ttable = newTable;"",""\t\tthreshold = (int)(newCapacity * 0.75f);"",""\t}""]"
"/smallsql/database/SmallSQLException/SmallSQLException(java.lang.String,java.lang.String)","[""/**"",""\t * Creates an exception with the specified message."",""\t * "",""\t * @param message"",""\t *            instantiated exception message."",""\t */"",""\tprivate SmallSQLException(String message, String vendorCode) {"",""\t\tsuper(\""[SmallSQL]\"" + message, vendorCode, 0);"",""\t\tinit();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getDefaultTransactionIsolation(),"[""public int getDefaultTransactionIsolation() {"",""    \treturn Connection.TRANSACTION_READ_COMMITTED;"",""    }""]"
/smallsql/database/ExpressionFunctionRepeat/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.REPEAT;"",""\t}""]"
/smallsql/database/CommandInsert/addColumnExpression(smallsql.database.Expression),"[""void addColumnExpression(Expression column) throws SQLException{"",""        if(columnExpressions.indexOf(column) \>= 0){"",""            throw SmallSQLException.create(Language.COL_DUPLICATE, column);"",""        }"",""        super.addColumnExpression(column);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsConvert(),"[""public boolean supportsConvert() {"",""    \treturn true;"",""    }""]"
"/smallsql/database/IndexDescription/load(smallsql.database.Database,smallsql.database.TableView,smallsql.database.StoreImpl)","[""/**"",""\t * Restore a IndexDescription from a saved Table."",""\t */"",""\tfinal static IndexDescription load(Database database, TableView tableView, StoreImpl store) throws SQLException{"",""\t\tint constraintType = store.readInt();"",""\t\tint count = store.readInt();"",""\t\tStrings columns = new Strings();"",""\t\tExpressions expressions = new Expressions();"",""\t\tSQLParser sqlParser = new SQLParser();"",""\t\tfor(int c=0; c\<count; c++){"",""\t\t\tString column = store.readString();"",""\t\t\tcolumns.add( column );"",""\t\t\texpressions.add( sqlParser.parseExpression(column));"",""\t\t}"",""\t\tIndexDescription indexDesc = new IndexDescription( store.readString(), tableView.name, constraintType, expressions, columns);"",""        indexDesc.init( database, tableView );"",""        indexDesc.load(database);"",""\t\treturn indexDesc;"",""\t}""]"
/smallsql/junit/TestStatement/testGeneratedKeys(),"[""public void testGeneratedKeys() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        ResultSet rs;"",""        "",""        st.execute(\""Insert Into statement(c) Values(\'key1\')\"", Statement.NO_GENERATED_KEYS);"",""        try{"",""            st.getGeneratedKeys();"",""            fail(\""NO_GENERATED_KEYS\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""01000\"", 0, ex);"",""        }"",""        assertEquals(\""UpdateCount\"", 1, st.getUpdateCount());"",""        assertNull(\""getResultSet\"", st.getResultSet());"",""        "",""        st.execute(\""Insert Into statement(c) Values(\'key2\')\"", Statement.RETURN_GENERATED_KEYS);"",""        rs = st.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",1,rs.getMetaData().getColumnCount());"",""        assertEquals(\""ColumnCount\"",\""i\"",rs.getMetaData().getColumnName(1));"",""        assertTrue(rs.next());"",""        assertEqualsRsValue( new Long(rs.getLong(1)), rs, false );"",""        assertFalse(rs.next());"","""","""",""        assertEquals(1,st.executeUpdate(\""Insert Into statement(c) Values(\'key3\')\"", Statement.RETURN_GENERATED_KEYS));"",""        rs = st.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",1,rs.getMetaData().getColumnCount());"",""        assertEquals(\""ColumnCount\"",\""i\"",rs.getMetaData().getColumnName(1));"",""        assertRowCount(1,rs);"","""",""        st.execute(\""Insert Into statement(c) Values(\'key4\')\"", new int[]{2,1});"",""        rs = st.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",2,rs.getMetaData().getColumnCount());"",""        assertRowCount(1,rs);"","""",""        assertEquals(1,st.executeUpdate(\""Insert Into statement(c) Values(\'key5\')\"", new int[]{2}));"",""        rs = st.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",1,rs.getMetaData().getColumnCount());"",""        assertEquals(\""ColumnCount\"",\""i\"",rs.getMetaData().getColumnName(1));"",""        assertRowCount(1,rs);"","""",""        st.execute(\""Insert Into statement(c) Values(\'key6\')\"", new String[]{\""c\"",\""i\""});"",""        rs = st.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",2,rs.getMetaData().getColumnCount());"",""        assertRowCount(1,rs);"","""",""        assertEquals(1,st.executeUpdate(\""Insert Into statement(c) Values(\'key7\')\"", new String[]{\""i\""}));"",""        rs = st.getGeneratedKeys();"",""        assertNotNull(\""RETURN_GENERATED_KEYS\"", rs);"",""        assertEquals(\""ColumnCount\"",1,rs.getMetaData().getColumnCount());"",""        assertEquals(\""ColumnCount\"",\""i\"",rs.getMetaData().getColumnName(1));"",""        assertRowCount(1,rs);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsMixedCaseQuotedIdentifiers(),"[""public boolean supportsMixedCaseQuotedIdentifiers() {"",""    \treturn true;"",""    }""]"
"/smallsql/database/StoreImpl/writeBytes(byte[],int,int)","[""void writeBytes(byte[] daten, int off, int length){"",""        int newSize = offset + length;"",""        if(newSize \> page.length) resizePage(newSize );"",""        System.arraycopy( daten, off, page, offset, length);"",""        offset += length;"",""    }""]"
/smallsql/database/ViewResult/next(),"[""boolean next() throws Exception {"",""\t\treturn commandSelect.next();"",""\t}""]"
/smallsql/junit/TestGroupBy/testLast2(),"[""public void testLast2() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( \""name2\"", \""Select last(name) FROM \"" + table1);"",""\t}""]"
/smallsql/database/ExpressionFunctionSpace/isNull(),"[""boolean isNull() throws Exception {"",""        return param1.isNull() || param1.getInt()\<0;"",""    }""]"
/smallsql/database/ExpressionName/getScale(),"[""int getScale(){"",""\t\treturn column.getScale();"",""\t}""]"
/smallsql/database/ViewResult/getMoney(int),"[""long getMoney(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getMoney();"",""\t}""]"
"/smallsql/database/StoreNull/getNumeric(int,int)","[""final MutableNumeric getNumeric(int offset, int dataType) throws Exception {"",""\t\treturn null;"",""\t}""]"
/smallsql/database/Where/isAfterLast(),"[""final boolean isAfterLast(){"",""\t\treturn row \> 0 && !isCurrentRow;"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampDiff/mapIntervalType(int),"[""static final int mapIntervalType(int intervalType){"",""\t\tswitch(intervalType){"",""\t\t\tcase SQLTokenizer.MILLISECOND:"",""\t\t\t\treturn SQLTokenizer.SQL_TSI_FRAC_SECOND;"",""\t\t\tcase SQLTokenizer.SECOND:"",""\t\t\t\treturn SQLTokenizer.SQL_TSI_SECOND;"",""\t\t\tcase SQLTokenizer.MINUTE:"",""\t\t\t\treturn SQLTokenizer.SQL_TSI_MINUTE;"",""\t\t\tcase SQLTokenizer.HOUR:"",""\t\t\t\treturn SQLTokenizer.SQL_TSI_HOUR;"",""\t\t\tcase SQLTokenizer.D:"",""\t\t\tcase SQLTokenizer.DAY:"",""\t\t\t\treturn SQLTokenizer.SQL_TSI_DAY;"",""\t\t\tcase SQLTokenizer.WEEK:"",""\t\t\t\treturn SQLTokenizer.SQL_TSI_WEEK;"",""\t\t\tcase SQLTokenizer.MONTH:"",""\t\t\t\treturn SQLTokenizer.SQL_TSI_MONTH;"",""\t\t\tcase SQLTokenizer.QUARTER:"",""\t\t\t\treturn SQLTokenizer.SQL_TSI_QUARTER;"",""\t\t\tcase SQLTokenizer.YEAR:"",""\t\t\t\treturn SQLTokenizer.SQL_TSI_YEAR;"",""\t\t\tdefault:"",""\t\t\t\treturn intervalType;"",""\t\t}"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setRef(int,java.sql.Ref)","[""public void setRef(int i, Ref x) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setRef() not yet implemented.\"");"",""    }""]"
/smallsql/database/ExpressionFunctionIIF/isNull(),"[""boolean isNull() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.isNull();"",""\t\treturn param3.isNull();"",""\t}""]"
/smallsql/database/Money/Money(float),"[""public Money(float value){"",""        this.value = (long)(value * 10000);"",""    }""]"
/smallsql/database/MutableLong/MutableLong(long),"[""MutableLong(long value){"",""\t\tthis.value = value;"",""\t}""]"
/smallsql/database/StoreImpl/createWriteLock(),"[""/**"",""     * Request a write lock for the current read page. It add the resulting StorePage to the list of commits."",""     * "",""     * @throws SQLException"",""     *             if for the current row (page) cannot create a write lock or th connection was closed."",""     */"",""    final void createWriteLock() throws SQLException{"",""\t\tTableStorePage storePageWrite = table.requestWriteLock( ((TableStorePage)storePage).con, (TableStorePage)storePage );"",""\t\tif(storePageWrite == null)"",""\t\t\tthrow SmallSQLException.create(Language.ROW_LOCKED);"",""\t\tstorePage = storePageWrite;"",""    }""]"
/smallsql/database/SmallSQLException/setLanguage(java.lang.Object),"[""/**"",""\t * Sets the language for the specified locale.\<br\>"",""\t * For information, see the specific document."",""\t * "",""\t * @param localeObj"",""\t *            nullable; can be a Locale object, or its Locale.toString()"",""\t *            String."",""\t * @throws SQLException"",""\t *             in case of missing language resource."",""\t */"",""    static void setLanguage(Object localeObj) throws SQLException {"",""    \t// if already set and no lang passed, return!"",""    \tif (language != null && localeObj == null) return;"","""",""    \tif (localeObj == null) {"",""    \t\tlanguage = Language.getDefaultLanguage(); "",""    \t}"",""    \telse {"",""    \t\tlanguage = Language.getLanguage(localeObj.toString()); "",""    \t}"",""    }""]"
/smallsql/database/Distinct/getRowPosition(),"[""final long getRowPosition() {"",""\t\treturn rowSource.getRowPosition();"",""\t}""]"
"/smallsql/database/StoreNoCurrentRow/getBoolean(int,int)","[""boolean getBoolean(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/Store/getNextPagePos(),"[""abstract long getNextPagePos();""]"
/smallsql/database/ExpressionFunctionAscii/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.ASCII;"",""\t}""]"
/smallsql/database/SSResultSetMetaData/isSigned(int),"[""public boolean isSigned(int column) throws SQLException {"",""\t\treturn isSignedDataType(getColumnExpression( column ).getDataType());"",""    }""]"
"/smallsql/database/SSPreparedStatement/setArray(int,java.sql.Array)","[""public void setArray(int i, Array x) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setArray() not yet implemented.\"");"",""    }""]"
/smallsql/database/SSDatabaseMetaData/locatorsUpdateCopy(),"[""public boolean locatorsUpdateCopy() {"",""\t\treturn false;"",""    }""]"
/smallsql/junit/TestAlterTable2/tearDown(),"[""public void tearDown(){"",""        try {"",""            dropTable( AllTests.getConnection(), table );"",""        } catch (SQLException ex) {"",""            ex.printStackTrace();"",""        }"",""    }""]"
/smallsql/database/MemoryResult/getLong(int),"[""long getLong( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getLong();"",""\t}""]"
/smallsql/database/Money/hashCode(),"[""public int hashCode(){"",""        return (int)(value ^ (value \>\>\> 32));"",""    }""]"
/smallsql/database/SSDatabaseMetaData/nullsAreSortedLow(),"[""public boolean nullsAreSortedLow() {"",""\t\treturn true;"",""    }""]"
"/smallsql/database/Database/replaceTable(smallsql.database.Table,smallsql.database.Table)","[""void replaceTable( Table oldTable, Table newTable) throws Exception{"",""        synchronized(tableViews){"",""            tableViews.remove( oldTable.name );"",""            tableViews.remove( newTable.name );"",""            oldTable.close();"",""            newTable.close();"",""            File oldFile = oldTable.getFile(this);"",""            File newFile = newTable.getFile(this);"",""            File tmpFile = new File(Utils.createTableViewFileName( this, \""#\"" + System.currentTimeMillis() + this.hashCode() ));"",""            if( !oldFile.renameTo(tmpFile) ){"",""                throw SmallSQLException.create(Language.TABLE_CANT_RENAME, oldTable.name);"",""            }"",""            if( !newFile.renameTo(oldFile) ){"",""                tmpFile.renameTo(oldFile); //restore the old table"",""                throw SmallSQLException.create(Language.TABLE_CANT_RENAME, oldTable.name);"",""            }"",""            tmpFile.delete();"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionReturnFloat/getNumeric(),"[""final MutableNumeric getNumeric() throws Exception{"",""\t\tif(isNull()) return null;"",""\t\tdouble value = getDouble();"",""\t\tif(Double.isInfinite(value) || Double.isNaN(value))"",""\t\t\treturn null;"",""\t\treturn new MutableNumeric(value);"",""    }""]"
/smallsql/junit/TestGroupBy/testSumDouble(),"[""public void testSumDouble() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Double(4), \""Select sum(cast(id as double)) FROM \"" + table1);"",""\t}""]"
/smallsql/database/ExpressionFunctionSubstring/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.SUBSTRING;"",""\t}""]"
/smallsql/database/Expression/setAlias(java.lang.String),"[""final void setAlias(String alias){ "",""\t\tthis.alias = alias; "",""\t}""]"
/smallsql/database/StoreImpl/getNextPagePos(),"[""@Override"",""    long getNextPagePos(){"",""    \tif(updatePointer != null) return updatePointer.getNextPagePos();"",""    \tif(nextPageOffset \<= 0){"",""\t\t\tnextPageOffset = sizePhysical; "",""    \t}"",""\t\treturn filePos + nextPageOffset;"",""    }""]"
/smallsql/database/Expression/getName(),"[""final String getName(){ "",""\t\treturn name; "",""\t}""]"
/smallsql/database/StorePageMap/clear(),"[""/**"",""\t * Removes all mappings from this map."",""\t */"",""\tfinal void clear() {"",""\t\tEntry tab[] = table;"",""\t\tfor (int i = 0; i \< tab.length; i++) "",""\t\t\ttab[i] = null;"",""\t\tsize = 0;"",""\t}""]"
/smallsql/database/TableResult/init(smallsql.database.SSConnection),"[""/**"",""\t * Is used for compile() of different Commands"",""\t * "",""\t * @param con"",""\t * @return true if now initialize; false if already initialize"",""\t * @throws Exception"",""\t */"",""\t@Override"",""    final boolean init( SSConnection con ) throws Exception{"",""\t\tif(super.init(con)){"",""\t\t\tColumns columns = table.columns;"",""\t\t\toffsets     = new int[columns.size()];"",""\t\t\tdataTypes   = new int[columns.size()];"",""\t\t\tfor(int i=0; i\<columns.size(); i++){"",""\t\t\t\tdataTypes[i] = columns.get(i).getDataType();"",""\t\t\t}"",""\t\t\treturn true;"",""\t\t}"",""\t\treturn false;"",""\t}""]"
/smallsql/junit/TestOrderBy/test_bigint_withDoublicateValues(),"[""public void test_bigint_withDoublicateValues() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tLong oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT bi/2 bi_2 FROM \"" + table1 + \"" ORDER  by (bi/2)\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = (Long)rs.getObject(\""bi_2\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = (Long)rs.getObject(\""bi_2\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tLong newValue = (Long)rs.getObject(\""bi_2\"");"",""\t\t\tassertTrue( oldValue + \""\<=\""+newValue, oldValue.compareTo( newValue ) \<= 0 );"",""\t\t\toldValue = newValue;"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
"/smallsql/database/SSResultSet/SSResultSet(smallsql.database.SSStatement,smallsql.database.CommandSelect)","[""SSResultSet( SSStatement st, CommandSelect cmd ){"",""        this.st = st;"",""        metaData.columns = cmd.columnExpressions;"",""        this.cmd = cmd;"",""\t\tisUpdatable = st != null && st.rsConcurrency == CONCUR_UPDATABLE && !cmd.isGroupResult();"",""    }""]"
/smallsql/database/MemoryResult/getFloat(int),"[""float getFloat( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getFloat();"",""\t}""]"
/smallsql/database/ExpressionValue/getScale(),"[""int getScale(){"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\tMutableNumeric obj = getNumeric();"",""\t\t\t\treturn (obj == null) ? 0: obj.getScale();"",""\t\t\tdefault:"",""\t\t\t\treturn getScale(dataType);"",""\t\t}"",""\t}""]"
/smallsql/junit/TestTransactions/testReadUncommited(),"[""public void testReadUncommited() throws Exception{"",""\t\tConnection con1 = AllTests.getConnection();"",""\t\tConnection con2 = AllTests.createConnection();"",""\t\ttry{\t\t"",""\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );"",""\t\t\tcon1.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tcon1.setAutoCommit(false);"",""\t\t\tcon1.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert2\')\"");"","""",""\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\""Select count(*) from transactions\"");"",""\t\t\tassertTrue( rs2.next() );"",""\t\t\tassertEquals( 1, rs2.getInt(1) );"",""\t\t}finally{"",""\t\t    dropTable(con1, \""transactions\"");"",""\t\t\tcon1.setAutoCommit(true);"",""\t\t\tcon2.close();"",""\t\t}"",""\t}""]"
/smallsql/database/SSResultSet/testNotInsertRow(),"[""/**"",""     * Test if it on the insert row."",""     * @throws SQLException if on the insert row"",""     */"",""    private void testNotInsertRow() throws SQLException{"",""        if(isInsertRow){"",""            throw SmallSQLException.create(Language.RSET_ON_INSERT_ROW);"",""        }"",""    }""]"
"/smallsql/database/IndexDescription/createFile(smallsql.database.SSConnection,smallsql.database.Database)","[""private FileChannel createFile(SSConnection con, Database database) throws Exception{"",""\t    if( database.isReadOnly() ){"",""\t        throw SmallSQLException.create(Language.DB_READONLY);"",""\t    }"",""\t\tFile file = getFile( database, name );"",""\t\tboolean ok = file.createNewFile();"",""\t\tif(!ok) throw SmallSQLException.create(Language.INDEX_EXISTS, name);"",""\t\tFileChannel randomFile = Utils.openRaFile( file, database.isReadOnly() );"",""        con.add(new CreateFile(file, randomFile, con, database));"",""\t\twriteMagic(randomFile);"",""\t\treturn randomFile;"",""\t}""]"
"/smallsql/database/SmallSQLException/SmallSQLException(java.lang.Throwable,java.lang.String,java.lang.String)","[""/**"",""\t * Creates an exception with the specified message, appending the passed"",""\t * one."",""\t * "",""\t * @param throwable"",""\t *            exception to append."",""\t * @param message"",""\t *            instantiated exception message."",""\t */"",""\tprivate SmallSQLException(Throwable throwable, String message, String vendorCode) {"",""\t\tsuper(\""[SmallSQL]\"" + message, vendorCode, 0);"",""\t\tthis.initCause(throwable);"",""\t\tinit();"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getSuperTypes(java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {"",""        /**@todo: Implement this java.sql.DatabaseMetaData method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method getSuperTypes() not yet implemented.\"");"",""    }""]"
/smallsql/junit/BasicTestCase/getMonth3L(int),"[""/**"",""\t * Returns the localized 3-letters month."",""\t * "",""\t * @param ordinal"",""\t *            month ordinal (1-based)."",""\t * @return 3-letters month."",""\t */"",""   \tstatic String getMonth3L(int ordinal) {"",""   \t\treturn MONTHS[ordinal - 1];"",""   \t}""]"
/smallsql/database/ExpressionFunctionSin/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.sin( param1.getDouble() );"",""    }""]"
/smallsql/database/SSConnection/setTransactionIsolation(int),"[""public void setTransactionIsolation(int level) throws SQLException {"",""    \tif(!metadata.supportsTransactionIsolationLevel(level)) {"",""    \t\tthrow SmallSQLException.create(Language.ISOLATION_UNKNOWN, String.valueOf(level));"",""    \t}"",""        isolationLevel = level;        "",""    }""]"
/smallsql/database/Scrollable/rowInserted(),"[""final boolean rowInserted(){"",""\t\treturn rowSource.rowInserted();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/dataDefinitionIgnoredInTransactions(),"[""public boolean dataDefinitionIgnoredInTransactions() {"",""    \treturn false;"",""    }""]"
/smallsql/database/Strings/resize(int),"[""private final void resize(int newSize){"",""\t\tString[] dataNew = new String[newSize];"",""\t\tSystem.arraycopy(data, 0, dataNew, 0, size);"",""\t\tdata = dataNew;\t\t"",""\t}""]"
"/smallsql/database/SSResultSet/updateString(java.lang.String,java.lang.String)","[""public void updateString(String columnName, String x) throws SQLException {"",""        updateString( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/Table/getFirstPage(),"[""/**"",""\t * Return the file offset of the first page with data after the table declaration."",""\t * This is equals to the first row."",""\t */"",""    final long getFirstPage(){"",""        return firstPage;"",""    }""]"
/smallsql/database/MemoryStream/readLong(),"[""long readLong(){"",""\t\treturn (((long)(puffer[ offset++ ] & 0xFF)) \<\< 56)"",""\t\t\t | (((long)(puffer[ offset++ ] & 0xFF)) \<\< 48)"",""\t\t\t | (((long)(puffer[ offset++ ] & 0xFF)) \<\< 40)"",""\t\t\t | (((long)(puffer[ offset++ ] & 0xFF)) \<\< 32)"",""\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 24)"",""\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 16)"",""\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 8)"",""\t\t\t |  (puffer[ offset++ ] & 0xFF);"",""\t}""]"
/smallsql/database/SSPreparedStatement/clearBatch(),"[""public void clearBatch() throws SQLException {"",""        checkStatement();"",""\t\tif(batches != null) batches.clear();"",""\t}""]"
/smallsql/database/IndexDescription/isUnique(),"[""final boolean isUnique(){"",""\t\treturn constraintType == SQLTokenizer.PRIMARY || constraintType == SQLTokenizer.UNIQUE;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/ownInsertsAreVisible(int),"[""public boolean ownInsertsAreVisible(int type) {"",""\t\treturn supportsResultSetType(type);"",""    }""]"
/smallsql/database/SSResultSet/isLast(),"[""public boolean isLast() throws SQLException {"",""    \ttry{"",""    \t\treturn getCmd().isLast();"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
/smallsql/database/ExpressionFunctionCase/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn getResult().isNull();"",""\t}""]"
/smallsql/database/SQLParser/set(),"[""private CommandSet set() throws SQLException{"",""        SQLToken token = nextToken( COMMANDS_SET );"",""        switch(token.value){"",""            case SQLTokenizer.TRANSACTION:"",""                return setTransaction();"",""            default:"",""                throw new Error();"",""        }"",""    }""]"
/smallsql/database/Database/isReadOnly(),"[""boolean isReadOnly(){"",""\t    return readonly;"",""\t}""]"
/smallsql/database/NoFromResult/beforeFirst(),"[""final void beforeFirst(){"",""\t\trowPos = 0;"",""\t}""]"
/smallsql/database/MutableNumeric/negate(byte[]),"[""private void negate(byte[] complement){"",""        int last = complement.length-1;"",""        for(int i=0; i\<=last; i++){"",""            complement[i] = (byte)( (i == last) ? -complement[i] : ~complement[i]);"",""        }"",""        while(complement[last] == 0){"",""            last--;"",""            complement[last]++;"",""        }"",""    }""]"
/smallsql/database/CommandSelect/isAfterLast(),"[""/**"",""\t * Is used from ResultSet.isAfterLast()."",""\t */"",""\tboolean isAfterLast() throws Exception{"",""\t\treturn from.isAfterLast();"",""\t}""]"
"/smallsql/database/ExpressionValue/getMoney(java.lang.Object,int)","[""static long getMoney(Object obj, int dataType) throws Exception{"",""        if(obj == null) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""                return (obj == Boolean.TRUE) ? 10000 : 0;"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""            case SQLTokenizer.BIGINT:"",""                return ((Number)obj).longValue() * 10000;"",""            case SQLTokenizer.REAL:"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                return Utils.doubleToMoney(((Number)obj).doubleValue());"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""            \treturn ((Money)obj).value;"",""            default: return Money.parseMoney( obj.toString() );"",""        }"",""\t}""]"
/smallsql/junit/BasicTestCase/makeNameValid(java.lang.String),"[""private static String makeNameValid(String name){"",""    \treturn name.replace(\',\' , \';\').replace(\'(\',\'{\');"",""    }""]"
/smallsql/junit/TestOther/testNoFromResult(),"[""public void testNoFromResult() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\t"",""\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY );"",""\t\tResultSet rs = st.executeQuery(\""Select 12, \'qwert\' alias\"");"",""\t\t"",""\t\tassertRSMetaData( rs, new String[]{\""col1\"", \""alias\""}, new int[]{Types.INTEGER, Types.VARCHAR });"",""\t\t"",""\t\tassertTrue( rs.isBeforeFirst() );"",""\t\tassertFalse( rs.isFirst() );"",""\t\tassertFalse( rs.isLast() );"",""\t\tassertFalse( rs.isAfterLast() );"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\tassertFalse( rs.isBeforeFirst() );"",""\t\tassertTrue( rs.isFirst() );"",""\t\tassertTrue( rs.isLast() );"",""\t\tassertFalse( rs.isAfterLast() );"",""\t\t"",""\t\tassertFalse( rs.next() );"",""\t\tassertFalse( rs.isBeforeFirst() );"",""\t\tassertFalse( rs.isFirst() );"",""\t\tassertFalse( rs.isLast() );"",""\t\tassertTrue( rs.isAfterLast() );"",""\t\t"",""\t\tassertTrue( rs.previous() );"",""\t\tassertFalse( rs.isBeforeFirst() );"",""\t\tassertTrue( rs.isFirst() );"",""\t\tassertTrue( rs.isLast() );"",""\t\tassertFalse( rs.isAfterLast() );"",""\t\t"",""\t\tassertFalse( rs.previous() );"",""\t\tassertTrue( rs.isBeforeFirst() );"",""\t\tassertFalse( rs.isFirst() );"",""\t\tassertFalse( rs.isLast() );"",""\t\tassertFalse( rs.isAfterLast() );"",""\t\t"",""\t\tassertTrue( rs.first() );"",""\t\tassertFalse( rs.isBeforeFirst() );"",""\t\tassertTrue( rs.isFirst() );"",""\t\tassertTrue( rs.isLast() );"",""\t\tassertFalse( rs.isAfterLast() );"",""\t\t"",""\t\tassertTrue( rs.last() );"",""\t\tassertFalse( rs.isBeforeFirst() );"",""\t\tassertTrue( rs.isFirst() );"",""\t\tassertTrue( rs.isLast() );"",""\t\tassertFalse( rs.isAfterLast() );"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {"",""\t\ttry {"",""\t\t\tString[] colNames = {\""TABLE_CAT\"", \""TABLE_SCHEM\"", \""TABLE_NAME\"", \""COLUMN_NAME\"", \""KEY_SEQ\"", \""PK_NAME\""};"",""\t\t\tObject[][] data   = con.getDatabase(false).getPrimaryKeys(con, table);"",""\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""\t\t} catch (Exception e) {"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
/smallsql/database/Utils/bytes2int(byte[]),"[""static int bytes2int( byte[] bytes ){"",""        int result = 0;"",""        int length = Math.min( 4, bytes.length);"",""        for(int i=0; i\<length; i++){"",""            result = (result \<\< 8) | (bytes[i] & 0xFF);"",""        }"",""        return result;"",""    }""]"
/smallsql/database/DateTime/equals(java.lang.Object),"[""public boolean equals(Object obj){"",""        if(!(obj instanceof DateTime)) return false;"",""        DateTime value = (DateTime)obj;"",""        return value.time == time && value.dataType == dataType;"",""    }""]"
/smallsql/database/ExpressionName/isAutoIncrement(),"[""boolean isAutoIncrement(){"",""\t\treturn column.isAutoIncrement();"",""\t}""]"
"/smallsql/database/IndexNode/addRootValue(long,int)","[""final IndexNode addRootValue( long remainderValue, int digitCount) throws SQLException{"",""\t\tsaveRemainderValue(remainderValue, digitCount);"",""\t\treturn addRoot();"",""\t}""]"
/smallsql/database/MemoryResult/insertRow(smallsql.database.Expression[]),"[""final void insertRow(Expression[] updateValues) throws Exception{"",""\t\tthrow SmallSQLException.create(Language.RSET_READONLY);"",""\t}""]"
/smallsql/database/Table/freeLock(smallsql.database.TableStorePage),"[""/**"",""\t * Remove the lock from this table."",""\t */"",""\tvoid freeLock(TableStorePage storePage){"",""\t\tfinal int lockType = storePage.lockType;"",""\t\tfinal long fileOffset = storePage.fileOffset;"",""\t\tsynchronized(locks){"",""\t\t\ttry{"",""\t\t\t\tTableStorePage lock;"",""\t\t\t\tTableStorePage prev;"",""\t\t\t\tswitch(lockType){"",""\t\t\t\t\tcase LOCK_INSERT:"",""\t\t\t\t\t\tfor(int i=0; i\<locksInsert.size(); i++){"",""\t\t\t\t\t\t\tprev = lock = (TableStorePage)locksInsert.get(i);"",""\t\t\t\t\t\t\twhile(lock != null){"",""\t\t\t\t\t\t\t\tif(lock == storePage){"",""\t\t\t\t\t\t\t\t\t//remove lock"",""\t\t\t\t\t\t\t\t\tif(lock == prev){"",""\t\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){"",""\t\t\t\t\t\t\t\t\t\t\t// the first lock is the only lock in the list"",""\t\t\t\t\t\t\t\t\t\t\tlocksInsert.remove(i--);"",""\t\t\t\t\t\t\t\t\t\t}else{"",""\t\t\t\t\t\t\t\t\t\t\t// only the first lock of the list is remove"",""\t\t\t\t\t\t\t\t\t\t\tlocksInsert.set( i, lock.nextLock );"",""\t\t\t\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\t\t\t}else{"",""\t\t\t\t\t\t\t\t\t\t// a lock in the mid or end is removed"",""\t\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;"",""\t\t\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\t\t\treturn;"",""\t\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\t\tprev = lock;"",""\t\t\t\t\t\t\t\tlock = lock.nextLock;"",""\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase LOCK_READ:"",""\t\t\t\t\tcase LOCK_WRITE:"",""\t\t\t\t\t\tLong pageKey = new Long(fileOffset); //TODO performance"",""\t\t\t\t\t\tlock = (TableStorePage)locks.get( pageKey );"",""\t\t\t\t\t\tprev = lock;"",""\t\t\t\t\t\twhile(lock != null){"",""\t\t\t\t\t\t\tif(lock == storePage){"",""\t\t\t\t\t\t\t\t//lock entfernen"",""\t\t\t\t\t\t\t\tif(lock == prev){"",""\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){"",""\t\t\t\t\t\t\t\t\t\t// erste und einzige Lock in Liste"",""\t\t\t\t\t\t\t\t\t\tlocks.remove(pageKey);"",""\t\t\t\t\t\t\t\t\t}else{"",""\t\t\t\t\t\t\t\t\t\t// the first lock in the list is removed"",""\t\t\t\t\t\t\t\t\t\tlocks.put( pageKey, lock.nextLock );"",""\t\t\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\t\t}else{"",""\t\t\t\t\t\t\t\t\t// a lock in the middle or end of the list is removed"",""\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;"",""\t\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\t\treturn;"",""\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\tprev = lock;"",""\t\t\t\t\t\t\tlock = lock.nextLock;"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\t// a run through can occur if a lock was step high and the type does not compare"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase LOCK_TAB:"",""\t\t\t\t\t\tassert storePage.con == tabLockConnection : \""Internal Error with TabLock\"";"",""\t\t\t\t\t\tif(--tabLockCount == 0) tabLockConnection = null;"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tdefault:"",""\t\t\t\t\t\tthrow new Error();"",""\t\t\t\t}"",""\t\t\t}finally{"",""\t\t\t\tlocks.notifyAll();"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/LongList/get(int),"[""final long get(int idx){"",""\t\tif (idx \>= size)"",""\t\t\tthrow new IndexOutOfBoundsException(\""Index: \""+idx+\"", Size: \""+size);"",""\t\treturn data[idx];"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setTimestamp(int,java.sql.Timestamp)","[""public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIMESTAMP);"",""    }""]"
/smallsql/database/ExpressionFunctionReturnInt/getMoney(),"[""final long getMoney() throws Exception {"",""\t\treturn getInt() * 10000;"",""\t}""]"
/smallsql/database/DateTime/valueOf(java.sql.Timestamp),"[""static DateTime valueOf(java.sql.Timestamp date){"",""\t\tif(date == null) return null;"",""\t\treturn new DateTime( parse(date), SQLTokenizer.TIMESTAMP);"",""\t}""]"
/smallsql/database/DateTime/toString(),"[""/**"",""     * Convert the this value in a String depending of the type the format is a subset of"",""     * yyyy-mm-dd hh:mm:ss.nnn"",""     */"",""\tpublic String toString(){"",""\t\tDetails details = new Details(time);"",""\t\tStringBuffer buf = new StringBuffer();"",""\t\tif(dataType != SQLTokenizer.TIME){"",""\t\t\tformatNumber( details.year,  4, buf );"",""\t\t\tbuf.append(\'-\');"",""\t\t\tformatNumber( details.month + 1, 2, buf );"",""\t\t\tbuf.append(\'-\');"",""\t\t\tformatNumber( details.day,   2, buf );"",""\t\t}"",""\t\tif(dataType != SQLTokenizer.DATE){"",""\t\t\tif(buf.length() \> 0) buf.append(\' \');"",""\t\t\tformatNumber( details.hour,  2, buf );"",""\t\t\tbuf.append(\':\');"",""\t\t\tformatNumber( details.minute, 2, buf );"",""\t\t\tbuf.append(\':\');"",""\t\t\tformatNumber( details.second, 2, buf );"",""\t\t}"",""\t\tswitch(dataType){"",""        case SQLTokenizer.TIMESTAMP:"",""        case SQLTokenizer.SMALLDATETIME:"",""\t\t\tbuf.append(\'.\');"",""\t\t\tformatMillis( details.millis, buf );"",""\t\t}"",""\t\treturn buf.toString();"",""\t}""]"
/smallsql/junit/TestTransactions/testUpdateAndSavepoint(),"[""/**"",""     * The difference to testInsertAndUpdate() is that the row was not inserted in the same transaction"",""     */"",""    public void testUpdateAndSavepoint() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{"",""            con.createStatement().execute(\""Create Table transactions ( v varchar(20))\"");"",""            assertRowCount(0, \""Select * from transactions\"");"","""",""            assertEquals(1, con.createStatement().executeUpdate(\""Insert Into transactions(v) Values(\'qwert\')\""));"",""            assertEqualsRsValue(\""qwert\"", \""Select * from transactions\"");"",""            assertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"","""",""            // start the transaction after the row is already insert"",""            con.setAutoCommit(false);"",""            assertEquals(1, con.createStatement().executeUpdate(\""Update transactions set v=\'qwert1\'\""));"",""            assertEqualsRsValue(\""qwert1\"", \""Select * from transactions\"");"",""            assertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"","""",""            assertEquals(1, con.createStatement().executeUpdate(\""Update transactions set v=\'qwert2\'\""));"",""            assertEqualsRsValue(\""qwert2\"", \""Select * from transactions\"");"",""            assertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"","""",""            Savepoint savepoint = con.setSavepoint();"","""",""            assertEquals(1, con.createStatement().executeUpdate(\""Update transactions set v=\'qwert 3\'\""));"",""            assertEqualsRsValue(\""qwert 3\"", \""Select * from transactions\"");"",""            assertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"","""",""            assertEquals(1, con.createStatement().executeUpdate(\""Update transactions set v=\'qwert 4\'\""));"",""            assertEqualsRsValue(\""qwert 4\"", \""Select * from transactions\"");"",""            assertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"","""",""            assertEquals(1, con.createStatement().executeUpdate(\""Update transactions set v=\'qwert 5\'\""));"",""            assertEqualsRsValue(\""qwert 5\"", \""Select * from transactions\"");"",""            assertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"","""",""            con.rollback(savepoint);"","""",""            con.commit();"",""            assertEqualsRsValue(\""qwert2\"", \""Select * from transactions\"");"",""            assertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"",""        }finally{"",""            dropTable(con, \""transactions\"");"",""            con.setAutoCommit(true);"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsStatementPooling(),"[""public boolean supportsStatementPooling() {"",""\t\treturn false;"",""    }""]"
/smallsql/database/Expression/setParams(smallsql.database.Expression[]),"[""void setParams( Expression[] params ){"",""        this.params = params;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getSearchStringEscape(),"[""public String getSearchStringEscape() {"",""    \treturn \""\\\\\"";"",""    }""]"
/smallsql/database/Expression/getMoney(),"[""abstract long getMoney() throws Exception;""]"
"/smallsql/junit/BasicTestCase/dropView(java.sql.Connection,java.lang.String)","[""void dropView(Connection con, String name){"",""\t\ttry {"",""\t\t\tStatement st = con.createStatement();"",""\t\t\tst.execute(\""drop view \""+name);"",""\t\t\tst.close();"",""\t\t} catch (SQLException e) {/* ignore it, if the view not exist */}"",""    }""]"
/smallsql/database/ExpressionFunctionUCase/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull();"",""\t}""]"
/smallsql/database/Join/first(),"[""boolean first() throws Exception{"",""        beforeFirst();"",""        return next();"",""    }""]"
/smallsql/database/UnionAll/getInt(int),"[""final int getInt(int colIdx) throws Exception {"",""\t\treturn currentDS.getInt(colIdx);"",""\t}""]"
/smallsql/database/CommandSelect/compile(smallsql.database.SSConnection),"[""boolean compile(SSConnection con) throws Exception{"",""        boolean needCompile = false;"",""        if(tables != null){"",""            for(int i=0; i\<tables.size(); i++){"",""\t\t\t\tDataSource fromEntry = tables.get(i);"",""                needCompile |= fromEntry.init( con );"",""            }"",""        }"","""",""\t\tif(from == null){"",""\t\t\tfrom = new NoFromResult();"",""\t\t\ttables = new DataSources();"",""\t\t\tneedCompile = true;"",""\t\t}"",""        if(!needCompile) return false;"","""",""        for(int i=0; i\<columnExpressions.size(); i++){"",""            Expression col = columnExpressions.get(i);"",""            if(col.getAlias() == null){"",""                // generate automate names for expressions"",""                col.setAlias(\""col\"" + (i+1));"",""            }"","""",""            if(col.getType() != Expression.NAME){"",""                compileLinkExpressionParams(col);"",""                continue;"",""            }"","""",""            ExpressionName expr = (ExpressionName)col;"","""",""            if(\""*\"".equals( expr.getName() )){"",""                String tableAlias = expr.getTableAlias();"",""                if(tableAlias != null){"",""                    // Syntax: tableAlias.*"",""                    int t=0;"",""                    for(; t\<tables.size(); t++){"",""\t\t\t\t\t\tDataSource fromEntry = tables.get(t);"",""                        if(tableAlias.equalsIgnoreCase( fromEntry.getAlias() )){"",""                            TableView table = fromEntry.getTableView();"",""                            columnExpressions.remove(i);"",""                            i = compileAdd_All_Table_Columns( fromEntry, table, i ) - 1;"",""                            break;"",""                        }"",""                    }"",""                    if(t==tables.size()) throw SmallSQLException.create(Language.COL_WRONG_PREFIX, new Object[] {tableAlias});"",""                }else{"",""                    // Syntax *"",""                    columnExpressions.remove(i);"",""                    for(int t=0; t\<tables.size(); t++){"",""\t\t\t\t\t\tDataSource fromEntry = tables.get(t);"",""                        TableView table = fromEntry.getTableView();"",""                        i = compileAdd_All_Table_Columns( fromEntry, table, i );"",""                    }"",""                    i--;"",""                }"",""            }else{"",""            \t// not a * Syntax"",""                compileLinkExpressionName( expr );"",""            }"","""",""        }"",""        if(where != null) compileLinkExpression( where );"",""        if(having != null) compileLinkExpression( having );"",""        if(orderBy != null) {"",""            for(int i=0; i\<orderBy.size(); i++){"",""            \tcompileLinkExpression( orderBy.get(i));"",""            }"",""        }"",""\t\tif(groupBy != null){"",""\t\t\tfor(int i=0; i\<groupBy.size(); i++){"",""\t\t\t\tcompileLinkExpression( groupBy.get(i) );"",""\t\t\t}"",""\t\t}"","""",""        if(from instanceof Join){"",""            compileJoin( (Join)from );"",""        }"",""        "",""        if(where != null){"",""        \tfrom = new Where( from, where );"",""        }"",""        "",""\t\tif(isGroupResult()) {"",""\t\t\tfrom = new GroupResult( this, from, groupBy, having, orderBy);"",""\t\t\tif(having != null){"",""                from = new Where( from, having );"",""            }"",""\t\t}"",""\t\t"",""\t\tif(isDistinct){"",""\t\t\tfrom = new Distinct( from, columnExpressions );"",""\t\t}"",""\t\t"",""\t\tif(orderBy != null){"",""\t\t\tfrom = new SortedResult( from, orderBy );"",""\t\t}"",""\t\t"",""\t\treturn true;"",""    }""]"
"/smallsql/database/SSCallableStatement/registerOutParameter(java.lang.String,int,int)","[""public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {"",""        registerOutParameter( findParameter( parameterName ), sqlType, scale );"",""    }""]"
/smallsql/junit/TestGroupBy/TestGroupBy(),"[""public TestGroupBy() {"",""\t\tsuper();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsCoreSQLGrammar(),"[""public boolean supportsCoreSQLGrammar() {"",""\t\treturn true;"",""    }""]"
/smallsql/junit/TestLanguage/recreateTestTab(java.sql.Statement),"[""private void recreateTestTab(Statement stat) throws SQLException {"",""\t\tstat.execute(\""CREATE TABLE \"" + TABLE_NAME + \"" (id_test INT)\"");"","""",""\t}""]"
/smallsql/database/SSResultSet/getShort(java.lang.String),"[""public short getShort(String columnName) throws SQLException {"",""        return getShort( findColumn( columnName ) );"",""    }""]"
/smallsql/junit/TestOrderBy/test_bigint(),"[""public void test_bigint() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tLong oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by bi\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = (Long)rs.getObject(\""bi\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = (Long)rs.getObject(\""bi\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\""bi\"") ) \< 0 );"",""\t\t\toldValue = (Long)rs.getObject(\""bi\"");"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
"/smallsql/database/SSCallableStatement/SSCallableStatement(smallsql.database.SSConnection,java.lang.String,int,int)","[""SSCallableStatement( SSConnection con, String sql, int rsType, int rsConcurrency ) throws SQLException {"",""        super( con, sql, rsType, rsConcurrency );"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/getDateTimeLong(),"[""final private long getDateTimeLong() throws Exception{"",""\t\t//try{"",""\t\t\tswitch(param1.getDataType()){"",""\t\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""\t\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\t\t\treturn DateTime.parse( param1.getString() );"",""\t\t\t}"",""\t\t//}catch(Exception e){/* do nothing */}"",""\t\treturn param1.getLong();"",""\t}""]"
/smallsql/database/ExpressionFunctionIIF/getDataType(),"[""final int getDataType() {"",""\t\treturn ExpressionArithmetic.getDataType(param2, param3);"",""\t}""]"
/smallsql/database/SSConnection/getAutoCommit(),"[""public boolean getAutoCommit(){"",""        return autoCommit;"",""    }""]"
/smallsql/database/SSStatement/getMoreResults(),"[""final public boolean getMoreResults() throws SQLException{"",""        checkStatement();"",""        return getMoreResults(CLOSE_CURRENT_RESULT);"",""    }""]"
/smallsql/database/ExpressionFunctionATan2/getFunction(),"[""final int getFunction(){ return SQLTokenizer.ATAN2; }""]"
/smallsql/database/TableResult/getDataType(int),"[""@Override"",""    final int getDataType( int colIdx ){"",""        return dataTypes[colIdx];"",""    }""]"
/smallsql/database/ExpressionFunctionIIF/getBoolean(),"[""boolean getBoolean() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.getBoolean();"",""\t\treturn param3.getBoolean();"",""\t}""]"
/smallsql/database/SQLParser/lastToken(),"[""/** "",""\t * Return the last token that the method nextToken has return"",""\t */"",""\tprivate SQLToken lastToken(){"",""\t\tif(tokenIdx \> tokens.size()){"",""\t\t\treturn null;"",""\t\t}"",""\t\treturn (SQLToken)tokens.get( tokenIdx-1 );"",""\t}""]"
"/smallsql/database/SSCallableStatement/setBinaryStream(java.lang.String,java.io.InputStream,int)","[""public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {"",""        setBinaryStream( findParameter( parameterName ), x, length );"",""    }""]"
/smallsql/database/ExpressionValue/getBytes(),"[""byte[] getBytes() throws Exception{"",""    \treturn getBytes( getObject(), dataType);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getJDBCMajorVersion(),"[""public int getJDBCMajorVersion() {"",""    \treturn 3;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getCatalogs(),"[""public ResultSet getCatalogs() throws SQLException {"",""    \tString[] colNames = {\""TABLE_CAT\""};"",""    \tObject[][] data   = Database.getCatalogs(con.getDatabase(true));"",""    \treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""    }""]"
/smallsql/database/RowSource/isScrollable(),"[""/**"",""\t * If this RowSource is scrollable. It means it can scroll in all directions."",""\t */"",""\tabstract boolean isScrollable();""]"
/smallsql/database/ExpressionFunctionSpace/getDataType(),"[""final int getDataType() {"",""\t\treturn SQLTokenizer.VARCHAR;"",""\t}""]"
/smallsql/database/ExpressionFunctionRadians/getFunction(),"[""final int getFunction(){ return SQLTokenizer.RADIANS; }""]"
"/smallsql/database/IndexDescription/create(smallsql.database.SSConnection,smallsql.database.Database,smallsql.database.TableView)","[""/**"",""\t * Create the index. A raFile for storing the index data is saved."",""\t */"",""\tfinal void create(SSConnection con, Database database, TableView tableView) throws Exception{"",""\t\tinit( database, tableView );"",""\t\traFile = createFile( con, database );"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/othersUpdatesAreVisible(int),"[""public boolean othersUpdatesAreVisible(int type) {"",""\t\treturn supportsResultSetType(type);"",""    }""]"
/smallsql/database/NoFromResult/rowInserted(),"[""final boolean rowInserted(){"",""\t\treturn false;"",""\t}""]"
"/smallsql/database/SQLParser/index(smallsql.database.Command,int,java.lang.String,java.lang.String,java.lang.String)","[""/**"",""\t * Parse construct like:\<br\>"",""\t * \<li\>PRIMARY KEY (col1)"",""\t * \<li\>UNIQUE (col1, col2)"",""\t * \<li\>FOREIGN KEY REFERENCES ref_table(col1)"",""\t * @param cmd"",""\t * @param constraintType one of SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE or SQLTokenizer.FOREIGN."",""\t * @param if it a constrain of the current column else null"",""\t * @return a new IndexDescription"",""\t */"",""\tprivate IndexDescription index(Command cmd, int constraintType, String tableName, String contrainName, String columnName) throws SQLException{"",""\t\tif(constraintType != SQLTokenizer.UNIQUE) nextToken( MISSING_KEY );"",""\t\tSQLToken token = nextToken();"",""        if(token != null){"",""    \t\tswitch(token.value){"",""    \t\t\tcase SQLTokenizer.CLUSTERED:"",""    \t\t\tcase SQLTokenizer.NONCLUSTERED:"",""    \t\t\t\t// ignoring, this tokens form MS SQL Server are ignored"",""    \t\t\t\tbreak;"",""                default:"",""                    previousToken();"",""    \t\t}"",""        }else{"",""            previousToken();"",""        }"",""\t\tStrings columns = new Strings();"",""\t\tExpressions expressions = new Expressions();"",""\t\tif(columnName != null){"",""\t\t\t//Constraint for a single column together with the column definition"",""\t\t\tcolumns.add(columnName);"",""\t\t\texpressions.add(new ExpressionName(columnName));"",""\t\t}else{"",""\t\t\t//Constraint as addition definition"",""            expressionDefList( cmd, expressions, columns );"",""\t\t}"",""\t\treturn new IndexDescription( contrainName, tableName, constraintType, expressions, columns);"",""\t}""]"
/smallsql/database/Scrollable/nullRow(),"[""void nullRow() {"",""\t\trowSource.nullRow();"",""\t\trowIdx = -1;"",""\t}""]"
/smallsql/database/SSResultSetMetaData/getColumnTypeName(int),"[""public String getColumnTypeName(int column) throws SQLException {"",""        return SQLTokenizer.getKeyWord( getColumnExpression( column ).getDataType() );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsTableCorrelationNames(),"[""public boolean supportsTableCorrelationNames() {"",""    \treturn true;"",""    }""]"
/smallsql/database/UnionAll/getRow(),"[""final int getRow() throws Exception {"",""\t\treturn row;"",""\t}""]"
"/smallsql/database/FileIndex/FileIndex(smallsql.database.FileIndexNode,java.nio.channels.FileChannel)","[""FileIndex( FileIndexNode root, FileChannel raFile ) {"",""        super(root);"",""        this.raFile = raFile;"",""    }""]"
/smallsql/database/Command/getMaxRows(),"[""int getMaxRows(){return -1;}""]"
/smallsql/database/SSDatabaseMetaData/getDatabaseMajorVersion(),"[""public int getDatabaseMajorVersion() {"",""    \treturn getDriverMajorVersion();"",""    }""]"
/smallsql/database/ExpressionFunctionAbs/getFunction(),"[""int getFunction(){ return SQLTokenizer.ABS; }""]"
/smallsql/database/TableViewMap/get(java.lang.String),"[""TableView get(String name){"",""        return (TableView)map.get(getUniqueKey(name));"",""    }""]"
/smallsql/junit/TestJoins/suite(),"[""public static Test suite() throws Exception{"",""        TestSuite theSuite = new TestSuite(\""Joins\"");"",""        for(int i=0; i\<TESTS.length; i++){"",""            theSuite.addTest(new TestJoins( TESTS[i] ) );"",""        }"",""        return theSuite;"",""    }""]"
"/smallsql/database/Index/equals(char[],long,int)","[""private final boolean equals(char[] src1, long src2, int charCount){"",""\t\tif(src1 == null) return false;"",""\t\tint length = src1.length;"",""\t\tif(length != charCount) return false;"",""\t\tfor(int i=0, d = charCount-1; i\<length; i++){"",""\t\t\tif(src1[i] != (char)((src2 \>\> (d-- \<\< 4)))) return false;"",""\t\t}"",""\t\treturn true;"",""\t}""]"
/smallsql/database/SSResultSet/getFloat(java.lang.String),"[""public float getFloat(String columnName) throws SQLException {"",""        return getFloat( findColumn( columnName ) );"",""    }""]"
"/smallsql/database/SSResultSet/getTimestamp(java.lang.String,java.util.Calendar)","[""public Timestamp getTimestamp(String columnName, Calendar cal) throws SQLException {"",""        return getTimestamp( findColumn( columnName ), cal );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxColumnsInSelect(),"[""public int getMaxColumnsInSelect() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/MemoryStream/readInt(),"[""int readInt(){"",""\t\treturn ((puffer[ offset++ ] & 0xFF) \<\< 24)"",""\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 16)"",""\t\t\t | ((puffer[ offset++ ] & 0xFF) \<\< 8)"",""\t\t\t |  (puffer[ offset++ ] & 0xFF);"",""\t}""]"
/smallsql/database/SSCallableStatement/getByte(java.lang.String),"[""public byte getByte(String parameterName) throws SQLException {"",""        return getByte( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/ExpressionFunctionCase/getBoolean(),"[""final boolean getBoolean() throws Exception {"",""\t\treturn getResult().getBoolean();"",""\t}""]"
/smallsql/database/SSResultSet/rowUpdated(),"[""public boolean rowUpdated(){"",""    \treturn false;"",""    }""]"
/smallsql/junit/TestOrderBy/init(),"[""public void init(){"",""\t\tif(init) return;"",""\t\ttry{"",""\t\t\tConnection con = AllTests.getConnection();"",""\t\t\tdropTable( con, table1 );"",""\t\t\tdropTable( con, table2 );"",""\t\t\tdropTable( con, table3 );"",""\t\t\tStatement st = con.createStatement();"",""\t\t\tst.execute(\""create table \"" + table1 + \""(v varchar(30), c char(30), nv nvarchar(30),i int, d float, r real, bi bigint, b boolean)\"");"",""\t\t\tst.execute(\""create table \"" + table2 + \""(c2 char(30))\"");"",""\t\t\tst.execute(\""create table \"" + table3 + \""(vc varchar(30), vb varbinary(30))\"");"",""\t\t\tst.close();"",""\t\t\t"",""\t\t\tPreparedStatement pr = con.prepareStatement(\""INSERT into \"" + table1 + \""(v,c,nv,i,d,r,bi,b) Values(?,?,?,?,?,?,?,?)\"");"",""\t\t\tPreparedStatement pr2= con.prepareStatement(\""INSERT into \"" + table2 + \""(c2) Values(?)\"");"",""\t\t\tfor(int i=150; i\>-10; i--){"",""\t\t\t\tpr.setString( 1, String.valueOf(i));"",""\t\t\t\tpr.setString( 2, String.valueOf(i));"",""\t\t\t\tpr.setString( 3, String.valueOf( (char)i ));"",""\t\t\t\tpr.setInt   ( 4, i );"",""\t\t\t\tpr.setDouble( 5, i );"",""\t\t\t\tpr.setFloat ( 6, i );"",""\t\t\t\tpr.setInt   ( 7, i );"",""\t\t\t\tpr.setBoolean( 8, i == 0 );"",""\t\t\t\tpr.execute();"",""\t\t\t\tpr2.setString( 1, String.valueOf(i));"",""\t\t\t\tpr2.execute();"",""\t\t\t\tvalueCount++;"",""\t\t\t}"",""\t\t\tpr.setObject( 1, null, Types.VARCHAR);"",""\t\t\tpr.setObject( 2, null, Types.VARCHAR);"",""\t\t\tpr.setObject( 3, null, Types.VARCHAR);"",""\t\t\tpr.setObject( 4, null, Types.VARCHAR);"",""\t\t\tpr.setObject( 5, null, Types.VARCHAR);"",""\t\t\tpr.setObject( 6, null, Types.VARCHAR);"",""\t\t\tpr.setObject( 7, null, Types.VARCHAR);"",""\t\t\tpr.setObject( 8, null, Types.VARCHAR);"",""\t\t\tpr.execute();"",""\t\t\tpr2.setObject( 1, null, Types.VARCHAR);"",""\t\t\tpr2.execute();"",""\t\t\tpr2.setString( 1, \""\"");"",""\t\t\tpr2.execute();"","""",""\t\t\tpr.close();"","""",""\t\t\tpr = con.prepareStatement(\""INSERT into \"" + table3 + \""(vc, vb) Values(?,?)\"");"",""\t\t\tpr.setString( 1, table3);"",""\t\t\tpr.setBytes( 2, table3.getBytes());"",""\t\t\tpr.execute();"",""\t\t\tpr.setString( 1, \""\"");"",""\t\t\tpr.setBytes( 2, new byte[0]);"",""\t\t\tpr.execute();"",""\t\t\tpr.setString( 1, null);"",""\t\t\tpr.setBytes( 2, null);"",""\t\t\tpr.execute();"",""\t\t\t"",""\t\t\tinit = true;"",""\t\t}catch(Throwable e){"",""\t\t\te.printStackTrace();"",""\t\t}"",""\t}""]"
"/smallsql/database/SSResultSet/updateObject(java.lang.String,java.lang.Object,int)","[""public void updateObject(String columnName, Object x, int scale) throws SQLException {"",""        updateObject( findColumn( columnName ), x, scale );"",""    }""]"
/smallsql/database/ExpressionFunctionCase/getDataType(),"[""final int getDataType() {"",""\t\tif(dataType \< 0){"",""\t\t\tdataType = elseResult.getDataType();"",""\t\t\tfor(int i=0; i\<results.size(); i++){"",""\t\t\t\tdataType = ExpressionArithmetic.getDataType(dataType, results.get(i).getDataType());"",""\t\t\t}"",""\t\t}"",""\t\treturn dataType;"",""\t}""]"
/smallsql/database/Logger/println(java.lang.String),"[""void println(String msg){"",""\t\tPrintWriter log = DriverManager.getLogWriter();"",""\t\tif(log != null){"",""\t\t\tsynchronized(log){"",""\t\t\t\tlog.print(\""[Small SQL]\"");"",""\t\t\t\tlog.println(msg);"",""\t\t\t\tlog.flush();"",""\t\t\t}"",""\t\t}"",""\t}""]"
"/smallsql/junit/TestOperatoren/a(java.lang.String,java.lang.Object,java.lang.Object)","[""private static TestValue a(String dataType, Object small, Object large){"",""        TestValue value = new TestValue();"",""        value.dataType  = dataType;"",""        value.small     = small;"",""        value.large     = large;"",""        return value;"",""    }""]"
/smallsql/database/SQLParser/update(),"[""private Command update() throws SQLException{"",""\t\tCommandUpdate cmd = new CommandUpdate(con.log);"",""\t\t// read table name"",""\t\tDataSources tables = new DataSources();"",""\t\tcmd.setTables( tables );"",""\t\tcmd.setSource( rowSource( cmd, tables, 0 ) );"",""\t\t"",""\t\tSQLToken token = nextToken(MISSING_SET);"",""\t\twhile(true){"",""\t\t\ttoken = nextToken();"",""\t\t\tExpression dest = expressionSingle( cmd, token);"",""\t\t\tif(dest.getType() != Expression.NAME) throw createSyntaxError( token, MISSING_IDENTIFIER );"",""\t\t\tnextToken(MISSING_EQUALS);"",""\t\t\tExpression src = expression(cmd, 0);"",""\t\t\tcmd.addSetting( dest, src);"",""\t\t\ttoken = nextToken();"",""\t\t\tif(token == null) break;"",""\t\t\tswitch(token.value){"",""\t\t\t\tcase SQLTokenizer.WHERE:"",""\t\t\t\t\twhere(cmd);"",""\t\t\t\t\treturn cmd;\t\t\t\t"",""\t\t\t\tcase SQLTokenizer.COMMA:"",""\t\t\t\t\tcontinue;"",""\t\t\t\tdefault: throw createSyntaxError( token, MISSING_WHERE_COMMA );"",""\t\t\t}"",""\t\t}"",""\t\treturn cmd;"",""    }""]"
/smallsql/database/ExpressionArithmetic/getScale(),"[""int getScale(){"",""\t\tint dataType = getDataType();"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\tswitch(operation){"",""\t\t\t\t\tcase ADD:"",""\t\t\t\t\tcase SUB:"",""\t\t\t\t\t\treturn Math.max(left.getScale(), right.getScale());"",""\t\t\t\t\tcase MUL:"",""\t\t\t\t\t\treturn left.getScale() + right.getScale();"",""\t\t\t\t\tcase DIV:"",""\t\t\t\t\t\treturn Math.max(left.getScale()+5, right.getScale()+4);"",""\t\t\t\t\tcase NEGATIVE:"",""\t\t\t\t\t\treturn left.getScale();"",""\t\t\t\t\tcase MOD:"",""\t\t\t\t\t\treturn 0;"",""\t\t\t\t}"",""\t\t}"",""\t\treturn getScale(dataType);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getSchemas(),"[""public ResultSet getSchemas() throws SQLException {"",""\t\tString[] colNames = {\""TABLE_SCHEM\""};"",""\t\tObject[][] data   = new Object[0][];"",""\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""    }""]"
/smallsql/database/ExpressionFunctionPower/isNull(),"[""boolean isNull() throws Exception{"",""        return param1.isNull() || param2.isNull();"",""    }""]"
/smallsql/database/ExpressionName/getBytes(),"[""byte[] getBytes() throws Exception{"",""        return fromEntry.getBytes(colIdx);"",""    }""]"
/smallsql/junit/TestThreads/testConcurrentConnectionWrite(),"[""/**"",""     * Create a table with a single row. In different connections a int value will be increment."",""     * "",""     * @throws Throwable"",""     *             if an thread problem occur"",""     */"",""    public void testConcurrentConnectionWrite() throws Throwable{"",""        ArrayList threadList = new ArrayList();"",""        throwable = null;"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        try{"",""            st.execute(\""CREATE TABLE ConcurrentWrite( value int)\"");"",""            st.execute(\""INSERT INTO ConcurrentWrite(value) Values(0)\"");"","""",""            // start threads that check the row count"",""            for(int i = 0; i \< 200; i++){"",""                Thread thread = new Thread(new Runnable(){"","""",""                    public void run(){"",""                        try{"",""                            Connection con2 = AllTests.createConnection();"",""                            Statement st2 = con2.createStatement();"",""                            int count = st2.executeUpdate(\""UPDATE ConcurrentWrite SET value = value + 1\"");"",""                            assertEquals(\""Update Count\"", 1, count);"",""                            con2.close();"",""                        }catch(Throwable ex){"",""                            throwable = ex;"",""                        }"",""                    }"","""",""                });"",""                threadList.add(thread);"",""                thread.start();"",""            }"","""",""            // wait until all threads are finish"",""            for(int i = 0; i \< threadList.size(); i++){"",""                Thread thread = (Thread)threadList.get(i);"",""                thread.join(5000);"",""            }"","""",""            // throw the exception if one occur"",""            if(throwable != null){"",""                throw throwable;"",""            }"","""",""            assertEqualsRsValue(new Integer(200), \""SELECT value FROM ConcurrentWrite\"");"",""        }finally{"",""            dropTable(con, \""ConcurrentWrite\"");"",""        }"",""    }""]"
/smallsql/database/Column/getPrecision(),"[""int getPrecision(){"",""\t\treturn SSResultSetMetaData.getDataTypePrecision( dataType, precision );"",""    }""]"
/smallsql/database/SSPreparedStatement/executeUpdate(),"[""public int executeUpdate() throws SQLException {"",""\t\texecuteImp();"",""\t\treturn cmd.getUpdateCount();"",""    }""]"
/smallsql/database/NoFromResult/afterLast(),"[""final void afterLast(){"",""\t\trowPos = 2;"",""\t}""]"
/smallsql/database/IndexNode/removeNode(char),"[""/**"",""\t * Remove a node."",""\t * @param digit The digit must be in the range 0 between 255. "",""\t */"",""\tfinal void removeNode(char digit){"",""\t\tint pos = findNodePos( digit );"",""\t\tif(pos != -1){"",""\t\t\tint length = nodes.length-1;"",""\t\t\tIndexNode[] temp = new IndexNode[length];"",""\t\t\tSystem.arraycopy(nodes, 0, temp, 0, pos);"",""\t\t\tSystem.arraycopy(nodes, pos+1, temp, pos, length-pos);"",""\t\t\tnodes = temp;"",""\t\t}"",""\t}""]"
/smallsql/database/StoreImpl/getLink(),"[""StorePageLink getLink(){"",""\t\treturn ((TableStorePageInsert)storePage).getLink();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getMaxTableNameLength(),"[""public int getMaxTableNameLength() {"",""    \treturn 255;"",""    }""]"
/smallsql/database/NoFromResult/nullRow(),"[""final void nullRow() {"",""\t\tthrow new Error();"",""\t}""]"
/smallsql/database/SQLParser/datatype(boolean),"[""/**"",""     * Read a DataTpe description. This is used for CREATE TABLE and CONVERT function. "",""     * @param isEscape true then the data types start with \""SQL_\"". This is used for the Escape Syntax."",""     */"",""    private Column datatype(boolean isEscape) throws SQLException{"",""\t\tSQLToken token;"",""\t\tint dataType;"",""\t\tif(isEscape){"",""\t\t\ttoken = nextToken( MISSING_SQL_DATATYPE );"",""\t\t\tswitch(token.value){"",""\t\t\t\tcase SQLTokenizer.SQL_BIGINT: \t\t\tdataType = SQLTokenizer.BIGINT;\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_BINARY:\t\t\tdataType = SQLTokenizer.BINARY; \tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_BIT:\t\t\t\tdataType = SQLTokenizer.BIT;\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_CHAR:\t\t\t\tdataType = SQLTokenizer.CHAR;\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_DATE:\t\t\t\tdataType = SQLTokenizer.DATE;\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_DECIMAL:\t\t\tdataType = SQLTokenizer.DECIMAL;\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_DOUBLE:\t\t\tdataType = SQLTokenizer.DOUBLE;\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_FLOAT:\t\t\tdataType = SQLTokenizer.FLOAT;\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_INTEGER:\t\t\tdataType = SQLTokenizer.INT;\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_LONGVARBINARY:\tdataType = SQLTokenizer.LONGVARBINARY;break;"",""\t\t\t\tcase SQLTokenizer.SQL_LONGVARCHAR:\t\tdataType = SQLTokenizer.LONGVARCHAR;break;"",""\t\t\t\tcase SQLTokenizer.SQL_REAL:\t\t\t\tdataType = SQLTokenizer.REAL;\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_SMALLINT:\t\t\tdataType = SQLTokenizer.SMALLINT;\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_TIME:\t\t\t\tdataType = SQLTokenizer.TIME;\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_TIMESTAMP:\t\tdataType = SQLTokenizer.TIMESTAMP;\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_TINYINT:\t\t\tdataType = SQLTokenizer.TINYINT;\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_VARBINARY:\t\tdataType = SQLTokenizer.VARBINARY;\tbreak;"",""\t\t\t\tcase SQLTokenizer.SQL_VARCHAR:\t\t\tdataType = SQLTokenizer.VARCHAR;\tbreak;"",""\t\t\t\tdefault: throw new Error();"",""\t\t\t}"",""\t\t}else{"",""\t\t\ttoken = nextToken( MISSING_DATATYPE );"",""\t\t\tdataType = token.value;"",""\t\t}"",""\t\tColumn col = new Column();"","""",""\t\t// two-part  data type"",""\t\tif(dataType == SQLTokenizer.LONG){"",""\t\t\ttoken = nextToken();"",""\t\t\tif(token != null && token.value == SQLTokenizer.RAW){"",""\t\t\t\tdataType = SQLTokenizer.LONGVARBINARY;"",""\t\t\t}else{"",""\t\t\t\tdataType = SQLTokenizer.LONGVARCHAR;"",""\t\t\t\tpreviousToken();"",""\t\t\t}"",""\t\t}"","""",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.RAW:"",""\t\t\t\tdataType = SQLTokenizer.VARBINARY;"",""\t\t\t\t// no break;"",""\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\tcase SQLTokenizer.NCHAR:"",""\t\t\tcase SQLTokenizer.NVARCHAR:"",""\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\t{"",""\t\t\t\t// detect the maximum column size"",""                token = nextToken();"",""\t\t\t\tint displaySize;"",""\t\t\t\tif(token == null || token.value != SQLTokenizer.PARENTHESIS_L){"",""\t\t\t\t\tdisplaySize = 30;"",""                    previousToken();"",""\t\t\t\t}else{"",""\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );"",""\t\t\t\t\ttry{"",""\t\t\t\t\t\tdisplaySize = Integer.parseInt(token.getName(sql) );"",""\t\t\t\t\t}catch(Exception e){"",""\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );"",""\t\t\t\t\t}"",""\t\t\t\t\tnextToken( MISSING_PARENTHESIS_R );"",""\t\t\t\t}"",""\t\t\t\tcol.setPrecision( displaySize );"",""\t\t\t\tbreak;"",""\t\t\t}"",""\t\t\tcase SQLTokenizer.SYSNAME:"",""\t\t\t\tcol.setPrecision(255);"",""\t\t\t\tdataType = SQLTokenizer.VARCHAR;"",""\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.COUNTER:"",""\t\t\t\tcol.setAutoIncrement(true);"",""\t\t\t\tdataType = SQLTokenizer.INT;"",""\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""                token = nextToken();"",""\t\t\t\tif(token != null && token.value == SQLTokenizer.PARENTHESIS_L){"",""\t\t\t\t\t// read the precision of the data type"",""\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );"",""\t\t\t\t\tint value;"",""\t\t\t\t\ttry{"",""\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );"",""\t\t\t\t\t}catch(Exception e){"",""\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );"",""\t\t\t\t\t}"",""\t\t\t\t\tcol.setPrecision(value);"",""\t\t\t\t\ttoken = nextToken( MISSING_COMMA_PARENTHESIS );"",""\t\t\t\t\tif(token.value == SQLTokenizer.COMMA){"",""\t\t\t\t\t\t// read the scale of the data type"",""\t\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );"",""\t\t\t\t\t\ttry{"",""\t\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );"",""\t\t\t\t\t\t}catch(Exception e){"",""\t\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\tcol.setScale(value);"",""\t\t\t\t\t\tnextToken( MISSING_PARENTHESIS_R );"",""\t\t\t\t\t}"",""\t\t\t\t}else{"",""\t\t\t\t\tcol.setPrecision(18); //default Precision for decimal and numeric"",""                    previousToken();"",""\t\t\t\t}"",""\t\t\t\tbreak;"",""\t\t}"",""\t\tcol.setDataType( dataType );"",""\t\treturn col;"",""    }""]"
/smallsql/junit/TestTransactions/testRollbackWithOneCommitRow(),"[""/**"",""\t * In the table there is already one row that is commited."",""\t */"",""\tpublic void testRollbackWithOneCommitRow() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert\')\"");"",""\t\t\tassertRowCount( 1, \""Select * from transactions\"");"","""",""\t\t\tcon.setAutoCommit(false);"",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Select v From transactions\"");"",""\t\t\tassertRowCount( 2, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) (Select v From transactions)\"");"",""\t\t\tassertRowCount( 4, \""Select * from transactions\"");"",""\t\t\t"",""\t\t\tcon.rollback();"",""\t\t\tassertRowCount( 1, \""Select * from transactions\"");"",""\t\t\t"",""\t\t}finally{"",""\t\t\ttry{"",""\t\t\t\tcon.createStatement().execute(\""Drop Table transactions\"");"",""\t\t\t}catch(Throwable e){e.printStackTrace();}"",""\t\t\tcon.setAutoCommit(true);"",""\t\t}"",""\t}""]"
/smallsql/junit/BenchTest/test_UpdateRowsPrepare(java.sql.Connection),"[""/**"",""      *  8. Test"",""      *  Update rows with a PreparedStatement."",""      */  "",""    static void test_UpdateRowsPrepare(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test update rows with a PreparedStatement: \"" + rowCount + \"" rows\"");"",""        try{"",""            PreparedStatement pr = con.prepareStatement( \""UPDATE \"" + tableName + \"" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\"" );"",""            long time = -System.currentTimeMillis();"",""            for (int i=0; i\<rowCount; i++){"",""\t            pr.setBytes (  1, byteArray );"",""\t            pr.setString(  2 , \""Test\"" );"",""\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );"",""\t            pr.setFloat (  4, (float)1234.56789 );"",""\t            pr.setFloat (  5 , (float)9876.54321 );"",""\t            pr.setBytes (  6, largeByteArray );"",""\t            pr.setInt   (  7 , i );"",""\t            pr.setDouble(  8 , 23.45 );"",""\t            pr.setDouble(  9 , 567.45 );"",""\t            pr.setFloat (  10 , (float)78.89 );"",""\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );"",""\t            pr.setShort (  12, (short)23456 );"",""\t            pr.setFloat (  13, (float)34.56 );"",""\t            pr.setString(  14, \""sysname (30) NULL\"" );"",""\t            pr.setString(  15 , \""text NULL\"" );"",""\t            pr.setByte  (  16, (byte)28 );"",""\t            pr.setBytes (  17, byteArray );"",""\t            pr.setString(  18, \""varchar (255) NULL\"" );"",""\t            pr.setInt   (  19 , i );"",""                int updateCount = pr.executeUpdate();"",""                if (updateCount != 1){"",""                    System.out.println( \""  Failed: Update count should be 1 but it is \"" + updateCount + \"".\"");"",""                    return;"",""                }"",""            }"",""            time += System.currentTimeMillis();"",""            System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            pr.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
/smallsql/database/SSCallableStatement/getURL(java.lang.String),"[""public URL getURL(String parameterName) throws SQLException {"",""        return getURL( findParameter( parameterName ) );"",""    }""]"
/smallsql/junit/TestOperatoren/runTest(),"[""public void runTest() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        ResultSet rs;"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where 1 = 0\"");"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where a = b\"");"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertEqualsObject( \""Values not equals\"", rs.getObject(1), rs.getObject(2), false);"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertEqualsObject( \""Values not equals\"", rs.getObject(1), rs.getObject(2), false);"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where a \<= b and b \<= a\"");"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertEqualsObject( \""Values not equals\"", rs.getObject(1), rs.getObject(2), false);"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertEqualsObject( \""Values not equals\"", rs.getObject(1), rs.getObject(2), false);"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where (a \> (b))\"");"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where a \>= b\"");"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where not (a \>= b)\"");"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where a \< b\"");"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where a \< b or a\>b\"");"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where a \<= b\"");"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where a \<\> b\"");"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        PreparedStatement pr = con.prepareStatement(\""Select * from \"" + table + \"" where a between ? and ?\"");"",""        pr.setObject( 1, testValue.small);"",""        pr.setObject( 2, testValue.large);"",""        rs = pr.executeQuery();"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""        assertFalse( \""To many rows\"", rs.next() );"",""\t\tpr.close();"","""",""\t\tpr = con.prepareStatement(\""Select * from \"" + table + \"" where a not between ? and ?\"");"",""\t\tpr.setObject( 1, testValue.small);"",""\t\tpr.setObject( 2, testValue.large);"",""\t\trs = pr.executeQuery();"",""\t\tassertTrue( \""To few rows\"", rs.next() );"",""\t\tassertTrue( \""To few rows\"", rs.next() );"",""\t\tassertFalse( \""To many rows\"", rs.next() );"",""\t\tpr.close();"","""",""\t\tpr = con.prepareStatement(\""Select * from \"" + table + \"" where a in(?,?)\"");"",""\t\tpr.setObject( 1, testValue.small);"",""\t\tpr.setObject( 2, testValue.large);"",""\t\trs = pr.executeQuery();"",""\t\tassertTrue( \""To few rows\"", rs.next() );"",""\t\tassertTrue( \""To few rows\"", rs.next() );"",""\t\tassertTrue( \""To few rows\"", rs.next() );"",""        assertTrue( \""To few rows\"", rs.next() );"",""\t\tassertTrue( \""To few rows\"", rs.next() );"",""\t\tassertFalse( \""To many rows\"", rs.next() );"",""\t\tpr.close();"","""",""\t\tpr = con.prepareStatement(\""Select * from \"" + table + \"" where a not in(?,?)\"");"",""\t\tpr.setObject( 1, testValue.small);"",""\t\tpr.setObject( 2, testValue.large);"",""\t\trs = pr.executeQuery();"",""\t\tassertTrue( \""To few rows\"", rs.next());"",""\t\tassertTrue( \""To few rows\"", rs.next());"",""\t\tassertFalse( \""To many rows\"", rs.next() );"",""\t\tpr.close();"","""",""        st.close();"",""    }""]"
/smallsql/junit/TestTransactions/testInsertAndUpdate(),"[""/**"",""     * Insert a row and update the inserted row in the same transaction. Then make a partial rollback. Test the correct"",""     * status after of the table after every change of the database."",""     * "",""     * @throws Exception"",""     *             if an error occur"",""     */"",""\tpublic void testInsertAndUpdate() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.setAutoCommit(false);"",""\t\t\tcon.createStatement().execute(\""Create Table transactions ( v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\""Insert Into transactions(v) Values(\'qwert\')\"") );"",""\t\t\tassertEqualsRsValue(\""qwert\"", \""Select * from transactions\"");"",""\t\t\tassertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"",""\t\t\t"",""\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\""Update transactions set v=\'qwert1\'\"") );"",""\t\t\tassertEqualsRsValue(\""qwert1\"", \""Select * from transactions\"");"",""\t\t\tassertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"",""\t\t\t"",""            assertEquals( 1, con.createStatement().executeUpdate(\""Update transactions set v=\'qwert2\'\"") );"",""            assertEqualsRsValue(\""qwert2\"", \""Select * from transactions\"");"",""            assertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"",""            "",""\t\t\tSavepoint savepoint = con.setSavepoint();"",""\t\t\t"",""\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\""Update transactions set v=\'qwert 3\'\"") );"",""\t\t\tassertEqualsRsValue(\""qwert 3\"", \""Select * from transactions\"");"",""\t\t\tassertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"","""",""\t\t\tcon.rollback( savepoint );"",""\t\t\t"",""\t\t\tcon.commit();"",""\t\t\tassertEqualsRsValue(\""qwert2\"", \""Select * from transactions\"");"",""\t\t\tassertEqualsRsValue(new Integer(1), \""Select count(*) from transactions\"");"",""\t\t}finally{"",""\t\t\ttry{"",""\t\t\t\tcon.createStatement().execute(\""Drop Table transactions\"");"",""\t\t\t}catch(Throwable e){e.printStackTrace();}"",""\t\t\tcon.setAutoCommit(true);"",""\t\t}"",""\t}""]"
/smallsql/database/SortedResult/getRowPosition(),"[""final long getRowPosition(){"",""\t\treturn rowSource.getRowPosition();"",""\t}""]"
/smallsql/junit/TestDeleteUpdate/testUpdate1(),"[""public void testUpdate1() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tdropTable(con,\""testUpdate\"");"",""\t\tStatement st = con.createStatement();"",""\t\tst.execute(\""create table testUpdate(id int default 15, value int)\"");"",""\t\tfor(int i=0; i\<10; i++){"",""\t\t\tst.execute(\""Insert into testUpdate Values(\""+i+\',\'+i+\"")\"");"",""\t\t}"",""\t\tassertRowCount( 10, \""Select * from testUpdate\"");"",""\t\t"",""\t\tint updateCount;"",""\t\tupdateCount = st.executeUpdate(\""update testUpdate set value=103 Where id=3\"");"",""\t\tassertEqualsRsValue( new Integer(103), \""Select value from testUpdate Where id=3\"");"",""\t\tassertRowCount( 10, \""Select value from testUpdate\"");"",""\t\tassertEquals( 1, updateCount);"",""\t\t"",""\t\tupdateCount = st.executeUpdate(\""update testUpdate set value=104 Where id=3\"");"",""\t\tassertEqualsRsValue( new Integer(104), \""Select value from testUpdate Where id=3\"");"",""\t\tassertRowCount( 10, \""Select value from testUpdate\"");"",""\t\tassertEquals( 1, updateCount);"",""\t\t"",""\t\tupdateCount = st.executeUpdate(\""delete from testUpdate Where id=3\"");"",""\t\tassertRowCount( 9, \""Select * from testUpdate\"");"",""\t\tassertEquals( 1, updateCount);"","""",""\t\tupdateCount = st.executeUpdate(\""update testUpdate set value=27 Where id\<5\"");"",""\t\tassertEquals( 4, updateCount);"","""",""\t\tdropTable(con,\""testUpdate\"");"",""\t}""]"
"/smallsql/database/ExpressionFunctionCase/addCase(smallsql.database.Expression,smallsql.database.Expression)","[""final void addCase(Expression condition, Expression result){"",""\t\tcases.add(condition);"",""\t\tresults.add(result);"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setBoolean(int,boolean)","[""public void setBoolean(int parameterIndex, boolean x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, x ? Boolean.TRUE : Boolean.FALSE, SQLTokenizer.BOOLEAN);"",""    }""]"
/smallsql/database/LongTreeList/writePointer(int),"[""/**"",""\t * Write a pointer to another node in the tree list. The size depends from the constant pointerSize."",""\t */"",""\tfinal private void writePointer(int value){"",""\t\tfor(int i=pointerSize-1; i\>=0; i--){"",""\t\t\tdata[offset++] = (byte)(value \>\> (i*8));"",""\t\t}"",""\t}""]"
/smallsql/database/MemoryResult/isScrollable(),"[""final boolean isScrollable(){"",""\t\treturn true;"",""\t}""]"
/smallsql/database/ExpressionName/getTableAlias(),"[""String getTableAlias(){ return tableAlias; }""]"
/smallsql/database/MutableInteger/getImmutableObject(),"[""public Object getImmutableObject(){"",""\t\treturn Utils.getInteger(value);"",""\t}""]"
"/smallsql/database/Utils/getExpressionNameFromTree(smallsql.database.Expressions,smallsql.database.Expression)","[""/**"",""     * Scan the tree recursively."",""     */"",""    private static final void getExpressionNameFromTree(Expressions list, Expression tree){"",""        if(tree.getType() == Expression.NAME ){"",""            list.add(tree);"",""        }"",""        Expression[] params = tree.getParams();"",""        if(params != null){"",""            for(int i=0; i\<params.length; i++){"",""                getExpressionNameFromTree( list, tree );"",""            }"",""        }"",""    }""]"
/smallsql/database/UnionAll/setRowPosition(long),"[""final void setRowPosition(long rowPosition) throws Exception {"",""\t\tint bitCount = getBitCount();"",""\t\tint mask = 0xFFFFFFFF \>\>\> (32 - bitCount);"",""\t\tdataSourceIdx = (int)rowPosition & mask;"",""\t\tcurrentDS = dataSources.get(dataSourceIdx);"",""\t\tcurrentDS.setRowPosition( rowPosition \>\> bitCount );"",""\t\t//getRow() is only unse on the top level RowSource, setRowPosition is not used on the top level RowSource"",""\t\t//thats we not set row here"",""\t}""]"
"/smallsql/junit/AllTests/createConnection(java.lang.String,java.util.Properties)","[""/**"",""\t * Creates a connection, with the possibility of appending an additional"",""\t * string to the url and/or passing a Properties object.\<br\>"",""\t * Locale is not specified."",""\t * "",""\t * @param urlAddition"",""\t *            String to append to url; nullable."",""\t * @param info"",""\t *            object Properties; nullable."",""\t * @return connection created."",""\t */"",""    public static Connection createConnection(String urlAddition, "",""    \t\tProperties info) "",""    throws SQLException {"",""\t\tnew smallsql.database.SSDriver();"",""\t\tnew sun.jdbc.odbc.JdbcOdbcDriver();"",""\t\t"",""\t\tif (urlAddition == null) urlAddition = \""\"";"",""\t\tif (info == null) info = new Properties();"",""\t\t"",""\t\tString urlComplete = JDBC_URL + urlAddition;"",""\t\t"",""\t\treturn DriverManager.getConnection(urlComplete, info);"",""    }""]"
/smallsql/database/Store/isNull(int),"[""abstract boolean isNull(int offset) throws Exception;""]"
"/smallsql/database/SQLParser/createSyntaxError(smallsql.database.SQLToken,java.lang.String,java.lang.Object)","[""/**"",""\t * Create a syntax error message, using a message with a parameter."",""\t * "",""\t * @param token"",""\t *            token object; if not null, generates a SYNTAX_BASE_OFS,"",""\t *            otherwise a SYNTAX_BASE_END."",""\t * @param addMessageCode"",""\t *            additional message[Code] to append."",""\t * @param param0"",""\t *            parameter."",""\t */"",""    private SQLException createSyntaxError(SQLToken token, String addMessageCode, "",""    \t\tObject param0) {"",""    \tString message = getErrorString(token, addMessageCode, param0);"",""    \treturn SmallSQLException.create(Language.CUSTOM_MESSAGE, message);"",""    }""]"
/smallsql/junit/TestGroupBy/testMaxUniqueidentifier(),"[""public void testMaxUniqueidentifier() throws Exception{"",""\t\tinit();"",""\t\tString sql = \""Select max(convert(uniqueidentifier, \'12345678-3445-3445-3445-1234567890ab\')) FROM \"" + table1;"",""\t\tassertEqualsRsValue( \""12345678-3445-3445-3445-1234567890AB\"", sql);"",""\t}""]"
/smallsql/database/Utils/bytes2double(byte[]),"[""static double bytes2double( byte[] bytes ){"",""        return Double.longBitsToDouble( bytes2long( bytes ) );"",""    }""]"
/smallsql/junit/TestOrderBy/testUnion(),"[""public void testUnion() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tString oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT v, 5 as Const FROM \"" + table1 + \"" Union All Select vc, 6 From \"" + table3 + \"" ORDER by v\"");"",""\t\t"",""\t\tassertRSMetaData(rs, new String[]{\""v\"", \""Const\""}, new int[]{Types.VARCHAR, Types.INTEGER});"",""\t\t"",""\t\tassertTrue( rs.next() );\t\t"",""\t\toldValue = rs.getString(\""v\"");"",""\t\tassertNull(oldValue);"",""\t\t"",""\t\tassertTrue( rs.next() );\t\t"",""\t\toldValue = rs.getString(\""v\"");"",""\t\tassertNull(oldValue);"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getString(\""v\"");"",""\t\t"",""\t\tint count = 3;"",""\t\twhile(rs.next()){"",""\t\t\tString newValue = rs.getString(\""v\"");"",""\t\t\tassertTrue( oldValue.compareTo( newValue ) \< 0 );"",""\t\t\toldValue = newValue;"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount+4, count );"",""\t}""]"
/smallsql/junit/TestResultSet/setUp(),"[""protected void setUp() throws Exception{"",""    \tif(init) return;"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tdropTable( con, \""ResultSet\"");"",""\t\tst.execute(\""Create Table ResultSet (i int identity, c varchar(30))\"");"",""        "",""        st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""        ResultSet rs = st.executeQuery(\""Select * From ResultSet\"");"",""        "",""        rs.moveToInsertRow();"",""        rs.insertRow();"",""        rs.moveToInsertRow();"",""        rs.insertRow();"",""\t\tinit = true;"",""    }""]"
/smallsql/database/ViewResult/noRow(),"[""void noRow() {"",""\t\tcommandSelect.from.noRow();"",""\t}""]"
/smallsql/database/MutableFloat/MutableFloat(float),"[""MutableFloat(float value){"",""\t\tthis.value = value;"",""\t}""]"
/smallsql/database/Expression/isNullable(),"[""boolean isNullable(){"",""\t\treturn true; "",""\t}""]"
/smallsql/database/DateTime/valueOf(java.sql.Date),"[""static DateTime valueOf(java.sql.Date date){"",""\t\tif(date == null) return null;"",""\t\treturn new DateTime( parse(date), SQLTokenizer.DATE);"",""\t}""]"
/smallsql/database/SSConnection/setSavepoint(),"[""public Savepoint setSavepoint() throws SQLException {"",""        return new SSSavepoint(getSavepoint(), null, transactionTime);"",""    }""]"
/smallsql/database/FileIndex/load(java.nio.channels.FileChannel),"[""static FileIndex load( FileChannel raFile ) throws Exception{"",""        ByteBuffer buffer = ByteBuffer.allocate(1);"",""        raFile.read(buffer);"",""        buffer.position(0);"",""        boolean unique = buffer.get() != 0;"",""        FileIndexNode root = FileIndexNode.loadRootNode( unique, raFile, raFile.position() );"",""        return new FileIndex( root, raFile );"",""    }""]"
/smallsql/database/SSCallableStatement/getInt(java.lang.String),"[""public int getInt(String parameterName) throws SQLException {"",""        return getInt( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/ExpressionFunctionReturnFloat/getObject(),"[""final Object getObject() throws Exception{"",""\t\tif(isNull()) return null;"",""\t\treturn new Double(getDouble());"",""    }""]"
/smallsql/database/SSResultSet/getBytes(int),"[""public byte[] getBytes(int columnIndex) throws SQLException {"",""        try{"",""            byte[] obj = getValue(columnIndex).getBytes();"",""            wasNull = obj == null;"",""            return obj;"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/StoreImpl/writeTime(long),"[""void writeTime( long time){"",""        writeInt( (int)((time / 1000) % 86400) );"",""    }""]"
/smallsql/database/CommandSelect/getRow(),"[""/**"",""\t * Is used from ResultSet.afterLast()."",""\t */"",""\tfinal int getRow() throws Exception{"",""\t\tint row = from.getRow();"",""\t\tif(maxRows \>= 0 && row \> maxRows) return 0;"",""\t\treturn row;"",""\t}""]"
/smallsql/database/ExpressionFunction/createUnspportedDataType(int),"[""/**"",""     * Create a SQLException that the current function does not support the specific data type."",""     * @param dataType A data type const from SQLTokenizer."",""     */"",""\tSQLException createUnspportedDataType( int dataType ){"",""\t\tObject[] params = {"",""\t\t\t\tSQLTokenizer.getKeyWord(dataType),"",""\t\t\t\tSQLTokenizer.getKeyWord(getFunction())"",""\t\t};"",""        return SmallSQLException.create(Language.UNSUPPORTED_DATATYPE_FUNC, params);"",""    }""]"
"/smallsql/database/Database/getBestRowIdentifier(smallsql.database.SSConnection,java.lang.String)","[""Object[][] getBestRowIdentifier(SSConnection con, String table) throws SQLException{"",""\t\tList rows = new ArrayList();"",""\t\tStrings tables = getTables(table);"",""\t\tfor(int t=0; t\<tables.size(); t++){"",""    \t\tString tableName = tables.get(t);"",""    \t\tTableView tab = getTableView( con, tableName);"",""\t\t\tif(!(tab instanceof Table)) continue;"",""\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;"",""\t\t\tfor(int i=0; i\<indexes.size(); i++){"",""\t\t\t\tIndexDescription index = indexes.get(i);"",""\t\t\t\tif(index.isUnique()){"",""\t\t\t\t\tStrings columns = index.getColumns();"",""\t\t\t\t\tfor(int c=0; c\<columns.size(); c++){"",""\t\t\t\t\t\tString columnName = columns.get(c);"",""\t\t\t\t\t\tColumn column = tab.findColumn(columnName);"",""\t\t\t\t\t\tObject[] row = new Object[8];"",""\t\t\t\t\t\trow[0] = Utils.getShort(DatabaseMetaData.bestRowSession);//SCOPE"",""\t\t\t\t\t\trow[1] = columnName;\t\t\t//COLUMN_NAME"",""\t\t\t\t\t\tfinal int dataType = column.getDataType();"",""\t\t\t\t\t\trow[2] = Utils.getInteger(dataType);//DATA_TYPE"",""\t\t\t\t\t\trow[3] = SQLTokenizer.getKeyWord(dataType);//TYPE_NAME"",""\t\t\t\t\t\trow[4] = Utils.getInteger(column.getPrecision());\t//COLUMN_SIZE"",""\t\t\t\t\t\t\t\t\t\t\t\t\t\t//BUFFER_LENGTH"",""\t\t\t\t\t\trow[6] = Utils.getShort(column.getScale());\t\t//DECIMAL_DIGITS"",""\t\t\t\t\t\trow[7] = Utils.getShort(DatabaseMetaData.bestRowNotPseudo);//PSEUDO_COLUMN"",""\t\t\t\t\t\trows.add(row);"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t}"",""\t\t}"",""\t\tObject[][] result = new Object[rows.size()][];"",""\t\trows.toArray(result);"",""\t\treturn result;\t\t"",""\t}""]"
/smallsql/database/DataSources/get(int),"[""final DataSource get(int idx){"",""\t\tif (idx \>= size)"",""\t\t\tthrow new IndexOutOfBoundsException(\""Index: \""+idx+\"", Size: \""+size);"",""\t\treturn data[idx];"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnP1/getScale(),"[""final int getScale(){"",""\t\treturn param1.getScale();"",""\t}""]"
/smallsql/database/MutableNumeric/MutableNumeric(float),"[""MutableNumeric(float val){"",""        //first convert it to a string, because float to BigDecimal has very large rounding bug"",""        this( new BigDecimal( String.valueOf(val) ) );"",""    }""]"
"/smallsql/database/IndexDescription/IndexDescription(java.lang.String,java.lang.String,int,smallsql.database.Expressions,smallsql.database.Strings)","[""/**"",""\t * "",""\t * @param constraintType one of SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.FOREIGN or SQLTokenizer.INDEX."",""\t * @param columns the Expressions that build the index. For example one or more database columns."",""\t */"",""\tIndexDescription( String name, String tableName, int constraintType, Expressions expressions, Strings columns){"",""\t\tthis.constraintType = constraintType;"",""\t\tthis.expressions = expressions;"",""\t\tthis.columns = columns;"",""        this.name = createName(name, tableName);"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnFloat/getInt(),"[""final int getInt() throws Exception{"",""        return (int)getDouble();"",""    }""]"
/smallsql/database/ExpressionFunctionYear/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.YEAR;"",""\t}""]"
"/smallsql/database/StoreNull/getBytes(int,int)","[""final byte[] getBytes(int offset, int dataType) throws Exception {"",""\t\treturn null;"",""\t}""]"
/smallsql/database/ExpressionArithmetic/getBytes(),"[""byte[] getBytes() throws java.lang.Exception {"",""        throw createUnspportedConversion( SQLTokenizer.BINARY );"",""    }""]"
/smallsql/database/StoreImpl/readByte(),"[""int readByte(){"",""        return page[ offset++ ];"",""    }""]"
/smallsql/database/Column/setPrecision(int),"[""void setPrecision(int precision) throws SQLException{"",""\t    if(precision\<0) throw SmallSQLException.create(Language.COL_INVALID_SIZE, new Object[] { new Integer(precision), name});"",""        this.precision = precision;"",""    }""]"
/smallsql/junit/TestOperatoren/setUp(),"[""public void setUp(){"",""        tearDown();"",""        try{"",""            Connection con = AllTests.getConnection();"",""            Statement st = con.createStatement();"",""            st.execute(\""create table \"" + table + \""(a \"" + testValue.dataType +\"", b \"" + testValue.dataType + \"")\"");"",""            st.close();"",""            PreparedStatement pr = con.prepareStatement(\""INSERT into \"" + table + \""(a,b) Values(?,?)\"");"","""",""            pr.setObject( 1, testValue.small);"",""            pr.setObject( 2, testValue.large);"",""            pr.execute();"","""",""            pr.setObject( 1, testValue.small);"",""            pr.setObject( 2, testValue.small);"",""            pr.execute();"","""",""            pr.setObject( 1, testValue.large);"",""            pr.setObject( 2, testValue.large);"",""            pr.execute();"","""",""            pr.setObject( 1, testValue.large);"",""            pr.setObject( 2, testValue.small);"",""            pr.execute();"","""",""            pr.setObject( 1, null);"",""            pr.setObject( 2, testValue.small);"",""            pr.execute();"","""",""            pr.setObject( 1, testValue.small);"",""            pr.setObject( 2, null);"",""            pr.execute();"","""",""            pr.setObject( 1, null);"",""            pr.setObject( 2, null);"",""            pr.execute();"",""            pr.close();"",""        }catch(Throwable e){"",""            e.printStackTrace();"",""        }"",""    }""]"
/smallsql/junit/TestJoins/insertValues(java.sql.PreparedStatement),"[""private void insertValues(PreparedStatement pr ) throws Exception{"",""            pr.setObject( 1, testValue.small);"",""            pr.setObject( 2, testValue.large);"",""            pr.execute();"","""",""            pr.setObject( 1, testValue.small);"",""            pr.setObject( 2, testValue.small);"",""            pr.execute();"","""",""            pr.setObject( 1, testValue.large);"",""            pr.setObject( 2, testValue.large);"",""            pr.execute();"","""",""            pr.setObject( 1, testValue.large);"",""            pr.setObject( 2, testValue.small);"",""            pr.execute();"","""",""            pr.setObject( 1, null);"",""            pr.setObject( 2, testValue.small);"",""            pr.execute();"","""",""            pr.setObject( 1, testValue.small);"",""            pr.setObject( 2, null);"",""            pr.execute();"","""",""            pr.setObject( 1, null);"",""            pr.setObject( 2, null);"",""            pr.execute();"",""    }""]"
/smallsql/junit/TestExceptionMethods/testDuplicatedCreateTable(),"[""/**"",""     * The fail of creating table should not produce any files "",""     */"",""    public void testDuplicatedCreateTable() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{"",""            dropTable(con, \""DuplicatedTable\"");"",""            Statement st = con.createStatement();"",""            st.execute(\""Create Table DuplicatedTable(col INT primary key)\"");"",""            int tableFileCount = countFiles(\""DuplicatedTable\"");"",""            try{"",""                st.execute(\""Create Table DuplicatedTable(col INT primary key)\"");"",""                fail(\""SQLException \'Duplicated Table\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"",""            assertEquals(\""Additional Files created\"",tableFileCount, countFiles(\""DuplicatedTable\""));"",""        }finally{"",""            dropTable(con, \""DuplicatedTable\"");"",""        }"",""    }""]"
/smallsql/database/Join/beforeFirst(),"[""void beforeFirst() throws Exception{"",""        scroll.beforeFirst();"",""\t\tisAfterLast  = false;"",""\t\trow = 0;"",""    }""]"
/smallsql/database/ExpressionFunctionDifference/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.DIFFERENCE;"",""\t}""]"
/smallsql/database/CommandSelect/absolute(int),"[""/**"",""\t * Is used from ResultSet.absolute()."",""\t */"",""\tfinal boolean absolute(int row) throws Exception{"",""\t\treturn from.absolute(row);"",""\t}""]"
/smallsql/database/ExpressionFunctionConvert/getFunction(),"[""int getFunction() {"",""\t\treturn SQLTokenizer.CONVERT;"",""\t}""]"
/smallsql/database/DateTime/Details/Details(long),"[""Details(long time){"",""\t\t\tint t = (int)(time % 86400000);"",""\t\t\tint d = (int)(time / 86400000);"",""\t\t\tif(t\<0){"",""\t\t\t    //Time before 1970 and not a full day"",""\t\t\t\tt += 86400000;"",""\t\t\t\td--;"",""\t\t\t}\t\t\t\t"",""\t\t\tmillis = t % 1000;"",""\t\t\tt /= 1000;"",""\t\t\tsecond = t % 60;"",""\t\t\tt /= 60;"",""\t\t\tminute = t % 60;"",""\t\t\tt /= 60;"",""\t\t\thour = t % 24;"","""",""\t\t\tyear = 1970 - (int)(t / 365.2425);"",""\t\t\tboolean isLeap;"",""\t\t\tdo{"",""\t\t\t\tisLeap = false;"",""\t\t\t\tdayofyear = day = d - ((year - 1970)*365 + (year/4) - (year/100) + (year/400) - 477);"",""\t\t\t\tif(isLeapYear(year)){"",""\t\t\t\t\t// is leap year"",""\t\t\t\t\tif(day \< 59){"",""\t\t\t\t\t\tday++;"",""\t\t\t\t\t\tisLeap = true;"",""\t\t\t\t\t}"",""\t\t\t\t\tdayofyear++;"",""\t\t\t\t}"",""\t\t\t\tif(day \< 0){"",""\t\t\t\t\tyear--;"",""\t\t\t\t\tcontinue;"",""\t\t\t\t}else"",""\t\t\t\tif(day \>= 365){"",""\t\t\t\t\tyear++;"",""\t\t\t\t\tcontinue;"",""\t\t\t\t}"",""\t\t\t\tbreak;"",""\t\t\t}while(true);"",""\t\t\t"",""\t\t\tif(isLeap && day == 59){"",""\t\t\t\t// 29. Feb"",""\t\t\t\tmonth = 1;"",""\t\t\t\tday   = 29;"",""\t\t\t}else{"",""\t\t\t\tfor(int m=11; m\>=0; m--){"",""\t\t\t\t\tif(MONTH_DAYS[m] \<= day){"",""\t\t\t\t\t\tmonth = m;"",""\t\t\t\t\t\tday   = day - MONTH_DAYS[m] + 1;"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t}"",""\t\t}""]"
/smallsql/database/SSResultSet/getUnicodeStream(java.lang.String),"[""public InputStream getUnicodeStream(String columnName) throws SQLException {"",""        return getUnicodeStream( findColumn( columnName ) );"",""    }""]"
"/smallsql/database/Index/add(smallsql.database.IndexNode,long,char[],boolean)","[""/**"",""\t * Add a byte array to the Index."",""\t */"",""\tfinal private IndexNode add(IndexNode node, long rowOffset, char[] key, boolean isLast) throws SQLException{"",""\t\tint length = key.length;"",""\t\tint i=-1;"",""\t\twhile(true){"",""\t\t\t// the first digit include 0-null; 1-empty; 2 another value"",""\t\t\tchar digit = (i\<0) ? (length == 0 ? (char)1 : 2)"",""\t\t\t\t\t\t\t  : (key[i]);"",""\t\t\tif(++i == length){"",""\t\t\t\tif(isLast){"",""\t\t\t\t\tnode.addNode( digit, rowOffset );"",""\t\t\t\t\treturn null;"",""\t\t\t\t}"",""\t\t\t\treturn node.addRoot(digit);"",""\t\t\t}"",""\t\t\tnode = node.addNode(digit);"",""\t\t\tif(node.isEmpty()){"",""\t\t\t\tif(isLast){"",""\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );"",""\t\t\t\t\treturn null;"",""\t\t\t\t}"",""\t\t\t\treturn node.addRootValue( key, i );"",""\t\t\t}else"",""\t\t\tif(equals(node.getRemainderValue(), key, i)){"",""\t\t\t\tif(isLast){"",""\t\t\t\t\tnode.saveValue(rowOffset);"",""\t\t\t\t\treturn null;"",""\t\t\t\t}"",""\t\t\t\treturn node.addRoot();"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/LongLongList/get2(int),"[""final long get2(int idx){"",""\t\tif (idx \>= size)"",""\t\t\tthrow new IndexOutOfBoundsException(\""Index: \""+idx+\"", Size: \""+size);"",""\t\treturn data[(idx \<\< 1) +1];"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getMaxCharLiteralLength(),"[""public int getMaxCharLiteralLength() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/SSConnection/rollback(int),"[""void rollback(int savepoint) throws SQLException{"",""\t\ttestClosedConnection();"",""\t\tsynchronized(getMonitor()){"",""            for(int i = commitPages.size() - 1; i \>= savepoint; i--){"",""                TransactionStep page = (TransactionStep)commitPages.remove(i);"",""                page.rollback();"",""                page.freeLock();"",""            }"",""        }"",""    }""]"
/smallsql/database/SSConnection/add(smallsql.database.TransactionStep),"[""/**"",""\t * Add a page for later commit or rollback. "",""\t */"",""\tvoid add(TransactionStep storePage) throws SQLException{"",""\t\ttestClosedConnection();"",""\t\tsynchronized(getMonitor()){"",""            commitPages.add(storePage);"",""        }"",""\t}""]"
/smallsql/database/ExpressionArithmetic/createUnspportedConversion(int),"[""SQLException createUnspportedConversion( int dataType ){"",""        int type = left == null ? right.getDataType() : getDataType(left, right);"",""        Object[] params = new Object[] {"",""        \t\tSQLTokenizer.getKeyWord(dataType),"",""        \t\tSQLTokenizer.getKeyWord(type),"",""        \t\tgetKeywordFromOperation(operation)"",""        };"",""        return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER, params);"",""    }""]"
/smallsql/database/ExpressionFunctionSign/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.SIGN;"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnP1/getDataType(),"[""int getDataType() {"",""\t\treturn param1.getDataType();"",""\t}""]"
"/smallsql/database/IndexNode/findNodePos(char,int,int)","[""private final int findNodePos(char digit, int start, int end){"",""\t\tif(start == nodes.length) return -1;"",""\t\tint mid = start + (end - start)/2;"",""\t\tchar nodeDigit = nodes[mid].digit;"",""\t\tif(nodeDigit == digit) return mid;"",""\t\tif(nodeDigit \< digit){"",""\t\t\treturn findNodePos( digit, mid+1, end );"",""\t\t}else{"",""\t\t\tif(start == mid) return -1;"",""\t\t\treturn findNodePos( digit, start, mid-1 );"",""\t\t}"",""\t}""]"
/smallsql/database/language/Language/getMessage(java.lang.String),"[""public String getMessage(String key) {"",""\t\tString message = (String) messages.get(key);"",""\t\tassert(message != null): \""Message code not found: \"" + key;"",""\t\treturn message;"",""\t}""]"
/smallsql/junit/TestThreads/testConcurrentRead()/$anonymous1/run(),"[""public void run(){"",""                    try{"",""                        assertRowCount(rowCount, sql);"",""                    }catch(Throwable ex){"",""                        throwable = ex;"",""                    }"",""                }""]"
/smallsql/database/GroupResult/execute(),"[""final void execute() throws Exception{"",""        super.execute();"",""\t\tfrom.execute();"",""\t\tNextRow:"",""\t\twhile(from.next()){"",""\t\t\tbeforeFirst();"",""\t\t\twhile(next()){"",""\t\t\t\tif(currentGroup == null || currentGroup.getBoolean()){"",""\t\t\t\t\taccumulateRow();"",""\t\t\t\t\tcontinue NextRow;"",""\t\t\t\t}"",""\t\t\t}"",""\t\t\t// add a new row to the GroupResult"",""\t\t\taddGroupRow();"",""\t\t\taccumulateRow();"",""\t\t}"",""\t\t"",""\t\tif(getRowCount() == 0 && groupBy == null){"",""\t\t\t//special handling for SELECT count(*) FROM table"",""\t\t\t//without GROUP BY and without any rows"",""\t\t\taddGroupRow();"",""\t\t}"",""\t\t// reset the row counter"",""\t\tbeforeFirst();"",""\t}""]"
"/smallsql/database/DateTime/valueOf(java.lang.String,int)","[""/**"",""\t * @param dataType is used for the toString() method "",""\t */"",""\tstatic DateTime valueOf(String date, int dataType) throws SQLException{"",""\t\tif(date == null) return null;"",""\t\treturn new DateTime( parse(date), dataType);"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getProcedures(java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException {"",""\t\tString[] colNames = {\""PROCEDURE_CAT\"", \""PROCEDURE_SCHEM\"", \""PROCEDURE_NAME\"", \""\"", \""\"", \""\"", \""REMARKS\"", \""PROCEDURE_TYPE\""};  "",""\t\tObject[][] data   = new Object[0][];"",""\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""    }""]"
/smallsql/junit/AllTests/main(java.lang.String[]),"[""public static void main(String[] argv) {"",""    \ttry{"",""    \t\t//junit.swingui.TestRunner.main(new String[]{AllTests.class.getName()});"",""    \t\tjunit.textui.TestRunner.main(new String[]{AllTests.class.getName()});"",""    \t}catch(Throwable e){"",""    \t\te.printStackTrace();"",""    \t}"",""    }""]"
/smallsql/database/Command/setMaxRows(int),"[""/**"",""     * Set the max rows. Need to be override in the Commands that support it. "",""     */"",""\tvoid setMaxRows(int max){/* Empty because not supported for the most Commands */}""]"
/smallsql/database/MemoryResult/move(),"[""final private boolean move(){"",""\t\tif(rowIdx \< rowList.size() && rowIdx \>= 0){"",""\t\t\tcurrentRow = (ExpressionValue[])rowList.get(rowIdx);"",""\t\t\treturn true;"",""\t\t}"",""\t\tcurrentRow = null;"",""\t\treturn false;"",""\t}""]"
/smallsql/database/Where/getRow(),"[""final int getRow() throws Exception {"",""\t\treturn isCurrentRow ? row : 0;"",""\t}""]"
/smallsql/database/StoreImpl/isNull(int),"[""@Override"",""    boolean isNull(int valueOffset){"",""        return page[ valueOffset ] != 0;"",""    }""]"
/smallsql/database/ExpressionValue/getNumeric(),"[""MutableNumeric getNumeric(){"",""\t\treturn getNumeric( getObject(), dataType );"",""    }""]"
/smallsql/database/LongTreeList/getNext(smallsql.database.LongTreeListEnum),"[""/**"",""\t * Get the next long value from this list. "",""     * If there are no more values then it return -1."",""\t * @return"",""\t */"",""\tfinal long getNext(LongTreeListEnum listEnum){"",""\t\tint shift = (3-listEnum.stack) \<\< 4;"",""\t\tif(shift \>= 64) return -1; //a previous call has return -1"",""\t\toffset \t\t= listEnum.offsetStack[listEnum.stack];"",""\t\tlong result = listEnum.resultStack[listEnum.stack];"",""\t\tboolean firstNode = (offset == 0); // true if it the first entry in a level"",""\t\twhile(true){"",""\t\t\tint nextEntry = getUnsignedShort();"",""\t\t\tif(nextEntry != 0 || firstNode){"",""\t\t\t\t//there are more entries in this node"",""\t\t\t\tresult |= (((long)nextEntry) \<\< shift);"",""\t\t\t\tif(listEnum.stack\>=3){"",""\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;"",""\t\t\t\t\treturn result;"",""\t\t\t\t}"",""\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;"",""\t\t\t\toffset = getPointer();"",""\t\t\t\tshift -= 16;"",""\t\t\t\tlistEnum.stack++;"",""\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;"",""\t\t\t\tfirstNode = true;"",""\t\t\t}else{"",""\t\t\t\t//no more entries in this node"",""\t\t\t\tshift += 16;"",""\t\t\t\tlistEnum.stack--;"",""\t\t\t\tif(listEnum.stack\<0) return -1; // no more entries"",""\t\t\t\tresult = listEnum.resultStack[listEnum.stack];"",""\t\t\t\toffset = listEnum.offsetStack[listEnum.stack];"",""\t\t\t\tfirstNode = false;"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsGroupBy(),"[""public boolean supportsGroupBy() {"",""    \treturn true;"",""    }""]"
/smallsql/database/StoreImpl/writeDate(long),"[""void writeDate( long date){"",""        writeInt( (int)(date / 86400000));"",""    }""]"
/smallsql/database/SSDatabaseMetaData/othersDeletesAreVisible(int),"[""public boolean othersDeletesAreVisible(int type) {"",""\t\treturn supportsResultSetType(type);"",""    }""]"
/smallsql/database/IndexNode/save(smallsql.database.StoreImpl),"[""void save(StoreImpl output) throws SQLException{"",""\t\toutput.writeShort(digit);"",""\t\t"",""\t\tint length = remainderKey == null ? 0 : remainderKey.length;"",""\t\toutput.writeInt(length);"",""\t\tif(length\>0) output.writeChars(remainderKey);"",""\t\t"",""\t\tif(value == null){"",""\t\t\toutput.writeByte(0);"",""\t\t}else"",""\t\tif(value instanceof Long){"",""\t\t\toutput.writeByte(1);"",""\t\t\toutput.writeLong( ((Long)value).longValue() );"",""\t\t}else"",""\t\tif(value instanceof LongTreeList){"",""\t\t\toutput.writeByte(2);"",""\t\t\t((LongTreeList)value).save(output);"",""\t\t}else"",""\t\tif(value instanceof IndexNode){"",""\t\t\toutput.writeByte(3);"",""\t\t\t((IndexNode)value).saveRef(output);"",""\t\t}"",""        "",""        output.writeShort(nodes.length);"",""        for(int i=0; i\<nodes.length; i++){"",""            nodes[i].saveRef( output );"",""        }"","""",""\t}""]"
/smallsql/database/SSResultSet/getClob(java.lang.String),"[""public Clob getClob(String columnName) throws SQLException {"",""        return getClob( findColumn( columnName ) );"",""    }""]"
/smallsql/database/MutableNumeric/longValue(),"[""public long longValue(){"",""        if(value.length == 0 || signum == 0){"",""            return 0;"",""        }else{"",""            if (value.length == 1 && (value[0] \> 0)){"",""                // simple Integer Value"",""                return Utils.double2long(value[0] / scaleDoubleFactor[scale] * signum);"",""            }else"",""            if (value.length == 1){"",""                // overflow Integer Value"",""                long temp = value[0] & 0xFFFFFFFFL;"",""                return Utils.double2long(temp / scaleDoubleFactor[scale] * signum);"",""            }else"",""            if (value.length == 2 && (value[0] \> 0)){"",""                // simple Long Value"",""                long temp = (((long)value[0]) \<\< 32) | (value[1] & 0xFFFFFFFFL);"",""                return Utils.double2long(temp / scaleDoubleFactor[scale] * signum);"",""            }else{"",""           \t\tif(scale != 0){"",""           \t\t\tMutableNumeric numeric = new MutableNumeric(this);"",""           \t\t\tnumeric.setScale(0);"",""           \t\t\treturn numeric.longValue();"",""           \t\t}           \t\t\t"",""            \treturn (signum \> 0) ? Long.MAX_VALUE : Long.MIN_VALUE;"",""            }"",""        }"",""    }""]"
/smallsql/database/MutableNumeric/toBigDecimal(int),"[""public BigDecimal toBigDecimal(int newScale){"",""        if(newScale == this.scale) return toBigDecimal();"",""        return toBigDecimal().setScale( newScale, BigDecimal.ROUND_HALF_EVEN);"",""    }""]"
/smallsql/database/Join/afterLast(),"[""void afterLast(){"",""\t\tisAfterLast = true;"",""\t\tnoRow();"",""\t}""]"
/smallsql/database/SSResultSet/getByte(int),"[""public byte getByte(int columnIndex) throws SQLException {"",""        return (byte)getInt( columnIndex );"",""    }""]"
/smallsql/database/Database/dropView(java.lang.String),"[""void dropView(String viewName) throws Exception{"",""\t\tsynchronized(tableViews){"",""\t\t\tObject view = tableViews.remove( viewName );"",""\t\t\tif(view != null && !(view instanceof View))"",""\t\t\t\tthrow SmallSQLException.create(Language.VIEWDROP_NOT_VIEW, viewName);"",""\t\t\t"",""\t\t\tView.drop( this, viewName );"",""\t\t}"",""\t}""]"
/smallsql/junit/TestDeleteUpdate/testUpdate2(),"[""public void testUpdate2() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tdropTable(con,\""testUpdate\"");"",""\t\tStatement st = con.createStatement();"",""\t\tst.execute(\""create table testUpdate(id int default 15, value1 varchar(100), value2 int)\"");"",""\t\tfor(int i=0; i\<10; i++){"",""\t\t\tst.execute(\""Insert into testUpdate Values(\""+i+\',\'+(i*100)+\',\'+i+\"")\"");"",""\t\t}"",""\t\tassertRowCount( 10, \""Select * from testUpdate\"");"",""\t\t"",""\t\tst.execute(\""update testUpdate set value1=13 Where id=3\"");"",""\t\tassertEqualsRsValue( \""13\"", \""Select value1 from testUpdate Where id=3\"");"",""\t\tassertRowCount( 10, \""Select * from testUpdate\"");"",""\t\t"",""\t\tst.execute(\""update testUpdate set value1=1040 Where id=3\"");"",""\t\tassertEqualsRsValue( \""1040\"", \""Select value1 from testUpdate Where id=3\"");"",""\t\tassertRowCount( 10, \""Select * from testUpdate\"");"",""\t\t"",""\t\tst.execute(\""update testUpdate set value1=10400 Where id=3\"");"",""\t\tassertEqualsRsValue( \""10400\"", \""Select value1 from testUpdate Where id=3\"");"",""\t\tassertRowCount( 10, \""Select * from testUpdate\"");"",""\t\t"",""\t\tst.execute(\""update testUpdate set value1=13,id=3 Where id=3\"");"",""\t\tassertEqualsRsValue( \""13\"", \""Select value1 from testUpdate Where id=3\"");"",""\t\tassertRowCount( 10, \""Select * from testUpdate\"");"",""\t\t"",""\t\tst.execute(\""delete from testUpdate Where id=3\"");"",""\t\tassertRowCount( 9, \""Select * from testUpdate\"");"","""",""\t\tdropTable(con,\""testUpdate\"");"",""\t}""]"
/smallsql/database/SSCallableStatement/getShort(int),"[""public short getShort(int i) throws SQLException {"",""        return (byte)getInt( i );"",""    }""]"
/smallsql/database/SSStatement/getGeneratedKeys(),"[""final public ResultSet getGeneratedKeys() throws SQLException{"",""        if(generatedKeys == null)"",""            throw SmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);"",""        return generatedKeys;"",""    }""]"
/smallsql/database/ExpressionFunctionRTrim/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.RTRIM;"",""\t}""]"
/smallsql/database/SSResultSet/getWarnings(),"[""public SQLWarning getWarnings(){"",""        return null;"",""    }""]"
/smallsql/database/MutableInteger/toString(),"[""public String toString(){"",""\t\treturn String.valueOf(value);"",""\t}""]"
/smallsql/database/ExpressionArithmetic/createUnspportedDataType(),"[""SQLException createUnspportedDataType(){"",""    \tObject[] params = {"",""    \t\t\tSQLTokenizer.getKeyWord(getDataType(left, right)),"",""    \t\t\tgetKeywordFromOperation(operation)"",""    \t};"",""        return SmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER, params);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsDataDefinitionAndDataManipulationTransactions(),"[""public boolean supportsDataDefinitionAndDataManipulationTransactions() {"",""    \treturn true;"",""    }""]"
"/smallsql/database/View/drop(smallsql.database.Database,java.lang.String)","[""/**"",""\t * Drop the View. This method is static that the file does not need to load and also corrupt files can be dropped."",""\t */ "",""\tstatic void drop(Database database, String name) throws Exception{"",""\t\tFile file = new File( Utils.createTableViewFileName( database, name ) );"",""\t\tboolean ok = file.delete();"",""\t\tif(!ok) throw SmallSQLException.create(Language.VIEW_CANTDROP, name);"",""\t}""]"
/smallsql/database/DataSource/getMoney(int),"[""abstract long getMoney( int colIdx ) throws Exception;""]"
/smallsql/database/SSDatabaseMetaData/supportsSelectForUpdate(),"[""public boolean supportsSelectForUpdate() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/MutableNumeric/MutableNumeric(smallsql.database.MutableNumeric),"[""MutableNumeric(MutableNumeric numeric){"",""\t\tthis.signum = numeric.signum;"",""\t\tthis.value  = new int[numeric.value.length];"",""\t\tSystem.arraycopy(numeric.value, 0, value, 0, value.length);"",""\t\tthis.scale  = numeric.scale;"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getDouble(),"[""double getDouble() throws Exception {"",""\t\treturn getInt();"",""\t}""]"
/smallsql/database/SSStatement/clearBatch(),"[""public void clearBatch() throws SQLException{"",""        checkStatement();"",""        if(batches == null)"",""            return;"",""        batches.clear();"",""    }""]"
/smallsql/junit/TestOrderBy/testOrderBy_ScollableDesc(),"[""public void testOrderBy_ScollableDesc() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""\t\tResultSet rs;"",""\t\tint count;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by i desc, d\"");"",""\t\t"",""\t\t//jetzt irgendwo in die Mitte scrollen"",""\t\trs.next();"",""\t\trs.next();"",""\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen"",""\t\t"",""\t\trs.last();"",""\t\tcount = 0;"",""\t\twhile(rs.previous()) count++;\t\t"",""\t\tassertEquals( valueCount, count );"","""",""\t\trs.beforeFirst();"",""\t\tcount = -1;"",""\t\twhile(rs.next()) count++;\t\t"",""\t\tassertEquals( valueCount, count );"","""",""\t\trs.beforeFirst();"",""\t\tcount = -1;"",""\t\twhile(rs.next()) count++;\t\t"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/Join/rowInserted(),"[""final boolean rowInserted(){"",""\t\treturn left.rowInserted() || right.rowInserted();"",""\t}""]"
/smallsql/database/ExpressionFunctionIIF/getScale(),"[""final int getScale(){"",""\t\treturn Math.max( param2.getScale(), param3.getScale() );"",""\t}""]"
/smallsql/database/MutableDouble/floatValue(),"[""public float floatValue() {"",""\t\treturn (float)value;"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getString(),"[""String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn String.valueOf(getInt());"",""\t}""]"
/smallsql/database/Where/setRowPosition(long),"[""final void setRowPosition(long rowPosition) throws Exception {"",""\t\trowSource.setRowPosition(rowPosition);"",""\t}""]"
/smallsql/database/Utils/money2int(long),"[""static int money2int( long value ) {"",""\t\tif (value \< Integer.MIN_VALUE) return Integer.MIN_VALUE;"",""\t\telse if (value \> Integer.MAX_VALUE) return Integer.MAX_VALUE;"",""\t\telse return (int) value;"",""\t}""]"
"/smallsql/database/CommandCreateDatabase/CommandCreateDatabase(smallsql.database.Logger,java.lang.String)","[""CommandCreateDatabase( Logger log, String name ){"",""    \tsuper(log);"",""        this.type = SQLTokenizer.DATABASE;"",""        if(name.startsWith(\""file:\""))"",""            name = name.substring(5);"",""        this.name = name;"",""    }""]"
"/smallsql/database/IndexNode/createIndexNode(boolean,char)","[""/**"",""     * Create a new Node in the Index. This is a factory method "",""     * that must be overridden from extended classes."",""     * @param unique descript if it is an unique index (primary key) or a multi value index is."",""     */"",""    protected IndexNode createIndexNode(boolean unique, char digit){"",""        return new IndexNode(unique, digit);"",""    }""]"
/smallsql/database/UnionAll/getNumeric(int),"[""final MutableNumeric getNumeric(int colIdx) throws Exception {"",""\t\treturn currentDS.getNumeric(colIdx);"",""\t}""]"
/smallsql/database/View/createColumns(smallsql.database.SSConnection),"[""private void createColumns(SSConnection con) throws Exception{"",""\t\tcommandSelect.compile(con);"",""\t\tExpressions exprs = commandSelect.columnExpressions;"",""\t\tfor(int c=0; c\<exprs.size(); c++){"",""\t\t\tExpression expr = exprs.get(c);"",""\t\t\tif(expr instanceof ExpressionName){"",""\t\t\t\tColumn column = ((ExpressionName)expr).getColumn().copy();"",""\t\t\t\tcolumn.setName( expr.getAlias() );"",""\t\t\t\tcolumns.add( column );"",""\t\t\t}else{"",""\t\t\t\tcolumns.add( new ColumnExpression(expr));"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getMaxColumnsInIndex(),"[""public int getMaxColumnsInIndex() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/UnionAll/init(smallsql.database.SSConnection),"[""boolean init(SSConnection con) throws Exception{"",""\t\tboolean result = false;"",""\t\tint colCount = -1;"",""\t\tfor(int i=0; i\<dataSources.size(); i++){"",""\t\t\tDataSource ds = dataSources.get(i);"",""\t\t\tresult |= ds.init(con);"",""\t\t\tint nextColCount = ds.getTableView().columns.size();"",""\t\t\tif(colCount == -1)"",""\t\t\t\tcolCount = nextColCount;"",""\t\t\telse"",""\t\t\t\tif(colCount != nextColCount)"",""\t\t\t\t\tthrow SmallSQLException.create(Language.UNION_DIFFERENT_COLS, new Object[] { new Integer(colCount), new Integer(nextColCount)});"",""\t\t}\t"",""\t\treturn result;"",""\t}""]"
/smallsql/junit/TestDBMetaData/testGetCatalogs(),"[""public void testGetCatalogs() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{"",""\t\t\tcon.createStatement().execute(\""drop database test2\\n\\r\\t\"");"",""\t\t}catch(SQLException e){/* ignore it if the database already exists */}"",""\t\tcon.createStatement().execute(\""create database test2\"");"",""\t\tDatabaseMetaData md = con.getMetaData();"",""\t\tResultSet rs = md.getCatalogs();"",""\t\tassertRSMetaData( rs, new String[]{\""TABLE_CAT\""}, new int[]{Types.VARCHAR});"",""\t\twhile(rs.next()){"",""\t\t\tSystem.out.println( \""testCatalogs:\""+rs.getObject(1) );"",""\t\t}"",""\t}""]"
/smallsql/database/Scrollable/execute(),"[""void execute() throws Exception{"",""\t\trowSource.execute();"",""\t\trowList.clear();"",""\t\trowIdx = -1;"",""\t}""]"
/smallsql/database/SmallSQLException/printStackTrace(),"[""public void printStackTrace(){"",""\t\tif(!isInit) return;"",""\t\tsuper.printStackTrace();"",""\t}""]"
/smallsql/database/ExpressionArithmetic/getDataType(),"[""int getDataType() {"",""        switch(operation){"",""            case NEGATIVE:"",""            case BIT_NOT:"",""            \treturn left.getDataType();"",""\t\t\tcase EQUALS:"",""\t\t\tcase EQUALS_NULL:"",""\t\t\tcase GREATER:"",""\t\t\tcase GRE_EQU:"",""\t\t\tcase LESSER:"",""\t\t\tcase LES_EQU:"",""\t\t\tcase UNEQUALS:"",""\t\t\tcase BETWEEN:"",""\t\t\tcase OR:"",""\t\t\tcase AND:"",""\t\t\tcase NOT:"",""\t\t\tcase LIKE:"",""\t\t\tcase ISNULL:"",""\t\t\tcase ISNOTNULL:"",""\t\t\t \treturn SQLTokenizer.BOOLEAN;"",""            default:"",""            \treturn getDataType(left, right);"",""        }"",""    }""]"
/smallsql/database/DateTime/valueOf(java.sql.Time),"[""static DateTime valueOf(java.sql.Time date){"",""\t\tif(date == null) return null;"",""\t\treturn new DateTime( parse(date), SQLTokenizer.TIME);"",""\t}""]"
/smallsql/database/Expression/equals(java.lang.Object),"[""/**"",""\t * Is used in GroupResult."",""\t */"",""\tpublic boolean equals(Object expr){"",""\t\tif(!(expr instanceof Expression)) return false;"",""\t\tif( ((Expression)expr).type == type){"",""\t\t\t"",""\t\t\tExpression[] p1 = ((Expression)expr).params;"",""\t\t\tExpression[] p2 = params;"",""\t\t\tif(p1 != null && p2 != null){"",""\t\t\t\tif(p1 == null) return false;"",""\t\t\t\tfor(int i=0; i\<p1.length; i++){"",""\t\t\t\t\tif(!p2[i].equals(p1[i])) return false;"",""\t\t\t\t}"",""\t\t\t}"",""\t\t\tString name1 = ((Expression)expr).name;"",""\t\t\tString name2 = name;"",""\t\t\tif(name1 == name2) return true;"",""\t\t\tif(name1 == null) return false;"",""\t\t\tif(name1.equalsIgnoreCase(name2)) return true;"",""\t\t}"",""\t\treturn false;"",""\t}""]"
/smallsql/database/ExpressionFunctionReplace/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.REPLACE;"",""\t}""]"
/smallsql/database/SSResultSet/getLong(java.lang.String),"[""public long getLong(String columnName) throws SQLException {"",""        return getLong( findColumn( columnName ) );"",""    }""]"
/smallsql/database/LongTreeList/writeShort(int),"[""/**"",""\t * Save a short value in the index. The long values are saved in 4 short values-"",""\t * @param value"",""\t */"",""\tfinal private void writeShort(int value){"",""\t\tdata[offset++] = (byte)(value \>\> 8);"",""\t\tdata[offset++] = (byte)(value);"",""\t}""]"
"/smallsql/database/MutableNumeric/add(int,int[])","[""private void add( int sig2, int[] val2){"",""        if(val2.length \> value.length){"",""            int[] temp = val2;"",""            val2 = value;"",""            value = temp;"",""            int tempi = signum;"",""            signum = sig2;"",""            sig2 = tempi;"",""        }"",""        if(signum != sig2)"",""            sub(val2);"",""        else"",""            add(val2);"",""    }""]"
/smallsql/database/RowSource/next(),"[""abstract boolean next() throws Exception;""]"
/smallsql/database/SSCallableStatement/getFloat(int),"[""public float getFloat(int i) throws SQLException {"",""        try{"",""            Expression expr = getValue(i);"",""            wasNull = expr.isNull();"",""            return expr.getFloat();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SSResultSetMetaData/getTableName(int),"[""public String getTableName(int column) throws SQLException {"",""        return getColumnExpression( column ).getTableName();"",""    }""]"
/smallsql/database/SSConnection/SSConnection(java.util.Properties),"[""SSConnection( Properties props ) throws SQLException{"",""    \tSmallSQLException.setLanguage(props.get(\""locale\""));"",""        log = new Logger();"",""        String name = props.getProperty(\""dbpath\"");"",""        readonly = \""true\"".equals(props.getProperty(\""readonly\""));"",""        boolean create = \""true\"".equals(props.getProperty(\""create\""));"",""        database = Database.getDatabase(name, this, create);"",""\t\tmetadata = new SSDatabaseMetaData(this);"",""    }""]"
/smallsql/junit/TestResultSet/testOther(),"[""public void testOther() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        ResultSet rs = st.executeQuery(\""Select * From ResultSet\"");"",""        "",""        assertEquals(st, rs.getStatement());"",""        "",""        //currently there are no known warnings"",""        rs.clearWarnings();"",""        assertNull(rs.getWarnings());"",""        "",""        rs.setFetchDirection(ResultSet.FETCH_FORWARD);"",""        assertEquals( rs.getFetchDirection(), ResultSet.FETCH_FORWARD);"","""",""        rs.setFetchDirection(ResultSet.FETCH_REVERSE);"",""        assertEquals( rs.getFetchDirection(), ResultSet.FETCH_REVERSE);"",""        "",""        rs.setFetchSize(123);"",""        assertEquals( rs.getFetchSize(), 123);"",""    }""]"
/smallsql/junit/TestOperatoren/main(java.lang.String[]),"[""public static void main(String[] argv) {"",""        junit.swingui.TestRunner.main(new String[]{TestOperatoren.class.getName()});"",""    }""]"
/smallsql/database/LongLongList/get1(int),"[""final long get1(int idx){"",""\t\tif (idx \>= size)"",""\t\t\tthrow new IndexOutOfBoundsException(\""Index: \""+idx+\"", Size: \""+size);"",""\t\treturn data[idx \<\< 1];"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnP1Number/getLong(),"[""final long getLong() throws Exception{"",""        return Utils.double2long(getDouble());"",""    }""]"
/smallsql/database/SSConnection/setCatalog(java.lang.String),"[""public void setCatalog(String catalog) throws SQLException {"",""        testClosedConnection();"",""        database = Database.getDatabase(catalog, this, false);"",""    }""]"
/smallsql/database/IndexNode/getChildNode(char),"[""/**"",""\t * Returns the IndexNode for the node position digit."",""\t * @param digit The digit must be in the range 0 between 255. "",""\t */"",""\tfinal IndexNode getChildNode(char digit){"",""\t\tint pos = findNodePos(digit);"",""\t\tif(pos \>=0) return nodes[pos];"",""\t\treturn null;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsOpenCursorsAcrossRollback(),"[""public boolean supportsOpenCursorsAcrossRollback() {"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionName/getNumeric(),"[""MutableNumeric getNumeric() throws Exception{"",""        return fromEntry.getNumeric(colIdx);"",""    }""]"
"/smallsql/database/SSStatement/execute(java.lang.String,java.lang.String[])","[""final public boolean execute(String sql, String[] columnNames) throws SQLException{"",""        setNeedGeneratedKeys(columnNames);"",""        return execute(sql);"",""    }""]"
/smallsql/database/ExpressionFunctionCase/getScale(),"[""final int getScale(){"",""\t\tint precision = 0;"",""\t\tfor(int i=results.size()-1; i\>=0; i--){"",""\t\t\tprecision = Math.max(precision, results.get(i).getScale());"",""\t\t}"",""\t\treturn precision;"",""\t}""]"
/smallsql/junit/TestTokenizer/tearDown(),"[""public void tearDown() throws SQLException {"",""\t\tif (conn != null) {"",""\t\t\tdropTable();"",""\t\t\tstat.close(); "",""\t\t\tconn.close();"",""\t\t}"",""\t}""]"
"/smallsql/junit/TestExceptions/a(java.lang.String,int,int,java.lang.String)","[""private static TestValue a(String sqlstate, int errorCode, int errorType, String sql ){"",""        TestValue value = new TestValue();"",""        value.sql       = sql;"",""        value.sqlstate  = sqlstate;"",""        value.errorCode = errorCode;"",""        value.errorType = errorType;"",""        return value;"",""    }""]"
"/smallsql/database/Table/getStore(smallsql.database.SSConnection,long,int)","[""StoreImpl getStore( SSConnection con, long filePos, int pageOperation ) throws Exception{"",""\t\tTableStorePage storePage = requestLock( con, pageOperation, filePos );"",""        return StoreImpl.createStore( this, storePage, pageOperation, filePos );"",""    }""]"
"/smallsql/database/Database/Database(java.lang.String,java.io.File,boolean)","[""/**"",""     * Create a instance of a Database"",""     * @param name is used for getCatalog()"",""     * @param canonicalFile the directory that is already canonical"",""     * @param readonly open database in read only mode"",""     * @throws SQLException If can\'t open"",""     */"",""    private Database( String name, File canonicalFile, boolean readonly ) throws SQLException{"",""        try{"",""\t        this.name = name;"",""\t        this.readonly = readonly;"",""\t\t\tdirectory = canonicalFile;"",""\t\t\tif(!directory.isDirectory()){"",""                throw SmallSQLException.create(Language.DB_NONEXISTENT, name);"",""            }"",""\t\t\tFile file = new File( directory, Utils.MASTER_FILENAME);"",""\t\t\tif(!file.exists())"",""\t\t\t\tthrow SmallSQLException.create(Language.DB_NOT_DIRECTORY, name);"",""\t\t\tmaster = Utils.openRaFile( file, readonly );"",""        }catch(Exception e){"",""        \tthrow SmallSQLException.createFromException(e);"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/doesMaxRowSizeIncludeBlobs(),"[""public boolean doesMaxRowSizeIncludeBlobs() {"",""    \treturn false;"",""    }""]"
/smallsql/database/ForeignKeys/add(smallsql.database.ForeignKey),"[""final void add(ForeignKey foreignKey){"",""\t\tif(size \>= data.length ){"",""\t\t\tresize(size \<\< 1);"",""\t\t}"",""\t\tdata[size++] = foreignKey;"",""\t}""]"
/smallsql/database/ViewResult/last(),"[""boolean last() throws Exception{"",""\t\treturn commandSelect.last();"",""\t}""]"
/smallsql/database/ExpressionFunctionRand/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(getParams().length == 0)"",""\t\t\treturn random.nextDouble();"",""\t\tif(isNull()) return 0;"",""\t\treturn new Random(param1.getLong()).nextDouble(); "",""    }""]"
/smallsql/junit/TestScrollable/testUpdatable(),"[""public void testUpdatable() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{            "",""            con.createStatement().execute(\""Create Table Scrollable (i int Identity primary key, v varchar(20))\"");"",""            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"","""",""            for(int row = 1; row \< 4; row++){"",""                testUpdatableAssert( con, st.executeQuery(\""Select * from Scrollable\""), row );"",""                testUpdatableAssert( con, st.executeQuery(\""Select * from Scrollable Order By i\""), row );"",""                testUpdatableAssert( con, st.executeQuery(\""Select * from Scrollable Where 1 = 1\""), row );"",""                testUpdatableAssert( con, st.executeQuery(\""Select * from Scrollable Where 1 = 1 Order By i\""), row );"",""                con.createStatement().execute(\""Insert Into Scrollable(v) Values(\'qwert\"" +row + \""\')\"");"",""            }"",""        }finally{"",""            dropTable( con, \""Scrollable\"");"",""        }"",""    }""]"
/smallsql/database/StoreImpl/writeInt(int),"[""void writeInt( int value ){"",""    \tint newSize = offset + 4;"",""        if(newSize \> page.length) resizePage(newSize);"","""",""        page[ offset++ ] = (byte)(value \>\> 24);"",""        page[ offset++ ] = (byte)(value \>\> 16);"",""        page[ offset++ ] = (byte)(value \>\> 8);"",""        page[ offset++ ] = (byte)(value);"",""    }""]"
/smallsql/database/SQLParser/delete(),"[""private Command delete() throws SQLException{"",""    \tCommandDelete cmd = new CommandDelete(con.log);"",""    \tnextToken(MISSING_FROM);"",""    \tfrom(cmd);"",""\t\tSQLToken token = nextToken();"",""\t\tif(token != null){"",""\t\t\tif(token.value != SQLTokenizer.WHERE)"",""\t\t\t\tthrow this.createSyntaxError(token, MISSING_WHERE);"",""\t\t\twhere(cmd);"",""\t\t}"",""\t\treturn cmd;"",""    }""]"
/smallsql/database/Database/getName(),"[""String getName(){"",""        return name;"",""    }""]"
/smallsql/database/ExpressionInSelect/isInList(),"[""boolean isInList() throws Exception{"",""\t\tloadInList();"",""\t\treturn index.findRows(getParams(), false, null) != null;"",""\t}""]"
/smallsql/database/Scrollable/relative(int),"[""boolean relative(int rows) throws Exception{"",""\t\tint newRow = rows + rowIdx + 1;"",""\t\tif(newRow \<= 0){"",""\t\t\tbeforeFirst();"",""\t\t\treturn false;"",""\t\t}else{"",""\t\t\treturn absolute(newRow);"",""\t\t}"",""\t}""]"
"/smallsql/database/SSCallableStatement/setObject(java.lang.String,java.lang.Object)","[""public void setObject(String parameterName, Object x) throws SQLException {"",""        setObject( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/SSStatement/executeQuery(java.lang.String),"[""final public ResultSet executeQuery(String sql) throws SQLException{"",""        executeImpl(sql);"",""        return cmd.getQueryResult();"",""    }""]"
/smallsql/database/Join/nullRow(),"[""/**"",""     * By OUTER or FULL JOIN must one rowsource set to null."",""     */"",""    void nullRow(){"",""    \tleft.nullRow();"",""    \tright.nullRow();"",""    \trow = 0;"",""    }""]"
/smallsql/database/NoFromResult/relative(int),"[""final boolean relative(int rows){"",""\t\tif(rows == 0) return rowPos == 1;"",""\t\trowPos = Math.min( Math.max( rowPos + rows, -1), 1);"",""\t\treturn rowPos == 1;"",""\t}""]"
/smallsql/database/TableResult/moveToValidRow(),"[""/**"",""     * Move to the next valid row. A valid row is a normal row or an pointer to an updated row value."",""     * A invalid row is a deleted row or an updated value that is reference by an update pointer. "",""     */"",""    final private boolean moveToValidRow() throws Exception{"",""\t\twhile(filePos \>= 0){"",""        \tif(moveToRow())"",""        \t\treturn true;"",""\t\t\tsetNextFilePos();"",""    \t}"",""        row = 0;"",""    \treturn false;"",""    }""]"
"/smallsql/database/Table/requestWriteLock(smallsql.database.SSConnection,smallsql.database.TableStorePage)","[""/**"",""\t * Request a write lock for a page that is read. It add the resulting StorePage to the list of commits."",""     * @throws SQLException"",""     *             if the connection was closed."",""\t */"",""\tTableStorePage requestWriteLock(SSConnection con, TableStorePage readlock) throws SQLException{"",""\t\tif(readlock.lockType == LOCK_INSERT){"",""\t\t\tTableStorePage lock = new TableStorePage( con, this, LOCK_INSERT, -1);"",""\t\t\treadlock.nextLock = lock;"",""\t\t\tcon.add(lock);"",""\t\t\treturn lock;\t\t\t\t\t\t\t\t\t"",""\t\t}"",""\t\tLong pageKey = new Long(readlock.fileOffset); //TODO performance"",""\t\tTableStorePage prevLock = null;"",""\t\tTableStorePage lock = (TableStorePage)locks.get( pageKey );"",""\t\twhile(lock != null){"",""\t\t\tif(lock.con != con) return null; // there is already any lock from another connection, we can not start write"",""\t\t\tif(lock.lockType \< LOCK_WRITE){"",""\t\t\t\t// if there is only a read lock we can transfer it"",""\t\t\t\t// this is required for rollback to a savepoint"",""\t\t\t\tlock.lockType = LOCK_WRITE;"",""\t\t\t\treturn lock;"",""\t\t\t}"",""\t\t\tprevLock = lock;"",""\t\t\tlock = lock.nextLock;"",""\t\t}"",""\t\tlock = new TableStorePage( con, this, LOCK_WRITE, readlock.fileOffset);"",""\t\tif(prevLock != null){"",""\t\t    prevLock.nextLock = lock;"",""\t\t} else {"",""\t\t    locks.put( pageKey, lock );"",""\t\t}"",""\t\tcon.add(lock);"",""\t\treturn lock;\t\t\t\t\t\t\t\t\t"",""\t}""]"
"/smallsql/database/SSResultSet/updateDate(java.lang.String,java.sql.Date)","[""public void updateDate(String columnName, Date x) throws SQLException {"",""        updateDate( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/ExpressionName/getDataType(),"[""int getDataType(){"",""\t\tswitch(getType()){"",""\t\t\tcase NAME:"",""\t\t\tcase GROUP_BY:"",""\t\t\t\treturn fromEntry.getDataType(colIdx);"",""\t\t\tcase FIRST:"",""\t\t\tcase LAST:"",""\t\t\tcase MAX:"",""\t\t\tcase MIN:"",""\t\t\tcase SUM:"",""\t\t\t\treturn getParams()[0].getDataType();"",""\t\t\tcase COUNT:"",""\t\t\t\treturn SQLTokenizer.INT;"",""\t\t\tdefault: throw new Error();"",""\t\t}"",""    }""]"
/smallsql/database/CommandUpdate/CommandUpdate(smallsql.database.Logger),"[""CommandUpdate( Logger log ){"",""\t\tsuper(log);"",""\t}""]"
/smallsql/database/ExpressionFunctionMinute/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(param1.isNull()) return 0;"",""\t\tDateTime.Details details = new DateTime.Details(param1.getLong());"",""\t\treturn details.minute;"",""\t}""]"
/smallsql/junit/TestLanguage/testLocalizedErrors(),"[""public void testLocalizedErrors() throws Exception {"",""\t\tConnection conn = AllTests.createConnection(\""?locale=it\"", null);"",""\t\tStatement stat = conn.createStatement();"",""\t\t"",""\t\ttry {"",""\t\t\ttry {"",""\t\t\t\trecreateTestTab(stat);"",""\t"",""\t\t\t\tstat.execute(\""CREATE TABLE \"" + TABLE_NAME + \"" (id_test INT)\"");"",""\t\t\t\tfail();"",""\t\t\t}"",""\t\t\tcatch(SQLException e) {"",""\t\t\t\tassertMessage(e, \""La tabella/vista \'\"" + TABLE_NAME + \""\' è già esistente.\"");"",""\t\t\t}"",""\t\t\t"",""\t\t\ttry {"",""\t\t\t\tstat.execute(\""DROP TABLE \"" + TABLE_NAME);"",""\t\t\t\tstat.execute(\""DROP TABLE \"" + TABLE_NAME);"",""\t\t\t}"",""\t\t\tcatch (SQLException e) {"",""\t\t\t\tassertMessage(e, \""Non si può effettuare DROP della tabella\"");"",""\t\t\t}"",""\t\t\t"",""\t\t\ttry {"",""\t\t\t\tstat.execute(\""CREATE TABLE foo\"");"",""\t\t\t}"",""\t\t\tcatch (SQLException e) {"",""\t\t\t\tassertMessage(e, \""Errore di sintassi, fine inattesa\"");"",""\t\t\t}"",""\t\t}"",""\t\tfinally {"",""\t\t\tconn.close();"",""\t\t}"",""\t}""]"
/smallsql/database/language/Language/addMessages(java.lang.String[][]),"[""/**"",""\t * Add entries to message map.\<br\>"",""\t * If duplicates entries are found the adding entries, an exception is"",""\t * thrown."",""\t * "",""\t * @param entries"",""\t *            adding language entries."",""\t * @throws IllegalArgumentException"",""\t *             if duplicate entry is found."",""\t */"",""\tprotected final void addMessages(String[][] entries) "",""\tthrows IllegalArgumentException {"",""\t\tSet inserted = new HashSet(); // for duplicates checking"",""\t\t"",""\t\tfor (int i = 0; i \< entries.length; i++) {"",""\t\t\tString key = entries[i][0];"",""\t\t\t"",""\t\t\tif (! inserted.add(key)) {"",""\t\t\t\tthrow new IllegalArgumentException(\""Duplicate key: \"" + key);"",""\t\t\t}"",""\t\t\telse {"",""\t\t\t\tString value = entries[i][1];"",""\t\t\t\tmessages.put(key, value);"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionFunctionLCase/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn param1.getString().toLowerCase();"",""\t}""]"
/smallsql/database/ExpressionFunctionSoundex/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull();"",""\t}""]"
/smallsql/database/MutableNumeric/toByteArray(),"[""/**"",""     * Convert this number in a 2 complement that can be used from BigInteger."",""     * The length is ever a multiple of 4"",""     * @return the 2 complement of this object"",""     */"",""    byte[] toByteArray(){"",""        if(signum == 0) return EMPTY_BYTES;"",""        byte[] complement;"",""        int offset;"","""",""        int v = 0;"",""        while(v \< value.length && value[v] == 0) v++;"",""        if (v == value.length) return EMPTY_BYTES;"","""",""        if(value[v] \< 0){"",""            // If the highest bit is set then it must resize"",""            // because this bit is needed for the signum"",""            complement = new byte[(value.length-v)*4 + 4];"",""            if(signum \< 0)"",""                complement[0] = complement[1] = complement[2] = complement[3] = -1;"",""            offset = 4;"",""        }else{"",""            complement = new byte[(value.length-v)*4];"",""            offset = 0;"",""        }"",""        int last = value.length-1;"",""        for(; v \<= last; v++){"",""            int val = (signum\>0) ? value[v] : (v == last) ? -value[v] : ~value[v];"",""            complement[offset++] = (byte)(val \>\> 24);"",""            complement[offset++] = (byte)(val \>\> 16);"",""            complement[offset++] = (byte)(val \>\> 8);"",""            complement[offset++] = (byte)(val);"",""        }"",""        return complement;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getSQLStateType(),"[""public int getSQLStateType() {"",""\t\treturn sqlStateSQL99;"",""    }""]"
/smallsql/database/ViewResult/getFloat(int),"[""float getFloat(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getFloat();"",""\t}""]"
"/smallsql/database/SSCallableStatement/registerOutParameter(java.lang.String,int)","[""public void registerOutParameter(String parameterName, int sqlType) throws SQLException {"",""        registerOutParameter( findParameter( parameterName ), sqlType );"",""    }""]"
/smallsql/database/StorePageMap/size(),"[""/**"",""\t * Returns the number of key-value mappings in this map."",""\t *"",""\t * @return the number of key-value mappings in this map."",""\t */"",""\tfinal int size() {"",""\t\treturn size;"",""\t}""]"
/smallsql/database/ExpressionFunctionRight/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\tString str = param1.getString();"",""\t\tint length  = param2.getInt();"",""\t\tint start = str.length() - Math.min( length, str.length() );"",""\t\treturn str.substring(start);"",""\t}""]"
/smallsql/database/Join/rowDeleted(),"[""final boolean rowDeleted(){"",""\t\treturn left.rowDeleted() || right.rowDeleted();"",""\t}""]"
/smallsql/database/Distinct/isScrollable(),"[""final boolean isScrollable() {"",""\t\treturn false;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsDifferentTableCorrelationNames(),"[""public boolean supportsDifferentTableCorrelationNames() {"",""    \treturn true;"",""    }""]"
/smallsql/database/TableResult/getInt(int),"[""@Override"",""    final int getInt( int colIdx ) throws Exception{"",""        return store.getInt( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/database/TableResult/TableResult(smallsql.database.Table),"[""TableResult(Table table){"",""\t\tthis.table = table;"",""\t}""]"
/smallsql/database/MutableFloat/getImmutableObject(),"[""public Object getImmutableObject(){"",""\t\treturn new Float(value);"",""\t}""]"
/smallsql/database/ExpressionFunctionMod/isNull(),"[""boolean isNull() throws Exception{"",""        return param1.isNull() || param2.isNull();"",""    }""]"
/smallsql/database/SSResultSet/getBlob(java.lang.String),"[""public Blob getBlob(String columnName) throws SQLException {"",""        return getBlob( findColumn( columnName ) );"",""    }""]"
/smallsql/database/StoreNoCurrentRow/noCurrentRow(),"[""private SQLException noCurrentRow(){"",""\t\treturn SmallSQLException.create(Language.ROW_NOCURRENT);"",""\t}""]"
/smallsql/database/SSResultSet/getCmd(),"[""final private CommandSelect getCmd() throws SQLException {"",""\t\tif(cmd == null){"",""            throw SmallSQLException.create(Language.RSET_CLOSED);"",""        }"",""        st.con.testClosedConnection();"",""\t\treturn cmd;"",""\t}""]"
/smallsql/database/NoFromResult/execute(),"[""final void execute() throws Exception{/* can be empty, nothing to do */}""]"
/smallsql/database/IndexDescription/load(smallsql.database.Database),"[""private void load(Database database) throws SQLException{"",""        try{"",""            File file = getFile( database, name );"",""            if(!file.exists())"",""                throw SmallSQLException.create(Language.INDEX_MISSING, name);"",""            raFile = Utils.openRaFile( file, database.isReadOnly() );"",""            ByteBuffer buffer = ByteBuffer.allocate(8);"",""            raFile.read(buffer);"",""            buffer.position(0);"",""            int magic   = buffer.getInt();"",""            int version = buffer.getInt();"",""            if(magic != MAGIC_INDEX){"",""                throw SmallSQLException.create(Language.INDEX_FILE_INVALID, file.getName());"",""            }"",""            if(version \> INDEX_VERSION){"",""            \tObject[] params = { new Integer(version), file.getName() };"",""                throw SmallSQLException.create(Language.FILE_TOONEW, params);"",""            }"",""        }catch(Throwable e){"",""            if(raFile != null)"",""                try{"",""                    raFile.close();"",""                }catch(Exception e2){"",""                    DriverManager.println(e2.toString());"",""                }"",""            throw SmallSQLException.createFromException(e);"",""        }"",""    }""]"
/smallsql/database/StoreImpl/readBoolean(),"[""boolean readBoolean(){"",""        return page[ offset++ ] != 0;"",""    }""]"
/smallsql/database/Expressions/toArray(smallsql.database.Expression[]),"[""final void toArray(Expression[] array){"",""\t\tSystem.arraycopy( data, 0, array, 0, size);"",""\t}""]"
/smallsql/database/IndexDescription/writeMagic(java.nio.channels.FileChannel),"[""private final void writeMagic(FileChannel raFile) throws Exception{"",""\t    ByteBuffer buffer = ByteBuffer.allocate(8);"",""\t    buffer.putInt(MAGIC_INDEX);"",""\t    buffer.putInt(INDEX_VERSION);"",""\t    buffer.position(0);"",""\t    raFile.write(buffer);"",""\t}""]"
"/smallsql/database/SSDriver/getPropertyInfo(java.lang.String,java.util.Properties)","[""public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)"",""    throws SQLException {"",""        Properties props = parse(url, info);"",""        DriverPropertyInfo[] driverInfos = new DriverPropertyInfo[1];"",""        driverInfos[0] = new DriverPropertyInfo(\""dbpath\"", props.getProperty(\""dbpath\""));"",""        return driverInfos;"",""    }""]"
/smallsql/database/ExpressionArithmetic/getNumeric(),"[""MutableNumeric getNumeric() throws java.lang.Exception {"",""        if(isNull()) return null;"",""        int dataType = getDataType();\t\t"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""\t\t\t\treturn new MutableNumeric(getBoolean() ? 1 : 0);"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""\t\t\t\treturn new MutableNumeric(getIntImpl());"",""            case SQLTokenizer.BIGINT:"",""                return new MutableNumeric(getLongImpl());"",""\t\t\tcase SQLTokenizer.REAL:"",""                return new MutableNumeric(getFloatImpl());"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""                return new MutableNumeric( getDoubleImpl() );"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                return getNumericImpl();"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""\t\t\t\treturn new MutableNumeric(getMoneyImpl(),4);"",""        }"",""\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);"",""    }""]"
/smallsql/database/SSResultSet/getRow(),"[""public int getRow() throws SQLException {"",""\t\ttry{"",""\t\t\treturn getCmd().getRow();"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionFunctionTruncate/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""\t\tfinal int places = param2.getInt();"",""\t\tdouble value = param1.getDouble();"",""\t\tlong factor = 1;"",""\t\tif(places \> 0){"",""\t\t\tfor(int i=0; i\<places; i++){"",""\t\t\t\tfactor *= 10;"",""\t\t\t}"",""\t\t\tvalue *= factor;"",""\t\t}else{"",""\t\t\tfor(int i=0; i\>places; i--){"",""\t\t\t\tfactor *= 10;"",""\t\t\t}"",""\t\t\tvalue /= factor;"",""\t\t}"",""        value -= value % 1; //modulo also work with values larger long"",""\t\tif(places \> 0){"",""\t\t\tvalue /= factor;"",""\t\t}else{"",""\t\t\tvalue *= factor;"",""\t\t}"",""\t\treturn value;"",""    }""]"
/smallsql/database/ExpressionFunctionCase/getBytes(),"[""final byte[] getBytes() throws Exception{"",""\t\treturn getResult().getBytes();"",""\t}""]"
"/smallsql/database/SSResultSet/updateClob(java.lang.String,java.sql.Clob)","[""public void updateClob(String columnName, Clob x) throws SQLException {"",""        updateClob( findColumn( columnName ), x );"",""    }""]"
"/smallsql/database/SSResultSet/updateBlob(java.lang.String,java.sql.Blob)","[""public void updateBlob(String columnName, Blob x) throws SQLException {"",""        updateBlob( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/ExpressionArithmetic/getKeywordFromOperation(int),"[""/**"",""     * This method only for creating an error message. Thats there is no optimizing."",""     * @param value"",""     * @return"",""     */"",""    private static String getKeywordFromOperation(int operation){"",""    \tint token = 0;"",""    \tfor(int i=1; i\<1000; i++){"",""    \t\tif(getOperationFromToken(i) == operation){"",""\t\t\t\ttoken = i;"",""\t\t\t\tbreak;"",""    \t\t}"",""    \t}"",""    \tif(operation == NEGATIVE)  token = SQLTokenizer.MINUS;"",""    \tif(operation == ISNOTNULL) token =  SQLTokenizer.IS;"",""    \tString keyword = SQLTokenizer.getKeyWord(token);"",""    \tif(keyword == null) keyword = \""\"" + (char)token;"",""    \treturn keyword;"",""    }""]"
/smallsql/database/Strings/size(),"[""final int size(){"",""\t\treturn size;"",""\t}""]"
/smallsql/database/SQLParser/nextToken(),"[""private SQLToken nextToken(){"",""        if(tokenIdx \>= tokens.size()){"",""            tokenIdx++; // must be ever increment that the method previousToken() is working"",""            return null;"",""        }"",""        return (SQLToken)tokens.get( tokenIdx++ );"",""    }""]"
/smallsql/database/SSStatement/getResultSetConcurrency(),"[""final public int getResultSetConcurrency() throws SQLException{"",""        checkStatement();"",""        return rsConcurrency;"",""    }""]"
/smallsql/junit/TestScrollable/testPreviousWithWhereAssert(java.sql.ResultSet),"[""private void testPreviousWithWhereAssert(ResultSet rs) throws Exception{"",""        assertTrue( rs.isBeforeFirst() );"",""        assertTrue( rs.isAfterLast() );"",""        rs.afterLast();"",""        assertTrue( rs.isAfterLast() );"",""        assertFalse(\""There should be no rows:\"", rs.previous());"",""        try{"",""            rs.getString(\""v\"");"",""            fail(\""SQLException \'No current row\' should be throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""01000\"", 0, ex);"",""        }"",""    }""]"
"/smallsql/database/SSPreparedStatement/setUnicodeStream(int,java.io.InputStream,int)","[""public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setUnicodeStream() not yet implemented.\"");"",""    }""]"
/smallsql/database/ExpressionName/getTable(),"[""/**"",""\t * Get the table of this column"",""\t * @return"",""\t */"",""\tfinal TableView getTable(){"",""\t\treturn table;"",""\t}""]"
/smallsql/database/DataSource/getAlias(),"[""String getAlias(){return null;}""]"
"/smallsql/database/ExpressionArithmetic/setParamAt(smallsql.database.Expression,int)","[""final void setParamAt( Expression param, int idx){"",""\t\tswitch(idx){"",""\t\t\tcase 0:"",""\t\t\t\tleft = param;"",""\t\t\t\tbreak;"",""\t\t\tcase 1:"",""                if(right != null){"",""                    right = param;"",""                }"",""\t\t\t\tbreak;"",""\t\t\tcase 2:"",""                if(right != null){"",""                    right2 = param;"",""                }"",""\t\t\t\tbreak;"",""\t\t}"",""\t\tif(inList != null && idx\>0 && idx\<=inList.length){"",""\t\t\tinList[idx-1] = param;"",""\t\t}"",""\t\tsuper.setParamAt( param, idx );"",""\t}""]"
/smallsql/database/SSStatement/clearWarnings(),"[""final public void clearWarnings(){"",""        // TODO support for warnings"",""    }""]"
/smallsql/database/MemoryResult/next(),"[""final boolean next(){"",""\t\trowIdx++;"",""\t\treturn move();"",""\t}""]"
/smallsql/database/ExpressionValue/getDataType(),"[""final int getDataType(){"",""        return dataType;"",""    }""]"
/smallsql/database/ViewResult/previous(),"[""boolean previous() throws Exception{"",""\t\treturn commandSelect.previous();"",""\t}""]"
/smallsql/database/Expression/getDisplaySize(),"[""int getDisplaySize(){"",""\t\treturn SSResultSetMetaData.getDisplaySize(getDataType(), getPrecision(), getScale());"",""\t}""]"
/smallsql/junit/TestGroupBy/testTest(),"[""public void testTest() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\t/*"",""\t\trs = st.executeQuery(\""Select name FROM \"" + table1 + \"" Group By name\"");"",""\t\twhile(rs.next()){"",""\t\t\tSystem.out.println( rs.getObject(1) ); "",""\t\t}*/"",""\t\t"",""\t\trs = st.executeQuery(\""Select count(id) FROM \"" + table1 + \"" Group By name\"");"",""\t\twhile(rs.next()){"",""\t\t\trs.getObject(1);"",""\t\t}"","""",""\t\trs = st.executeQuery(\""Select count(*) FROM \"" + table1 + \"" Group By name\"");"",""\t\twhile(rs.next()){"",""\t\t\trs.getObject(1);"",""\t\t}"","""",""\t\trs = st.executeQuery(\""Select count(*) FROM \"" + table1);"",""\t\tassertTrue(rs.next());"",""\t\tassertEquals( 4, rs.getInt(1));"","""",""\t\trs = st.executeQuery(\""Select count(id) FROM \"" + table1);"",""\t\tassertTrue(rs.next());"",""\t\tassertEquals( 3, rs.getInt(1));"","""",""\t\trs = st.executeQuery(\""Select count(*)+1 FROM \"" + table1);"",""\t\tassertTrue(rs.next());"",""\t\tassertEquals( 5, rs.getInt(1));"",""\t}""]"
/smallsql/junit/TestIdentifer/TestIdentifer(java.lang.String),"[""public TestIdentifer(String arg0) {"",""\t\tsuper(arg0);"",""\t}""]"
/smallsql/database/language/Language/setSqlStates(),"[""/**"",""\t * Add entries to sql states map.\<br\>"",""\t * If duplicates entries are found the adding entries, an exception is"",""\t * thrown."",""\t * "",""\t * @param entries"",""\t *            adding language entries."",""\t * @throws IllegalArgumentException"",""\t *             if duplicate entry is found."",""\t */"",""\tprivate final void setSqlStates() {"",""\t\tSet inserted = new HashSet(); // for duplicates checking"",""\t\t"",""\t\tfor (int i = 0; i \< SQL_STATES.length; i++) {"",""\t\t\tString key = SQL_STATES[i][0];"",""\t\t\t"",""\t\t\tif (! inserted.add(key)) {"",""\t\t\t\tthrow new IllegalArgumentException(\""Duplicate key: \"" + key);"",""\t\t\t}"",""\t\t\telse {"",""\t\t\t\tString value = SQL_STATES[i][1];"",""\t\t\t\tsqlStates.put(key, value);"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/LongTreeList/add(long),"[""/**"",""\t * Add a value to this list."",""\t * @param value"",""\t * @throws SQLException"",""\t */"",""\tfinal void add(long value) throws SQLException{"",""\t\toffset = 0;"",""\t\tif(size == 0){"",""\t\t\twriteShort( (int)(value \>\> 48) );"",""\t\t\twritePointer ( offset+pointerSize+2 );"",""\t\t\twriteShort( 0 );"",""\t\t\twriteShort( (int)(value \>\> 32) );"",""\t\t\twritePointer ( offset+pointerSize+2 );"",""\t\t\twriteShort( 0 );"",""\t\t\twriteShort( (int)(value \>\> 16) );"",""\t\t\twritePointer ( offset+pointerSize+2 );"",""\t\t\twriteShort( 0 );"",""\t\t\twriteShort( (int)(value) );"",""\t\t\twriteShort( 0 );"",""\t\t\tsize = offset;"",""\t\t\treturn;"",""\t\t}"",""\t\tint shift = 48;"",""\t\tboolean firstNode = (size \> 2); // if this the first node in this tree level (0 can be the first node and are the end of the level)"",""\t\twhile(shift\>=0){"",""\t\t\tint octet = (int)(value \>\> shift) & 0xFFFF;"",""\t\t\twhile(true){"",""\t\t\t\tint nextEntry = getUnsignedShort();"",""\t\t\t\tif(nextEntry == octet){"",""\t\t\t\t\tif(shift == 0) return; //value exist already, this case should not occur"",""\t\t\t\t\toffset = getPointer();"",""\t\t\t\t\tfirstNode = true;"",""\t\t\t\t\tbreak;"",""\t\t\t\t}"",""\t\t\t\tif((nextEntry == 0 && !firstNode) || nextEntry \> octet){"",""\t\t\t\t\toffset -= 2;"",""\t\t\t\t\twhile(true){"",""\t\t\t\t\t\tif(shift != 0){"",""\t\t\t\t\t\t\toffset = insertNode(octet);\t\t\t\t\t\t"",""\t\t\t\t\t\t}else{"",""\t\t\t\t\t\t\tinsertNodeLastLevel(octet);\t"",""\t\t\t\t\t\t\treturn;"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\tshift -= 16;"",""\t\t\t\t\t\toctet = (int)(value \>\> shift) & 0xFFFF;"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t\tfirstNode = false;"",""\t\t\t\tif(shift != 0) offset += pointerSize;"",""\t\t\t}"",""\t\t\tshift -= 16;"",""\t\t}"",""\t}""]"
/smallsql/junit/TestGroupBy/testMaxTimestamp(),"[""public void testMaxTimestamp() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( java.sql.Timestamp.valueOf(\""2345-01-23 12:34:56.123\""), \""Select max({ts \'2345-01-23 12:34:56.123\'}) FROM \"" + table1);"",""\t}""]"
/smallsql/database/TableStorePage/commit(),"[""/**"",""     * Returns the final position of the page back."",""     */"",""    long commit() throws SQLException{"",""\t\tif(nextLock != null){"",""\t\t\t// save only the last version of this page"",""\t\t\tfileOffset = nextLock.commit();"",""\t\t\tnextLock = null;"",""\t\t\trollback();"",""\t\t\treturn fileOffset;"",""\t\t}"",""    \tif(lockType == TableView.LOCK_READ)"",""    \t\treturn fileOffset;"",""    \treturn super.commit();"",""    }""]"
/smallsql/database/StoreNoCurrentRow/isNull(int),"[""boolean isNull(int offset) throws SQLException {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/StoreImpl/writeLongBinary(byte[]),"[""void writeLongBinary( byte[] daten ) throws Exception{"",""        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, daten.length + 4, SQLTokenizer.LONGVARBINARY);"",""        store.writeInt( daten.length );"",""        store.writeBytes( daten );"",""        writeLong( store.writeFinsh(null) );"",""    }""]"
/smallsql/database/TableStorePage/freeLock(),"[""final void freeLock(){"",""    \ttable.freeLock(this);"",""    }""]"
/smallsql/database/ExpressionArithmetic/getNumericImpl(),"[""private MutableNumeric getNumericImpl() throws java.lang.Exception {"",""        switch(operation){"",""            case ADD: "",""            \t{"",""\t\t\t\t\tMutableNumeric num = left.getNumeric();"",""            \t\tnum.add( right.getNumeric() );"",""            \t\treturn num;"",""            \t}"",""            case SUB:"",""\t\t\t\t{"",""\t\t\t\t\tMutableNumeric num = left.getNumeric();"",""\t\t\t\t\tnum.sub( right.getNumeric() );"",""\t\t\t\t\treturn num;"",""\t\t\t\t}"",""            case MUL: "",""            \tif(getDataType(right.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT){"",""            \t\tMutableNumeric num = left.getNumeric();"",""            \t\tnum.mul(right.getInt());"",""            \t\treturn num;"",""            \t}else"",""            \tif(getDataType(left.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT){"",""\t\t\t\t\tMutableNumeric num = right.getNumeric();"",""\t\t\t\t\tnum.mul(left.getInt());"",""\t\t\t\t\treturn num;"",""            \t}else{"",""\t\t\t\t\tMutableNumeric num = left.getNumeric();"",""\t\t\t\t\tnum.mul( right.getNumeric() );"",""\t\t\t\t\treturn num;"",""            \t}"",""            case DIV:"",""            \t{"",""\t\t\t\t\tMutableNumeric num = left.getNumeric();"",""            \t\tif(getDataType(right.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT)"",""            \t\t\tnum.div( right.getInt() );"",""            \t\telse"",""            \t\t\tnum.div( right.getNumeric() ); "",""            \t\treturn num;"",""            \t}"",""            case NEGATIVE:"",""            \t{"",""\t\t\t\t\tMutableNumeric num = left.getNumeric();"",""\t\t\t\t\tnum.setSignum(-num.getSignum());"",""\t\t\t\t\treturn num;"",""            \t}"",""            case MOD:"",""\t\t\t\t{"",""\t\t\t\t\tif(getDataType(getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT)"",""\t\t\t\t\t\treturn new MutableNumeric(getInt());"",""\t\t\t\t\tMutableNumeric num = left.getNumeric();"",""\t\t\t\t\tnum.mod( right.getNumeric() );"",""\t\t\t\t\treturn num;"",""\t\t\t\t}"",""            default:    throw createUnspportedConversion( SQLTokenizer.NUMERIC );"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getMoney(),"[""long getMoney() throws Exception {"",""\t\treturn getInt() * 10000L;"",""\t}""]"
/smallsql/database/ExpressionFunctionACos/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.acos( param1.getDouble() );"",""    }""]"
"/smallsql/database/CommandTable/addColumn(smallsql.database.Columns,smallsql.database.Column)","[""private void addColumn(Columns cols, Column column) throws SQLException{"",""        if(cols.get(column.getName()) != null){"",""            throw SmallSQLException.create(Language.COL_DUPLICATE, column.getName());"",""        }"",""        cols.add(column);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/deletesAreDetected(int),"[""public boolean deletesAreDetected(int type) {"",""\t\treturn supportsResultSetType(type);"",""    }""]"
"/smallsql/database/SSResultSet/updateObject(java.lang.String,java.lang.Object)","[""public void updateObject(String columnName, Object x) throws SQLException {"",""        updateObject( findColumn( columnName ), x );"",""    }""]"
"/smallsql/database/SSPreparedStatement/setTime(int,java.sql.Time,java.util.Calendar)","[""public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setTime() not yet implemented.\"");"",""    }""]"
"/smallsql/database/IndexNode/addRootValue(char[],int)","[""final IndexNode addRootValue(char[] remainderValue, int offset) throws SQLException{"",""\t\tsaveRemainderValue(remainderValue, offset);"",""\t\treturn addRoot();"",""\t}""]"
/smallsql/database/DataSource/getString(int),"[""abstract String getString( int colIdx ) throws Exception;""]"
/smallsql/database/SSResultSet/getCharacterStream(int),"[""public Reader getCharacterStream(int columnIndex) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.getCharacterStream method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""getCharacterStream\"");"",""    }""]"
/smallsql/database/IndexDescriptions/drop(smallsql.database.Database),"[""void drop(Database database) throws Exception {"",""\t\tfor(int i=0; i\<size; i++){"",""\t\t\tdata[i].drop(database);"",""\t\t}"",""\t}""]"
/smallsql/database/DataSource/getDouble(int),"[""abstract double getDouble( int colIdx ) throws Exception;""]"
/smallsql/database/Column/isNullable(),"[""boolean isNullable(){"",""        return nullable;"",""    }""]"
/smallsql/database/SQLParser/parseExpression(java.lang.String),"[""Expression parseExpression(String expr) throws SQLException{"",""\t\tthis.sql = expr.toCharArray();"",""\t\tthis.tokens = SQLTokenizer.parseSQL( sql );"",""\t\ttokenIdx = 0;"",""    \treturn expression( null, 0);"",""    }""]"
/smallsql/database/ExpressionFunctionReturnString/getFloat(),"[""final float getFloat() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Float.parseFloat(getString().trim());"",""\t}""]"
/smallsql/database/Column/setNewAutoIncrementValue(smallsql.database.Expression),"[""void setNewAutoIncrementValue(Expression obj) throws Exception{"",""\t\tif(identity){"",""\t\t\tcounter.setNextValue(obj);"",""\t\t}"",""    }""]"
/smallsql/database/UnionAll/getDataType(int),"[""final int getDataType(int colIdx) {"",""\t\treturn currentDS.getDataType(colIdx);"",""\t}""]"
"/smallsql/database/SSResultSet/updateTime(java.lang.String,java.sql.Time)","[""public void updateTime(String columnName, Time x) throws SQLException {"",""        updateTime( findColumn( columnName ), x );"",""    }""]"
"/smallsql/database/StorePage/StorePage(byte[],int,java.nio.channels.FileChannel,long)","[""StorePage(byte[] page, int pageSize, FileChannel raFile, long fileOffset){"",""\t    super(raFile);"",""\t\tthis.page = page;"",""\t\tthis.pageSize = pageSize;"",""\t\tthis.fileOffset = fileOffset;"",""\t}""]"
/smallsql/database/ViewResult/insertRow(smallsql.database.Expression[]),"[""void insertRow(Expression[] updateValues) throws Exception{"",""\t\tcommandSelect.insertRow(con, updateValues);"",""\t}""]"
/smallsql/database/SSDriver/getMajorVersion(),"[""public int getMajorVersion() {"",""        return 0;"",""    }""]"
/smallsql/database/ExpressionFunctionExp/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.exp( param1.getDouble() );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getConnection(),"[""public Connection getConnection() {"",""    \treturn con;"",""    }""]"
/smallsql/database/SSResultSet/deleteRow(),"[""public void deleteRow() throws SQLException {"",""\t\tst.con.log.println(\""deleteRow()\"");"",""        testNotInsertRow();"",""    \tgetCmd().deleteRow(st.con);"",""        clearRowBuffer();"",""    }""]"
/smallsql/database/ViewResult/ViewResult(smallsql.database.View),"[""ViewResult(View view){"",""\t\tthis.view = view;"",""\t\tthis.columnExpressions = view.commandSelect.columnExpressions;"",""\t\tthis.commandSelect     = view.commandSelect;"",""\t}""]"
"/smallsql/database/SSCallableStatement/getBigDecimal(int,int)","[""public BigDecimal getBigDecimal(int i, int scale) throws SQLException {"",""        try{"",""            MutableNumeric obj = getValue(i).getNumeric();"",""            wasNull = obj == null;"",""            if(wasNull) return null;"",""            return obj.toBigDecimal(scale);"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SSResultSet/getFetchSize(),"[""public int getFetchSize(){"",""        return fetchSize;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getJDBCMinorVersion(),"[""public int getJDBCMinorVersion() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/Column/setName(java.lang.String),"[""void setName( String name ){"",""        this.name = name;"",""    }""]"
"/smallsql/database/SSCallableStatement/setDate(java.lang.String,java.sql.Date)","[""public void setDate(String parameterName, Date x) throws SQLException {"",""        setDate( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/ExpressionFunctionATan/getFunction(),"[""final int getFunction(){ return SQLTokenizer.ATAN; }""]"
/smallsql/junit/BenchTest/test_UpdateRowsPrepareSP(java.sql.Connection),"[""/**"",""      *  9. Test"",""      *  Update rows with a PreparedStatement and a stored procedure."",""      */  "",""    static void test_UpdateRowsPrepareSP(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test update rows with a PreparedStatement and a stored procedure: \"" + rowCount + \"" rows\"");"",""        "",""        try{"",""            Statement st = con.createStatement();"",""            try{st.execute(\""drop procedure sp_\""+tableName);}catch(Exception e){/* ignore it */}"",""            st.execute(\""create procedure sp_\""+tableName+\"" (@bi binary,@c nchar(255),@d datetime,@de decimal,@f float,@im image,@i int,@m money,@n numeric(18, 0),@r real,@sd smalldatetime,@si smallint,@sm smallmoney,@sy sysname,@t ntext,@ti tinyint,@vb varbinary(255),@vc nvarchar(255)) as UPDATE \"" + tableName + \"" SET bi=@bi,c=@c,d=@d,de=@de,f=@f,im=@im,i=@i,m=@m,n=@n,r=@r,sd=@sd,si=@si,sm=@sm,sy=@sy,t=@t,ti=@ti,vb=@vb,vc=@vc WHERE i=@i\"");"","""",""            PreparedStatement pr = con.prepareStatement( \""exec sp_\"" + tableName + \"" ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?\"" );"",""            long time = -System.currentTimeMillis();"",""            for (int i=0; i\<rowCount; i++){"",""\t            pr.setBytes (  1, byteArray );"",""\t            pr.setString(  2 , \""Test\"" );"",""\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );"",""\t            pr.setFloat (  4, (float)1234.56789 );"",""\t            pr.setFloat (  5 , (float)9876.54321 );"",""\t            pr.setBytes (  6, largeByteArray );"",""\t            pr.setInt   (  7 , i );"",""\t            pr.setDouble(  8 , 23.45 );"",""\t            pr.setDouble(  9 , 567.45 );"",""\t            pr.setFloat (  10 , (float)78.89 );"",""\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );"",""\t            pr.setShort (  12, (short)23456 );"",""\t            pr.setFloat (  13, (float)34.56 );"",""\t            pr.setString(  14, \""sysname (30) NULL\"" );"",""\t            pr.setString(  15 , \""text NULL\"" );"",""\t            pr.setByte  (  16, (byte)28 );"",""\t            pr.setBytes (  17, byteArray );"",""\t            pr.setString(  18, \""varchar (255) NULL\"" );"",""                int updateCount = pr.executeUpdate();"",""                if (updateCount != 1){"",""                    System.out.println( \""  Failed: Update count should be 1 but it is \"" + updateCount + \"".\"");"",""                    return;"",""                }"",""            }"",""            time += System.currentTimeMillis();"",""            System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            st.execute(\""drop procedure sp_\""+tableName);"",""            st.close();"",""            pr.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionCeiling/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.ceil( param1.getDouble() );"",""    }""]"
/smallsql/database/IndexDescriptions/add(smallsql.database.IndexDescription),"[""final void add(IndexDescription descr) throws SQLException{"",""\t\tif(size \>= data.length ){"",""\t\t\tresize(size \<\< 1);"",""\t\t}"",""        if(hasPrimary && descr.isPrimary()){"",""            throw SmallSQLException.create(Language.PK_ONLYONE);"",""        }"",""        hasPrimary = descr.isPrimary();"",""\t\tdata[size++] = descr;"",""\t}""]"
/smallsql/database/StoreImpl/writeColumn(smallsql.database.Column),"[""void writeColumn(Column column ) throws Exception{"",""    \tint newSize = offset + 25;"",""        if(newSize \> page.length) resizePage(newSize);"","""",""        writeByte   ( column.getFlag() );"",""        writeString ( column.getName() );"",""        writeShort  ( column.getDataType() );"",""\t\twriteInt    ( column.getPrecision() );"",""\t\twriteByte   ( column.getScale() );"",""\t\toffset += column.initAutoIncrement(storePage.raFile, filePos+offset);"",""\t\tString def = column.getDefaultDefinition();"",""\t\twriteBoolean( def == null );"",""\t\tif(def != null)"",""\t\t\twriteString ( column.getDefaultDefinition() );"",""    }""]"
"/smallsql/database/SSResultSet/getTimestamp(int,java.util.Calendar)","[""public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {"",""        try{"",""            if(cal == null){"",""                return getTimestamp(columnIndex);"",""            }"",""            Expression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""            if(wasNull) return null;"",""            return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/MutableNumeric/MutableNumeric(double),"[""MutableNumeric(double val){"",""    \t//first convert it to a string, because double to BigDecimal has very large rounding bug"",""        this( new BigDecimal( String.valueOf(val) ) );"",""    }""]"
/smallsql/database/LongTreeList/insertNode(int),"[""/**"",""\t * Insert a octet entry on the current offset for one of the first 3 levels. "",""\t * After it create a new node at the end (simple two 0). "",""\t * Then set it the pointer in the new entry to the new node "",""\t * @param octet a short value"",""\t * @return the offset of the new node."",""\t */"",""\tfinal private int insertNode(int octet) throws SQLException{"",""\t\tint oldOffset = offset;"",""\t\t"",""\t\tif(data.length \< size + 4 + pointerSize) resize();"",""\t\tSystem.arraycopy(data, oldOffset, data, oldOffset + 2+pointerSize, size-oldOffset);"",""\t\tsize += 2+pointerSize;"","""",""\t\twriteShort( octet );"",""\t\twritePointer( size );"","""",""\t\t//correct all offset that point behind the new node"",""\t\tcorrectPointers( 0, oldOffset, 2+pointerSize, 0 );"",""\t\t"",""\t\tdata[size++] = (byte)0;"",""\t\tdata[size++] = (byte)0;"",""\t\treturn size-2;"",""\t}""]"
/smallsql/database/ExpressionFunctionLeft/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\tString str = param1.getString();"",""\t\tint length = param2.getInt();"",""\t\tlength = Math.min( length, str.length() );"",""\t\treturn str.substring(0,length);"",""\t}""]"
/smallsql/database/TableView/getName(),"[""String getName(){"",""\t\treturn name;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getMaxSchemaNameLength(),"[""public int getMaxSchemaNameLength() {"",""    \treturn 255;"",""    }""]"
"/smallsql/database/Index/find(smallsql.database.IndexNode,char[],java.util.ArrayList)","[""final private IndexNode find(IndexNode node, char[] key, ArrayList nodeList){"",""\t\tint length = key.length;"",""\t\tint i=-1;"",""\t\twhile(true){"",""\t\t\t// the first digit include 0-null; 1-empty; 2 another value"",""\t\t\tchar digit = (i\<0) ? (length == 0 ? (char)1 : 2)"",""\t\t\t\t\t\t\t  : (key[i]);"",""\t\t\tnode = node.getChildNode(digit);"","""",""\t\t\tif(node == null) return null;"",""\t\t\tif(nodeList != null) nodeList.add(node);"",""\t\t\tif(++i == length){"",""\t\t\t\treturn node;"",""\t\t\t}"","""",""\t\t\tif(equals(node.getRemainderValue(), key, i)){"",""\t\t\t\treturn node;"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionName/getInt(),"[""int getInt() throws Exception{"",""        return fromEntry.getInt(colIdx);"",""    }""]"
"/smallsql/database/StoreImpl/recreateStore(smallsql.database.Table,smallsql.database.StorePage,int)","[""/**"",""     * Recreate a StoreImpl from an uncommitted StorePage."",""     */"",""\tstatic StoreImpl recreateStore( Table table, StorePage storePage, int type) throws Exception{"",""\t\tStoreImpl store = new StoreImpl(table, storePage, type, -1);"",""\t\tstore.page = storePage.page;"",""\t\tstore.sharedPageData = true;"",""\t\tstore.readPageHeader();"",""\t\tstore = store.loadUpdatedStore();"",""\t\tstore.offset = PAGE_CONTROL_SIZE;"",""\t\treturn store;"",""\t}""]"
/smallsql/database/ExpressionName/getDataSource(),"[""DataSource getDataSource(){"",""        return fromEntry;"",""    }""]"
"/smallsql/database/CommandSelect/insertRow(smallsql.database.SSConnection,smallsql.database.Expression[])","[""final void insertRow(SSConnection con, Expression[] newRowSources) throws SQLException{"",""\t\tif(tables.size() \> 1)"",""\t\t\tthrow SmallSQLException.create(Language.JOIN_INSERT);"",""\t\tif(tables.size() == 0)"",""\t\t\tthrow SmallSQLException.create(Language.INSERT_WO_FROM);"",""\t\t"",""\t\tint savepoint = con.getSavepoint();"",""\t\ttry{"",""\t\t\tTableViewResult result = TableViewResult.getTableViewResult( tables.get(0) );"",""\t\t\tTableView table = result.getTableView();"",""\t\t\tColumns tabColumns = table.columns;"",""\t\t\tint count = tabColumns.size();"",""\t\t\t\t\t"",""\t\t\t// order the new Values after it position in the table"",""\t\t\tExpression[] updateValues = new Expression[count];"",""\t\t\tif(newRowSources != null){"",""\t\t\t\tfor(int i=0; i\<columnExpressions.size(); i++){"",""\t\t\t\t\tExpression src = newRowSources[i];"",""\t\t\t\t\tif(src != null && (!(src instanceof ExpressionValue) || !((ExpressionValue)src).isEmpty())){\t"",""\t\t\t\t\t\tExpression rsColumn = columnExpressions.get(i); // Column of the ResultSet"",""\t\t\t\t\t\tif(!rsColumn.isDefinitelyWritable())"",""\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.COL_READONLY, new Integer(i));"",""\t\t\t\t\t\tExpressionName exp = (ExpressionName)rsColumn;"",""\t\t\t\t\t\tif(table == exp.getTable()){"",""\t\t\t\t\t\t\tupdateValues[exp.getColumnIndex()] = src;"",""\t\t\t\t\t\t\tcontinue;"",""\t\t\t\t\t\t}"",""\t\t\t\t\t}"",""\t\t\t\t\tupdateValues[i] = null;"",""\t\t\t\t}"",""\t\t\t}"",""\t\t\t\t\t"",""\t\t\t// save the new values if there are new value for this table"",""\t\t\tresult.insertRow(updateValues);"",""\t\t}catch(Throwable e){"",""\t\t\tcon.rollback(savepoint);"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}finally{"",""\t\t\tif(con.getAutoCommit()) con.commit();"",""\t\t}"",""\t}""]"
/smallsql/database/LongTreeList/insertNodeLastLevel(int),"[""/**"",""\t * Insert the octet of the last level (4 level) on the current offset. "",""\t * This level does not include a pointer to a next level."",""\t * @param octet a short value"",""\t */"",""\tfinal private void insertNodeLastLevel(int octet) throws SQLException{"",""\t\tint oldOffset = offset;"",""\t\t\t\t"",""\t\tif(data.length \< size + 2) resize();"",""\t\tSystem.arraycopy(data, offset, data, offset + 2, size-offset);"",""\t\tsize += 2;"",""\t\twriteShort( octet );"",""\t\t"",""\t\t//correct all offset before this new node that point behind the new node"",""\t\tcorrectPointers( 0, oldOffset, 2, 0 );\t"",""\t}""]"
/smallsql/database/SSResultSet/getUpdateValue(int),"[""final private ExpressionValue getUpdateValue(int columnIndex) throws SQLException{"",""\t\tif(values == null){"",""\t\t\tint count = metaData.getColumnCount();"",""\t\t\tvalues = new ExpressionValue[count];"",""\t\t\twhile(count-- \> 0){"",""\t\t\t\tvalues[count] = new ExpressionValue();"",""\t\t\t}"",""\t\t}"",""\t\treturn values[ metaData.getColumnIdx( columnIndex ) ];"",""\t}""]"
/smallsql/database/SSStatement/getResultSet(),"[""final public ResultSet getResultSet() throws SQLException{"",""        checkStatement();"",""        return cmd.getResultSet();"",""    }""]"
/smallsql/database/SSDatabaseMetaData/isCatalogAtStart(),"[""public boolean isCatalogAtStart() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSConnection/prepareCall(java.lang.String),"[""public CallableStatement prepareCall(String sql) throws SQLException {"",""        return new SSCallableStatement( this, sql);"",""    }""]"
/smallsql/database/GroupResult/addInternalExpressionFromSelect(smallsql.database.Expression),"[""/**"",""\t * Add a expression to the internal expression list if not exist in this list."",""\t * It will be added aggregate functions from the SELECT, HAVING and ORDER BY clause."",""\t * @param expr The expression to added."",""\t * @return the position in the internal list"",""\t */"",""\tfinal private int addInternalExpressionFromSelect(Expression expr) throws SQLException{"",""\t\tint type = expr.getType();"",""\t\tif(type == Expression.NAME){"",""\t\t\tint idx = internalExpressions.indexOf(expr);"",""\t\t\tif(idx \>= 0) return idx;"",""\t\t\tthrow SmallSQLException.create(Language.GROUP_AGGR_NOTPART, expr);"",""\t\t}else"",""\t\tif(type \>= Expression.GROUP_BEGIN){"",""\t\t\tint idx = internalExpressions.indexOf(expr);"",""\t\t\tif(idx \>= 0) return idx;"",""\t\t\tinternalExpressions.add(expr);"",""\t\t\treturn internalExpressions.size()-1;"",""\t\t}else{"",""\t\t\t//if a function or arithmetic expression is already in the group by the it is OK"",""\t\t\tint idx = internalExpressions.indexOf(expr);"",""\t\t\tif(idx \>= 0) return idx;"",""\t\t\tExpression[] params = expr.getParams();"",""\t\t\tif(params != null){"",""\t\t\t\tfor(int p=0; p\<params.length; p++){"",""\t\t\t\t\taddInternalExpressionFromSelect( params[p]);"",""\t\t\t\t}"",""\t\t\t}"",""\t\t\treturn -1;"",""\t\t}"",""\t}""]"
/smallsql/database/Command/getMoreResults(),"[""/**"",""     * The default Command remove all results because there is only one result."",""     * @return ever false"",""     */"",""    boolean getMoreResults(){"",""    \trs = null;"",""    \tupdateCount = -1;"",""    \treturn false;"",""    }""]"
/smallsql/database/ExpressionFunctionSqrt/getFunction(),"[""final int getFunction(){ return SQLTokenizer.SQRT; }""]"
"/smallsql/database/Index/equals(char[],char[],int)","[""private final boolean equals(char[] src1, char[] src2, int offset2){"",""\t\tif(src1 == null) return false;"",""\t\tint length = src1.length;"",""\t\tif(length != src2.length - offset2) return false;"",""\t\tfor(int i=0; i\<length; i++){"",""\t\t\tif(src1[i] != src2[i+offset2]) return false;"",""\t\t}"",""\t\treturn true;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsGroupByUnrelated(),"[""public boolean supportsGroupByUnrelated() {"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionUCase/getBytes(),"[""final byte[] getBytes() throws Exception{"",""        if(isNull()) return null;"",""        return getString().getBytes();"",""\t}""]"
"/smallsql/database/StorePageMap/Entry/Entry(long,smallsql.database.TableStorePage,smallsql.database.StorePageMap.Entry)","[""/**"",""\t\t * Create new entry."",""\t\t */"",""\t\tEntry(long k, TableStorePage v, Entry n) { "",""\t\t\tvalue = v; "",""\t\t\tnext = n;"",""\t\t\tkey = k;"",""\t\t}""]"
"/smallsql/database/StoreNull/getBoolean(int,int)","[""final boolean getBoolean(int offset, int dataType) throws Exception {"",""\t\treturn false;"",""\t}""]"
/smallsql/database/ExpressionFunction/getFunction(),"[""// setzt die Funktionsnummer z.B. bei abs(5) --\> SQLTokenizer.ABS"",""    abstract int getFunction();""]"
/smallsql/database/CommandSelect/getMaxRows(),"[""final int getMaxRows(){"",""        return maxRows;"",""    }""]"
"/smallsql/database/Database/getIndexInfo(smallsql.database.SSConnection,java.lang.String,boolean)","[""Object[][] getIndexInfo( SSConnection con, String table, boolean unique) throws SQLException {"",""\t\tList rows = new ArrayList();"",""\t\tStrings tables = getTables(table);"",""\t\tShort type = Utils.getShort( DatabaseMetaData.tableIndexOther );"",""\t\tfor(int t=0; t\<tables.size(); t++){"",""    \t\tString tableName = tables.get(t);"",""    \t\tTableView tab = getTableView( con, tableName);"",""\t\t\tif(!(tab instanceof Table)) continue;"",""\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;"",""\t\t\tfor(int i=0; i\<indexes.size(); i++){"",""\t\t\t\tIndexDescription index = indexes.get(i);"",""\t\t\t\tStrings columns = index.getColumns();"",""\t\t\t\tfor(int c=0; c\<columns.size(); c++){"",""\t\t\t\t\tObject[] row = new Object[13];"",""\t\t\t\t\trow[0] = getName(); \t\t\t//TABLE_CAT"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//TABLE_SCHEM"",""\t\t\t\t\trow[2] = tableName;\t\t\t\t//TABLE_NAME"",""\t\t\t\t\trow[3] = Boolean.valueOf(!index.isUnique());//NON_UNIQUE"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//INDEX_QUALIFIER"",""\t\t\t\t\trow[5] = index.getName();\t\t//INDEX_NAME"",""\t\t\t\t\trow[6] = type;\t\t\t\t\t//TYPE"",""\t\t\t\t\trow[7] = Utils.getShort(c+1);\t//ORDINAL_POSITION"",""\t\t\t\t\trow[8] = columns.get(c);\t\t//COLUMN_NAME"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//ASC_OR_DESC"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//CARDINALITY"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//PAGES"",""\t\t\t\t\t\t\t\t\t\t\t\t\t//FILTER_CONDITION"",""\t\t\t\t\trows.add(row);"",""\t\t\t\t}"",""\t\t\t}"",""    \t}"",""\t\tObject[][] result = new Object[rows.size()][];"",""\t\trows.toArray(result);"",""\t\treturn result;"",""\t}""]"
"/smallsql/junit/TestJoins/a(java.lang.String,java.lang.Object,java.lang.Object)","[""private static TestValue a(String dataType, Object small, Object large){"",""        TestValue value = new TestValue();"",""        value.dataType  = dataType;"",""        value.small     = small;"",""        value.large     = large;"",""        return value;"",""    }""]"
"/smallsql/database/SSCallableStatement/registerOutParameter(int,int,int)","[""public void registerOutParameter(int i, int sqlType, int scale) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method registerOutParameter() not yet implemented.\"");"",""    }""]"
/smallsql/junit/TestMoneyRounding/testMoney1(),"[""public void testMoney1() throws Exception{"",""            Connection con = AllTests.getConnection();"",""            Statement st = con.createStatement();"",""            int firstValue = -10000;"",""            for(int i=firstValue; i\<10000; i++){"",""                st.execute(\""Insert into \"" + table + \""(a,b) values(\"" + (i/10000.0) + \"",\"" +(i/10000.0) +\"")\"");"",""            }"",""            st.close();"",""            verify(firstValue);"",""    }""]"
/smallsql/database/ExpressionValue/getInt(),"[""int getInt() throws Exception{"",""\t\treturn getInt( getObject(), dataType );"",""    }""]"
/smallsql/database/ExpressionFunctionAbs/getLong(),"[""long getLong() throws Exception{"",""        return Math.abs( param1.getLong() );"",""    }""]"
/smallsql/database/CommandSelect/setTables(smallsql.database.DataSources),"[""/**"",""\t * List of all Tables and Views. "",""\t * This is needed to replace the table aliases in the columnExpressions with the real sources."",""\t */"",""    final void setTables( DataSources from ){"",""        this.tables = from;"",""    }""]"
/smallsql/database/ExpressionFunctionSoundex/getString(java.lang.String),"[""static String getString(String input){"",""        char[] output = new char[4];"",""        int idx = 0;"",""        input = input.toUpperCase();"",""        if(input.length()\>0){"",""            output[idx++] = input.charAt(0);"",""        }"",""        char last = \'0\';"",""        for(int i=1; idx\<4 && i\<input.length(); i++){"",""            char c = input.charAt(i);"",""            switch(c){"",""            case \'B\':"",""            case \'F\':"",""            case \'P\':"",""            case \'V\':"",""                c = \'1\';"",""                break;"",""            case \'C\':"",""            case \'G\':"",""            case \'J\':"",""            case \'K\':"",""            case \'Q\':"",""            case \'S\':"",""            case \'X\':"",""            case \'Z\':"",""                c = \'2\';"",""                break;"",""            case \'D\':"",""            case \'T\':"",""                c = \'3\';"",""                break;"",""            case \'L\':"",""                c = \'4\';"",""                break;"",""            case \'M\':"",""            case \'N\':"",""                c = \'5\';"",""                break;"",""            case \'R\':"",""                c = \'6\';"",""                break;"",""            default:"",""                c = \'0\';"",""                break;"",""            }"",""            if(c \> \'0\' && last != c){"",""                output[idx++] = c;"",""            }"",""            last = c;"",""        }"",""        for(; idx\<4;){"",""            output[idx++] = \'0\';"",""            "",""        }"",""\t\treturn new String(output);"",""\t}""]"
/smallsql/database/TableViewMap/remove(java.lang.String),"[""TableView remove(String name){"",""        return (TableView)map.remove(getUniqueKey(name));"",""    }""]"
/smallsql/database/MutableLong/intValue(),"[""public int intValue() {"",""\t\treturn (int)value;"",""\t}""]"
"/smallsql/database/Index/stringToBinarySortOrder(java.lang.String,boolean)","[""final static private char[] stringToBinarySortOrder(String value, boolean needTrim){"",""\t\tint length = value.length();"",""\t\tif(needTrim){"",""\t\t\twhile(length \> 0 && value.charAt(length-1) == \' \') length--;"",""\t\t}"",""\t\tchar[] puffer = new char[length];"",""\t\tfor(int i=0; i\<length; i++){"",""\t\t\tpuffer[i] = Character.toLowerCase(Character.toUpperCase( value.charAt(i) ));"",""\t\t}"",""\t\treturn puffer;"",""\t}""]"
"/smallsql/database/FileIndex/FileIndex(boolean,java.nio.channels.FileChannel)","[""FileIndex( boolean unique, FileChannel raFile ) {"",""        this(new FileIndexNode( unique, (char)-1, raFile), raFile);"",""    }""]"
"/smallsql/database/SQLParser/createSyntaxError(smallsql.database.SQLToken,java.lang.String)","[""/**"",""\t * Create a syntax error message, using a custom message."",""\t * "",""\t * @param token"",""\t *            token object; if not null, generates a SYNTAX_BASE_OFS,"",""\t *            otherwise a SYNTAX_BASE_END."",""\t * @param addMessage"",""\t *            additional message object to append."",""\t */"",""    private SQLException createSyntaxError(SQLToken token, String addMessageCode) {"",""    \tString message = getErrorString(token, addMessageCode, null);"",""    \treturn SmallSQLException.create(Language.CUSTOM_MESSAGE, message);"",""    }""]"
/smallsql/database/MutableNumeric/mul(int),"[""final void mul(int factor){"",""\t\tif(factor \< 0){"",""\t\t\tfactor = - factor;"",""\t\t\tsignum = -signum;"",""\t\t}"",""\t\tlong carryover = 0;"",""\t\tfor(int i = value.length-1; i\>=0; i--){"",""\t\t\tlong v = (value[i] & 0xFFFFFFFFL) * factor + carryover;"",""\t\t\tvalue[i] = (int)v;"",""\t\t\tcarryover = v \>\> 32;"",""\t\t}"",""\t\tif(carryover \> 0){"",""\t\t\tresizeValue( (int)carryover );"",""\t\t}"",""\t}""]"
/smallsql/junit/TestScrollable/testLastWithWhereAssert(java.sql.ResultSet),"[""private void testLastWithWhereAssert(ResultSet rs) throws Exception{"",""        assertFalse( \""There should be no rows:\"", rs.last());"",""        assertFalse( \""isLast\"", rs.isLast());"",""        try{"",""            rs.getString(\""v\"");"",""            fail(\""SQLException \'No current row\' should be throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException( \""01000\"", 0, ex );"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getFloat(),"[""final float getFloat() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Float.parseFloat(getString().trim());"",""\t}""]"
/smallsql/database/GroupResult/accumulateRow(),"[""final private void accumulateRow() throws Exception{"",""\t\tfor(int i=0; i\<currentRow.length; i++){"",""\t\t\tExpression src = expressions.get(i);"",""\t\t\tcurrentRow[i].accumulate(src);"",""\t\t}"",""\t}""]"
"/smallsql/database/Database/createTable(smallsql.database.SSConnection,java.lang.String,smallsql.database.Columns,smallsql.database.IndexDescriptions,smallsql.database.ForeignKeys)","[""/**"",""     * @param con current Connections"",""     * @param name the name of the new Table"",""     * @param columns the column descriptions of the table"",""     * @param indexes the indexes of the new table"",""     * @param foreignKeys "",""     * @throws Exception"",""     */"",""\tvoid createTable(SSConnection con, String name, Columns columns, IndexDescriptions indexes, ForeignKeys foreignKeys) throws Exception{"",""        checkForeignKeys( con, foreignKeys );"",""        // createFile() can run only one Thread success (it is atomic)"",""        // Thats the create of the Table does not need in the Synchronized."",""        Table table = new Table( this, con, name, columns, indexes, foreignKeys);"",""        synchronized(tableViews){"",""            tableViews.put( name, table);"",""        }"",""    }""]"
/smallsql/database/MutableFloat/toString(),"[""public String toString(){"",""\t\treturn String.valueOf(value);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getDatabaseMinorVersion(),"[""public int getDatabaseMinorVersion() {"",""\t\treturn getDriverMinorVersion();"",""    }""]"
/smallsql/database/SSResultSet/getBoolean(int),"[""public boolean getBoolean(int columnIndex) throws SQLException {"",""        try{"",""            Expression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""            return expr.getBoolean();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/Identity/doubleValue(),"[""@Override"",""    public double doubleValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampAdd/isNull(),"[""boolean isNull() throws Exception {"",""\t\treturn param1.isNull() || param2.isNull();"",""\t}""]"
/smallsql/database/UnionAll/getBytes(int),"[""final byte[] getBytes(int colIdx) throws Exception {"",""\t\treturn currentDS.getBytes(colIdx);"",""\t}""]"
"/smallsql/database/SSCallableStatement/setTime(java.lang.String,java.sql.Time)","[""public void setTime(String parameterName, Time x) throws SQLException {"",""        setTime( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/Utils/doubleToMoney(double),"[""static long doubleToMoney(double value){"",""\t\tif(value \< 0)"",""\t\t\treturn (long)(value * 10000 - 0.5);"",""\t\treturn (long)(value * 10000 + 0.5);"",""\t}""]"
"/smallsql/database/SSCallableStatement/setByte(java.lang.String,byte)","[""public void setByte(String parameterName, byte x) throws SQLException {"",""        setByte( findParameter( parameterName ), x );"",""    }""]"
/smallsql/database/Column/getDisplaySize(),"[""int getDisplaySize(){"",""\t\treturn SSResultSetMetaData.getDisplaySize( dataType, precision, scale);"",""    }""]"
/smallsql/database/SortedResult/isScrollable(),"[""final boolean isScrollable(){"",""\t\treturn true;"",""\t}""]"
/smallsql/database/ForeignKeys/resize(int),"[""private final void resize(int newSize){"",""\t\tForeignKey[] dataNew = new ForeignKey[newSize];"",""\t\tSystem.arraycopy(data, 0, dataNew, 0, size);"",""\t\tdata = dataNew;\t\t"",""\t}""]"
/smallsql/junit/TestGroupBy/testMaxReal(),"[""public void testMaxReal() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Float(2), \""Select max(convert(real,id)) FROM \"" + table1);"",""\t}""]"
/smallsql/database/StoreImpl/getUsedSize(),"[""@Override"",""    int getUsedSize(){"",""        return sizeUsed;"",""    }""]"
/smallsql/junit/TestMoneyRounding/testMoney2(),"[""public void testMoney2() throws Exception{"",""\t\t\tConnection con = AllTests.getConnection();"",""\t\t\tStatement st = con.createStatement();"",""\t\t\tint firstValue = -10000;"",""\t\t\tfor(int i=firstValue; i\<10000; i++){"",""\t\t\t\tst.execute(\""Insert into \"" + table + \""(a,b) values( (\"" + i + \""/10000.0), (\"" + i + \""/10000.0) )\"");"",""\t\t\t}"",""\t\t\tst.close();"",""\t\t\tverify(firstValue);"",""\t}""]"
/smallsql/database/ExpressionFunctionIIF/getNumeric(),"[""MutableNumeric getNumeric() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.getNumeric();"",""\t\treturn param3.getNumeric();"",""\t}""]"
/smallsql/junit/TestJoins/setUp(),"[""public void setUp() throws Exception{"",""\t\tclear();"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.execute(\""create table \"" + table + \""(a \"" + testValue.dataType +\"" PRIMARY KEY, b \"" + testValue.dataType + \"")\"");"",""        st.execute(\""create table \"" + table2+ \""(c \"" + testValue.dataType +\"" PRIMARY KEY, d \"" + testValue.dataType + \"")\"");"",""\t\tst.execute(\""create table \"" + table3+ \""(c \"" + testValue.dataType +\"" PRIMARY KEY, d \"" + testValue.dataType + \"")\"");"",""        st.close();"",""\t\tcon.close();"",""\t\tcon = AllTests.getConnection();"",""        PreparedStatement pr = con.prepareStatement(\""INSERT into \"" + table + \""(a,b) Values(?,?)\"");"",""\t    insertValues( pr );"",""        pr.close();"","""",""\t    pr = con.prepareStatement(\""INSERT into \"" + table2 + \"" Values(?,?)\"");"",""\t    insertValues( pr );"",""        pr.close();"",""    }""]"
/smallsql/database/MutableNumeric/getInternalValue(),"[""int[] getInternalValue(){"",""        return value;"",""    }""]"
/smallsql/junit/TestLanguage/testSyntaxErrors(),"[""public void testSyntaxErrors() throws SQLException {"",""\t\tConnection conn = AllTests.createConnection(\""?locale=it\"", null);"",""\t\tStatement stat = conn.createStatement();"",""\t\t"",""\t\ttry {"",""\t\t\ttry {"",""\t\t\t\tstat.execute(\""CREATE TABLE\"");"",""\t\t\t}"",""\t\t\tcatch (SQLException se) {"",""\t\t\t\tassertMessage(se, \""Errore di sintassi, fine inattesa della stringa SQL. Le parole chiave richieste sono: \<identifier\>\"");"",""\t\t\t}"",""\t\t\t"",""\t\t\ttry {"",""\t\t\t\tstat.execute(\""Some nonsensical sentence.\"");"",""\t\t\t}"",""\t\t\tcatch (SQLException se) {"",""\t\t\t\tassertMessage(se, \""Errore di sintassi alla posizione 0 in \'Some\'. Le parole chiave richieste sono\"");"",""\t\t\t}"","""",""\t\t\trecreateTestTab(stat);"",""\t\t\t"",""\t\t\ttry {"",""\t\t\t\tstat.execute(\""SELECT bar() FROM foo\"");"",""\t\t\t}"",""\t\t\tcatch (SQLException se) {"",""\t\t\t\tassertMessage(se, \""Errore di sintassi alla posizione 7 in \'bar\'. Funzione sconosciuta\"");"",""\t\t\t}"",""\t\t\t"",""\t\t\ttry {"",""\t\t\t\tstat.execute(\""SELECT UCASE(\'a\', \'\');\"");"",""\t\t\t}"",""\t\t\tcatch (SQLException se) {"",""\t\t\t\tassertMessage(se, \""Errore di sintassi alla posizione 7 in \'UCASE\'. Totale parametri non valido.\"");"",""\t\t\t}"",""\t\t}"",""\t\tfinally {"",""\t\t\tconn.close();"",""\t\t}"",""\t}""]"
/smallsql/database/SSCallableStatement/getArray(int),"[""public Array getArray(int i) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method getArray() not yet implemented.\"");"",""    }""]"
/smallsql/database/ExpressionFunctionCase/getNumeric(),"[""final MutableNumeric getNumeric() throws Exception {"",""\t\treturn getResult().getNumeric();"",""\t}""]"
/smallsql/database/SSPreparedStatement/executeQuery(),"[""public ResultSet executeQuery() throws SQLException {"",""\t\texecuteImp();"",""        return cmd.getQueryResult();"",""    }""]"
/smallsql/database/NoFromResult/rowDeleted(),"[""final boolean rowDeleted(){"",""\t\treturn false;"",""\t}""]"
"/smallsql/database/StoreNull/getObject(int,int)","[""final Object getObject(int offset, int dataType) throws Exception {"",""\t\treturn null;"",""\t}""]"
/smallsql/database/ExpressionArithmetic/getIntImpl(),"[""private int getIntImpl() throws java.lang.Exception {"",""        switch(operation){"",""            case ADD:       return left.getInt() + right.getInt();"",""            case SUB:       return left.getInt() - right.getInt();"",""            case MUL:       return left.getInt() * right.getInt();"",""            case DIV:       return left.getInt() / right.getInt();"",""            case NEGATIVE:  return               - left.getInt();"",""            case MOD:\t\treturn left.getInt() % right.getInt();"",""            case BIT_NOT:   return               ~ left.getInt();"",""        }"",""        throw createUnspportedConversion( SQLTokenizer.INT);"",""    }""]"
/smallsql/junit/TestGroupBy/testMaxOfNull(),"[""public void testMaxOfNull() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( null, \""Select max(id) FROM \"" + table1 + \"" Where id is null\"");"",""\t}""]"
/smallsql/database/ExpressionFunctionLocate/getInt(),"[""int getInt() throws Exception {"",""\t\tString suchstr = param1.getString();"",""\t\tString value   = param2.getString();"",""\t\tif(suchstr == null || value == null || suchstr.length() == 0 || value.length() == 0) return 0;"",""\t\tint start = 0;"",""\t\tif(param3 != null){"",""\t\t\tstart = param3.getInt()-1;"",""\t\t}"",""\t\t"",""\t\t// TODO Performance"",""\t\treturn value.toUpperCase().indexOf( suchstr.toUpperCase(), start ) +1;"",""\t}""]"
/smallsql/database/MemoryResult/getColumn(int),"[""/**"",""     * Return a Column to described the meta data"",""     * @param colIdx  the index of the column starting with 0."",""     */"",""    final Column getColumn(int colIdx){"",""        return columns.get(colIdx);"",""    }""]"
/smallsql/database/Distinct/next(),"[""final boolean next() throws Exception {"",""\t\twhile(true){"",""\t\t\tboolean isNext = rowSource.next();"",""\t\t\tif(!isNext) return false;"","""",""\t\t\tLong oldRowOffset = (Long)index.findRows(distinctColumns, true, null);"",""\t\t\tlong newRowOffset = rowSource.getRowPosition();"",""\t\t\tif(oldRowOffset == null){"",""\t\t\t\tindex.addValues( newRowOffset, distinctColumns);"",""\t\t\t\trow++;"",""\t\t\t\treturn true;"",""\t\t\t}else"",""\t\t\tif(oldRowOffset.longValue() == newRowOffset){"",""\t\t\t\trow++;"",""\t\t\t\treturn true;"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/TableViewResult/isScrollable(),"[""final boolean isScrollable(){"",""\t\treturn false;"",""\t}""]"
/smallsql/junit/TestJoins/TestJoins(smallsql.junit.TestJoins.TestValue),"[""TestJoins(TestValue testValue){"",""        super(testValue.dataType);"",""        this.testValue = testValue;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsFullOuterJoins(),"[""public boolean supportsFullOuterJoins() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSResultSet/first(),"[""public boolean first() throws SQLException {"",""\t\ttry{"",""\t\t\tif(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);"",""            moveToCurrentRow();"",""\t\t\treturn getCmd().first();"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
/smallsql/database/ExpressionName/isCaseSensitive(),"[""boolean isCaseSensitive(){"",""\t\treturn column.isCaseSensitive();"",""\t}""]"
/smallsql/database/TableResult/getNumeric(int),"[""@Override"",""    final MutableNumeric getNumeric( int colIdx ) throws Exception{"",""        return store.getNumeric( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/database/SSConnection/getHoldability(),"[""public int getHoldability(){"",""        return holdability;"",""    }""]"
/smallsql/database/SSCallableStatement/getRef(java.lang.String),"[""public Ref getRef(String parameterName) throws SQLException {"",""        return getRef( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/SSStatement/setMaxRows(int),"[""final public void setMaxRows(int max) throws SQLException{"",""        if(max \< 0)"",""            throw SmallSQLException.create(Language.ROWS_WRONG_MAX, String.valueOf(max));"",""        maxRows = max;"",""    }""]"
"/smallsql/database/SSResultSet/updateByte(java.lang.String,byte)","[""public void updateByte(String columnName, byte x) throws SQLException {"",""        updateByte( findColumn( columnName ), x );"",""    }""]"
/smallsql/junit/TestOther/testCharEqualsVarchar(),"[""/**"",""     * If a CHAR and a VARCHAR data type in a equals then both data type should be identical."",""     * This means the database must convert the CHAR to VARCHAR or vice versa."",""     * A static or dynamic string parameter has the data type VARCHAR"",""     */"",""    public void testCharEqualsVarchar() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{"",""            con.createStatement().execute(\""Create Table CharEqualsVarchar (c char(10))\"");"",""            assertRowCount( 0, \""Select * From CharEqualsVarchar\"" );"","""",""            con.createStatement().execute(\""Insert Into CharEqualsVarchar(c) Values(\'qwert1\')\"");"",""            assertRowCount( 1, \""Select * From CharEqualsVarchar\"" );"","""",""            assertRowCount( 1, \""Select * From CharEqualsVarchar Where c = \'qwert1\'\"" );"",""            assertRowCount( 0, \""Select * From CharEqualsVarchar Where c = \'qwert1        xxxx\'\"" );"",""            assertRowCount( 1, \""Select * From CharEqualsVarchar Where c = cast(\'qwert1\' as char(8))\"" );"",""            assertRowCount( 1, \""Select * From CharEqualsVarchar Where c = cast(\'qwert1\' as char(12))\"" );"",""            assertRowCount( 1, \""Select * From CharEqualsVarchar Where c In(\'qwert1\')\"" );"",""            assertRowCount( 0, \""Select * From CharEqualsVarchar Where c In(\'qwert1        xxxx\')\"" );"",""            "",""            PreparedStatement pr;"",""            pr = con.prepareStatement( \""Select * From CharEqualsVarchar Where c = ?\"" );"",""            pr.setString( 1, \""qwert1\"" );"",""            assertRowCount( 1, pr.executeQuery() );"",""            pr.setString( 1, \""qwert1        xxxx\"" );"",""            assertRowCount( 0, pr.executeQuery() );"",""        }finally{"",""            dropTable( con, \""CharEqualsVarchar\"" );"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getBoolean(),"[""boolean getBoolean() throws Exception {"",""\t\treturn getLong() != 0;"",""\t}""]"
/smallsql/database/Identity/floatValue(),"[""@Override"",""    public float floatValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/database/SSCallableStatement/getTime(java.lang.String),"[""public Time getTime(String parameterName) throws SQLException {"",""        return getTime( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/SSConnection/rollbackFile(java.nio.channels.FileChannel),"[""/**"",""\t * Discard all changes of a file because it was deleted."",""\t */"",""\tvoid rollbackFile(FileChannel raFile) throws SQLException{"",""\t\ttestClosedConnection();"",""\t\t// remove the all commits that point to this table"",""\t\tsynchronized(getMonitor()){"",""            for(int i = commitPages.size() - 1; i \>= 0; i--){"",""                TransactionStep page = (TransactionStep)commitPages.get(i);"",""                if(page.raFile == raFile){"",""                    page.rollback();"",""                    page.freeLock();"",""                }"",""            }"",""        }"",""\t}""]"
/smallsql/database/RowSource/last(),"[""boolean last() throws Exception{"",""\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);"",""\t}""]"
"/smallsql/database/ExpressionFunctionCase/setParamAt(smallsql.database.Expression,int)","[""void setParamAt( Expression param, int idx){"",""    \tsuper.setParamAt( param, idx );"",""    \tint p = idx / 2;"",""    \tif(p\>=cases.size()){"",""    \t\telseResult = param;"",""    \t\treturn;"",""    \t}"",""    \tif(idx % 2 \> 0){    \t\t"",""    \t\tresults.set( p, param );"",""    \t}else{"",""    \t\tcases.set( p, param );"",""    \t}"",""    }""]"
"/smallsql/database/SSResultSet/updateBoolean(int,boolean)","[""public void updateBoolean(int columnIndex, boolean x) throws SQLException {"",""\t\tupdateValue( columnIndex, x ? Boolean.TRUE : Boolean.FALSE, SQLTokenizer.BOOLEAN);"",""    }""]"
/smallsql/database/Command/getParam(int),"[""/**"",""\t * Get a PreparedStatement parameter."",""\t * The idx starts with 1."",""\t */"",""\tprivate ExpressionValue getParam(int idx) throws SQLException{"",""\t\tif(idx \< 1 || idx \> params.size())"",""\t\t\tthrow SmallSQLException.create(Language.PARAM_IDX_OUT_RANGE, new Object[] { new Integer(idx), new Integer(params.size())});"",""\t\treturn ((ExpressionValue)params.get(idx-1));"",""\t}""]"
/smallsql/database/SQLParser/getIdentifier(smallsql.database.SQLToken),"[""/**"",""     * Returns a valid identifier from this token."",""     * @param token the token of the identifier"",""     * @return the string with the name"",""     * @throws SQLException if the identifier is invalid"",""     */"",""    private String getIdentifier(SQLToken token) throws SQLException{"",""    \tString name = token.getName(sql);"",""    \tcheckValidIdentifier( name, token );"",""    \treturn name;"",""    }""]"
/smallsql/database/Join/execute(),"[""void execute() throws Exception{"",""    \tleft.execute();"",""    \tright.execute();"",""        //create the best join  algorithm"",""        if(!createJoinScrollIndex()){"",""            //Use the default join algorithm with a loop as fallback"",""            scroll = new JoinScroll(type, left, right, condition);"",""        }"",""    }""]"
/smallsql/database/StoreImpl/writeBytes(byte[]),"[""void writeBytes(byte[] daten){"",""        int newSize = offset + daten.length;"",""        if(newSize \> page.length) resizePage(newSize );"",""        System.arraycopy( daten, 0, page, offset, daten.length);"",""        offset += daten.length;"",""    }""]"
"/smallsql/database/StoreImpl/getMoney(int,int)","[""// is used for faster calculation"",""    @Override"",""    long getMoney( int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    return readBoolean() ? 10000 : 0;"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return (long)(Utils.bytes2double( readBinary() ) * 10000L);"",""            case SQLTokenizer.TINYINT:"",""                    return readUnsignedByte() * 10000L;"",""            case SQLTokenizer.SMALLINT:"",""                    return readShort() * 10000L;"",""            case SQLTokenizer.INT:"",""                    return readInt() * 10000L;"",""            case SQLTokenizer.BIGINT:"",""                    return readLong() * 10000L;"",""            case SQLTokenizer.REAL:"",""                    return (long)(readFloat() * 10000L);"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return (long)(readDouble() * 10000L);"",""            case SQLTokenizer.MONEY:"",""                    return readLong();"",""            case SQLTokenizer.SMALLMONEY:"",""                    return readInt();"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return (long)(readNumeric().doubleValue() * 10000L);"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return Money.parseMoney( readString() );"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return Money.parseMoney( readLongString() );"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());"",""                    ObjectInputStream ois = new ObjectInputStream(bais);"",""                    return Money.parseMoney( ois.readObject().toString() );"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return (long)(Utils.bytes2double( readLongBinary() ) * 10000L);"",""            case SQLTokenizer.TIMESTAMP:"",""            case SQLTokenizer.TIME:"",""            case SQLTokenizer.DATE:"",""            case SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \""MONEY\"" });"",""            default: throw new Error();"",""        }"",""    }""]"
"/smallsql/database/SSPreparedStatement/setDate(int,java.sql.Date,java.util.Calendar)","[""public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setDate() not yet implemented.\"");"",""    }""]"
/smallsql/junit/TestAlterTable2/testAddPrimaryKey(),"[""public void testAddPrimaryKey() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.execute(\""create table \""+table+\"" (a varchar(2))\"");"",""        st.execute(\""alter table \""+table+\"" add b varchar(4) primary key\"");"",""        ResultSet rs = st.executeQuery(\""Select * From \"" + table);"",""        assertRSMetaData( rs, new String[]{\""a\"", \""b\""},  new int[]{Types.VARCHAR, Types.VARCHAR} );"",""        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );"",""        assertRowCount( 1, rs );"",""    }""]"
/smallsql/database/LongTreeList/setPreviousOffset(smallsql.database.LongTreeListEnum),"[""/**"",""\t * Is used from getPrevious(). It set the offset of the previous entry."",""\t * If there is no previous entry in this node then set it to -1."",""\t * The problem is that \""enum\"" point to the next position to optimize getNext()."",""\t * We need 2 steps forward to find the previous entry. It can occur that"",""\t * we are in another node. We need to verify it with the start point of the current node."",""\t */"",""\tfinal private void setPreviousOffset(LongTreeListEnum listEnum){"",""\t\tint previousOffset = listEnum.offsetStack[listEnum.stack] - 2*(2 + (listEnum.stack\>=3 ? 0 : pointerSize));"",""\t\tif(listEnum.stack == 0){"",""\t\t\toffset = previousOffset;"",""\t\t\treturn;"",""\t\t}"",""\t\toffset = listEnum.offsetStack[listEnum.stack-1] - pointerSize;"",""\t\tint pointer = getPointer();"",""\t\tif(pointer \<= previousOffset){"",""\t\t\toffset = previousOffset;"",""\t\t\treturn;"",""\t\t}"",""\t\toffset = -1;"",""\t}""]"
/smallsql/junit/BenchTest/test_UpdateRowsPrepareBatch(java.sql.Connection),"[""/**"",""      *  10. Test"",""      *  Update rows with a PreparedStatement and Batch."",""      */  "",""    static void test_UpdateRowsPrepareBatch(Connection con){"",""        int batchSize = 10;"",""        int batches = rowCount / batchSize;"",""        System.out.println();"",""        System.out.println( \""Test update rows with PreparedStatement and Batches: \"" + batches + \"" batches, \"" + batchSize + \"" batch size\"");"",""        "",""        try{"",""            PreparedStatement pr = con.prepareStatement( \""UPDATE \"" + tableName + \"" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\"" );"",""            long time = -System.currentTimeMillis();"",""            for (int i=0; i\<batches; i++){"",""                for (int r=0; r\<batchSize; r++){"",""\t                pr.setBytes (  1, byteArray );"",""\t                pr.setString(  2 , \""Test\"" );"",""\t                pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );"",""\t                pr.setFloat (  4, (float)1234.56789 );"",""\t                pr.setFloat (  5 , (float)9876.54321 );"",""\t                pr.setBytes (  6, largeByteArray );"",""\t                pr.setInt   (  7 , i*batchSize + r );"",""\t                pr.setDouble(  8 , 23.45 );"",""\t                pr.setDouble(  9 , 567.45 );"",""\t                pr.setFloat (  10 , (float)78.89 );"",""\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );"",""\t                pr.setShort (  12, (short)23456 );"",""\t                pr.setFloat (  13, (float)34.56 );"",""\t                pr.setString(  14, \""sysname (30) NULL\"" );"",""\t                pr.setString(  15 , \""text NULL\"" );"",""\t                pr.setByte  (  16, (byte)28 );"",""\t                pr.setBytes (  17, byteArray );"",""\t                pr.setString(  18, \""varchar (255) NULL\"" );"",""\t                pr.setInt   (  19 , i );"",""\t                pr.addBatch();"",""\t            }"",""                int[] updateCount = pr.executeBatch();"",""                if (updateCount.length != batchSize){"",""                    System.out.println( \""  Failed: Update count size should be \"" + batchSize + \"" but it is \"" + updateCount.length + \"".\"");"",""                    return;"",""                }"",""            }"",""            time += System.currentTimeMillis();"",""            System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            pr.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
/smallsql/database/Where/isValidRow(),"[""/**"",""\t * Verify if the valid row of the underlying RowSource (Variable join)"",""\t * is valid for the current ResultSet."",""\t * @return"",""\t */"",""\tfinal private boolean isValidRow() throws Exception{"",""\t\treturn where == null || rowSource.rowInserted() || where.getBoolean();"",""\t}""]"
"/smallsql/database/Store/getMoney(int,int)","[""abstract long getMoney( int offset, int dataType) throws Exception;""]"
/smallsql/database/SSDatabaseMetaData/supportsANSI92IntermediateSQL(),"[""public boolean supportsANSI92IntermediateSQL() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSStatement/getUpdateCount(),"[""final public int getUpdateCount() throws SQLException{"",""        checkStatement();"",""        return cmd.getUpdateCount();"",""    }""]"
"/smallsql/database/SQLTokenizer/addKeyWord(java.lang.String,int)","[""static private void addKeyWord( String keyword, int value){"",""        keywords.put( Utils.getInteger( value), keyword );"","""",""        char[] letters = keyword.toCharArray();"",""        if(searchTree == null){"",""            searchTree = new SearchNode();"",""            searchTree.letter = (char)(letters[0] | 0x20);"",""        }"",""        SearchNode prev = null;"",""        SearchNode node = searchTree;"",""        boolean wasNextEntry = true;"",""        for(int i=0; i\<letters.length; i++){"",""            char c = (char)(letters[i] | 0x20);"",""            while(node != null && node.letter != c) {"",""                prev = node;"",""                node = node.nextEntry;"",""                wasNextEntry = true;"",""            }"",""            if(node == null){"",""                node = new SearchNode();"",""                node.letter = c;"",""                if(wasNextEntry)"",""                     prev.nextEntry = node;"",""                else prev.nextLetter = node;"",""                wasNextEntry = false;"",""                prev = node;"",""                node = null;"",""            }else{"",""                prev = node;"",""                node = node.nextLetter;"",""                wasNextEntry = false;"",""            }"",""        }"",""        prev.value = value;"",""    }""]"
/smallsql/database/SSDriver/acceptsURL(java.lang.String),"[""public boolean acceptsURL(String url){"",""        return url.startsWith(URL_PREFIX);"",""    }""]"
/smallsql/database/Store/getUsedSize(),"[""abstract int getUsedSize();""]"
/smallsql/database/TableResult/getObject(int),"[""@Override"",""    final Object getObject( int colIdx ) throws Exception{"",""        return store.getObject( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/database/Lobs/getFile(smallsql.database.Database),"[""/**"",""\t * {@inheritDoc}"",""\t */"",""\t@Override"",""    File getFile(Database database){"",""\t\treturn new File( Utils.createLobFileName( database, name ) );"",""\t}""]"
/smallsql/database/LongList/add(long),"[""final void add(long value){"",""\t\tif(size \>= data.length ){"",""\t\t\tresize(size \<\< 1);"",""\t\t}"",""\t\tdata[ size++ ] = value;"",""\t}""]"
"/smallsql/database/ExpressionInSelect/ExpressionInSelect(smallsql.database.SSConnection,smallsql.database.Expression,smallsql.database.CommandSelect,int)","[""ExpressionInSelect(SSConnection con, Expression left, CommandSelect cmdSel, int operation) {"",""\t\tsuper(left, (Expressions)null, operation);"",""\t\tthis.cmdSel = cmdSel;"",""\t\tthis.con = con;"",""\t}""]"
/smallsql/database/Money/longValue(),"[""public long longValue() {"",""        return (long)(value / 10000.0);"",""    }""]"
"/smallsql/database/IndexNode/IndexNode(boolean,char)","[""/**"",""\t * Create a new Node in the Index. Do not call this constructor directly "",""     * else use the factory method \<code\>createIndexNode\</code\>."",""\t * @param unique descript if it is an unique index (primary key) or a multi value index is."",""     * @see #createIndexNode"",""\t */"",""\tprotected IndexNode(boolean unique, char digit){"",""\t\tthis.unique = unique;"",""\t\tthis.digit  = digit;"",""\t}""]"
/smallsql/database/SSResultSet/getType(),"[""public int getType() throws SQLException {"",""    \treturn getCmd().from.isScrollable() ? ResultSet.TYPE_SCROLL_SENSITIVE : ResultSet.TYPE_FORWARD_ONLY;"",""    }""]"
/smallsql/database/Expression/getDouble(),"[""abstract double getDouble() throws Exception;""]"
"/smallsql/database/Database/getDatabase(java.lang.String,smallsql.database.SSConnection,boolean)","[""/**"",""\t * Get a instance of the Database Class. If the Database with the given name is not open "",""\t * then it will be open."",""\t * @param name \t   the name of the database"",""\t * @param con \t   a reference holder to this database, if all connection close that have a reference "",""\t * \t               then the database can be unload."",""\t * @param create   if the database not exist then create it"",""\t */"",""    static Database getDatabase(String name, SSConnection con, boolean create) throws SQLException{"",""        if(name == null){"",""            return null;"",""        }"",""        if(name.startsWith(\""file:\"")){"",""            name = name.substring(5);"",""        }"",""        File file;"",""        try{"",""            file = new File(name).getCanonicalFile();"",""        }catch(Throwable th){"",""            throw SmallSQLException.createFromException( th );"",""        }"",""        String dbKey = file.getName() + \"";readonly=\"" + con.isReadOnly();"",""        synchronized(databases){"",""            Database db = (Database)databases.get(dbKey);"",""            if(db == null){"",""                if(create && !file.isDirectory()){"",""                    CommandCreateDatabase command = new CommandCreateDatabase(con.log, name);"",""                    command.execute(con, null);"",""                }"",""                db = new Database( name, file, con.isReadOnly() );"",""                databases.put(dbKey, db);"",""            }"",""            db.connections.put(con, null);"",""            return db;"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsSchemasInProcedureCalls(),"[""public boolean supportsSchemasInProcedureCalls() {"",""    \treturn false;"",""    }""]"
"/smallsql/database/ExpressionValue/getLong(java.lang.Object,int)","[""static long getLong(Object obj, int dataType) throws Exception{"",""       if(obj == null) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                return (obj == Boolean.TRUE) ? 1 : 0;"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""            case SQLTokenizer.BIGINT:"",""            case SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.MONEY:"",""                return ((Number)obj).longValue();"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\treturn ((DateTime)obj).getTimeMillis();"",""            default: "",""            \tString str = obj.toString();"",""            \tif(str.indexOf(\'-\') \> 0 || str.indexOf(\':\') \> 0)"",""            \t\treturn DateTime.parse(str);"",""\t\t\t\ttry{"",""\t\t\t\t\treturn Long.parseLong( str );"",""\t\t\t\t}catch(NumberFormatException e){"",""\t\t\t\t\treturn (long)Double.parseDouble( str );"",""\t\t\t\t}"",""        }"",""    }""]"
/smallsql/database/Expression/getString(),"[""abstract String getString() throws Exception;""]"
/smallsql/junit/TestOperatoren/TestOperatoren(smallsql.junit.TestOperatoren.TestValue),"[""TestOperatoren(TestValue testValue){"",""        super(testValue.dataType);"",""        this.testValue = testValue;"",""    }""]"
/smallsql/junit/TestMoneyRounding/tearDown(),"[""public void tearDown(){"",""        try{"",""            Connection con = AllTests.getConnection();"",""            Statement st = con.createStatement();"",""            st.execute(\""drop table \"" + table);"",""            st.close();"",""        }catch(Throwable e){"",""            //e.printStackTrace();"",""        }"",""    }""]"
/smallsql/database/SSResultSet/wasNull(),"[""public boolean wasNull(){"",""        return wasNull;"",""    }""]"
/smallsql/database/SortedResult/isExpressionsFromThisRowSource(smallsql.database.Expressions),"[""/**"",""     * @inheritDoc"",""     */"",""    boolean isExpressionsFromThisRowSource(Expressions columns){"",""        return rowSource.isExpressionsFromThisRowSource(columns);"",""    }""]"
/smallsql/database/SQLParser/where(smallsql.database.CommandSelect),"[""private void where(CommandSelect cmd) throws SQLException{"",""        cmd.setWhere( expression(cmd, 0) );"",""    }""]"
/smallsql/database/SQLParser/isKeyword(smallsql.database.SQLToken),"[""final private boolean isKeyword(SQLToken token){"",""    \tif(token == null) return false;"",""    \tswitch(token.value){"",""    \t\tcase SQLTokenizer.SELECT:"",""    \t\tcase SQLTokenizer.INSERT:"",""    \t\tcase SQLTokenizer.UPDATE:"",""    \t\tcase SQLTokenizer.UNION:"",""    \t\tcase SQLTokenizer.FROM:"",""    \t\tcase SQLTokenizer.WHERE:"",""    \t\tcase SQLTokenizer.GROUP:"",""    \t\tcase SQLTokenizer.HAVING:"",""\t\t\tcase SQLTokenizer.ORDER:"",""    \t\tcase SQLTokenizer.COMMA:"",""\t\t\tcase SQLTokenizer.SET:"",""            case SQLTokenizer.JOIN:"",""            case SQLTokenizer.LIMIT:"",""    \t\t\treturn true;"",""    \t}"",""    \treturn false;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsAlterTableWithAddColumn(),"[""public boolean supportsAlterTableWithAddColumn() {"",""        /**@todo: Implement this java.sql.DatabaseMetaData method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method supportsAlterTableWithAddColumn() not yet implemented.\"");"",""    }""]"
"/smallsql/database/ExpressionValue/createUnsupportedConversion(int,java.lang.Object,int)","[""static SQLException createUnsupportedConversion( int fromDataType, Object obj, int toDataType ){"",""\t\tObject[] params = {"",""\t\t\tSQLTokenizer.getKeyWord(fromDataType),"",""\t\t\tobj,"",""\t\t\tSQLTokenizer.getKeyWord(toDataType)"",""\t\t};"",""\t\t"",""        return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION, params);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/updatesAreDetected(int),"[""public boolean updatesAreDetected(int type) {"",""\t\treturn false;"",""    }""]"
/smallsql/database/SSResultSet/getObject(java.lang.String),"[""public Object getObject(String columnName) throws SQLException {"",""        return getObject( findColumn( columnName ) );"",""    }""]"
/smallsql/database/ExpressionArithmetic/getInt(),"[""int getInt() throws java.lang.Exception {"",""        if(isNull()) return 0;"",""        int dataType = getDataType();"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""\t\t\t\treturn getBoolean() ? 1 : 0;"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""\t\t\t\treturn getIntImpl();"",""            case SQLTokenizer.BIGINT:"",""                return (int)getLongImpl();"",""\t\t\tcase SQLTokenizer.REAL:"",""                return (int)getFloatImpl();"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""            \t// FIXME: bug! if get returns a number outside of"",""            \t// integer interval, it\'s not rounded to max/min, "",""            \t// instead it returns a wrong value"",""                return (int)getDoubleImpl();"",""        }"",""        throw createUnspportedConversion( SQLTokenizer.INT);"",""    }""]"
/smallsql/database/RowSource/hasAlias(),"[""/**"",""\t * Returns true if a alias was set and no more alias can be set. "",""\t * This is used from the SQLParser"",""\t * @return "",""\t */"",""    boolean hasAlias(){"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/getLong(),"[""long getLong() throws Exception {"",""\t\treturn ExpressionValue.getLong( getObject(), getDataType() );"",""\t}""]"
/smallsql/database/MutableNumeric/add(int[]),"[""/**"",""     * Add the value to the current MutableNumeric Object and change it."",""     * The parameter \<code\>val2\</code\> has a shorter or equals length."",""     * The signum of both values is equals."",""     * @param val2 the added value"",""     */"",""    private void add( int[] val2){"",""        long temp = 0;"",""        int v1 = value.length;"",""        for(int v2 = val2.length; v2\>0; ){"",""            temp = (value[--v1] & 0xFFFFFFFFL) + (val2 [--v2] & 0xFFFFFFFFL) + (temp \>\>\> 32);"",""            value[v1] = (int)temp;"",""        }"",""        boolean uebertrag = (temp \>\>\> 32) != 0;"",""        while(v1 \> 0 && uebertrag)"",""            uebertrag = (value[--v1] = value[v1] + 1) == 0;"","""",""        // resize if needed"",""        if(uebertrag){"",""\t\t\tresizeValue(1);"",""        }"",""    }""]"
/smallsql/junit/TestJoins/runTest(),"[""public void runTest() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        ResultSet rs;"","""",""        rs = st.executeQuery(\""Select * from \"" + table + \"" where 1 = 0\"");"",""        assertFalse( \""To many rows\"", rs.next() );"","""",""        assertRowCount( 7, \""Select * from \"" + table);"",""        assertRowCount( 49, \""Select * from \"" + table + \"" t1, \"" + table2 + \"" t2\"");"",""        assertRowCount( 0, \""Select * from \"" + table + \"", \"" + table3);"",""        assertRowCount( 49, \""Select * from (\""+ table +\""), \"" + table2);"",""        assertRowCount( 49, \""Select * from \"" + table + \"" Cross Join \"" + table2);"",""        assertRowCount( 13, \""Select * from \"" + table + \"" INNER JOIN \"" + table2 + \"" ON \"" + table + \"".a = \"" + table2 + \"".c\"");"",""        assertRowCount( 13, \""Select * from \"" + table + \""       JOIN \"" + table2 + \"" ON \"" + table2 + \"".c = \"" + table + \"".a\"");"",""        assertRowCount( 13, \""Select * from {oj \"" + table + \"" INNER JOIN \"" + table2 + \"" ON \"" + table + \"".a = \"" + table2 + \"".c}\"");"",""        assertRowCount( 13, \""Select * from \"" + table + \"" AS t1 INNER JOIN \"" + table2 + \"" t2 ON t1.a = t2.c\"");"",""        assertRowCount( 13, \""Select * from {oj \"" + table + \"" t1 INNER JOIN \"" + table2 + \"" t2 ON t1.a = t2.c}\"");"",""        assertRowCount( 4, \""Select * from \"" + table + \"" t1 INNER JOIN \"" + table2 + \"" t2 ON t1.a = t2.c and t1.b=t2.d\"");"",""        assertRowCount( 4, \""Select * from \"" + table + \"" t1       JOIN \"" + table2 + \"" t2 ON t1.a = t2.c and t2.d=t1.b\"");"",""        assertRowCount( 7, \""Select * from \"" + table + \"" t1 LEFT OUTER JOIN \"" + table2 + \"" t2 ON t1.a = t2.c and t1.b=t2.d\"");"",""        assertRowCount( 7, \""Select * from \"" + table + \"" t1 LEFT       JOIN \"" + table2 + \"" t2 ON t1.a = t2.c and t1.b=t2.d\"");"",""        assertRowCount( 15, \""Select * from \"" + table + \"" t1 LEFT OUTER JOIN \"" + table2 + \"" t2 ON t1.a = t2.c\"");"",""        assertRowCount( 7, \""Select * from \"" + table + \"" t1 LEFT OUTER JOIN \"" + table3 + \"" t2 ON t1.a = t2.c\"");"",""        assertRowCount( 7, \""Select * from \"" + table + \"" t1 RIGHT OUTER JOIN \"" + table2 + \"" t2 ON t1.a = t2.c and t1.b=t2.d\"");"",""        assertRowCount( 7, \""Select * from \"" + table + \"" t1 RIGHT OUTER JOIN \"" + table2 + \"" t2 ON false\"");"",""        assertRowCount( 15, \""Select * from \"" + table + \"" t1 RIGHT OUTER JOIN \"" + table2 + \"" t2 ON t1.a = t2.c\"");"",""        assertRowCount( 0, \""Select * from \"" + table + \"" t1 RIGHT OUTER JOIN \"" + table3 + \"" t2 ON t1.a = t2.c\"");"",""        assertRowCount( 14, \""Select * from \"" + table + \"" t1 FULL OUTER JOIN \"" + table2 + \"" t2 ON 1=0\"");"",""        assertRowCount( 17, \""Select * from \"" + table + \"" t1 FULL OUTER JOIN \"" + table2 + \"" t2 ON t1.a = t2.c\"");"",""\t\tassertRowCount( 7, \""Select * from \"" + table + \"" t1 FULL OUTER JOIN \"" + table3 + \"" t2 ON t1.a = t2.c\"");"",""\t\tassertRowCount( 7, \""Select * from \"" + table3 + \"" t1 FULL OUTER JOIN \"" + table + \"" t2 ON t1.c = t2.a\"");"",""        assertRowCount( 5, \""Select * from \"" + table + \"" INNER JOIN (SELECT DISTINCT c FROM \"" + table2 + \"") t1 ON \"" + table + \"".a = t1.c\"");"",""        "",""        st.close();"",""    }""]"
"/smallsql/database/SSStatement/SSStatement(smallsql.database.SSConnection,int,int)","[""SSStatement(SSConnection con, int rsType, int rsConcurrency) throws SQLException{"",""        this.con = con;"",""        this.rsType = rsType;"",""        this.rsConcurrency = rsConcurrency;"",""        con.testClosedConnection();"",""    }""]"
"/smallsql/database/Utils/indexOf(int,int[])","[""static int indexOf( int value, int[] list ){"",""        int offset = 0;"",""        for(int end = list.length; offset \< end; offset++){"",""            if((list[offset]) == value) return offset;"",""        }"",""        return -1;"",""    }""]"
/smallsql/database/ExpressionFunctionDayOfWeek/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(param1.isNull()) return 0;"",""\t\treturn DateTime.dayOfWeek(param1.getLong())+1;"",""\t}""]"
/smallsql/database/MemoryResult/last(),"[""final boolean last(){"",""\t\trowIdx = rowList.size() - 1;"",""\t\treturn move();"",""\t}""]"
/smallsql/database/ExpressionFunctionAscii/getObject(),"[""final Object getObject() throws Exception {"",""\t\tString str = param1.getString();"",""\t\tif(str == null || str.length() == 0) return null;"",""\t\treturn Utils.getInteger(str.charAt(0));"",""\t}""]"
/smallsql/database/StoreImpl/readLongString(),"[""String readLongString() throws Exception{"",""        long lobFilePos = readLong();"",""        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );"",""        if(store == null) throw SmallSQLException.create(Language.LOB_DELETED);"",""        return new String(store.readChars( store.readInt() ) );"",""    }""]"
/smallsql/database/ViewResult/getDouble(int),"[""double getDouble(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getDouble();"",""\t}""]"
/smallsql/database/SQLParser/drop(),"[""private Command drop() throws SQLException{"",""        SQLToken tokenType = nextToken(COMMANDS_DROP);"",""        "",""\t\tString catalog;"",""\t\tString name = catalog = nextIdentifier();"",""        name = nextIdentiferPart( name );"",""        if(name == catalog) catalog = null;"","""",""        switch(tokenType.value){"",""            case SQLTokenizer.DATABASE:"",""            case SQLTokenizer.TABLE:"",""            case SQLTokenizer.VIEW:"",""            case SQLTokenizer.INDEX:"",""            case SQLTokenizer.PROCEDURE:"",""            \treturn new CommandDrop( con.log, catalog, name, tokenType.value);"",""            default:"",""                throw createSyntaxError( tokenType, COMMANDS_DROP );"",""        }"",""    }""]"
/smallsql/database/MutableNumeric/setScale(int),"[""void setScale(int newScale){"",""\t\tif(newScale == scale) return;"",""\t\tint factor = 1;"",""\t\tif(newScale \> scale){"",""\t\t\tfor(;newScale\>scale; scale++){"",""\t\t\t\tfactor *=10;"",""\t\t\t\tif(factor == 1000000000){"",""\t\t\t\t\tmul(factor);"",""\t\t\t\t\tfactor = 1;"",""\t\t\t\t}"",""\t\t\t}"",""\t\t\tmul(factor);"",""\t\t}else{"",""\t\t\tfor(;newScale\<scale; scale--){"",""\t\t\t\tfactor *=10;"",""\t\t\t\tif(factor == 1000000000){"",""\t\t\t\t\tdivImpl(factor);"",""\t\t\t\t\tfactor = 1;"",""\t\t\t\t}"",""\t\t\t}"",""\t\t\tdivImpl(factor);\t\t"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionFunctionCharLen/isNull(),"[""boolean isNull() throws Exception {"",""        return param1.isNull();"",""    }""]"
/smallsql/database/SSResultSet/beforeFirst(),"[""public void beforeFirst() throws SQLException {"",""    \ttry{"",""            moveToCurrentRow();"",""    \t\tgetCmd().beforeFirst();"",""    \t}catch(Exception e){"",""    \t\tthrow SmallSQLException.createFromException(e);"",""    \t}"",""    }""]"
"/smallsql/database/SSResultSet/getDate(java.lang.String,java.util.Calendar)","[""public Date getDate(String columnName, Calendar cal) throws SQLException {"",""        return getDate( findColumn( columnName ), cal );"",""    }""]"
/smallsql/database/ExpressionFunctionReturnInt/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn String.valueOf(getInt());"",""\t}""]"
/smallsql/junit/TestDataTypes/suite(),"[""public static Test suite() throws Exception{"",""        TestSuite theSuite = new TestSuite(\""Data Types\"");"",""        for(int i=0; i\<DATATYPES.length; i++){"",""            theSuite.addTest(new TestDataTypes( DATATYPES[i] ) );"",""        }"",""        return theSuite;"",""    }""]"
/smallsql/database/NoFromResult/isLast(),"[""final boolean isLast(){"",""\t\treturn rowPos == 1;"",""\t}""]"
/smallsql/junit/TestDBMetaData/testGetConnection(),"[""public void testGetConnection() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        assertEquals(con, md.getConnection());"",""    }""]"
/smallsql/junit/TestTransactions/testReadCommited(),"[""public void testReadCommited() throws Exception{"",""\t\tConnection con1 = AllTests.getConnection();"",""\t\tConnection con2 = AllTests.createConnection();"",""\t\ttry{\t\t"",""\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );"",""\t\t\tcon1.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tcon1.setAutoCommit(false);"",""\t\t\tcon1.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert2\')\"");"","""",""\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\""Select count(*) from transactions\"");"",""\t\t\tassertTrue( rs2.next() );"",""\t\t\tassertEquals( 0, rs2.getInt(1) );"",""\t\t}finally{"",""            dropTable(con1, \""transactions\"");"",""\t\t\tcon1.setAutoCommit(true);"",""\t\t\tcon2.close();"",""\t\t}"",""\t}""]"
/smallsql/database/MemoryStream/writeLong(long),"[""void writeLong(long value){"",""\t\tverifyFreePufferSize(8);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 56);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 48);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 40);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 32);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 24);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 16);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 8);"",""\t\tpuffer[ offset++ ] = (byte)(value);"",""\t}""]"
/smallsql/database/SSResultSet/updateNull(int),"[""public void updateNull(int columnIndex) throws SQLException {"",""\t\tupdateValue( columnIndex, null, SQLTokenizer.NULL);"",""    }""]"
/smallsql/junit/TestGroupBy/testViewWidthGroupBy(),"[""/**"",""\t * A problem can be the metadata from a View."",""\t * @throws Exception"",""\t */"",""\tpublic void testViewWidthGroupBy() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\ttry{"",""\t\t\tResultSet rs;"",""\t\t\tst.execute(\""Create View qry\"" + table1 + \"" as Select name, name as name2, count(*) as count FROM \"" + table1 + \"" Group By name\"");"",""\t\t\trs = st.executeQuery(\""Select * from qry\"" + table1);"",""\t\t\tassertEquals( \""name\"",  rs.getMetaData().getColumnLabel(1) );"",""\t\t\tassertEquals( \""name2\"", rs.getMetaData().getColumnLabel(2) );"",""\t\t\tassertEquals( \""count\"", rs.getMetaData().getColumnLabel(3) );"",""\t\t}finally{"",""\t\t\tst.execute(\""Drop View qry\"" + table1);"",""\t\t}"",""\t}""]"
/smallsql/database/DataSource/getFloat(int),"[""abstract float getFloat( int colIdx ) throws Exception;""]"
/smallsql/database/Column/setAutoIncrement(boolean),"[""void setAutoIncrement(boolean identity){"",""        this.identity = identity;"",""    }""]"
/smallsql/database/ExpressionFunctionChar/getDataType(),"[""final int getDataType() {"",""\t\treturn SQLTokenizer.CHAR;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getSQLKeywords(),"[""public String getSQLKeywords() {"",""    \treturn \""database,use\"";"",""    }""]"
/smallsql/junit/TestTokenizer/successTest(java.lang.String),"[""private void successTest(String sql) throws SQLException {"",""//\t\tout.println(SQL_1);"",""\t\t"",""\t\tResultSet rs_1 = stat.executeQuery(sql);"",""\t\trs_1.next();"",""\t\trs_1.close();"",""\t}""]"
/smallsql/database/SSResultSet/updateRow(),"[""public void updateRow() throws SQLException {"",""        try {"",""        \tif(values == null){"",""                // no changes then also no update needed"",""                return;"",""            }"",""       \t\tst.con.log.println(\""updateRow()\"");"",""            testNotInsertRow();"",""            final CommandSelect command = getCmd();"",""            command.updateRow( st.con, values);"",""            command.relative(0);  //refresh the row"",""            clearRowBuffer();"",""        } catch (Exception e) {"",""            throw SmallSQLException.createFromException(e);"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsMultipleResultSets(),"[""public boolean supportsMultipleResultSets() {"",""    \treturn true;"",""    }""]"
/smallsql/database/Money/Money(double),"[""public Money(double value){"",""        this.value = (long)(value * 10000);"",""    }""]"
/smallsql/database/ExpressionArithmetic/getBestNumberDataType(int),"[""/**"",""\t * Return the best data type for a complex number operation. This method return only "",""\t * SQLTokenizer.INT,"",""\t * SQLTokenizer.BIGINT,"",""\t * SQLTokenizer.MONEY,"",""\t * SQLTokenizer.DECIMAL or"",""\t * SQLTokenizer.DOUBLE."",""\t * @param paramDataType"",""\t */"",""\tstatic int getBestNumberDataType(int paramDataType){"",""\t\tint dataTypeIdx = Utils.indexOf( paramDataType, DatatypeRange);"",""\t\tif(dataTypeIdx \>= NVARCHAR_IDX)"",""\t\t\treturn SQLTokenizer.DOUBLE;"",""\t\tif(dataTypeIdx \>= INT_IDX)"",""\t\t\treturn SQLTokenizer.INT;"",""\t\tif(dataTypeIdx \>= BIGINT_IDX)"",""\t\t\treturn SQLTokenizer.BIGINT;"",""\t\tif(dataTypeIdx \>= MONEY_IDX)"",""\t\t\treturn SQLTokenizer.MONEY;"",""\t\tif(dataTypeIdx \>= DECIMAL_IDX)"",""\t\t\treturn SQLTokenizer.DECIMAL;"",""\t\treturn SQLTokenizer.DOUBLE;"",""\t}""]"
"/smallsql/junit/TestTokenizer/failureTest(java.lang.String,java.lang.String)","[""private void failureTest(String sql, String failureMessage) {"",""\t\ttry {"",""\t\t\tstat.executeQuery(sql);"",""\t\t\tfail(failureMessage);"",""\t\t}"",""\t\tcatch (SQLException e) {"",""\t\t\t// just to check the error, if it happens, is the expected one"",""\t\t\tout.println(\""REGULAR: \"" + e.getMessage() + \'\\n\');"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnFloat/getDataType(),"[""final int getDataType() {"",""\t\treturn SQLTokenizer.FLOAT;"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getVersionColumns(java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {"",""\t\ttry {"",""\t\t\tString[] colNames = {\""SCOPE\"", \""COLUMN_NAME\"", \""DATA_TYPE\"", \""TYPE_NAME\"", \""COLUMN_SIZE\"", \""BUFFER_LENGTH\"", \""DECIMAL_DIGITS\"", \""PSEUDO_COLUMN\""};"",""\t\t\tObject[][] data   = new Object[0][0];"",""\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""\t\t} catch (Exception e) {"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
"/smallsql/database/Utils/indexOf(char,char[],int,int)","[""static int indexOf( char value, char[] str, int offset, int length ){"",""        value |= 0x20;"",""        for(int end = offset+length;offset \< end; offset++){"",""            if((str[offset] | 0x20) == value) return offset;"",""        }"",""        return -1;"",""    }""]"
/smallsql/database/IndexDescriptions/resize(int),"[""private final void resize(int newSize){"",""\t\tIndexDescription[] dataNew = new IndexDescription[newSize];"",""\t\tSystem.arraycopy(data, 0, dataNew, 0, size);"",""\t\tdata = dataNew;\t\t"",""\t}""]"
"/smallsql/database/IndexDescription/writeExpression(int,smallsql.database.Expression)","[""/**"",""\t * This is call if a single colum of the table is changed."",""\t * @param columnIdx The column position in the table"",""\t * @param valueExpression the new value of the current row."",""\t */"",""\tfinal void writeExpression( int columnIdx, Expression valueExpression) {"",""\t\tint idx = matrix[columnIdx];"",""\t\tif(idx \>= 0) //set only if the column part of this index"",""\t\t\texpressions.set(idx, valueExpression);"",""\t}""]"
/smallsql/database/IndexNode/getRemainderValue(),"[""final char[] getRemainderValue(){"",""\t\treturn remainderKey;"",""\t}""]"
/smallsql/database/TableResult/updateRow(smallsql.database.Expression[]),"[""/**"",""\t * {@inheritDoc}"",""\t */"",""\t@Override"",""    final void updateRow(Expression[] updateValues) throws Exception{"",""\t\tColumns tableColumns = table.columns;"",""\t\tint count = tableColumns.size();"",""\t\t\t"",""\t\tStoreImpl newStore = table.getStoreTemp(con);"",""\t\t"",""\t\t// the write lock only prevent access from other connections "",""\t\t// but not access from other threads from the same connection"",""\t\t// This can produce NPE if another thread commit pages of this thread"",""\t\tsynchronized(con.getMonitor()){"",""\t\t    ((StoreImpl)this.store).createWriteLock();"",""\t\t"",""    \t\tfor(int i=0; i\<count; i++){"",""    \t\t\tExpression src = updateValues[i];"",""    \t\t\tif(src != null){"",""    \t\t\t    //System.err.println(src.getInt()+\"" \""+ ++xx);"",""    \t\t\t\tnewStore.writeExpression( src, tableColumns.get(i) );"",""    \t\t\t}else{"",""    \t\t\t\tcopyValueInto( i, newStore );"",""    \t\t\t}"",""    \t\t}"",""    \t\t((StoreImpl)this.store).updateFinsh(con, newStore);"",""\t\t}"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getMaxColumnsInGroupBy(),"[""public int getMaxColumnsInGroupBy() {"",""    \treturn 0;"",""    }""]"
/smallsql/database/MutableNumeric/sub(int[]),"[""/**"",""     * Subtract the value to the current MutableNumeric Object and change it."",""     * The parameter \<code\>val2\</code\> has a shorter or equals length."",""     * The signum of both values is equals."",""     * @param val2 the subtracted  value"",""     */"",""    private void sub(int[] val2){"",""        long temp = 0;"",""        int v1 = value.length;"",""        for(int v2 = val2.length; v2\>0; ){"",""            temp = (value[--v1] & 0xFFFFFFFFL) - (val2 [--v2] & 0xFFFFFFFFL) + (temp \>\>\>= 32);"",""            value[v1] = (int)temp;"",""        }"","""",""        boolean uebertrag = (temp \>\>\> 32) != 0;"",""        while(v1 \> 0 && uebertrag)"",""            uebertrag = (value[--v1] = value[v1] - 1) == -1;"","""",""        if(uebertrag){"",""            signum = -signum;"",""            int last = value.length-1;"",""            for(int i=0; i\<=last; i++){"",""                value[i] = (i == last) ? -value[i] : ~value[i];"",""            }"",""        }"",""    }""]"
"/smallsql/database/ExpressionName/setFrom(smallsql.database.DataSource,int,smallsql.database.TableView)","[""/**"",""     * Set the DataSource and the index in the DataSource. The first column has the index 0."",""     * The Table object is using to request the Column description."",""     */"",""    void setFrom( DataSource fromEntry, int colIdx, TableView table ){"",""        this.fromEntry  = fromEntry;"",""        this.colIdx     = colIdx;"",""        this.table      = table;"",""        // Because the DataSource is a TableResult the colIdx of both is identical"",""        this.column\t\t= table.columns.get(colIdx);"",""    }""]"
/smallsql/database/Command/addColumnExpression(smallsql.database.Expression),"[""/**"",""     * Add a Expression that returns the value for Column. This method is used"",""     * from SQLParser for different Commands (CommandSelect, CommandInsert)."",""     * @see SQLParser#select()"",""     * @see SQLParser#insert()"",""     */"",""    void addColumnExpression( Expression column ) throws SQLException{"",""        columnExpressions.add( column );"",""    }""]"
/smallsql/database/language/Language_de/Language_de(),"[""protected Language_de() {"",""\t\taddMessages(ENTRIES);"",""\t}""]"
"/smallsql/database/SQLParser/expressionTokenList(smallsql.database.Command,int)","[""/**"",""     * Read a list of expressions. The list is limit from specific SQL keywords like SELECT, GROUP BY, ORDER BY"",""     */"",""    private Expressions expressionTokenList(Command cmd, int listType) throws SQLException{"",""\t\tExpressions list = new Expressions();"",""        while(true){"",""        \tExpression expr = expression(cmd, 0);"",""            list.add( expr );"",""            SQLToken token = nextToken();"",""            "",""\t\t\tif(listType == SQLTokenizer.ORDER && token != null){"",""\t\t\t\tswitch(token.value){"",""\t\t\t\t\tcase SQLTokenizer.DESC:"",""\t\t\t\t\t\texpr.setAlias(SQLTokenizer.DESC_STR);"",""\t\t\t\t\t\t//no break;"",""\t\t\t\t\tcase SQLTokenizer.ASC:"",""\t\t\t\t\t\ttoken = nextToken();"",""\t\t\t\t}\t\t\t\t"",""\t\t\t}"",""\t\t\t"",""\t\t\tif(token == null) {"",""\t\t\t\tpreviousToken();"",""\t\t\t\treturn list;"",""\t\t\t}"","""",""\t\t\tswitch(token.value){"",""                case SQLTokenizer.COMMA:"",""                    continue;"",""                default:"",""\t\t\t\t\tif(isKeyword(token) ){"",""\t\t\t\t\t\tpreviousToken();"",""\t\t\t\t\t\treturn list;"",""\t\t\t\t\t}"",""                    throw createSyntaxError( token, MISSING_TOKEN_LIST);"",""            }"",""        }"",""    }""]"
/smallsql/database/LongTreeList/getPrevious(smallsql.database.LongTreeListEnum),"[""/**"",""\t * Get the next long value from this list."",""     * If there are no more values then it return -1."",""\t * @return"",""\t */"",""\tfinal long getPrevious(LongTreeListEnum listEnum){"",""\t\tint shift = (3-listEnum.stack) \<\< 4;"",""\t\tif(shift \>= 64){ //a previous call of getNext() has return -1"",""\t\t\tshift = 48;"",""\t\t\toffset = 0;"",""\t\t\tlistEnum.stack = 0;"",""\t\t\tlistEnum.offsetStack[0] = 2 + pointerSize;"",""\t\t\tloopToEndOfNode(listEnum);"",""\t\t}else{"",""\t\t\tsetPreviousOffset(listEnum);"",""\t\t}"",""\t\tlong result = listEnum.resultStack[listEnum.stack];"",""\t\twhile(true){"",""\t\t\tint nextEntry = (offset \< 0) ? -1 : getUnsignedShort();"",""\t\t\tif(nextEntry \>= 0){"",""\t\t\t\t// there are more entries in this node"",""\t\t\t\tresult |= (((long)nextEntry) \<\< shift);"",""\t\t\t\tif(listEnum.stack\>=3){"",""\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;"",""\t\t\t\t\treturn result;"",""\t\t\t\t}"",""\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;"",""\t\t\t\toffset = getPointer();"",""\t\t\t\tshift -= 16;"",""\t\t\t\tlistEnum.stack++;"",""\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;"",""\t\t\t\tloopToEndOfNode(listEnum);"",""\t\t\t}else{"",""\t\t\t\t//no more entries in this node"",""\t\t\t\tshift += 16;"",""\t\t\t\tlistEnum.stack--;"",""\t\t\t\tif(listEnum.stack\<0) return -1; // no more entries"",""\t\t\t\tresult = listEnum.resultStack[listEnum.stack];"",""\t\t\t\tsetPreviousOffset(listEnum);"",""\t\t\t}"",""\t\t}"",""\t}""]"
"/smallsql/database/MutableNumeric/MutableNumeric(int,int[],int)","[""MutableNumeric(int signum, int[] value, int scale){"",""        this.signum = signum;"",""        this.value  = value;"",""        this.scale  = scale;"",""    }""]"
"/smallsql/database/FileIndexNode/createIndexNode(boolean,char)","[""@Override"",""    protected IndexNode createIndexNode(boolean unique, char digit){"",""        return new FileIndexNode(unique, digit, file);"",""    }""]"
/smallsql/database/CommandTable/addIndex(smallsql.database.IndexDescription),"[""void addIndex( IndexDescription indexDescription ) throws SQLException{"",""\t\tindexes.add(indexDescription);"",""\t}""]"
/smallsql/database/Expression/setName(java.lang.String),"[""final void setName(String name){ "",""\t\tthis.alias = this.name = name; "",""\t}""]"
/smallsql/database/SSConnection/isClosed(),"[""public boolean isClosed(){"",""        return (commitPages == null);"",""    }""]"
/smallsql/database/DataSource/getTableView(),"[""abstract TableView getTableView();""]"
/smallsql/database/Scrollable/noRow(),"[""void noRow() {"",""\t\trowSource.noRow();"",""\t\trowIdx = -1;"",""\t}""]"
/smallsql/database/LongTreeList/removeNodeLastLevel(),"[""/**"",""\t * Remove a octet entry on the current offset for one of the first 3 levels. "",""\t * Then set it the pointer in the new entry to the new node "",""\t * @param octet a short value"",""\t */"",""\tfinal private void removeNodeLastLevel() throws SQLException{"",""\t\tint oldOffset = offset;"",""\t\t"",""\t\t//correct all offset that point behind the old node"",""\t\tcorrectPointers( 0, oldOffset, -2, 0 );"","""",""\t\tsize -= 2;"",""\t\tSystem.arraycopy(data, oldOffset + 2, data, oldOffset, size-oldOffset);"","""",""\t\toffset = oldOffset;"",""\t}""]"
/smallsql/database/Money/intValue(),"[""public int intValue() {"",""        return (int)(value / 10000.0);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/storesUpperCaseQuotedIdentifiers(),"[""public boolean storesUpperCaseQuotedIdentifiers() {"",""    \treturn false;"",""    }""]"
/smallsql/database/StoreImpl/readColumn(int),"[""/**"",""\t * Read a single Column description on the current file offset."",""\t * @param table The parent table of the column."",""\t * @param tableFormatVersion the file version of the table."",""\t * @return"",""\t * @throws Exception"",""\t */"",""    Column readColumn(int tableFormatVersion) throws Exception{"",""        Column column = new Column();"",""        column.setFlag( readByte() );"",""        column.setName( readString() );"",""        column.setDataType( readShort() );"",""\t\tint precision;"",""\t\tif(tableFormatVersion == TableView.TABLE_VIEW_OLD_VERSION)"",""\t\t\tprecision = readByte();"",""\t\telse"",""\t\t\tprecision = readInt();"",""\t\tcolumn.setPrecision( precision );"",""\t\tcolumn.setScale( readByte() );"",""\t\toffset += column.initAutoIncrement(storePage.raFile, filePos+offset);"",""\t\tif(!readBoolean()){"",""\t\t\tString def = readString();"",""\t\t\tcolumn.setDefaultValue( new SQLParser().parseExpression(def), def);"",""\t\t}"",""        return column;"",""    }""]"
/smallsql/database/IndexDescriptions/get(int),"[""final IndexDescription get(int idx){"",""\t\t// SAVER: use SmallSQLException"",""\t\tif (idx \>= size)"",""\t\t\tthrow new IndexOutOfBoundsException(\""Column index: \""+idx+\"", Size: \""+size);"",""\t\treturn data[idx];"",""\t}""]"
/smallsql/database/Index/numericToBinarySortOrder(smallsql.database.MutableNumeric),"[""final static private char[] numericToBinarySortOrder(MutableNumeric numeric){"",""\t\tint[] value = numeric.getInternalValue();"",""\t\tint count = 1;"",""\t\tint i;"",""\t\tfor(i=0; i\<value.length; i++){"",""\t\t\tif(value[i] != 0){"",""\t\t\t\tcount = 2*(value.length - i)+1;"",""\t\t\t\tbreak;"",""\t\t\t}"",""\t\t}"",""\t\tchar[] puffer = new char[count];"",""\t\tpuffer[0] = (char)count;"",""\t\tfor(int c=1; c\<count;){"",""\t\t\tpuffer[c++] = (char)(value[i] \>\> 16);"",""\t\t\tpuffer[c++] = (char)value[i++];"",""\t\t}"",""\t\treturn puffer;"",""\t}""]"
/smallsql/database/SortedResult/isFirst(),"[""final boolean isFirst(){"",""        return row == 1;"",""    }""]"
/smallsql/database/RowSource/previous(),"[""boolean previous() throws Exception{"",""\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);"",""\t}""]"
/smallsql/database/StoreImpl/readTime(),"[""long readTime(){"",""        return readInt() * 1000L;"",""    }""]"
/smallsql/junit/TestScrollable/testFirstWithWhereAssert(java.sql.ResultSet),"[""private void testFirstWithWhereAssert(ResultSet rs) throws Exception{"",""        assertFalse( \""isFirst\"", rs.isFirst() );"",""        assertTrue( rs.isBeforeFirst() );"",""        assertFalse( \""There should be no rows:\"", rs.first());"",""        assertFalse( \""isFirst\"", rs.isFirst() );"",""        assertTrue( rs.isBeforeFirst() );"",""        try{"",""            rs.getString(\""v\"");"",""            fail(\""SQLException \'No current row\' should be throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""01000\"", 0, ex);"",""        }"",""    }""]"
"/smallsql/database/Index/addValues(long,smallsql.database.Expressions)","[""/**"",""\t * Add a value to the index."",""\t * @param rowOffset Is the value that is save in the index. It is typical a row number or a rowOffset."",""\t * @param expressions This is the list of ORDER BY columns and describe the position in the index."",""\t */"",""\tfinal void addValues( long rowOffset, Expressions expressions ) throws Exception{"",""\t\tIndexNode page = this.rootPage;"",""\t\tint count = expressions.size();"",""\t\tfor(int i=0; i\<count; i++){"",""\t\t\tExpression expr = expressions.get(i);"",""\t\t\tboolean isLastValues = (i == count-1);"",""\t\t\tif(expr.isNull()){"",""\t\t\t\tpage = addNull(page, rowOffset, isLastValues);"",""\t\t\t}else{"",""\t\t\t\tswitch(expr.getDataType()){"",""\t\t\t\t\tcase SQLTokenizer.REAL:"",""\t\t\t\t\t\tpage = add( page, rowOffset, floatToBinarySortOrder( expr.getFloat()), isLastValues, 2 );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\t\t\t\tpage = add( page, rowOffset, doubleToBinarySortOrder( expr.getDouble()), isLastValues, 4 );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\t\t\t\tpage = add( page, rowOffset, expr.getInt(), isLastValues, 1 );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\t\t\t\tpage = add( page, rowOffset, shortToBinarySortOrder( expr.getInt()), isLastValues, 1 );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\t\t\tpage = add( page, rowOffset, intToBinarySortOrder( expr.getInt()), isLastValues, 2 );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:"",""\t\t\t\t\t\tpage = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\t\t\tcase SQLTokenizer.NVARCHAR:"",""\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:"",""\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), false ), isLastValues );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.NCHAR:"",""\t\t\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), true ), isLastValues );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:"",""\t\t\t\t\tcase SQLTokenizer.BLOB:"",""\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:"",""\t\t\t\t\t\tpage = add( page, rowOffset, bytesToBinarySortOrder( expr.getBytes()), isLastValues );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.BIT:"",""\t\t\t\t\tcase SQLTokenizer.BOOLEAN:"",""\t\t\t\t\t\tpage = add( page, rowOffset, expr.getBoolean() ? 2 : 1, isLastValues, 1 );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\t\t\tpage = add( page, rowOffset, numericToBinarySortOrder( expr.getNumeric()), isLastValues );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tdefault: "",""\t\t\t\t\t\t//TODO more data types"",""\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));"",""\t\t\t\t}"",""\t\t\t}"",""\t\t}\t\t"",""\t}""]"
"/smallsql/database/CommandCreateDatabase/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""@Override"",""    void executeImpl(SSConnection con, SSStatement st) throws Exception{"",""        if( con.isReadOnly() ){"",""            throw SmallSQLException.create(Language.DB_READONLY);"",""        }"",""        File dir = new File( name );"",""        dir.mkdirs();"",""        if(!new File(dir, Utils.MASTER_FILENAME).createNewFile()){"",""        \tthrow SmallSQLException.create(Language.DB_EXISTENT, name);"",""        }"",""    }""]"
/smallsql/junit/TestGroupBy/testMinString(),"[""public void testMinString() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( STR_VALUE1, \""Select min(name) FROM \"" + table1);"",""\t}""]"
/smallsql/database/Money/toByteArray(),"[""private byte[] toByteArray(){"",""    \tbyte[] bytes = new byte[8];"",""    \t"",""\t\tint offset = 0;"",""\t\tbytes[offset++] = (byte)(value \>\> 56);"",""\t\tbytes[offset++] = (byte)(value \>\> 48);"",""\t\tbytes[offset++] = (byte)(value \>\> 40);"",""\t\tbytes[offset++] = (byte)(value \>\> 32);"",""\t\tbytes[offset++] = (byte)(value \>\> 24);"",""\t\tbytes[offset++] = (byte)(value \>\> 16);"",""\t\tbytes[offset++] = (byte)(value \>\> 8);"",""\t\tbytes[offset++] = (byte)(value);"",""    \treturn bytes;"",""    }""]"
/smallsql/database/ViewResult/getString(int),"[""String getString(int colIdx) throws Exception {"",""\t\treturn columnExpressions.get(colIdx).getString();"",""\t}""]"
/smallsql/database/TableResult/getRowPosition(),"[""/**"",""\t * Get the position of the row in the file. This is equals to the rowOffset."",""\t */"",""\t@Override"",""    final long getRowPosition(){"",""\t\treturn filePos;"",""\t}""]"
/smallsql/database/Scrollable/rowDeleted(),"[""final boolean rowDeleted(){"",""\t\treturn rowSource.rowDeleted();"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnInt/isNull(),"[""boolean isNull() throws Exception {"",""\t\treturn param1.isNull();"",""\t}""]"
"/smallsql/database/SSCallableStatement/SSCallableStatement(smallsql.database.SSConnection,java.lang.String)","[""SSCallableStatement( SSConnection con, String sql ) throws SQLException {"",""        super( con, sql );"",""    }""]"
/smallsql/database/DateTime/parse(java.util.Date),"[""static long parse(java.util.Date date){"",""\t\tlong t = date.getTime();"",""\t\treturn removeDateTimeOffset(t);"",""\t}""]"
/smallsql/database/ExpressionValue/initValue(smallsql.database.Expression),"[""/**"",""     * Init a summary field with a Mutable "",""     * @param expr the expression that produce the values which should be summary"",""     * @throws Exception"",""     */"",""\tprivate void initValue(Expression expr) throws Exception{"",""\t\tdataType = expr.getDataType();"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\tvalue = new MutableInteger(expr.getInt());"",""\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\tvalue = new MutableLong(expr.getLong());"",""\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.REAL:"",""\t\t\t\tvalue = new MutableFloat(expr.getFloat());"",""\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\tvalue = new MutableDouble(expr.getDouble());"",""\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.SMALLMONEY:"",""\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\t\tvalue = Money.createFromUnscaledValue(expr.getMoney());"",""\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\tvalue = new MutableNumeric(expr.getNumeric());"",""\t\t\t\tbreak;"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\tvalue = new DateTime(expr.getLong(), dataType);"",""\t\t\t\tbreak;"",""\t\t\tdefault: "",""\t\t\t\t// is used for MAX and MIN"",""\t\t\t\tvalue = expr.getObject();"",""\t\t}"",""\t}""]"
"/smallsql/database/Database/getTableView(smallsql.database.SSConnection,java.lang.String,java.lang.String)","[""static TableView getTableView(SSConnection con, String catalog, String tableName) throws SQLException{"",""    \treturn getDatabase( con, catalog).getTableView( con, tableName);"",""    }""]"
/smallsql/database/ExpressionFunctionSin/getFunction(),"[""final int getFunction(){ return SQLTokenizer.SIN; }""]"
/smallsql/database/SSCallableStatement/getDate(java.lang.String),"[""public Date getDate(String parameterName) throws SQLException {"",""        return getDate( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxProcedureNameLength(),"[""public int getMaxProcedureNameLength() {"",""    \treturn 255;"",""    }""]"
/smallsql/database/ExpressionFunctionReturnInt/getDouble(),"[""final double getDouble() throws Exception {"",""\t\treturn getInt();"",""\t}""]"
"/smallsql/database/SSResultSet/updateCharacterStream(java.lang.String,java.io.Reader,int)","[""public void updateCharacterStream(String columnName, Reader x, int length) throws SQLException {"",""        updateCharacterStream( findColumn( columnName ), x, length );"",""    }""]"
"/smallsql/database/CommandSelect/CommandSelect(smallsql.database.Logger,smallsql.database.Expressions)","[""CommandSelect(Logger log, Expressions columnExpressions){"",""\t\tsuper(log, columnExpressions);"",""\t}""]"
/smallsql/junit/TestDeleteUpdate/testDelete(),"[""public void testDelete() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tdropTable(con,\""testDelete\"");"",""\t\tStatement st = con.createStatement();"",""\t\tst.execute(\""create table testDelete(a int default 15)\"");"",""\t\tfor(int i=0; i\<10; i++){"",""\t\t\tst.execute(\""Insert into testDelete Values(\""+i+\"")\"");"",""\t\t}"",""\t\tassertRowCount( 10, \""Select * from testDelete\"");"",""\t\t"",""\t\tst.execute(\""delete from testDelete Where a=3\"");"",""\t\tassertRowCount( 9, \""Select * from testDelete\"");"",""\t\t"",""\t\tst.execute(\""delete from testDelete Where a\<5\"");"",""\t\tassertRowCount( 5, \""Select * from testDelete\"");"",""\t\t"",""\t\tst.execute(\""delete from testDelete\"");"",""\t\tassertRowCount( 0, \""Select * from testDelete\"");"",""\t\tdropTable(con,\""testDelete\"");"",""\t}""]"
/smallsql/database/ExpressionFunctionCase/setEnd(),"[""/**"",""\t * The structure is finish"",""\t */"",""\tfinal void setEnd(){"",""\t\tExpression[] params = new Expression[cases.size()*2 + (elseResult!=null ? 1 : 0)];"",""\t\tint i=0;"",""\t\tfor(int p=0; p\<cases.size(); p++){"",""\t\t\tparams[i++] = cases  .get( p );"",""\t\t\tparams[i++] = results.get( p );"",""\t\t}"",""\t\tif(i\<params.length)"",""\t\t\tparams[i] = elseResult;"",""\t\tsuper.setParams(params);"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setByte(int,byte)","[""public void setByte(int parameterIndex, byte x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.TINYINT);"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsResultSetHoldability(int),"[""public boolean supportsResultSetHoldability(int holdability) {"",""\t\treturn true;"",""    }""]"
"/smallsql/database/SQLToken/SQLToken(java.lang.String,int,int,int)","[""/**"",""\t * Constructor used for quoted strings "",""\t */"",""\tSQLToken (String name, int value, int tokenStart, int tokenEnd){"",""\t\tthis.value  = value;"",""\t\tthis.offset = tokenStart;"",""\t\tthis.length = tokenEnd-tokenStart;"",""\t\tthis.name   = name;"",""\t}""]"
"/smallsql/database/ExpressionValue/getBoolean(java.lang.Object,int)","[""static boolean getBoolean(Object obj, int dataType) throws Exception{"",""        if(obj == null) return false;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                return (obj.equals(Boolean.TRUE));"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""            case SQLTokenizer.BIGINT:"",""                return ((Number)obj).intValue() != 0;"",""            case SQLTokenizer.REAL:"",""            case SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.MONEY:"",""                return ((Number)obj).doubleValue() != 0;"",""            default: return Utils.string2boolean( obj.toString() );"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionBitLen/isNull(),"[""boolean isNull() throws Exception {"",""        return param1.isNull();"",""    }""]"
/smallsql/database/IndexNode/getDigit(),"[""final char getDigit(){"",""\t\treturn digit;"",""\t}""]"
/smallsql/junit/TestOrderBy/testOrderBy_varchar_asc(),"[""public void testOrderBy_varchar_asc() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tString oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by v ASC\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = rs.getString(\""v\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getString(\""v\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tString newValue = rs.getString(\""v\"");"",""\t\t\tassertTrue( oldValue.compareTo( newValue ) \< 0 );"",""\t\t\toldValue = newValue;"",""\t\t\tcount++;"",""\t\t}"",""\t\trs.close();"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/LongTreeList/getUnsignedShort(),"[""/**"",""\t * Read a short value from the index."",""\t */"",""\tfinal private int getUnsignedShort(){"",""\t\treturn ((data[ offset++ ] & 0xFF) \<\< 8) | (data[ offset++ ] & 0xFF);"",""\t}""]"
"/smallsql/database/SSResultSet/updateBinaryStream(int,java.io.InputStream,int)","[""public void updateBinaryStream(int columnIndex, InputStream x, int length) throws SQLException {"",""\t\tupdateValue( columnIndex, x, SQLTokenizer.LONGVARBINARY, length);"",""    }""]"
/smallsql/database/SSPreparedStatement/getMetaData(),"[""public ResultSetMetaData getMetaData() throws SQLException {"",""        checkStatement();"",""\t\tif(cmd instanceof CommandSelect){"",""\t\t\ttry{"",""\t\t\t\t((CommandSelect)cmd).compile(con);"",""\t\t\t\tSSResultSetMetaData metaData = new SSResultSetMetaData();"",""\t\t\t\tmetaData.columns = cmd.columnExpressions;"",""\t\t\t\treturn metaData;"",""\t\t\t}catch(Exception e){"",""\t\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t\t}"",""\t\t}"",""\t\treturn null;"",""    }""]"
"/smallsql/database/SSCallableStatement/registerOutParameter(int,int)","[""/*=============================================================================="","""",""    Public Interface"","""",""==============================================================================*/"",""    public void registerOutParameter(int i, int sqlType) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method registerOutParameter() not yet implemented.\"");"",""    }""]"
/smallsql/database/StoreNull/StoreNull(),"[""StoreNull(){"",""\t\tthis(-1);"",""\t}""]"
"/smallsql/database/SSResultSet/getTime(java.lang.String,java.util.Calendar)","[""public Time getTime(String columnName, Calendar cal) throws SQLException {"",""        return getTime( findColumn( columnName ), cal );"",""    }""]"
/smallsql/database/SSCallableStatement/getBigDecimal(int),"[""public BigDecimal getBigDecimal(int i) throws SQLException {"",""        try{"",""            MutableNumeric obj = getValue(i).getNumeric();"",""            wasNull = obj == null;"",""            if(wasNull) return null;"",""            return obj.toBigDecimal();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/StoreNoCurrentRow/getUsedSize(),"[""int getUsedSize() {"",""\t\t// TODO Auto-generated method stub"",""\t\treturn 0;"",""\t}""]"
/smallsql/database/MemoryStream/writeByte(int),"[""void writeByte(int value){"",""\t\tverifyFreePufferSize(1);"",""\t\tpuffer[ offset++ ] = (byte)(value);"",""\t}""]"
/smallsql/database/IndexNode/isEmpty(),"[""/**"",""\t * Returns the current status for the digit."",""\t * @param digit The digit must be in the range 0 between 255. "",""\t */"",""\tfinal boolean isEmpty(){"",""\t\treturn nodes == EMPTY_NODES && value == null;"",""\t}""]"
/smallsql/database/Expression/isNull(),"[""abstract boolean isNull() throws Exception;""]"
/smallsql/database/Expressions/setSize(int),"[""final void setSize(int newSize){"",""\t\tfor(int i=newSize; i\<size; i++) data[i] = null;"",""\t\tsize = newSize;"",""\t\tif(size\>data.length) resize(newSize);"",""\t}""]"
/smallsql/database/CommandSelect/first(),"[""/**"",""     * Is used from ResultSet.first()."",""     */"",""    boolean first() throws Exception{"",""\t\treturn from.first();"",""    }""]"
/smallsql/database/SSCallableStatement/getString(int),"[""public String getString(int i) throws SQLException {"",""        try{"",""            String obj = getValue(i).getString();"",""            wasNull = obj == null;"",""            return obj;"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionReturnString/getMoney(),"[""final long getMoney() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Money.parseMoney(getString().trim());"",""\t}""]"
/smallsql/database/SortedResult/isBeforeFirst(),"[""final boolean isBeforeFirst(){"",""        return row == 0;"",""    }""]"
/smallsql/database/UnionAll/getBoolean(int),"[""final boolean getBoolean(int colIdx) throws Exception {"",""\t\treturn currentDS.getBoolean(colIdx);"",""\t}""]"
/smallsql/database/SSCallableStatement/getDouble(int),"[""public double getDouble(int i) throws SQLException {"",""        try{"",""            Expression expr = getValue(i);"",""            wasNull = expr.isNull();"",""            return expr.getLong();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/storesLowerCaseQuotedIdentifiers(),"[""public boolean storesLowerCaseQuotedIdentifiers() {"",""    \treturn false;"",""    }""]"
/smallsql/database/ForeignKeys/ForeignKeys(),"[""ForeignKeys(){"",""\t\tdata = new ForeignKey[16];"",""\t}""]"
/smallsql/database/SSConnection/getDatabase(boolean),"[""/**"",""     * @param returnNull If null is a valid return value for the case of not connected to a database."",""     * @throws SQLException If not connected and returnNull is false."",""     */"",""    Database getDatabase(boolean returnNull) throws SQLException{"",""        testClosedConnection();"",""    \tif(!returnNull && database == null) throw SmallSQLException.create(Language.DB_NOTCONNECTED);"",""    \treturn database;"",""    }""]"
/smallsql/database/SSDriver/getMinorVersion(),"[""public int getMinorVersion() {"",""        return 21;"",""    }""]"
/smallsql/database/CommandDelete/CommandDelete(smallsql.database.Logger),"[""CommandDelete(Logger log){"",""\t\tsuper(log);"",""\t}""]"
/smallsql/database/SSConnection/commit(),"[""public void commit() throws SQLException {"",""        log.println(\""Commit\"");"",""        testClosedConnection();"",""        synchronized(getMonitor()){"",""    \ttry{"",""\t            int count = commitPages.size();"",""\t            for(int i=0; i\<count; i++){"",""\t                TransactionStep page = (TransactionStep)commitPages.get(i);"",""\t                page.commit();"",""\t            }"",""\t\t\t\tfor(int i=0; i\<count; i++){"",""\t\t\t\t    TransactionStep page = (TransactionStep)commitPages.get(i);"",""\t\t\t\t\tpage.freeLock();"",""\t\t\t\t}"",""\t            commitPages.clear();"",""\t            transactionTime = System.currentTimeMillis();"",""    \t}catch(Throwable e){"",""    \t\trollback();"",""    \t\tthrow SmallSQLException.createFromException(e);"",""    \t}"",""        }"",""    }""]"
/smallsql/junit/TestScrollable/testNextWithWhereAssert(java.sql.ResultSet),"[""private void testNextWithWhereAssert(ResultSet rs) throws Exception{"",""        assertFalse(\""There should be no rows:\"", rs.next());"",""        try{"",""            rs.getString(\""v\"");"",""            fail(\""SQLException \'No current row\' should be throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException( \""01000\"", 0, ex);"",""        }"",""    }""]"
"/smallsql/database/SSResultSet/updateValue(int,java.lang.Object,int,int)","[""final private void updateValue(int columnIndex, Object x, int dataType, int length) throws SQLException{"",""\t\tgetUpdateValue( columnIndex ).set( x, dataType, length );"",""\t\tif(st.con.log.isLogging()){"",""\t\t\tst.con.log.println(\""parameter \'\""+metaData.getColumnName(columnIndex)+\""\' = \""+x+\""; type=\""+dataType+\""; length=\""+length);"",""\t\t}"",""\t}""]"
/smallsql/database/SSStatement/setFetchSize(int),"[""final public void setFetchSize(int rows) throws SQLException{"",""        checkStatement();"",""        fetchSize = rows;"",""    }""]"
"/smallsql/database/SSCallableStatement/setCharacterStream(java.lang.String,java.io.Reader,int)","[""public void setCharacterStream(String parameterName, Reader x, int length) throws SQLException {"",""        setCharacterStream( findParameter( parameterName ), x, length );"",""    }""]"
/smallsql/database/ExpressionFunctionIIF/getInt(),"[""int getInt() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.getInt();"",""\t\treturn param3.getInt();"",""\t}""]"
/smallsql/database/NoFromResult/noRow(),"[""final void noRow() {"",""\t\tthrow new Error();"",""\t}""]"
/smallsql/junit/TestGroupBy/testCountOrderBy(),"[""public void testCountOrderBy() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tPreparedStatement pr = con.prepareStatement(\""Select count(*) FROM \"" + table1 + \"" Group By name Order By name DESC\"");"",""\t\tfor(int i=1; i\<=3; i++){"",""\t\t\tResultSet rs = pr.executeQuery( );"",""\t\t\tassertTrue  ( \""loop:\""+i, rs.next());"",""\t\t\tassertEquals( \""loop:\""+i, 1, rs.getInt(1));"",""\t\t\tassertTrue  ( \""loop:\""+i, rs.next());"",""\t\t\tassertEquals( \""loop:\""+i, 3, rs.getInt(1));"",""\t\t}"",""\t}""]"
/smallsql/database/ExpressionFunctionSoundex/getBytes(),"[""final byte[] getBytes() throws Exception{"",""        throw createUnspportedConversion(SQLTokenizer.BINARY);"",""\t}""]"
/smallsql/database/SSResultSet/getBinaryStream(java.lang.String),"[""public InputStream getBinaryStream(String columnName) throws SQLException {"",""        return getBinaryStream( findColumn( columnName ) );"",""    }""]"
/smallsql/database/SortedResult/next(),"[""boolean next() throws Exception {"",""\t\tif(useSetRowPosition) throw SmallSQLException.create(Language.ORDERBY_INTERNAL);"",""        if(currentInsertedRow() \< 0){"",""    \t\tlong rowPosition = scrollStatus.getRowOffset(true);"",""    \t\tif(rowPosition \>= 0){"",""                row++;"",""    \t\t\trowSource.setRowPosition( rowPosition );"",""    \t\t\treturn true;"",""    \t\t}"",""        }"",""        if(currentInsertedRow() \< insertedRows.size()-1){"",""            row++;"",""            rowSource.setRowPosition( insertedRows.get( currentInsertedRow() ) );"",""            return true;"",""        }"",""        if(lastRowOffset \>= 0){"",""            rowSource.setRowPosition( lastRowOffset );"",""        }else{"",""            rowSource.beforeFirst();"",""        }"",""        if(rowSource.next()){"",""            row++;"",""            lastRowOffset = rowSource.getRowPosition();"",""            insertedRows.add( lastRowOffset );"",""            return true;"",""        }"",""        rowSource.noRow();"",""        row = (getRowCount() \> 0) ? getRowCount() + 1 : 0;"",""\t\treturn false;"",""\t}""]"
/smallsql/database/MemoryStream/readChars(int),"[""char[] readChars(int length){"",""\t\tchar[] chars = new char[length];"",""\t\tfor(int i=0; i\<length; i++){"",""\t\t\tchars[i] = (char)readShort();"",""\t\t}"",""\t\treturn chars;"",""\t}""]"
/smallsql/database/MutableLong/longValue(),"[""public long longValue() {"",""\t\treturn value;"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setLong(int,long)","[""public void setLong(int parameterIndex, long x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, new Long(x), SQLTokenizer.BIGINT);"",""    }""]"
/smallsql/database/SSResultSet/rowInserted(),"[""public boolean rowInserted() throws SQLException {"",""    \treturn getCmd().from.rowInserted();"",""    }""]"
/smallsql/database/MemoryResult/previous(),"[""final boolean previous(){"",""\t\tif(rowIdx-- \< 0) rowIdx = -1;"",""\t\treturn move();"",""\t}""]"
/smallsql/database/SSResultSet/afterLast(),"[""public void afterLast() throws SQLException {"",""\t\ttry{"",""\t\t\tif(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);"",""            moveToCurrentRow();"",""            getCmd().afterLast();"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setDouble(int,double)","[""public void setDouble(int parameterIndex, double x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, new Double(x), SQLTokenizer.DOUBLE);"",""    }""]"
"/smallsql/database/SSCallableStatement/getObject(java.lang.String,java.util.Map)","[""public Object getObject(String parameterName, Map map) throws SQLException {"",""        return getObject( findParameter( parameterName ), map );"",""    }""]"
/smallsql/database/Where/first(),"[""final boolean first() throws Exception {"",""\t\tisCurrentRow = rowSource.first();"",""\t\twhile(isCurrentRow && !isValidRow()){"",""\t\t\tisCurrentRow = rowSource.next();"",""\t\t}"",""\t\trow = 1;"",""\t\treturn isCurrentRow;"",""\t}""]"
/smallsql/database/ForeignKeys/get(int),"[""final ForeignKey get(int idx){"",""\t\tif (idx \>= size)"",""\t\t\tthrow new IndexOutOfBoundsException(\""Column index: \""+idx+\"", Size: \""+size);"",""\t\treturn data[idx];"",""\t}""]"
/smallsql/database/IndexNode/findNodePos(char),"[""private final int findNodePos(char digit){"",""\t\treturn findNodePos(digit, 0, nodes.length);"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setNull(int,int)","[""public void setNull(int parameterIndex, int sqlType) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, null, SQLTokenizer.NULL);"",""    }""]"
/smallsql/database/ExpressionFunctionAbs/getObject(),"[""Object getObject() throws Exception{"",""\t\tif(param1.isNull()) return null;"",""        Object para1 = param1.getObject();"",""        switch(param1.getDataType()){"",""        case SQLTokenizer.FLOAT:"",""        case SQLTokenizer.DOUBLE:"",""            double dValue = ((Double)para1).doubleValue();"",""            return (dValue\<0) ? new Double(-dValue) : para1;"",""        case SQLTokenizer.REAL:"",""            double fValue = ((Float)para1).floatValue();"",""            return (fValue\<0) ? new Float(-fValue) : para1;"",""        case SQLTokenizer.BIGINT:"",""            long lValue = ((Number)para1).longValue();"",""            return (lValue\<0) ? new Long(-lValue) : para1;"",""        case SQLTokenizer.TINYINT:"",""        case SQLTokenizer.SMALLINT:"",""        case SQLTokenizer.INT:"",""            int iValue = ((Number)para1).intValue();"",""            return (iValue\<0) ? new Integer(-iValue) : para1;"",""        case SQLTokenizer.NUMERIC:"",""        case SQLTokenizer.DECIMAL:"",""            MutableNumeric nValue = (MutableNumeric)para1;"",""            if(nValue.getSignum() \<0) nValue.setSignum(1);"",""            return nValue;"",""        case SQLTokenizer.MONEY:"",""            Money mValue = (Money)para1;"",""            if(mValue.value \<0) mValue.value = -mValue.value;"",""            return mValue;"",""        default: throw createUnspportedDataType(param1.getDataType());"",""        }"",""    }""]"
/smallsql/junit/BenchTest/createTestTable(java.sql.Connection),"[""/**"",""      *  Create a new Table for testing"",""      */  "",""    static void createTestTable(Connection con) throws SQLException{"",""            Statement st;"",""            st = con.createStatement();"",""            //delete old table"",""            dropTestTable( con );"","""",""            //create table"",""            st.execute("",""                \""CREATE TABLE \"" + tableName + \"" (\""+"",""\t            \""    pr  numeric IDENTITY,\""+"",""\t            \""    bi  binary (255) NULL ,\""+"",""\t            \""    c   nchar (255) NULL ,\""+"",""\t            \""    d   datetime NULL ,\""+"",""\t            \""    de  decimal(18, 0) NULL ,\""+"",""\t            \""    f   float NULL ,\""+"",""\t            \""    im  image NULL ,\""+"",""\t            \""    i   int NULL ,\""+"",""\t            \""    m   money NULL ,\""+"",""\t            \""    n   numeric(18, 0) NULL ,\""+"",""\t            \""    r   real NULL ,\""+"",""\t            \""    sd  smalldatetime NULL ,\""+"",""\t            \""    si  smallint NULL ,\""+"",""\t            \""    sm  smallmoney NULL ,\""+"",""\t            \""    sy  sysname NULL ,\""+"",""\t            \""    t   ntext NULL ,\""+"",""\t            \""    ti  tinyint NULL ,\""+"",""\t            \""    vb  varbinary (255) NULL ,\""+"",""\t            \""    vc  nvarchar (255) NULL, \""+"",""\t            \""CONSTRAINT PK_BenchTest2 PRIMARY KEY CLUSTERED (pr) \""+"",""\t            \"")\"");"",""\t        st.close();  "",""    }""]"
/smallsql/junit/TestOrderBy/testVarbinaryEmpty(),"[""public void testVarbinaryEmpty() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table3 + \"" ORDER  by vb\"");"",""\t\t"",""\t\tassertTrue( rs.next() );\t\t"",""\t\tassertNull( rs.getObject(\""vb\"") );"","""",""\t\tassertTrue( rs.next() );"",""\t\tassertEqualsObject( \""\"", new byte[0], rs.getObject(\""vb\""), false );"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\tassertEqualsObject( \""\"", table3.getBytes(), rs.getObject(\""vb\""), false );"",""\t\t"",""\t\tassertFalse( rs.next() );"",""\t}""]"
/smallsql/junit/TestGroupBy/testWithNullValue(),"[""public void testWithNullValue() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue(new Integer(4), \""Select count(*) FROM \"" + table1 + \"" Group By name+null\"" );"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsMixedCaseIdentifiers(),"[""public boolean supportsMixedCaseIdentifiers() {"",""    \treturn true;"",""    }""]"
/smallsql/database/MutableDouble/doubleValue(),"[""public double doubleValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/database/SSStatement/setEscapeProcessing(boolean),"[""final public void setEscapeProcessing(boolean enable) throws SQLException{"",""        checkStatement();"",""        // TODO enable/disable escape processing"",""    }""]"
"/smallsql/database/StoreNoCurrentRow/getMoney(int,int)","[""long getMoney(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/Distinct/isExpressionsFromThisRowSource(smallsql.database.Expressions),"[""/**"",""     * @inheritDoc"",""     */"",""    boolean isExpressionsFromThisRowSource(Expressions columns){"",""        return rowSource.isExpressionsFromThisRowSource(columns);"",""    }""]"
"/smallsql/database/SSDatabaseMetaData/getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {"",""\t\ttry {"",""\t\t\tString[] colNames = {\""PKTABLE_CAT\"", \""PKTABLE_SCHEM\"", \""PKTABLE_NAME\"", \""PKCOLUMN_NAME\"", \""FKTABLE_CAT\"", \""FKTABLE_SCHEM\"", \""FKTABLE_NAME\"", \""FKCOLUMN_NAME\"", \""KEY_SEQ\"", \""UPDATE_RULE\"", \""DELETE_RULE\"", \""FK_NAME\"", \""PK_NAME\"", \""DEFERRABILITY\""};"",""\t\t\tObject[][] data   = con.getDatabase(false).getReferenceKeys(con, primaryTable, foreignTable);"",""\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""\t\t} catch (Exception e) {"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
/smallsql/database/TableViewMap/values(),"[""Collection values(){"",""        return map.values();"",""    }""]"
/smallsql/junit/TestOrderBy/testOrderBy_int(),"[""public void testOrderBy_int() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tInteger oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by i\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = (Integer)rs.getObject(\""i\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = (Integer)rs.getObject(\""i\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\""i\"") ) \< 0 );"",""\t\t\toldValue = (Integer)rs.getObject(\""i\"");"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/StoreImpl/readDate(),"[""long readDate(){"",""        return readInt() * 86400000L;"",""    }""]"
/smallsql/database/CommandSelect/findColumn(java.lang.String),"[""/**"",""\t * The returning index start at 0."",""\t */"",""\tpublic int findColumn(String columnName) throws SQLException {"",""\t\tExpressions columns = columnExpressions;"",""\t\t// FIXME performance"",""\t\tfor(int i=0; i\<columns.size(); i++){"",""\t\t\tif(columnName.equalsIgnoreCase(columns.get(i).getAlias()))"",""\t\t\t\treturn i;"",""\t\t}"",""\t\tthrow SmallSQLException.create(Language.COL_MISSING, columnName);"",""\t}""]"
/smallsql/database/CommandSelect/setSource(smallsql.database.RowSource),"[""/**"",""\t * Set the RowSource expression from the FROM clause. "",""\t * The Simples case is only a Table (TableResult)"",""\t */"",""    final void setSource(RowSource join){"",""        this.from = join;"",""    }""]"
/smallsql/database/IndexNode/addRoot(),"[""/**"",""\t * Return the root IndexNode for the digit. If does not exists then it create one. "",""\t * @param digit"",""\t */"",""\tfinal IndexNode addRoot() throws SQLException{"",""\t\tIndexNode root = (IndexNode)value;"",""\t\tif(root == null){"",""\t\t\tvalue = root = createIndexNode(unique, (char)-1);"",""\t\t}"",""\t\treturn root;"",""\t}""]"
/smallsql/database/ExpressionFunctionConvert/getFloat(),"[""float getFloat() throws Exception {"",""\t\treturn ExpressionValue.getFloat( getObject(), getDataType() );"",""\t}""]"
/smallsql/database/Scrollable/isLast(),"[""boolean isLast() throws Exception{"",""        if(rowIdx+1 != rowList.size()){"",""            // there are more rows after the current row (rowIdx+1 \< rowList.size())"",""            // or we are after the last row (rowIdx+1 \> rowList.size())"",""            return false; "",""        }"",""\t\tboolean isNext = next();"",""        previous();"",""        return !isNext && (rowIdx+1 == rowList.size() && rowList.size()\>0);"",""\t}""]"
/smallsql/database/ExpressionFunctionCase/getInt(),"[""final int getInt() throws Exception {"",""\t\treturn getResult().getInt();"",""\t}""]"
/smallsql/database/CommandSelect/setDistinct(boolean),"[""/**"",""\t * Set if the keyword DISTINCT occur in the SELECT expression. "",""\t */"",""\tfinal void setDistinct(boolean distinct){"",""\t\tthis.isDistinct = distinct;"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnInt/getBoolean(),"[""final boolean getBoolean() throws Exception {"",""\t\treturn getInt() != 0;"",""\t}""]"
/smallsql/database/TableResult/getBytes(int),"[""@Override"",""    final byte[] getBytes( int colIdx ) throws Exception{"",""        return store.getBytes( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/getObject(),"[""Object getObject() throws Exception {"",""\t\tif(param1.isNull()) return null;"",""\t\tfinal int dataType = getDataType();"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""\t\t\t\treturn convertToString();"",""\t\t\tcase SQLTokenizer.VARCHAR:{"",""\t\t\t\tString str = convertToString();"",""\t\t\t\tint length = datatype.getDisplaySize();"",""\t\t\t\tif(length \> str.length())"",""\t\t\t\t\treturn str;"",""\t\t\t\treturn str.substring(0,length);"",""\t\t\t}"",""\t\t\tcase SQLTokenizer.CHAR:{"",""\t\t\t\tString str = convertToString();"",""\t\t\t\tint length = datatype.getDisplaySize();"",""\t\t\t\tif(length \> str.length()){"",""\t\t\t\t\tchar[] buffer = new char[length-str.length()];"",""\t\t\t\t\tArrays.fill(buffer, \' \');"",""\t\t\t\t\treturn str + new String(buffer);"",""\t\t\t\t}"",""\t\t\t\treturn str.substring(0,length);"",""\t\t\t}"",""\t\t\tcase SQLTokenizer.LONGVARBINARY:"",""\t\t\t\treturn param1.getBytes();"",""\t\t\tcase SQLTokenizer.VARBINARY:{"",""\t\t\t\tbyte[] bytes = param1.getBytes();"",""\t\t\t\tint length = datatype.getPrecision();"",""\t\t\t\tif(length \< bytes.length){"",""\t\t\t\t\tbyte[] buffer = new byte[length];"",""\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );"",""\t\t\t\t\treturn buffer;"",""\t\t\t\t}"",""\t\t\t\treturn bytes;"",""\t\t\t\t"",""\t\t\t}"",""\t\t\tcase SQLTokenizer.BINARY:{"",""\t\t\t\tbyte[] bytes = param1.getBytes();"",""\t\t\t\tint length = datatype.getPrecision();"",""\t\t\t\tif(length != bytes.length){"",""\t\t\t\t\tbyte[] buffer = new byte[length];"",""\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );"",""\t\t\t\t\treturn buffer;"",""\t\t\t\t}"",""\t\t\t\treturn bytes;"",""\t\t\t\t"",""\t\t\t}"",""\t\t\tcase SQLTokenizer.BOOLEAN:"",""\t\t\tcase SQLTokenizer.BIT:"",""\t\t\t\treturn param1.getBoolean() ? Boolean.TRUE : Boolean.FALSE;"",""\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\t\treturn Utils.getInteger(param1.getInt() & 0xFF);"",""\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\t\treturn Utils.getInteger((short)param1.getInt());"",""\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\treturn Utils.getInteger(param1.getInt());"",""\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\treturn new Long(param1.getLong());"",""\t\t\tcase SQLTokenizer.REAL:"",""\t\t\t\treturn new Float(param1.getFloat());"",""\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\treturn new Double(param1.getDouble());"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\treturn new DateTime( getDateTimeLong(), dataType );"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\tMutableNumeric num = param1.getNumeric();"",""\t\t\t\tif(num != null && (dataType == SQLTokenizer.NUMERIC || dataType == SQLTokenizer.DECIMAL))"",""\t\t\t\t\tnum.setScale(getScale());"",""\t\t\t\treturn num;"",""\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\tcase SQLTokenizer.SMALLMONEY:"",""\t\t\t\treturn Money.createFromUnscaledValue(param1.getMoney());"",""\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:"",""\t\t\t\tswitch(param1.getDataType()){"",""\t\t\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""\t\t\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\t\t\t\treturn Utils.bytes2unique( Utils.unique2bytes(param1.getString()), 0);"",""\t\t\t\t}"",""\t\t\t\treturn Utils.bytes2unique(param1.getBytes(), 0);"",""\t\t}"",""\t\tObject[] param = { SQLTokenizer.getKeyWord(dataType) };"",""\t\tthrow SmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV, param);"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getMoney(),"[""final long getMoney() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Money.parseMoney(getString().trim());"",""\t}""]"
/smallsql/database/Command/getQueryResult(),"[""SSResultSet getQueryResult() throws SQLException{"",""        if(rs == null)"",""        \tthrow SmallSQLException.create(Language.RSET_NOT_PRODUCED);"",""        return rs;"",""    }""]"
/smallsql/database/UnionAll/first(),"[""final boolean first() throws Exception {"",""\t\tdataSourceIdx = 0;"",""\t\tcurrentDS = dataSources.get(0);"",""\t\tboolean b = currentDS.first();"",""\t\trow = b ? 1 : 0;"",""\t\treturn b;"",""\t}""]"
/smallsql/database/SSCallableStatement/getTimestamp(int),"[""public Timestamp getTimestamp(int i) throws SQLException {"",""        try{"",""            Expression expr = getValue(i);"",""            wasNull = expr.isNull();"",""            if(wasNull) return null;"",""            return DateTime.getTimestamp( expr.getLong() );"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/StoreImpl/writeFloat(float),"[""void writeFloat(float value){"",""        writeInt( Float.floatToIntBits(value) );"",""    }""]"
/smallsql/database/CommandSelect/beforeFirst(),"[""/**"",""     * Is used from ResultSet.beforeFirst()."",""     *"",""     */"",""    void beforeFirst() throws Exception{"",""\t\tfrom.beforeFirst();"",""    }""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getString(),"[""String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn new DateTime( getLong(), SQLTokenizer.TIMESTAMP ).toString();"",""\t}""]"
/smallsql/database/GroupResult/addGroupRow(),"[""/**"",""\t * Add a new Row to the MemoryResult. This occur because the "",""\t * GROUP BY clause of the current row not relate to an exists row. "",""\t *"",""\t */"",""\tfinal private void addGroupRow(){"",""\t\t// add a new row to the GroupResult"",""\t\tExpressionValue[] newRow = currentRow = new ExpressionValue[ expressions.size()];"",""\t\tfor(int i=0; i\<newRow.length; i++){"",""\t\t\tExpression expr = expressions.get(i);"",""\t\t\tint type = expr.getType();"",""\t\t\tif(type \< Expression.GROUP_BEGIN) type = Expression.GROUP_BY; "",""\t\t\tnewRow[i] = new ExpressionValue( type );"",""\t\t}"",""\t\taddRow(newRow);"",""\t}""]"
/smallsql/database/SortedResult/isAfterLast(),"[""final boolean isAfterLast(){"",""        int rowCount = getRowCount();"",""        return row \> rowCount || rowCount == 0;"",""    }""]"
/smallsql/database/SQLParser/from(smallsql.database.CommandSelect),"[""private void from(CommandSelect cmd) throws SQLException{"",""\t\tDataSources tables = new DataSources();"",""        cmd.setTables(tables);"",""        cmd.setSource( rowSource( cmd, tables, 0 ) );"","""",""\t\tSQLToken token;"",""        while(null != (token = nextToken())){"",""            switch(token.value){"",""                case SQLTokenizer.WHERE:"",""                    where( cmd );"",""                    break;"",""                case SQLTokenizer.GROUP:"",""                    group( cmd );"",""                    break;"",""                case SQLTokenizer.HAVING:"",""                    having( cmd );"",""                    break;"",""                default:"",""                \tpreviousToken();"",""                    return;"",""            }"",""        }"",""    }""]"
/smallsql/database/Columns/size(),"[""final int size(){"",""\t\treturn size;"",""\t}""]"
"/smallsql/database/SSCallableStatement/setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)","[""public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {"",""        setTimestamp( findParameter( parameterName ), x, cal );"",""    }""]"
/smallsql/database/LongTreeList/LongTreeList(smallsql.database.StoreImpl),"[""/**"",""\t * Restore a LongTreeList from a MemoryStream."",""\t */"",""\tLongTreeList(StoreImpl input){"",""\t\tint readSize = input.readInt();"",""\t\tdata     = input.readBytes(readSize);"",""\t}""]"
/smallsql/database/Where/beforeFirst(),"[""final void beforeFirst() throws Exception {"",""\t\trowSource.beforeFirst();"",""\t\trow = 0;"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException {"",""\t\tString[] colNames = {\""PROCEDURE_CAT\"", \""PROCEDURE_SCHEM\"", \""PROCEDURE_NAME\"", \""COLUMN_NAME\"", \""COLUMN_TYPE\"", \""DATA_TYPE\"", \""TYPE_NAME\"", \""PRECISION\"", \""LENGTH\"", \""SCALE\"", \""RADIX\"", \""NULLABLE\"", \""REMARKS\"" };"",""\t\tObject[][] data   = new Object[0][];"",""\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""    }""]"
/smallsql/database/Expression/getBoolean(),"[""abstract boolean getBoolean() throws Exception;""]"
"/smallsql/database/CommandInsert/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""void executeImpl(SSConnection con, SSStatement st) throws Exception {"",""        // on first time and on change of the table we need to recompile"",""        if(table == null || tableTimestamp != table.getTimestamp()) compile( con );"","""",""\t\tfinal IndexDescriptions indexes = table.indexes;"",""\t\t"",""\t\tupdateCount = 0;"",""\t\tcmdSel.from.execute();"",""\t\tcmdSel.beforeFirst();"",""        "",""        //Variables for GeneratedKeys"",""        Strings keyColumnNames = null;"",""        ArrayList keys = null;"",""        boolean needGeneratedKeys = st.needGeneratedKeys();"",""        int generatedKeysType = 0;"","""",""        while(cmdSel.next()){"",""            if(needGeneratedKeys){"",""                keyColumnNames = new Strings();"",""                keys = new ArrayList();"",""                if(st.getGeneratedKeyNames() != null)"",""                    generatedKeysType = 1;"",""                if(st.getGeneratedKeyIndexes() != null)"",""                    generatedKeysType = 2;"",""            }"",""\t        StoreImpl store = table.getStoreInsert( con );"",""\t        for(int c=0; c\<matrix.length; c++){"",""\t            Column column = table.columns.get(c);"",""\t            int idx = matrix[c];"",""\t            Expression valueExpress;"",""                if(idx \>= 0){"",""                    valueExpress = cmdSel.columnExpressions.get(idx);"",""                }else{"",""                    valueExpress = column.getDefaultValue(con);"",""                    if(needGeneratedKeys && generatedKeysType == 0 && valueExpress != Expression.NULL){"",""                        keyColumnNames.add(column.getName());"",""                        keys.add(valueExpress.getObject());"",""                    }"",""                }"",""                if(needGeneratedKeys && generatedKeysType == 1){"",""                    String[] keyNames = st.getGeneratedKeyNames();"",""                    for(int i=0; i\<keyNames.length; i++){"",""                        if(column.getName().equalsIgnoreCase(keyNames[i])){"",""                            keyColumnNames.add(column.getName());"",""                            keys.add(valueExpress.getObject());"",""                            break;"",""                        }"",""                    }"",""                }"",""                if(needGeneratedKeys && generatedKeysType == 2){"",""                    int[] keyIndexes = st.getGeneratedKeyIndexes();"",""                    for(int i=0; i\<keyIndexes.length; i++){"",""                        if(c+1 == keyIndexes[i]){"",""                            keyColumnNames.add(column.getName());"",""                            keys.add(valueExpress.getObject());"",""                            break;"",""                        }"",""                    }"",""                }"",""\t            store.writeExpression( valueExpress, column );"",""\t\t\t\tfor(int i=0; i\<indexes.size(); i++){"",""\t\t\t\t\tindexes.get(i).writeExpression( c, valueExpress );"",""\t\t\t\t}"",""\t        }"",""\t        store.writeFinsh( con );"",""\t\t\tfor(int i=0; i\<indexes.size(); i++){"",""\t\t\t\tindexes.get(i).writeFinish( con );"",""\t\t\t}"",""\t        updateCount++;"",""            if(needGeneratedKeys){"",""                Object[][] data = new Object[1][keys.size()];"",""                keys.toArray(data[0]);"",""                st.setGeneratedKeys(new SSResultSet( st, Utils.createMemoryCommandSelect( con, keyColumnNames.toArray(), data)));"",""            }"",""        }"",""    }""]"
/smallsql/database/SSConnection/clearWarnings(),"[""public void clearWarnings(){"",""        //TODO support for Warnings"",""    }""]"
/smallsql/database/ExpressionFunctionCase/setParams(smallsql.database.Expression[]),"[""final void setParams( Expression[] params ){"",""\t\tsuper.setParams(params);"",""\t\tint i = 0;"",""\t\tfor(int p=0; p\<cases.size(); p++){"",""\t\t\tcases  .set( p, params[i++]);"",""\t\t\tresults.set( p, params[i++]);"",""\t\t}"",""\t\tif(i\<params.length)"",""\t\t\telseResult = params[i];"",""\t}""]"
/smallsql/database/StoreNull/isNull(int),"[""final boolean isNull(int offset) {"",""\t\treturn true;"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getLong(),"[""final long getLong() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Long.parseLong(getString().trim());"",""\t}""]"
"/smallsql/database/StoreNull/getLong(int,int)","[""final long getLong(int offset, int dataType) throws Exception {"",""\t\treturn 0;"",""\t}""]"
/smallsql/database/ExpressionFunctionAbs/getFloat(),"[""float getFloat() throws Exception{"",""        return Math.abs( param1.getFloat() );"",""    }""]"
/smallsql/database/SSCallableStatement/getTimestamp(java.lang.String),"[""public Timestamp getTimestamp(String parameterName) throws SQLException {"",""        return getTimestamp( findParameter( parameterName ) );"",""    }""]"
"/smallsql/database/SSCallableStatement/setNull(java.lang.String,int)","[""public void setNull(String parameterName, int sqlType) throws SQLException {"",""        setNull( findParameter( parameterName ), sqlType );"",""    }""]"
/smallsql/junit/TestDBMetaData/testGetProcedures(),"[""public void testGetProcedures() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        ResultSet rs = md.getProcedures( null, null, \""*\"");"",""        String[] colNames = {\""PROCEDURE_CAT\"", \""PROCEDURE_SCHEM\"", \""PROCEDURE_NAME\"", \""\"", \""\"", \""\"", \""REMARKS\"", \""PROCEDURE_TYPE\""};"",""        int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };"",""        assertRSMetaData( rs, colNames, colTypes);"",""    }""]"
"/smallsql/database/StoreImpl/writeBinary(byte[],int,boolean)","[""void writeBinary( byte[] daten, int lengthColumn, boolean varBinary ) throws SQLException{"",""        int length = daten.length;"","""",""        if(lengthColumn \< length){"",""        \tObject params = new Object[] { new Integer(length), new Integer(lengthColumn) };"",""            throw SmallSQLException.create(Language.VALUE_BIN_TOOLARGE, params);"",""        }"",""        if(varBinary) lengthColumn = length;"",""    \tint newSize = offset + 2 + lengthColumn;"",""        if(newSize \> page.length) resizePage(newSize);"","""",""        page[ offset++ ] = (byte)(lengthColumn \>\> 8);"",""        page[ offset++ ] = (byte)(lengthColumn);"",""        writeBytes( daten );"",""        if(!varBinary){"",""            for(int i=length; i\<lengthColumn; i++){"",""                page[ offset++ ] = 0;"",""            }"",""        }"",""    }""]"
/smallsql/database/TableStorePage/getData(),"[""byte[] getData(){"",""    \treturn page;"",""    }""]"
/smallsql/database/ExpressionFunctionReplace/getPrecision(),"[""int getPrecision() {"",""        return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );"",""    }""]"
/smallsql/database/Index/createScrollStatus(smallsql.database.Expressions),"[""IndexScrollStatus createScrollStatus(Expressions expressions){"",""\t\treturn new IndexScrollStatus(rootPage, expressions);"",""\t}""]"
/smallsql/database/UnionAll/isNull(int),"[""final boolean isNull(int colIdx) throws Exception {"",""\t\treturn currentDS.isNull(colIdx);"",""\t}""]"
/smallsql/database/DateTime/getTime(long),"[""static Time getTime(long time){"",""\t\treturn new Time( DateTime.addDateTimeOffset(time) ); "",""\t}""]"
/smallsql/database/GroupResult/patchExpression(smallsql.database.Expression),"[""/**"",""\t * Patch a single Expression. The caller need to replace the original Object"",""\t * if the return value return another object."",""\t * @param expr the Expression to patch"",""\t * @return on simple columns and Aggregatfunction the original Expression is return as patch."",""\t */"",""\tfinal private Expression patchExpression(Expression expr) throws SQLException{"",""\t\t//find the index in the internalExpression list"",""\t\tint idx = addInternalExpressionFromSelect( expr );"",""\t\tif(idx\>=0){"",""            Expression origExpression = expr;"",""\t\t\tExpressionName exprName;"",""\t\t\tif(expr instanceof ExpressionName){"",""\t\t\t\texprName = (ExpressionName)expr;"",""\t\t\t}else{"",""\t\t\t\t// this can only occur if in the GROUP BY clause are a function or arithmetic expression"",""\t\t\t\t// and a equals expression is used in SELECT, GROUP BY or HAVING"",""\t\t\t\texpr = exprName = new ExpressionName(expr.getAlias());"",""\t\t\t}"",""\t\t\t// patch the expression and set a new DataSource"",""\t\t\tColumn column = exprName.getColumn();"",""\t\t\tif(column == null){"",""\t\t\t\tcolumn = new Column();"",""                exprName.setFrom(this, idx, column);"",""\t\t\t\tswitch(exprName.getType()){"",""\t\t\t\t\tcase Expression.MAX:"",""\t\t\t\t\tcase Expression.MIN:"",""\t\t\t\t\tcase Expression.FIRST:"",""\t\t\t\t\tcase Expression.LAST:"",""\t\t\t\t\tcase Expression.SUM:"",""\t\t\t\t\t\tExpression baseExpression = exprName.getParams()[0];"",""\t\t\t\t\t\tcolumn.setPrecision(baseExpression.getPrecision());"",""\t\t\t\t\t\tcolumn.setScale(baseExpression.getScale());"",""\t\t\t\t\t\tbreak;"",""                    default:"",""                        column.setPrecision(origExpression.getPrecision());"",""                        column.setScale(origExpression.getScale());"",""\t\t\t\t}"",""\t\t\t\tcolumn.setDataType(exprName.getDataType());"",""\t\t\t}else{"",""\t\t\t\texprName.setFrom(this, idx, column);"",""\t\t\t}"",""\t\t}else{"",""\t\t\tpatchExpressions(expr);"",""\t\t}"",""\t\treturn expr;"",""\t}""]"
/smallsql/database/language/Language/getLanguage(java.lang.String),"[""/**"",""\t * Return a Language instance.\<br\>"",""\t * Defaults to ENGLISH language.\<br\>"",""\t * Warning: there is difference between locale strings like \'en_EN\' and"",""\t * \'en_UK\': it\'s advised to pass only the first two characters."",""\t * "",""\t * @param localeStr"",""\t *            Locale.toString() value for Language. Nullable, for ENGLISH."",""\t * @return Language instance."",""\t * @throws InstantiationException"",""\t *             Error during instantiation, i.e. duplicate entry found."",""\t */"",""\tpublic static Language getLanguage(String localeStr) {"",""\t\ttry {"",""\t\t\treturn getFromLocaleTree(localeStr);"",""\t\t}"",""\t\tcatch (IllegalArgumentException e) {"",""\t\t\treturn getDefaultLanguage();"",""\t\t}"",""\t}""]"
/smallsql/database/Join/getRow(),"[""int getRow(){"",""\t\treturn row;"",""\t}""]"
/smallsql/junit/TestTokenizer/createTable(),"[""private void createTable() throws SQLException {"",""\t\tstat.execute("",""\t\t\t\t\""CREATE TABLE \"" + TABLE_NAME + "",""\t\t\t\t\"" (id INT, myint INT)\"");"",""\t\t"",""\t\tstat.execute("",""\t\t\t\t\""INSERT INTO \"" + TABLE_NAME + \"" VALUES (1, 2)\"");"",""\t\tstat.execute("",""\t\t\t\t\""INSERT INTO \"" + TABLE_NAME + \"" VALUES (1, 3)\"");"",""\t}""]"
/smallsql/database/Expressions/add(smallsql.database.Expression),"[""final void add(Expression expr){"",""\t\tif(size \>= data.length ){"",""\t\t\tresize(size \<\< 1);"",""\t\t}"",""\t\tdata[size++] = expr;"",""\t}""]"
/smallsql/junit/TestIdentifer/TestIdentifer(),"[""public TestIdentifer(){"",""\t\tsuper();"",""\t}""]"
"/smallsql/database/SQLToken/SQLToken(int,int,int)","[""SQLToken (int value, int tokenStart, int tokenEnd){"",""\t\tthis.value  = value;"",""\t\tthis.offset = tokenStart;"",""\t\tthis.length = tokenEnd-tokenStart;"",""\t}""]"
/smallsql/database/SQLTokenizer/parseSQL(char[]),"[""public static List parseSQL( char[] sql ) throws SQLException{"",""        SearchNode node = searchTree;"",""        ArrayList tokens = new ArrayList();"",""        int value = 0;"",""        int tokenStart = 0;"",""        boolean wasWhiteSpace = true;"",""        int comment = NOT_COMMENT;"",""        char quote = 0;"",""        StringBuffer quoteBuffer = new StringBuffer();"","""",""        for(int i=0; i\<sql.length; i++){"",""            char c = sql[i];"",""            switch(c){"",""                case \'\\\""\':"",""                case \'\\\'\':"",""                \t\t\tif (comment != NOT_COMMENT) {"",""                \t\t\t\tbreak;"",""                \t\t\t}else if(quote == 0){"",""                                quote = c;"",""                            }else if(quote == c){"",""                                // check on escaped quote"",""                                if(i+1\<sql.length && sql[i+1] == quote){"",""                                    quoteBuffer.append(quote);"",""                                    i++;"",""                                }else{"",""                                    tokens.add( new SQLToken( quoteBuffer.toString(), (quote == \'\\\'\') ? STRING : IDENTIFIER,       tokenStart, i+1) );"",""                                    quoteBuffer.setLength(0);"",""                                    quote = 0;"",""                                    tokenStart = i+1;"",""                                    wasWhiteSpace = true;"",""                                }"",""                            }else quoteBuffer.append(c);"",""                            break;"",""                case \'.\':"",""\t\t        \t\t\tif (comment != NOT_COMMENT) {"",""\t\t        \t\t\t\tbreak;"",""\t\t        \t\t\t}else if(quote == 0){"",""                            \t// there are follow cases with a point"",""                            \t// \""abc\"".\""abc\""\t--\> identifier --\> multiple tokens"",""                            \t// \""5\"".\""3\""\t\t--\> identifier --\> multiple tokens"",""                            \t// 5.3\t\t\t--\> number --\> one token"",""                            \t// 5.e3\t\t\t--\> number --\> one token"",""                            \t// .3\t\t\t--\> number --\> one token"",""                            \t// .e3\t\t\t--\> identifier --\> multiple tokens"",""                                int k=tokenStart;"",""                                if(k == i){ // point is first character"",""                                \tif(sql.length\> k+1){"",""\t\t\t\t\t\t\t\t\t\tchar cc = sql[k+1];"",""\t\t\t\t\t\t\t\t\t\tif((cc \>= \'0\') && cc \<= \'9\') break; // is a number --\> break"",""                                \t}"",""                                }else{"",""\t                                for(; k\<i; k++){"",""\t                                    char cc = sql[k];"",""\t                                    if((cc != \'-\' && cc != \'$\' && cc \< \'0\') || cc \> \'9\') break; // is identifier --\> break"",""\t                                }"",""\t\t\t\t\t\t\t\t\tif(k\>=i) break; // preceding tokens are only digits that it is not an identifier else a floating number"",""                                }"",""                            }"",""                            // character before is not a digit that it is an identifier"",""                            // no break;"",""\t\t\t\tcase \'-\':"",""\t\t\t\t\t\t\tif (comment != NOT_COMMENT) {"",""\t\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\t/* start of single line comment */"",""\t\t\t\t\t\t\telse if (c == \'-\' && (i+1 \< sql.length) && (sql[i+1] == \'-\')) {"",""\t                            if(!wasWhiteSpace){"",""\t                                tokens.add( new SQLToken( value, tokenStart, i) );"",""\t                                value = 0;"",""\t                            }"",""\t\t\t\t\t\t\t\ti++;"",""\t\t\t\t\t\t\t\ttokenStart = i+1;"",""\t\t\t\t\t\t\t\tcomment = LINE_COMMENT;"",""\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\telse if(quote == 0 && !wasWhiteSpace){"",""\t\t\t\t\t\t\t\tchar c1 = sql[tokenStart];"",""\t\t\t\t\t\t\t\tchar cx = sql[i-1];"",""\t\t\t\t\t\t\t\tif(((c1 \>= \'0\' && c1 \<= \'9\') || c1 == \'.\') && (cx == \'e\' || cx == \'E\'))"",""\t\t\t\t\t\t\t\t\t//negative exponential number"",""\t\t\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\t\t\tif(c1 == \'$\' && tokenStart+1 == i)"",""\t\t\t\t\t\t\t\t\t// money number"",""\t\t\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\t\t}"",""                case \' \':"",""\t\t\t\tcase \'\\t\':"",""\t\t\t\tcase \'\\n\':"",""\t\t\t\tcase \'\\r\':"",""                case \',\':"",""                case \'(\':"",""                case \')\':"",""                case \'{\':"",""                case \'}\':"",""                case \'*\':"",""                case \'+\':"",""                case \'/\':"",""                case \'%\':"",""                case \'&\':"",""                case \'|\':"",""                case \'=\':"",""                case \'\<\':"",""                case \'\>\':"",""                case \'?\':"",""                case \'^\':"",""                case \'~\':"",""                \t\t\t/* end of line comment */"",""                \t\t\tif (comment == LINE_COMMENT) {"",""                \t\t\t\t// \'\\r\'/\'\\n\' check needed because of fall-through"",""                \t\t\t\tif (c == \'\\r\' || c == \'\\n\') {"",""                \t\t\t\t\tcomment = NOT_COMMENT;"",""                                    wasWhiteSpace = true;"",""                \t\t\t\t}"",""                                tokenStart = i+1;"",""                \t\t\t\tbreak;"",""                \t\t\t}"",""                \t\t\t/* end of multi-line comment */"",""                \t\t\telse if (comment == MULTI_COMMENT) {"",""                \t\t\t\t// \'*\' check needed because of fall-through"",""                \t\t\t\tif (c == \'*\' && (i+1 \< sql.length) && (sql[i+1] == \'/\')) {"",""                \t\t\t\t\tcomment = NOT_COMMENT;"",""                                    wasWhiteSpace = true;"",""                                    i++;"",""                \t\t\t\t}"",""                                tokenStart = i + 1;"",""                \t\t\t\tbreak;"",""                \t\t\t}"",""                \t\t\telse if(quote == 0){"",""                                if(!wasWhiteSpace){"",""                                   tokens.add( new SQLToken( value, tokenStart, i) );"",""                                   value = 0;"",""                                }"",""                                switch(c){"",""\t\t\t\t\t\t\t\t\tcase \' \':"",""                                \tcase \'\\t\':"",""                                \tcase \'\\n\':"",""                                \tcase \'\\r\':"",""                                    \t// skip this characters, this are not tokens, this are only source formatter   "",""                                    \tbreak;"",""                                    case \'\<\':"",""                                        if((i+1 \< sql.length) && (sql[i+1] == \'\>\')){"",""                                            tokens.add( new SQLToken( UNEQUALS, i, i+2) );"",""                                            i++;"",""                                            break;"",""                                        }"",""                                    case \'\>\':"",""                                        if((i+1 \< sql.length) && (sql[i+1] == \'=\')){"",""                                            tokens.add( new SQLToken( 100 + c, i, i+2) );"",""                                            i++;"",""                                            break;"",""                                        }"",""                                    /* start of multi-line comment */"",""                                    case \'/\':"",""                                        if((i+1 \< sql.length) && (sql[i+1] == \'*\')){"",""            \t\t\t\t\t\t\t\ti++;"",""            \t\t\t\t\t\t\t\ttokenStart = i+1;"",""            \t\t\t\t\t\t\t\tcomment = MULTI_COMMENT;"",""                                            break;"",""                                        }"",""                                    default:"",""                                        tokens.add( new SQLToken( c, i, i+1) );"",""                                }"",""                                wasWhiteSpace = true;"",""                                tokenStart = i+1;"",""                            }else{"",""                                quoteBuffer.append(c);"",""                            }"",""                            break;"",""                default:"",""                \t\t\tif (comment != NOT_COMMENT) {"",""                \t\t\t\tbreak;"",""                \t\t\t}else if(quote == 0){"",""                                if(wasWhiteSpace){"",""                                     node = searchTree;"",""                                }else{"",""                                    if(node == null){"",""                                        value = 0;"",""                                        wasWhiteSpace = false;"",""                                        break;"",""                                    }"",""                                }"",""\t\t\t\t\t\t\t\tc |= 0x20; // case insensitive"",""                                while(node != null && node.letter != c) node = node.nextEntry;"",""                                if(node != null){"",""                                    value = node.value;"",""                                    node = node.nextLetter;"",""                                }else{"",""                                    value = 0;"",""                                    node = null;"",""                                }"",""                            }else{"",""                                quoteBuffer.append(c);"",""                            }"",""                            wasWhiteSpace = false;"",""                            break;"",""            }"",""        }"",""        if (comment == MULTI_COMMENT) {"",""        \tthrow SmallSQLException.create(Language.STXADD_COMMENT_OPEN);"",""        }        "",""        if(!wasWhiteSpace) {"",""           tokens.add( new SQLToken( value, tokenStart, sql.length) );"",""        }"",""        "",""        return tokens;"",""    }""]"
/smallsql/database/UnionAll/getObject(int),"[""final Object getObject(int colIdx) throws Exception {"",""\t\treturn currentDS.getObject(colIdx);"",""\t}""]"
"/smallsql/database/IndexNode/findNodeInsertPos(char,int,int)","[""private final int findNodeInsertPos(char digit, int start, int end){"",""\t\tif(start == end) return start;"",""\t\tint mid = start + (end - start)/2;"",""\t\tchar nodeDigit = nodes[mid].digit;"",""\t\tif(nodeDigit == digit) return mid;"",""\t\tif(nodeDigit \< digit){"",""\t\t\treturn findNodeInsertPos( digit, mid+1, end );"",""\t\t}else{"",""\t\t\tif(start == mid) return start;"",""\t\t\treturn findNodeInsertPos( digit, start, mid );"",""\t\t}"",""\t}""]"
/smallsql/database/Command/getResultSet(),"[""SSResultSet getResultSet(){"",""        return rs;"",""    }""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getDouble(),"[""double getDouble() throws Exception {"",""\t\treturn getLong();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsSavepoints(),"[""public boolean supportsSavepoints() {"",""    \treturn false;"",""    }""]"
/smallsql/database/Identity/setNextValue(smallsql.database.Expression),"[""void setNextValue(Expression expr) throws Exception{"",""\t\tlong newValue = expr.getLong();"",""\t\tif(newValue \> value){"",""\t\t\tvalue = newValue;"",""\t\t\tcreateStorePage().commit();"",""\t\t}"",""\t}""]"
/smallsql/database/StoreImpl/readNumeric(),"[""MutableNumeric readNumeric(){"",""        int[] value = new int[ readByte() ];"",""        int scale   = readByte();"",""        int signum  = readByte();"",""        for(int i=0; i\<value.length; i++){"",""            value[i] = readInt();"",""        }"",""        return new MutableNumeric( signum, value, scale );"",""    }""]"
/smallsql/database/Expressions/remove(int),"[""final void remove(int idx){"",""\t\tSystem.arraycopy( data, idx+1, data, idx, (--size)-idx);"",""\t}""]"
/smallsql/database/IndexDescription/close(),"[""void close() throws Exception{"",""        if(raFile != null){"",""            raFile.close();"",""            raFile = null;"",""        }"",""    }""]"
/smallsql/junit/BenchTest/test_InsertRows(java.sql.Connection),"[""/**"",""      *  5. Test"",""      *  Insert rows with the method insertRow()."",""      */  "",""    static void test_InsertRows(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test insert rows with insertRow(): \"" + rowCount + \"" rows\"");"",""        "",""        try{"",""            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );"",""            ResultSet rs = st.executeQuery(\""SELECT * FROM \"" + tableName);"",""            long time = -System.currentTimeMillis();"",""            for (int i=0; i\<rowCount; i++){"",""                rs.moveToInsertRow();"",""\t            rs.updateBytes (  \""bi\"", byteArray );"",""\t            rs.updateString(  \""c\"" , \""Test\"" );"",""\t            rs.updateDate  (  \""d\"" , new Date( System.currentTimeMillis() ) );"",""\t            rs.updateFloat (  \""de\"", (float)1234.56789 );"",""\t            rs.updateFloat (  \""f\"" , (float)9876.54321 );"",""\t            rs.updateBytes (  \""im\"", largeByteArray );"",""\t            rs.updateInt   (  \""i\"" , i );"",""\t            rs.updateDouble(  \""m\"" , 23.45 );"",""\t            rs.updateDouble(  \""n\"" , 567.45 );"",""\t            rs.updateFloat (  \""r\"" , (float)78.89 );"",""\t            rs.updateTime  (  \""sd\"", new Time( System.currentTimeMillis() ) );"",""\t            rs.updateShort (  \""si\"", (short)i );"",""\t            rs.updateFloat (  \""sm\"", (float)34.56 );"",""\t            rs.updateString(  \""sy\"", \""sysname (30) NULL\"" );"",""\t            rs.updateString(  \""t\"" , \""ntext NULL, sample to save in the field\"" );"",""\t            rs.updateByte  (  \""ti\"", (byte)i );"",""\t            rs.updateBytes (  \""vb\"", byteArray );"",""\t            rs.updateString(  \""vc\"", \""nvarchar (255) NULL\"" );"",""                rs.insertRow();"",""            }"",""            time += System.currentTimeMillis();"",""            rs = st.executeQuery( \""SELECT count(*) FROM \"" + tableName);"",""            rs.next();"",""            int count = rs.getInt(1);"",""            if (count != rowCount){"",""                  st.execute(\""DELETE FROM \"" + tableName);"",""                  System.out.println( \""  Failed: Only \"" + count + \"" rows were inserted.\"");"",""            }else System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            st.close();"",""        }catch(Exception e){"",""        \te.printStackTrace();"",""            try{"",""                // reset for the next test"",""                Statement st = con.createStatement();"",""                st.execute(\""DELETE FROM \"" + tableName);"",""                st.close();"",""            }catch(Exception ee){/* ignore it */}"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
"/smallsql/database/SSDatabaseMetaData/getExportedKeys(java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {"",""\t\treturn getCrossReference( null, null, table, null, null, null );"",""    }""]"
"/smallsql/database/FileIndex/print(smallsql.database.Index,smallsql.database.Expressions)","[""static void print(Index index, Expressions expressions){"",""    IndexScrollStatus scroll = index.createScrollStatus(expressions);"",""    long l;"",""    while((l= scroll.getRowOffset(true)) \>=0){"",""        System.out.println(l);"",""    }"",""    System.out.println(\""============================\"");"",""}""]"
/smallsql/database/SSDatabaseMetaData/supportsMultipleOpenResults(),"[""public boolean supportsMultipleOpenResults() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionHour/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.HOUR;"",""\t}""]"
/smallsql/database/ColumnExpression/getPrecision(),"[""int getPrecision(){"",""\t\treturn expr.getPrecision();"",""\t}""]"
/smallsql/database/IndexDescription/isPrimary(),"[""final boolean isPrimary(){"",""\t\treturn constraintType == SQLTokenizer.PRIMARY;"",""\t}""]"
/smallsql/junit/TestOrderBy/testOrderBy_varchar_Join(),"[""public void testOrderBy_varchar_Join() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tString oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" t1 Inner join \""+table2+\"" t2 on t1.c=t2.c2  ORDER  by v\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = rs.getString(\""v\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tassertTrue( oldValue.compareTo( rs.getString(\""v\"") ) \< 0 );"",""\t\t\toldValue = rs.getString(\""v\"");"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/allTablesAreSelectable(),"[""public boolean allTablesAreSelectable() {"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionTan/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.tan( param1.getDouble() );"",""    }""]"
/smallsql/database/ExpressionFunctionLeft/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull() || param2.isNull();"",""\t}""]"
/smallsql/database/TableResult/getLong(int),"[""@Override"",""    final long getLong( int colIdx ) throws Exception{"",""        return store.getLong( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/tools/CommandLine/main(java.lang.String[]),"[""public static void main(String[] args) throws Exception {"",""        System.out.println(\""SmallSQL Database command line tool\\n\"");"",""        Connection con = new SSDriver().connect(\""jdbc:smallsql\"", new Properties());"",""        Statement st = con.createStatement();"",""        if(args.length\>0){"",""            con.setCatalog(args[0]);"",""        }"",""        System.out.println(\""\\tVersion: \""+con.getMetaData().getDatabaseProductVersion());"",""        System.out.println(\""\\tCurrent database: \""+con.getCatalog());"",""        System.out.println();"",""        System.out.println(\""\\tUse the USE command to change the database context.\"");"",""        System.out.println(\""\\tType 2 times ENTER to execute any SQL command.\"");"",""        "",""        StringBuffer command = new StringBuffer();"",""        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));"",""        while(true){"",""            try {"",""                String line;"",""                try{"",""                    line = input.readLine();"",""                }catch(IOException ex){"",""                    ex.printStackTrace();"",""                    JOptionPane.showMessageDialog( null, \""You need to start the command line of the \\nSmallSQL Database with a console window:\\n\\n       java -jar smallsql.jar\\n\\n\"" + ex, \""Fatal Error\"", JOptionPane.OK_OPTION);"",""                    return;"",""                }"",""                if(line == null){"",""                    return; //end of program"",""                }"",""                if(line.length() == 0 && command.length() \> 0){"",""                    boolean isRS = st.execute(command.toString());"",""                    if(isRS){"",""                        printRS(st.getResultSet());"",""                    }"",""                    command.setLength(0);"",""                }"",""                command.append(line).append(\'\\n\');"",""            } catch (Exception e) {"",""                command.setLength(0);"",""                e.printStackTrace();"",""            }"",""        }"",""        "",""    }""]"
/smallsql/database/ExpressionFunctionRight/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull() || param2.isNull();"",""\t}""]"
/smallsql/database/CommandSelect/isGroupResult(),"[""/**"",""     * If this ResultSet is use any type of grouping. This means that GroupResult need create and that"",""     * the ResultSet is not updatable. "",""     */"",""    final boolean isGroupResult(){"",""    \treturn groupBy != null || having != null || isAggregateFunction;"",""    }""]"
/smallsql/database/JoinScroll/getBoolean(),"[""private boolean getBoolean() throws Exception{"",""        return type == Join.CROSS_JOIN || condition.getBoolean();"",""    }""]"
"/smallsql/database/SSCallableStatement/getObject(int,java.util.Map)","[""public Object getObject(int i, Map map) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method getObject() not yet implemented.\"");"",""    }""]"
/smallsql/junit/TestLanguage/tearDown(),"[""public void tearDown() throws SQLException {"",""\t\t// restore language"",""\t\tConnection conn = AllTests.createConnection(\""?locale=en\"", null);"",""\t\t"",""\t\ttry {"",""\t\t\tconn.prepareStatement(\""DROP TABLE \"" + TABLE_NAME).execute();"",""\t\t}"",""\t\tcatch (Exception e) {}"",""\t\tfinally {"",""\t\t\tconn.close();"",""\t\t}"",""\t}""]"
/smallsql/database/DateTime/getDate(long),"[""static Date getDate(long time){"",""\t\treturn new Date( DateTime.addDateTimeOffset(time) ); "",""\t}""]"
/smallsql/database/FileIndexNode/save(),"[""void save() throws SQLException{"",""        StorePage storePage = new StorePage( null, -1, file, fileOffset);"",""        StoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.INSERT, fileOffset);"",""\t\tsave(store);"",""        fileOffset = store.writeFinsh(null);"",""\t}""]"
/smallsql/database/SSResultSet/findColumn(java.lang.String),"[""public int findColumn(String columnName) throws SQLException {"",""    \treturn getCmd().findColumn(columnName) + 1;"",""    }""]"
/smallsql/database/SSResultSet/getBinaryStream(int),"[""public InputStream getBinaryStream(int columnIndex) throws SQLException {"",""        return new ByteArrayInputStream(getBytes(columnIndex));"",""    }""]"
/smallsql/database/SSPreparedStatement/executeImp(),"[""final private void executeImp() throws SQLException {"",""        checkStatement();"",""\t\tcmd.verifyParams();"",""        if(getMaxRows() != 0 && (top == -1 || top \> getMaxRows()))"",""            cmd.setMaxRows(getMaxRows());"",""\t\tcmd.execute( con, this);"",""\t}""]"
/smallsql/database/CommandSelect/CommandSelect(smallsql.database.Logger),"[""CommandSelect(Logger log){"",""\t\tsuper(log);"",""    }""]"
/smallsql/junit/AllTests/createConnection(),"[""/**"",""     * Creates a connection in the English locale.\<br\>"",""     */"",""\tpublic static Connection createConnection() throws SQLException{"",""\t\t//DriverManager.setLogStream( System.out );"",""\t\tnew smallsql.database.SSDriver();"",""\t\tnew sun.jdbc.odbc.JdbcOdbcDriver();"",""\t\treturn DriverManager.getConnection(JDBC_URL + \""?create=true;locale=en\"");"",""\t\t//return DriverManager.getConnection(\""jdbc:odbc:mssql\"",\""sa\"",\""\"");"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnString/getLong(),"[""final long getLong() throws Exception {"",""\t\tif(isNull()) return 0;"",""\t\treturn Long.parseLong(getString().trim());"",""\t}""]"
/smallsql/junit/TestGroupBy/testMaxFloat(),"[""public void testMaxFloat() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Double(2), \""Select max(convert(float,id)) FROM \"" + table1);"",""\t}""]"
/smallsql/junit/TestGroupBy/testCountWhere(),"[""public void testCountWhere() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Integer(0), \""Select count(*) FROM \"" + table1 + \"" Where id=-1234\"");"",""\t}""]"
"/smallsql/database/MemoryStream/writeBytes(byte[],int,int)","[""void writeBytes(byte[] value, int off, int length){"",""\t\tverifyFreePufferSize(length);"",""\t\tSystem.arraycopy(value, off, puffer, offset, length);"",""\t\toffset += length;"",""\t}""]"
"/smallsql/database/Store/getFloat(int,int)","[""abstract float getFloat( int offset, int dataType) throws Exception;""]"
/smallsql/database/ExpressionArithmetic/optimize(),"[""void optimize() throws SQLException{"",""        super.optimize();"",""        Expression[] params = getParams();"",""        if(params.length == 1){"",""            return;"",""        }"",""        setParamAt( convertExpressionIfNeeded( params[0], params[1] ), 0 );"",""        "",""        for(int p=1; p\<params.length; p++){"",""            setParamAt( convertExpressionIfNeeded( params[p], left ), p );"",""        }"",""    }""]"
/smallsql/database/SSCallableStatement/getDouble(java.lang.String),"[""public double getDouble(String parameterName) throws SQLException {"",""        return getDouble( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsCatalogsInProcedureCalls(),"[""public boolean supportsCatalogsInProcedureCalls() {"",""    \treturn true;"",""    }""]"
"/smallsql/database/Column/setDefaultValue(smallsql.database.Expression,java.lang.String)","[""void setDefaultValue(Expression defaultValue, String defaultDefinition){"",""        this.defaultValue \t\t= defaultValue;"",""        this.defaultDefinition\t= defaultDefinition;"",""    }""]"
"/smallsql/database/SSDatabaseMetaData/getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)","[""public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException {"",""\t\ttry {"",""\t\t\tString[] colNames = {\""SCOPE\"", \""COLUMN_NAME\"", \""DATA_TYPE\"", \""TYPE_NAME\"", \""COLUMN_SIZE\"", \""BUFFER_LENGTH\"", \""DECIMAL_DIGITS\"", \""PSEUDO_COLUMN\""};"",""\t\t\tObject[][] data   = con.getDatabase(false).getBestRowIdentifier(con, table);"",""\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""\t\t} catch (Exception e) {"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
/smallsql/database/ExpressionFunctionLCase/isNull(),"[""final boolean isNull() throws Exception {"",""\t\treturn param1.isNull();"",""\t}""]"
/smallsql/database/Mutable/getImmutableObject(),"[""Object getImmutableObject();""]"
/smallsql/database/SSCallableStatement/getString(java.lang.String),"[""public String getString(String parameterName) throws SQLException {"",""        return getString( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/getPrecision(),"[""final int getPrecision(){"",""\t\tfinal int dataType = getDataType();"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\tcase SQLTokenizer.VARBINARY:"",""\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\treturn datatype.getPrecision();"",""\t\t\tdefault:"",""\t\t\t\treturn super.getPrecision();"",""\t\t}"",""\t}""]"
/smallsql/database/LongLongList/resize(int),"[""private final void resize(int newSize){"",""\t\tlong[] dataNew = new long[newSize \<\< 1];"",""\t\tSystem.arraycopy(data, 0, dataNew, 0, size \<\< 1);"",""\t\tdata = dataNew;\t\t"",""\t}""]"
"/smallsql/database/ExpressionArithmetic/getDoubleImpl(double,double)","[""private double getDoubleImpl( double lVal, double rVal) throws java.lang.Exception{"",""        switch(operation){"",""            case ADD: return lVal + rVal;"",""            case SUB: return lVal - rVal;"",""            case MUL: return lVal * rVal;"",""            case DIV: return lVal / rVal;"",""            case NEGATIVE: return - rVal;"",""            case MOD:\t\treturn lVal % rVal;"",""        }"",""        throw createUnspportedConversion( SQLTokenizer.DOUBLE);"",""    }""]"
/smallsql/database/SSSavepoint/getSavepointId(),"[""public int getSavepointId(){"",""\t\treturn id;"",""\t}""]"
/smallsql/database/TableResult/moveToRow(),"[""/**"",""     * Move to the row in the filePos. A value of -1 for filePos is invalid at this call point."",""     */"",""    final private boolean moveToRow() throws Exception{"",""    \tif(filePos \>= 0x4000000000000000L){"",""    \t\tstore = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);"",""    \t}else{"",""    \t\tstore = (filePos \< maxFileOffset) ? table.getStore( con, filePos, lock ) : null;"",""\t\t\tif(store == null){"",""\t\t\t\tif(insertStorePages.size() \> 0){\t\t\t"",""\t\t\t\t\tfilePos = 0x4000000000000000L;"",""\t\t\t\t\tstore = ((StorePageLink)insertStorePages.get( (int)(filePos & 0x3FFFFFFFFFFFFFFFL) )).getStore( table, con, lock);"",""\t\t\t\t}"",""\t\t\t}"",""    \t}"",""\t\tif(store != null){"",""\t\t\tif(!store.isValidPage()){"",""\t\t\t\treturn false;"",""\t\t\t}"",""\t\t\tstore.scanObjectOffsets( offsets, dataTypes );"",""\t\t\tafterLastValidFilePos = store.getNextPagePos();"",""\t\t\treturn true;"",""\t\t}else{"",""\t\t\tfilePos = -1;"",""\t\t\tnoRow();"",""\t\t\treturn false;"",""\t\t}"",""    }""]"
"/smallsql/database/SSDatabaseMetaData/getSuperTables(java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {"",""        /**@todo: Implement this java.sql.DatabaseMetaData method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method getSuperTables() not yet implemented.\"");"",""    }""]"
"/smallsql/database/SmallSQLException/createFromException(java.lang.String,java.lang.Object,java.lang.Throwable)","[""/**"",""\t * Create an exception with the specified message and appends the passed"",""\t * exception.\<br\>"",""\t * Makes use of localization. String type is used to avoid possible"",""\t * confusion with future implementations of Object[]."",""\t * "",""\t * @param messageCode"",""\t *            localized message key. pass CUSTOM_MESSAGE and the plain"",""\t *            message as param0 to create an unlocalized message."",""\t * @param param0"",""\t *            message parameter."",""\t */"",""    static SQLException createFromException( String messageCode, Object param0, "",""    \t\tThrowable e )"",""    {"",""    \tString message = translateMsg(messageCode, new Object[] { param0 });"",""    \tString sqlState = language.getSqlState(messageCode);"",""        return new SmallSQLException(e, message, sqlState);"",""    }""]"
/smallsql/junit/TestTransactions/testInsertRow_withRightWhere(),"[""/**"",""\t * A row that was inserted and committed with a valid WHERE expression should not count 2 times."",""\t */"",""\tpublic void testInsertRow_withRightWhere() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert2\')\"");"","""",""\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)"",""\t\t\t\t\t\t\t\t.executeQuery(\""Select * from transactions Where v = \'qwert\'\"");"",""\t\t\t"",""\t\t\trs.moveToInsertRow();"",""\t\t\trs.updateString(\""v\"", \""qwert\"");"",""\t\t\trs.insertRow();"",""\t\t\t"",""\t\t\trs.beforeFirst();"",""\t\t\tassertTrue( rs.next() );"",""\t\t\tassertEquals(\""qwert\"", rs.getString(\""v\""));"",""\t\t\tassertFalse( rs.next() );"",""\t\t}finally{"",""\t\t\ttry{"",""\t\t\t\tcon.createStatement().execute(\""Drop Table transactions\"");"",""\t\t\t}catch(Throwable e){e.printStackTrace();}"",""\t\t}"",""\t}""]"
"/smallsql/database/IndexDescriptions/create(smallsql.database.SSConnection,smallsql.database.Database,smallsql.database.TableView)","[""/**"",""\t * Create all the indexes. This means a file for every index is save."",""\t * @param database "",""\t * @param tableView"",""\t * @see IndexDescription#setTableView"",""\t */"",""\tvoid create(SSConnection con, Database database, TableView tableView) throws Exception{"",""\t\tfor(int i=0; i\<size; i++){"",""\t\t\tdata[i].create(con, database, tableView);"",""\t\t}"",""\t}""]"
/smallsql/database/SQLParser/createIndex(boolean),"[""private CommandTable createIndex(boolean unique) throws SQLException{"",""        String indexName = nextIdentifier();"",""        nextToken(MISSING_ON);"",""        String catalog;"",""        String tableName = catalog = nextIdentifier();"",""        tableName = nextIdentiferPart(tableName);"",""        if(tableName == catalog) catalog = null;"",""        CommandTable cmd = new CommandTable( con.log, catalog, tableName, SQLTokenizer.INDEX );"",""        Expressions expressions = new Expressions();"",""        Strings columns = new Strings();"",""        expressionDefList( cmd, expressions, columns );"",""        IndexDescription indexDesc = new IndexDescription( "",""                indexName, "",""                tableName, "",""                unique ? SQLTokenizer.UNIQUE : SQLTokenizer.INDEX, "",""                        expressions, "",""                        columns);"",""        //TODO Create Index"",""\t\tObject[] param = { \""Create Index\"" };"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);"",""    }""]"
/smallsql/database/Join/setRowPosition(long),"[""final void setRowPosition(long rowPosition) throws Exception{"",""\t\tleft .setRowPosition( rowPositions.get1((int)rowPosition));"",""\t\tright.setRowPosition( rowPositions.get2((int)rowPosition));"",""\t}""]"
/smallsql/database/SSStatement/addBatch(java.lang.String),"[""final public void addBatch(String sql){"",""        if(batches == null)"",""            batches = new ArrayList();"",""        batches.add(sql);"",""    }""]"
/smallsql/database/Expressions/toArray(),"[""final Expression[] toArray(){"",""\t\tExpression[] array = new Expression[size];"",""\t\tSystem.arraycopy( data, 0, array, 0, size);"",""\t\treturn array;"",""\t}""]"
/smallsql/database/SSCallableStatement/getBigDecimal(java.lang.String),"[""public BigDecimal getBigDecimal(String parameterName) throws SQLException {"",""        return getBigDecimal( findParameter( parameterName ) );"",""    }""]"
/smallsql/junit/TestOrderBy/test_function(),"[""public void test_function() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tint oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by abs(i)\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\tassertNull(rs.getObject(\""i\""));"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = Math.abs( rs.getInt(\""i\"") );"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tint newValue = Math.abs( rs.getInt(\""i\"") );"",""\t\t\tassertTrue( oldValue \<= newValue );"",""\t\t\toldValue = newValue;"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getFunction(),"[""int getFunction() {"",""\t\treturn SQLTokenizer.TIMESTAMPDIFF;"",""\t}""]"
/smallsql/database/MemoryStream/skip(int),"[""void skip(int count){"",""        offset += count;"",""    }""]"
/smallsql/junit/TestExceptions/init(),"[""private void init() throws Exception{"",""    \tif(init) return;"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tdropTable( con, \""exceptions\"");"",""\t\tst.execute(\""Create Table exceptions (c varchar(30), i int)\"");"",""\t\tinit = true;"",""    }""]"
/smallsql/database/CommandSelect/afterLast(),"[""/**"",""\t * Is used from ResultSet.afterLast()."",""\t */"",""\tfinal void afterLast() throws Exception{"",""\t\tfrom.afterLast();"",""\t}""]"
/smallsql/database/ViewResult/getTableView(),"[""TableView getTableView(){"",""\t\treturn view;"",""\t}""]"
/smallsql/database/MutableNumeric/intValue(),"[""public int intValue(){"",""        return Utils.long2int(longValue());"",""    }""]"
/smallsql/database/StoreImpl/writeChars(char[]),"[""void writeChars(char[] daten){"",""        int length = daten.length;"",""        int newSize = offset + 2*length;"",""        if(newSize \> page.length) resizePage(newSize );"",""        for(int i=0; i\<length; i++){"",""            char c = daten[i];"",""            page[ offset++ ] = (byte)(c);"",""            page[ offset++ ] = (byte)(c \>\> 8);"",""        }"",""    }""]"
/smallsql/database/SSConnection/getMetaData(),"[""public DatabaseMetaData getMetaData(){"",""        return metadata;"",""    }""]"
/smallsql/database/ExpressionValue/accumulate(smallsql.database.Expression),"[""/*=============================================================================="",""methods for Grouping"",""==============================================================================*/"",""\t/**"",""\t * Accumulate the value of the expression to this aggregate function value. "",""\t */"",""    void accumulate(Expression expr) throws Exception{"",""\t\tint type = getType();"",""\t\tif(type != GROUP_BY) expr = expr.getParams()[0];"",""\t\tswitch(type){"",""\t\t\tcase GROUP_BY:"",""\t\t\tcase FIRST:"",""\t\t\t\tif(isEmpty()) set( expr.getObject(), expr.getDataType() );"",""\t\t\t\tbreak;"",""\t\t\tcase LAST:"",""\t\t\t\tset( expr.getObject(), expr.getDataType() );"",""\t\t\t\tbreak;"",""\t\t\tcase COUNT:"",""\t\t\t\tif(!expr.isNull()) ((MutableInteger)value).value++;"",""\t\t\t\tbreak;"",""\t\t\tcase SUM:"",""\t\t\t\tif(isEmpty()){"",""\t\t\t\t\tinitValue( expr );"",""\t\t\t\t}else"",""\t\t\t\tswitch(dataType){"",""\t\t\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\t\t\t((MutableInteger)value).value += expr.getInt();"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\t\t\t((MutableLong)value).value += expr.getLong();"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.REAL:"",""\t\t\t\t\t\t((MutableFloat)value).value += expr.getFloat();"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\t\t\t((MutableDouble)value).value += expr.getDouble();"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();"",""\t\t\t\t\t\tif(newValue != null)"",""\t\t\t\t\t\t\t((MutableNumeric)value).add( newValue );"",""\t\t\t\t\t\tbreak;"",""\t\t\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\t\t\t\t((Money)value).value += expr.getMoney();"",""\t\t\t\t\t\tbreak;\t\t\t\t\t\t"",""\t\t\t\t\tdefault: throw SmallSQLException.create(Language.UNSUPPORTED_TYPE_SUM, SQLTokenizer.getKeyWord(dataType));"",""\t\t\t\t}"",""\t\t\t\tbreak;"",""\t\t\tcase MAX:"",""\t\t\t\tif(value == null){"",""\t\t\t\t\tif(expr.isNull())"",""\t\t\t\t\t\tdataType = expr.getDataType();"",""\t\t\t\t\telse"",""\t\t\t\t\t\tinitValue( expr );"",""\t\t\t\t}else if(!expr.isNull()){"",""\t\t\t\t\tswitch(dataType){"",""\t\t\t\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\t\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\t\t\t\t((MutableInteger)value).value = Math.max( ((MutableInteger)value).value, expr.getInt());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\t\t\t\t((MutableLong)value).value = Math.max( ((MutableLong)value).value, expr.getLong());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.REAL:"",""\t\t\t\t\t\t\t((MutableFloat)value).value = Math.max( ((MutableFloat)value).value, expr.getFloat());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\t\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\t\t\t\t((MutableDouble)value).value = Math.max( ((MutableDouble)value).value, expr.getDouble());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\t\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""\t\t\t\t\t\t\tString str = expr.getString();"",""\t\t\t\t\t\t\tif(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) \< 0) //cast needed for Compiler 1.5"",""\t\t\t\t\t\t\t\tvalue = str;"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();"",""\t\t\t\t\t\t\tif(((MutableNumeric)value).compareTo( newValue ) \< 0)"",""\t\t\t\t\t\t\t\tvalue = newValue;"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\t\t\t\t\t((Money)value).value = Math.max( ((Money)value).value, expr.getMoney());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\t\t\t((DateTime)value).time = Math.max( ((DateTime)value).time, expr.getLong());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:"",""\t\t\t\t\t\t\t// uuid are fixed-len uppercase hex strings and can be correctly "",""\t\t\t\t\t\t\t// compared with compareTo()"",""\t\t\t\t\t\t\tString uuidStr = expr.getString();"",""\t\t\t\t\t\t\tif (uuidStr.compareTo( (String)value) \> 0) value = uuidStr;"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tdefault:"",""\t\t\t\t\t\t\tString keyword = SQLTokenizer.getKeyWord(dataType);"",""\t\t\t\t\t\t\tthrow SmallSQLException.create(Language.UNSUPPORTED_TYPE_MAX, keyword);"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t\tbreak;"",""\t\t\tcase MIN:"",""\t\t\t\tif(value == null){"",""\t\t\t\t\tif(expr.isNull())"",""\t\t\t\t\t\tdataType = expr.getDataType();"",""\t\t\t\t\telse"",""\t\t\t\t\t\tinitValue( expr );"",""\t\t\t\t}else if(!expr.isNull()){"",""\t\t\t\t\tswitch(dataType){"",""\t\t\t\t\t\tcase SQLTokenizer.TINYINT:"",""\t\t\t\t\t\tcase SQLTokenizer.SMALLINT:"",""\t\t\t\t\t\tcase SQLTokenizer.INT:"",""\t\t\t\t\t\t\t((MutableInteger)value).value = Math.min( ((MutableInteger)value).value, expr.getInt());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.BIGINT:"",""\t\t\t\t\t\t\t((MutableLong)value).value = Math.min( ((MutableLong)value).value, expr.getLong());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.REAL:"",""\t\t\t\t\t\t\t((MutableFloat)value).value = Math.min( ((MutableFloat)value).value, expr.getFloat());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.FLOAT:"",""\t\t\t\t\t\tcase SQLTokenizer.DOUBLE:"",""\t\t\t\t\t\t\t((MutableDouble)value).value = Math.min( ((MutableDouble)value).value, expr.getDouble());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\t\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:"",""\t\t\t\t\t\t\tString str = expr.getString();"",""\t\t\t\t\t\t\tif(String.CASE_INSENSITIVE_ORDER.compare( (String)value, str ) \> 0) //cast needed for Compiler 1.5"",""\t\t\t\t\t\t\t\tvalue = str;"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\t\t\t\tMutableNumeric newValue = expr.getNumeric();"",""\t\t\t\t\t\t\tif(((MutableNumeric)value).compareTo( newValue ) \> 0)"",""\t\t\t\t\t\t\t\tvalue = newValue;"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\t\t\t\t\t((Money)value).value = Math.min( ((Money)value).value, expr.getMoney());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\t\t\t((DateTime)value).time = Math.min( ((DateTime)value).time, expr.getLong());"",""\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\tdefault: throw new Error(\""\""+dataType);"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t\tbreak;"",""\t\t\tdefault: throw new Error();"",""\t\t}"",""\t}""]"
/smallsql/database/IndexDescriptions/IndexDescriptions(),"[""IndexDescriptions(){"",""\t\tdata = new IndexDescription[4];"",""\t}""]"
/smallsql/database/UnionAll/beforeFirst(),"[""final void beforeFirst() throws Exception {"",""\t\tdataSourceIdx = 0;"",""\t\tcurrentDS = dataSources.get(0);"",""\t\tcurrentDS.beforeFirst();"",""\t\trow = 0;"",""\t}""]"
/smallsql/database/ExpressionFunctionSoundex/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""        String input = param1.getString();"",""        return getString(input);"",""    }""]"
/smallsql/database/ExpressionFunctionOctetLen/isNull(),"[""boolean isNull() throws Exception {"",""        return param1.isNull();"",""    }""]"
/smallsql/database/UnionAll/getRowPosition(),"[""final long getRowPosition() {"",""\t\tint bitCount = getBitCount();"",""\t\treturn dataSourceIdx | currentDS.getRowPosition() \<\< bitCount;"",""\t}""]"
"/smallsql/database/SQLParser/tableSource(smallsql.database.Command,smallsql.database.DataSources)","[""/**"",""     * read a table or view name in a FROM clause. If the keyword AS exists then read it also the alias"",""     */"",""    private RowSource tableSource( Command cmd, DataSources tables) throws SQLException{"",""        SQLToken token = nextToken(MISSING_EXPRESSION);"",""        switch(token.value){"",""            case SQLTokenizer.PARENTHESIS_L: // ("",""                    return rowSource( cmd, tables, SQLTokenizer.PARENTHESIS_R );"",""            case SQLTokenizer.ESCAPE_L: // {"",""                    token = nextToken(MISSING_OJ);"",""                    return rowSource( cmd, tables, SQLTokenizer.ESCAPE_R );"",""            case SQLTokenizer.SELECT:"",""            \t\t// inner select"",""            \t\tViewResult viewResult = new ViewResult( con, select() );"",""            \t\ttables.add(viewResult);"",""            \t\treturn viewResult;"",""        }"",""        String catalog = null;"",""        String name = getIdentifier( token );"",""\t\ttoken = nextToken();"",""\t\t//check if the table name include a database name"",""\t\tif(token != null && token.value == SQLTokenizer.POINT){"",""\t\t\tcatalog = name;"",""\t\t\tname = nextIdentifier();"",""\t\t\ttoken = nextToken();"",""\t\t}"",""\t\t//TableResult table = new TableResult();"",""\t\t//table.setName( catalog, name );"",""\t\tTableView tableView = Database.getTableView( con, catalog, name);"",""\t\tTableViewResult table = TableViewResult.createResult(tableView);"",""        tables.add( table );"","""",""        if(token != null && token.value == SQLTokenizer.AS){"",""            // skip AS keyword, if exists"",""            token = nextToken(MISSING_EXPRESSION);"",""            table.setAlias( token.getName( sql ) );"",""        }else{"",""            previousToken();"",""        }"",""        return table;"",""    }""]"
/smallsql/junit/TestAlterTable/tearDown(),"[""public void tearDown(){"",""        try {"",""            dropTable( AllTests.getConnection(), table );"",""        } catch (SQLException ex) {"",""            ex.printStackTrace();"",""        }"",""    }""]"
/smallsql/database/ExpressionValue/ExpressionValue(),"[""/**"",""     * Constructor is used from PreparedStatement parameters ( \'?\' in sql expression )"",""     */"",""    ExpressionValue(){"",""\t\tsuper(VALUE);"",""        clear();"",""    }""]"
/smallsql/database/ExpressionFunctionTruncate/isNull(),"[""boolean isNull() throws Exception{"",""        return param1.isNull() || param2.isNull();"",""    }""]"
/smallsql/database/Where/rowInserted(),"[""final boolean rowInserted() {"",""\t\treturn rowSource.rowInserted();"",""\t}""]"
/smallsql/database/SSResultSet/cancelRowUpdates(),"[""public void cancelRowUpdates() throws SQLException{"",""        testNotInsertRow();"",""        clearRowBuffer();"",""    }""]"
"/smallsql/database/SSDriver/parse(java.lang.String,java.util.Properties)","[""/**"",""     * Parsed the JDBC URL and build together"",""     * "",""     * @param url"",""     *            the JDBC URL"",""     * @param info"",""     *            a list of arbitrary properties"",""     * @return a new Properties object"",""     */"",""    private Properties parse(String url, Properties info) throws SQLException {"",""        Properties props = (Properties)info.clone();"",""        if(!acceptsURL(url)){"",""            return props;"",""        }"",""        int idx1 = url.indexOf(\':\', 5); // search after \""jdbc:\"""",""        int idx2 = url.indexOf(\'?\');"",""        if(idx1 \> 0){"",""            String dbPath = (idx2 \> 0) ? url.substring(idx1 + 1, idx2) : url.substring(idx1 + 1);"",""            props.setProperty(\""dbpath\"", dbPath);"",""        }"",""        if(idx2 \> 0){"",""            String propsString = url.substring(idx2 + 1).replace(\'&\', \';\');"",""            StringTokenizer tok = new StringTokenizer(propsString, \"";\"");"",""            while(tok.hasMoreTokens()){"",""                String keyValue = tok.nextToken().trim();"",""                if(keyValue.length() \> 0){"",""                    idx1 = keyValue.indexOf(\'=\');"",""                    if(idx1 \> 0){"",""                        String key = keyValue.substring(0, idx1).toLowerCase().trim();"",""                        String value = keyValue.substring(idx1 + 1).trim();"",""                        props.put(key, value);"",""                    }else{"",""                    \tthrow SmallSQLException.create(Language.CUSTOM_MESSAGE, \""Missing equal in property:\"" + keyValue);"",""                    }"",""                }"",""            }"",""        }"",""        return props;"",""    }""]"
/smallsql/database/Join/noRow(),"[""void noRow(){"",""\t\tisAfterLast = true;"",""\t\tleft.noRow();"",""\t\tright.noRow();"",""\t\trow = 0;"",""\t}""]"
/smallsql/database/SQLParser/caseExpr(smallsql.database.Command),"[""ExpressionFunctionCase caseExpr(final Command cmd) throws SQLException{"",""\t\tExpressionFunctionCase expr = new ExpressionFunctionCase();"",""\t\tSQLToken token = nextToken(MISSING_EXPRESSION);"",""\t\t"",""\t\tExpression input = null;"",""\t\tif(token.value != SQLTokenizer.WHEN){"",""\t\t\t// simple CASE Syntax"",""\t\t\tpreviousToken();"",""\t\t\tinput = expression(cmd, 0);"",""\t\t\ttoken = nextToken(MISSING_WHEN_ELSE_END);"",""\t\t}\t\t\t"",""\t\t\t"",""\t\twhile(true){"",""\t\t\tswitch(token.value){"",""\t\t\t\tcase SQLTokenizer.WHEN:\t\t\t\t"",""\t\t\t\t\tExpression condition = expression(cmd, 0);"",""\t\t\t\t\tif(input != null){"",""\t\t\t\t\t\t// simple CASE Syntax"",""\t\t\t\t\t\tcondition = new ExpressionArithmetic( input, condition, ExpressionArithmetic.EQUALS);"",""\t\t\t\t\t}"",""\t\t\t\t\tnextToken(MISSING_THEN);"",""\t\t\t\t\tExpression result = expression(cmd, 0);"",""\t\t\t\t\texpr.addCase(condition, result);"",""\t\t\t\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.ELSE:"",""\t\t\t\t\texpr.setElseResult(expression(cmd, 0));"",""\t\t\t\t\tbreak;"",""\t\t\t\tcase SQLTokenizer.END:"",""\t\t\t\t\texpr.setEnd();"",""\t\t\t\t\treturn expr;"",""\t\t\t\tdefault:"",""\t\t\t\t\tthrow new Error();"",""\t\t\t}"",""\t\t\ttoken = nextToken(MISSING_WHEN_ELSE_END);"",""\t\t}"",""    }""]"
/smallsql/database/Command/getUpdateCount(),"[""int getUpdateCount(){"",""        return updateCount;"",""    }""]"
/smallsql/database/Column/getColumnSize(),"[""int getColumnSize(){"",""    \tif(SSResultSetMetaData.isNumberDataType(dataType))"",""    \t\t return getPrecision();"",""    \telse return getDisplaySize();"",""    }""]"
"/smallsql/database/StoreImpl/getFloat(int,int)","[""/**"",""     * It used for ResultSet.getFloat()"",""     */"",""    @Override"",""    float getFloat(int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    return readBoolean() ? 1 : 0;"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return Utils.bytes2float( readBinary() );"",""            case SQLTokenizer.TINYINT:"",""                    return readUnsignedByte();"",""            case SQLTokenizer.SMALLINT:"",""                    return readShort();"",""            case SQLTokenizer.INT:"",""                    return readInt();"",""            case SQLTokenizer.BIGINT:"",""                    return readLong();"",""            case SQLTokenizer.REAL:"",""                    return readFloat();"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return (float)readDouble();"",""            case SQLTokenizer.MONEY:"",""                    return readLong() / (float)10000.0;"",""            case SQLTokenizer.SMALLMONEY:"",""                    return readInt() / (float)10000.0;"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return readNumeric().floatValue();"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return Float.parseFloat( readString() );"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return Float.parseFloat( readLongString() );"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());"",""                    ObjectInputStream ois = new ObjectInputStream(bais);"",""                    return Float.parseFloat( ois.readObject().toString() );"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return Utils.bytes2float( readLongBinary() );"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\t\treturn readTimestamp();"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\t\t\treturn readTime();"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\t\t\treturn readDate();"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\t\treturn readSmallDateTime();"",""\t\t\tdefault:"",""\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \""REAL\"" });"",""        }"",""    }""]"
/smallsql/database/Where/afterLast(),"[""final void afterLast() throws Exception {"",""\t\twhile(next()){/* scroll after the end */}"",""\t}""]"
/smallsql/database/DateTime/removeDateTimeOffset(long),"[""private static long removeDateTimeOffset(long datetime){"",""\t\tsynchronized(cal){"",""\t\t\tcal.setTimeZone( TimeZone.getDefault() );"",""\t\t\tcal.setTimeInMillis( datetime );"",""\t\t\treturn datetime + cal.get( Calendar.ZONE_OFFSET) + cal.get( Calendar.DST_OFFSET);"",""\t\t}"",""\t}""]"
"/smallsql/database/SQLParser/alterTable(java.lang.String,java.lang.String)","[""Command alterTable( String catalog, String name ) throws SQLException{"",""    \tSQLToken tokenType = nextToken(MISSING_ADD_ALTER_DROP);"",""        CommandTable cmd = new CommandTable( con.log, catalog, name, tokenType.value );"",""    \tswitch(tokenType.value){"",""    \tcase SQLTokenizer.ADD:"",""    \t\tSQLToken token;"",""    \t\tdo{"",""    \t\t\ttoken = nextToken( MISSING_IDENTIFIER );"",""    \t\t\ttoken = addColumn( token, cmd );"",""    \t\t}while(token != null && token.value == SQLTokenizer.COMMA );"","""",""    \t\treturn cmd;"",""    \tdefault:"",""    \t\tObject[] param = { \""ALTER TABLE \"" + tokenType.getName( sql ) };"",""            throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);"",""    \t}"",""    }""]"
/smallsql/database/LongLongList/clear(),"[""final void clear(){"",""\t\tsize = 0;"",""\t}""]"
"/smallsql/database/ExpressionArithmetic/getString(java.lang.String,java.lang.String)","[""final private String getString( String lVal, String rVal ) throws java.lang.Exception {"",""        switch(operation){"",""            case ADD: return lVal + rVal;"",""        }"",""        throw createUnspportedConversion( SQLTokenizer.VARCHAR );"",""    }""]"
/smallsql/database/ExpressionFunctionRand/getFunction(),"[""final int getFunction(){ return SQLTokenizer.RAND; }""]"
"/smallsql/database/SSDatabaseMetaData/getFunctions(int,int)","[""private String getFunctions(int from, int to){"",""\t\tStringBuffer buf = new StringBuffer();"",""\t\tfor(int i=from; i\<=to; i++){"",""\t\t\tif(i != from) buf.append(\',\');"",""\t\t\tbuf.append( SQLTokenizer.getKeyWord(i) );"",""\t\t}"",""\t\treturn buf.toString();"",""    }""]"
/smallsql/database/StoreImpl/writeSmallDateTime(long),"[""void writeSmallDateTime( long datetime){"",""        writeInt( (int)(datetime / 60000));"",""    }""]"
/smallsql/database/ExpressionFunctionOctetLen/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.OCTETLEN;"",""\t}""]"
/smallsql/junit/TestGroupBy/testSumLong(),"[""public void testSumLong() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Long(4), \""Select sum(cast(id as BigInt)) FROM \"" + table1);"",""\t}""]"
/smallsql/junit/TestAlterTable/testAddWithTableLock_REPEATABLE_READ(),"[""public void testAddWithTableLock_REPEATABLE_READ() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        int isolation = con.getTransactionIsolation();"",""        con.setAutoCommit(false);"",""        try{"",""            con.setTransactionIsolation( Connection.TRANSACTION_REPEATABLE_READ );"",""            ResultSet rs = st.executeQuery(\""Select * From \"" + table);"",""            rs.next();"",""            try {"",""                st.execute(\""Alter Table \"" + table + \"" Add a Varchar(20)\"");"",""                fail(\""Alter Table should not work on a table with a lock.\"");"",""            } catch (SQLException ex) {"",""                assertSQLException( \""01000\"", 0, ex );"",""            }"",""            rs.next();"",""        }finally{"",""            con.setTransactionIsolation(isolation);"",""            con.setAutoCommit(true);"",""        }"",""    }""]"
/smallsql/database/StoreImpl/readString(),"[""String readString(){"",""        int length = readShort() & 0xFFFF;"",""        return new String( readChars(length) );"",""    }""]"
/smallsql/database/ExpressionFunctionACos/getFunction(),"[""final int getFunction(){ return SQLTokenizer.ACOS; }""]"
/smallsql/junit/TestDataTypes/tearDown(),"[""public void tearDown(){"",""        try{"",""            Connection con = AllTests.getConnection();"",""            Statement st = con.createStatement();"",""            st.execute(\""drop table \"" + table);"",""            st.close();"",""        }catch(Throwable e){"",""            //e.printStackTrace();"",""        }"",""    }""]"
/smallsql/database/Expressions/size(),"[""final int size(){"",""\t\treturn size;"",""\t}""]"
/smallsql/database/SSConnection/getTransactionIsolation(),"[""public int getTransactionIsolation(){"",""        return isolationLevel;"",""    }""]"
/smallsql/database/LongTreeList/resize(),"[""/**"",""\t * Increment the buffer size for the list."",""\t */"",""\tprivate final void resize() throws SQLException{"",""\t\tint newsize = data.length \<\< 1;"",""\t\tif(newsize \> 0xFFFFFF){ //see pointerSize"",""\t\t\tnewsize = 0xFFFFFF;"",""\t\t\tif(newsize == data.length) throw SmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);"",""\t\t}"",""\t\tbyte[] temp = new byte[newsize];"",""\t\tSystem.arraycopy(data, 0, temp, 0, data.length);"",""\t\tdata = temp;"",""\t}""]"
/smallsql/database/ExpressionFunctionLog10/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.log( param1.getDouble() ) / divisor;"",""    }""]"
/smallsql/database/ExpressionFunctionDayOfMonth/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(param1.isNull()) return 0;"",""\t\tDateTime.Details details = new DateTime.Details(param1.getLong());"",""\t\treturn details.day;"",""\t}""]"
/smallsql/database/ExpressionFunctionLCase/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.LCASE;"",""\t}""]"
"/smallsql/junit/TestScrollable/testUpdatableAssert(java.sql.Connection,java.sql.ResultSet,int)","[""private void testUpdatableAssert( Connection con, ResultSet rs, int row) throws Exception{"",""        con.setAutoCommit(false);"",""        for(int r=row; r \< 4; r++){"",""            rs.moveToInsertRow();"",""            rs.updateString( \""v\"", \""qwert\"" + r);"",""            rs.insertRow();"",""        }"",""        "",""        assertTrue( rs.last() );"",""        assertEquals( 3, rs.getRow() );     "",""        "",""        rs.beforeFirst();"",""        assertRowCount( 3, rs );"",""        "",""        rs.beforeFirst();"",""        testAbsoluteRelativeAssert(rs);"",""        "",""        con.rollback();"",""        "",""        assertRowCount( row - 1, con.createStatement().executeQuery(\""Select * from Scrollable\""));"",""        "",""        rs.last();"",""        assertTrue( rs.rowDeleted() );"",""        assertTrue( rs.rowInserted() );"",""        rs.beforeFirst();"",""        assertRowCount( 3, rs );"",""        "",""        con.setAutoCommit(true);"",""    }""]"
/smallsql/database/IndexDescription/matchFactor(smallsql.database.Strings),"[""/**"",""\t * Described how well the index match to the column list."",""\t * @param strings a list of columns that should match"",""\t * @return Integer.MAX_VALUE does not match; 0 - 100% match"",""\t */"",""\tfinal int matchFactor(Strings strings){"",""\t\tif(strings.size() \< columns.size())"",""\t\t\treturn Integer.MAX_VALUE; //does not map"",""\t\t"",""\t\tnextColumn:"",""\t\tfor(int c=0; c\<columns.size(); c++){"",""\t\t\tString colName = columns.get(c);"",""\t\t\tfor(int s=0; s\<strings.size(); s++){"",""\t\t\t\tif(colName.equalsIgnoreCase(strings.get(s)) )"",""\t\t\t\t\tcontinue nextColumn;"",""\t\t\t}"",""\t\t\treturn Integer.MAX_VALUE; //No Strin found for colName"",""\t\t}"",""\t\treturn strings.size() - columns.size();"",""\t}""]"
"/smallsql/database/SSPreparedStatement/SSPreparedStatement(smallsql.database.SSConnection,java.lang.String,int,int)","[""SSPreparedStatement( SSConnection con, String sql, int rsType, int rsConcurrency ) throws SQLException {"",""        super( con, rsType, rsConcurrency );"",""        con.log.println(sql);"",""        SQLParser parser = new SQLParser();"",""        cmd = parser.parse( con, sql );"",""        top = cmd.getMaxRows();"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1Number/getFloat(),"[""final float getFloat() throws Exception {"",""\t\treturn (float)getDouble();"",""\t}""]"
"/smallsql/database/Index/findRows(smallsql.database.Expressions,boolean,java.util.ArrayList)","[""/**"",""     * Returns a Long (unique) or a LongTreeList with rowOffsets. If the value in expressions does not exist then it"",""     * return a null."",""     * "",""     * @param expressions"",""     *            The value that are search in the Index."",""     * @param searchNullValues"",""     *            expressions with NULL values should return a result."",""     * @param nodeList"",""     *            optional, can be null. The search path in the index tree."",""     */"",""\tfinal Object findRows(Expressions expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{"",""        IndexNode page = rootPage;"",""        int count = expressions.size();"",""        for(int i = 0; i \< count; i++){"",""            page = findRows(page, expressions.get(i), searchNullValues, nodeList);"",""            if(page == null)"",""                return null;"",""            if(i + 1 == count)"",""                return page.getValue();"",""            else"",""                page = (IndexNode)page.getValue();"",""        }"",""        throw new Error();"",""    }""]"
"/smallsql/database/ExpressionValue/getBytes(java.lang.Object,int)","[""static byte[] getBytes(Object obj, int dataType) throws Exception{"",""\t\tif(obj == null) return null;"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.BINARY:"",""\t\t\tcase SQLTokenizer.VARBINARY:"",""            case SQLTokenizer.LONGVARBINARY:"",""\t\t\t\treturn (byte[])obj;"",""\t\t\tcase SQLTokenizer.VARCHAR:"",""\t\t\tcase SQLTokenizer.CHAR:"",""\t\t\tcase SQLTokenizer.NVARCHAR:"",""\t\t\tcase SQLTokenizer.NCHAR:"",""\t\t\t\treturn ((String)obj).getBytes();"",""\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:"",""\t\t\t\treturn Utils.unique2bytes((String)obj);"",""            case SQLTokenizer.INT:"",""                return Utils.int2bytes( ((Number)obj).intValue() );"",""            case SQLTokenizer.DOUBLE:"",""                return Utils.double2bytes( ((Number)obj).doubleValue() );"",""            case SQLTokenizer.REAL:"",""                return Utils.float2bytes( ((Number)obj).floatValue() );"",""\t\t\tdefault: throw createUnsupportedConversion(dataType, obj, SQLTokenizer.VARBINARY);"",""\t\t}"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsResultSetType(int),"[""public boolean supportsResultSetType(int type) {"",""\t\tswitch(type){"",""\t\t\tcase ResultSet.TYPE_FORWARD_ONLY:"",""\t\t\tcase ResultSet.TYPE_SCROLL_INSENSITIVE:"",""\t\t\tcase ResultSet.TYPE_SCROLL_SENSITIVE:"",""\t\t\t\treturn true;"",""\t\t}"",""\t\treturn false;"",""    }""]"
/smallsql/database/TableResult/getBoolean(int),"[""@Override"",""    final boolean getBoolean( int colIdx ) throws Exception{"",""        return store.getBoolean( offsets[colIdx], dataTypes[colIdx] );"",""    }""]"
/smallsql/database/Database/getCatalogs(smallsql.database.Database),"[""/**"",""     * Create a list of all available Databases from the point of the current "",""     * Database or current working directory"",""     * @param database - current database"",""     * @return"",""     */"",""    static Object[][] getCatalogs(Database database){"",""    \tList catalogs = new ArrayList();"",""    \tFile baseDir = (database != null) ?"",""    \t\t\t\t\tdatabase.directory.getParentFile() :"",""\t\t\t\t\t\tnew File(\"".\"");"",""\t\tFile dirs[] = baseDir.listFiles();"",""\t\tif(dirs != null)"",""\t\t\tfor(int i=0; i\<dirs.length; i++){"",""\t\t\t\tif(dirs[i].isDirectory()){"",""\t\t\t\t\tif(new File(dirs[i], Utils.MASTER_FILENAME).exists()){"",""\t\t\t\t\t\tObject[] catalog = new Object[1];"",""\t\t\t\t\t\tcatalog[0] = dirs[i].getPath();"",""\t\t\t\t\t\tcatalogs.add(catalog);"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t}"",""\t\tObject[][] result = new Object[catalogs.size()][];"",""\t\tcatalogs.toArray(result);"",""\t\treturn result;"",""    }""]"
/smallsql/database/ExpressionFunctionRight/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.RIGHT;"",""\t}""]"
/smallsql/database/UnionAll/rowInserted(),"[""final boolean rowInserted(){"",""\t\treturn currentDS.rowInserted();"",""\t}""]"
/smallsql/database/MemoryResult/getString(int),"[""String getString( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getString();"",""\t}""]"
/smallsql/junit/TestThreads/testConcurrentThreadWrite()/$anonymous1/run(),"[""public void run(){"",""                        try{"",""                            Statement st2 = con.createStatement();"",""                            int count = st2.executeUpdate(\""UPDATE ConcurrentWrite SET value = value + 1\"");"",""                            assertEquals(\""Update Count\"", 1, count);"",""                        }catch(Throwable ex){"",""                            throwable = ex;"",""                        }"",""                    }""]"
/smallsql/junit/TestOther/testConstantAndRowPos(),"[""public void testConstantAndRowPos() throws Exception{"",""\t\tassertRowCount( 1, \""Select 12, \'qwert\'\"" );"",""\t}""]"
/smallsql/database/TableResult/deleteRow(),"[""@Override"",""    final void deleteRow() throws SQLException{"",""\t\tstore.deleteRow(con); "",""\t\tstore = new StoreNull(store.getNextPagePos());"",""\t}""]"
/smallsql/database/MemoryResult/isFirst(),"[""final boolean isFirst(){"",""\t\treturn rowIdx == 0 && currentRow != null;"",""\t}""]"
/smallsql/database/SortedResult/last(),"[""boolean last() throws Exception{"",""\t\tafterLast();"",""\t\treturn previous();"",""\t}""]"
/smallsql/database/MemoryResult/getDouble(int),"[""double getDouble( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getDouble();"",""\t}""]"
/smallsql/junit/TestOther/testCreateDropDatabases(),"[""public void testCreateDropDatabases() throws Exception{"",""\t\tConnection con = DriverManager.getConnection(\""jdbc:smallsql\"");"",""\t\t"",""\t\tStatement st = con.createStatement();"",""\t\ttry{"",""\t\t\tst.execute(\""Create Database anyTestDatabase\"");"",""\t\t}catch(SQLException ex){"",""\t\t\tst.execute(\""Drop Database anyTestDatabase\"");"",""\t\t\tthrow ex;"",""\t\t}"",""\t\tst.execute(\""Drop Database anyTestDatabase\"");"",""\t}""]"
/smallsql/database/RowSource/isExpressionsFromThisRowSource(smallsql.database.Expressions),"[""/**"",""     * Check if the list of ExpressionName based on this RowSource."",""     * @param columns list of ExpressionNames"",""     * @return false if one or more ExpressionName that not based on this RowSource"",""     * @see Utils#getExpressionNameFromTree(Expression)"",""     */"",""    abstract boolean isExpressionsFromThisRowSource(Expressions columns);""]"
/smallsql/database/MutableNumeric/MutableNumeric(java.math.BigDecimal),"[""MutableNumeric( BigDecimal big ){"",""        this(big.unscaledValue().toByteArray() );"",""        scale   = big.scale();"",""    }""]"
/smallsql/database/SSResultSetMetaData/isCurrency(int),"[""public boolean isCurrency(int column) throws SQLException {"",""        switch(getColumnExpression( column ).getDataType()){"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""                return true;"",""        }"",""        return false;"",""    }""]"
/smallsql/database/StorePageMap/remove(long),"[""/**"",""\t * Removes the mapping for this key from this map if present."",""\t *"",""\t * @param  key key whose mapping is to be removed from the map."",""\t * @return previous value associated with specified key, or \<tt\>null\</tt\>"",""\t *\t       if there was no mapping for key.  A \<tt\>null\</tt\> return can"",""\t *\t       also indicate that the map previously associated \<tt\>null\</tt\>"",""\t *\t       with the specified key."",""\t */"",""\tfinal TableStorePage remove(long key) {"",""\t\tint i = (int)(key % table.length);"",""\t\tEntry prev = table[i];"",""\t\tEntry e = prev;"","""",""\t\twhile (e != null) {"",""\t\t\tEntry next = e.next;"",""\t\t\tif (e.key == key) {"",""\t\t\t\tsize--;"",""\t\t\t\tif (prev == e) "",""\t\t\t\t\ttable[i] = next;"",""\t\t\t\telse"",""\t\t\t\t\tprev.next = next;"",""\t\t\t\treturn e.value;"",""\t\t\t}"",""\t\t\tprev = e;"",""\t\t\te = next;"",""\t\t}"",""\t\treturn null;"",""\t}""]"
/smallsql/database/ColumnExpression/isAutoIncrement(),"[""boolean isAutoIncrement(){"",""\t\treturn expr.isAutoIncrement();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsSchemasInDataManipulation(),"[""public boolean supportsSchemasInDataManipulation() {"",""    \treturn false;"",""    }""]"
/smallsql/database/Index/findNull(smallsql.database.IndexNode),"[""final private IndexNode findNull(IndexNode page){"",""\t\treturn page.getChildNode( (char)0 );"",""\t}""]"
/smallsql/database/CommandTable/addForeingnKey(smallsql.database.ForeignKey),"[""void addForeingnKey(ForeignKey key){"",""        foreignKeys.add(key);"",""    }""]"
"/smallsql/database/SSResultSet/updateValue(int,java.lang.Object,int)","[""final private void updateValue(int columnIndex, Object x, int dataType) throws SQLException{"",""\t\tgetUpdateValue( columnIndex ).set( x, dataType );"",""\t\tif(st.con.log.isLogging()){"",""\t\t\t"",""\t\t\tst.con.log.println(\""parameter \'\""+metaData.getColumnName(columnIndex)+\""\' = \""+x+\""; type=\""+dataType);"",""\t\t}"",""    }""]"
"/smallsql/database/SQLParser/createSyntaxError(smallsql.database.SQLToken,int[])","[""/**"",""\t * Create an \""Additional keyword required\"" syntax error."",""\t * "",""\t * @param token"",""\t *            token object."",""\t * @param validValues"",""\t *            valid values."",""\t * @return Exception."",""\t */"",""    private SQLException createSyntaxError(SQLToken token, int[] validValues){"",""    \tString msgStr = SmallSQLException.translateMsg("",""    \t\t\tLanguage.STXADD_KEYS_REQUIRED, new Object[] { });"",""    \t"",""    \tStringBuffer msgBuf = new StringBuffer( msgStr );"","""",""        for(int i=0; i\<validValues.length; i++){"",""            String name = SQLTokenizer.getKeyWord(validValues[i]);"",""            if(name == null) name = String.valueOf( (char)validValues[i] );"",""            msgBuf.append( name );"",""            if (i \< validValues.length - 2)"",""                msgBuf.append( \"", \"");"",""            else"",""            if ( i == validValues.length - 2 )"",""                msgBuf.append( \"" or \"");"",""        }"","""",""    \tString message = getErrorString("",""    \t\t\ttoken, Language.CUSTOM_MESSAGE, msgBuf);"",""    \treturn SmallSQLException.create(Language.CUSTOM_MESSAGE, message);"",""    }""]"
/smallsql/database/JoinScroll/next(),"[""boolean next() throws Exception{"",""        boolean result;"",""        if(fullReturnCounter \>=0){"",""            do{"",""                if(fullReturnCounter \>= fullRowCount){"",""                    return false; "",""                }"",""                right.next();"",""            }while(isFullNotValid[fullReturnCounter++]);"",""            return true;"",""        }"",""        do{"",""            if(isBeforeFirst){               "",""                result = left.next();"",""                if(result){ "",""                    result = right.first();"",""                    if(!result){"",""                        switch(type){"",""                            case Join.LEFT_JOIN:"",""                            case Join.FULL_JOIN:"",""                                isOuterValid = false;"",""                                isBeforeFirst = false;"",""                                right.nullRow();"",""                                return true;"",""                        }"",""                    }else fullRightRowCounter++;"",""                }else{"",""                    // left does not include any row"",""                    if(type == Join.FULL_JOIN){"",""                        while(right.next()){"",""                            fullRightRowCounter++;"",""                        }"",""                        fullRowCount = fullRightRowCounter;"",""                    }"",""                }"",""            }else{"",""                result = right.next();              "",""                if(!result){"",""                    switch(type){"",""                        case Join.LEFT_JOIN:"",""                        case Join.FULL_JOIN:"",""                            if(isOuterValid){"",""                                isOuterValid = false;"",""                                right.nullRow();"",""                                return true;"",""                            }"",""                            fullRowCount = Math.max( fullRowCount, fullRightRowCounter);"",""                            fullRightRowCounter = 0;"",""                    }"",""                    isOuterValid = true;"",""                    result = left.next();"",""                    if(result){ "",""                        result = right.first();"",""                        if(!result){"",""                            switch(type){"",""                                case Join.LEFT_JOIN:"",""                                case Join.FULL_JOIN:"",""                                    isOuterValid = false;"",""                                    right.nullRow();"",""                                    return true;"",""                            }"",""                        }else fullRightRowCounter++;"",""                    }"",""                    "",""                }else fullRightRowCounter++;"",""            }"",""            isBeforeFirst = false;"",""        }while(result && !getBoolean());"",""        isOuterValid = false;"",""        if(type == Join.FULL_JOIN){"",""            if(fullRightRowCounter \>= isFullNotValid.length){"",""                boolean[] temp = new boolean[fullRightRowCounter \<\< 1];"",""                System.arraycopy( isFullNotValid, 0, temp, 0, fullRightRowCounter);"",""                isFullNotValid = temp;"",""            }"",""            if(!result){"",""                if(fullRowCount == 0){"",""                    return false; "",""                }"",""                if(fullReturnCounter\<0) {"",""                    fullReturnCounter = 0;"",""                    right.first();"",""                    left.nullRow();"",""                }"",""                while(isFullNotValid[fullReturnCounter++]){"",""                    if(fullReturnCounter \>= fullRowCount){"",""                       return false; "",""                    }"",""                    right.next();"",""                }"",""                return true;"",""            }else"",""                isFullNotValid[fullRightRowCounter-1] = result;"",""        }"",""        return result;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getDatabaseProductVersion(),"[""public String getDatabaseProductVersion() {"",""    \treturn getDriverVersion();"",""    }""]"
/smallsql/database/ExpressionFunctionRand/isNull(),"[""boolean isNull() throws Exception{"",""        return getParams().length == 1 && param1.isNull();"",""    }""]"
"/smallsql/junit/TestLanguage/assertMessage(java.sql.SQLException,java.lang.String[])","[""/**"",""\t * Check if the passed texts are present inside the exception message and"",""\t * prints the message in System.out"",""\t */"",""\tprivate void assertMessage(SQLException e, String[] expectedTexts) {"",""\t\tString message = e.getMessage();"",""\t\tboolean found = true;"",""\t\t"",""\t\tfor (int i = 0; found && i \< expectedTexts.length; i++) {"",""\t\t\tfound = found && message.indexOf(expectedTexts[i]) \>= 0;"",""\t\t}"",""\t\t"",""\t\tif (! found) {"",""\t\t\tSystem.err.println(\""ERROR [Wrong message]:\"" + message);"",""\t\t\tfail();"",""\t\t}"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsIntegrityEnhancementFacility(),"[""public boolean supportsIntegrityEnhancementFacility() {"",""    \treturn true;"",""    }""]"
/smallsql/database/UnionAll/afterLast(),"[""final void afterLast() throws Exception {"",""\t\tdataSourceIdx = dataSources.size()-1;"",""\t\tcurrentDS = dataSources.get(dataSourceIdx);"",""\t\tcurrentDS.afterLast();"",""\t\trow = 0;"",""\t}""]"
/smallsql/junit/TestExceptionMethods/testAmbiguousColumn(),"[""public void testAmbiguousColumn() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{"",""            Statement st = con.createStatement();"",""            st.execute(\""create table foo (myint number)\"");"",""            st.execute(\""create table bar (myint number)\"");"",""            try{"",""                st.executeQuery(\""select myint from foo, bar\"");"",""                fail(\""SQLException \'Ambiguous name\' should be throw\"");"",""            }catch(SQLException e){"",""                assertSQLException(\""01000\"", 0, e);"",""            }"",""        }finally{"",""            dropTable(con, \""foo\"");"",""            dropTable(con, \""bar\"");"",""        }"",""    }""]"
"/smallsql/database/SSStatement/execute(java.lang.String,int[])","[""final public boolean execute(String sql, int[] columnIndexes) throws SQLException{"",""        setNeedGeneratedKeys(columnIndexes);"",""        return execute(sql);"",""    }""]"
"/smallsql/database/Database/createView(smallsql.database.SSConnection,java.lang.String,java.lang.String)","[""void createView(SSConnection con, String viewName, String sql) throws Exception{"",""\t\t// createFile() can run only one Thread success (it is atomic)"",""\t\t// Thats the create of the View does not need in the Synchronized."",""\t\tnew View( this, con, viewName, sql);"",""\t}""]"
/smallsql/database/TableViewResult/hasAlias(),"[""boolean hasAlias(){"",""\t\treturn alias != null;"",""\t}""]"
"/smallsql/database/StoreNoCurrentRow/getObject(int,int)","[""Object getObject(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/ExpressionFunctionTruncate/getFunction(),"[""final int getFunction(){ return SQLTokenizer.TRUNCATE; }""]"
"/smallsql/junit/BasicTestCase/assertEqualsRsValue(java.lang.Object,java.sql.ResultSet,boolean)","[""void assertEqualsRsValue(Object obj, ResultSet rs, boolean needTrim) throws Exception{"",""        String name = rs.getMetaData().getColumnName(1);"",""\t\tassertEqualsObject( \""Values not identical on read:\"", obj, rs.getObject(name), needTrim);"",""\t\tif(obj instanceof Time){"",""\t\t\tassertEquals(\""Time is different:\"", obj, rs.getTime(name) );"",""\t\t\tassertEquals(\""Time String is different:\"", obj.toString(), rs.getString(name) );"",""\t\t}"",""\t\tif(obj instanceof Timestamp){"",""\t\t\tassertEquals(\""Timestamp is different:\"", obj, rs.getTimestamp(name) );"",""\t\t\tassertEquals(\""Timestamp String is different:\"", obj.toString(), rs.getString(name) );"",""\t\t}"",""\t\tif(obj instanceof Date){"",""\t\t\tassertEquals(\""Date is different:\"", obj, rs.getDate(name) );"",""\t\t\tassertEquals(\""Date String is different:\"", obj.toString(), rs.getString(name) );"",""\t\t}"",""\t\tif(obj instanceof String){"",""            String str = (String)obj;"",""            assertEqualsObject(\""String is different:\"", str, rs.getString(name), needTrim );"",""\t\t\tassertEquals(\""String Boolean is different:\"", string2boolean(str), rs.getBoolean(name) );"",""            try{"",""                assertEquals(\""String Long is different:\"", Long.parseLong(str), rs.getLong(name) );"",""            }catch(NumberFormatException ex){/* ignore */}"",""            try{"",""                assertEquals(\""String Integer is different:\"", Integer.parseInt(str), rs.getInt(name) );"",""            }catch(NumberFormatException ex){/* ignore */}"",""            try{"",""                assertEquals(\""String Float is different:\"", Float.parseFloat(str), rs.getFloat(name), 0.0 );"",""            }catch(NumberFormatException ex){/* ignore */}"",""            try{"",""                assertEquals(\""String Double is different:\"", Double.parseDouble(str), rs.getDouble(name), 0.0 );"",""            }catch(NumberFormatException ex){/* ignore */}"",""\t\t}"",""\t\tif(obj instanceof BigDecimal){"",""            if(!needTrim){"",""                assertEquals(\""BigDecimal is different:\"", obj, rs.getBigDecimal(name) );"",""                assertEquals(\""Scale is different:\"", ((BigDecimal)obj).scale(), rs.getMetaData().getScale(1));"",""            }"",""            assertEquals(\""Scale Meta is different:\"", rs.getBigDecimal(name).scale(), rs.getMetaData().getScale(1));"",""\t\t\tBigDecimal big2 = ((BigDecimal)obj).setScale(2,BigDecimal.ROUND_HALF_EVEN);"",""\t\t\tassertEquals(\""BigDecimal mit scale is different:\"", big2, rs.getBigDecimal(name, 2) );"",""\t\t}"",""\t\tif(obj instanceof Integer){"",""\t\t\tassertEquals(\""Scale is different:\"", 0, rs.getMetaData().getScale(1));"",""\t\t}"",""\t\tif(obj instanceof Number){"",""            long longValue = ((Number)obj).longValue();"",""\t\t\tint intValue = ((Number)obj).intValue();"",""            if(longValue \>= Integer.MAX_VALUE)"",""                intValue = Integer.MAX_VALUE;"",""            if(longValue \<= Integer.MIN_VALUE)"",""                intValue = Integer.MIN_VALUE;"",""\t\t\tassertEquals(\""int is different:\"", intValue, rs.getInt(name) );"",""\t\t\tassertEquals(\""long is different:\"", longValue, rs.getLong(name) );"",""\t\t\tif(intValue \>= Short.MIN_VALUE && intValue \<= Short.MAX_VALUE)"",""\t\t\t\tassertEquals(\""short is different:\"", (short)intValue, rs.getShort(name) );"",""\t\t\tif(intValue \>= Byte.MIN_VALUE && intValue \<= Byte.MAX_VALUE)"",""\t\t\t\tassertEquals(\""byte is different:\"", (byte)intValue, rs.getByte(name) );"",""\t\t\t"",""\t\t\tdouble value = ((Number)obj).doubleValue();"",""\t\t\tassertEquals(\""Double is different:\"", value, rs.getDouble(name),0.0 );"",""\t\t\tassertEquals(\""Float is different:\"", (float)value, rs.getFloat(name),0.0 );"",""\t\t\tString valueStr = obj.toString();"",""            if(!needTrim){"",""                assertEquals(\""Number String is different:\"", valueStr, rs.getString(name) );"",""            }"",""\t\t\tBigDecimal decimal = Double.isInfinite(value) || Double.isNaN(value) ? null : new BigDecimal(valueStr);"",""            assertEqualsObject(\""Number BigDecimal is different:\"", decimal, rs.getBigDecimal(name) );"",""\t\t\tassertEquals(\""Number boolean is different:\"", value != 0, rs.getBoolean(name) );"",""\t\t}"",""\t\tif(obj == null){"",""\t\t\tassertNull(\""String is different:\"", rs.getString(name) );"",""\t\t\tassertNull(\""Date is different:\"", rs.getDate(name) );"",""\t\t\tassertNull(\""Time is different:\"", rs.getTime(name) );"",""\t\t\tassertNull(\""Timestamp is different:\"", rs.getTimestamp(name) );"",""\t\t\tassertNull(\""BigDecimal is different:\"", rs.getBigDecimal(name) );"",""\t\t\tassertNull(\""BigDecimal with scale is different:\"", rs.getBigDecimal(name, 2) );"",""\t\t\tassertNull(\""Bytes with scale is different:\"", rs.getBytes(name) );"",""\t\t\tassertEquals(\""Double is different:\"", 0, rs.getDouble(name),0 );"",""\t\t\tassertEquals(\""Float is different:\"", 0, rs.getFloat(name),0 );"",""\t\t\tassertEquals(\""Long is different:\"", 0, rs.getLong(name) );"",""\t\t\tassertEquals(\""Int is different:\"", 0, rs.getInt(name) );"",""\t\t\tassertEquals(\""SmallInt is different:\"", 0, rs.getShort(name) );"",""\t\t\tassertEquals(\""TinyInt is different:\"", 0, rs.getByte(name) );"",""\t\t\tassertEquals(\""Boolean is different:\"", false, rs.getBoolean(name) );"",""\t\t}"",""\t\tif(obj instanceof byte[]){"",""\t\t    assertTrue(\""Binary should start with 0x\"", rs.getString(name).startsWith(\""0x\""));"",""\t\t}"",""\t\t"",""\t\tResultSetMetaData metaData = rs.getMetaData();"",""\t\tString className = metaData.getColumnClassName(1);"",""\t\tassertNotNull( \""ClassName:\"", className);"",""\t\tif(obj != null){"",""\t\t\tClass gotClass = Class.forName(className);"",""\t\t\tClass objClass = obj.getClass();"",""\t\t\tString objClassName = objClass.getName();"",""\t\t\t"",""\t\t\tint expectedLen = metaData.getColumnDisplaySize(1);"","""",""\t\t\t// B/CLOBs must be treated as special cases\t\t\t"",""\t\t\tif (gotClass.equals(java.sql.Blob.class)) {"",""\t\t\t\tassertTrue("",""\t\t\t\t\t\""ClassName assignable: \""+className+\""\<-\>\""+objClassName,"",""\t\t\t\t\tobjClass.equals(new byte[0].getClass()));"","""",""\t\t\t\tString message = \""Check DisplaySize: \"" + expectedLen + \""!=\"" + Integer.MAX_VALUE + \"")\"";"",""\t\t\t\tassertTrue( message, expectedLen == Integer.MAX_VALUE );"",""\t\t\t}"",""\t\t\telse if (gotClass.equals(java.sql.Clob.class)) { // same as NCLOB"",""\t\t\t\tassertTrue("",""\t\t\t\t\t\""ClassName assignable: \""+className+\""\<-\>\""+objClassName,"",""\t\t\t\t\tobjClass.equals(String.class));"","""",""\t\t\t\tString message = \""Check DisplaySize: \"" + expectedLen + \""!=\"" + Integer.MAX_VALUE + \"")\"";"",""\t\t\t\tassertTrue( message, expectedLen == Integer.MAX_VALUE );"",""\t\t\t}"",""\t\t\telse {"",""\t\t\t\tString foundStr = rs.getString(name);"",""\t\t\t\t"",""\t\t\t\tassertTrue(\""ClassName assignable: \""+className+\""\<-\>\""+objClassName, gotClass.isAssignableFrom(objClass));"",""\t\t\t\tassertTrue( \""DisplaySize to small \""+ expectedLen +\""\<\""+foundStr.length()+\"" (\"" + foundStr + \"")\"", expectedLen \>= foundStr.length() );"",""\t\t\t}"",""\t\t}"",""   \t}""]"
/smallsql/database/TableStorePageInsert/commit(),"[""/**"",""\t * Call supper.commit() and update the link."",""\t */"",""\tfinal long commit() throws SQLException{"",""\t\tlong result = super.commit();"",""\t\tlink.filePos = fileOffset;"",""\t\tlink.page = null;"",""\t\treturn result;"",""\t}""]"
/smallsql/database/ExpressionFunctionLength/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.LENGTH;"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnP1Number/getDataType(),"[""final int getDataType() {"",""\t\treturn ExpressionArithmetic.getBestNumberDataType(param1.getDataType());"",""\t}""]"
"/smallsql/database/SSConnection/prepareStatement(java.lang.String,int,int,int)","[""public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {"",""\t\t//TODO resultSetHoldability"",""\t\treturn new SSPreparedStatement( this, sql);"",""    }""]"
/smallsql/database/SSResultSet/moveToInsertRow(),"[""public void moveToInsertRow() throws SQLException {"",""    \tif(isUpdatable){"",""    \t\tisInsertRow = true;"",""            clearRowBuffer();"",""    \t}else{"",""            throw SmallSQLException.create(Language.RSET_READONLY);"",""    \t}"",""    }""]"
/smallsql/database/Expression/getScale(),"[""int getScale(){"",""\t\treturn getScale(getDataType());"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getNumeric(),"[""MutableNumeric getNumeric() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn new MutableNumeric(getLong());"",""\t}""]"
/smallsql/database/SSCallableStatement/getDate(int),"[""public Date getDate(int i) throws SQLException {"",""        try{"",""\t\t\tExpression expr = getValue(i);"",""            wasNull = expr.isNull();"",""\t\t\tif(wasNull) return null;"",""\t\t\treturn DateTime.getDate( expr.getLong() );"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/Where/nullRow(),"[""final void nullRow() {"",""\t\trowSource.nullRow();"",""\t\trow = 0;"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])","[""public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException {"",""\t\tString[] colNames = {\""TYPE_CAT\"", \""TYPE_SCHEM\"", \""TYPE_NAME\"", \""CLASS_NAME\"", \""DATA_TYPE\"", \""REMARKS\""};        "",""\t\tObject[][] data   = new Object[0][];"",""\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""    }""]"
/smallsql/database/DateTime/getTimeMillis(),"[""long getTimeMillis(){"",""\t\treturn time;"",""\t}""]"
/smallsql/database/StoreImpl/readDouble(),"[""double readDouble(){"",""        return Double.longBitsToDouble( readLong() );"",""    }""]"
/smallsql/database/NoFromResult/getRow(),"[""final int getRow(){"",""\t\treturn rowPos == 1 ? 1 : 0;"",""\t}""]"
/smallsql/database/SSResultSet/updateNull(java.lang.String),"[""public void updateNull(String columnName) throws SQLException {"",""        updateNull( findColumn( columnName ) );"",""    }""]"
/smallsql/database/SortedResult/absolute(int),"[""boolean absolute(int newRow) throws Exception{"",""        if(newRow == 0) throw SmallSQLException.create(Language.ROW_0_ABSOLUTE);"",""        if(newRow \> 0){"",""            beforeFirst();"",""            while(newRow-- \> 0){"",""                if(!next()){"",""                    return false;"",""                }"",""            }"",""        }else{"",""            afterLast();"",""            while(newRow++ \< 0){"",""                if(!previous()){"",""                    return false;"",""                }"",""            }"",""        }"",""        return true;"",""    }""]"
/smallsql/database/StoreImpl/readInt(),"[""int readInt(){"",""        return  ((page[ offset++ ]) \<\< 24) |"",""                ((page[ offset++ ] & 0xFF) \<\< 16) |"",""                ((page[ offset++ ] & 0xFF) \<\< 8) |"",""                ((page[ offset++ ] & 0xFF));"",""    }""]"
/smallsql/database/SSResultSet/relative(int),"[""public boolean relative(int rows) throws SQLException {"",""\t\ttry{"",""            moveToCurrentRow();"",""\t\t\treturn getCmd().relative(rows);"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
"/smallsql/database/FileIndexNode/FileIndexNode(boolean,char,java.nio.channels.FileChannel)","[""/**"",""\t * Create a new Node in the Index."",""\t * @param unique describe if it is an unique index (primary key) or a multi value index is."",""\t */"",""\tFileIndexNode(boolean unique, char digit, FileChannel file){"",""\t\tsuper(unique, digit);"",""\t\tthis.file = file;"",""        fileOffset = -1;"",""\t}""]"
/smallsql/database/ExpressionFunction/equals(java.lang.Object),"[""/**"",""\t * Is used in GroupResult."",""\t */"",""\tpublic boolean equals(Object expr){"",""\t\tif(!super.equals(expr)) return false;"",""\t\tif(!(expr instanceof ExpressionFunction)) return false;"",""\t\treturn ((ExpressionFunction)expr).getFunction() == getFunction();"",""\t}""]"
"/smallsql/database/Database/getPrimaryKeys(smallsql.database.SSConnection,java.lang.String)","[""Object[][] getPrimaryKeys(SSConnection con, String table) throws SQLException{"",""\t\tList rows = new ArrayList();"",""\t\tStrings tables = getTables(table);"",""\t\tfor(int t=0; t\<tables.size(); t++){"",""    \t\tString tableName = tables.get(t);"",""    \t\tTableView tab = getTableView( con, tableName);"",""\t\t\tif(!(tab instanceof Table)) continue;"",""\t\t\tIndexDescriptions indexes = ((Table)tab).indexes;"",""\t\t\tfor(int i=0; i\<indexes.size(); i++){"",""\t\t\t\tIndexDescription index = indexes.get(i);"",""\t\t\t\tif(index.isPrimary()){"",""\t\t\t\t\tStrings columns = index.getColumns();"",""\t\t\t\t\tfor(int c=0; c\<columns.size(); c++){"",""\t\t\t\t\t\tObject[] row = new Object[6];"",""\t\t\t\t\t\trow[0] = getName(); \t\t\t//TABLE_CAT"",""\t\t\t\t\t\t\t\t\t\t\t\t\t\t//TABLE_SCHEM"",""\t\t\t\t\t\trow[2] = tableName;\t\t\t\t//TABLE_NAME"",""\t\t\t\t\t\trow[3] = columns.get(c);\t\t//COLUMN_NAME"",""\t\t\t\t\t\trow[4] = Utils.getShort(c+1);\t//KEY_SEQ"",""\t\t\t\t\t\trow[5] = index.getName();\t\t//PK_NAME"",""\t\t\t\t\t\trows.add(row);"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t}"",""\t\t}"",""\t\tObject[][] result = new Object[rows.size()][];"",""\t\trows.toArray(result);"",""\t\treturn result;\t\t"",""\t}""]"
/smallsql/database/Where/getRowPosition(),"[""final long getRowPosition() {"",""\t\treturn rowSource.getRowPosition();"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampDiff/isNull(),"[""boolean isNull() throws Exception {"",""\t\treturn param1.isNull() || param2.isNull();"",""\t}""]"
"/smallsql/database/SSResultSet/updateDouble(int,double)","[""public void updateDouble(int columnIndex, double x) throws SQLException {"",""\t\tupdateValue( columnIndex, new Double(x), SQLTokenizer.DOUBLE);"",""    }""]"
/smallsql/database/ViewResult/rowDeleted(),"[""final boolean rowDeleted(){"",""\t\treturn commandSelect.from.rowDeleted();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/nullsAreSortedHigh(),"[""public boolean nullsAreSortedHigh() {"",""\t\treturn false;"",""    }""]"
/smallsql/database/Database/removeTableView(java.lang.String),"[""/**"",""     * Remove a table or view from the cache of open objects."",""     * @param tableViewName the name of the object"",""     */"",""    void removeTableView(String tableViewName){"",""        synchronized(tableViews){"",""            tableViews.remove( tableViewName );"",""        }"",""    }""]"
/smallsql/database/MemoryStream/writeShort(int),"[""void writeShort(int value){"",""\t\tverifyFreePufferSize(2);"",""\t\tpuffer[ offset++ ] = (byte)(value \>\> 8);"",""\t\tpuffer[ offset++ ] = (byte)(value);"",""\t}""]"
/smallsql/database/ExpressionFunctionExp/getFunction(),"[""final int getFunction(){ return SQLTokenizer.EXP; }""]"
/smallsql/database/StorePage/commit(),"[""@Override"",""    long commit() throws SQLException{"",""\t\ttry{"",""\t\t    // rsFile == null --\> rollback()"",""\t\t    // page == null --\> only a write lock, no data"",""\t\t\tif(raFile != null && page != null){"",""\t\t\t\t// if new page then append at end of file"",""\t\t\t    ByteBuffer buffer = ByteBuffer.wrap( page, 0, pageSize );"",""\t\t\t    synchronized(raFile){"",""    \t\t\t\tif(fileOffset \< 0){"",""    \t\t\t\t\tfileOffset = raFile.size();"",""    \t\t\t\t}"",""\t\t\t\t    raFile.position(fileOffset);"",""\t\t\t\t    raFile.write(buffer);"",""\t\t\t\t}"",""\t\t\t\t//raFile.getFD().sync();"",""\t\t\t}"",""\t\t\treturn fileOffset;"",""\t\t}catch(Exception e){"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""\t}""]"
/smallsql/database/SortedResult/previous(),"[""boolean previous() throws Exception{"",""        if(useSetRowPosition) throw SmallSQLException.create(Language.ORDERBY_INTERNAL);"",""        if(currentInsertedRow() == 0){"",""            scrollStatus.afterLast();"",""        }"",""        row--;"",""        if(currentInsertedRow() \>= 0){"",""            rowSource.setRowPosition( insertedRows.get( currentInsertedRow() ) );"",""            return true;"",""        }"",""        long rowPosition = scrollStatus.getRowOffset(false);"",""        if(rowPosition \>= 0){"",""            rowSource.setRowPosition( rowPosition );"",""            return true;"",""        }else{"",""            rowSource.noRow();"",""            row = 0;"",""            return false;"",""        }"",""    }""]"
/smallsql/database/Logger/isLogging(),"[""boolean isLogging(){"",""\t\treturn DriverManager.getLogWriter() != null;"",""\t}""]"
/smallsql/database/SSStatement/SSStatement(smallsql.database.SSConnection),"[""SSStatement(SSConnection con) throws SQLException{"",""        this(con, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);"",""    }""]"
"/smallsql/database/View/write(smallsql.database.Database,smallsql.database.SSConnection)","[""private void write(Database database, SSConnection con) throws Exception{"",""\t    FileChannel raFile = createFile( con, database );"",""\t\tStorePage storePage = new StorePage( null, -1, raFile, 8);"",""\t\tStoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.CREATE, 8);"",""\t\tstore.writeString(sql);\t\t"",""\t\t"",""\t\t// write additional informations"",""\t\tstore.writeInt( 0 ); // no more additinal informations"","""",""\t\tstore.writeFinsh(null);"",""\t\traFile.close();"",""\t}""]"
/smallsql/database/ExpressionFunctionLeft/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.LEFT;"",""\t}""]"
"/smallsql/database/StoreImpl/createStore(smallsql.database.Table,smallsql.database.StorePage,int,long)","[""/**"",""     * Follow types of StoreImpl are possible:"",""     * INSERT: A page that will be include new data. filePos is not define yet."",""     * CREATE: A special type of INSERT"",""     * SELECT: Only read operations are possible."",""     * UPDATE: Has a filePos, if the new size is to small then the old page must be deleted and a new added."",""     * DELETE: Has no cache else only the filePos to write the flag."",""    */"",""    static StoreImpl createStore( Table table, StorePage storePage, int type, long filePos ) throws SQLException{"",""        try {"",""            StoreImpl store = new StoreImpl(table, storePage, type, filePos);"",""            switch(type){"",""                case SQLTokenizer.LONGVARBINARY:"",""                    // is used for storing of LONGVARBINARY and LONGVARCHAR"",""                    store.page = new byte[(int)filePos + PAGE_CONTROL_SIZE];"",""                    store.filePos = -1;"",""                    break;"",""                case SQLTokenizer.INSERT:"",""                case SQLTokenizer.CREATE:"",""                    store.page = new byte[DEFAULT_PAGE_SIZE];"",""                    break;"",""                case SQLTokenizer.SELECT:"",""                case SQLTokenizer.UPDATE:"",""            \tcase SQLTokenizer.DELETE:"",""                    if(storePage.page == null){"",""                        FileChannel raFile = storePage.raFile;"",""                        synchronized(raFile){"",""                            if(filePos \>= raFile.size() - PAGE_CONTROL_SIZE){"",""                                return null;"",""                            }"",""                            raFile.position(filePos);"",""                            synchronized(page_control){"",""                                pageControlBuffer.position(0);"",""                                raFile.read(pageControlBuffer);"",""                                store.page = page_control;"",""                                store.readPageHeader();"",""                            }"",""                            store.page = new byte[store.sizeUsed];"",""                            raFile.position(filePos);"",""                            ByteBuffer buffer = ByteBuffer.wrap(store.page);"",""                            raFile.read(buffer);"",""                        }"",""                    }else{"",""                        store.page = storePage.page;"",""                        store.sharedPageData = true;"",""                        store.readPageHeader();"",""                    }"",""                    store = store.loadUpdatedStore();"",""                    break;"",""                default: throw new Error();"",""            }"",""            store.offset = PAGE_CONTROL_SIZE;"",""            return store;"",""        } catch (Throwable th) {"",""            throw SmallSQLException.createFromException(th);"",""        }"",""    }""]"
"/smallsql/database/SSCallableStatement/setNull(java.lang.String,int,java.lang.String)","[""public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {"",""        setNull( findParameter( parameterName ), sqlType, typeName );"",""    }""]"
/smallsql/database/MutableNumeric/resizeValue(int),"[""/**"",""     * Resize the value mantissa with a carryover. "",""     * @param highBits Is the high value that is save on the resize place."",""     */"",""\tprivate void resizeValue(int highBits){"",""\t\tint val[] = new int[value.length+1];"",""\t\tval[0] = highBits;"",""\t\tSystem.arraycopy(value, 0, val, 1, value.length);"",""\t\tvalue = val;"",""    }""]"
/smallsql/database/ExpressionFunctionCeiling/getFunction(),"[""final int getFunction(){ return SQLTokenizer.CEILING; }""]"
/smallsql/database/ExpressionFunctionReturnP1StringAndBinary/getObject(),"[""final Object getObject() throws Exception {"",""\t\tif(SSResultSetMetaData.isBinaryDataType(param1.getDataType()))"",""\t\t\treturn getBytes();"",""\t\treturn getString();"",""\t}""]"
/smallsql/database/MemoryResult/isBeforeFirst(),"[""final boolean isBeforeFirst(){"",""\t\treturn rowIdx \< 0 || rowList.size() == 0;"",""\t}""]"
"/smallsql/database/Expressions/add(int,smallsql.database.Expression)","[""final void add(int idx, Expression expr){"",""\t\tif(size \>= data.length ){"",""\t\t\tresize(size \<\< 1);"",""\t\t}"",""\t\tSystem.arraycopy( data, idx, data, idx+1, (size++)-idx);"",""\t\tdata[idx] = expr;"",""\t}""]"
/smallsql/database/UnionAll/getLong(int),"[""final long getLong(int colIdx) throws Exception {"",""\t\treturn currentDS.getLong(colIdx);"",""\t}""]"
/smallsql/database/SSResultSet/getObject(int),"[""public Object getObject(int columnIndex) throws SQLException {"",""        try{"",""            Object obj = getValue(columnIndex).getApiObject();"",""            wasNull = obj == null;"",""            return obj;"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/RowSource/isFirst(),"[""/**"",""\t * Equals to ResultSet.isFirst()."",""\t */"",""\tboolean isFirst() throws SQLException{"",""\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);"",""\t}""]"
"/smallsql/database/SSResultSet/updateByte(int,byte)","[""public void updateByte(int columnIndex, byte x) throws SQLException {"",""\t\tupdateValue( columnIndex, Utils.getShort(x), SQLTokenizer.TINYINT);"",""    }""]"
/smallsql/junit/TestScrollable/testAbsoluteRelative(),"[""public void testAbsoluteRelative() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.createStatement().execute(\""Create Table Scrollable (i counter, v varchar(20))\"");"",""\t\t\tassertRowCount( 0, \""Select * from Scrollable\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into Scrollable(v) Values(\'qwert1\')\"");"",""\t\t\tcon.createStatement().execute(\""Insert Into Scrollable(v) Values(\'qwert2\')\"");"",""\t\t\tcon.createStatement().execute(\""Insert Into Scrollable(v) Values(\'qwert3\')\"");"","""",""            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""            testAbsoluteRelativeAssert( st.executeQuery(\""Select * from Scrollable\"") );"",""            testAbsoluteRelativeAssert( st.executeQuery(\""Select * from Scrollable Order By i\"") );"",""            testAbsoluteRelativeAssert( st.executeQuery(\""Select v from Scrollable Group By v\"") );"",""            testAbsoluteRelativeAssert( st.executeQuery(\""Select v from Scrollable Group By v Order By v\"") );"",""\t\t}finally{"",""            dropTable( con, \""Scrollable\"");"",""\t\t}"",""\t}""]"
/smallsql/database/TableViewResult/updateRow(smallsql.database.Expression[]),"[""/**"",""     * Replace the values of the current rows with the new values of the Expression array."",""     * If an expression (not value) in the array null then the original value of the row is used."",""\t * @param updateValues a list expressions that produce the new values"",""\t * @throws Exception if any error occur like conversions or io exceptions"",""\t */"",""\tabstract void updateRow(Expression[] updateValues) throws Exception;""]"
/smallsql/database/IndexScrollStatus/getReturnValue(java.lang.Object),"[""/**"",""     * Check if the index is after the last position."",""     */"",""    /*final boolean isAfterLast(){"",""        if(longList != null || nodeStack.size() != 1){"",""            return false;"",""        }"",""        return ((IndexNodeScrollStatus)nodeStack.peek()).isAfterLast();"",""    }*/"",""    "",""\t"",""\tprivate final long getReturnValue( Object value){"",""\t\tif(rootPage.getUnique()){"",""\t\t\treturn ((Long)value).longValue();"",""\t\t}else{"",""\t\t\tlongList = (LongTreeList)value;"",""\t\t\tlongListEnum.reset();"",""\t\t\treturn longList.getNext(longListEnum); // there be should one value as minimum"",""\t\t}"",""\t\t"",""\t}""]"
/smallsql/junit/TestDBMetaData/testGetBestRowIdentifier(),"[""public void testGetBestRowIdentifier() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        dropTable(con,\""tblBestRow1\"");"",""        DatabaseMetaData md = con.getMetaData();"",""        Statement st = con.createStatement();"",""        st.execute(\""Create Table tblBestRow1(id1 counter primary key, v nvarchar(100))\"");"",""        String[] colNames = {\""SCOPE\"", \""COLUMN_NAME\"", \""DATA_TYPE\"", \""TYPE_NAME\"", \""COLUMN_SIZE\"", \""BUFFER_LENGTH\"", \""DECIMAL_DIGITS\"", \""PSEUDO_COLUMN\""};"",""        int[] colTypes = {Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT};"",""        "",""        ResultSet rs = md.getBestRowIdentifier(null, null, \""tblBestRow1\"", DatabaseMetaData.bestRowSession, true);        "",""        assertRSMetaData(rs, colNames, colTypes);"",""        assertTrue(rs.next());"",""        assertEquals(\""Columnname:\"", \""id1\"", rs.getString(\""COLUMN_NAME\""));"",""        assertFalse(rs.next());"",""        "",""        String[] colNames2 = {\""TABLE_CAT\"", \""TABLE_SCHEM\"", \""TABLE_NAME\"", \""COLUMN_NAME\"", \""KEY_SEQ\"", \""PK_NAME\""};"",""        int[] colTypes2 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR};"",""        rs = md.getPrimaryKeys(null, null, \""tblBestRow1\"");        "",""        assertRSMetaData(rs, colNames2, colTypes2);"",""        assertTrue(rs.next());"",""        assertEquals(\""Columnname:\"", \""id1\"", rs.getString(\""COLUMN_NAME\""));"",""        assertFalse(rs.next());"",""        "",""        String[] colNames3 = {\""TABLE_CAT\"", \""TABLE_SCHEM\"", \""TABLE_NAME\"", \""NON_UNIQUE\"", \""INDEX_QUALIFIER\"", \""INDEX_NAME\"", \""TYPE\"", \""ORDINAL_POSITION\"", \""COLUMN_NAME\"", \""ASC_OR_DESC\"", \""CARDINALITY\"", \""PAGES\"", \""FILTER_CONDITION\""};"",""        int[] colTypes3 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.BOOLEAN, Types.NULL, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL};"",""        rs = md.getIndexInfo(null, null, \""tblBestRow1\"", true, true);        "",""        assertRSMetaData(rs, colNames3, colTypes3);"",""        assertTrue(rs.next());"",""        assertEquals(\""Columnname:\"", \""id1\"", rs.getString(\""COLUMN_NAME\""));"",""        assertFalse(rs.next());"",""        "",""        dropTable(con,\""tblBestRow1\"");"",""    }""]"
/smallsql/junit/TestDataTypes/runTest(),"[""public void runTest() throws Throwable {"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.execute(\""Create Table \"" + table +\""(abc \"" + datatype + \"")\"");"",""        String name = \""abc\"";"","""",""        Object[] values = null;"",""        String   quote = \""\"";"",""        String escape1 = \""\"";"",""        String escape2 = \""\"";"",""        boolean needTrim = false;"","""",""        ResultSet rs = st.executeQuery(\""SELECT * From \"" + table);"",""\t\tResultSetMetaData md = rs.getMetaData();"",""        switch(md.getColumnType(1)){"",""            case Types.CHAR:"",""                needTrim = true;"",""            case Types.VARCHAR:"",""            case Types.LONGVARCHAR:"",""            case Types.CLOB:"",""                values = new Object[]{null,\""qwert\"", \""asdfg\"", \""hjhjhj\"", \""1234567890 qwertzuiop 1234567890 asdfghjklö 1234567890 yxcvbnm,.- 1234567890 \""};"",""                quote  = \""\\\'\"";"",""                break;"",""            case Types.BIGINT:"",""                values = new Object[]{null,new Long(123), new Long(-2123), new Long(392839283)};"",""                break;"",""            case Types.INTEGER:"",""                values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(392839283)};"",""                break;"",""            case Types.SMALLINT:"",""                values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(32000)};"",""                break;"",""            case Types.TINYINT:"",""                values = new Object[]{null,new Integer(0), new Integer(12), new Integer(228)};"",""                break;"",""            case Types.REAL:"",""                values = new Object[]{null,new Float(0.0), new Float(-12.123), new Float(22812345234.9)};"",""                break;"",""            case Types.FLOAT:"",""            case Types.DOUBLE:"",""                values = new Object[]{null,new Double(0.0), new Double(-12.123), new Double(22812345234.9)};"",""                break;"",""            case Types.NUMERIC:"",""            case Types.DECIMAL:"",""                needTrim = true;"",""            \tif(md.getPrecision(1)\<16){//smallmoney"",""\t\t\t\t\tvalues = new Object[]{null,new BigDecimal(\""0.0\""), new BigDecimal(\""-2\""), new BigDecimal(\""-12.123\"")};"",""                /*if(rs.getMetaData().isCurrency(1)){"",""                    values = new Object[]{null, new Money(0.0), new Money(-12.123), new Money(202812.9)};*/"",""                }else{"",""                    values = new Object[]{null,new BigDecimal(\""0.0\""), new BigDecimal(\""-2\""), new BigDecimal(\""-12.123\""), new BigDecimal(\""22812345234.9\"")};"",""                }"",""                break;"",""            case Types.BIT:"",""            case Types.BOOLEAN:"",""                values = new Object[]{null, Boolean.TRUE, Boolean.FALSE};"",""                break;"",""            case Types.TIME:"",""                values = new Object[]{null, new Time(10,17,56), new Time(0,0,0),new Time(23,59,59)};"",""                escape1 = \""{t \'\"";"",""                escape2 = \""\'}\"";"",""                break;"",""\t\t\tcase Types.DATE:"",""\t\t\t\tvalues = new Object[]{null, new java.sql.Date(10,10,1), new java.sql.Date(0,0,1),new java.sql.Date(70,0,1)};"",""\t\t\t\tescape1 = \""{d \'\"";"",""\t\t\t\tescape2 = \""\'}\"";"",""\t\t\t\tbreak;"",""\t\t\tcase Types.TIMESTAMP:"",""\t\t\t\tif(md.getPrecision(1) \>16)"",""\t\t\t\t\tvalues = new Object[]{null, new Timestamp(10,10,1, 10,17,56, 0), new Timestamp(0,0,1, 0,0,0, 0),new Timestamp( 120,1,1, 23,59,59, 500000000),new Timestamp(0),new Timestamp( -120,1,1, 23,59,59, 500000000)};"",""\t\t\t\telse//smalldatetime"",""\t\t\t\t\tvalues = new Object[]{null, new Timestamp(10,10,1, 10,17,0, 0), new Timestamp(0,0,1, 0,0,0, 0),new Timestamp(0)};"",""\t\t\t\tescape1 = \""{ts \'\"";"",""\t\t\t\tescape2 = \""\'}\"";"",""\t\t\t\tbreak;"",""            case Types.BINARY:"",""                needTrim = true;"",""            case Types.VARBINARY:"",""            case Types.LONGVARBINARY:"",""            case Types.BLOB:"",""                values = new Object[]{null, new byte[]{1, 127, -23}};"",""                break;"",""            case Types.JAVA_OBJECT:"",""                values = new Object[]{null, new Integer(-123), new Double(1.2), new byte[]{1, 127, -23}};"",""                break;"",""            case -11: //UNIQUEIDENTIFER"",""                values = new Object[]{null, \""342734E3-D9AC-408F-8724-B7A257C4529E\"", \""342734E3-D9AC-408F-8724-B7A257C4529E\""};"",""                quote  = \""\\\'\"";"",""                break;"",""            default: fail(\""Unknown column type: \"" + rs.getMetaData().getColumnType(1));"",""        }"",""        rs.close();"",""\t\t"",""\t\t// remove all resource for reloading the tables from file"",""\t\tcon.close();"",""\t\tcon = AllTests.getConnection();"",""\t\tst = con.createStatement();"","""",""        for(int i=0; i\<values.length; i++){"",""            Object val = values[i];"",""            String q = (val == null) ? \""\"" : quote;"",""            String e1 = (val == null) ? \""\"" : escape1;"",""            String e2 = (val == null) ? \""\"" : escape2;"",""            if(val instanceof byte[]){"",""                StringBuffer buf = new StringBuffer( \""0x\"" );"",""                for(int k=0; k\<((byte[])val).length; k++){"",""                    String digit = \""0\"" + Integer.toHexString( ((byte[])val)[k] );"",""                    buf.append( digit.substring( digit.length()-2 ) );"",""                }"",""                val = buf.toString();"",""            }"",""            st.execute(\""Insert into \"" + table + \""(abc) Values(\"" + e1 + q + val + q + e2 + \"")\"");"",""        }"",""\t\tcheckValues( st, values, needTrim);"",""\t\t"",""\t\tst.execute(\""Delete From \""+ table);"",""\t\tCallableStatement cal = con.prepareCall(\""Insert Into \"" + table + \""(abc) Values(?)\"");"",""        for(int i=0; i\<values.length; i++){"",""            Object val = values[i];"",""\t\t\tcal.setObject( 1, val);"",""\t\t\tcal.execute();"",""        }"",""\t\tcal.close();"",""\t\tcheckValues( st, values, needTrim);"",""\t\t"",""\t\tst.execute(\""Delete From \""+ table);"",""\t\tcal = con.prepareCall(\""Insert Into \"" + table + \""(abc) Values(?)\"");"",""        for(int i=0; i\<values.length; i++){"",""            Object val = values[i];"",""\t\t\tif(val == null){"",""\t\t\t\tcal.setNull( 1, Types.NULL );"",""\t\t\t}else"",""\t\t\tif(val instanceof Time){"",""\t\t\t\tcal.setTime( 1, (Time)val );"",""\t\t\t}else"",""\t\t\tif(val instanceof Timestamp){"",""\t\t\t\tcal.setTimestamp( 1, (Timestamp)val );"",""\t\t\t}else"",""\t\t\tif(val instanceof Date){"",""\t\t\t\tcal.setDate( 1, (Date)val );"",""\t\t\t}else"",""\t\t\tif(val instanceof String){"",""\t\t\t\tcal.setString( 1, (String)val );"",""\t\t\t}else"",""\t\t\tif(val instanceof Boolean){"",""\t\t\t\tcal.setBoolean( 1, ((Boolean)val).booleanValue() );"",""\t\t\t}else"",""\t\t\tif(val instanceof Byte){"",""\t\t\t\tcal.setByte( 1, ((Byte)val).byteValue() );"",""\t\t\t}else"",""\t\t\tif(val instanceof Short){"",""\t\t\t\tcal.setShort( 1, ((Short)val).shortValue() );"",""\t\t\t}else"",""\t\t\tif(val instanceof Integer){"",""\t\t\t\tcal.setInt( 1, ((Integer)val).intValue() );"",""\t\t\t}else"",""\t\t\tif(val instanceof Long){"",""\t\t\t\tcal.setLong( 1, ((Long)val).longValue() );"",""\t\t\t}else"",""\t\t\tif(val instanceof Float){"",""\t\t\t\tcal.setFloat( 1, ((Float)val).floatValue() );"",""\t\t\t}else"",""\t\t\tif(val instanceof Double){"",""\t\t\t\tcal.setDouble( 1, ((Double)val).doubleValue() );"",""\t\t\t}else"",""\t\t\tif(val instanceof BigDecimal){"",""\t\t\t\tcal.setBigDecimal( 1, (BigDecimal)val );"",""\t\t\t}else"",""\t\t\tif(val instanceof byte[]){"",""\t\t\t\tcal.setBytes( 1, (byte[])val );"",""\t\t\t}"",""\t\t\tcal.execute();"",""        }"",""\t\tcal.close();"",""\t\tcheckValues( st, values, needTrim);"","""",""        "",""        st.execute(\""Delete From \""+ table);"",""        Statement st2 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""        ResultSet rs2 = st2.executeQuery(\""SELECT * From \"" + table);"",""        for(int i=0; i\<values.length; i++){"",""            rs2.moveToInsertRow();"",""            Object val = values[i];"",""            if(val == null){"",""                rs2.updateNull( name );"",""            }else"",""            if(val instanceof Time){"",""                rs2.updateTime( name, (Time)val );"",""            }else"",""            if(val instanceof Timestamp){"",""                rs2.updateTimestamp( name, (Timestamp)val );"",""            }else"",""            if(val instanceof Date){"",""                rs2.updateDate( name, (Date)val );"",""            }else"",""            if(val instanceof String){"",""                rs2.updateString( name, (String)val );"",""            }else"",""            if(val instanceof Boolean){"",""                rs2.updateBoolean( name, ((Boolean)val).booleanValue() );"",""            }else"",""            if(val instanceof Byte){"",""                rs2.updateByte( name, ((Byte)val).byteValue() );"",""            }else"",""            if(val instanceof Short){"",""                rs2.updateShort( name, ((Short)val).shortValue() );"",""            }else"",""            if(val instanceof Integer){"",""                rs2.updateInt( name, ((Integer)val).intValue() );"",""            }else"",""            if(val instanceof Long){"",""                rs2.updateLong( name, ((Long)val).longValue() );"",""            }else"",""            if(val instanceof Float){"",""                rs2.updateFloat( name, ((Float)val).floatValue() );"",""            }else"",""            if(val instanceof Double){"",""                rs2.updateDouble( name, ((Double)val).doubleValue() );"",""            }else"",""            if(val instanceof BigDecimal){"",""                rs2.updateBigDecimal( name, (BigDecimal)val );"",""            }else"",""            if(val instanceof byte[]){"",""                rs2.updateBytes( name, (byte[])val );"",""            }"",""            rs2.insertRow();"",""        }"",""        st2.close();"",""        checkValues( st, values, needTrim);"",""    }""]"
/smallsql/junit/TestResultSet/testUpdate(),"[""public void testUpdate() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""        ResultSet rs;"",""        "",""        "",""        // first test with a enlarging row size"",""        rs = st.executeQuery(\""Select * From ResultSet\"");"",""        assertTrue(\""next\"", rs.next());"",""        assertEquals(\""getRow\"", 1, rs.getRow() );"",""        int id = rs.getInt(\""i\"");"",""        rs.updateShort(\""c\"", (short)123 );"",""        assertEquals( (short)123, rs.getShort(\""c\"") );"",""        assertEquals( id, rs.getInt(\""i\"") ); //check a not updated row"",""        rs.updateRow();"",""        assertEquals( (short)123, rs.getShort(\""c\"") );"",""        assertFalse( rs.rowUpdated() );  //false because currently it is not implemented and we does not plan it"",""        assertFalse( rs.rowInserted() );"",""        assertFalse( rs.rowDeleted() );"",""        assertEquals(\""getRow\"", 1, rs.getRow() );"",""        "",""        // second test with a reduce row size"",""        rs = st.executeQuery(\""Select * From ResultSet\"");"",""        assertTrue(\""next\"", rs.next());"",""        rs.updateByte(\""c\"", (byte)66 );"",""        assertEquals( (byte)66, rs.getByte(\""c\"") );"",""        rs.updateRow();"",""        assertEquals( (short)66, rs.getShort(\""c\"") );"",""    }""]"
/smallsql/database/MutableNumeric/MutableNumeric(byte[]),"[""/** "",""     * The most significant value is on position 0."",""     */"",""    MutableNumeric(byte[] complement){"",""\t\tsetValue(complement);"",""    }""]"
/smallsql/database/ExpressionFunctionConvert/getMoney(),"[""long getMoney() throws Exception {"",""\t\treturn ExpressionValue.getMoney(getObject(), getDataType());"",""\t}""]"
/smallsql/database/MutableNumeric/div(smallsql.database.MutableNumeric),"[""void div(MutableNumeric num){"",""    \t//TODO performance"",""\t\tint newScale = Math.max(scale+5, num.scale +4);"",""\t\tBigDecimal big = toBigDecimal().divide(num.toBigDecimal(), newScale, BigDecimal.ROUND_HALF_EVEN);"",""\t\tsetValue( big.unscaledValue().toByteArray() );"",""\t\tscale = big.scale();"",""\t\tsignum = big.signum();"",""    }""]"
/smallsql/database/FileIndex/save(),"[""void save() throws Exception{"",""        ByteBuffer buffer = ByteBuffer.allocate(1);"",""        buffer.put(rootPage.getUnique() ? (byte)1 : (byte)0 );"",""        buffer.position(0);"",""        raFile.write( buffer );"",""        ((FileIndexNode)rootPage).save();"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsAlterTableWithDropColumn(),"[""public boolean supportsAlterTableWithDropColumn() {"",""        /**@todo: Implement this java.sql.DatabaseMetaData method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method supportsAlterTableWithDropColumn() not yet implemented.\"");"",""    }""]"
/smallsql/database/ColumnExpression/isNullable(),"[""boolean isNullable(){"",""\t\treturn expr.isNullable();"",""\t}""]"
/smallsql/database/Index/shortToBinarySortOrder(int),"[""final static private int shortToBinarySortOrder(int value){"",""\t\treturn value ^ 0x8000;"",""\t}""]"
"/smallsql/database/IndexNode/addNode(char,long)","[""/**"",""\t * Add a node on the end of a key value."",""\t * @param digit The digit must be in the range 0 between 255. "",""\t * @param rowOffset The value that is saved at the end of the tree."",""\t */"",""\tfinal void addNode(char digit, long rowOffset) throws SQLException{"",""\t\tIndexNode node = addNode(digit);"",""\t\tif(node.remainderKey != null) node.moveRemainderValue();"",""\t\tnode.saveValue(rowOffset);"",""\t}""]"
/smallsql/junit/TestStatement/setUp(),"[""protected void setUp() throws Exception{"",""    \tif(init) return;"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tdropTable( con, \""statement\"");"",""\t\tst.execute(\""Create Table statement (c varchar(30), i counter)\"");"",""\t\tinit = true;"",""    }""]"
"/smallsql/database/StoreNoCurrentRow/getFloat(int,int)","[""float getFloat(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/MutableInteger/floatValue(),"[""public float floatValue() {"",""\t\treturn value;"",""\t}""]"
/smallsql/database/UnionAll/nullRow(),"[""final void nullRow() {"",""\t\tcurrentDS.nullRow();"",""\t\trow = 0;"",""\t}""]"
"/smallsql/database/MutableNumeric/MutableNumeric(int,int)","[""MutableNumeric(int complement, int scale){"",""        this( complement );"",""        this.scale = scale;"",""    }""]"
/smallsql/database/SSResultSetMetaData/getColumnType(int),"[""public int getColumnType(int column) throws SQLException {"",""        return SQLTokenizer.getSQLDataType(getColumnExpression( column ).getDataType() );"",""    }""]"
/smallsql/junit/TestOrderBy/testOrderBy_nvarchar(),"[""public void testOrderBy_nvarchar() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tString oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by nv\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = rs.getString(\""nv\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getString(\""nv\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tassertTrue( String.CASE_INSENSITIVE_ORDER.compare( oldValue, rs.getString(\""nv\"") ) \<= 0 );"",""\t\t\toldValue = rs.getString(\""nv\"");"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/Expression/getBytes(),"[""abstract byte[] getBytes() throws Exception;""]"
/smallsql/database/SSConnection/SSConnection(smallsql.database.SSConnection),"[""/**"",""     * Create a copy of the Connection with it own transaction room."",""     * @param con the original Connection"",""     */"",""    SSConnection( SSConnection con ){"",""        readonly = con.readonly;"",""        database = con.database;"",""        metadata = con.metadata;"",""        log      = con.log;"",""    }""]"
"/smallsql/database/Utils/indexOf(byte[],byte[],int)","[""static int indexOf( byte[] value, byte[] list, int offset ){"",""        int length = value.length;"",""        loop1:"",""        for(int end = list.length-length; offset \<= end; offset++){"",""            for(int i=0; i\<length; i++ ){"",""                if(list[offset+i] != value[i]){"",""                    continue loop1;"",""                }"",""            }"",""            return offset;"",""        }"",""        return -1;"",""    }""]"
/smallsql/database/IndexNode/getUnique(),"[""final boolean getUnique(){"",""\t\treturn unique;"",""\t}""]"
/smallsql/database/ExpressionFunctionMod/getInt(),"[""final int getInt() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return param1.getInt() % param2.getInt();"",""    }""]"
"/smallsql/database/DateTime/addDateTimeOffset(long,java.util.TimeZone)","[""final static long addDateTimeOffset(long datetime, TimeZone timezone){"",""        int t = (int)(datetime % 86400000);"",""        int d = (int)(datetime / 86400000);"",""        if(t\<0){"",""            //Time before 1970 and not a full day"",""            t += 86400000;"",""            d--;"",""        }              "",""        int millis = t % 1000;"",""        t /= 1000;"",""        synchronized(cal){"",""            cal.setTimeZone( timezone );"",""            cal.set( 1970, 0, d+1, 0, 0, t );"",""            cal.set( Calendar.MILLISECOND, millis );"",""            return cal.getTimeInMillis();"",""        }"",""    }""]"
/smallsql/junit/TestIdentifer/testQuoteIdentifer(),"[""public void testQuoteIdentifer() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tdropTable(con,\""QuoteIdentifer\"");"",""\t\tcon.createStatement().execute(\""create table \\\""QuoteIdentifer\\\""(\\\""a\\\"" int default 5)\"");"",""\t\tResultSet rs = con.createStatement().executeQuery(\""SELECT tbl.* from \\\""QuoteIdentifer\\\"" tbl\"");"",""\t\tassertEquals( \""a\"", rs.getMetaData().getColumnName(1));"",""\t\tassertEquals( \""QuoteIdentifer\"", rs.getMetaData().getTableName(1));"",""\t\twhile(rs.next()){"",""            // scroll the result, if there occur an exception"",""\t\t}"",""\t\tdropTable(con,\""QuoteIdentifer\"");"",""\t}""]"
/smallsql/database/IndexNode/getValue(),"[""/**"",""\t * Returns the current value for the digit."",""\t * @param digit The digit must be in the range 0 between 255. "",""\t */"",""\tfinal Object getValue(){"",""\t\treturn value;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/SSDatabaseMetaData(smallsql.database.SSConnection),"[""/**"",""     * @throws SQLException Exception can be throw if the Connection already closed."",""     */"",""    SSDatabaseMetaData(SSConnection con) throws SQLException{"",""\t\tthis.con = con;"",""\t\tst = new SSStatement(con);"",""\t}""]"
/smallsql/database/SSCallableStatement/getArray(java.lang.String),"[""public Array getArray(String parameterName) throws SQLException {"",""        return getArray( findParameter( parameterName ) );"",""    }""]"
"/smallsql/database/Table/Table(smallsql.database.Database,smallsql.database.SSConnection,java.lang.String,smallsql.database.Columns,smallsql.database.IndexDescriptions,smallsql.database.ForeignKeys)","[""/**"",""     * Constructor for creating of new tables."",""     */"",""    Table(Database database, SSConnection con, String name, Columns columns, IndexDescriptions indexes, ForeignKeys foreignKeys) throws Exception{"",""        this(database, con, name, columns, null, indexes, foreignKeys);"",""    }""]"
/smallsql/database/MemoryStream/readByte(),"[""int readByte(){"",""\t\treturn puffer[ offset++ ];"",""\t}""]"
"/smallsql/database/CommandSelect/compileAdd_All_Table_Columns(smallsql.database.DataSource,smallsql.database.TableView,int)","[""private final int compileAdd_All_Table_Columns( DataSource fromEntry, TableView table, int position){"",""        for(int k=0; k\<table.columns.size(); k++){"",""            ExpressionName expr = new ExpressionName( table.columns.get(k).getName() );"",""            expr.setFrom( fromEntry, k, table );"",""            columnExpressions.add( position++, expr );"",""        }"",""        return position;"",""    }""]"
"/smallsql/database/SSResultSet/updateLong(int,long)","[""public void updateLong(int columnIndex, long x) throws SQLException {"",""\t\tupdateValue( columnIndex, new Long(x), SQLTokenizer.BIGINT);"",""    }""]"
/smallsql/database/StoreNull/StoreNull(long),"[""StoreNull(long nextPos){"",""\t\tnextPagePos = nextPos;"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getBoolean(),"[""boolean getBoolean() throws Exception {"",""\t\treturn getInt() != 0;"",""\t}""]"
/smallsql/junit/TestExceptionMethods/testClosedStatement(),"[""public void testClosedStatement() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.close();"",""        try{"",""            st.execute(\""Select 1\"");"",""            fail(\""Exception should throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""HY010\"", 0, ex);"",""        }"",""        try{"",""            st.executeQuery(\""Select 1\"");"",""            fail(\""Exception should throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""HY010\"", 0, ex);"",""        }"",""        try{"",""            st.executeUpdate(\""Select 1\"");"",""            fail(\""Exception should throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""HY010\"", 0, ex);"",""        }"",""    }""]"
/smallsql/database/Table/getStoreTemp(smallsql.database.SSConnection),"[""/**"",""     * Create a Store that is not invoke in a transaction for copy of data."",""     */"",""\tStoreImpl getStoreTemp( SSConnection con ) throws Exception{"",""\t\tTableStorePage storePage = new TableStorePage( con, this, LOCK_NONE, -2);"",""\t\treturn StoreImpl.createStore( this, storePage, SQLTokenizer.INSERT, -2 );"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setBinaryStream(int,java.io.InputStream,int)","[""public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {"",""        checkStatement();"",""\t\tcmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARBINARY, length);"",""    }""]"
/smallsql/database/Scrollable/getRow(),"[""int getRow() throws Exception {"",""        if(rowIdx \>= rowList.size()) return 0;"",""\t\treturn rowIdx + 1;"",""\t}""]"
/smallsql/database/TableResult/isNull(int),"[""@Override"",""    final boolean isNull( int colIdx ) throws Exception{"",""        return store.isNull( offsets[colIdx] );"",""    }""]"
/smallsql/database/Utils/bytes2hex(byte[]),"[""static String bytes2hex( byte[] bytes ){"",""        StringBuffer buf = new StringBuffer(bytes.length \<\< 1);"",""        for(int i=0; i\<bytes.length; i++){"",""            buf.append( digits[ (bytes[i] \>\> 4) & 0x0F ] );"",""            buf.append( digits[ (bytes[i]     ) & 0x0F ] );"",""        }"",""        return buf.toString();"",""    }""]"
/smallsql/junit/TestOrderBy/test_boolean(),"[""public void test_boolean() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tboolean oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by b\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = rs.getBoolean(\""b\"");"",""\t\tassertFalse(oldValue);"",""\t\tassertTrue(rs.wasNull());"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getBoolean(\""b\"");"",""\t\tassertFalse(oldValue);\t\t"",""\t\tassertFalse(rs.wasNull());"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(!oldValue && rs.next()){"",""\t\t\toldValue = rs.getBoolean(\""b\"");"",""\t\t\tassertFalse(rs.wasNull());"",""\t\t\tcount++;"",""\t\t}"",""\t\twhile(oldValue && rs.next()){"",""\t\t\toldValue = rs.getBoolean(\""b\"");"",""\t\t\tassertFalse(rs.wasNull());"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertFalse(rs.next());"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
"/smallsql/database/ExpressionArithmetic/ExpressionArithmetic(smallsql.database.Expression,smallsql.database.Expressions,int)","[""/**"",""     * Constructor for IN"",""     */"",""    ExpressionArithmetic( Expression left, Expressions inList, int operation){"",""\t\tsuper(FUNCTION);"",""        this.left   = left;"",""        this.operation = operation;"",""\t\tExpression[] params;"",""        if(inList != null){"",""\t        this.inList = inList.toArray();"",""\t        params = new Expression[this.inList.length+1];"",""\t        params[0] = left;"",""\t        System.arraycopy(this.inList, 0, params, 1, this.inList.length);"",""        }else{"",""            //Occur with ExpressionInSelect, in this case the method isInList() is overridden"",""\t\t\tparams = new Expression[]{ left };"",""        }"",""        super.setParams( params );"",""    }""]"
/smallsql/junit/TestDataTypes/setUp(),"[""public void setUp(){"",""        tearDown();"",""    }""]"
/smallsql/database/Column/setFlag(int),"[""void setFlag(int flag){"",""        identity        = (flag & 1) \> 0;"",""        caseSensitive   = (flag & 2) \> 0;"",""        nullable        = (flag & 4) \> 0;"",""    }""]"
/smallsql/database/ExpressionFunctionLog/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.log( param1.getDouble() );"",""    }""]"
"/smallsql/database/SSResultSet/updateArray(java.lang.String,java.sql.Array)","[""public void updateArray(String columnName, Array x) throws SQLException {"",""        updateArray( findColumn( columnName ), x );"",""    }""]"
/smallsql/database/NoFromResult/setRowPosition(long),"[""final void setRowPosition(long rowPosition){"",""\t\trowPos = (int)rowPosition;"",""\t}""]"
/smallsql/database/SSCallableStatement/getTime(int),"[""public Time getTime(int i) throws SQLException {"",""        try{"",""\t\t\tExpression expr = getValue(i);"",""            wasNull = expr.isNull();"",""\t\t\tif(wasNull) return null;"",""\t\t\treturn DateTime.getTime( expr.getLong() );"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsStoredProcedures(),"[""public boolean supportsStoredProcedures() {"",""    \treturn false;"",""    }""]"
"/smallsql/database/CommandSelect/executeImpl(smallsql.database.SSConnection,smallsql.database.SSStatement)","[""/**"",""     * The main method to execute this Command and create a ResultSet."",""     */"",""    void executeImpl(SSConnection con, SSStatement st) throws Exception{"",""        compile(con);"",""        if((st.rsType == ResultSet.TYPE_SCROLL_INSENSITIVE || st.rsType == ResultSet.TYPE_SCROLL_SENSITIVE) &&"",""        \t!from.isScrollable()){"",""        \tfrom = new Scrollable(from);"",""        }"",""        from.execute();"",""        rs =  new SSResultSet( st, this );"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsSubqueriesInComparisons(),"[""public boolean supportsSubqueriesInComparisons() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionRepeat/getPrecision(),"[""int getPrecision() {"",""        return SSResultSetMetaData.getDataTypePrecision( getDataType(), -1 );"",""    }""]"
"/smallsql/database/Command/setParamValue(int,java.lang.Object,int,int)","[""/**"",""\t * Set value of a PreparedStatement parameter."",""\t * The idx starts with 1."",""\t */"",""\tvoid setParamValue(int idx, Object value, int dataType, int length) throws SQLException{"",""\t\tgetParam(idx).set( value, dataType, length );"",""\t\tif(log.isLogging()){"",""\t\t\tlog.println(\""param\""+idx+\'=\'+value+\""; type=\""+dataType+\""; length=\""+length);"",""\t\t}"",""\t}""]"
/smallsql/database/SSCallableStatement/getRef(int),"[""public Ref getRef(int i) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method getRef() not yet implemented.\"");"",""    }""]"
/smallsql/database/Expression/getScale(int),"[""final static int getScale(int dataType){"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.MONEY:"",""\t\t\tcase SQLTokenizer.SMALLMONEY:"",""\t\t\t\treturn 4;"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\t\treturn 9; //nano seconds"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\t\treturn 38;"",""\t\t\tdefault: return 0;"",""\t\t}"",""\t}""]"
/smallsql/database/IndexDescription/getColumns(),"[""final Strings getColumns(){"",""\t\treturn columns;"",""\t}""]"
"/smallsql/database/Database/getDatabase(smallsql.database.SSConnection,java.lang.String)","[""private static Database getDatabase(SSConnection con, String name) throws SQLException{"",""\t\treturn name == null ?"",""\t\t\t\t\tcon.getDatabase(false) :"",""\t\t\t\t\tgetDatabase( name, con, false );"",""    }""]"
/smallsql/database/SortedResult/getRowCount(),"[""/**"",""     * Get the current known row count. This is the sum of queried, sorted rows and inserted rows."",""     */"",""    private final int getRowCount(){"",""        return sortedRowCount + insertedRows.size();"",""    }""]"
/smallsql/junit/BasicTestCase/bytes2hex(byte[]),"[""private static String bytes2hex( byte[] bytes ){"",""\t\tStringBuffer buf = new StringBuffer(bytes.length \<\< 1);"",""\t\tfor(int i=0; i\<bytes.length; i++){"",""\t\t\tbuf.append( digits[ (bytes[i] \>\> 4) & 0x0F ] );"",""\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );"",""\t\t}"",""\t\treturn buf.toString();"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])","[""public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {"",""\t\tString[] colNames = {\""TABLE_CAT\"",\""TABLE_SCHEM\"",\""TABLE_NAME\"",\""TABLE_TYPE\"",\""REMARKS\"",\""TYPE_CAT\"",\""TYPE_SCHEM\"",\""TYPE_NAME\"",\""SELF_REFERENCING_COL_NAME\"",\""REF_GENERATION\""};"",""\t\tDatabase database;"",""\t\tif(catalog == null){ "",""\t\t\tdatabase = con.getDatabase(true);"",""\t\t\tif(database != null)"",""\t\t\t\tcatalog = database.getName();"",""    \t}else{"",""\t\t\tdatabase = Database.getDatabase(catalog, con, false);"",""    \t}"",""\t\tArrayList rows = new ArrayList();"",""\t\tboolean isTypeTable = types == null;"",""\t\tboolean isTypeView = types == null;"",""\t\tfor(int i=0; types != null && i\<types.length; i++){"",""\t\t\tif(\""TABLE\"".equalsIgnoreCase(types[i])) isTypeTable = true;"",""\t\t\tif(\""VIEW\"" .equalsIgnoreCase(types[i])) isTypeView  = true;"",""\t\t}"",""\t\t"",""\t\tif(database != null){"",""\t\t\tStrings tables = database.getTables(tableNamePattern);"",""\t\t\tfor(int i=0; i\<tables.size(); i++){"",""\t\t\t\tString table = tables.get(i);"",""\t\t\t\tObject[] row = new Object[10];"",""\t\t\t\trow[0] = catalog;"",""\t\t\t\trow[2] = table;"",""\t\t\t\ttry{"",""\t\t\t\t\tif(database.getTableView( con, table) instanceof View){"",""\t\t\t\t\t\tif(isTypeView){"",""\t\t\t\t\t\t\trow[3] = \""VIEW\"";"",""\t\t\t\t\t\t\trows.add(row);"",""\t\t\t\t\t\t}"",""\t\t\t\t\t}else{"",""\t\t\t\t\t\tif(isTypeTable){"",""\t\t\t\t\t\t\trow[3] = \""TABLE\"";\t\t\t\t\t"",""\t\t\t\t\t\t\trows.add(row);"",""\t\t\t\t\t\t}"",""\t\t\t\t\t}"",""\t\t\t\t}catch(Exception e){"",""\t\t\t\t\t//TODO invalid VIEWS does not show because it can\'t load."",""\t\t\t\t}"",""\t\t\t}"",""\t\t}"",""\t\tObject[][] data = new Object[rows.size()][];"",""\t\trows.toArray(data);"",""\t\tCommandSelect cmdSelect = Utils.createMemoryCommandSelect( con, colNames, data);"",""\t\tExpressions order = new Expressions();"",""\t\torder.add( new ExpressionName(\""TABLE_TYPE\"") );"",""\t\torder.add( new ExpressionName(\""TABLE_NAME\"") );"",""\t\tcmdSelect.setOrder( order );"",""\t\treturn new SSResultSet( st, cmdSelect);"",""    }""]"
/smallsql/database/TableResult/first(),"[""@Override"",""    final boolean first() throws Exception{"",""\t\tfilePos = table.getFirstPage();"",""\t\trow = 1;"",""\t\treturn moveToValidRow();"",""\t}""]"
/smallsql/junit/TestThreads/testConcurrentRead(),"[""/**"",""     * Test the concurrently read of a table"",""     * "",""     * @throws Throwable"",""     *             if an thread problem occur"",""     */"",""    public void testConcurrentRead() throws Throwable{"",""        ArrayList threadList = new ArrayList();"",""        throwable = null;"","""",""        // Any table from another test that include rows."",""        final String sql = \""Select * From table_OrderBy1\"";"","""",""        // calculate the row count of this table"",""        final Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        ResultSet rs = st.executeQuery(\""Select * From table_OrderBy1\"");"",""        int count = 0;"",""        while(rs.next()){"",""            count++;"",""        }"",""        final int rowCount = count;"","""",""        // start threads that check the row count"",""        for(int i = 0; i \< 200; i++){"",""            Thread thread = new Thread(new Runnable(){"","""",""                public void run(){"",""                    try{"",""                        assertRowCount(rowCount, sql);"",""                    }catch(Throwable ex){"",""                        throwable = ex;"",""                    }"",""                }"","""",""            });"",""            threadList.add(thread);"",""            thread.start();"",""        }"","""",""        // wait until all threads are finish"",""        for(int i = 0; i \< threadList.size(); i++){"",""            Thread thread = (Thread)threadList.get(i);"",""            thread.join(5000);"",""        }"","""",""        // throw the exception if one occur"",""        if(throwable != null){"",""            throw throwable;"",""        }"",""    }""]"
/smallsql/database/SSPreparedStatement/addBatch(),"[""public void addBatch() throws SQLException {"",""        checkStatement();"",""    \ttry{"",""\t    \tfinal Expressions params = cmd.params;"",""\t    \tfinal int size = params.size();"",""\t\t\tExpressionValue[] values = new ExpressionValue[size];"",""\t    \tfor(int i=0; i\<size; i++){"",""\t    \t\tvalues[i] = (ExpressionValue)params.get(i).clone();"",""\t    \t}"",""\t    \tif(batches == null) batches = new ArrayList();"",""\t    \tbatches.add(values);"",""    \t}catch(Exception e){"",""    \t\tthrow SmallSQLException.createFromException(e);"",""    \t}"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getResultSetHoldability(),"[""public int getResultSetHoldability() {"",""\t\treturn ResultSet.HOLD_CURSORS_OVER_COMMIT;"",""    }""]"
/smallsql/junit/TestOther/testInsertSelect(),"[""public void testInsertSelect() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttry{"",""\t\t\tcon.createStatement().execute(\""Create Table InsertSelect (i counter, v varchar(20))\"");"",""\t\t\tassertEqualsRsValue( new Integer(0), \""Select count(*) from InsertSelect\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into InsertSelect(v) Values(\'qwert\')\"");"",""\t\t\tassertEqualsRsValue( new Integer(1), \""Select count(*) from InsertSelect\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into InsertSelect(v) Select v From InsertSelect\"");"",""\t\t\tassertEqualsRsValue( new Integer(2), \""Select count(*) from InsertSelect\"");"","""",""\t\t\tcon.createStatement().execute(\""Insert Into InsertSelect(v) (Select v From InsertSelect)\"");"",""\t\t\tassertEqualsRsValue( new Integer(4), \""Select count(*) from InsertSelect\"");"",""\t\t}finally{"",""            dropTable( con, \""InsertSelect\"" );"",""\t\t}"",""\t}""]"
/smallsql/junit/TestLanguage/setUp(),"[""public void setUp() throws SQLException {"",""\t\ttearDown();"",""\t}""]"
/smallsql/database/Column/getScale(),"[""int getScale(){"",""\t\tswitch(dataType){"",""\t\t\tcase SQLTokenizer.DECIMAL:"",""\t\t\tcase SQLTokenizer.NUMERIC:"",""\t\t\t\treturn scale;"",""\t\t\tdefault:"",""\t\t\t\treturn Expression.getScale(dataType);"",""\t\t}"",""    }""]"
/smallsql/junit/TestStatement/testOther(),"[""public void testOther() throws Exception{"",""        //now we test all not implemented code"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        "",""        //curently there are no known warnings"",""        st.clearWarnings();"",""        assertNull(st.getWarnings());"",""        "",""        //query execution does not need any time the time occur on next,"",""        //but currently there is no time observer"",""        st.setQueryTimeout(5);"",""        assertEquals(\""QueryTimeout\"", 5, st.getQueryTimeout() );"",""        "",""        st.setMaxFieldSize(100);"",""        assertEquals(\""MaxFieldSize\"", 100, st.getMaxFieldSize() );"",""    }""]"
"/smallsql/junit/TestLanguage/assertMessage(java.sql.SQLException,java.lang.String)","[""/**"",""\t * Check if the passed text is present inside the exception message and"",""\t * prints the message in System.out"",""\t */"",""\tprivate void assertMessage(SQLException e, String expectedText) {"",""\t\tassertMessage(e, new String[] { expectedText });"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnString/getObject(),"[""final Object getObject() throws Exception {"",""\t\treturn getString();"",""\t}""]"
"/smallsql/database/Expressions/set(int,smallsql.database.Expression)","[""final void set(int idx, Expression expr){"",""\t\tdata[idx] = expr;"",""\t}""]"
/smallsql/database/Money/parseMoney(java.lang.String),"[""public static long parseMoney( String str ){"",""        // FIXME implement it without a detour over the double "",""        return Utils.doubleToMoney(Double.parseDouble( str ));"",""    }""]"
"/smallsql/database/SSPreparedStatement/setNull(int,int,java.lang.String)","[""public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {"",""        checkStatement();"",""        /**@todo: Implement this java.sql.PreparedStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method setNull() not yet implemented.\"");"",""    }""]"
/smallsql/database/SSResultSet/getCursorName(),"[""public String getCursorName(){"",""        return null;"",""    }""]"
/smallsql/database/MemoryResult/isAfterLast(),"[""final boolean isAfterLast(){"",""\t\treturn rowIdx \>= rowList.size() || rowList.size() == 0;"",""\t}""]"
/smallsql/database/Utils/bytes2long(byte[]),"[""static long bytes2long( byte[] bytes ){"",""        long result = 0;"",""        int length = Math.min( 8, bytes.length);"",""        for(int i=0; i\<length; i++){"",""            result = (result \<\< 8) | (bytes[i] & 0xFF);"",""        }"",""        return result;"",""    }""]"
/smallsql/junit/TestAlterTable/setUp(),"[""public void setUp(){"",""        tearDown();"",""        try{"",""            Connection con = AllTests.getConnection();"",""            Statement st = con.createStatement();"",""            st.execute(\""create table \"" + table + \""(i int, v varchar(100))\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(1,\'abc\')\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(2,\'bcd\')\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(3,\'cde\')\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(4,\'def\')\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(5,\'efg\')\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(6,\'fgh\')\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(7,\'ghi\')\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(8,\'hij\')\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(9,\'ijk\')\"");"",""            st.execute(\""Insert into \"" + table + \"" Values(10,\'jkl\')\"");"",""            st.close();"",""        }catch(Throwable e){"",""            e.printStackTrace();"",""        }"",""    }""]"
/smallsql/database/MemoryResult/getInt(int),"[""int getInt( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getInt();"",""\t}""]"
/smallsql/database/SmallSQLException/init(),"[""private void init(){"",""\t\tthis.isInit = true;"",""\t\tPrintWriter pw = DriverManager.getLogWriter();"",""\t\tif(pw != null) this.printStackTrace(pw);\t"",""\t}""]"
/smallsql/database/ExpressionFunctionLeft/getBytes(),"[""final byte[] getBytes() throws Exception{"",""\t\tif(isNull()) return null;"",""\t\tbyte[] bytes = param1.getBytes();"",""\t\tint length = param2.getInt();"",""\t\tif(bytes.length \<= length) return bytes;"","""",""\t\tbyte[] b = new byte[length];"",""\t\tSystem.arraycopy(bytes, 0, b, 0, length);"",""\t\treturn b;\t\t"",""\t}""]"
"/smallsql/database/IndexNode/moveRemainderValueSub(java.lang.Object,char[])","[""private final void moveRemainderValueSub( Object rowOffset, char[] remainderValue){"",""\t\tint length = remainderValue.length-1;"",""\t\tthis.remainderKey = new char[length];"",""\t\tvalue = rowOffset;"",""\t\tSystem.arraycopy( remainderValue, 1, this.remainderKey, 0, length);"",""\t}""]"
/smallsql/database/ExpressionFunctionTimestampAdd/getInt(),"[""int getInt() throws Exception {"",""\t\treturn (int)getLong();"",""\t}""]"
/smallsql/database/ViewResult/isLast(),"[""boolean isLast() throws Exception{"",""\t\treturn commandSelect.isLast();"",""\t}""]"
/smallsql/database/Utils/bytes2float(byte[]),"[""static float bytes2float( byte[] bytes ){"",""        return Float.intBitsToFloat( bytes2int( bytes ) );"",""    }""]"
/smallsql/database/StorePageMap/get(long),"[""/**"",""\t * Returns the first StorePage for the given key."",""\t */"",""\tfinal TableStorePage get(long key) {"",""\t\tint i = (int)(key % table.length);"",""\t\tEntry e = table[i]; "",""\t\twhile (true) {"",""\t\t\tif (e == null)"",""\t\t\t\treturn null;"",""\t\t\tif (e.key == key) "",""\t\t\t\treturn e.value;"",""\t\t\te = e.next;"",""\t\t}"",""\t}""]"
/smallsql/database/Scrollable/setRowPosition(long),"[""void setRowPosition(long rowPosition) throws Exception {"",""\t\trowIdx = (int)rowPosition;"",""\t}""]"
/smallsql/junit/TestOrderBy/testOrderBy_varchar_GroupBy(),"[""public void testOrderBy_varchar_GroupBy() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tString oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT first(v) cc FROM \"" + table1 + \"" Group By i ORDER  by first(V)\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = rs.getString(\""cc\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getString(\""cc\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tassertTrue( oldValue.compareTo( rs.getString(\""cc\"") ) \< 0 );"",""\t\t\toldValue = rs.getString(\""cc\"");"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/Utils/double2bytes(double),"[""static byte[] double2bytes( double value ){"",""        return long2bytes(Double.doubleToLongBits(value));"",""    }""]"
/smallsql/database/Utils/int2bytes(int),"[""static byte[] int2bytes( int value ){"",""\t\tbyte[] result = new byte[4];"",""\t\tresult[0] = (byte)(value \>\> 24);"",""\t\tresult[1] = (byte)(value \>\> 16);"",""\t\tresult[2] = (byte)(value \>\> 8);"",""\t\tresult[3] = (byte)(value);"",""\t\treturn result;"",""\t}""]"
/smallsql/database/StoreNull/getUsedSize(),"[""final int getUsedSize() {"",""\t\treturn 0;"",""\t}""]"
/smallsql/database/SSResultSet/getBoolean(java.lang.String),"[""public boolean getBoolean(String columnName) throws SQLException {"",""        return getBoolean( findColumn( columnName ) );"",""    }""]"
"/smallsql/database/CommandDrop/CommandDrop(smallsql.database.Logger,java.lang.String,java.lang.String,int)","[""CommandDrop( Logger log, String catalog, String name, int type ){"",""\t\tsuper(log);"",""        this.type \t\t= type;"",""        this.catalog \t= catalog;"",""        this.name \t\t= name;"",""    }""]"
/smallsql/junit/TestGroupBy/testSumReal(),"[""public void testSumReal() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new Float(4), \""Select sum(cast(id as real)) FROM \"" + table1);"",""\t}""]"
"/smallsql/database/StoreNull/getMoney(int,int)","[""final long getMoney(int offset, int dataType) throws Exception {"",""\t\treturn 0;"",""\t}""]"
/smallsql/database/Money/createFromUnscaledValue(long),"[""public static Money createFromUnscaledValue(long value){"",""        Money money = new Money();"",""        money.value = value;"",""        return money;"",""    }""]"
"/smallsql/junit/BasicTestCase/assertRowCount(int,java.lang.String)","[""void assertRowCount(int sollCount, String sql ) throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs = st.executeQuery(sql);"",""        assertRowCount(sollCount,rs);"",""    }""]"
/smallsql/database/SSStatement/getWarnings(),"[""final public SQLWarning getWarnings(){"",""        return null;"",""    }""]"
/smallsql/database/ExpressionFunctionBitLen/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.BITLEN;"",""\t}""]"
/smallsql/database/Expressions/addAll(smallsql.database.Expressions),"[""final void addAll(Expressions cols){"",""\t\tint count = cols.size();"",""\t\tif(size + count \>= data.length ){"",""\t\t\tresize(size + count);"",""\t\t}"",""\t\tSystem.arraycopy( cols.data, 0, data, size, count);"",""\t\tsize += count;"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnInt/getNumeric(),"[""final MutableNumeric getNumeric() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn new MutableNumeric(getInt());"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsSubqueriesInQuantifieds(),"[""public boolean supportsSubqueriesInQuantifieds() {"",""\t\treturn true;"",""    }""]"
/smallsql/junit/TestTokenizer/testSingleLine(),"[""public void testSingleLine() throws SQLException {"",""\t\tfinal String SQL_1 = "",""\t\t\t\""SELECT 10/2--mycomment\\n\"" + "",""\t\t\t\"" , -- mycomment    \\r\\n\"" +"",""\t\t\t\""id, SUM(myint)--my comment  \\n\\n\"" +"",""\t\t\t\""FROM \"" + TABLE_NAME + \"" -- my other comment \\r \\r\"" + "",""\t\t\t\""GROUP BY id --mycommentC\\n\"" +"",""\t\t\t\""--   myC    omment  E    \\n\"" +"",""\t\t\t\""ORDER BY id \\r\"" +"",""\t\t\t\""--myCommentD   \\r\\r\\r\"";"",""\t\t"",""\t\tsuccessTest(SQL_1);"","""",""\t\tfinal String SQL_2 = "",""\t\t\t\""SELECT 10/2 - - this must fail \"";"",""\t\t"",""\t\tfailureTest(SQL_2, \""Tokenized not-comment as a line-comment.\"");"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsOpenStatementsAcrossCommit(),"[""public boolean supportsOpenStatementsAcrossCommit() {"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionPower/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.pow( param1.getDouble(), param2.getDouble() );"",""    }""]"
/smallsql/database/TableView/findColumnIdx(java.lang.String),"[""/**"",""\t * Returns the index of a column name. The first column has the index 0."",""\t */"",""\tfinal int findColumnIdx(String columnName){"",""\t\t// FIXME switch to a tree search on performance reason"",""\t\tfor(int i=0; i\<columns.size(); i++){"",""\t\t\tif( columns.get(i).getName().equalsIgnoreCase(columnName) ) return i;"",""\t\t}"",""\t\treturn -1;"",""\t}""]"
/smallsql/database/MutableNumeric/setValue(byte[]),"[""private void setValue(byte[] complement){"",""        int length = complement.length;"",""        if(length == 0){"",""            value   = EMPTY_INTS;"",""            signum  = 0;"",""            return;"",""        }"",""        value = new int[ (length + 3) / 4 ];"",""        if(complement[0] \< 0){"",""            negate( complement );"",""            signum = -1;"",""        }else{"",""\t\t\tsignum = 0;"",""        \tfor(int i=0; i\<complement.length; i++)"",""        \t\tif(complement[i] != 0){"",""        \t\t\tsignum = 1;"",""        \t\t\tbreak;"",""        \t\t}"",""        }"",""        for(int v=value.length-1; v\>=0; v--){"",""            int temp = 0;"",""            for(int i=0; i\<4 && 0\<length; i++){"",""                temp |= (complement[ --length ] & 0xFF) \<\< (i*8);"",""            }"",""            value[v] = temp;"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxCatalogNameLength(),"[""public int getMaxCatalogNameLength() {"",""    \treturn 255;"",""    }""]"
/smallsql/database/ExpressionFunctionUCase/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""\t\treturn param1.getString().toUpperCase();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsANSI92EntryLevelSQL(),"[""public boolean supportsANSI92EntryLevelSQL() {"",""    \treturn true;"",""    }""]"
/smallsql/database/ExpressionFunctionAbs/getMoney(),"[""long getMoney() throws Exception{"",""        return Math.abs( param1.getMoney() );"",""    }""]"
/smallsql/database/ExpressionValue/isEmpty(),"[""final boolean isEmpty(){"",""        return value == EMPTY;"",""    }""]"
/smallsql/database/Columns/add(smallsql.database.Column),"[""/**"",""     * Add a column to this list."",""     * "",""     * @param column"",""     *            the added column."",""     * @throws NullPointerException"",""     *             if column is null"",""     */"",""    final void add(Column column){"",""        if(column == null){"",""            throw new NullPointerException(\""Column is null.\"");"",""        }"",""        if(size \>= data.length){"",""            resize(size \<\< 1);"",""        }"",""        data[size++] = column;"",""    }""]"
/smallsql/database/TableResult/beforeFirst(),"[""@Override"",""    final void beforeFirst(){"",""\t\tfilePos = 0;"",""\t\tstore = Store.NOROW;"",""\t\trow = 0;"",""\t}""]"
/smallsql/database/SSStatement/getMaxFieldSize(),"[""final public int getMaxFieldSize(){"",""        return maxFieldSize;"",""    }""]"
"/smallsql/database/Store/getObject(int,int)","[""abstract Object getObject( int offset, int dataType) throws Exception;""]"
/smallsql/database/CommandSelect/relative(int),"[""/**"",""\t * Is used from ResultSet.relative()."",""\t */"",""\tfinal boolean relative(int rows) throws Exception{"",""\t\treturn from.relative(rows);"",""\t}""]"
/smallsql/database/SSConnection/testClosedConnection(),"[""/**"",""     * Test if the connection was closed. for example from another thread."",""     * "",""     * @throws SQLException"",""     *             if the connection was closed."",""     */"",""\tfinal void testClosedConnection() throws SQLException{"",""\t\tif(isClosed()) throw SmallSQLException.create(Language.CONNECTION_CLOSED);"",""\t}""]"
"/smallsql/database/SQLParser/addColumn(smallsql.database.SQLToken,smallsql.database.CommandTable)","[""/**"",""     * Parse a Column and add it to the Command. If the column is unique or primary"",""     * then an index is added."",""     * @param token the SQLToken with the column name"",""     * @return the token of the delimiter"",""     */"",""    private SQLToken addColumn(SQLToken token, CommandTable cmdCreate) throws SQLException{"",""        String colName = getIdentifier( token );"",""        Column col = datatype(false);"",""        col.setName( colName );"","""",""\t\ttoken = nextToken();"",""        boolean nullableWasSet = false;"",""        boolean defaultWasSet = col.isAutoIncrement(); // with data type COUNTER already this value is set"",""        while(true){"",""            if(token == null){"",""                cmdCreate.addColumn( col );"",""                return null;"",""            }"",""            switch(token.value){"",""                case SQLTokenizer.PARENTHESIS_R:"",""                case SQLTokenizer.COMMA:"",""                    cmdCreate.addColumn( col );"",""                    return token;"",""                case SQLTokenizer.DEFAULT:"",""                    if(defaultWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );"",""\t\t\t\t\tint offset = token.offset + token.length;"",""                    token = nextToken();"",""                    if(token != null) offset = token.offset;"",""\t\t\t\t\tpreviousToken();                    "",""\t\t\t\t\tExpression expr = expression(cmdCreate, 0);"",""\t\t\t\t\tSQLToken last = lastToken();"",""\t\t\t\t\tint length = last.offset + last.length - offset;"",""\t\t\t\t\tString def = new String( sql, offset, length );"",""                    col.setDefaultValue( expr, def );"",""                    defaultWasSet = true;"",""                    break;"",""                case SQLTokenizer.IDENTITY:"",""                    if(defaultWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );"",""                    col.setAutoIncrement(true);"",""                    defaultWasSet = true;"",""                    break;"",""                case SQLTokenizer.NULL:"",""                    if(nullableWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );"",""                    //col.setNullable(true); is already default"",""                    nullableWasSet = true;"",""                    break;"",""                case SQLTokenizer.NOT:"",""                    if(nullableWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );"",""                    token = nextToken( MISSING_NULL );"",""                    col.setNullable(false);"",""                    nullableWasSet = true;"",""                    break;"",""\t\t\t\tcase SQLTokenizer.PRIMARY:"",""\t\t\t\tcase SQLTokenizer.UNIQUE:"",""\t\t\t\t\tIndexDescription index = index(cmdCreate, token.value, cmdCreate.name, null, colName);"",""\t\t\t\t\tcmdCreate.addIndex( index );"",""\t\t\t\t\tbreak;"",""                default:"",""                    throw createSyntaxError(token, MISSING_OPTIONS_DATATYPE);"",""            }"",""            token = nextToken();"",""        }"",""    }""]"
/smallsql/database/SSResultSet/clearRowBuffer(),"[""/**"",""     * Clear the update row or insert row buffer."",""     */"",""    private void clearRowBuffer(){"",""        if(values != null){"",""            for(int i=values.length-1; i\>=0; i--){"",""                values[i].clear();"",""            }"",""        }"",""    }""]"
/smallsql/junit/TestTransactions/testCreateTable(),"[""public void testCreateTable() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""        Connection con2 = AllTests.createConnection();"",""\t\ttry{\t\t\t"",""\t\t\tcon.setAutoCommit(false);"",""\t\t\tcon.createStatement().execute(\""create table transactions (ID  INTEGER NOT NULL, Name VARCHAR(100), FirstName VARCHAR(100), Points INTEGER, LicenseID INTEGER, PRIMARY KEY(ID))\"");"",""\t\t\tcon.commit();"","""",""\t\t\tcon2.setAutoCommit(false);"",""\t\t\t"",""\t\t\t"",""\t\t\tPreparedStatement pr = con2.prepareStatement(\""insert into transactions (id,Name,FirstName,Points,LicenseID) values (?,?,?,?,?)\"");"",""\t\t\tpr.setInt( \t\t1, 0 );"",""\t\t\tpr.setString( \t2, \""Pilot_1\"" );"",""\t\t\tpr.setString( \t3, \""Herkules\"" );"",""\t\t\tpr.setInt( \t\t4, 1 );"",""\t\t\tpr.setInt( \t\t5, 1 );"",""\t\t\tpr.addBatch();"",""\t\t\tpr.executeBatch();"","""",""\t\t\tassertRowCount( 0, \""Select * from transactions\"");"",""\t\t\tcon2.commit();"",""\t\t\tassertRowCount( 1, \""Select * from transactions\"");"",""\t\t\t"",""\t\t}finally{"",""            con2.close();"",""\t\t\ttry{"",""\t\t\t\tcon.createStatement().execute(\""Drop Table transactions\"");"",""\t\t\t}catch(Throwable e){e.printStackTrace();}"",""\t\t\tcon.setAutoCommit(true);"",""\t\t}"",""\t}""]"
/smallsql/database/DateTime/dayOfWeek(long),"[""/**"",""\t * Return the day of week.\<p\>"",""\t * 0 - Monday\<p\>"",""\t * 1 - Tuesday\<p\>"",""\t * 2 - Wednsday\<p\>"",""\t * 3 - Thursday\<p\>"",""\t * 4 - Friday\<p\>"",""\t * 5 - Saturday\<p\>"",""\t * 6 - Sunday\<p\>"",""\t */"",""\tstatic int dayOfWeek(long time){"",""\t\t// the 1. Jan 1970 is a Thursday --\> 3"",""\t\treturn (int)((time / 86400000 + 3) % 7);"",""\t}""]"
"/smallsql/database/SSCallableStatement/registerOutParameter(int,int,java.lang.String)","[""public void registerOutParameter(int i, int sqlType, String typeName) throws SQLException {"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Method registerOutParameter() not yet implemented.\"");"",""    }""]"
"/smallsql/database/ExpressionValue/getNumeric(java.lang.Object,int)","[""static MutableNumeric getNumeric(Object obj, int dataType){"",""        if(obj == null) return null;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""                return new MutableNumeric( (obj == Boolean.TRUE) ? 1 : 0);"",""            case SQLTokenizer.INT:"",""                return new MutableNumeric( ((Number)obj).intValue() );"",""            case SQLTokenizer.BIGINT:"",""                return new MutableNumeric( ((Number)obj).longValue() );"",""            case SQLTokenizer.REAL:"",""                float fValue = ((Number)obj).floatValue();"",""                if(Float.isInfinite(fValue) || Float.isNaN(fValue))"",""                    return null;"",""                return new MutableNumeric( fValue );"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                double dValue = ((Number)obj).doubleValue();"",""                if(Double.isInfinite(dValue) || Double.isNaN(dValue))"",""                    return null;"",""                return new MutableNumeric( dValue );"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.SMALLMONEY:"",""            \treturn new MutableNumeric( ((Money)obj).value, 4 );"",""            case SQLTokenizer.DECIMAL:"",""            case SQLTokenizer.NUMERIC:"",""\t\t\t\tif(obj instanceof MutableNumeric)"",""\t\t\t\t\treturn (MutableNumeric)obj;"",""\t\t\t\treturn new MutableNumeric( (BigDecimal)obj );"",""            default: return new MutableNumeric( obj.toString() );"",""        }"",""\t}""]"
/smallsql/database/Utils/long2bytes(long),"[""static byte[] long2bytes( long value ){"",""        byte[] result = new byte[8];"",""        result[0] = (byte)(value \>\> 56);"",""        result[1] = (byte)(value \>\> 48);"",""        result[2] = (byte)(value \>\> 40);"",""        result[3] = (byte)(value \>\> 32);"",""        result[4] = (byte)(value \>\> 24);"",""        result[5] = (byte)(value \>\> 16);"",""        result[6] = (byte)(value \>\> 8);"",""        result[7] = (byte)(value);"",""        return result;"",""    }""]"
/smallsql/junit/TestAlterTable2/testAdd2PrimaryKeys(),"[""public void testAdd2PrimaryKeys() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement();"",""        st.execute(\""create table \""+table+\"" (a varchar(2) primary key)\"");"",""        "",""        try {"",""            st.execute(\""alter table \""+table+\"" add b varchar(4) primary key\"");"",""            fail(\""2 primary keys are invalid\"");"",""        } catch (SQLException ex) {"",""            assertSQLException(\""01000\"",0, ex);"",""        }"",""        ResultSet rs = st.executeQuery(\""Select * From \"" + table);"",""        assertRSMetaData( rs, new String[]{\""a\""},  new int[]{Types.VARCHAR} );"",""        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );"",""        assertRowCount( 1, rs );"",""    }""]"
/smallsql/database/Utils/hexDigit2int(char),"[""private static int hexDigit2int(char digit){"",""        if(digit \>= \'0\' && digit \<= \'9\') return digit - \'0\';"",""        digit |= 0x20;"",""        if(digit \>= \'a\' && digit \<= \'f\') return digit - \'W\'; // -\'W\'  ==  -\'a\' + 10"",""        throw new RuntimeException();"",""    }""]"
/smallsql/database/SSStatement/needGeneratedKeys(),"[""final boolean needGeneratedKeys(){"",""        return needGeneratedKeys;"",""    }""]"
/smallsql/database/CommandSelect/setOrder(smallsql.database.Expressions),"[""final void setOrder(Expressions order){"",""        this.orderBy = order;"",""    }""]"
/smallsql/database/Where/execute(),"[""final void execute() throws Exception{"",""\t\trowSource.execute();"",""\t}""]"
"/smallsql/database/StoreImpl/getObject(int,int)","[""/**"",""     * It used for ResultSet.getObject()"",""     */"",""    @Override"",""    Object getObject(int valueOffset, int dataType) throws Exception{"",""        this.offset = valueOffset;"",""        if(readBoolean()) return null;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                    return readBoolean() ? Boolean.TRUE : Boolean.FALSE;"",""            case SQLTokenizer.BINARY:"",""            case SQLTokenizer.VARBINARY:"",""                    return readBinary();"",""            case SQLTokenizer.TINYINT:"",""                    return Utils.getInteger( readUnsignedByte() );"",""            case SQLTokenizer.SMALLINT:"",""                    return Utils.getInteger( readShort() );"",""            case SQLTokenizer.INT:"",""                    return Utils.getInteger(readInt());"",""            case SQLTokenizer.BIGINT:"",""                    return new Long(readLong());"",""            case SQLTokenizer.REAL:"",""                    return new Float( readFloat() );"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""                    return new Double( readDouble() );"",""            case SQLTokenizer.MONEY:"",""                    return Money.createFromUnscaledValue(readLong());"",""            case SQLTokenizer.SMALLMONEY:"",""                    return Money.createFromUnscaledValue(readInt());"",""            case SQLTokenizer.NUMERIC:"",""            case SQLTokenizer.DECIMAL:"",""                    return readNumeric();"",""            case SQLTokenizer.CHAR:"",""            case SQLTokenizer.NCHAR:"",""            case SQLTokenizer.VARCHAR:"",""            case SQLTokenizer.NVARCHAR:"",""                    return readString();"",""\t\t\tcase SQLTokenizer.CLOB:"",""\t\t\tcase SQLTokenizer.NCLOB:"",""            case SQLTokenizer.LONGNVARCHAR:"",""            case SQLTokenizer.LONGVARCHAR:"",""                    return readLongString();"",""            case SQLTokenizer.JAVA_OBJECT:"",""                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());"",""                    ObjectInputStream ois = new ObjectInputStream(bais);"",""                    return ois.readObject();"",""            case SQLTokenizer.LONGVARBINARY:"",""            case SQLTokenizer.BLOB:"",""                    return readLongBinary();"",""            case SQLTokenizer.TIMESTAMP:"",""                    return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP );"",""            case SQLTokenizer.TIME:"",""                    return new DateTime( readTime(), SQLTokenizer.TIME );"",""            case SQLTokenizer.DATE:"",""                    return new DateTime( readDate(), SQLTokenizer.DATE );"",""            case SQLTokenizer.SMALLDATETIME:"",""                    return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP );"",""            case SQLTokenizer.UNIQUEIDENTIFIER:"",""                    return Utils.bytes2unique( page, this.offset);"",""            default: throw new Error();"",""        }"",""    }""]"
"/smallsql/database/SSStatement/execute(java.lang.String,int)","[""final public boolean execute(String sql, int autoGeneratedKeys) throws SQLException{"",""        setNeedGeneratedKeys(autoGeneratedKeys);"",""        return execute(sql);"",""    }""]"
/smallsql/database/SQLParser/expressionParenthesisList(smallsql.database.Command),"[""/**"",""     * Read a Expression list in parenthesis like of VALUES() or functions. "",""     * The left parenthesis is already consumed."",""     * "",""     * @param cmd is needed to add parameters \""?\"" with addParameter() "",""     * @see #expressionDefList"",""     */ "",""    private Expressions expressionParenthesisList(Command cmd) throws SQLException{"",""\t\tExpressions list = new Expressions();"",""\t\t{"",""\t\t\tSQLToken token = nextToken();"",""\t\t\tif(token != null && token.value == SQLTokenizer.PARENTHESIS_R){"",""\t\t\t\t// empty list like functions without parameters"",""\t\t\t\treturn list;"",""\t\t\t}"",""\t\t\tpreviousToken();"",""\t\t}"",""        while(true){"",""            list.add( expression(cmd, 0) );"",""            SQLToken token = nextToken(MISSING_COMMA_PARENTHESIS);"",""            switch(token.value){"",""                case SQLTokenizer.PARENTHESIS_R:"",""                    return list;"",""                case SQLTokenizer.COMMA:"",""                    continue;"",""                default:"",""                    throw new Error();"",""            }"",""        }"",""    }""]"
/smallsql/database/SSResultSet/moveToCurrentRow(),"[""public void moveToCurrentRow() throws SQLException{"",""\t\tisInsertRow = false;"",""        clearRowBuffer();"",""        if(values == null){"",""            //init the values array as insert row buffer "",""            getUpdateValue(1);"",""        }"",""    }""]"
/smallsql/database/RowSource/isBeforeFirst(),"[""/**"",""\t * Equals to ResultSet.isBeforeFirst()."",""\t */"",""\tboolean isBeforeFirst() throws SQLException{"",""\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);"",""\t}""]"
/smallsql/database/MemoryResult/addRow(smallsql.database.ExpressionValue[]),"[""final void addRow(ExpressionValue[] row){"",""\t\trowList.add(row);"",""\t}""]"
/smallsql/database/ExpressionValue/set(smallsql.database.ExpressionValue),"[""final void set(ExpressionValue val){"",""    \tthis.value \t\t= val.value;"",""    \tthis.dataType\t= val.dataType;"",""    \tthis.length\t\t= val.length;"",""    }"",""/*=============================================================================="",""overriden abstact methods extends from expression"",""==============================================================================*/""]"
/smallsql/database/TableResult/next(),"[""@Override"",""    final boolean next() throws Exception{"",""        if(filePos \< 0) return false;"",""\t\tsetNextFilePos();"",""        row++;"",""        return moveToValidRow();"",""    }""]"
/smallsql/database/IndexDescription/drop(smallsql.database.Database),"[""void drop(Database database) throws Exception {"",""        close();"",""\t\tboolean ok = getFile( database, name).delete();"",""\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);"",""\t}""]"
/smallsql/database/SSResultSet/close(),"[""public void close(){"",""    \tst.con.log.println(\""ResultSet.close\"");"",""        cmd = null;"",""    }""]"
/smallsql/database/ExpressionFunctionTimestampDiff/getLong(),"[""long getLong() throws Exception {"",""\t\treturn getInt();"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setObject(int,java.lang.Object,int,int)","[""public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {"",""        checkStatement();"",""    \t//FIXME Scale to consider "",""\t\tcmd.setParamValue( parameterIndex, x, -1);"",""    }""]"
/smallsql/database/ExpressionFunctionIIF/getString(),"[""String getString() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.getString();"",""\t\treturn param3.getString();"",""\t}""]"
"/smallsql/junit/TestTokenizer/failureTest(java.lang.String,java.lang.String,java.lang.String)","[""private void failureTest(String sql, String failureMessage, String expected) {"",""\t\ttry {"",""\t\t\tstat.executeQuery(sql);"",""\t\t\tfail(failureMessage);"",""\t\t}"",""\t\tcatch (SQLException e) {"",""\t\t\tString foundMsg = e.getMessage();"",""\t\t\tString assertMsg = MessageFormat.format("",""\t\t\t\t\t\""Unexpected error: [{0}], expected: [{1}]\"", "",""\t\t\t\t\tnew Object[] { foundMsg, expected }); "",""\t\t\t"",""\t\t\tassertTrue(assertMsg, foundMsg.indexOf(expected) \> -1);"",""\t\t\t"",""\t\t\t// just to check the error, if it happens, is the expected one"",""\t\t\tout.println(\""REGULAR: \"" + e.getMessage() + \'\\n\');"",""\t\t}"",""\t}"",""\t//////////////////////////////////////////////////////////////////////"",""\t// THE FOLLOWING TESTS NEED PACKAGE ACCESS, SO THEY ARE DISABLED. "",""\t//////////////////////////////////////////////////////////////////////""]"
/smallsql/database/SSDatabaseMetaData/getProcedureTerm(),"[""public String getProcedureTerm() {"",""    \treturn \""procedure\"";"",""    }""]"
/smallsql/database/Column/copy(),"[""Column copy(){"",""    \ttry{"",""    \t\treturn (Column)clone();"",""    \t}catch(Exception e){return null;}"",""    \t"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsExpressionsInOrderBy(),"[""public boolean supportsExpressionsInOrderBy() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSCallableStatement/getValue(int),"[""private Expression getValue(int i) throws SQLException{"",""        /**@todo: Implement this java.sql.CallableStatement method*/"",""        throw new java.lang.UnsupportedOperationException(\""Method getValue() not yet implemented.\"");"",""    }""]"
/smallsql/junit/TestDataTypes/TestDataTypes(java.lang.String),"[""TestDataTypes( String datatype ){"",""        super( datatype );"",""        this.datatype = datatype;"",""    }""]"
"/smallsql/database/Database/getTableView(smallsql.database.SSConnection,java.lang.String)","[""/**"",""     * Return a TableView object. If the TableView object is not loaded then it load it."",""     * @param con"",""     * @param tableName"",""     * @return ever a valid TableView object and never null."",""     * @throws SQLException if the table or view does not exists"",""     */"",""    TableView getTableView(SSConnection con, String tableName) throws SQLException{"",""        synchronized(tableViews){"",""            TableView tableView = tableViews.get(tableName);"",""            if(tableView == null){"",""                // FIXME it should block only one table and not all tables, loading of the table should outside of the global synchronized"",""                tableView = TableView.load(con, this, tableName);"",""                tableViews.put( tableName, tableView);"",""            }"",""            return tableView;"",""        }"",""    }""]"
/smallsql/database/StoreImpl/getCurrentOffsetInPage(),"[""int getCurrentOffsetInPage(){"",""\t\treturn offset;"",""\t}""]"
"/smallsql/database/SSDatabaseMetaData/getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)","[""public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {"",""\t\ttry {"",""\t\t\tString[] colNames = {\""TABLE_CAT\"", \""TABLE_SCHEM\"", \""TABLE_NAME\"", \""COLUMN_NAME\"", \""DATA_TYPE\"", \""TYPE_NAME\"", \""COLUMN_SIZE\"", \""BUFFER_LENGTH\"", \""DECIMAL_DIGITS\"", \""NUM_PREC_RADIX\"", \""NULLABLE\"", \""REMARKS\"", \""COLUMN_DEF\"", \""SQL_DATA_TYPE\"", \""SQL_DATETIME_SUB\"", \""CHAR_OCTET_LENGTH\"", \""ORDINAL_POSITION\"", \""IS_NULLABLE\""};"",""\t\t\tObject[][] data   = con.getDatabase(false).getColumns(con, tableNamePattern, columnNamePattern);"",""\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""\t\t} catch (Exception e) {"",""\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t}"",""    }""]"
/smallsql/database/CreateFile/commit(),"[""/**"",""     * {@inheritDoc}"",""     */"",""    @Override"",""    long commit(){"",""        raFile = null;"",""        return -1;"",""    }""]"
/smallsql/database/ExpressionFunctionSpace/getString(),"[""final String getString() throws Exception {"",""\t\tif(isNull()) return null;"",""        int size = param1.getInt();"",""        if(size \< 0){"",""            return null;"",""        }"",""\t\tchar[] buffer = new char[size];"",""        for(int i=0; i\<size; i++){"",""            buffer[i] = \' \';"",""        }"",""\t\treturn new String(buffer);"",""\t}""]"
/smallsql/database/ExpressionFunctionRight/getBytes(),"[""final byte[] getBytes() throws Exception{"",""\t\tif(isNull()) return null;"",""\t\tbyte[] bytes = param1.getBytes();"",""\t\tint length = param2.getInt();"",""\t\tif(bytes.length \<= length) return bytes;"","""",""\t\tbyte[] b = new byte[length];"",""\t\tSystem.arraycopy(bytes, bytes.length -length, b, 0, length);"",""\t\treturn b;\t\t"",""\t}""]"
/smallsql/database/UnionAll/isScrollable(),"[""final boolean isScrollable(){"",""\t\treturn false; //TODO performance, can implement it if all datasources implement it"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getDriverMajorVersion(),"[""public int getDriverMajorVersion() {"",""    \treturn SSDriver.drv.getMajorVersion();"",""    }""]"
/smallsql/database/IndexNode/saveNode(smallsql.database.IndexNode),"[""private final void saveNode(IndexNode node){"",""\t\tint length = nodes.length;"",""\t\tIndexNode[] temp = new IndexNode[length+1];"",""\t\tif(length == 0){"",""\t\t\ttemp[0] = node;"",""\t\t}else{"",""\t\t\tint pos = findNodeInsertPos( node.digit, 0, length);"",""\t\t\tSystem.arraycopy(nodes, 0, temp, 0, pos);"",""\t\t\tSystem.arraycopy(nodes, pos, temp, pos+1, length-pos);"",""\t\t\ttemp[pos] = node;"",""\t\t}"",""\t\tnodes = temp;"",""\t}""]"
"/smallsql/database/Table/getLobStore(smallsql.database.SSConnection,long,int)","[""StoreImpl getLobStore(SSConnection con, long filePos, int pageOperation) throws Exception{"",""\t\tif(lobs == null){"",""\t\t\tlobs = new Lobs( this );"",""\t\t}"",""\t\treturn lobs.getStore( con, filePos, pageOperation );"",""\t}""]"
/smallsql/database/TableResult/rowInserted(),"[""@Override"",""    final boolean rowInserted(){"",""\t\treturn filePos \>= firstOwnInsert;"",""\t}""]"
/smallsql/database/IndexDescriptions/findBestMatch(smallsql.database.Strings),"[""final IndexDescription findBestMatch(Strings columns){"",""\t\tint bestFactor = Integer.MAX_VALUE;"",""\t\tint bestIdx = 0;"",""\t\tfor(int i=0; i\<size; i++){"",""\t\t\tint factor = data[i].matchFactor(columns);"",""\t\t\tif(factor == 0) "",""\t\t\t\treturn data[i];"",""\t\t\t"",""\t\t\tif(factor \< bestFactor){"",""\t\t\t\tbestFactor = factor;"",""\t\t\t\tbestIdx = i;"",""\t\t\t}"",""\t\t}"",""\t\tif(bestFactor == Integer.MAX_VALUE)"",""\t\t\treturn null;"",""\t\telse"",""\t\t\treturn data[bestIdx];"",""\t}""]"
/smallsql/database/ExpressionFunctionLCase/getBytes(),"[""final byte[] getBytes() throws Exception{"",""        if(isNull()) return null;"",""        return getString().getBytes();"",""\t}""]"
/smallsql/database/MutableLong/getImmutableObject(),"[""public Object getImmutableObject(){"",""\t\treturn new Long(value);"",""\t}""]"
/smallsql/database/SQLParser/group(smallsql.database.CommandSelect),"[""private void group(CommandSelect cmd) throws SQLException{"",""        nextToken(MISSING_BY);"",""        cmd.setGroup( expressionTokenList(cmd, SQLTokenizer.GROUP) );"",""    }""]"
/smallsql/junit/TestResultSet/testDelete(),"[""public void testDelete() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""        ResultSet rs = st.executeQuery(\""Select * From ResultSet Where i\>1\"");"",""        "",""        assertTrue(\""next\"", rs.next());"",""        assertFalse( rs.rowDeleted() );"",""        rs.deleteRow();"",""        assertTrue( rs.rowDeleted() );"",""    }""]"
/smallsql/junit/TestDBMetaData/testGetTables(),"[""public void testGetTables() throws Exception{"",""        String[] colNames = {\""TABLE_CAT\"",\""TABLE_SCHEM\"",\""TABLE_NAME\"",\""TABLE_TYPE\"",\""REMARKS\"",\""TYPE_CAT\"",\""TYPE_SCHEM\"",\""TYPE_NAME\"",\""SELF_REFERENCING_COL_NAME\"",\""REF_GENERATION\""};"",""        int[] types = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL};"",""        "",""        //First test the function without a database connection"",""        Connection con = DriverManager.getConnection(\""jdbc:smallsql?\"");"",""        DatabaseMetaData md = con.getMetaData();"",""        ResultSet rs = md.getTables(null, null, null, null);"",""        super.assertRSMetaData(rs, colNames, new int[colNames.length]); //All types are NULL, because no row."",""        assertFalse(rs.next());"",""        con.close();"",""        "",""        //Then test it with a database"",""        con = AllTests.getConnection();"",""        md = con.getMetaData();"",""        rs = md.getTables(null, null, null, null);"",""        super.assertRSMetaData(rs, colNames, types);"",""    }""]"
/smallsql/database/ExpressionFunctionMonth/getInt(),"[""final int getInt() throws Exception {"",""\t\tif(param1.isNull()) return 0;"",""\t\tDateTime.Details details = new DateTime.Details(param1.getLong());"",""\t\treturn details.month+1;"",""\t}""]"
/smallsql/database/language/Language_it/getEntries(),"[""public String[][] getEntries() {"",""\t\treturn ENTRIES;"",""\t}""]"
/smallsql/database/SSResultSetMetaData/getColumnExpression(int),"[""final Expression getColumnExpression( int column ) throws SQLException{"",""        return columns.get( getColumnIdx( column ) );"",""    }""]"
/smallsql/database/UnionAll/execute(),"[""final void execute() throws Exception{"",""\t\tfor(int i=0; i\<dataSources.size(); i++){"",""\t\t\tdataSources.get(i).execute();\t\t\t"",""\t\t}"",""\t}""]"
/smallsql/database/UnionAll/addDataSource(smallsql.database.DataSource),"[""void addDataSource(DataSource ds){"",""\t\tdataSources.add(ds);"",""\t\tcurrentDS = dataSources.get(0);"",""\t}""]"
/smallsql/database/LongList/resize(int),"[""private final void resize(int newSize){"",""\t\tlong[] dataNew = new long[newSize];"",""\t\tSystem.arraycopy(data, 0, dataNew, 0, size);"",""\t\tdata = dataNew;\t\t"",""\t}""]"
/smallsql/database/ColumnExpression/getDisplaySize(),"[""int getDisplaySize(){"",""\t\treturn expr.getDisplaySize();"",""\t}""]"
/smallsql/junit/TestGroupBy/testMaxMoney(),"[""public void testMaxMoney() throws Exception{"",""\t\tinit();"",""\t\tassertEqualsRsValue( new java.math.BigDecimal(\""2.0000\""), \""Select max(convert(money,id)) FROM \"" + table1);"",""\t}""]"
/smallsql/database/SSConnection/getSavepoint(),"[""int getSavepoint() throws SQLException{"",""\t\ttestClosedConnection();"",""\t\treturn commitPages.size(); // the call is atomic, that it need not be synchronized"",""\t}""]"
/smallsql/database/ExpressionFunctionConvert/getDataType(),"[""final int getDataType() {"",""\t\treturn datatype.getDataType();"",""\t}""]"
/smallsql/database/Money/createFromUnscaledValue(int),"[""public static Money createFromUnscaledValue(int value){"",""        Money money = new Money();"",""        money.value = value;"",""        return money;"",""    }""]"
/smallsql/database/ExpressionFunctionCase/getDouble(),"[""final double getDouble() throws Exception {"",""\t\treturn getResult().getDouble();"",""\t}""]"
/smallsql/database/ExpressionFunctionInsert/getPrecision(),"[""int getPrecision() {"",""        return param1.getPrecision()+param2.getPrecision();"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsGroupByBeyondSelect(),"[""public boolean supportsGroupByBeyondSelect() {"",""    \treturn true;"",""    }""]"
/smallsql/database/MemoryStream/readShort(),"[""int readShort(){"",""\t\treturn ((puffer[ offset++ ] & 0xFF) \<\< 8) | (puffer[ offset++ ] & 0xFF);"",""\t}""]"
/smallsql/database/Expression/getNumeric(),"[""abstract MutableNumeric getNumeric() throws Exception;""]"
/smallsql/database/SQLParser/having(smallsql.database.CommandSelect),"[""private void having(CommandSelect cmd) throws SQLException{"",""        cmd.setHaving( expression(cmd, 0) );"",""    }""]"
/smallsql/database/ExpressionFunctionCase/getString(),"[""final String getString() throws Exception {"",""\t\treturn getResult().getString();"",""\t}""]"
/smallsql/database/Database/closeConnection(smallsql.database.SSConnection),"[""/**"",""\t * Remove a connection from this database."",""\t */"",""\tstatic final void closeConnection(SSConnection con) throws SQLException{"",""\t\tsynchronized(databases){"",""\t\t\tIterator iterator = databases.values().iterator();"",""\t\t\twhile(iterator.hasNext()){"",""\t\t\t\tDatabase database = (Database)iterator.next();"",""\t\t\t\tWeakHashMap connections = database.connections;"",""\t\t\t\tconnections.remove(con);"",""\t\t\t\tif(connections.size() == 0){"",""\t\t\t\t\ttry {"",""\t\t\t\t\t\titerator.remove();"",""\t\t\t\t\t\tdatabase.close();"",""\t\t\t\t\t} catch (Exception e) {"",""\t\t\t\t\t\tthrow SmallSQLException.createFromException(e);"",""\t\t\t\t\t}"",""\t\t\t\t}"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/junit/TestOrderBy/testOrderBy_double(),"[""public void testOrderBy_double() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tDouble oldValue;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by d\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\toldValue = (Double)rs.getObject(\""d\"");"",""\t\tassertNull(oldValue);"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = (Double)rs.getObject(\""d\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tassertTrue( oldValue.compareTo( (Double)rs.getObject(\""d\"") ) \< 0 );"",""\t\t\toldValue = (Double)rs.getObject(\""d\"");"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/junit/TestOrderBy/test2Columns(),"[""public void test2Columns() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs = null;"",""\t\tString oldValue;"","""",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1+\"",\""+table2+\"" ORDER  by v, c2\"");"","""",""\t\tassertTrue( rs.next() );"",""\t\tassertNull( rs.getObject(\""v\"") );"",""\t\tassertNull( rs.getObject(\""c2\"") );"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = rs.getString(\""c2\"");"","""",""\t\tint count = 1;"",""\t\twhile(rs.next() && rs.getString(\""v\"") == null){"",""\t\t\tString newValue = rs.getString(\""c2\"");"",""\t\t\tassertTrue( oldValue.compareTo( newValue ) \< 0 );"",""\t\t\toldValue = newValue;"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount+1, count );"",""\t\t"",""\t\tboolean isNext = true;"",""\t\twhile(isNext){"",""\t\t\tString vValue = rs.getString(\""v\"");"",""\t\t\tassertNull( rs.getObject(\""c2\"") );"",""\t\t"",""\t\t\tassertTrue( rs.next() );"",""\t\t\toldValue = rs.getString(\""c2\"");"",""\t\t\tassertEquals( vValue, rs.getString(\""v\"") );"","""",""\t\t\tisNext = rs.next();"",""\t\t\tcount = 1;"",""\t\t\twhile(isNext && vValue.equals(rs.getString(\""v\""))){"",""\t\t\t\tString newValue = rs.getString(\""c2\"");"",""\t\t\t\tassertTrue( oldValue.compareTo( newValue ) \< 0 );"",""\t\t\t\toldValue = newValue;"",""\t\t\t\tcount++;"",""\t\t\t\tisNext = rs.next();"",""\t\t\t}"",""\t\t\tassertEquals( valueCount+1, count );"",""\t\t}"",""\t}""]"
/smallsql/junit/TestLanguage/testEntries(),"[""/**"",""\t * Checks if languages specified by OTHER_LANGUAGES array translate all the"",""\t * message entries of the base (English) language: if they don\'t, the test"",""\t * fails and print the missing ones in System.err."",""\t */"",""\tpublic void testEntries() throws Exception {"",""\t\tboolean failed = false;"",""        StringBuffer msgBuf = new StringBuffer();"",""\t\tLanguage eng = Language.getLanguage(\""en\""); "",""        "",""        HashSet engEntriesSet = new HashSet();"",""        String[][] engEntriesArr = eng.getEntries();"",""        /* WARNING! skips message 0 (CUSTOM_MESSAGE) */"",""        for (int j = 1; j \< engEntriesArr.length; j++) {"",""            engEntriesSet.add(engEntriesArr[j][0]);"",""        }"",""\t\t"",""\t\tfor (int i = 0; i \< OTHER_LANGUAGES.length; i++) {"",""\t\t\tString localeStr = OTHER_LANGUAGES[i];"",""\t\t\tLanguage lang2 = Language.getLanguage(localeStr);"",""            "",""            HashSet otherEntriesSet = new HashSet();        "",""            String[][] otherEntriesArr = lang2.getEntries();        "",""            for (int j = 0; j \< otherEntriesArr.length; j++) {"",""                otherEntriesSet.add(otherEntriesArr[j][0]);"",""            }"",""            "",""            /* test missing entries */"",""\t\t\tSet diff = (Set)engEntriesSet.clone();"",""            diff.removeAll(otherEntriesSet);"","""",""\t\t\tif (diff.size() \> 0) {"",""\t\t\t\tfailed = true;"",""                msgBuf.append(\""\\nMissing entries for language \"").append( OTHER_LANGUAGES[i] ).append(\"": \"");"",""\t\t\t\t"",""\t\t\t\tfor (Iterator itr = diff.iterator(); itr.hasNext(); ) {"",""\t\t\t\t\tmsgBuf.append(itr.next());"",""\t\t\t\t\tif (itr.hasNext()) msgBuf.append(\',\');"",""\t\t\t\t}"",""\t\t\t}"",""            "",""            /* test additional entries */"",""            diff = (Set)otherEntriesSet.clone();"",""            diff.removeAll(engEntriesSet);"","""",""            if (diff.size() \> 0) {"",""                failed = true;"",""                msgBuf.append(\""\\nAdditional entries for language \"").append( OTHER_LANGUAGES[i] ).append(\"": \"");"",""                "",""                for (Iterator itr = diff.iterator(); itr.hasNext(); ) {"",""                    msgBuf.append(itr.next());"",""                    if (itr.hasNext()) msgBuf.append(\',\');"",""                }"",""            }"",""            "",""            /* test not translated entries */"",""            StringBuffer buf = new StringBuffer();"",""            for (int j = 1; j \< engEntriesArr.length; j++) {"",""                String key = engEntriesArr[j][0];"",""                String engValue = eng.getMessage(key);"",""                String otherValue = lang2.getMessage(key);"",""                if(engValue.equals(otherValue)){"",""                    failed = true;"",""                    if(buf.length() \> 0){"",""                        buf.append(\',\');"",""                    }"",""                    buf.append(key);"",""                }"",""            }"",""            if(buf.length()\>0){"",""                msgBuf.append(\""\\nNot translated entries for language \"").append( OTHER_LANGUAGES[i] ).append(\"": \"");"",""                msgBuf.append(buf);"",""            }"",""\t\t}\t\t"","""",""\t\tif (failed){"",""            System.err.println(msgBuf);"",""            fail(msgBuf.toString());"",""        }"",""\t}""]"
/smallsql/junit/TestOrderBy/test_functionAscDesc(),"[""public void test_functionAscDesc() throws Exception{"",""\t\tinit();"",""\t\tConnection con = AllTests.getConnection();"",""\t\tStatement st = con.createStatement();"",""\t\tResultSet rs;"",""\t\tint oldValue;"",""\t\tint oldValue2;"",""\t\t"",""\t\trs = st.executeQuery(\""SELECT * FROM \"" + table1 + \"" ORDER  by abs(i) Asc, i desc\"");"",""\t\t"",""\t\tassertTrue( rs.next() );"",""\t\t"",""\t\tassertNull(rs.getObject(\""i\""));"",""\t\tassertTrue( rs.next() );"",""\t\toldValue = Math.abs( rs.getInt(\""i\"") );"",""\t\toldValue2 = rs.getInt(\""i\"");"",""\t\t"",""\t\tint count = 1;"",""\t\twhile(rs.next()){"",""\t\t\tint newValue2 = rs.getInt(\""i\"");"",""\t\t\tint newValue = Math.abs( newValue2 );"",""\t\t\tassertTrue( oldValue \<= newValue );"",""\t\t\tif(oldValue == newValue){"",""\t\t\t\tassertTrue( oldValue2 \> newValue2 );"",""\t\t\t}"",""\t\t\toldValue = newValue;"",""\t\t\toldValue2 = newValue2;"",""\t\t\tcount++;"",""\t\t}"",""\t\tassertEquals( valueCount, count );"",""\t}""]"
/smallsql/database/IndexNode/moveRemainderValue(),"[""/**"",""\t * Move a REMAINDER_VALUE node to the next node level."",""\t * @param digit"",""\t * @throws SQLException"",""\t */"",""\tprivate final void moveRemainderValue() throws SQLException{"",""\t\tObject rowOffset = value;"",""\t\tchar[] puffer = remainderKey;"",""\t\tvalue = null;"",""\t\tremainderKey = null;"",""\t\tIndexNode newNode = addNode(puffer[0]);"",""\t\tif(puffer.length == 1){"",""\t\t\tnewNode.value  = rowOffset;"",""\t\t}else{"",""\t\t\tnewNode.moveRemainderValueSub( rowOffset, puffer);"",""\t\t}"",""\t}""]"
/smallsql/database/LongList/clear(),"[""final void clear(){"",""\t\tsize = 0;"",""\t}""]"
/smallsql/database/TableResult/afterLast(),"[""@Override"",""    final void afterLast(){"",""\t\tfilePos = -1;"",""\t\tnoRow();"",""\t}""]"
/smallsql/database/SSResultSet/getBlob(int),"[""public Blob getBlob(int i) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.getBlob method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Blob object\"");"",""    }""]"
/smallsql/junit/BenchTest/test_InsertClassic(java.sql.Connection),"[""/**"",""      *  1. Test"",""      *  Insert rows with default values with a classic insert statement."",""      */  "",""    static void test_InsertClassic(Connection con){"",""        System.out.println();"",""        System.out.println( \""Test insert rows with default values with a classic insert statement: \"" + rowCount + \"" rows\"");"",""        "",""        try{"",""            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );"",""            long time = -System.currentTimeMillis();"",""            for (int i=0; i\<rowCount; i++){"",""                st.execute(\""INSERT INTO \"" + tableName + \""(i) VALUES(\"" + i +\"")\"");"",""            }"",""            time += System.currentTimeMillis();"",""            ResultSet rs = st.executeQuery( \""SELECT count(*) FROM \"" + tableName);"",""            rs.next();"",""            int count = rs.getInt(1);"",""            if (count != rowCount)"",""                System.out.println( \""  Failed: Only \"" + count + \"" rows were inserted.\"");"",""            else System.out.println( \""  Test time: \"" + time + \"" ms\"");"",""            st.close();"",""        }catch(Exception e){"",""            System.out.println(\""  Failed:\""+e);"",""        }finally{"",""            System.out.println();"",""            System.out.println(\""===================================================================\"");"",""        }"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getDatabaseProductName(),"[""public String getDatabaseProductName() {"",""    \treturn \""SmallSQL Database\"";"",""    }""]"
/smallsql/database/ExpressionFunctionCharLen/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.CHARLEN;"",""\t}""]"
/smallsql/database/IndexDescriptions/add(smallsql.database.IndexDescriptions),"[""void add(IndexDescriptions indexes) throws SQLException {"",""        for(int i=0; i\<indexes.size; i++){"",""            add(indexes.data[i]);"",""        }"",""    }""]"
"/smallsql/database/Expression/setParamAt(smallsql.database.Expression,int)","[""/**"",""     * Replace the idx parameter. You need to use this method to modify the \<code\>params\</code\> "",""     * array because there there can be other references to the \<code\>params\</code\>. "",""     */"",""    void setParamAt( Expression param, int idx){"",""    \tparams[idx] = param;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/storesMixedCaseQuotedIdentifiers(),"[""public boolean storesMixedCaseQuotedIdentifiers() {"",""    \treturn true;"",""    }""]"
/smallsql/database/SSDatabaseMetaData/supportsMultipleTransactions(),"[""public boolean supportsMultipleTransactions() {"",""    \treturn true;"",""    }""]"
/smallsql/database/Expressions/Expressions(),"[""Expressions(){"",""\t\tdata = new Expression[16];"",""\t}""]"
/smallsql/database/TableViewResult/getTableViewResult(smallsql.database.RowSource),"[""static TableViewResult getTableViewResult(RowSource from) throws SQLException{"",""\t\tif(from instanceof Where){"",""\t\t\tfrom = ((Where)from).getFrom();"",""\t\t}"",""\t\tif(from instanceof TableViewResult){"",""\t\t\treturn (TableViewResult)from;"",""\t\t}"",""\t\tthrow SmallSQLException.create(Language.ROWSOURCE_READONLY);"",""\t}""]"
/smallsql/database/Utils/double2long(double),"[""static long double2long(double value){"",""\t\tif(value \> Long.MAX_VALUE)"",""\t\t\treturn Long.MAX_VALUE;"",""\t\tif(value \< Long.MIN_VALUE)"",""\t\t\treturn Long.MIN_VALUE;"",""\t\treturn (long)value;"",""\t}""]"
/smallsql/junit/TestResultSet/testUpdateAndScroll(),"[""/**"",""     * test if scrolling reset the update values"",""     */"",""    public void testUpdateAndScroll() throws Exception{"",""        final Object value = \""UpdateAndScroll\"";"",""        Object value1;"",""        Object value2;"",""        Connection con = AllTests.getConnection();"",""        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"",""        ResultSet rs = st.executeQuery(\""Select * From ResultSet\"");"",""        "",""        //method first"",""        assertTrue(\""start\"", rs.last());"",""        value1 = rs.getObject(\""i\"");"",""        rs.updateObject(\""c\"", value, Types.VARCHAR );"",""        assertEquals(\""getObject\"", value, rs.getObject(\""c\""));"",""        assertEquals(\""getObject\"", value1, rs.getObject(\""i\""));"",""        assertTrue(\""first\"", rs.first());"",""        assertNotSame(\""getObject\"", value, rs.getObject(\""c\""));"",""        "",""        //method next"",""        assertTrue(\""start\"", rs.first());"",""        rs.updateObject(\""c\"", value, Types.VARCHAR );"",""        assertEquals(\""getObject\"", value, rs.getObject(\""c\""));"",""        assertTrue(\""next\"", rs.next());"",""        assertNotSame(\""getObject\"", value, rs.getObject(\""c\""));"",""        "",""        //method previous"",""        assertTrue(\""start\"", rs.last());"",""        rs.updateObject(\""c\"", value );"",""        assertEquals(\""getObject\"", value, rs.getObject(\""c\""));"",""        assertTrue(\""previous\"", rs.previous());"",""        assertNotSame(\""getObject\"", value, rs.getObject(\""c\""));"",""        "",""        //method last"",""        assertTrue(\""start\"", rs.first());"",""        rs.updateObject(\""c\"", value, Types.VARCHAR );"",""        assertEquals(\""getObject\"", value, rs.getObject(\""c\""));"",""        assertTrue(\""last\"", rs.last());"",""        assertNotSame(\""getObject\"", value, rs.getObject(\""c\""));"",""        "",""        //method refresh"",""        assertTrue(\""start\"", rs.first());"",""        rs.updateObject(\""c\"", value, Types.VARCHAR );"",""        assertEquals(\""getObject\"", value, rs.getObject(\""c\""));"",""        rs.refreshRow();"",""        assertNotSame(\""getObject\"", value, rs.getObject(\""c\""));"",""        "",""        //method moveToInsertRow and moveToCurrentRow"",""        assertTrue(\""start\"", rs.first());"",""        value1 = rs.getObject(\""i\"");"",""        value2 = rs.getObject(\""c\"");"",""        rs.updateObject(\""c\"", value);"",""        assertEquals(\""getObject\"", value, rs.getObject(\""c\""));"",""        rs.moveToInsertRow();"",""        assertNull(\""new row\"", rs.getObject(\""i\""));"",""        assertNull(\""new row\"", rs.getObject(\""c\""));"",""        rs.updateObject(\""c\"", value);"",""        assertEquals(\""getObject\"", value, rs.getObject(\""c\""));"",""        rs.moveToCurrentRow();"",""        assertEquals(\""getObject\"", value1, rs.getObject(\""i\""));"",""        assertEquals(\""getObject\"", value2, rs.getObject(\""c\""));"",""    }""]"
/smallsql/junit/TestDBMetaData/testFunctions(),"[""public void testFunctions() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        DatabaseMetaData md = con.getMetaData();"",""        assertEquals( \""getNumericFunctions\"", \""ABS,ACOS,ASIN,ATAN,ATAN2,CEILING,COS,COT,DEGREES,EXP,FLOOR,LOG,LOG10,MOD,PI,POWER,RADIANS,RAND,ROUND,SIGN,SIN,SQRT,TAN,TRUNCATE\"","",""                md.getNumericFunctions());"",""        assertEquals( \""getStringFunctions\"", \""ASCII,BIT_LENGTH,CHAR_LENGTH,CHARACTER_LENGTH,CHAR,CONCAT,DIFFERENCE,INSERT,LCASE,LEFT,LENGTH,LOCATE,LTRIM,OCTET_LENGTH,REPEAT,REPLACE,RIGHT,RTRIM,SOUNDEX,SPACE,SUBSTRING,TRIM,UCASE\"","",""                md.getStringFunctions());"",""        assertEquals( \""getStringFunctions\"", \""IFNULL,USER,CONVERT,CAST,IIF\"","",""                md.getSystemFunctions());"",""        assertEquals( \""getStringFunctions\"", \""CURDATE,CURRENT_DATE,CURTIME,DAYNAME,DAYOFMONTH,DAYOFWEEK,DAYOFYEAR,DAY,HOUR,MILLISECOND,MINUTE,MONTH,MONTHNAME,NOW,QUARTER,SECOND,TIMESTAMPADD,TIMESTAMPDIFF,WEEK,YEAR\"","",""                md.getTimeDateFunctions());"",""    }""]"
"/smallsql/database/DateTime/formatHour12(int,java.lang.StringBuffer)","[""/**"",""\t * The hour is print in the range from 1 - 12 "",""\t */"",""\tprivate final static void formatHour12(int hour,  StringBuffer buf){"",""\t\thour %= 12;"",""\t\tif(hour == 0) hour = 12;"",""\t\tformatNumber( hour, 2, buf );"",""\t}""]"
"/smallsql/database/SSPreparedStatement/setBigDecimal(int,java.math.BigDecimal)","[""public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {"",""        checkStatement();"",""        cmd.setParamValue( parameterIndex, x, SQLTokenizer.DECIMAL);"",""    }""]"
/smallsql/database/MutableFloat/floatValue(),"[""public float floatValue() {"",""\t\treturn value;"",""\t}""]"
"/smallsql/database/IndexDescription/createName(java.lang.String,java.lang.String)","[""private static String createName( String defaultName, String tableName ){"",""        if(defaultName == null){"",""            defaultName = tableName + \""_\"" + Long.toHexString(System.currentTimeMillis()) + Integer.toHexString(new Object().hashCode());"",""        }"",""        return defaultName;"",""    }""]"
"/smallsql/database/StoreNoCurrentRow/getLong(int,int)","[""long getLong(int offset, int dataType) throws Exception {"",""\t\tthrow noCurrentRow();"",""\t}""]"
/smallsql/database/RowSource/isAfterLast(),"[""/**"",""\t * Equals to ResultSet.isAfterLast()."",""\t */"",""\tboolean isAfterLast() throws SQLException, Exception{"",""\t\tthrow SmallSQLException.create(Language.RSET_FWDONLY);"",""\t}""]"
"/smallsql/database/SSConnection/prepareStatement(java.lang.String,int,int)","[""public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {"",""        return new SSPreparedStatement( this, sql, resultSetType, resultSetConcurrency);"",""    }""]"
/smallsql/database/SSConnection/rollback(java.sql.Savepoint),"[""public void rollback(Savepoint savepoint) throws SQLException {"",""    \tif(savepoint instanceof SSSavepoint){"",""    \t\tif(((SSSavepoint)savepoint).transactionTime != transactionTime){"",""\t\t\t\tthrow SmallSQLException.create(Language.SAVEPT_INVALID_TRANS);"",""    \t\t}"",""    \t\trollback( savepoint.getSavepointId() );"",""    \t\treturn;"",""    \t}"",""        throw SmallSQLException.create(Language.SAVEPT_INVALID_DRIVER, savepoint);"",""    }""]"
/smallsql/database/MemoryResult/getTableView(),"[""final TableView getTableView(){"",""\t\treturn null;"",""\t}""]"
/smallsql/database/SSResultSet/getCharacterStream(java.lang.String),"[""public Reader getCharacterStream(String columnName) throws SQLException {"",""        return getCharacterStream( findColumn( columnName ) );"",""    }""]"
/smallsql/database/ExpressionFunctionIIF/getDouble(),"[""double getDouble() throws Exception {"",""\t\tif(param1.getBoolean())"",""\t\t\treturn param2.getDouble();"",""\t\treturn param3.getDouble();"",""\t}""]"
"/smallsql/database/SQLParser/parse(smallsql.database.SSConnection,java.lang.String)","[""Command parse(SSConnection con, String sqlString) throws SQLException{"",""    \tthis.con = con;"",""        Command cmd = parse( sqlString.toCharArray() );"",""        SQLToken token = nextToken();"",""        if(token != null){"",""        \tthrow createSyntaxError(token, Language.STXADD_ADDITIONAL_TOK);"",""        }"",""        return cmd;"",""    }""]"
/smallsql/database/MutableNumeric/doubleValue(),"[""public double doubleValue(){"",""        if(value.length == 0 || signum == 0){"",""            return 0;"",""        }else{"",""            if (value.length == 1 && (value[0] \> 0)){"",""                // simple Integer Value"",""                return value[0] / scaleDoubleFactor[scale] * signum;"",""            }else"",""            if (value.length == 1){"",""                // overflow Integer Value"",""                long temp = value[0] & 0xFFFFFFFFL;"",""                return temp / scaleDoubleFactor[scale] * signum;"",""            }else"",""            if (value.length == 2 && (value[0] \> 0)){"",""                // simple Long Value"",""                long temp = (((long)value[0]) \<\< 32) | (value[1] & 0xFFFFFFFFL);"",""                return temp / scaleDoubleFactor[scale] * signum;"",""            }else{"",""                return new BigDecimal( new BigInteger( toByteArray() ), scale ).doubleValue();"",""            }"",""        }"",""    }""]"
/smallsql/database/Strings/get(int),"[""final String get(int idx){"",""\t\tif (idx \>= size)"",""\t\t\tthrow new IndexOutOfBoundsException(\""Column index: \""+idx+\"", Size: \""+size);"",""\t\treturn data[idx];"",""\t}""]"
/smallsql/database/ExpressionFunctionCos/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.cos( param1.getDouble() );"",""    }""]"
/smallsql/database/LongList/LongList(int),"[""LongList(int initialSize){"",""\t\tdata = new long[initialSize];"",""\t}""]"
"/smallsql/database/Command/setParamValue(int,java.lang.Object,int)","[""/**"",""     * Set value of a PreparedStatement parameter."",""     * The idx starts with 1."",""     */"",""    void setParamValue(int idx, Object value, int dataType) throws SQLException{"",""\t\tgetParam(idx).set( value, dataType );"",""\t\tif(log.isLogging()){"",""\t\t\tlog.println(\""param\""+idx+\'=\'+value+\""; type=\""+dataType);"",""\t\t}"",""    }""]"
"/smallsql/database/Index/addNull(smallsql.database.IndexNode,long,boolean)","[""final private IndexNode addNull(IndexNode page, long rowOffset, boolean isLastValue) throws SQLException{"",""\t\tif(isLastValue){"",""\t\t\tpage.addNode( (char)0, rowOffset );"",""\t\t\treturn null;"",""\t\t}else"",""\t\t\treturn page.addRoot((char)0);"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getTimeDateFunctions(),"[""public String getTimeDateFunctions() {"",""\t\treturn getFunctions(SQLTokenizer.CURDATE, SQLTokenizer.YEAR);"",""    }""]"
/smallsql/database/ExpressionFunctionReturnP1Number/getMoney(),"[""long getMoney() throws Exception{"",""        return Utils.doubleToMoney(getDouble());"",""    }""]"
/smallsql/database/ExpressionFunctionMonth/getFunction(),"[""final int getFunction() {"",""\t\treturn SQLTokenizer.MONTH;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/storesUpperCaseIdentifiers(),"[""public boolean storesUpperCaseIdentifiers() {"",""    \treturn false;"",""    }""]"
"/smallsql/database/CommandCreateView/CommandCreateView(smallsql.database.Logger,java.lang.String)","[""CommandCreateView( Logger log, String name ){"",""    \tsuper(log);"",""        this.type = SQLTokenizer.VIEW;"",""        this.name = name;"",""    }""]"
/smallsql/database/Strings/add(java.lang.String),"[""final void add(String descr){"",""\t\tif(size \>= data.length ){"",""\t\t\tresize(size \<\< 1);"",""\t\t}"",""\t\tdata[size++] = descr;"",""\t}""]"
/smallsql/database/MemoryResult/getNumeric(int),"[""MutableNumeric getNumeric( int colIdx ) throws Exception{"",""\t\treturn get( colIdx ).getNumeric();"",""\t}""]"
/smallsql/database/TableView/getFile(smallsql.database.Database),"[""/**"",""\t * Get a file object for the current table or view. This is independent"",""\t * if it exists or not."",""\t * @param database The database that the table or view include"",""\t * @return a file handle, never null"",""\t */"",""\tFile getFile(Database database){"",""\t\treturn new File( Utils.createTableViewFileName( database, name ) );"",""\t}""]"
"/smallsql/database/LongTreeList/correctPointers(int,int,int,int)","[""/**"",""\t * Correct all pointers that point behind a new entry."",""\t * @param startOffset the startoffset of the current node"",""\t * @param oldOffset the offset of the new entry, only pointer that point behind it need to correct."",""\t * @param diff the differenz that need added to the pointers"",""\t * @param level the stack level. There are only 3 levels with pointers."",""\t */"",""\tfinal private void correctPointers(int startOffset, int oldOffset, int diff, int level){"",""\t\toffset = startOffset;"",""\t\tboolean firstNode = true;"",""\t\twhile(offset \< size){"",""\t\t\tif(offset == oldOffset){"",""\t\t\t\tint absDiff = Math.abs(diff);"",""\t\t\t\tif(absDiff == 2) return;"",""\t\t\t\toffset += absDiff;"",""\t\t\t\tfirstNode = false;"",""\t\t\t\tcontinue;"",""\t\t\t}"",""\t\t\tint value = getUnsignedShort();"",""\t\t\tif(value != 0 || firstNode){"",""\t\t\t\tint pointer = getPointer();"",""\t\t\t\tif(pointer \> oldOffset){"",""\t\t\t\t\toffset  -= pointerSize;"",""\t\t\t\t\twritePointer( pointer + diff );"",""\t\t\t\t\tif(diff \> 0) pointer += diff;"",""\t\t\t\t}\t\t\t\t"",""\t\t\t\tif(level \< 2){"",""\t\t\t\t\tstartOffset = offset;"",""\t\t\t\t\tcorrectPointers( pointer, oldOffset, diff, level+1);"",""\t\t\t\t\toffset = startOffset;"",""\t\t\t\t}"",""\t\t\t\tfirstNode = false;"",""\t\t\t}else{"",""\t\t\t\treturn;"",""\t\t\t}"",""\t\t}"",""\t}""]"
/smallsql/database/SQLParser/createDatabase(),"[""private CommandCreateDatabase createDatabase() throws SQLException{"",""        SQLToken token = nextToken();"",""        if(token == null) throw createSyntaxError( token, MISSING_EXPRESSION );"",""        return new CommandCreateDatabase( con.log, token.getName(sql));"",""    }""]"
/smallsql/database/ExpressionFunctionCharLen/getInt(),"[""final int getInt() throws Exception {"",""        if(isNull()) return 0;"","""",""        String str = param1.getString();"",""\t\t"",""\t\treturn str.length();"",""\t}""]"
/smallsql/database/SSResultSetMetaData/getColumnClassName(int),"[""public String getColumnClassName(int column) throws SQLException {"",""        switch(getColumnType(column)){"",""            case Types.TINYINT:"",""            case Types.SMALLINT:"",""            case Types.INTEGER:"",""                    return \""java.lang.Integer\"";"",""            case Types.BIT:"",""            case Types.BOOLEAN:"",""                    return \""java.lang.Boolean\"";"",""            case Types.BINARY:"",""            case Types.VARBINARY:"",""            case Types.LONGVARBINARY:"",""                    return \""[B\"";"",""            case Types.BLOB:"",""                    return \""java.sql.Blob\"";"",""            case Types.BIGINT:"",""                    return \""java.lang.Long\"";"",""            case Types.DECIMAL:"",""            case Types.NUMERIC:"",""                    return \""java.math.BigDecimal\"";"",""            case Types.REAL:"",""                    return \""java.lang.Float\"";"",""            case Types.FLOAT:"",""            case Types.DOUBLE:"",""                    return \""java.lang.Double\"";"",""            case Types.DATE:"",""                    return \""java.sql.Date\"";"",""            case Types.TIME:"",""                    return \""java.sql.Time\"";"",""            case Types.TIMESTAMP:"",""                    return \""java.sql.Timestamp\"";"",""            case Types.CHAR:"",""            case Types.VARCHAR:"",""            case Types.LONGVARCHAR:"",""            case -11: //uniqueidentifier"",""                    return \""java.lang.String\"";"",""            case Types.CLOB:"",""                    return \""java.sql.Clob\"";"",""            default: return \""java.lang.Object\"";"",""        }"",""    }""]"
/smallsql/database/DataSources/add(smallsql.database.DataSource),"[""final void add(DataSource table){"",""\t\tif(size \>= data.length ){"",""\t\t\tDataSource[] dataNew = new DataSource[size \<\< 1];"",""\t\t\tSystem.arraycopy(data, 0, dataNew, 0, size);"",""\t\t\tdata = dataNew;"",""\t\t}"",""\t\tdata[size++] = table;"",""\t}""]"
/smallsql/database/ViewResult/isFirst(),"[""boolean isFirst() throws SQLException{"",""\t\treturn commandSelect.isFirst();"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/getTypeInfo(),"[""public ResultSet getTypeInfo() throws SQLException {"",""\t\tString[] colNames = {\t\t\""TYPE_NAME\"", \t\t\t\t\""DATA_TYPE\"", \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\""PRECISION\"", \t\""LITERAL_PREFIX\"", \""LITERAL_SUFFIX\"", \t\t\""CREATE_PARAMS\"", \""NULLABLE\"", \t \""CASE_SENSITIVE\"", \""SEARCHABLE\"", \""UNSIGNED_ATTRIBUTE\"", \""FIXED_PREC_SCALE\"", \""AUTO_INCREMENT\"", \""LOCAL_TYPE_NAME\"", \""MINIMUM_SCALE\"", \""MAXIMUM_SCALE\"", \""SQL_DATA_TYPE\"", \""SQL_DATETIME_SUB\"", \""NUM_PREC_RADIX\""};"",""\t\tObject[][] data   = {"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\""\'\"",  \""\'\"",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\""0x\"", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \""0x\"", null, \""max length\"", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \""0x\"", null, \""length\"", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\""\'\"",  \""\'\"",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\""\'\"",  \""\'\"",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\""\'\"",  \""\'\"",  \""length\"", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\""\'\"",  \""\'\"",  \""length\"", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \""precision,scale\"", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \""precision,scale\"", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\""\'\"",  \""\'\"",  \""max length\"", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\""\'\"",  \""\'\"",  \""max length\"", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BOOLEAN) ),         Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\""\'\"",  \""\'\"",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\""\'\"",  \""\'\"",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIMESTAMP) ), \t  Utils.getInteger(23),\t    \t\""\'\"",  \""\'\"",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, Utils.getInteger(3), Utils.getInteger(3), null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\""\'\"",  \""\'\"",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\""0x\"", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\""\'\"",  \""\'\"",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\""\'\"",  \""\'\"",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},"",""\t\t};"",""\t\t//TODO add more data types to the list"",""\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));"",""    }""]"
/smallsql/database/RowSource/rowDeleted(),"[""/**"",""\t * If the current row is deleted."",""\t */"",""\tabstract boolean rowDeleted();""]"
/smallsql/database/SSCallableStatement/getShort(java.lang.String),"[""public short getShort(String parameterName) throws SQLException {"",""        return getShort( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/IndexDescription/save(smallsql.database.StoreImpl),"[""/**"",""\t * Save this IndexDescription in the Table definition."",""\t */"",""\tfinal void save(StoreImpl store) throws SQLException{"",""\t\tstore.writeInt(constraintType);"",""\t\tstore.writeInt(columns.size());"",""\t\tfor(int c=0; c\<columns.size(); c++){"",""\t\t\tstore.writeString( columns.get(c) );"",""\t\t}"",""\t\tstore.writeString(name);"",""\t}""]"
"/smallsql/database/StorePage/setPageData(byte[],int)","[""final void setPageData(byte[] data, int size){"",""\t\tpage = data;"",""\t\tpageSize = size;"",""\t}""]"
"/smallsql/database/JoinScroll/JoinScroll(int,smallsql.database.RowSource,smallsql.database.RowSource,smallsql.database.Expression)","[""JoinScroll( int type, RowSource left, RowSource right, Expression condition ){"",""        this.type = type;"",""        this.condition = condition;"",""        this.left = left;"",""        this.right = right;"",""        if(type == Join.FULL_JOIN){"",""            isFullNotValid = new boolean[10];"",""        }"",""    }""]"
/smallsql/database/TableViewResult/getAlias(),"[""String getAlias(){"",""\t\treturn (alias != null) ? alias : getTableView().name;"",""\t}""]"
/smallsql/database/ExpressionName/getTableName(),"[""String getTableName(){"",""\t\tif(table != null){"",""\t\t\treturn table.getName();"",""\t\t}"",""\t\treturn null;"",""\t}""]"
/smallsql/database/SSDatabaseMetaData/supportsCatalogsInDataManipulation(),"[""public boolean supportsCatalogsInDataManipulation() {"",""\t\treturn true;"",""    }""]"
/smallsql/database/SSResultSet/getByte(java.lang.String),"[""public byte getByte(String columnName) throws SQLException {"",""        return getByte( findColumn( columnName ) );"",""    }""]"
/smallsql/database/SSResultSet/getClob(int),"[""public Clob getClob(int i) throws SQLException {"",""        /**@todo: Implement this java.sql.ResultSet.getClob method*/"",""        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \""Clob object\"");"",""    }""]"
/smallsql/database/SSDatabaseMetaData/getMaxUserNameLength(),"[""public int getMaxUserNameLength() {"",""    \treturn 0;"",""    }""]"
"/smallsql/database/View/View(smallsql.database.Database,smallsql.database.SSConnection,java.lang.String,java.lang.String)","[""/**"",""\t * Constructor for a new view. Is call on execute() of CREATE VIEW. This view is not init."",""\t */"",""\tView(Database database, SSConnection con, String name, String sql) throws Exception{"",""\t\tsuper( name, new Columns() );"",""\t\tthis.sql  = sql;"",""\t\tthis.commandSelect = null;"",""\t\twrite(database, con);"",""\t}""]"
/smallsql/database/Command/clearParams(),"[""/**"",""     * Clear all parameters of a PreparedStatement"",""     */"",""    void clearParams(){"",""        for(int p=0; p\<params.size(); p++){"",""            ((ExpressionValue)params.get(p)).clear();"",""        }"",""    }""]"
/smallsql/database/Where/isScrollable(),"[""final boolean isScrollable() {"",""\t\treturn rowSource.isScrollable();"",""\t}""]"
/smallsql/junit/TestExceptions/TestExceptions(smallsql.junit.TestExceptions.TestValue),"[""TestExceptions(TestValue testValue){"",""        super(testValue.sql);"",""        this.testValue = testValue;"",""    }""]"
/smallsql/junit/TestDeleteUpdate/testUpdateMultiTables(),"[""public void testUpdateMultiTables() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\tdropTable(con,\""testUpdate1\"");"",""\t\tdropTable(con,\""testUpdate2\"");"",""\t\tStatement st = con.createStatement();"",""\t\tst.execute(\""create table testUpdate1(id1 int, value1 varchar(100))\"");"",""\t\tst.execute(\""create table testUpdate2(id2 int, value2 varchar(100))\"");"",""\t\tst.execute(\""Insert into testUpdate1 Values(11, \'qwert1\')\"");"",""\t\tst.execute(\""Insert into testUpdate2 Values(11, \'qwert2\')\"");"",""\t\t"",""\t\tst.execute(\""update testUpdate1 inner join testUpdate2 on id1=id2 Set value1=value1+\'update\', value2=value2+\'update\'\"");"",""\t\tResultSet rs = st.executeQuery(\""Select * From testUpdate1 inner join testUpdate2 on id1=id2\"");"",""\t\tassertTrue( rs.next() );"",""\t\tassertEquals( \""qwert1update\"", rs.getString(\""value1\""));"",""\t\tassertEquals( \""qwert2update\"", rs.getString(\""value2\""));"","""",""\t\tdropTable(con,\""testUpdate1\"");"",""\t\tdropTable(con,\""testUpdate2\"");"",""\t}""]"
"/smallsql/database/ExpressionArithmetic/ExpressionArithmetic(smallsql.database.Expression,smallsql.database.Expression,int)","[""ExpressionArithmetic( Expression left, Expression right, int operation){"",""\t\tsuper(FUNCTION);"",""        this.left   = left;"",""        this.right  = right;"",""        this.operation = operation;"",""        super.setParams( new Expression[]{ left, right });"",""    }""]"
/smallsql/database/SSStatement/getQueryTimeout(),"[""final public int getQueryTimeout() throws SQLException{"",""        checkStatement();"",""        return queryTimeout;"",""    }""]"
/smallsql/junit/TestTransactions/testInsertRow_Last(),"[""public void testInsertRow_Last() throws Exception{"",""\t\tConnection con = AllTests.getConnection();"",""\t\ttestInsertRow_Last(con, false);"",""\t\ttestInsertRow_Last(con, true);"",""\t\tcon.setAutoCommit(false);"",""\t\ttestInsertRow_Last(con, false);"",""\t\tcon.setAutoCommit(true);"",""\t\tcon.setAutoCommit(false);"",""\t\ttestInsertRow_Last(con, true);"",""\t\tcon.setAutoCommit(true);"",""\t}""]"
/smallsql/database/Money/unscaledValue(),"[""public long unscaledValue(){"",""        return value;"",""    }""]"
/smallsql/database/SSResultSetMetaData/isNumberDataType(int),"[""static boolean isNumberDataType(int dataType) {"",""\t\treturn isSignedDataType(dataType) || dataType == SQLTokenizer.TINYINT;"",""\t}""]"
/smallsql/database/ExpressionFunctionReturnString/isNull(),"[""boolean isNull() throws Exception {"",""\t\treturn param1.isNull();"",""\t}""]"
/smallsql/database/Expression/getType(),"[""final int getType(){return type;}""]"
/smallsql/database/TableResult/nullRow(),"[""@Override"",""    final void nullRow(){"",""\t\trow = 0;"",""    \tstore = Store.NULL;"",""    }""]"
/smallsql/database/LongLongList/LongLongList(int),"[""LongLongList(int initialSize){"",""\t\tdata = new long[initialSize*2];"",""\t}""]"
/smallsql/junit/TestTransactions/testReadWriteLock(),"[""public void testReadWriteLock() throws Exception{"",""\t\tConnection con1 = AllTests.getConnection();"",""\t\tConnection con2 = AllTests.createConnection();"",""\t\ttry{\t\t"",""\t\t\tcon1.createStatement().execute(\""Create Table transactions (i int identity, v varchar(20))\"");"",""\t\t\tcon1.createStatement().execute(\""Insert Into transactions(v) Values(\'qwert1\')\"");"","""",""\t\t\tcon1.setAutoCommit(false);"",""\t\t\tcon1.createStatement().execute(\""Update transactions Set v = \'qwert\'\"");"",""\t\t\t"",""\t\t\tlong time = System.currentTimeMillis();"",""\t\t\ttry{"",""\t\t\t\tcon2.createStatement().executeQuery(\""Select count(*) from transactions\"");"",""\t\t\t}catch(SQLException ex){"",""\t\t\t    assertSQLException(\""01000\"", 0, ex);"",""\t\t\t}\t\t"",""\t\t\tassertTrue(\""Wait time to small\"", System.currentTimeMillis()-time\>=5000);"",""\t\t}finally{"",""\t\t    con2.close();"",""\t\t\tcon1.setAutoCommit(true);"",""\t\t\tdropTable(con1, \""transactions\"");"",""\t\t}"",""\t}""]"
"/smallsql/database/Utils/like(java.lang.String,java.lang.String)","[""static boolean like(String value, String pattern){"",""\t\tif(value == null || pattern == null) return false;"",""\t\tif(pattern.length() == 0) return true;"","""",""\t\tint mIdx = 0;//index in mask Array"",""\t\tint sIdx = 0;//index in search Array"",""\t\tboolean range = false;"",""\t\tweiter:"",""\t\twhile(pattern.length() \> mIdx && value.length() \> sIdx) {"",""\t\t\tchar m = Character.toUpperCase(pattern.charAt(mIdx++));"",""\t\t\tswitch(m) {"",""\t\t\t\tcase \'%\':"",""\t\t\t\t\trange = true;"",""\t\t\t\t\tbreak;"",""\t\t\t\tcase \'_\':"",""\t\t\t\t\tsIdx++;"",""\t\t\t\t\tbreak;"",""\t\t\t\tdefault:"",""\t\t\t\t\tif(range) {//% wildcard is active"",""\t\t\t\t\t\tfor(; sIdx \< value.length(); sIdx++) {"",""\t\t\t\t\t\t\tif(Character.toUpperCase(value.charAt(sIdx)) == m) break;//Counter mustn\'t increment before break"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\tif(sIdx \>= value.length()) return false;"",""\t\t\t\t\t\tint lastmIdx = mIdx - 1;"",""\t\t\t\t\t\tsIdx++;"",""\t\t\t\t\t\twhile(pattern.length() \> mIdx && value.length() \> sIdx) {"",""\t\t\t\t\t\t\tm = Character.toUpperCase(pattern.charAt(mIdx++));"",""\t\t\t\t\t\t\tif(Character.toUpperCase(value.charAt(sIdx)) != m) {"",""\t\t\t\t\t\t\t\tif(m == \'%\' || m == \'_\') {"",""\t\t\t\t\t\t\t\t\tmIdx--;"",""\t\t\t\t\t\t\t\t\tbreak;"",""\t\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\t\tmIdx = lastmIdx;"",""\t\t\t\t\t\t\t\tcontinue weiter;"",""\t\t\t\t\t\t\t}"",""\t\t\t\t\t\t\tsIdx++;"",""\t\t\t\t\t\t}"",""\t\t\t\t\t\trange = false;"",""\t\t\t\t\t}else{"",""\t\t\t\t\t\tif(Character.toUpperCase(value.charAt(sIdx)) != m) return false;"",""\t\t\t\t\t\tsIdx++;"",""\t\t\t\t\t}"",""\t\t\t\t\tbreak;"",""\t\t\t}"",""\t\t}"",""\t\twhile(pattern.length() \> mIdx) {"",""            //Search mask is not too ends yet it may only \'%\' be contained "",""\t\t\tif(Character.toUpperCase(pattern.charAt(mIdx++)) != \'%\') return false;"",""\t\t}"",""\t\twhile(value.length() \> sIdx && !range) return false;"",""\t\treturn true;"",""\t}""]"
"/smallsql/database/Join/Join(int,smallsql.database.RowSource,smallsql.database.RowSource,smallsql.database.Expression)","[""Join( int type, RowSource left, RowSource right, Expression condition ){"",""        this.type = type;"",""        this.condition = condition;"",""        this.left = left;"",""        this.right = right;"",""    }""]"
/smallsql/database/LongTreeListEnum/reset(),"[""/**"",""\t * Reset the this list to the start point for the method getNext(). "",""\t */"",""\tfinal void reset(){"",""\t\tstack = 0;"",""\t\toffsetStack[0] = 0;"",""\t}""]"
"/smallsql/database/ExpressionArithmetic/ExpressionArithmetic(smallsql.database.Expression,smallsql.database.Expression,smallsql.database.Expression,int)","[""/**"",""     * Constructor for BETWEEN"",""     */"",""    ExpressionArithmetic( Expression left, Expression right, Expression right2, int operation){"",""\t\tsuper(FUNCTION);"",""        this.left   = left;"",""        this.right  = right;"",""        this.right2 = right2;"",""        this.operation = operation;"",""        super.setParams( new Expression[]{ left, right, right2 });"",""    }""]"
/smallsql/database/ExpressionFunctionReturnFloat/getFloat(),"[""final float getFloat() throws Exception{"",""        return (float)getDouble();"",""    }""]"
"/smallsql/database/SQLParser/join(smallsql.database.Command,smallsql.database.DataSources,smallsql.database.RowSource,int)","[""/**"",""     * read a join in a from clause."",""     */"",""    private Join join(Command cmd, DataSources tables, RowSource left, int type) throws SQLException{"",""        RowSource right = rowSource(cmd, tables, 0);"",""        SQLToken token = nextToken();"","""",""        while(true){"",""            if(token == null) {"",""            \tthrow createSyntaxError(token, Language.STXADD_JOIN_INVALID);"",""            }"","""",""            switch(token.value){"",""            \tcase SQLTokenizer.ON:"",""\t            \tif(type == Join.RIGHT_JOIN)"",""\t\t\t\t\t\treturn new Join( Join.LEFT_JOIN, right, left, expression( cmd, 0 ) );"",""\t                return new Join( type, left, right, expression( cmd, 0 ) );"",""\t            default:"",""\t                if(!right.hasAlias()){"",""\t                    right.setAlias( token.getName( sql ) );"",""\t                    token = nextToken();"",""\t                    continue;"",""\t                }"",""\t                throw createSyntaxError( token, MISSING_ON );\t                "",""            }"",""        }"",""    }""]"
"/smallsql/database/ExpressionArithmetic/ExpressionArithmetic(smallsql.database.Expression,int)","[""/**"",""     * Constructor for NOT, NEGATIVE, BIT_NOT, ISNULL and ISNOTNULL"",""     */"",""    ExpressionArithmetic( Expression left, int operation){"",""    \tsuper(FUNCTION);"",""        this.left  = left;"",""        this.operation = operation;"",""        super.setParams( new Expression[]{ left });"",""    }""]"
/smallsql/database/SSResultSet/getLong(int),"[""public long getLong(int columnIndex) throws SQLException {"",""        try{"",""            Expression expr = getValue(columnIndex);"",""            wasNull = expr.isNull();"",""            return expr.getLong();"",""        }catch(Exception e){"",""            throw SmallSQLException.createFromException( e );"",""        }"",""    }""]"
/smallsql/database/LongTreeList/loopToEndOfNode(smallsql.database.LongTreeListEnum),"[""/**"",""\t * Loop to the last entry in this node. Is used from getPrevious()."",""\t */"",""\tfinal private void loopToEndOfNode(LongTreeListEnum listEnum){"",""\t\tint nextEntry;"",""\t\tint nextOffset1, nextOffset2;"",""\t\tnextOffset1 = offset;"",""\t\toffset += 2;"",""\t\tif(listEnum.stack\<3)"",""\t\t\toffset += pointerSize;"",""\t\tdo{"",""\t\t\tnextOffset2 = nextOffset1;"",""\t\t\tnextOffset1 = offset;"",""\t\t\tnextEntry = getUnsignedShort();"",""\t\t\tif(listEnum.stack\<3)"",""\t\t\t\toffset += pointerSize;"",""\t\t}while(nextEntry != 0);"",""\t\toffset = nextOffset2;"",""\t}""]"
/smallsql/database/JoinScroll/beforeFirst(),"[""void beforeFirst() throws Exception{"",""        left.beforeFirst();"",""        right.beforeFirst();"",""        isBeforeFirst = true;"",""        fullRightRowCounter = 0;"",""        fullRowCount        = 0;"",""        fullReturnCounter   = -1;"",""    }""]"
/smallsql/database/ExpressionValue/getTableName(),"[""String getTableName(){"",""\t\treturn null;"",""\t}""]"
"/smallsql/database/DateTime/formatMillis(int,java.lang.StringBuffer)","[""private final static void formatMillis(int millis,  StringBuffer buf){"",""\t\tbuf.append(Utils.digits[ (millis / 100) % 10 ]);"",""\t\tint value = millis % 100;"",""\t\tif(value != 0){"",""\t\t\tbuf.append(Utils.digits[ value / 10 ]);"",""\t\t\tvalue %= 10;"",""\t\t\tif(value != 0)"",""\t\t\t\tbuf.append(Utils.digits[ value ]);"",""\t\t}"",""\t}""]"
/smallsql/junit/TestOther/testLike(),"[""public void testLike() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        try{"",""            con.createStatement().execute(\""Create Table Like (c varchar(20))\"");"","""",""            con.createStatement().execute(\""Insert Into Like(c) Values(\'qwert1\')\"");"",""            con.createStatement().execute(\""Insert Into Like(c) Values(\'qwert2\')\"");"",""            con.createStatement().execute(\""Insert Into Like(c) Values(\'qwert2.5\')\"");"",""            con.createStatement().execute(\""Insert Into Like(c) Values(\'awert1\')\"");"",""            con.createStatement().execute(\""Insert Into Like(c) Values(\'awert2\')\"");"",""            con.createStatement().execute(\""Insert Into Like(c) Values(\'awert3\')\"");"",""            con.createStatement().execute(\""Insert Into Like(c) Values(\'qweSGSGSrt1\')\"");"",""            "",""            assertRowCount( 2, \""Select * From Like Where c like \'qwert_\'\"" );"",""            assertRowCount( 3, \""Select * From Like Where c like \'qwert%\'\"" );"",""            assertRowCount( 2, \""Select * From Like Where c like \'qwert2%\'\"" );"","""",""            assertRowCount( 6, \""Select * From Like Where c like \'_wert%\'\"" );"",""            assertRowCount( 2, \""Select * From Like Where c like \'qwe%rt1\'\"" );"",""            assertRowCount( 3, \""Select * From Like Where c like \'qwe%rt_\'\"" );"",""            assertRowCount( 7, \""Select * From Like Where c like \'%_\'\"" );"","""",""        }finally{"",""            dropTable( con, \""Like\"" );"",""        }"",""    }""]"
/smallsql/database/ExpressionName/ExpressionName(int),"[""/**"",""     * Constructor used for aggregate functions from parser."",""     * @param type the type of the aggregate function"",""     */"",""\tExpressionName(int type){"",""\t\tsuper(type);"",""\t\t//setName( \""\"" ); if null it will be generate a automatic name"",""\t}""]"
/smallsql/database/SSCallableStatement/getFloat(java.lang.String),"[""public float getFloat(String parameterName) throws SQLException {"",""        return getFloat( findParameter( parameterName ) );"",""    }""]"
/smallsql/database/Expression/Expression(int),"[""Expression(int type){"",""\t\tthis.type = type;"",""\t}""]"
/smallsql/database/ColumnExpression/getDataType(),"[""int getDataType(){"",""\t\treturn expr.getDataType();"",""\t}""]"
/smallsql/database/MutableNumeric/MutableNumeric(int),"[""MutableNumeric(int complement){"",""        if(complement == 0){"",""            signum = 0;"",""            value = EMPTY_INTS;"",""        }else{"",""            value = new int[1];"",""            if(complement \< 0){"",""                value[0] = -complement;"",""                signum = -1;"",""            }else{"",""                value[0] = complement;"",""                signum = 1;"",""            }"",""        }"",""    }""]"
/smallsql/database/ExpressionFunctionDegrees/getDouble(),"[""final double getDouble() throws Exception{"",""\t\tif(isNull()) return 0;"",""        return Math.toDegrees( param1.getDouble() );"",""    }""]"
/smallsql/database/SSResultSetMetaData/getColumnDisplaySize(int),"[""public int getColumnDisplaySize(int column) throws SQLException {"",""        return getColumnExpression( column ).getDisplaySize();"",""    }""]"
"/smallsql/database/Command/Command(smallsql.database.Logger,smallsql.database.Expressions)","[""Command(Logger log, Expressions columnExpressions){"",""\t\tthis.log = log;"",""\t\tthis.columnExpressions = columnExpressions;"",""\t}""]"
/smallsql/database/SSDriver/jdbcCompliant(),"[""public boolean jdbcCompliant() {"",""        return true;"",""    }""]"
/smallsql/junit/TestExceptionMethods/testClosedPreparedStatement(),"[""public void testClosedPreparedStatement() throws Exception{"",""        Connection con = AllTests.getConnection();"",""        PreparedStatement pr = con.prepareStatement(\""Select ?\"");"",""        pr.setInt(1, 1);"",""        pr.close();"",""        try{"",""            pr.setInt(1, 1);"",""            fail(\""Exception should throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""HY010\"", 0, ex);"",""        }"",""        try{"",""            pr.execute();"",""            fail(\""Exception should throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""HY010\"", 0, ex);"",""        }"",""        try{"",""            pr.executeQuery();"",""            fail(\""Exception should throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""HY010\"", 0, ex);"",""        }"",""        try{"",""            pr.executeUpdate();"",""            fail(\""Exception should throw\"");"",""        }catch(SQLException ex){"",""            assertSQLException(\""HY010\"", 0, ex);"",""        }"",""    }""]"
"/smallsql/database/ExpressionValue/getInt(java.lang.Object,int)","[""static int getInt(Object obj, int dataType) throws Exception{"",""        if(obj == null) return 0;"",""        switch(dataType){"",""            case SQLTokenizer.BIT:"",""            case SQLTokenizer.BOOLEAN:"",""                return (obj == Boolean.TRUE) ? 1 : 0;"",""            case SQLTokenizer.TINYINT:"",""            case SQLTokenizer.SMALLINT:"",""            case SQLTokenizer.INT:"",""            case SQLTokenizer.BIGINT:"",""            case SQLTokenizer.REAL:"",""            case SQLTokenizer.FLOAT:"",""            case SQLTokenizer.DOUBLE:"",""            case SQLTokenizer.MONEY:"",""            case SQLTokenizer.DECIMAL:"",""            case SQLTokenizer.NUMERIC:"",""                return ((Number)obj).intValue();"",""\t\t\tcase SQLTokenizer.TIMESTAMP:"",""\t\t\tcase SQLTokenizer.TIME:"",""\t\t\tcase SQLTokenizer.DATE:"",""\t\t\tcase SQLTokenizer.SMALLDATETIME:"",""\t\t\t\treturn (int)((DateTime)obj).getTimeMillis();"",""            default:"",""\t\t\t\tString str = obj.toString().trim();"",""\t\t\t\ttry{"",""\t\t\t\t\treturn Integer.parseInt( str );"",""\t\t\t\t}catch(Throwable th){/* A NumberFormatException can occur if it a floating point number */}"",""\t\t\t\treturn (int)Double.parseDouble( str );"",""        }"",""    }""]"
"/smallsql/database/SSConnection/prepareStatement(java.lang.String,int[])","[""public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {"",""        SSPreparedStatement pr = new SSPreparedStatement( this, sql);"",""        pr.setNeedGeneratedKeys(columnIndexes);"",""        return pr;"",""    }""]"
/smallsql/database/MutableInteger/MutableInteger(int),"[""MutableInteger(int value){"",""\t\tthis.value = value;"",""\t}""]"
"/smallsql/database/IndexScrollStatus/IndexScrollStatus(smallsql.database.IndexNode,smallsql.database.Expressions)","[""IndexScrollStatus(IndexNode rootPage, Expressions expressions){\t"",""\t\tthis.rootPage\t= rootPage;"",""\t\tthis.expressions= expressions;"",""\t\treset();"",""\t}""]"
"/smallsql/database/ExpressionFunctionTimestampAdd/ExpressionFunctionTimestampAdd(int,smallsql.database.Expression,smallsql.database.Expression)","[""ExpressionFunctionTimestampAdd(int intervalType, Expression p1, Expression p2){"",""\t\tinterval = ExpressionFunctionTimestampDiff.mapIntervalType( intervalType );"",""\t\tsetParams( new Expression[]{p1,p2});"",""\t}""]"
/smallsql/database/MutableLong/toString(),"[""public String toString(){"",""\t\treturn String.valueOf(value);"",""\t}""]"
"/smallsql/database/StoreImpl/StoreImpl(smallsql.database.Table,smallsql.database.StorePage,int,long)","[""private StoreImpl( Table table, StorePage storePage, int type, long filePos ){"",""\t\tthis.table     = table;"",""\t\tthis.storePage    = storePage;"",""\t\tthis.filePos   = filePos;"",""\t\tthis.type      = type;"",""    }""]"
/smallsql/database/MemoryResult/absolute(int),"[""final boolean absolute(int row) throws SQLException{"",""\t\tif(row == 0) throw SmallSQLException.create(Language.ROW_0_ABSOLUTE);"",""\t\trowIdx = (row \> 0) ?"",""\t\t\tMath.min( row - 1, rowList.size() ):"",""\t\t\tMath.max( row +rowList.size(), -1 );"",""\t\treturn move();"",""\t}""]"
"/smallsql/database/StorePageLink/getStore(smallsql.database.Table,smallsql.database.SSConnection,int)","[""StoreImpl getStore(Table table, SSConnection con, int lock) throws Exception{"",""\t\tTableStorePage page = this.page;"",""\t\tif(page == null)"",""\t\t\treturn table.getStore( con, filePos, lock );"",""\t\twhile(page.nextLock != null) page = page.nextLock;"",""\t\treturn table.getStore( page, lock);"",""\t}""]"
